
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a2c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000057e0  08017cd0  08017cd0  00018cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d4b0  0801d4b0  0001e4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d4b8  0801d4b8  0001e4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801d4bc  0801d4bc  0001e4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000644  24000000  0801d4c0  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005c24  24000660  0801db04  0001f660  2**5
                  ALLOC
  8 ._user_heap_stack 00001404  24006284  0801db04  00020284  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 10 .RAM_D3       00000200  38000000  38000000  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .debug_info   0003b90d  00000000  00000000  0002022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006c2d  00000000  00000000  0005bb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003400  00000000  00000000  00062768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002819  00000000  00000000  00065b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004dad2  00000000  00000000  00068381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00045a52  00000000  00000000  000b5e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001ef2c2  00000000  00000000  000fb8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000c2  00000000  00000000  002eab67  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000e5f4  00000000  00000000  002eac2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000071  00000000  00000000  002f9220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000660 	.word	0x24000660
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017cb4 	.word	0x08017cb4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000664 	.word	0x24000664
 80002dc:	08017cb4 	.word	0x08017cb4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b31      	ldr	r3, [pc, #196]	@ (800044c <SystemInit+0xcc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038a:	4a30      	ldr	r2, [pc, #192]	@ (800044c <SystemInit+0xcc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b2d      	ldr	r3, [pc, #180]	@ (800044c <SystemInit+0xcc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a2c      	ldr	r2, [pc, #176]	@ (800044c <SystemInit+0xcc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000450 <SystemInit+0xd0>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000450 <SystemInit+0xd0>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003ac:	4b28      	ldr	r3, [pc, #160]	@ (8000450 <SystemInit+0xd0>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003b2:	4b27      	ldr	r3, [pc, #156]	@ (8000450 <SystemInit+0xd0>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4926      	ldr	r1, [pc, #152]	@ (8000450 <SystemInit+0xd0>)
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <SystemInit+0xd4>)
 80003ba:	4013      	ands	r3, r2
 80003bc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003be:	4b24      	ldr	r3, [pc, #144]	@ (8000450 <SystemInit+0xd0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003c4:	4b22      	ldr	r3, [pc, #136]	@ (8000450 <SystemInit+0xd0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80003ca:	4b21      	ldr	r3, [pc, #132]	@ (8000450 <SystemInit+0xd0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80003d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <SystemInit+0xd0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80003d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000450 <SystemInit+0xd0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80003dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000450 <SystemInit+0xd0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80003e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000450 <SystemInit+0xd0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80003e8:	4b19      	ldr	r3, [pc, #100]	@ (8000450 <SystemInit+0xd0>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 80003ee:	4b18      	ldr	r3, [pc, #96]	@ (8000450 <SystemInit+0xd0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80003f4:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <SystemInit+0xd0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80003fa:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <SystemInit+0xd0>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <SystemInit+0xd0>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a12      	ldr	r2, [pc, #72]	@ (8000450 <SystemInit+0xd0>)
 8000406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800040a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800040c:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <SystemInit+0xd0>)
 800040e:	2200      	movs	r2, #0
 8000410:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;  
 8000412:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <SystemInit+0xd8>)
 8000414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000416:	4a10      	ldr	r2, [pc, #64]	@ (8000458 <SystemInit+0xd8>)
 8000418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800041c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800041e:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <SystemInit+0xdc>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <SystemInit+0xe0>)
 8000424:	4013      	ands	r3, r2
 8000426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800042a:	d202      	bcs.n	8000432 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 800042c:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <SystemInit+0xe4>)
 800042e:	2201      	movs	r2, #1
 8000430:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000432:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <SystemInit+0xe8>)
 8000434:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000438:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800043a:	4b04      	ldr	r3, [pc, #16]	@ (800044c <SystemInit+0xcc>)
 800043c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000440:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	e000ed00 	.word	0xe000ed00
 8000450:	58024400 	.word	0x58024400
 8000454:	eaf6ed7f 	.word	0xeaf6ed7f
 8000458:	580000c0 	.word	0x580000c0
 800045c:	5c001000 	.word	0x5c001000
 8000460:	ffff0000 	.word	0xffff0000
 8000464:	51008108 	.word	0x51008108
 8000468:	52004000 	.word	0x52004000

0800046c <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 8000476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800047a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f000 f832 	bl	80004ec <IS42S32800J_ClockEnable>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d128      	bne.n	80004e0 <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 800048e:	2001      	movs	r0, #1
 8000490:	f000 f8e2 	bl	8000658 <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4619      	mov	r1, r3
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f000 f84a 	bl	8000534 <IS42S32800J_Precharge>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d11c      	bne.n	80004e0 <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	6819      	ldr	r1, [r3, #0]
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	461a      	mov	r2, r3
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f000 f897 	bl	80005e4 <IS42S32800J_RefreshMode>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d111      	bne.n	80004e0 <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80004bc:	6839      	ldr	r1, [r7, #0]
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f000 f85c 	bl	800057c <IS42S32800J_ModeRegConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d10a      	bne.n	80004e0 <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	4619      	mov	r1, r3
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 f8ad 	bl	8000630 <IS42S32800J_RefreshRate>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d101      	bne.n	80004e0 <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80004e0:	68fb      	ldr	r3, [r7, #12]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <IS42S32800J_ClockEnable+0x44>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80004fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000530 <IS42S32800J_ClockEnable+0x44>)
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000502:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <IS42S32800J_ClockEnable+0x44>)
 8000504:	2201      	movs	r2, #1
 8000506:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000508:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <IS42S32800J_ClockEnable+0x44>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800050e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000512:	4907      	ldr	r1, [pc, #28]	@ (8000530 <IS42S32800J_ClockEnable+0x44>)
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f013 fc57 	bl	8013dc8 <HAL_SDRAM_SendCommand>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 8000520:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000524:	e000      	b.n	8000528 <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000526:	2300      	movs	r3, #0
  }
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	24000680 	.word	0x24000680

08000534 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800053e:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <IS42S32800J_Precharge+0x44>)
 8000540:	2202      	movs	r2, #2
 8000542:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000544:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <IS42S32800J_Precharge+0x44>)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800054a:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <IS42S32800J_Precharge+0x44>)
 800054c:	2201      	movs	r2, #1
 800054e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000550:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <IS42S32800J_Precharge+0x44>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000556:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800055a:	4907      	ldr	r1, [pc, #28]	@ (8000578 <IS42S32800J_Precharge+0x44>)
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f013 fc33 	bl	8013dc8 <HAL_SDRAM_SendCommand>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d002      	beq.n	800056e <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 8000568:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800056c:	e000      	b.n	8000570 <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 800056e:	2300      	movs	r3, #0
  }
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	24000680 	.word	0x24000680

0800057c <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800058e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000594:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800059a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80005a0:	4313      	orrs	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <IS42S32800J_ModeRegConfig+0x64>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <IS42S32800J_ModeRegConfig+0x64>)
 80005b0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <IS42S32800J_ModeRegConfig+0x64>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80005b8:	4a09      	ldr	r2, [pc, #36]	@ (80005e0 <IS42S32800J_ModeRegConfig+0x64>)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80005be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005c2:	4907      	ldr	r1, [pc, #28]	@ (80005e0 <IS42S32800J_ModeRegConfig+0x64>)
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f013 fbff 	bl	8013dc8 <HAL_SDRAM_SendCommand>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005d4:	e000      	b.n	80005d8 <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 80005d6:	2300      	movs	r3, #0
  }
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	24000680 	.word	0x24000680

080005e4 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 80005f0:	4a0e      	ldr	r2, [pc, #56]	@ (800062c <IS42S32800J_RefreshMode+0x48>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 80005f6:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <IS42S32800J_RefreshMode+0x48>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <IS42S32800J_RefreshMode+0x48>)
 80005fe:	2208      	movs	r2, #8
 8000600:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <IS42S32800J_RefreshMode+0x48>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800060c:	4907      	ldr	r1, [pc, #28]	@ (800062c <IS42S32800J_RefreshMode+0x48>)
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f013 fbda 	bl	8013dc8 <HAL_SDRAM_SendCommand>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800061e:	e000      	b.n	8000622 <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 8000620:	2300      	movs	r3, #0
  }
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	24000680 	.word	0x24000680

08000630 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800063a:	6839      	ldr	r1, [r7, #0]
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f013 fbf8 	bl	8013e32 <HAL_SDRAM_ProgramRefreshRate>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 8000648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800064c:	e000      	b.n	8000650 <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 800064e:	2300      	movs	r3, #0
  }
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000660:	f008 f980 	bl	8008964 <HAL_GetTick>
 8000664:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000666:	bf00      	nop
 8000668:	f008 f97c 	bl	8008964 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	429a      	cmp	r2, r3
 8000676:	d8f7      	bhi.n	8000668 <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <NT35510_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t NT35510_RegisterBusIO (NT35510_Object_t *pObj, NT35510_IO_t *pIO)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  int32_t ret = NT35510_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d103      	bne.n	80006a0 <NT35510_RegisterBusIO+0x1c>
  {
    ret = NT35510_ERROR;
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e014      	b.n	80006ca <NT35510_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68da      	ldr	r2, [r3, #12]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = NT35510_ReadRegWrap;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a07      	ldr	r2, [pc, #28]	@ (80006d8 <NT35510_RegisterBusIO+0x54>)
 80006bc:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = NT35510_WriteRegWrap;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a06      	ldr	r2, [pc, #24]	@ (80006dc <NT35510_RegisterBusIO+0x58>)
 80006c2:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	08000f6f 	.word	0x08000f6f
 80006dc:	08000fa1 	.word	0x08000fa1

080006e0 <NT35510_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t NT35510_Init(NT35510_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  static const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
  static const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
  static const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
  static const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};

  ret =  nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg, 5);/* LV2:  Page 1 enable */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f103 0010 	add.w	r0, r3, #16
 80006f2:	2305      	movs	r3, #5
 80006f4:	4aa2      	ldr	r2, [pc, #648]	@ (8000980 <NT35510_Init+0x2a0>)
 80006f6:	21f0      	movs	r1, #240	@ 0xf0
 80006f8:	f000 fc9c 	bl	8001034 <nt35510_write_reg>
 80006fc:	6178      	str	r0, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB0, nt35510_reg1, 3);/* AVDD: 5.2V */
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f103 0010 	add.w	r0, r3, #16
 8000704:	2303      	movs	r3, #3
 8000706:	4a9f      	ldr	r2, [pc, #636]	@ (8000984 <NT35510_Init+0x2a4>)
 8000708:	21b0      	movs	r1, #176	@ 0xb0
 800070a:	f000 fc93 	bl	8001034 <nt35510_write_reg>
 800070e:	4602      	mov	r2, r0
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg2, 3); /* AVDD: Ratio */
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f103 0010 	add.w	r0, r3, #16
 800071c:	2303      	movs	r3, #3
 800071e:	4a9a      	ldr	r2, [pc, #616]	@ (8000988 <NT35510_Init+0x2a8>)
 8000720:	21b6      	movs	r1, #182	@ 0xb6
 8000722:	f000 fc87 	bl	8001034 <nt35510_write_reg>
 8000726:	4602      	mov	r2, r0
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	4413      	add	r3, r2
 800072c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg3, 3);/* AVEE: -5.2V */
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f103 0010 	add.w	r0, r3, #16
 8000734:	2303      	movs	r3, #3
 8000736:	4a95      	ldr	r2, [pc, #596]	@ (800098c <NT35510_Init+0x2ac>)
 8000738:	21b1      	movs	r1, #177	@ 0xb1
 800073a:	f000 fc7b 	bl	8001034 <nt35510_write_reg>
 800073e:	4602      	mov	r2, r0
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	4413      	add	r3, r2
 8000744:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg4, 3);/* AVEE: Ratio */
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f103 0010 	add.w	r0, r3, #16
 800074c:	2303      	movs	r3, #3
 800074e:	4a90      	ldr	r2, [pc, #576]	@ (8000990 <NT35510_Init+0x2b0>)
 8000750:	21b7      	movs	r1, #183	@ 0xb7
 8000752:	f000 fc6f 	bl	8001034 <nt35510_write_reg>
 8000756:	4602      	mov	r2, r0
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4413      	add	r3, r2
 800075c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB2, nt35510_reg5, 3);/* VCL: -2.5V */
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f103 0010 	add.w	r0, r3, #16
 8000764:	2303      	movs	r3, #3
 8000766:	4a8b      	ldr	r2, [pc, #556]	@ (8000994 <NT35510_Init+0x2b4>)
 8000768:	21b2      	movs	r1, #178	@ 0xb2
 800076a:	f000 fc63 	bl	8001034 <nt35510_write_reg>
 800076e:	4602      	mov	r2, r0
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	4413      	add	r3, r2
 8000774:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg6, 3);/* VCL: Ratio */
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f103 0010 	add.w	r0, r3, #16
 800077c:	2303      	movs	r3, #3
 800077e:	4a86      	ldr	r2, [pc, #536]	@ (8000998 <NT35510_Init+0x2b8>)
 8000780:	21b8      	movs	r1, #184	@ 0xb8
 8000782:	f000 fc57 	bl	8001034 <nt35510_write_reg>
 8000786:	4602      	mov	r2, r0
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	4413      	add	r3, r2
 800078c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBF, nt35510_reg7, 1);/* VGH: 15V (Free Pump) */
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f103 0010 	add.w	r0, r3, #16
 8000794:	2301      	movs	r3, #1
 8000796:	4a81      	ldr	r2, [pc, #516]	@ (800099c <NT35510_Init+0x2bc>)
 8000798:	21bf      	movs	r1, #191	@ 0xbf
 800079a:	f000 fc4b 	bl	8001034 <nt35510_write_reg>
 800079e:	4602      	mov	r2, r0
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	4413      	add	r3, r2
 80007a4:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB3, nt35510_reg8, 3);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f103 0010 	add.w	r0, r3, #16
 80007ac:	2303      	movs	r3, #3
 80007ae:	4a7c      	ldr	r2, [pc, #496]	@ (80009a0 <NT35510_Init+0x2c0>)
 80007b0:	21b3      	movs	r1, #179	@ 0xb3
 80007b2:	f000 fc3f 	bl	8001034 <nt35510_write_reg>
 80007b6:	4602      	mov	r2, r0
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	4413      	add	r3, r2
 80007bc:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB9, nt35510_reg9, 3);/* VGH: Ratio */ 
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f103 0010 	add.w	r0, r3, #16
 80007c4:	2303      	movs	r3, #3
 80007c6:	4a77      	ldr	r2, [pc, #476]	@ (80009a4 <NT35510_Init+0x2c4>)
 80007c8:	21b9      	movs	r1, #185	@ 0xb9
 80007ca:	f000 fc33 	bl	8001034 <nt35510_write_reg>
 80007ce:	4602      	mov	r2, r0
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	4413      	add	r3, r2
 80007d4:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg10, 3);/* VGL_REG: -10V */
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f103 0010 	add.w	r0, r3, #16
 80007dc:	2303      	movs	r3, #3
 80007de:	4a72      	ldr	r2, [pc, #456]	@ (80009a8 <NT35510_Init+0x2c8>)
 80007e0:	21b5      	movs	r1, #181	@ 0xb5
 80007e2:	f000 fc27 	bl	8001034 <nt35510_write_reg>
 80007e6:	4602      	mov	r2, r0
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4413      	add	r3, r2
 80007ec:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg12, 3);/* VGLX: Ratio */
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f103 0010 	add.w	r0, r3, #16
 80007f4:	2303      	movs	r3, #3
 80007f6:	4a6d      	ldr	r2, [pc, #436]	@ (80009ac <NT35510_Init+0x2cc>)
 80007f8:	21ba      	movs	r1, #186	@ 0xba
 80007fa:	f000 fc1b 	bl	8001034 <nt35510_write_reg>
 80007fe:	4602      	mov	r2, r0
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	4413      	add	r3, r2
 8000804:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg13, 3);/* VGMP/VGSP: 4.5V/0V */
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	f103 0010 	add.w	r0, r3, #16
 800080c:	2303      	movs	r3, #3
 800080e:	4a68      	ldr	r2, [pc, #416]	@ (80009b0 <NT35510_Init+0x2d0>)
 8000810:	21bc      	movs	r1, #188	@ 0xbc
 8000812:	f000 fc0f 	bl	8001034 <nt35510_write_reg>
 8000816:	4602      	mov	r2, r0
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	4413      	add	r3, r2
 800081c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBD, nt35510_reg14, 3);/* VGMN/VGSN:-4.5V/0V */
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f103 0010 	add.w	r0, r3, #16
 8000824:	2303      	movs	r3, #3
 8000826:	4a63      	ldr	r2, [pc, #396]	@ (80009b4 <NT35510_Init+0x2d4>)
 8000828:	21bd      	movs	r1, #189	@ 0xbd
 800082a:	f000 fc03 	bl	8001034 <nt35510_write_reg>
 800082e:	4602      	mov	r2, r0
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBE, nt35510_reg15, 2);/* VCOM: -1.325V */
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f103 0010 	add.w	r0, r3, #16
 800083c:	2302      	movs	r3, #2
 800083e:	4a5e      	ldr	r2, [pc, #376]	@ (80009b8 <NT35510_Init+0x2d8>)
 8000840:	21be      	movs	r1, #190	@ 0xbe
 8000842:	f000 fbf7 	bl	8001034 <nt35510_write_reg>
 8000846:	4602      	mov	r2, r0
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	4413      	add	r3, r2
 800084c:	617b      	str	r3, [r7, #20]

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */

  ret += nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg16, 5);/* LV2: Page 0 enable */
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f103 0010 	add.w	r0, r3, #16
 8000854:	2305      	movs	r3, #5
 8000856:	4a59      	ldr	r2, [pc, #356]	@ (80009bc <NT35510_Init+0x2dc>)
 8000858:	21f0      	movs	r1, #240	@ 0xf0
 800085a:	f000 fbeb 	bl	8001034 <nt35510_write_reg>
 800085e:	4602      	mov	r2, r0
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	4413      	add	r3, r2
 8000864:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg17, 2);/* Display optional control */
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f103 0010 	add.w	r0, r3, #16
 800086c:	2302      	movs	r3, #2
 800086e:	4a54      	ldr	r2, [pc, #336]	@ (80009c0 <NT35510_Init+0x2e0>)
 8000870:	21b1      	movs	r1, #177	@ 0xb1
 8000872:	f000 fbdf 	bl	8001034 <nt35510_write_reg>
 8000876:	4602      	mov	r2, r0
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	4413      	add	r3, r2
 800087c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg18, 1);/* Set source output data hold time */
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f103 0010 	add.w	r0, r3, #16
 8000884:	2301      	movs	r3, #1
 8000886:	4a4f      	ldr	r2, [pc, #316]	@ (80009c4 <NT35510_Init+0x2e4>)
 8000888:	21b6      	movs	r1, #182	@ 0xb6
 800088a:	f000 fbd3 	bl	8001034 <nt35510_write_reg>
 800088e:	4602      	mov	r2, r0
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	4413      	add	r3, r2
 8000894:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg19, 1);/*Display resolution control */
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f103 0010 	add.w	r0, r3, #16
 800089c:	2301      	movs	r3, #1
 800089e:	4a4a      	ldr	r2, [pc, #296]	@ (80009c8 <NT35510_Init+0x2e8>)
 80008a0:	21b5      	movs	r1, #181	@ 0xb5
 80008a2:	f000 fbc7 	bl	8001034 <nt35510_write_reg>
 80008a6:	4602      	mov	r2, r0
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	4413      	add	r3, r2
 80008ac:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg20, 2);/* Gate EQ control */
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f103 0010 	add.w	r0, r3, #16
 80008b4:	2302      	movs	r3, #2
 80008b6:	4a45      	ldr	r2, [pc, #276]	@ (80009cc <NT35510_Init+0x2ec>)
 80008b8:	21b7      	movs	r1, #183	@ 0xb7
 80008ba:	f000 fbbb 	bl	8001034 <nt35510_write_reg>
 80008be:	4602      	mov	r2, r0
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	4413      	add	r3, r2
 80008c4:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg21, 4);/* Src EQ control(Mode2) */
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f103 0010 	add.w	r0, r3, #16
 80008cc:	2304      	movs	r3, #4
 80008ce:	4a40      	ldr	r2, [pc, #256]	@ (80009d0 <NT35510_Init+0x2f0>)
 80008d0:	21b8      	movs	r1, #184	@ 0xb8
 80008d2:	f000 fbaf 	bl	8001034 <nt35510_write_reg>
 80008d6:	4602      	mov	r2, r0
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg22, 3);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f103 0010 	add.w	r0, r3, #16
 80008e4:	2303      	movs	r3, #3
 80008e6:	4a3b      	ldr	r2, [pc, #236]	@ (80009d4 <NT35510_Init+0x2f4>)
 80008e8:	21bc      	movs	r1, #188	@ 0xbc
 80008ea:	f000 fba3 	bl	8001034 <nt35510_write_reg>
 80008ee:	4602      	mov	r2, r0
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	4413      	add	r3, r2
 80008f4:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xCC, nt35510_reg23, 3);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f103 0010 	add.w	r0, r3, #16
 80008fc:	2303      	movs	r3, #3
 80008fe:	4a36      	ldr	r2, [pc, #216]	@ (80009d8 <NT35510_Init+0x2f8>)
 8000900:	21cc      	movs	r1, #204	@ 0xcc
 8000902:	f000 fb97 	bl	8001034 <nt35510_write_reg>
 8000906:	4602      	mov	r2, r0
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	4413      	add	r3, r2
 800090c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg24, 1);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f103 0010 	add.w	r0, r3, #16
 8000914:	2301      	movs	r3, #1
 8000916:	4a31      	ldr	r2, [pc, #196]	@ (80009dc <NT35510_Init+0x2fc>)
 8000918:	21ba      	movs	r1, #186	@ 0xba
 800091a:	f000 fb8b 	bl	8001034 <nt35510_write_reg>
 800091e:	4602      	mov	r2, r0
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	4413      	add	r3, r2
 8000924:	617b      	str	r3, [r7, #20]

  /* Add a delay, otherwise MADCTL not taken */
  (void)NT35510_IO_Delay(pObj, 200);
 8000926:	21c8      	movs	r1, #200	@ 0xc8
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f000 fb52 	bl	8000fd2 <NT35510_IO_Delay>

  /* Configure orientation */
  if(Orientation == NT35510_ORIENTATION_PORTRAIT)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d15b      	bne.n	80009ec <NT35510_Init+0x30c>
  {
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_portrait[1], 0);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f103 0010 	add.w	r0, r3, #16
 800093a:	2300      	movs	r3, #0
 800093c:	4a28      	ldr	r2, [pc, #160]	@ (80009e0 <NT35510_Init+0x300>)
 800093e:	2136      	movs	r1, #54	@ 0x36
 8000940:	f000 fb78 	bl	8001034 <nt35510_write_reg>
 8000944:	4602      	mov	r2, r0
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	4413      	add	r3, r2
 800094a:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f103 0010 	add.w	r0, r3, #16
 8000952:	2304      	movs	r3, #4
 8000954:	4a23      	ldr	r2, [pc, #140]	@ (80009e4 <NT35510_Init+0x304>)
 8000956:	212a      	movs	r1, #42	@ 0x2a
 8000958:	f000 fb6c 	bl	8001034 <nt35510_write_reg>
 800095c:	4602      	mov	r2, r0
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4413      	add	r3, r2
 8000962:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f103 0010 	add.w	r0, r3, #16
 800096a:	2304      	movs	r3, #4
 800096c:	4a1e      	ldr	r2, [pc, #120]	@ (80009e8 <NT35510_Init+0x308>)
 800096e:	212b      	movs	r1, #43	@ 0x2b
 8000970:	f000 fb60 	bl	8001034 <nt35510_write_reg>
 8000974:	4602      	mov	r2, r0
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	4413      	add	r3, r2
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e05a      	b.n	8000a34 <NT35510_Init+0x354>
 800097e:	bf00      	nop
 8000980:	08018038 	.word	0x08018038
 8000984:	08018040 	.word	0x08018040
 8000988:	08018044 	.word	0x08018044
 800098c:	08018048 	.word	0x08018048
 8000990:	0801804c 	.word	0x0801804c
 8000994:	08018050 	.word	0x08018050
 8000998:	08018054 	.word	0x08018054
 800099c:	08018058 	.word	0x08018058
 80009a0:	0801805c 	.word	0x0801805c
 80009a4:	08018060 	.word	0x08018060
 80009a8:	08018064 	.word	0x08018064
 80009ac:	08018068 	.word	0x08018068
 80009b0:	0801806c 	.word	0x0801806c
 80009b4:	08018070 	.word	0x08018070
 80009b8:	08018074 	.word	0x08018074
 80009bc:	08018078 	.word	0x08018078
 80009c0:	08018080 	.word	0x08018080
 80009c4:	08018084 	.word	0x08018084
 80009c8:	08018088 	.word	0x08018088
 80009cc:	0801808c 	.word	0x0801808c
 80009d0:	08018090 	.word	0x08018090
 80009d4:	08018094 	.word	0x08018094
 80009d8:	08018098 	.word	0x08018098
 80009dc:	0801809c 	.word	0x0801809c
 80009e0:	08018011 	.word	0x08018011
 80009e4:	08018014 	.word	0x08018014
 80009e8:	0801801c 	.word	0x0801801c
  }
  else
  {
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_landscape[1], 0);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f103 0010 	add.w	r0, r3, #16
 80009f2:	2300      	movs	r3, #0
 80009f4:	4a5c      	ldr	r2, [pc, #368]	@ (8000b68 <NT35510_Init+0x488>)
 80009f6:	2136      	movs	r1, #54	@ 0x36
 80009f8:	f000 fb1c 	bl	8001034 <nt35510_write_reg>
 80009fc:	4602      	mov	r2, r0
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	4413      	add	r3, r2
 8000a02:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f103 0010 	add.w	r0, r3, #16
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	4a57      	ldr	r2, [pc, #348]	@ (8000b6c <NT35510_Init+0x48c>)
 8000a0e:	212a      	movs	r1, #42	@ 0x2a
 8000a10:	f000 fb10 	bl	8001034 <nt35510_write_reg>
 8000a14:	4602      	mov	r2, r0
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	4413      	add	r3, r2
 8000a1a:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f103 0010 	add.w	r0, r3, #16
 8000a22:	2304      	movs	r3, #4
 8000a24:	4a52      	ldr	r2, [pc, #328]	@ (8000b70 <NT35510_Init+0x490>)
 8000a26:	212b      	movs	r1, #43	@ 0x2b
 8000a28:	f000 fb04 	bl	8001034 <nt35510_write_reg>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	4413      	add	r3, r2
 8000a32:	617b      	str	r3, [r7, #20]
  }

  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_SLPOUT, &nt35510_reg27[1], 0);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f103 0010 	add.w	r0, r3, #16
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8000b74 <NT35510_Init+0x494>)
 8000a3e:	2111      	movs	r1, #17
 8000a40:	f000 faf8 	bl	8001034 <nt35510_write_reg>
 8000a44:	4602      	mov	r2, r0
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	4413      	add	r3, r2
 8000a4a:	617b      	str	r3, [r7, #20]

  /* Wait for sleep out exit */
  (void)NT35510_IO_Delay(pObj, 20);
 8000a4c:	2114      	movs	r1, #20
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 fabf 	bl	8000fd2 <NT35510_IO_Delay>

  switch(ColorCoding)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d012      	beq.n	8000a80 <NT35510_Init+0x3a0>
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d11f      	bne.n	8000aa0 <NT35510_Init+0x3c0>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg36[1], 0);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f103 0010 	add.w	r0, r3, #16
 8000a66:	2300      	movs	r3, #0
 8000a68:	4a43      	ldr	r2, [pc, #268]	@ (8000b78 <NT35510_Init+0x498>)
 8000a6a:	213a      	movs	r1, #58	@ 0x3a
 8000a6c:	f000 fae2 	bl	8001034 <nt35510_write_reg>
 8000a70:	4602      	mov	r2, r0
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	4413      	add	r3, r2
 8000a76:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RBG565;
 8000a78:	4b40      	ldr	r3, [pc, #256]	@ (8000b7c <NT35510_Init+0x49c>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	605a      	str	r2, [r3, #4]
      break;
 8000a7e:	e01f      	b.n	8000ac0 <NT35510_Init+0x3e0>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f103 0010 	add.w	r0, r3, #16
 8000a86:	2300      	movs	r3, #0
 8000a88:	4a3d      	ldr	r2, [pc, #244]	@ (8000b80 <NT35510_Init+0x4a0>)
 8000a8a:	213a      	movs	r1, #58	@ 0x3a
 8000a8c:	f000 fad2 	bl	8001034 <nt35510_write_reg>
 8000a90:	4602      	mov	r2, r0
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	4413      	add	r3, r2
 8000a96:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RGB888;
 8000a98:	4b38      	ldr	r3, [pc, #224]	@ (8000b7c <NT35510_Init+0x49c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
      break;
 8000a9e:	e00f      	b.n	8000ac0 <NT35510_Init+0x3e0>
    default :
      /* Set Pixel color format to RGB888 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f103 0010 	add.w	r0, r3, #16
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	4a35      	ldr	r2, [pc, #212]	@ (8000b80 <NT35510_Init+0x4a0>)
 8000aaa:	213a      	movs	r1, #58	@ 0x3a
 8000aac:	f000 fac2 	bl	8001034 <nt35510_write_reg>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RGB888;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <NT35510_Init+0x49c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
      break;
 8000abe:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &nt35510_reg31[1], 0);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f103 0010 	add.w	r0, r3, #16
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	4a2e      	ldr	r2, [pc, #184]	@ (8000b84 <NT35510_Init+0x4a4>)
 8000aca:	2151      	movs	r1, #81	@ 0x51
 8000acc:	f000 fab2 	bl	8001034 <nt35510_write_reg>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	617b      	str	r3, [r7, #20]

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCTRLD, &nt35510_reg32[1], 0);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f103 0010 	add.w	r0, r3, #16
 8000ade:	2300      	movs	r3, #0
 8000ae0:	4a29      	ldr	r2, [pc, #164]	@ (8000b88 <NT35510_Init+0x4a8>)
 8000ae2:	2153      	movs	r1, #83	@ 0x53
 8000ae4:	f000 faa6 	bl	8001034 <nt35510_write_reg>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	4413      	add	r3, r2
 8000aee:	617b      	str	r3, [r7, #20]

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABC, &nt35510_reg33[1], 0);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f103 0010 	add.w	r0, r3, #16
 8000af6:	2300      	movs	r3, #0
 8000af8:	4a24      	ldr	r2, [pc, #144]	@ (8000b8c <NT35510_Init+0x4ac>)
 8000afa:	2155      	movs	r1, #85	@ 0x55
 8000afc:	f000 fa9a 	bl	8001034 <nt35510_write_reg>
 8000b00:	4602      	mov	r2, r0
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	4413      	add	r3, r2
 8000b06:	617b      	str	r3, [r7, #20]

  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABCMB, &nt35510_reg34[1], 0);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f103 0010 	add.w	r0, r3, #16
 8000b0e:	2300      	movs	r3, #0
 8000b10:	4a1f      	ldr	r2, [pc, #124]	@ (8000b90 <NT35510_Init+0x4b0>)
 8000b12:	215e      	movs	r1, #94	@ 0x5e
 8000b14:	f000 fa8e 	bl	8001034 <nt35510_write_reg>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	617b      	str	r3, [r7, #20]

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &nt35510_reg30[1], 0);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f103 0010 	add.w	r0, r3, #16
 8000b26:	2300      	movs	r3, #0
 8000b28:	4a1a      	ldr	r2, [pc, #104]	@ (8000b94 <NT35510_Init+0x4b4>)
 8000b2a:	2129      	movs	r1, #41	@ 0x29
 8000b2c:	f000 fa82 	bl	8001034 <nt35510_write_reg>
 8000b30:	4602      	mov	r2, r0
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	4413      	add	r3, r2
 8000b36:	617b      	str	r3, [r7, #20]

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RAMWR, &nt35510_reg35[1], 0);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f103 0010 	add.w	r0, r3, #16
 8000b3e:	2300      	movs	r3, #0
 8000b40:	4a15      	ldr	r2, [pc, #84]	@ (8000b98 <NT35510_Init+0x4b8>)
 8000b42:	212c      	movs	r1, #44	@ 0x2c
 8000b44:	f000 fa76 	bl	8001034 <nt35510_write_reg>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	617b      	str	r3, [r7, #20]

  if(ret != NT35510_OK)
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <NT35510_Init+0x47c>
  {
    ret = NT35510_ERROR;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b5a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000b5c:	697b      	ldr	r3, [r7, #20]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	08018025 	.word	0x08018025
 8000b6c:	08018028 	.word	0x08018028
 8000b70:	08018030 	.word	0x08018030
 8000b74:	080180a1 	.word	0x080180a1
 8000b78:	080180a5 	.word	0x080180a5
 8000b7c:	24000690 	.word	0x24000690
 8000b80:	080180a9 	.word	0x080180a9
 8000b84:	080180ad 	.word	0x080180ad
 8000b88:	080180b1 	.word	0x080180b1
 8000b8c:	080180b5 	.word	0x080180b5
 8000b90:	080180b9 	.word	0x080180b9
 8000b94:	080180bd 	.word	0x080180bd
 8000b98:	080180c1 	.word	0x080180c1

08000b9c <NT35510_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DeInit(NT35510_Object_t *pObj)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  return NT35510_ERROR;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <NT35510_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t NT35510_ReadID(NT35510_Object_t *pObj, uint32_t *Id)
{ 
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(nt35510_read_reg(&pObj->Ctx, NT35510_CMD_RDID2, (uint8_t *)Id, 1)!= NT35510_OK)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f103 0010 	add.w	r0, r3, #16
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	21db      	movs	r1, #219	@ 0xdb
 8000bca:	f000 fa1c 	bl	8001006 <nt35510_read_reg>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <NT35510_ReadID+0x28>
  {
    ret = NT35510_ERROR;
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e001      	b.n	8000be0 <NT35510_ReadID+0x2c>
  }
  else
  {
    ret = NT35510_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  }

  return ret;  
 8000be0:	68fb      	ldr	r3, [r7, #12]
}  
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <NT35510_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t NT35510_SetBrightness(NT35510_Object_t *pObj, uint32_t Brightness)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	1a9b      	subs	r3, r3, r2
 8000bfe:	4a10      	ldr	r2, [pc, #64]	@ (8000c40 <NT35510_SetBrightness+0x54>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	095b      	lsrs	r3, r3, #5
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &brightness, 0) != NT35510_OK)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f103 0010 	add.w	r0, r3, #16
 8000c10:	f107 020b 	add.w	r2, r7, #11
 8000c14:	2300      	movs	r3, #0
 8000c16:	2151      	movs	r1, #81	@ 0x51
 8000c18:	f000 fa0c 	bl	8001034 <nt35510_write_reg>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <NT35510_SetBrightness+0x3e>
  {
    ret = NT35510_ERROR;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e004      	b.n	8000c34 <NT35510_SetBrightness+0x48>
  }
  else
  {
    NT35510Ctx.Brightness = Brightness;
 8000c2a:	4a06      	ldr	r2, [pc, #24]	@ (8000c44 <NT35510_SetBrightness+0x58>)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	6093      	str	r3, [r2, #8]
    ret = NT35510_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8000c34:	68fb      	ldr	r3, [r7, #12]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	51eb851f 	.word	0x51eb851f
 8000c44:	24000690 	.word	0x24000690

08000c48 <NT35510_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t NT35510_GetBrightness(NT35510_Object_t *pObj, uint32_t *Brightness)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  *Brightness = NT35510Ctx.Brightness;
 8000c52:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <NT35510_GetBrightness+0x20>)
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	601a      	str	r2, [r3, #0]
  return NT35510_OK;  
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	24000690 	.word	0x24000690

08000c6c <NT35510_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DisplayOn(NT35510_Object_t *pObj)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &display, 0) != NT35510_OK)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f103 0010 	add.w	r0, r3, #16
 8000c7e:	f107 020b 	add.w	r2, r7, #11
 8000c82:	2300      	movs	r3, #0
 8000c84:	2129      	movs	r1, #41	@ 0x29
 8000c86:	f000 f9d5 	bl	8001034 <nt35510_write_reg>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <NT35510_DisplayOn+0x2c>
  {
    ret = NT35510_ERROR;
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e001      	b.n	8000c9c <NT35510_DisplayOn+0x30>
  }
  else
  {
    ret = NT35510_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <NT35510_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DisplayOff(NT35510_Object_t *pObj)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b084      	sub	sp, #16
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPOFF, &display, 0) != NT35510_OK)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f103 0010 	add.w	r0, r3, #16
 8000cb8:	f107 020b 	add.w	r2, r7, #11
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2128      	movs	r1, #40	@ 0x28
 8000cc0:	f000 f9b8 	bl	8001034 <nt35510_write_reg>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d003      	beq.n	8000cd2 <NT35510_DisplayOff+0x2c>
  {
    ret = NT35510_ERROR;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	e001      	b.n	8000cd6 <NT35510_DisplayOff+0x30>
  }
  else
  {
    ret = NT35510_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <NT35510_SetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be set
  * @retval Component status
  */
int32_t NT35510_SetOrientation(NT35510_Object_t *pObj, uint32_t Orientation)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = NT35510_MADCTR_MODE_LANDSCAPE;
 8000cea:	2360      	movs	r3, #96	@ 0x60
 8000cec:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = NT35510_MADCTR_MODE_PORTRAIT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != NT35510_ORIENTATION_LANDSCAPE) && (Orientation != NT35510_ORIENTATION_PORTRAIT))
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d006      	beq.n	8000d06 <NT35510_SetOrientation+0x26>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <NT35510_SetOrientation+0x26>
  {
    ret = NT35510_ERROR;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e04d      	b.n	8000da2 <NT35510_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == NT35510_ORIENTATION_LANDSCAPE)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d125      	bne.n	8000d58 <NT35510_SetOrientation+0x78>
  {
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RDDMADCTL, &tmp, 0);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f103 0010 	add.w	r0, r3, #16
 8000d12:	f107 020b 	add.w	r2, r7, #11
 8000d16:	2300      	movs	r3, #0
 8000d18:	210b      	movs	r1, #11
 8000d1a:	f000 f98b 	bl	8001034 <nt35510_write_reg>
 8000d1e:	60f8      	str	r0, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f103 0010 	add.w	r0, r3, #16
 8000d26:	2304      	movs	r3, #4
 8000d28:	4a23      	ldr	r2, [pc, #140]	@ (8000db8 <NT35510_SetOrientation+0xd8>)
 8000d2a:	212a      	movs	r1, #42	@ 0x2a
 8000d2c:	f000 f982 	bl	8001034 <nt35510_write_reg>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4413      	add	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f103 0010 	add.w	r0, r3, #16
 8000d3e:	2304      	movs	r3, #4
 8000d40:	4a1e      	ldr	r2, [pc, #120]	@ (8000dbc <NT35510_SetOrientation+0xdc>)
 8000d42:	212b      	movs	r1, #43	@ 0x2b
 8000d44:	f000 f976 	bl	8001034 <nt35510_write_reg>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]
    
    NT35510Ctx.Orientation = NT35510_ORIENTATION_LANDSCAPE;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <NT35510_SetOrientation+0xe0>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e024      	b.n	8000da2 <NT35510_SetOrientation+0xc2>
  }
  else
  {
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &tmp1, 0);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f103 0010 	add.w	r0, r3, #16
 8000d5e:	f107 020a 	add.w	r2, r7, #10
 8000d62:	2300      	movs	r3, #0
 8000d64:	2136      	movs	r1, #54	@ 0x36
 8000d66:	f000 f965 	bl	8001034 <nt35510_write_reg>
 8000d6a:	60f8      	str	r0, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f103 0010 	add.w	r0, r3, #16
 8000d72:	2304      	movs	r3, #4
 8000d74:	4a13      	ldr	r2, [pc, #76]	@ (8000dc4 <NT35510_SetOrientation+0xe4>)
 8000d76:	212a      	movs	r1, #42	@ 0x2a
 8000d78:	f000 f95c 	bl	8001034 <nt35510_write_reg>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f103 0010 	add.w	r0, r3, #16
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc8 <NT35510_SetOrientation+0xe8>)
 8000d8e:	212b      	movs	r1, #43	@ 0x2b
 8000d90:	f000 f950 	bl	8001034 <nt35510_write_reg>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
    
    NT35510Ctx.Orientation = NT35510_ORIENTATION_PORTRAIT;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <NT35510_SetOrientation+0xe0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != NT35510_OK)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <NT35510_SetOrientation+0xce>
  {
    ret = NT35510_ERROR;
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dac:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	08018028 	.word	0x08018028
 8000dbc:	08018030 	.word	0x08018030
 8000dc0:	24000690 	.word	0x24000690
 8000dc4:	08018014 	.word	0x08018014
 8000dc8:	0801801c 	.word	0x0801801c

08000dcc <NT35510_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t NT35510_GetOrientation(NT35510_Object_t *pObj, uint32_t *Orientation)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = NT35510Ctx.Orientation;
 8000dd6:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <NT35510_GetOrientation+0x20>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	601a      	str	r2, [r3, #0]
  
  return NT35510_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	24000690 	.word	0x24000690

08000df0 <NT35510_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t NT35510_GetXSize(NT35510_Object_t *pObj, uint32_t *Xsize)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <NT35510_GetXSize+0x44>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <NT35510_GetXSize+0x18>
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d005      	beq.n	8000e12 <NT35510_GetXSize+0x22>
 8000e06:	e009      	b.n	8000e1c <NT35510_GetXSize+0x2c>
  {
  case NT35510_ORIENTATION_PORTRAIT:
    *Xsize = NT35510_480X800_WIDTH;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000e0e:	601a      	str	r2, [r3, #0]
    break;
 8000e10:	e009      	b.n	8000e26 <NT35510_GetXSize+0x36>
  case NT35510_ORIENTATION_LANDSCAPE:
    *Xsize = NT35510_800X480_WIDTH;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000e18:	601a      	str	r2, [r3, #0]
    break;
 8000e1a:	e004      	b.n	8000e26 <NT35510_GetXSize+0x36>
  default:
    *Xsize = NT35510_800X480_WIDTH;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000e22:	601a      	str	r2, [r3, #0]
    break;
 8000e24:	bf00      	nop
  }
  
  return NT35510_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	24000690 	.word	0x24000690

08000e38 <NT35510_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t NT35510_GetYSize(NT35510_Object_t *pObj, uint32_t *Ysize)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <NT35510_GetYSize+0x44>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <NT35510_GetYSize+0x18>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d005      	beq.n	8000e5a <NT35510_GetYSize+0x22>
 8000e4e:	e009      	b.n	8000e64 <NT35510_GetYSize+0x2c>
  {
  case NT35510_ORIENTATION_PORTRAIT:
    *Ysize = NT35510_480X800_HEIGHT;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000e56:	601a      	str	r2, [r3, #0]
    break;
 8000e58:	e009      	b.n	8000e6e <NT35510_GetYSize+0x36>
  case NT35510_ORIENTATION_LANDSCAPE:
    *Ysize = NT35510_800X480_HEIGHT;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000e60:	601a      	str	r2, [r3, #0]
    break;
 8000e62:	e004      	b.n	8000e6e <NT35510_GetYSize+0x36>
  default:
    *Ysize = NT35510_800X480_HEIGHT;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000e6a:	601a      	str	r2, [r3, #0]
    break;
 8000e6c:	bf00      	nop
  }
  
  return NT35510_OK;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	24000690 	.word	0x24000690

08000e80 <NT35510_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t NT35510_SetCursor(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <NT35510_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t NT35510_DrawBitmap(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <NT35510_FillRGBRect>:

int32_t NT35510_FillRGBRect(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b085      	sub	sp, #20
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <NT35510_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_DrawHLine(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <NT35510_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_DrawVLine(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <NT35510_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_FillRect(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <NT35510_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t NT35510_GetPixel(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <NT35510_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t NT35510_SetPixel(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <NT35510_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8000f6e:	b590      	push	{r4, r7, lr}
 8000f70:	b087      	sub	sp, #28
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	817b      	strh	r3, [r7, #10]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	813b      	strh	r3, [r7, #8]
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	689c      	ldr	r4, [r3, #8]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	8818      	ldrh	r0, [r3, #0]
 8000f8e:	893b      	ldrh	r3, [r7, #8]
 8000f90:	8979      	ldrh	r1, [r7, #10]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	47a0      	blx	r4
 8000f96:	4603      	mov	r3, r0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <NT35510_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	461a      	mov	r2, r3
 8000fac:	460b      	mov	r3, r1
 8000fae:	817b      	strh	r3, [r7, #10]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	813b      	strh	r3, [r7, #8]
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	685c      	ldr	r4, [r3, #4]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	8818      	ldrh	r0, [r3, #0]
 8000fc0:	893b      	ldrh	r3, [r7, #8]
 8000fc2:	8979      	ldrh	r1, [r7, #10]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	47a0      	blx	r4
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd90      	pop	{r4, r7, pc}

08000fd2 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay  Delay in ms
  */
static int32_t NT35510_IO_Delay(NT35510_Object_t *pObj, uint32_t Delay)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	4798      	blx	r3
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8000fe6:	bf00      	nop
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	4798      	blx	r3
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f5      	bhi.n	8000fe8 <NT35510_IO_Delay+0x16>
  {
  }
  return NT35510_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <nt35510_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t nt35510_read_reg(nt35510_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8001006:	b590      	push	{r4, r7, lr}
 8001008:	b085      	sub	sp, #20
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	461a      	mov	r2, r3
 8001012:	460b      	mov	r3, r1
 8001014:	817b      	strh	r3, [r7, #10]
 8001016:	4613      	mov	r3, r2
 8001018:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	685c      	ldr	r4, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6898      	ldr	r0, [r3, #8]
 8001022:	893b      	ldrh	r3, [r7, #8]
 8001024:	8979      	ldrh	r1, [r7, #10]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	47a0      	blx	r4
 800102a:	4603      	mov	r3, r0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	bd90      	pop	{r4, r7, pc}

08001034 <nt35510_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t nt35510_write_reg(nt35510_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	461a      	mov	r2, r3
 8001040:	460b      	mov	r3, r1
 8001042:	817b      	strh	r3, [r7, #10]
 8001044:	4613      	mov	r3, r2
 8001046:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681c      	ldr	r4, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6898      	ldr	r0, [r3, #8]
 8001050:	893b      	ldrh	r3, [r7, #8]
 8001052:	8979      	ldrh	r1, [r7, #10]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	47a0      	blx	r4
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bd90      	pop	{r4, r7, pc}
	...

08001064 <OTM8009A_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OTM8009A_RegisterBusIO (OTM8009A_Object_t *pObj, OTM8009A_IO_t *pIO)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  int32_t ret = OTM8009A_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <OTM8009A_RegisterBusIO+0x1c>
  {
    ret = OTM8009A_ERROR;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e014      	b.n	80010aa <OTM8009A_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a07      	ldr	r2, [pc, #28]	@ (80010b8 <OTM8009A_RegisterBusIO+0x54>)
 800109c:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a06      	ldr	r2, [pc, #24]	@ (80010bc <OTM8009A_RegisterBusIO+0x58>)
 80010a2:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	0800201f 	.word	0x0800201f
 80010bc:	08002051 	.word	0x08002051

080010c0 <OTM8009A_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t OTM8009A_Init(OTM8009A_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
    0xE0,0xF0,0x00,OTM8009A_COLMOD_RGB565,OTM8009A_COLMOD_RGB888,0x7F,0x2C,0x02,0xFF,0x00,
    0x00,0x00,0x66,0xB6,0x06,0xB1,0x06};
  
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */ 
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f103 0010 	add.w	r0, r3, #16
 80010d2:	2300      	movs	r3, #0
 80010d4:	4abf      	ldr	r2, [pc, #764]	@ (80013d4 <OTM8009A_Init+0x314>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	f001 f804 	bl	80020e4 <otm8009a_write_reg>
 80010dc:	6178      	str	r0, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f103 0010 	add.w	r0, r3, #16
 80010e4:	2303      	movs	r3, #3
 80010e6:	4abc      	ldr	r2, [pc, #752]	@ (80013d8 <OTM8009A_Init+0x318>)
 80010e8:	21ff      	movs	r1, #255	@ 0xff
 80010ea:	f000 fffb 	bl	80020e4 <otm8009a_write_reg>
 80010ee:	4602      	mov	r2, r0
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4413      	add	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]
  
  /* Enter ORISE Command 2 */
  /* Shift address to 0x80 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f103 0010 	add.w	r0, r3, #16
 80010fc:	2300      	movs	r3, #0
 80010fe:	4ab7      	ldr	r2, [pc, #732]	@ (80013dc <OTM8009A_Init+0x31c>)
 8001100:	2100      	movs	r1, #0
 8001102:	f000 ffef 	bl	80020e4 <otm8009a_write_reg>
 8001106:	4602      	mov	r2, r0
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	4413      	add	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f103 0010 	add.w	r0, r3, #16
 8001114:	2302      	movs	r3, #2
 8001116:	4ab2      	ldr	r2, [pc, #712]	@ (80013e0 <OTM8009A_Init+0x320>)
 8001118:	21ff      	movs	r1, #255	@ 0xff
 800111a:	f000 ffe3 	bl	80020e4 <otm8009a_write_reg>
 800111e:	4602      	mov	r2, r0
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	4413      	add	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f103 0010 	add.w	r0, r3, #16
 800112c:	2300      	movs	r3, #0
 800112e:	4aab      	ldr	r2, [pc, #684]	@ (80013dc <OTM8009A_Init+0x31c>)
 8001130:	2100      	movs	r1, #0
 8001132:	f000 ffd7 	bl	80020e4 <otm8009a_write_reg>
 8001136:	4602      	mov	r2, r0
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	4413      	add	r3, r2
 800113c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f103 0010 	add.w	r0, r3, #16
 8001144:	2300      	movs	r3, #0
 8001146:	4aa7      	ldr	r2, [pc, #668]	@ (80013e4 <OTM8009A_Init+0x324>)
 8001148:	21c4      	movs	r1, #196	@ 0xc4
 800114a:	f000 ffcb 	bl	80020e4 <otm8009a_write_reg>
 800114e:	4602      	mov	r2, r0
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	4413      	add	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
  
  (void)OTM8009A_IO_Delay(pObj, 10);
 8001156:	210a      	movs	r1, #10
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 ff92 	bl	8002082 <OTM8009A_IO_Delay>
  /* Not documented */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f103 0010 	add.w	r0, r3, #16
 8001164:	2300      	movs	r3, #0
 8001166:	4aa0      	ldr	r2, [pc, #640]	@ (80013e8 <OTM8009A_Init+0x328>)
 8001168:	2100      	movs	r1, #0
 800116a:	f000 ffbb 	bl	80020e4 <otm8009a_write_reg>
 800116e:	4602      	mov	r2, r0
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	4413      	add	r3, r2
 8001174:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f103 0010 	add.w	r0, r3, #16
 800117c:	2300      	movs	r3, #0
 800117e:	4a9b      	ldr	r2, [pc, #620]	@ (80013ec <OTM8009A_Init+0x32c>)
 8001180:	21c4      	movs	r1, #196	@ 0xc4
 8001182:	f000 ffaf 	bl	80020e4 <otm8009a_write_reg>
 8001186:	4602      	mov	r2, r0
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	4413      	add	r3, r2
 800118c:	617b      	str	r3, [r7, #20]
  (void)OTM8009A_IO_Delay(pObj, 10);
 800118e:	210a      	movs	r1, #10
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 ff76 	bl	8002082 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////
  
  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f103 0010 	add.w	r0, r3, #16
 800119c:	2300      	movs	r3, #0
 800119e:	4a94      	ldr	r2, [pc, #592]	@ (80013f0 <OTM8009A_Init+0x330>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	f000 ff9f 	bl	80020e4 <otm8009a_write_reg>
 80011a6:	4602      	mov	r2, r0
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	4413      	add	r3, r2
 80011ac:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f103 0010 	add.w	r0, r3, #16
 80011b4:	2300      	movs	r3, #0
 80011b6:	4a8f      	ldr	r2, [pc, #572]	@ (80013f4 <OTM8009A_Init+0x334>)
 80011b8:	21c5      	movs	r1, #197	@ 0xc5
 80011ba:	f000 ff93 	bl	80020e4 <otm8009a_write_reg>
 80011be:	4602      	mov	r2, r0
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f103 0010 	add.w	r0, r3, #16
 80011cc:	2300      	movs	r3, #0
 80011ce:	4a8a      	ldr	r2, [pc, #552]	@ (80013f8 <OTM8009A_Init+0x338>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	f000 ff87 	bl	80020e4 <otm8009a_write_reg>
 80011d6:	4602      	mov	r2, r0
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	4413      	add	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f103 0010 	add.w	r0, r3, #16
 80011e4:	2300      	movs	r3, #0
 80011e6:	4a85      	ldr	r2, [pc, #532]	@ (80013fc <OTM8009A_Init+0x33c>)
 80011e8:	21c5      	movs	r1, #197	@ 0xc5
 80011ea:	f000 ff7b 	bl	80020e4 <otm8009a_write_reg>
 80011ee:	4602      	mov	r2, r0
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]
  
  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f103 0010 	add.w	r0, r3, #16
 80011fc:	2300      	movs	r3, #0
 80011fe:	4a80      	ldr	r2, [pc, #512]	@ (8001400 <OTM8009A_Init+0x340>)
 8001200:	2100      	movs	r1, #0
 8001202:	f000 ff6f 	bl	80020e4 <otm8009a_write_reg>
 8001206:	4602      	mov	r2, r0
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	4413      	add	r3, r2
 800120c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f103 0010 	add.w	r0, r3, #16
 8001214:	2300      	movs	r3, #0
 8001216:	4a7b      	ldr	r2, [pc, #492]	@ (8001404 <OTM8009A_Init+0x344>)
 8001218:	21c0      	movs	r1, #192	@ 0xc0
 800121a:	f000 ff63 	bl	80020e4 <otm8009a_write_reg>
 800121e:	4602      	mov	r2, r0
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	4413      	add	r3, r2
 8001224:	617b      	str	r3, [r7, #20]
  
  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f103 0010 	add.w	r0, r3, #16
 800122c:	2300      	movs	r3, #0
 800122e:	4a69      	ldr	r2, [pc, #420]	@ (80013d4 <OTM8009A_Init+0x314>)
 8001230:	2100      	movs	r1, #0
 8001232:	f000 ff57 	bl	80020e4 <otm8009a_write_reg>
 8001236:	4602      	mov	r2, r0
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	4413      	add	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f103 0010 	add.w	r0, r3, #16
 8001244:	2300      	movs	r3, #0
 8001246:	4a70      	ldr	r2, [pc, #448]	@ (8001408 <OTM8009A_Init+0x348>)
 8001248:	21d9      	movs	r1, #217	@ 0xd9
 800124a:	f000 ff4b 	bl	80020e4 <otm8009a_write_reg>
 800124e:	4602      	mov	r2, r0
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	4413      	add	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
  
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f103 0010 	add.w	r0, r3, #16
 800125c:	2300      	movs	r3, #0
 800125e:	4a6b      	ldr	r2, [pc, #428]	@ (800140c <OTM8009A_Init+0x34c>)
 8001260:	2100      	movs	r1, #0
 8001262:	f000 ff3f 	bl	80020e4 <otm8009a_write_reg>
 8001266:	4602      	mov	r2, r0
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	4413      	add	r3, r2
 800126c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f103 0010 	add.w	r0, r3, #16
 8001274:	2300      	movs	r3, #0
 8001276:	4a66      	ldr	r2, [pc, #408]	@ (8001410 <OTM8009A_Init+0x350>)
 8001278:	21c1      	movs	r1, #193	@ 0xc1
 800127a:	f000 ff33 	bl	80020e4 <otm8009a_write_reg>
 800127e:	4602      	mov	r2, r0
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	4413      	add	r3, r2
 8001284:	617b      	str	r3, [r7, #20]
  
  /* Video mode internal */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f103 0010 	add.w	r0, r3, #16
 800128c:	2300      	movs	r3, #0
 800128e:	4a61      	ldr	r2, [pc, #388]	@ (8001414 <OTM8009A_Init+0x354>)
 8001290:	2100      	movs	r1, #0
 8001292:	f000 ff27 	bl	80020e4 <otm8009a_write_reg>
 8001296:	4602      	mov	r2, r0
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	4413      	add	r3, r2
 800129c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f103 0010 	add.w	r0, r3, #16
 80012a4:	2300      	movs	r3, #0
 80012a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001418 <OTM8009A_Init+0x358>)
 80012a8:	21c1      	movs	r1, #193	@ 0xc1
 80012aa:	f000 ff1b 	bl	80020e4 <otm8009a_write_reg>
 80012ae:	4602      	mov	r2, r0
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4413      	add	r3, r2
 80012b4:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f103 0010 	add.w	r0, r3, #16
 80012bc:	2300      	movs	r3, #0
 80012be:	4a57      	ldr	r2, [pc, #348]	@ (800141c <OTM8009A_Init+0x35c>)
 80012c0:	2100      	movs	r1, #0
 80012c2:	f000 ff0f 	bl	80020e4 <otm8009a_write_reg>
 80012c6:	4602      	mov	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	4413      	add	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f103 0010 	add.w	r0, r3, #16
 80012d4:	2300      	movs	r3, #0
 80012d6:	4a52      	ldr	r2, [pc, #328]	@ (8001420 <OTM8009A_Init+0x360>)
 80012d8:	21c5      	movs	r1, #197	@ 0xc5
 80012da:	f000 ff03 	bl	80020e4 <otm8009a_write_reg>
 80012de:	4602      	mov	r2, r0
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	4413      	add	r3, r2
 80012e4:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f103 0010 	add.w	r0, r3, #16
 80012ec:	2300      	movs	r3, #0
 80012ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001424 <OTM8009A_Init+0x364>)
 80012f0:	2100      	movs	r1, #0
 80012f2:	f000 fef7 	bl	80020e4 <otm8009a_write_reg>
 80012f6:	4602      	mov	r2, r0
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	4413      	add	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f103 0010 	add.w	r0, r3, #16
 8001304:	2300      	movs	r3, #0
 8001306:	4a3d      	ldr	r2, [pc, #244]	@ (80013fc <OTM8009A_Init+0x33c>)
 8001308:	21c5      	movs	r1, #197	@ 0xc5
 800130a:	f000 feeb 	bl	80020e4 <otm8009a_write_reg>
 800130e:	4602      	mov	r2, r0
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	4413      	add	r3, r2
 8001314:	617b      	str	r3, [r7, #20]
  
  /* GVDD/NGVDD settings */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f103 0010 	add.w	r0, r3, #16
 800131c:	2300      	movs	r3, #0
 800131e:	4a2d      	ldr	r2, [pc, #180]	@ (80013d4 <OTM8009A_Init+0x314>)
 8001320:	2100      	movs	r1, #0
 8001322:	f000 fedf 	bl	80020e4 <otm8009a_write_reg>
 8001326:	4602      	mov	r2, r0
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	4413      	add	r3, r2
 800132c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f103 0010 	add.w	r0, r3, #16
 8001334:	2302      	movs	r3, #2
 8001336:	4a3c      	ldr	r2, [pc, #240]	@ (8001428 <OTM8009A_Init+0x368>)
 8001338:	21d8      	movs	r1, #216	@ 0xd8
 800133a:	f000 fed3 	bl	80020e4 <otm8009a_write_reg>
 800133e:	4602      	mov	r2, r0
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	4413      	add	r3, r2
 8001344:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f103 0010 	add.w	r0, r3, #16
 800134c:	2300      	movs	r3, #0
 800134e:	4a37      	ldr	r2, [pc, #220]	@ (800142c <OTM8009A_Init+0x36c>)
 8001350:	2100      	movs	r1, #0
 8001352:	f000 fec7 	bl	80020e4 <otm8009a_write_reg>
 8001356:	4602      	mov	r2, r0
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4413      	add	r3, r2
 800135c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f103 0010 	add.w	r0, r3, #16
 8001364:	2300      	movs	r3, #0
 8001366:	4a32      	ldr	r2, [pc, #200]	@ (8001430 <OTM8009A_Init+0x370>)
 8001368:	21c5      	movs	r1, #197	@ 0xc5
 800136a:	f000 febb 	bl	80020e4 <otm8009a_write_reg>
 800136e:	4602      	mov	r2, r0
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4413      	add	r3, r2
 8001374:	617b      	str	r3, [r7, #20]
  
  /* Panel display timing Setting 3 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f103 0010 	add.w	r0, r3, #16
 800137c:	2300      	movs	r3, #0
 800137e:	4a2d      	ldr	r2, [pc, #180]	@ (8001434 <OTM8009A_Init+0x374>)
 8001380:	2100      	movs	r1, #0
 8001382:	f000 feaf 	bl	80020e4 <otm8009a_write_reg>
 8001386:	4602      	mov	r2, r0
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	4413      	add	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f103 0010 	add.w	r0, r3, #16
 8001394:	2300      	movs	r3, #0
 8001396:	4a28      	ldr	r2, [pc, #160]	@ (8001438 <OTM8009A_Init+0x378>)
 8001398:	21c0      	movs	r1, #192	@ 0xc0
 800139a:	f000 fea3 	bl	80020e4 <otm8009a_write_reg>
 800139e:	4602      	mov	r2, r0
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
  
  /* Power control 1 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f103 0010 	add.w	r0, r3, #16
 80013ac:	2300      	movs	r3, #0
 80013ae:	4a23      	ldr	r2, [pc, #140]	@ (800143c <OTM8009A_Init+0x37c>)
 80013b0:	2100      	movs	r1, #0
 80013b2:	f000 fe97 	bl	80020e4 <otm8009a_write_reg>
 80013b6:	4602      	mov	r2, r0
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	4413      	add	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f103 0010 	add.w	r0, r3, #16
 80013c4:	2300      	movs	r3, #0
 80013c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001440 <OTM8009A_Init+0x380>)
 80013c8:	21c5      	movs	r1, #197	@ 0xc5
 80013ca:	f000 fe8b 	bl	80020e4 <otm8009a_write_reg>
 80013ce:	4602      	mov	r2, r0
 80013d0:	e038      	b.n	8001444 <OTM8009A_Init+0x384>
 80013d2:	bf00      	nop
 80013d4:	080180cd 	.word	0x080180cd
 80013d8:	08018100 	.word	0x08018100
 80013dc:	080180ce 	.word	0x080180ce
 80013e0:	08018104 	.word	0x08018104
 80013e4:	080180cf 	.word	0x080180cf
 80013e8:	080180d0 	.word	0x080180d0
 80013ec:	080180d1 	.word	0x080180d1
 80013f0:	080180d2 	.word	0x080180d2
 80013f4:	080180d3 	.word	0x080180d3
 80013f8:	080180d4 	.word	0x080180d4
 80013fc:	080180d5 	.word	0x080180d5
 8001400:	080180d6 	.word	0x080180d6
 8001404:	080180d7 	.word	0x080180d7
 8001408:	080180d8 	.word	0x080180d8
 800140c:	080180d9 	.word	0x080180d9
 8001410:	080180da 	.word	0x080180da
 8001414:	080180db 	.word	0x080180db
 8001418:	080180dc 	.word	0x080180dc
 800141c:	080180dd 	.word	0x080180dd
 8001420:	080180de 	.word	0x080180de
 8001424:	080180df 	.word	0x080180df
 8001428:	08018108 	.word	0x08018108
 800142c:	080180e0 	.word	0x080180e0
 8001430:	080180e1 	.word	0x080180e1
 8001434:	080180e2 	.word	0x080180e2
 8001438:	080180e3 	.word	0x080180e3
 800143c:	080180e4 	.word	0x080180e4
 8001440:	080180e5 	.word	0x080180e5
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4413      	add	r3, r2
 8001448:	617b      	str	r3, [r7, #20]
  
  /* Source driver precharge */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f103 0010 	add.w	r0, r3, #16
 8001450:	2300      	movs	r3, #0
 8001452:	4abe      	ldr	r2, [pc, #760]	@ (800174c <OTM8009A_Init+0x68c>)
 8001454:	2100      	movs	r1, #0
 8001456:	f000 fe45 	bl	80020e4 <otm8009a_write_reg>
 800145a:	4602      	mov	r2, r0
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	4413      	add	r3, r2
 8001460:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f103 0010 	add.w	r0, r3, #16
 8001468:	2300      	movs	r3, #0
 800146a:	4ab9      	ldr	r2, [pc, #740]	@ (8001750 <OTM8009A_Init+0x690>)
 800146c:	21c4      	movs	r1, #196	@ 0xc4
 800146e:	f000 fe39 	bl	80020e4 <otm8009a_write_reg>
 8001472:	4602      	mov	r2, r0
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	4413      	add	r3, r2
 8001478:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f103 0010 	add.w	r0, r3, #16
 8001480:	2300      	movs	r3, #0
 8001482:	4ab4      	ldr	r2, [pc, #720]	@ (8001754 <OTM8009A_Init+0x694>)
 8001484:	2100      	movs	r1, #0
 8001486:	f000 fe2d 	bl	80020e4 <otm8009a_write_reg>
 800148a:	4602      	mov	r2, r0
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4413      	add	r3, r2
 8001490:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f103 0010 	add.w	r0, r3, #16
 8001498:	2300      	movs	r3, #0
 800149a:	4aaf      	ldr	r2, [pc, #700]	@ (8001758 <OTM8009A_Init+0x698>)
 800149c:	21c1      	movs	r1, #193	@ 0xc1
 800149e:	f000 fe21 	bl	80020e4 <otm8009a_write_reg>
 80014a2:	4602      	mov	r2, r0
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	4413      	add	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f103 0010 	add.w	r0, r3, #16
 80014b0:	2300      	movs	r3, #0
 80014b2:	4aaa      	ldr	r2, [pc, #680]	@ (800175c <OTM8009A_Init+0x69c>)
 80014b4:	2100      	movs	r1, #0
 80014b6:	f000 fe15 	bl	80020e4 <otm8009a_write_reg>
 80014ba:	4602      	mov	r2, r0
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	4413      	add	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f103 0010 	add.w	r0, r3, #16
 80014c8:	2302      	movs	r3, #2
 80014ca:	4aa5      	ldr	r2, [pc, #660]	@ (8001760 <OTM8009A_Init+0x6a0>)
 80014cc:	21b3      	movs	r1, #179	@ 0xb3
 80014ce:	f000 fe09 	bl	80020e4 <otm8009a_write_reg>
 80014d2:	4602      	mov	r2, r0
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	4413      	add	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
  
  /* GOAVST */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f103 0010 	add.w	r0, r3, #16
 80014e0:	2300      	movs	r3, #0
 80014e2:	4aa0      	ldr	r2, [pc, #640]	@ (8001764 <OTM8009A_Init+0x6a4>)
 80014e4:	2100      	movs	r1, #0
 80014e6:	f000 fdfd 	bl	80020e4 <otm8009a_write_reg>
 80014ea:	4602      	mov	r2, r0
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f103 0010 	add.w	r0, r3, #16
 80014f8:	2306      	movs	r3, #6
 80014fa:	4a9b      	ldr	r2, [pc, #620]	@ (8001768 <OTM8009A_Init+0x6a8>)
 80014fc:	21ce      	movs	r1, #206	@ 0xce
 80014fe:	f000 fdf1 	bl	80020e4 <otm8009a_write_reg>
 8001502:	4602      	mov	r2, r0
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	4413      	add	r3, r2
 8001508:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f103 0010 	add.w	r0, r3, #16
 8001510:	2300      	movs	r3, #0
 8001512:	4a96      	ldr	r2, [pc, #600]	@ (800176c <OTM8009A_Init+0x6ac>)
 8001514:	2100      	movs	r1, #0
 8001516:	f000 fde5 	bl	80020e4 <otm8009a_write_reg>
 800151a:	4602      	mov	r2, r0
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4413      	add	r3, r2
 8001520:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f103 0010 	add.w	r0, r3, #16
 8001528:	230e      	movs	r3, #14
 800152a:	4a91      	ldr	r2, [pc, #580]	@ (8001770 <OTM8009A_Init+0x6b0>)
 800152c:	21ce      	movs	r1, #206	@ 0xce
 800152e:	f000 fdd9 	bl	80020e4 <otm8009a_write_reg>
 8001532:	4602      	mov	r2, r0
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	4413      	add	r3, r2
 8001538:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f103 0010 	add.w	r0, r3, #16
 8001540:	2300      	movs	r3, #0
 8001542:	4a8c      	ldr	r2, [pc, #560]	@ (8001774 <OTM8009A_Init+0x6b4>)
 8001544:	2100      	movs	r1, #0
 8001546:	f000 fdcd 	bl	80020e4 <otm8009a_write_reg>
 800154a:	4602      	mov	r2, r0
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	4413      	add	r3, r2
 8001550:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f103 0010 	add.w	r0, r3, #16
 8001558:	230e      	movs	r3, #14
 800155a:	4a87      	ldr	r2, [pc, #540]	@ (8001778 <OTM8009A_Init+0x6b8>)
 800155c:	21ce      	movs	r1, #206	@ 0xce
 800155e:	f000 fdc1 	bl	80020e4 <otm8009a_write_reg>
 8001562:	4602      	mov	r2, r0
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	4413      	add	r3, r2
 8001568:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f103 0010 	add.w	r0, r3, #16
 8001570:	2300      	movs	r3, #0
 8001572:	4a82      	ldr	r2, [pc, #520]	@ (800177c <OTM8009A_Init+0x6bc>)
 8001574:	2100      	movs	r1, #0
 8001576:	f000 fdb5 	bl	80020e4 <otm8009a_write_reg>
 800157a:	4602      	mov	r2, r0
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	4413      	add	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f103 0010 	add.w	r0, r3, #16
 8001588:	230a      	movs	r3, #10
 800158a:	4a7d      	ldr	r2, [pc, #500]	@ (8001780 <OTM8009A_Init+0x6c0>)
 800158c:	21cf      	movs	r1, #207	@ 0xcf
 800158e:	f000 fda9 	bl	80020e4 <otm8009a_write_reg>
 8001592:	4602      	mov	r2, r0
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4413      	add	r3, r2
 8001598:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f103 0010 	add.w	r0, r3, #16
 80015a0:	2300      	movs	r3, #0
 80015a2:	4a78      	ldr	r2, [pc, #480]	@ (8001784 <OTM8009A_Init+0x6c4>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	f000 fd9d 	bl	80020e4 <otm8009a_write_reg>
 80015aa:	4602      	mov	r2, r0
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	4413      	add	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f103 0010 	add.w	r0, r3, #16
 80015b8:	2300      	movs	r3, #0
 80015ba:	4a73      	ldr	r2, [pc, #460]	@ (8001788 <OTM8009A_Init+0x6c8>)
 80015bc:	21cf      	movs	r1, #207	@ 0xcf
 80015be:	f000 fd91 	bl	80020e4 <otm8009a_write_reg>
 80015c2:	4602      	mov	r2, r0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	4413      	add	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f103 0010 	add.w	r0, r3, #16
 80015d0:	2300      	movs	r3, #0
 80015d2:	4a64      	ldr	r2, [pc, #400]	@ (8001764 <OTM8009A_Init+0x6a4>)
 80015d4:	2100      	movs	r1, #0
 80015d6:	f000 fd85 	bl	80020e4 <otm8009a_write_reg>
 80015da:	4602      	mov	r2, r0
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	4413      	add	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f103 0010 	add.w	r0, r3, #16
 80015e8:	230a      	movs	r3, #10
 80015ea:	4a68      	ldr	r2, [pc, #416]	@ (800178c <OTM8009A_Init+0x6cc>)
 80015ec:	21cb      	movs	r1, #203	@ 0xcb
 80015ee:	f000 fd79 	bl	80020e4 <otm8009a_write_reg>
 80015f2:	4602      	mov	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	4413      	add	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f103 0010 	add.w	r0, r3, #16
 8001600:	2300      	movs	r3, #0
 8001602:	4a63      	ldr	r2, [pc, #396]	@ (8001790 <OTM8009A_Init+0x6d0>)
 8001604:	2100      	movs	r1, #0
 8001606:	f000 fd6d 	bl	80020e4 <otm8009a_write_reg>
 800160a:	4602      	mov	r2, r0
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	4413      	add	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f103 0010 	add.w	r0, r3, #16
 8001618:	230f      	movs	r3, #15
 800161a:	4a5e      	ldr	r2, [pc, #376]	@ (8001794 <OTM8009A_Init+0x6d4>)
 800161c:	21cb      	movs	r1, #203	@ 0xcb
 800161e:	f000 fd61 	bl	80020e4 <otm8009a_write_reg>
 8001622:	4602      	mov	r2, r0
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	4413      	add	r3, r2
 8001628:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f103 0010 	add.w	r0, r3, #16
 8001630:	2300      	movs	r3, #0
 8001632:	4a4e      	ldr	r2, [pc, #312]	@ (800176c <OTM8009A_Init+0x6ac>)
 8001634:	2100      	movs	r1, #0
 8001636:	f000 fd55 	bl	80020e4 <otm8009a_write_reg>
 800163a:	4602      	mov	r2, r0
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	4413      	add	r3, r2
 8001640:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f103 0010 	add.w	r0, r3, #16
 8001648:	230f      	movs	r3, #15
 800164a:	4a53      	ldr	r2, [pc, #332]	@ (8001798 <OTM8009A_Init+0x6d8>)
 800164c:	21cb      	movs	r1, #203	@ 0xcb
 800164e:	f000 fd49 	bl	80020e4 <otm8009a_write_reg>
 8001652:	4602      	mov	r2, r0
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	4413      	add	r3, r2
 8001658:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f103 0010 	add.w	r0, r3, #16
 8001660:	2300      	movs	r3, #0
 8001662:	4a44      	ldr	r2, [pc, #272]	@ (8001774 <OTM8009A_Init+0x6b4>)
 8001664:	2100      	movs	r1, #0
 8001666:	f000 fd3d 	bl	80020e4 <otm8009a_write_reg>
 800166a:	4602      	mov	r2, r0
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f103 0010 	add.w	r0, r3, #16
 8001678:	230a      	movs	r3, #10
 800167a:	4a48      	ldr	r2, [pc, #288]	@ (800179c <OTM8009A_Init+0x6dc>)
 800167c:	21cb      	movs	r1, #203	@ 0xcb
 800167e:	f000 fd31 	bl	80020e4 <otm8009a_write_reg>
 8001682:	4602      	mov	r2, r0
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	4413      	add	r3, r2
 8001688:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f103 0010 	add.w	r0, r3, #16
 8001690:	2300      	movs	r3, #0
 8001692:	4a3a      	ldr	r2, [pc, #232]	@ (800177c <OTM8009A_Init+0x6bc>)
 8001694:	2100      	movs	r1, #0
 8001696:	f000 fd25 	bl	80020e4 <otm8009a_write_reg>
 800169a:	4602      	mov	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4413      	add	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f103 0010 	add.w	r0, r3, #16
 80016a8:	230f      	movs	r3, #15
 80016aa:	4a3d      	ldr	r2, [pc, #244]	@ (80017a0 <OTM8009A_Init+0x6e0>)
 80016ac:	21cb      	movs	r1, #203	@ 0xcb
 80016ae:	f000 fd19 	bl	80020e4 <otm8009a_write_reg>
 80016b2:	4602      	mov	r2, r0
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4413      	add	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f103 0010 	add.w	r0, r3, #16
 80016c0:	2300      	movs	r3, #0
 80016c2:	4a30      	ldr	r2, [pc, #192]	@ (8001784 <OTM8009A_Init+0x6c4>)
 80016c4:	2100      	movs	r1, #0
 80016c6:	f000 fd0d 	bl	80020e4 <otm8009a_write_reg>
 80016ca:	4602      	mov	r2, r0
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f103 0010 	add.w	r0, r3, #16
 80016d8:	230f      	movs	r3, #15
 80016da:	4a32      	ldr	r2, [pc, #200]	@ (80017a4 <OTM8009A_Init+0x6e4>)
 80016dc:	21cb      	movs	r1, #203	@ 0xcb
 80016de:	f000 fd01 	bl	80020e4 <otm8009a_write_reg>
 80016e2:	4602      	mov	r2, r0
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4413      	add	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f103 0010 	add.w	r0, r3, #16
 80016f0:	2300      	movs	r3, #0
 80016f2:	4a2d      	ldr	r2, [pc, #180]	@ (80017a8 <OTM8009A_Init+0x6e8>)
 80016f4:	2100      	movs	r1, #0
 80016f6:	f000 fcf5 	bl	80020e4 <otm8009a_write_reg>
 80016fa:	4602      	mov	r2, r0
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	4413      	add	r3, r2
 8001700:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f103 0010 	add.w	r0, r3, #16
 8001708:	230a      	movs	r3, #10
 800170a:	4a28      	ldr	r2, [pc, #160]	@ (80017ac <OTM8009A_Init+0x6ec>)
 800170c:	21cb      	movs	r1, #203	@ 0xcb
 800170e:	f000 fce9 	bl	80020e4 <otm8009a_write_reg>
 8001712:	4602      	mov	r2, r0
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	4413      	add	r3, r2
 8001718:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f103 0010 	add.w	r0, r3, #16
 8001720:	2300      	movs	r3, #0
 8001722:	4a23      	ldr	r2, [pc, #140]	@ (80017b0 <OTM8009A_Init+0x6f0>)
 8001724:	2100      	movs	r1, #0
 8001726:	f000 fcdd 	bl	80020e4 <otm8009a_write_reg>
 800172a:	4602      	mov	r2, r0
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	4413      	add	r3, r2
 8001730:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f103 0010 	add.w	r0, r3, #16
 8001738:	230a      	movs	r3, #10
 800173a:	4a1e      	ldr	r2, [pc, #120]	@ (80017b4 <OTM8009A_Init+0x6f4>)
 800173c:	21cb      	movs	r1, #203	@ 0xcb
 800173e:	f000 fcd1 	bl	80020e4 <otm8009a_write_reg>
 8001742:	4602      	mov	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e035      	b.n	80017b8 <OTM8009A_Init+0x6f8>
 800174c:	080180d9 	.word	0x080180d9
 8001750:	080180e6 	.word	0x080180e6
 8001754:	080180db 	.word	0x080180db
 8001758:	080180e7 	.word	0x080180e7
 800175c:	080180e8 	.word	0x080180e8
 8001760:	0801810c 	.word	0x0801810c
 8001764:	080180ce 	.word	0x080180ce
 8001768:	08018110 	.word	0x08018110
 800176c:	080180e9 	.word	0x080180e9
 8001770:	08018118 	.word	0x08018118
 8001774:	080180ea 	.word	0x080180ea
 8001778:	08018128 	.word	0x08018128
 800177c:	080180eb 	.word	0x080180eb
 8001780:	08018138 	.word	0x08018138
 8001784:	080180ec 	.word	0x080180ec
 8001788:	080180f9 	.word	0x080180f9
 800178c:	08018144 	.word	0x08018144
 8001790:	080180ed 	.word	0x080180ed
 8001794:	08018150 	.word	0x08018150
 8001798:	08018160 	.word	0x08018160
 800179c:	08018170 	.word	0x08018170
 80017a0:	0801817c 	.word	0x0801817c
 80017a4:	0801818c 	.word	0x0801818c
 80017a8:	080180ee 	.word	0x080180ee
 80017ac:	0801819c 	.word	0x0801819c
 80017b0:	080180ef 	.word	0x080180ef
 80017b4:	080181a8 	.word	0x080181a8
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f103 0010 	add.w	r0, r3, #16
 80017be:	2300      	movs	r3, #0
 80017c0:	4aae      	ldr	r2, [pc, #696]	@ (8001a7c <OTM8009A_Init+0x9bc>)
 80017c2:	2100      	movs	r1, #0
 80017c4:	f000 fc8e 	bl	80020e4 <otm8009a_write_reg>
 80017c8:	4602      	mov	r2, r0
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f103 0010 	add.w	r0, r3, #16
 80017d6:	230a      	movs	r3, #10
 80017d8:	4aa9      	ldr	r2, [pc, #676]	@ (8001a80 <OTM8009A_Init+0x9c0>)
 80017da:	21cc      	movs	r1, #204	@ 0xcc
 80017dc:	f000 fc82 	bl	80020e4 <otm8009a_write_reg>
 80017e0:	4602      	mov	r2, r0
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	4413      	add	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f103 0010 	add.w	r0, r3, #16
 80017ee:	2300      	movs	r3, #0
 80017f0:	4aa4      	ldr	r2, [pc, #656]	@ (8001a84 <OTM8009A_Init+0x9c4>)
 80017f2:	2100      	movs	r1, #0
 80017f4:	f000 fc76 	bl	80020e4 <otm8009a_write_reg>
 80017f8:	4602      	mov	r2, r0
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	4413      	add	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f103 0010 	add.w	r0, r3, #16
 8001806:	230f      	movs	r3, #15
 8001808:	4a9f      	ldr	r2, [pc, #636]	@ (8001a88 <OTM8009A_Init+0x9c8>)
 800180a:	21cc      	movs	r1, #204	@ 0xcc
 800180c:	f000 fc6a 	bl	80020e4 <otm8009a_write_reg>
 8001810:	4602      	mov	r2, r0
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	4413      	add	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f103 0010 	add.w	r0, r3, #16
 800181e:	2300      	movs	r3, #0
 8001820:	4a9a      	ldr	r2, [pc, #616]	@ (8001a8c <OTM8009A_Init+0x9cc>)
 8001822:	2100      	movs	r1, #0
 8001824:	f000 fc5e 	bl	80020e4 <otm8009a_write_reg>
 8001828:	4602      	mov	r2, r0
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	4413      	add	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f103 0010 	add.w	r0, r3, #16
 8001836:	230f      	movs	r3, #15
 8001838:	4a95      	ldr	r2, [pc, #596]	@ (8001a90 <OTM8009A_Init+0x9d0>)
 800183a:	21cc      	movs	r1, #204	@ 0xcc
 800183c:	f000 fc52 	bl	80020e4 <otm8009a_write_reg>
 8001840:	4602      	mov	r2, r0
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4413      	add	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f103 0010 	add.w	r0, r3, #16
 800184e:	2300      	movs	r3, #0
 8001850:	4a90      	ldr	r2, [pc, #576]	@ (8001a94 <OTM8009A_Init+0x9d4>)
 8001852:	2100      	movs	r1, #0
 8001854:	f000 fc46 	bl	80020e4 <otm8009a_write_reg>
 8001858:	4602      	mov	r2, r0
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f103 0010 	add.w	r0, r3, #16
 8001866:	230a      	movs	r3, #10
 8001868:	4a8b      	ldr	r2, [pc, #556]	@ (8001a98 <OTM8009A_Init+0x9d8>)
 800186a:	21cc      	movs	r1, #204	@ 0xcc
 800186c:	f000 fc3a 	bl	80020e4 <otm8009a_write_reg>
 8001870:	4602      	mov	r2, r0
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	4413      	add	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f103 0010 	add.w	r0, r3, #16
 800187e:	2300      	movs	r3, #0
 8001880:	4a86      	ldr	r2, [pc, #536]	@ (8001a9c <OTM8009A_Init+0x9dc>)
 8001882:	2100      	movs	r1, #0
 8001884:	f000 fc2e 	bl	80020e4 <otm8009a_write_reg>
 8001888:	4602      	mov	r2, r0
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f103 0010 	add.w	r0, r3, #16
 8001896:	230f      	movs	r3, #15
 8001898:	4a81      	ldr	r2, [pc, #516]	@ (8001aa0 <OTM8009A_Init+0x9e0>)
 800189a:	21cc      	movs	r1, #204	@ 0xcc
 800189c:	f000 fc22 	bl	80020e4 <otm8009a_write_reg>
 80018a0:	4602      	mov	r2, r0
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f103 0010 	add.w	r0, r3, #16
 80018ae:	2300      	movs	r3, #0
 80018b0:	4a7c      	ldr	r2, [pc, #496]	@ (8001aa4 <OTM8009A_Init+0x9e4>)
 80018b2:	2100      	movs	r1, #0
 80018b4:	f000 fc16 	bl	80020e4 <otm8009a_write_reg>
 80018b8:	4602      	mov	r2, r0
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f103 0010 	add.w	r0, r3, #16
 80018c6:	230f      	movs	r3, #15
 80018c8:	4a77      	ldr	r2, [pc, #476]	@ (8001aa8 <OTM8009A_Init+0x9e8>)
 80018ca:	21cc      	movs	r1, #204	@ 0xcc
 80018cc:	f000 fc0a 	bl	80020e4 <otm8009a_write_reg>
 80018d0:	4602      	mov	r2, r0
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	4413      	add	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f103 0010 	add.w	r0, r3, #16
 80018de:	2300      	movs	r3, #0
 80018e0:	4a72      	ldr	r2, [pc, #456]	@ (8001aac <OTM8009A_Init+0x9ec>)
 80018e2:	2100      	movs	r1, #0
 80018e4:	f000 fbfe 	bl	80020e4 <otm8009a_write_reg>
 80018e8:	4602      	mov	r2, r0
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f103 0010 	add.w	r0, r3, #16
 80018f6:	2300      	movs	r3, #0
 80018f8:	4a6d      	ldr	r2, [pc, #436]	@ (8001ab0 <OTM8009A_Init+0x9f0>)
 80018fa:	21c5      	movs	r1, #197	@ 0xc5
 80018fc:	f000 fbf2 	bl	80020e4 <otm8009a_write_reg>
 8001900:	4602      	mov	r2, r0
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	4413      	add	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f103 0010 	add.w	r0, r3, #16
 800190e:	2300      	movs	r3, #0
 8001910:	4a68      	ldr	r2, [pc, #416]	@ (8001ab4 <OTM8009A_Init+0x9f4>)
 8001912:	2100      	movs	r1, #0
 8001914:	f000 fbe6 	bl	80020e4 <otm8009a_write_reg>
 8001918:	4602      	mov	r2, r0
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4413      	add	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f103 0010 	add.w	r0, r3, #16
 8001926:	2300      	movs	r3, #0
 8001928:	4a63      	ldr	r2, [pc, #396]	@ (8001ab8 <OTM8009A_Init+0x9f8>)
 800192a:	21f5      	movs	r1, #245	@ 0xf5
 800192c:	f000 fbda 	bl	80020e4 <otm8009a_write_reg>
 8001930:	4602      	mov	r2, r0
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
  /////////////////////////////////////////////////////////////////////////////
  
  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f103 0010 	add.w	r0, r3, #16
 800193e:	2300      	movs	r3, #0
 8001940:	4a5e      	ldr	r2, [pc, #376]	@ (8001abc <OTM8009A_Init+0x9fc>)
 8001942:	2100      	movs	r1, #0
 8001944:	f000 fbce 	bl	80020e4 <otm8009a_write_reg>
 8001948:	4602      	mov	r2, r0
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	4413      	add	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f103 0010 	add.w	r0, r3, #16
 8001956:	2300      	movs	r3, #0
 8001958:	4a59      	ldr	r2, [pc, #356]	@ (8001ac0 <OTM8009A_Init+0xa00>)
 800195a:	21c6      	movs	r1, #198	@ 0xc6
 800195c:	f000 fbc2 	bl	80020e4 <otm8009a_write_reg>
 8001960:	4602      	mov	r2, r0
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Exit CMD2 mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f103 0010 	add.w	r0, r3, #16
 800196e:	2300      	movs	r3, #0
 8001970:	4a54      	ldr	r2, [pc, #336]	@ (8001ac4 <OTM8009A_Init+0xa04>)
 8001972:	2100      	movs	r1, #0
 8001974:	f000 fbb6 	bl	80020e4 <otm8009a_write_reg>
 8001978:	4602      	mov	r2, r0
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	4413      	add	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f103 0010 	add.w	r0, r3, #16
 8001986:	2303      	movs	r3, #3
 8001988:	4a4f      	ldr	r2, [pc, #316]	@ (8001ac8 <OTM8009A_Init+0xa08>)
 800198a:	21ff      	movs	r1, #255	@ 0xff
 800198c:	f000 fbaa 	bl	80020e4 <otm8009a_write_reg>
 8001990:	4602      	mov	r2, r0
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	4413      	add	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */
  
  /* NOP - goes back to DCS std command ? */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f103 0010 	add.w	r0, r3, #16
 800199e:	2300      	movs	r3, #0
 80019a0:	4a48      	ldr	r2, [pc, #288]	@ (8001ac4 <OTM8009A_Init+0xa04>)
 80019a2:	2100      	movs	r1, #0
 80019a4:	f000 fb9e 	bl	80020e4 <otm8009a_write_reg>
 80019a8:	4602      	mov	r2, r0
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4413      	add	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2+ table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f103 0010 	add.w	r0, r3, #16
 80019b6:	2300      	movs	r3, #0
 80019b8:	4a42      	ldr	r2, [pc, #264]	@ (8001ac4 <OTM8009A_Init+0xa04>)
 80019ba:	2100      	movs	r1, #0
 80019bc:	f000 fb92 	bl	80020e4 <otm8009a_write_reg>
 80019c0:	4602      	mov	r2, r0
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	4413      	add	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f103 0010 	add.w	r0, r3, #16
 80019ce:	2310      	movs	r3, #16
 80019d0:	4a3e      	ldr	r2, [pc, #248]	@ (8001acc <OTM8009A_Init+0xa0c>)
 80019d2:	21e1      	movs	r1, #225	@ 0xe1
 80019d4:	f000 fb86 	bl	80020e4 <otm8009a_write_reg>
 80019d8:	4602      	mov	r2, r0
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	4413      	add	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2- table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f103 0010 	add.w	r0, r3, #16
 80019e6:	2300      	movs	r3, #0
 80019e8:	4a36      	ldr	r2, [pc, #216]	@ (8001ac4 <OTM8009A_Init+0xa04>)
 80019ea:	2100      	movs	r1, #0
 80019ec:	f000 fb7a 	bl	80020e4 <otm8009a_write_reg>
 80019f0:	4602      	mov	r2, r0
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4413      	add	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f103 0010 	add.w	r0, r3, #16
 80019fe:	2310      	movs	r3, #16
 8001a00:	4a33      	ldr	r2, [pc, #204]	@ (8001ad0 <OTM8009A_Init+0xa10>)
 8001a02:	21e2      	movs	r1, #226	@ 0xe2
 8001a04:	f000 fb6e 	bl	80020e4 <otm8009a_write_reg>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Send Sleep Out command to display : no parameter */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f103 0010 	add.w	r0, r3, #16
 8001a16:	2300      	movs	r3, #0
 8001a18:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad4 <OTM8009A_Init+0xa14>)
 8001a1a:	2111      	movs	r1, #17
 8001a1c:	f000 fb62 	bl	80020e4 <otm8009a_write_reg>
 8001a20:	4602      	mov	r2, r0
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	4413      	add	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Wait for sleep out exit */
  (void)OTM8009A_IO_Delay(pObj, 120);
 8001a28:	2178      	movs	r1, #120	@ 0x78
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fb29 	bl	8002082 <OTM8009A_IO_Delay>
  
  switch(ColorCoding)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d012      	beq.n	8001a5c <OTM8009A_Init+0x99c>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d153      	bne.n	8001ae4 <OTM8009A_Init+0xa24>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f103 0010 	add.w	r0, r3, #16
 8001a42:	2300      	movs	r3, #0
 8001a44:	4a24      	ldr	r2, [pc, #144]	@ (8001ad8 <OTM8009A_Init+0xa18>)
 8001a46:	213a      	movs	r1, #58	@ 0x3a
 8001a48:	f000 fb4c 	bl	80020e4 <otm8009a_write_reg>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 8001a54:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <OTM8009A_Init+0xa1c>)
 8001a56:	2202      	movs	r2, #2
 8001a58:	605a      	str	r2, [r3, #4]
    break;
 8001a5a:	e044      	b.n	8001ae6 <OTM8009A_Init+0xa26>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f103 0010 	add.w	r0, r3, #16
 8001a62:	2300      	movs	r3, #0
 8001a64:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <OTM8009A_Init+0xa20>)
 8001a66:	213a      	movs	r1, #58	@ 0x3a
 8001a68:	f000 fb3c 	bl	80020e4 <otm8009a_write_reg>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <OTM8009A_Init+0xa1c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	605a      	str	r2, [r3, #4]
    break;
 8001a7a:	e034      	b.n	8001ae6 <OTM8009A_Init+0xa26>
 8001a7c:	080180ce 	.word	0x080180ce
 8001a80:	080181b4 	.word	0x080181b4
 8001a84:	080180ed 	.word	0x080180ed
 8001a88:	080181c0 	.word	0x080181c0
 8001a8c:	080180e9 	.word	0x080180e9
 8001a90:	080181d0 	.word	0x080181d0
 8001a94:	080180ea 	.word	0x080180ea
 8001a98:	080181e0 	.word	0x080181e0
 8001a9c:	080180eb 	.word	0x080180eb
 8001aa0:	080181ec 	.word	0x080181ec
 8001aa4:	080180ec 	.word	0x080180ec
 8001aa8:	080181fc 	.word	0x080181fc
 8001aac:	080180d9 	.word	0x080180d9
 8001ab0:	080180fa 	.word	0x080180fa
 8001ab4:	080180fb 	.word	0x080180fb
 8001ab8:	080180fc 	.word	0x080180fc
 8001abc:	080180fd 	.word	0x080180fd
 8001ac0:	080180fe 	.word	0x080180fe
 8001ac4:	080180cd 	.word	0x080180cd
 8001ac8:	0801820c 	.word	0x0801820c
 8001acc:	08018210 	.word	0x08018210
 8001ad0:	08018220 	.word	0x08018220
 8001ad4:	080180f0 	.word	0x080180f0
 8001ad8:	080180f1 	.word	0x080180f1
 8001adc:	2400069c 	.word	0x2400069c
 8001ae0:	080180f2 	.word	0x080180f2
  default :
    break;
 8001ae4:	bf00      	nop
  }
  
  /* Send command to configure display in landscape orientation mode. By default
  the orientation mode is portrait  */
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d12a      	bne.n	8001b42 <OTM8009A_Init+0xa82>
  {
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001aec:	2360      	movs	r3, #96	@ 0x60
 8001aee:	74fb      	strb	r3, [r7, #19]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f103 0010 	add.w	r0, r3, #16
 8001af6:	f107 0213 	add.w	r2, r7, #19
 8001afa:	2300      	movs	r3, #0
 8001afc:	2136      	movs	r1, #54	@ 0x36
 8001afe:	f000 faf1 	bl	80020e4 <otm8009a_write_reg>
 8001b02:	4602      	mov	r2, r0
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	4413      	add	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f103 0010 	add.w	r0, r3, #16
 8001b10:	2304      	movs	r3, #4
 8001b12:	4a44      	ldr	r2, [pc, #272]	@ (8001c24 <OTM8009A_Init+0xb64>)
 8001b14:	212a      	movs	r1, #42	@ 0x2a
 8001b16:	f000 fae5 	bl	80020e4 <otm8009a_write_reg>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f103 0010 	add.w	r0, r3, #16
 8001b28:	2304      	movs	r3, #4
 8001b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c28 <OTM8009A_Init+0xb68>)
 8001b2c:	212b      	movs	r1, #43	@ 0x2b
 8001b2e:	f000 fad9 	bl	80020e4 <otm8009a_write_reg>
 8001b32:	4602      	mov	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	4413      	add	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c2c <OTM8009A_Init+0xb6c>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e002      	b.n	8001b48 <OTM8009A_Init+0xa88>
  }
  else
  {
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8001b42:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <OTM8009A_Init+0xb6c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
  }
  
  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f103 0010 	add.w	r0, r3, #16
 8001b4e:	2300      	movs	r3, #0
 8001b50:	4a37      	ldr	r2, [pc, #220]	@ (8001c30 <OTM8009A_Init+0xb70>)
 8001b52:	2151      	movs	r1, #81	@ 0x51
 8001b54:	f000 fac6 	bl	80020e4 <otm8009a_write_reg>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
  /* Store default brightness */
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8001b60:	4b34      	ldr	r3, [pc, #208]	@ (8001c34 <OTM8009A_Init+0xb74>)
 8001b62:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001b66:	4a34      	ldr	r2, [pc, #208]	@ (8001c38 <OTM8009A_Init+0xb78>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	09db      	lsrs	r3, r3, #7
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	2364      	movs	r3, #100	@ 0x64
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	4a2c      	ldr	r2, [pc, #176]	@ (8001c2c <OTM8009A_Init+0xb6c>)
 8001b7a:	6093      	str	r3, [r2, #8]
  
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f103 0010 	add.w	r0, r3, #16
 8001b82:	2300      	movs	r3, #0
 8001b84:	4a2d      	ldr	r2, [pc, #180]	@ (8001c3c <OTM8009A_Init+0xb7c>)
 8001b86:	2153      	movs	r1, #83	@ 0x53
 8001b88:	f000 faac 	bl	80020e4 <otm8009a_write_reg>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	4413      	add	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f103 0010 	add.w	r0, r3, #16
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	4a28      	ldr	r2, [pc, #160]	@ (8001c40 <OTM8009A_Init+0xb80>)
 8001b9e:	2155      	movs	r1, #85	@ 0x55
 8001ba0:	f000 faa0 	bl	80020e4 <otm8009a_write_reg>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	4413      	add	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f103 0010 	add.w	r0, r3, #16
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	4a23      	ldr	r2, [pc, #140]	@ (8001c44 <OTM8009A_Init+0xb84>)
 8001bb6:	215e      	movs	r1, #94	@ 0x5e
 8001bb8:	f000 fa94 	bl	80020e4 <otm8009a_write_reg>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]
  
  /** CABC : Content Adaptive Backlight Control section end << */
  
  /* Send Command Display On */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f103 0010 	add.w	r0, r3, #16
 8001bca:	2300      	movs	r3, #0
 8001bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c48 <OTM8009A_Init+0xb88>)
 8001bce:	2129      	movs	r1, #41	@ 0x29
 8001bd0:	f000 fa88 	bl	80020e4 <otm8009a_write_reg>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	4413      	add	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* NOP command */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f103 0010 	add.w	r0, r3, #16
 8001be2:	2300      	movs	r3, #0
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <OTM8009A_Init+0xb8c>)
 8001be6:	2100      	movs	r1, #0
 8001be8:	f000 fa7c 	bl	80020e4 <otm8009a_write_reg>
 8001bec:	4602      	mov	r2, r0
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
  
  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f103 0010 	add.w	r0, r3, #16
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <OTM8009A_Init+0xb90>)
 8001bfe:	212c      	movs	r1, #44	@ 0x2c
 8001c00:	f000 fa70 	bl	80020e4 <otm8009a_write_reg>
 8001c04:	4602      	mov	r2, r0
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	4413      	add	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
  
  if(ret != OTM8009A_OK)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <OTM8009A_Init+0xb58>
  {
    ret = OTM8009A_ERROR;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c16:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001c18:	697b      	ldr	r3, [r7, #20]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	080180c4 	.word	0x080180c4
 8001c28:	080180c8 	.word	0x080180c8
 8001c2c:	2400069c 	.word	0x2400069c
 8001c30:	080180f3 	.word	0x080180f3
 8001c34:	080180cc 	.word	0x080180cc
 8001c38:	80808081 	.word	0x80808081
 8001c3c:	080180f4 	.word	0x080180f4
 8001c40:	080180f5 	.word	0x080180f5
 8001c44:	080180f6 	.word	0x080180f6
 8001c48:	080180f7 	.word	0x080180f7
 8001c4c:	080180cd 	.word	0x080180cd
 8001c50:	080180f8 	.word	0x080180f8

08001c54 <OTM8009A_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return OTM8009A_ERROR;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <OTM8009A_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t OTM8009A_ReadID(OTM8009A_Object_t *pObj, uint32_t *Id)
{ 
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 1)!= OTM8009A_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f103 0010 	add.w	r0, r3, #16
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	21da      	movs	r1, #218	@ 0xda
 8001c82:	f000 fa18 	bl	80020b6 <otm8009a_read_reg>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <OTM8009A_ReadID+0x28>
  {
    ret = OTM8009A_ERROR;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e001      	b.n	8001c98 <OTM8009A_ReadID+0x2c>
  }
  else
  {
    ret = OTM8009A_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001c98:	68fb      	ldr	r3, [r7, #12]
}  
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <OTM8009A_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t OTM8009A_SetBrightness(OTM8009A_Object_t *pObj, uint32_t Brightness)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	4a10      	ldr	r2, [pc, #64]	@ (8001cf8 <OTM8009A_SetBrightness+0x54>)
 8001cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f103 0010 	add.w	r0, r3, #16
 8001cc8:	f107 020b 	add.w	r2, r7, #11
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2151      	movs	r1, #81	@ 0x51
 8001cd0:	f000 fa08 	bl	80020e4 <otm8009a_write_reg>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <OTM8009A_SetBrightness+0x3e>
  {
    ret = OTM8009A_ERROR;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e004      	b.n	8001cec <OTM8009A_SetBrightness+0x48>
  }
  else
  {
    OTM8009ACtx.Brightness = Brightness;
 8001ce2:	4a06      	ldr	r2, [pc, #24]	@ (8001cfc <OTM8009A_SetBrightness+0x58>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6093      	str	r3, [r2, #8]
    ret = OTM8009A_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001cec:	68fb      	ldr	r3, [r7, #12]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	51eb851f 	.word	0x51eb851f
 8001cfc:	2400069c 	.word	0x2400069c

08001d00 <OTM8009A_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  *Brightness = OTM8009ACtx.Brightness;
 8001d0a:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <OTM8009A_GetBrightness+0x20>)
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	601a      	str	r2, [r3, #0]
  return OTM8009A_OK;  
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	2400069c 	.word	0x2400069c

08001d24 <OTM8009A_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOn(OTM8009A_Object_t *pObj)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f103 0010 	add.w	r0, r3, #16
 8001d36:	f107 020b 	add.w	r2, r7, #11
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2129      	movs	r1, #41	@ 0x29
 8001d3e:	f000 f9d1 	bl	80020e4 <otm8009a_write_reg>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <OTM8009A_DisplayOn+0x2c>
  {
    ret = OTM8009A_ERROR;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	e001      	b.n	8001d54 <OTM8009A_DisplayOn+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001d54:	68fb      	ldr	r3, [r7, #12]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <OTM8009A_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOff(OTM8009A_Object_t *pObj)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f103 0010 	add.w	r0, r3, #16
 8001d70:	f107 020b 	add.w	r2, r7, #11
 8001d74:	2300      	movs	r3, #0
 8001d76:	2128      	movs	r1, #40	@ 0x28
 8001d78:	f000 f9b4 	bl	80020e4 <otm8009a_write_reg>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <OTM8009A_DisplayOff+0x2c>
  {
    ret = OTM8009A_ERROR;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e001      	b.n	8001d8e <OTM8009A_DisplayOff+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <OTM8009A_SetOrientation>:
* @param  pObj Component object
* @param  Orientation   display Orientation to be set
* @retval Component status
*/
int32_t OTM8009A_SetOrientation(OTM8009A_Object_t *pObj, uint32_t Orientation)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001da2:	2360      	movs	r3, #96	@ 0x60
 8001da4:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8001da6:	2300      	movs	r3, #0
 8001da8:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d006      	beq.n	8001dbe <OTM8009A_SetOrientation+0x26>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <OTM8009A_SetOrientation+0x26>
  {
    ret = OTM8009A_ERROR;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e04d      	b.n	8001e5a <OTM8009A_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d125      	bne.n	8001e10 <OTM8009A_SetOrientation+0x78>
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f103 0010 	add.w	r0, r3, #16
 8001dca:	f107 020b 	add.w	r2, r7, #11
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2136      	movs	r1, #54	@ 0x36
 8001dd2:	f000 f987 	bl	80020e4 <otm8009a_write_reg>
 8001dd6:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f103 0010 	add.w	r0, r3, #16
 8001dde:	2304      	movs	r3, #4
 8001de0:	4a23      	ldr	r2, [pc, #140]	@ (8001e70 <OTM8009A_SetOrientation+0xd8>)
 8001de2:	212a      	movs	r1, #42	@ 0x2a
 8001de4:	f000 f97e 	bl	80020e4 <otm8009a_write_reg>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f103 0010 	add.w	r0, r3, #16
 8001df6:	2304      	movs	r3, #4
 8001df8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <OTM8009A_SetOrientation+0xdc>)
 8001dfa:	212b      	movs	r1, #43	@ 0x2b
 8001dfc:	f000 f972 	bl	80020e4 <otm8009a_write_reg>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4413      	add	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <OTM8009A_SetOrientation+0xe0>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e024      	b.n	8001e5a <OTM8009A_SetOrientation+0xc2>
  }
  else
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f103 0010 	add.w	r0, r3, #16
 8001e16:	f107 020a 	add.w	r2, r7, #10
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2136      	movs	r1, #54	@ 0x36
 8001e1e:	f000 f961 	bl	80020e4 <otm8009a_write_reg>
 8001e22:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f103 0010 	add.w	r0, r3, #16
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	4a10      	ldr	r2, [pc, #64]	@ (8001e70 <OTM8009A_SetOrientation+0xd8>)
 8001e2e:	212a      	movs	r1, #42	@ 0x2a
 8001e30:	f000 f958 	bl	80020e4 <otm8009a_write_reg>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f103 0010 	add.w	r0, r3, #16
 8001e42:	2304      	movs	r3, #4
 8001e44:	4a0b      	ldr	r2, [pc, #44]	@ (8001e74 <OTM8009A_SetOrientation+0xdc>)
 8001e46:	212b      	movs	r1, #43	@ 0x2b
 8001e48:	f000 f94c 	bl	80020e4 <otm8009a_write_reg>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4413      	add	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8001e54:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <OTM8009A_SetOrientation+0xe0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != OTM8009A_OK)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <OTM8009A_SetOrientation+0xce>
  {
    ret = OTM8009A_ERROR;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e64:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001e66:	68fb      	ldr	r3, [r7, #12]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	080180c4 	.word	0x080180c4
 8001e74:	080180c8 	.word	0x080180c8
 8001e78:	2400069c 	.word	0x2400069c

08001e7c <OTM8009A_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8001e86:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <OTM8009A_GetOrientation+0x20>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	601a      	str	r2, [r3, #0]
  
  return OTM8009A_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	2400069c 	.word	0x2400069c

08001ea0 <OTM8009A_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <OTM8009A_GetXSize+0x44>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <OTM8009A_GetXSize+0x18>
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d005      	beq.n	8001ec2 <OTM8009A_GetXSize+0x22>
 8001eb6:	e009      	b.n	8001ecc <OTM8009A_GetXSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ebe:	601a      	str	r2, [r3, #0]
    break;
 8001ec0:	e009      	b.n	8001ed6 <OTM8009A_GetXSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ec8:	601a      	str	r2, [r3, #0]
    break;
 8001eca:	e004      	b.n	8001ed6 <OTM8009A_GetXSize+0x36>
  default:
    *Xsize = OTM8009A_800X480_WIDTH;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ed2:	601a      	str	r2, [r3, #0]
    break;
 8001ed4:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	2400069c 	.word	0x2400069c

08001ee8 <OTM8009A_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <OTM8009A_GetYSize+0x44>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <OTM8009A_GetYSize+0x18>
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d005      	beq.n	8001f0a <OTM8009A_GetYSize+0x22>
 8001efe:	e009      	b.n	8001f14 <OTM8009A_GetYSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001f06:	601a      	str	r2, [r3, #0]
    break;
 8001f08:	e009      	b.n	8001f1e <OTM8009A_GetYSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001f10:	601a      	str	r2, [r3, #0]
    break;
 8001f12:	e004      	b.n	8001f1e <OTM8009A_GetYSize+0x36>
  default:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001f1a:	601a      	str	r2, [r3, #0]
    break;
 8001f1c:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	2400069c 	.word	0x2400069c

08001f30 <OTM8009A_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t OTM8009A_SetCursor(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <OTM8009A_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t OTM8009A_DrawBitmap(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <OTM8009A_FillRGBRect>:

int32_t OTM8009A_FillRGBRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <OTM8009A_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawHLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <OTM8009A_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawVLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <OTM8009A_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_FillRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <OTM8009A_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <OTM8009A_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_SetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800201e:	b590      	push	{r4, r7, lr}
 8002020:	b087      	sub	sp, #28
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	461a      	mov	r2, r3
 800202a:	460b      	mov	r3, r1
 800202c:	817b      	strh	r3, [r7, #10]
 800202e:	4613      	mov	r3, r2
 8002030:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	689c      	ldr	r4, [r3, #8]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	8818      	ldrh	r0, [r3, #0]
 800203e:	893b      	ldrh	r3, [r7, #8]
 8002040:	8979      	ldrh	r1, [r7, #10]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	47a0      	blx	r4
 8002046:	4603      	mov	r3, r0
}
 8002048:	4618      	mov	r0, r3
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}

08002050 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	461a      	mov	r2, r3
 800205c:	460b      	mov	r3, r1
 800205e:	817b      	strh	r3, [r7, #10]
 8002060:	4613      	mov	r3, r2
 8002062:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	685c      	ldr	r4, [r3, #4]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	8818      	ldrh	r0, [r3, #0]
 8002070:	893b      	ldrh	r3, [r7, #8]
 8002072:	8979      	ldrh	r1, [r7, #10]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	47a0      	blx	r4
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}

08002082 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4798      	blx	r3
 8002092:	4603      	mov	r3, r0
 8002094:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8002096:	bf00      	nop
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4798      	blx	r3
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f5      	bhi.n	8002098 <OTM8009A_IO_Delay+0x16>
  {
  }
  return OTM8009A_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80020b6:	b590      	push	{r4, r7, lr}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	461a      	mov	r2, r3
 80020c2:	460b      	mov	r3, r1
 80020c4:	817b      	strh	r3, [r7, #10]
 80020c6:	4613      	mov	r3, r2
 80020c8:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	685c      	ldr	r4, [r3, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6898      	ldr	r0, [r3, #8]
 80020d2:	893b      	ldrh	r3, [r7, #8]
 80020d4:	8979      	ldrh	r1, [r7, #10]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	47a0      	blx	r4
 80020da:	4603      	mov	r3, r0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd90      	pop	{r4, r7, pc}

080020e4 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	461a      	mov	r2, r3
 80020f0:	460b      	mov	r3, r1
 80020f2:	817b      	strh	r3, [r7, #10]
 80020f4:	4613      	mov	r3, r2
 80020f6:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681c      	ldr	r4, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6898      	ldr	r0, [r3, #8]
 8002100:	893b      	ldrh	r3, [r7, #8]
 8002102:	8979      	ldrh	r1, [r7, #10]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	47a0      	blx	r4
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
	...

08002114 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 800211e:	2303      	movs	r3, #3
 8002120:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f103 0018 	add.w	r0, r3, #24
 8002128:	f107 020a 	add.w	r2, r7, #10
 800212c:	2302      	movs	r3, #2
 800212e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002132:	f001 fdb9 	bl	8003ca8 <wm8994_write_reg>
 8002136:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8002138:	2300      	movs	r3, #0
 800213a:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f103 0018 	add.w	r0, r3, #24
 8002142:	f107 020a 	add.w	r2, r7, #10
 8002146:	2302      	movs	r3, #2
 8002148:	f640 0117 	movw	r1, #2071	@ 0x817
 800214c:	f001 fdac 	bl	8003ca8 <wm8994_write_reg>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f103 0018 	add.w	r0, r3, #24
 800215e:	f107 020a 	add.w	r2, r7, #10
 8002162:	2302      	movs	r3, #2
 8002164:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002168:	f001 fd9e 	bl	8003ca8 <wm8994_write_reg>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8002174:	236c      	movs	r3, #108	@ 0x6c
 8002176:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f103 0018 	add.w	r0, r3, #24
 800217e:	f107 020a 	add.w	r2, r7, #10
 8002182:	2302      	movs	r3, #2
 8002184:	2139      	movs	r1, #57	@ 0x39
 8002186:	f001 fd8f 	bl	8003ca8 <wm8994_write_reg>
 800218a:	4602      	mov	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00f      	beq.n	80021ba <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 800219a:	2313      	movs	r3, #19
 800219c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0018 	add.w	r0, r3, #24
 80021a4:	f107 020a 	add.w	r2, r7, #10
 80021a8:	2302      	movs	r3, #2
 80021aa:	2101      	movs	r1, #1
 80021ac:	f001 fd7c 	bl	8003ca8 <wm8994_write_reg>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e00e      	b.n	80021d8 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 80021ba:	2303      	movs	r3, #3
 80021bc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f103 0018 	add.w	r0, r3, #24
 80021c4:	f107 020a 	add.w	r2, r7, #10
 80021c8:	2302      	movs	r3, #2
 80021ca:	2101      	movs	r1, #1
 80021cc:	f001 fd6c 	bl	8003ca8 <wm8994_write_reg>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4413      	add	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80021d8:	2132      	movs	r1, #50	@ 0x32
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f001 fcec 	bl	8003bb8 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	f200 8141 	bhi.w	800246c <WM8994_Init+0x358>
 80021ea:	a201      	add	r2, pc, #4	@ (adr r2, 80021f0 <WM8994_Init+0xdc>)
 80021ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f0:	08002507 	.word	0x08002507
 80021f4:	08002201 	.word	0x08002201
 80021f8:	0800229b 	.word	0x0800229b
 80021fc:	08002335 	.word	0x08002335
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 8002200:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8002204:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f103 0018 	add.w	r0, r3, #24
 800220c:	f107 020a 	add.w	r2, r7, #10
 8002210:	2302      	movs	r3, #2
 8002212:	2105      	movs	r1, #5
 8002214:	f001 fd48 	bl	8003ca8 <wm8994_write_reg>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4413      	add	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 8002220:	2300      	movs	r3, #0
 8002222:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f103 0018 	add.w	r0, r3, #24
 800222a:	f107 020a 	add.w	r2, r7, #10
 800222e:	2302      	movs	r3, #2
 8002230:	f240 6101 	movw	r1, #1537	@ 0x601
 8002234:	f001 fd38 	bl	8003ca8 <wm8994_write_reg>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f103 0018 	add.w	r0, r3, #24
 8002246:	f107 020a 	add.w	r2, r7, #10
 800224a:	2302      	movs	r3, #2
 800224c:	f240 6102 	movw	r1, #1538	@ 0x602
 8002250:	f001 fd2a 	bl	8003ca8 <wm8994_write_reg>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4413      	add	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 800225c:	2302      	movs	r3, #2
 800225e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f103 0018 	add.w	r0, r3, #24
 8002266:	f107 020a 	add.w	r2, r7, #10
 800226a:	2302      	movs	r3, #2
 800226c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002270:	f001 fd1a 	bl	8003ca8 <wm8994_write_reg>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4413      	add	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 0018 	add.w	r0, r3, #24
 8002282:	f107 020a 	add.w	r2, r7, #10
 8002286:	2302      	movs	r3, #2
 8002288:	f240 6105 	movw	r1, #1541	@ 0x605
 800228c:	f001 fd0c 	bl	8003ca8 <wm8994_write_reg>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4413      	add	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
    break;
 8002298:	e136      	b.n	8002508 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800229a:	f240 3303 	movw	r3, #771	@ 0x303
 800229e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 0018 	add.w	r0, r3, #24
 80022a6:	f107 020a 	add.w	r2, r7, #10
 80022aa:	2302      	movs	r3, #2
 80022ac:	2105      	movs	r1, #5
 80022ae:	f001 fcfb 	bl	8003ca8 <wm8994_write_reg>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80022ba:	2301      	movs	r3, #1
 80022bc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f103 0018 	add.w	r0, r3, #24
 80022c4:	f107 020a 	add.w	r2, r7, #10
 80022c8:	2302      	movs	r3, #2
 80022ca:	f240 6101 	movw	r1, #1537	@ 0x601
 80022ce:	f001 fceb 	bl	8003ca8 <wm8994_write_reg>
 80022d2:	4602      	mov	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 0018 	add.w	r0, r3, #24
 80022e0:	f107 020a 	add.w	r2, r7, #10
 80022e4:	2302      	movs	r3, #2
 80022e6:	f240 6102 	movw	r1, #1538	@ 0x602
 80022ea:	f001 fcdd 	bl	8003ca8 <wm8994_write_reg>
 80022ee:	4602      	mov	r2, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80022f6:	2300      	movs	r3, #0
 80022f8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f103 0018 	add.w	r0, r3, #24
 8002300:	f107 020a 	add.w	r2, r7, #10
 8002304:	2302      	movs	r3, #2
 8002306:	f240 6104 	movw	r1, #1540	@ 0x604
 800230a:	f001 fccd 	bl	8003ca8 <wm8994_write_reg>
 800230e:	4602      	mov	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f103 0018 	add.w	r0, r3, #24
 800231c:	f107 020a 	add.w	r2, r7, #10
 8002320:	2302      	movs	r3, #2
 8002322:	f240 6105 	movw	r1, #1541	@ 0x605
 8002326:	f001 fcbf 	bl	8003ca8 <wm8994_write_reg>
 800232a:	4602      	mov	r2, r0
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
    break;
 8002332:	e0e9      	b.n	8002508 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b05      	cmp	r3, #5
 800233a:	d14a      	bne.n	80023d2 <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 800233c:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8002340:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f103 0018 	add.w	r0, r3, #24
 8002348:	f107 020a 	add.w	r2, r7, #10
 800234c:	2302      	movs	r3, #2
 800234e:	2105      	movs	r1, #5
 8002350:	f001 fcaa 	bl	8003ca8 <wm8994_write_reg>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4413      	add	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 800235c:	2303      	movs	r3, #3
 800235e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f103 0018 	add.w	r0, r3, #24
 8002366:	f107 020a 	add.w	r2, r7, #10
 800236a:	2302      	movs	r3, #2
 800236c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002370:	f001 fc9a 	bl	8003ca8 <wm8994_write_reg>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4413      	add	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f103 0018 	add.w	r0, r3, #24
 8002382:	f107 020a 	add.w	r2, r7, #10
 8002386:	2302      	movs	r3, #2
 8002388:	f240 6102 	movw	r1, #1538	@ 0x602
 800238c:	f001 fc8c 	bl	8003ca8 <wm8994_write_reg>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4413      	add	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f103 0018 	add.w	r0, r3, #24
 800239e:	f107 020a 	add.w	r2, r7, #10
 80023a2:	2302      	movs	r3, #2
 80023a4:	f240 6104 	movw	r1, #1540	@ 0x604
 80023a8:	f001 fc7e 	bl	8003ca8 <wm8994_write_reg>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4413      	add	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f103 0018 	add.w	r0, r3, #24
 80023ba:	f107 020a 	add.w	r2, r7, #10
 80023be:	2302      	movs	r3, #2
 80023c0:	f240 6105 	movw	r1, #1541	@ 0x605
 80023c4:	f001 fc70 	bl	8003ca8 <wm8994_write_reg>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4413      	add	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80023d0:	e09a      	b.n	8002508 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80023d2:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80023d6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f103 0018 	add.w	r0, r3, #24
 80023de:	f107 020a 	add.w	r2, r7, #10
 80023e2:	2302      	movs	r3, #2
 80023e4:	2105      	movs	r1, #5
 80023e6:	f001 fc5f 	bl	8003ca8 <wm8994_write_reg>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80023f2:	2301      	movs	r3, #1
 80023f4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f103 0018 	add.w	r0, r3, #24
 80023fc:	f107 020a 	add.w	r2, r7, #10
 8002400:	2302      	movs	r3, #2
 8002402:	f240 6101 	movw	r1, #1537	@ 0x601
 8002406:	f001 fc4f 	bl	8003ca8 <wm8994_write_reg>
 800240a:	4602      	mov	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f103 0018 	add.w	r0, r3, #24
 8002418:	f107 020a 	add.w	r2, r7, #10
 800241c:	2302      	movs	r3, #2
 800241e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002422:	f001 fc41 	bl	8003ca8 <wm8994_write_reg>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 800242e:	2302      	movs	r3, #2
 8002430:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f103 0018 	add.w	r0, r3, #24
 8002438:	f107 020a 	add.w	r2, r7, #10
 800243c:	2302      	movs	r3, #2
 800243e:	f240 6104 	movw	r1, #1540	@ 0x604
 8002442:	f001 fc31 	bl	8003ca8 <wm8994_write_reg>
 8002446:	4602      	mov	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f103 0018 	add.w	r0, r3, #24
 8002454:	f107 020a 	add.w	r2, r7, #10
 8002458:	2302      	movs	r3, #2
 800245a:	f240 6105 	movw	r1, #1541	@ 0x605
 800245e:	f001 fc23 	bl	8003ca8 <wm8994_write_reg>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
    break;
 800246a:	e04d      	b.n	8002508 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800246c:	f240 3303 	movw	r3, #771	@ 0x303
 8002470:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f103 0018 	add.w	r0, r3, #24
 8002478:	f107 020a 	add.w	r2, r7, #10
 800247c:	2302      	movs	r3, #2
 800247e:	2105      	movs	r1, #5
 8002480:	f001 fc12 	bl	8003ca8 <wm8994_write_reg>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4413      	add	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 800248c:	2301      	movs	r3, #1
 800248e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f103 0018 	add.w	r0, r3, #24
 8002496:	f107 020a 	add.w	r2, r7, #10
 800249a:	2302      	movs	r3, #2
 800249c:	f240 6101 	movw	r1, #1537	@ 0x601
 80024a0:	f001 fc02 	bl	8003ca8 <wm8994_write_reg>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4413      	add	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f103 0018 	add.w	r0, r3, #24
 80024b2:	f107 020a 	add.w	r2, r7, #10
 80024b6:	2302      	movs	r3, #2
 80024b8:	f240 6102 	movw	r1, #1538	@ 0x602
 80024bc:	f001 fbf4 	bl	8003ca8 <wm8994_write_reg>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80024c8:	2300      	movs	r3, #0
 80024ca:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f103 0018 	add.w	r0, r3, #24
 80024d2:	f107 020a 	add.w	r2, r7, #10
 80024d6:	2302      	movs	r3, #2
 80024d8:	f240 6104 	movw	r1, #1540	@ 0x604
 80024dc:	f001 fbe4 	bl	8003ca8 <wm8994_write_reg>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4413      	add	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f103 0018 	add.w	r0, r3, #24
 80024ee:	f107 020a 	add.w	r2, r7, #10
 80024f2:	2302      	movs	r3, #2
 80024f4:	f240 6105 	movw	r1, #1541	@ 0x605
 80024f8:	f001 fbd6 	bl	8003ca8 <wm8994_write_reg>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4413      	add	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
    break;
 8002504:	e000      	b.n	8002508 <WM8994_Init+0x3f4>
    break;
 8002506:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3b01      	subs	r3, #1
 800250e:	2b04      	cmp	r3, #4
 8002510:	f200 81e0 	bhi.w	80028d4 <WM8994_Init+0x7c0>
 8002514:	a201      	add	r2, pc, #4	@ (adr r2, 800251c <WM8994_Init+0x408>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	08002705 	.word	0x08002705
 8002520:	08002531 	.word	0x08002531
 8002524:	080025ef 	.word	0x080025ef
 8002528:	080028d5 	.word	0x080028d5
 800252c:	080027c3 	.word	0x080027c3
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 8002530:	f44f 6343 	mov.w	r3, #3120	@ 0xc30
 8002534:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f103 0018 	add.w	r0, r3, #24
 800253c:	f107 020a 	add.w	r2, r7, #10
 8002540:	2302      	movs	r3, #2
 8002542:	2104      	movs	r1, #4
 8002544:	f001 fbb0 	bl	8003ca8 <wm8994_write_reg>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4413      	add	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8002550:	23db      	movs	r3, #219	@ 0xdb
 8002552:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f103 0018 	add.w	r0, r3, #24
 800255a:	f107 020a 	add.w	r2, r7, #10
 800255e:	2302      	movs	r3, #2
 8002560:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002564:	f001 fba0 	bl	8003ca8 <wm8994_write_reg>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4413      	add	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 8002570:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002574:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f103 0018 	add.w	r0, r3, #24
 800257c:	f107 020a 	add.w	r2, r7, #10
 8002580:	2302      	movs	r3, #2
 8002582:	2102      	movs	r1, #2
 8002584:	f001 fb90 	bl	8003ca8 <wm8994_write_reg>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 8002590:	2302      	movs	r3, #2
 8002592:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f103 0018 	add.w	r0, r3, #24
 800259a:	f107 020a 	add.w	r2, r7, #10
 800259e:	2302      	movs	r3, #2
 80025a0:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80025a4:	f001 fb80 	bl	8003ca8 <wm8994_write_reg>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4413      	add	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f103 0018 	add.w	r0, r3, #24
 80025b6:	f107 020a 	add.w	r2, r7, #10
 80025ba:	2302      	movs	r3, #2
 80025bc:	f240 6109 	movw	r1, #1545	@ 0x609
 80025c0:	f001 fb72 	bl	8003ca8 <wm8994_write_reg>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4413      	add	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 80025cc:	230e      	movs	r3, #14
 80025ce:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 0018 	add.w	r0, r3, #24
 80025d6:	f107 020a 	add.w	r2, r7, #10
 80025da:	2302      	movs	r3, #2
 80025dc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80025e0:	f001 fb62 	bl	8003ca8 <wm8994_write_reg>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4413      	add	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
    break;
 80025ec:	e173      	b.n	80028d6 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 80025ee:	2311      	movs	r3, #17
 80025f0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f103 0018 	add.w	r0, r3, #24
 80025f8:	f107 020a 	add.w	r2, r7, #10
 80025fc:	2302      	movs	r3, #2
 80025fe:	2128      	movs	r1, #40	@ 0x28
 8002600:	f001 fb52 	bl	8003ca8 <wm8994_write_reg>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4413      	add	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 800260c:	2335      	movs	r3, #53	@ 0x35
 800260e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f103 0018 	add.w	r0, r3, #24
 8002616:	f107 020a 	add.w	r2, r7, #10
 800261a:	2302      	movs	r3, #2
 800261c:	2129      	movs	r1, #41	@ 0x29
 800261e:	f001 fb43 	bl	8003ca8 <wm8994_write_reg>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f103 0018 	add.w	r0, r3, #24
 8002630:	f107 020a 	add.w	r2, r7, #10
 8002634:	2302      	movs	r3, #2
 8002636:	212a      	movs	r1, #42	@ 0x2a
 8002638:	f001 fb36 	bl	8003ca8 <wm8994_write_reg>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8002644:	f240 3303 	movw	r3, #771	@ 0x303
 8002648:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f103 0018 	add.w	r0, r3, #24
 8002650:	f107 020a 	add.w	r2, r7, #10
 8002654:	2302      	movs	r3, #2
 8002656:	2104      	movs	r1, #4
 8002658:	f001 fb26 	bl	8003ca8 <wm8994_write_reg>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8002664:	23db      	movs	r3, #219	@ 0xdb
 8002666:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f103 0018 	add.w	r0, r3, #24
 800266e:	f107 020a 	add.w	r2, r7, #10
 8002672:	2302      	movs	r3, #2
 8002674:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002678:	f001 fb16 	bl	8003ca8 <wm8994_write_reg>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8002684:	f246 3350 	movw	r3, #25424	@ 0x6350
 8002688:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f103 0018 	add.w	r0, r3, #24
 8002690:	f107 020a 	add.w	r2, r7, #10
 8002694:	2302      	movs	r3, #2
 8002696:	2102      	movs	r1, #2
 8002698:	f001 fb06 	bl	8003ca8 <wm8994_write_reg>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 80026a4:	2302      	movs	r3, #2
 80026a6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 0018 	add.w	r0, r3, #24
 80026ae:	f107 020a 	add.w	r2, r7, #10
 80026b2:	2302      	movs	r3, #2
 80026b4:	f240 6106 	movw	r1, #1542	@ 0x606
 80026b8:	f001 faf6 	bl	8003ca8 <wm8994_write_reg>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f103 0018 	add.w	r0, r3, #24
 80026ca:	f107 020a 	add.w	r2, r7, #10
 80026ce:	2302      	movs	r3, #2
 80026d0:	f240 6107 	movw	r1, #1543	@ 0x607
 80026d4:	f001 fae8 	bl	8003ca8 <wm8994_write_reg>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 80026e0:	f248 030d 	movw	r3, #32781	@ 0x800d
 80026e4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f103 0018 	add.w	r0, r3, #24
 80026ec:	f107 020a 	add.w	r2, r7, #10
 80026f0:	2302      	movs	r3, #2
 80026f2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80026f6:	f001 fad7 	bl	8003ca8 <wm8994_write_reg>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
    break;
 8002702:	e0e8      	b.n	80028d6 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8002704:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8002708:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f103 0018 	add.w	r0, r3, #24
 8002710:	f107 020a 	add.w	r2, r7, #10
 8002714:	2302      	movs	r3, #2
 8002716:	2104      	movs	r1, #4
 8002718:	f001 fac6 	bl	8003ca8 <wm8994_write_reg>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8002724:	23db      	movs	r3, #219	@ 0xdb
 8002726:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f103 0018 	add.w	r0, r3, #24
 800272e:	f107 020a 	add.w	r2, r7, #10
 8002732:	2302      	movs	r3, #2
 8002734:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002738:	f001 fab6 	bl	8003ca8 <wm8994_write_reg>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4413      	add	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8002744:	f246 3350 	movw	r3, #25424	@ 0x6350
 8002748:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f103 0018 	add.w	r0, r3, #24
 8002750:	f107 020a 	add.w	r2, r7, #10
 8002754:	2302      	movs	r3, #2
 8002756:	2102      	movs	r1, #2
 8002758:	f001 faa6 	bl	8003ca8 <wm8994_write_reg>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4413      	add	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8002764:	2302      	movs	r3, #2
 8002766:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 0018 	add.w	r0, r3, #24
 800276e:	f107 020a 	add.w	r2, r7, #10
 8002772:	2302      	movs	r3, #2
 8002774:	f240 6106 	movw	r1, #1542	@ 0x606
 8002778:	f001 fa96 	bl	8003ca8 <wm8994_write_reg>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4413      	add	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f103 0018 	add.w	r0, r3, #24
 800278a:	f107 020a 	add.w	r2, r7, #10
 800278e:	2302      	movs	r3, #2
 8002790:	f240 6107 	movw	r1, #1543	@ 0x607
 8002794:	f001 fa88 	bl	8003ca8 <wm8994_write_reg>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4413      	add	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 80027a0:	230d      	movs	r3, #13
 80027a2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f103 0018 	add.w	r0, r3, #24
 80027aa:	f107 020a 	add.w	r2, r7, #10
 80027ae:	2302      	movs	r3, #2
 80027b0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80027b4:	f001 fa78 	bl	8003ca8 <wm8994_write_reg>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4413      	add	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
    break;
 80027c0:	e089      	b.n	80028d6 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 80027c2:	f640 733c 	movw	r3, #3900	@ 0xf3c
 80027c6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0018 	add.w	r0, r3, #24
 80027ce:	f107 020a 	add.w	r2, r7, #10
 80027d2:	2302      	movs	r3, #2
 80027d4:	2104      	movs	r1, #4
 80027d6:	f001 fa67 	bl	8003ca8 <wm8994_write_reg>
 80027da:	4602      	mov	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 80027e2:	23db      	movs	r3, #219	@ 0xdb
 80027e4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f103 0018 	add.w	r0, r3, #24
 80027ec:	f107 020a 	add.w	r2, r7, #10
 80027f0:	2302      	movs	r3, #2
 80027f2:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80027f6:	f001 fa57 	bl	8003ca8 <wm8994_write_reg>
 80027fa:	4602      	mov	r2, r0
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f103 0018 	add.w	r0, r3, #24
 8002808:	f107 020a 	add.w	r2, r7, #10
 800280c:	2302      	movs	r3, #2
 800280e:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002812:	f001 fa49 	bl	8003ca8 <wm8994_write_reg>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 800281e:	f246 33a0 	movw	r3, #25504	@ 0x63a0
 8002822:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f103 0018 	add.w	r0, r3, #24
 800282a:	f107 020a 	add.w	r2, r7, #10
 800282e:	2302      	movs	r3, #2
 8002830:	2102      	movs	r1, #2
 8002832:	f001 fa39 	bl	8003ca8 <wm8994_write_reg>
 8002836:	4602      	mov	r2, r0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 800283e:	2302      	movs	r3, #2
 8002840:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f103 0018 	add.w	r0, r3, #24
 8002848:	f107 020a 	add.w	r2, r7, #10
 800284c:	2302      	movs	r3, #2
 800284e:	f240 6106 	movw	r1, #1542	@ 0x606
 8002852:	f001 fa29 	bl	8003ca8 <wm8994_write_reg>
 8002856:	4602      	mov	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f103 0018 	add.w	r0, r3, #24
 8002864:	f107 020a 	add.w	r2, r7, #10
 8002868:	2302      	movs	r3, #2
 800286a:	f240 6107 	movw	r1, #1543	@ 0x607
 800286e:	f001 fa1b 	bl	8003ca8 <wm8994_write_reg>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f103 0018 	add.w	r0, r3, #24
 8002880:	f107 020a 	add.w	r2, r7, #10
 8002884:	2302      	movs	r3, #2
 8002886:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800288a:	f001 fa0d 	bl	8003ca8 <wm8994_write_reg>
 800288e:	4602      	mov	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f103 0018 	add.w	r0, r3, #24
 800289c:	f107 020a 	add.w	r2, r7, #10
 80028a0:	2302      	movs	r3, #2
 80028a2:	f240 6109 	movw	r1, #1545	@ 0x609
 80028a6:	f001 f9ff 	bl	8003ca8 <wm8994_write_reg>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 80028b2:	230d      	movs	r3, #13
 80028b4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f103 0018 	add.w	r0, r3, #24
 80028bc:	f107 020a 	add.w	r2, r7, #10
 80028c0:	2302      	movs	r3, #2
 80028c2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80028c6:	f001 f9ef 	bl	8003ca8 <wm8994_write_reg>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
    
    break;    
 80028d2:	e000      	b.n	80028d6 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 80028d4:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fff9 	bl	80038d4 <WM8994_SetFrequency>
 80028e2:	4602      	mov	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d11a      	bne.n	8002928 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 80028f2:	2100      	movs	r1, #0
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 ff59 	bl	80037ac <WM8994_SetResolution>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8002902:	2103      	movs	r1, #3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 ffab 	bl	8003860 <WM8994_SetProtocol>
 800290a:	4602      	mov	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3318      	adds	r3, #24
 8002916:	2101      	movs	r1, #1
 8002918:	4618      	mov	r0, r3
 800291a:	f001 faf5 	bl	8003f08 <wm8994_aif1_control1_adcr_src>
 800291e:	4602      	mov	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e01b      	b.n	8002960 <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 ff3c 	bl	80037ac <WM8994_SetResolution>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4413      	add	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 800293c:	2102      	movs	r1, #2
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 ff8e 	bl	8003860 <WM8994_SetProtocol>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3318      	adds	r3, #24
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f001 fad8 	bl	8003f08 <wm8994_aif1_control1_adcr_src>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8002960:	2300      	movs	r3, #0
 8002962:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f103 0018 	add.w	r0, r3, #24
 800296a:	f107 020a 	add.w	r2, r7, #10
 800296e:	2302      	movs	r3, #2
 8002970:	f240 3102 	movw	r1, #770	@ 0x302
 8002974:	f001 f998 	bl	8003ca8 <wm8994_write_reg>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4413      	add	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8002980:	230a      	movs	r3, #10
 8002982:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f103 0018 	add.w	r0, r3, #24
 800298a:	f107 020a 	add.w	r2, r7, #10
 800298e:	2302      	movs	r3, #2
 8002990:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002994:	f001 f988 	bl	8003ca8 <wm8994_write_reg>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 80029a0:	2301      	movs	r3, #1
 80029a2:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f103 0018 	add.w	r0, r3, #24
 80029aa:	f107 020a 	add.w	r2, r7, #10
 80029ae:	2302      	movs	r3, #2
 80029b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029b4:	f001 f978 	bl	8003ca8 <wm8994_write_reg>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4413      	add	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 81c6 	beq.w	8002d56 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d164      	bne.n	8002a9c <WM8994_Init+0x988>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d160      	bne.n	8002a9c <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 80029da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029de:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f103 0018 	add.w	r0, r3, #24
 80029e6:	f107 020a 	add.w	r2, r7, #10
 80029ea:	2302      	movs	r3, #2
 80029ec:	212d      	movs	r1, #45	@ 0x2d
 80029ee:	f001 f95b 	bl	8003ca8 <wm8994_write_reg>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4413      	add	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f103 0018 	add.w	r0, r3, #24
 8002a00:	f107 020a 	add.w	r2, r7, #10
 8002a04:	2302      	movs	r3, #2
 8002a06:	212e      	movs	r1, #46	@ 0x2e
 8002a08:	f001 f94e 	bl	8003ca8 <wm8994_write_reg>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8002a14:	4b52      	ldr	r3, [pc, #328]	@ (8002b60 <WM8994_Init+0xa4c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d119      	bne.n	8002a50 <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8002a1c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8002a20:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f103 0018 	add.w	r0, r3, #24
 8002a28:	f107 020a 	add.w	r2, r7, #10
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002a32:	f001 f939 	bl	8003ca8 <wm8994_write_reg>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8002a3e:	4b48      	ldr	r3, [pc, #288]	@ (8002b60 <WM8994_Init+0xa4c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8002a44:	f240 1145 	movw	r1, #325	@ 0x145
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f001 f8b5 	bl	8003bb8 <WM8994_Delay>
 8002a4e:	e014      	b.n	8002a7a <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8002a50:	f248 1308 	movw	r3, #33032	@ 0x8108
 8002a54:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f103 0018 	add.w	r0, r3, #24
 8002a5c:	f107 020a 	add.w	r2, r7, #10
 8002a60:	2302      	movs	r3, #2
 8002a62:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002a66:	f001 f91f 	bl	8003ca8 <wm8994_write_reg>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8002a72:	2132      	movs	r1, #50	@ 0x32
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f001 f89f 	bl	8003bb8 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f103 0018 	add.w	r0, r3, #24
 8002a84:	f107 020a 	add.w	r2, r7, #10
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002a8e:	f001 f90b 	bl	8003ca8 <wm8994_write_reg>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e0f4      	b.n	8002c86 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8002a9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002aa0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f103 0018 	add.w	r0, r3, #24
 8002aa8:	f107 020a 	add.w	r2, r7, #10
 8002aac:	2302      	movs	r3, #2
 8002aae:	2103      	movs	r1, #3
 8002ab0:	f001 f8fa 	bl	8003ca8 <wm8994_write_reg>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8002abc:	2300      	movs	r3, #0
 8002abe:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f103 0018 	add.w	r0, r3, #24
 8002ac6:	f107 020a 	add.w	r2, r7, #10
 8002aca:	2302      	movs	r3, #2
 8002acc:	2122      	movs	r1, #34	@ 0x22
 8002ace:	f001 f8eb 	bl	8003ca8 <wm8994_write_reg>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f103 0018 	add.w	r0, r3, #24
 8002ae0:	f107 020a 	add.w	r2, r7, #10
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	2123      	movs	r1, #35	@ 0x23
 8002ae8:	f001 f8de 	bl	8003ca8 <wm8994_write_reg>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8002af4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002af8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f103 0018 	add.w	r0, r3, #24
 8002b00:	f107 020a 	add.w	r2, r7, #10
 8002b04:	2302      	movs	r3, #2
 8002b06:	2136      	movs	r1, #54	@ 0x36
 8002b08:	f001 f8ce 	bl	8003ca8 <wm8994_write_reg>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4413      	add	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8002b14:	f243 0303 	movw	r3, #12291	@ 0x3003
 8002b18:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f103 0018 	add.w	r0, r3, #24
 8002b20:	f107 020a 	add.w	r2, r7, #10
 8002b24:	2302      	movs	r3, #2
 8002b26:	2101      	movs	r1, #1
 8002b28:	f001 f8be 	bl	8003ca8 <wm8994_write_reg>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d113      	bne.n	8002b64 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8002b3c:	f240 2305 	movw	r3, #517	@ 0x205
 8002b40:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f103 0018 	add.w	r0, r3, #24
 8002b48:	f107 020a 	add.w	r2, r7, #10
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	2151      	movs	r1, #81	@ 0x51
 8002b50:	f001 f8aa 	bl	8003ca8 <wm8994_write_reg>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e011      	b.n	8002b82 <WM8994_Init+0xa6e>
 8002b5e:	bf00      	nop
 8002b60:	240004e8 	.word	0x240004e8
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8002b64:	2305      	movs	r3, #5
 8002b66:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f103 0018 	add.w	r0, r3, #24
 8002b6e:	f107 020a 	add.w	r2, r7, #10
 8002b72:	2302      	movs	r3, #2
 8002b74:	2151      	movs	r1, #81	@ 0x51
 8002b76:	f001 f897 	bl	8003ca8 <wm8994_write_reg>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8002b82:	f243 3303 	movw	r3, #13059	@ 0x3303
 8002b86:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f103 0018 	add.w	r0, r3, #24
 8002b8e:	f107 020a 	add.w	r2, r7, #10
 8002b92:	2302      	movs	r3, #2
 8002b94:	2101      	movs	r1, #1
 8002b96:	f001 f887 	bl	8003ca8 <wm8994_write_reg>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8002ba2:	2322      	movs	r3, #34	@ 0x22
 8002ba4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f103 0018 	add.w	r0, r3, #24
 8002bac:	f107 020a 	add.w	r2, r7, #10
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	2160      	movs	r1, #96	@ 0x60
 8002bb4:	f001 f878 	bl	8003ca8 <wm8994_write_reg>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8002bc0:	f649 7325 	movw	r3, #40741	@ 0x9f25
 8002bc4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f103 0018 	add.w	r0, r3, #24
 8002bcc:	f107 020a 	add.w	r2, r7, #10
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	214c      	movs	r1, #76	@ 0x4c
 8002bd4:	f001 f868 	bl	8003ca8 <wm8994_write_reg>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4413      	add	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8002be0:	210f      	movs	r1, #15
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 ffe8 	bl	8003bb8 <WM8994_Delay>
      
      tmp = 0x0001;
 8002be8:	2301      	movs	r3, #1
 8002bea:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f103 0018 	add.w	r0, r3, #24
 8002bf2:	f107 020a 	add.w	r2, r7, #10
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	212d      	movs	r1, #45	@ 0x2d
 8002bfa:	f001 f855 	bl	8003ca8 <wm8994_write_reg>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f103 0018 	add.w	r0, r3, #24
 8002c0c:	f107 020a 	add.w	r2, r7, #10
 8002c10:	2302      	movs	r3, #2
 8002c12:	212e      	movs	r1, #46	@ 0x2e
 8002c14:	f001 f848 	bl	8003ca8 <wm8994_write_reg>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8002c20:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8002c24:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f103 0018 	add.w	r0, r3, #24
 8002c2c:	f107 020a 	add.w	r2, r7, #10
 8002c30:	2302      	movs	r3, #2
 8002c32:	2103      	movs	r1, #3
 8002c34:	f001 f838 	bl	8003ca8 <wm8994_write_reg>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8002c40:	2333      	movs	r3, #51	@ 0x33
 8002c42:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f103 0018 	add.w	r0, r3, #24
 8002c4a:	f107 020a 	add.w	r2, r7, #10
 8002c4e:	2302      	movs	r3, #2
 8002c50:	2154      	movs	r1, #84	@ 0x54
 8002c52:	f001 f829 	bl	8003ca8 <wm8994_write_reg>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8002c5e:	f240 1101 	movw	r1, #257	@ 0x101
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 ffa8 	bl	8003bb8 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8002c68:	23ee      	movs	r3, #238	@ 0xee
 8002c6a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 0018 	add.w	r0, r3, #24
 8002c72:	f107 020a 	add.w	r2, r7, #10
 8002c76:	2302      	movs	r3, #2
 8002c78:	2160      	movs	r1, #96	@ 0x60
 8002c7a:	f001 f815 	bl	8003ca8 <wm8994_write_reg>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8002c86:	23c0      	movs	r3, #192	@ 0xc0
 8002c88:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f103 0018 	add.w	r0, r3, #24
 8002c90:	f107 020a 	add.w	r2, r7, #10
 8002c94:	2302      	movs	r3, #2
 8002c96:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8002c9a:	f001 f805 	bl	8003ca8 <wm8994_write_reg>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f103 0018 	add.w	r0, r3, #24
 8002cac:	f107 020a 	add.w	r2, r7, #10
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f240 6111 	movw	r1, #1553	@ 0x611
 8002cb6:	f000 fff7 	bl	8003ca8 <wm8994_write_reg>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 8002cc2:	2310      	movs	r3, #16
 8002cc4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f103 0018 	add.w	r0, r3, #24
 8002ccc:	f107 020a 	add.w	r2, r7, #10
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002cd6:	f000 ffe7 	bl	8003ca8 <wm8994_write_reg>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 8002ce2:	23c0      	movs	r3, #192	@ 0xc0
 8002ce4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f103 0018 	add.w	r0, r3, #24
 8002cec:	f107 020a 	add.w	r2, r7, #10
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	f240 6112 	movw	r1, #1554	@ 0x612
 8002cf6:	f000 ffd7 	bl	8003ca8 <wm8994_write_reg>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f103 0018 	add.w	r0, r3, #24
 8002d08:	f107 020a 	add.w	r2, r7, #10
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f240 6113 	movw	r1, #1555	@ 0x613
 8002d12:	f000 ffc9 	bl	8003ca8 <wm8994_write_reg>
 8002d16:	4602      	mov	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8002d1e:	2310      	movs	r3, #16
 8002d20:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f103 0018 	add.w	r0, r3, #24
 8002d28:	f107 020a 	add.w	r2, r7, #10
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f240 4122 	movw	r1, #1058	@ 0x422
 8002d32:	f000 ffb9 	bl	8003ca8 <wm8994_write_reg>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	2101      	movs	r1, #1
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f99f 	bl	800308c <WM8994_SetVolume>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80b5 	beq.w	8002eca <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d003      	beq.n	8002d70 <WM8994_Init+0xc5c>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d130      	bne.n	8002dd2 <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8002d70:	2313      	movs	r3, #19
 8002d72:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 0018 	add.w	r0, r3, #24
 8002d7a:	f107 020a 	add.w	r2, r7, #10
 8002d7e:	2302      	movs	r3, #2
 8002d80:	2101      	movs	r1, #1
 8002d82:	f000 ff91 	bl	8003ca8 <wm8994_write_reg>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f103 0018 	add.w	r0, r3, #24
 8002d98:	f107 020a 	add.w	r2, r7, #10
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002da2:	f000 ff81 	bl	8003ca8 <wm8994_write_reg>
 8002da6:	4602      	mov	r2, r0
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 8002dae:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002db2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f103 0018 	add.w	r0, r3, #24
 8002dba:	f107 020a 	add.w	r2, r7, #10
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f240 4111 	movw	r1, #1041	@ 0x411
 8002dc4:	f000 ff70 	bl	8003ca8 <wm8994_write_reg>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	e06f      	b.n	8002eb2 <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d13e      	bne.n	8002e58 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8002dda:	2313      	movs	r3, #19
 8002ddc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f103 0018 	add.w	r0, r3, #24
 8002de4:	f107 020a 	add.w	r2, r7, #10
 8002de8:	2302      	movs	r3, #2
 8002dea:	2101      	movs	r1, #1
 8002dec:	f000 ff5c 	bl	8003ca8 <wm8994_write_reg>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4413      	add	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f103 0018 	add.w	r0, r3, #24
 8002e02:	f107 020a 	add.w	r2, r7, #10
 8002e06:	2302      	movs	r3, #2
 8002e08:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002e0c:	f000 ff4c 	bl	8003ca8 <wm8994_write_reg>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8002e18:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e1c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f103 0018 	add.w	r0, r3, #24
 8002e24:	f107 020a 	add.w	r2, r7, #10
 8002e28:	2302      	movs	r3, #2
 8002e2a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002e2e:	f000 ff3b 	bl	8003ca8 <wm8994_write_reg>
 8002e32:	4602      	mov	r2, r0
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f103 0018 	add.w	r0, r3, #24
 8002e40:	f107 020a 	add.w	r2, r7, #10
 8002e44:	2302      	movs	r3, #2
 8002e46:	f240 4111 	movw	r1, #1041	@ 0x411
 8002e4a:	f000 ff2d 	bl	8003ca8 <wm8994_write_reg>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e02c      	b.n	8002eb2 <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 8002e58:	230b      	movs	r3, #11
 8002e5a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f103 0018 	add.w	r0, r3, #24
 8002e62:	f107 020a 	add.w	r2, r7, #10
 8002e66:	2302      	movs	r3, #2
 8002e68:	2118      	movs	r1, #24
 8002e6a:	f000 ff1d 	bl	8003ca8 <wm8994_write_reg>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f103 0018 	add.w	r0, r3, #24
 8002e7c:	f107 020a 	add.w	r2, r7, #10
 8002e80:	2302      	movs	r3, #2
 8002e82:	211a      	movs	r1, #26
 8002e84:	f000 ff10 	bl	8003ca8 <wm8994_write_reg>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8002e90:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e94:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f103 0018 	add.w	r0, r3, #24
 8002e9c:	f107 020a 	add.w	r2, r7, #10
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002ea6:	f000 feff 	bl	8003ca8 <wm8994_write_reg>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2100      	movs	r1, #0
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f8e5 	bl	800308c <WM8994_SetVolume>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ed4:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 8002ee8:	2100      	movs	r1, #0
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f861 	bl	8002fb2 <WM8994_Stop>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3318      	adds	r3, #24
 8002f0e:	f107 020a 	add.w	r2, r7, #10
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ff00 	bl	8003d1a <wm8994_sw_reset_r>
 8002f1a:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 8002f1c:	897b      	ldrh	r3, [r7, #10]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	601a      	str	r2, [r3, #0]
  
  return ret;
 8002f24:	68fb      	ldr	r3, [r7, #12]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8002f36:	2100      	movs	r1, #0
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f9d3 	bl	80032e4 <WM8994_SetMute>
 8002f3e:	4603      	mov	r3, r0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 8002f50:	2301      	movs	r3, #1
 8002f52:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 8002f54:	2101      	movs	r1, #1
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f9c4 	bl	80032e4 <WM8994_SetMute>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e011      	b.n	8002f8e <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f103 0018 	add.w	r0, r3, #24
 8002f70:	f107 020a 	add.w	r2, r7, #10
 8002f74:	2302      	movs	r3, #2
 8002f76:	2102      	movs	r1, #2
 8002f78:	f000 fe96 	bl	8003ca8 <wm8994_write_reg>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	e001      	b.n	8002f8e <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f99e 	bl	80032e4 <WM8994_SetMute>
 8002fa8:	4603      	mov	r3, r0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f990 	bl	80032e4 <WM8994_SetMute>
 8002fc4:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d054      	beq.n	8003076 <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 8002fcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fd0:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f103 0018 	add.w	r0, r3, #24
 8002fd8:	f107 020a 	add.w	r2, r7, #10
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002fe2:	f000 fe61 	bl	8003ca8 <wm8994_write_reg>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f103 0018 	add.w	r0, r3, #24
 8002ff4:	f107 020a 	add.w	r2, r7, #10
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f240 4122 	movw	r1, #1058	@ 0x422
 8002ffe:	f000 fe53 	bl	8003ca8 <wm8994_write_reg>
 8003002:	4602      	mov	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 800300a:	2300      	movs	r3, #0
 800300c:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f103 0018 	add.w	r0, r3, #24
 8003014:	f107 020a 	add.w	r2, r7, #10
 8003018:	2302      	movs	r3, #2
 800301a:	212d      	movs	r1, #45	@ 0x2d
 800301c:	f000 fe44 	bl	8003ca8 <wm8994_write_reg>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4413      	add	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f103 0018 	add.w	r0, r3, #24
 800302e:	f107 020a 	add.w	r2, r7, #10
 8003032:	2302      	movs	r3, #2
 8003034:	212e      	movs	r1, #46	@ 0x2e
 8003036:	f000 fe37 	bl	8003ca8 <wm8994_write_reg>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f103 0018 	add.w	r0, r3, #24
 8003048:	f107 020a 	add.w	r2, r7, #10
 800304c:	2302      	movs	r3, #2
 800304e:	2105      	movs	r1, #5
 8003050:	f000 fe2a 	bl	8003ca8 <wm8994_write_reg>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4413      	add	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f103 0018 	add.w	r0, r3, #24
 8003062:	f107 020a 	add.w	r2, r7, #10
 8003066:	2302      	movs	r3, #2
 8003068:	2100      	movs	r1, #0
 800306a:	f000 fe1d 	bl	8003ca8 <wm8994_write_reg>
 800306e:	4602      	mov	r2, r0
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003080:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003082:	68fb      	ldr	r3, [r7, #12]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b01      	cmp	r3, #1
 800309e:	f040 8089 	bne.w	80031b4 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80030a6:	d93c      	bls.n	8003122 <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80030a8:	2100      	movs	r1, #0
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f91a 	bl	80032e4 <WM8994_SetMute>
 80030b0:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 80030b2:	f240 137f 	movw	r3, #383	@ 0x17f
 80030b6:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f103 0018 	add.w	r0, r3, #24
 80030be:	f107 0212 	add.w	r2, r7, #18
 80030c2:	2302      	movs	r3, #2
 80030c4:	211c      	movs	r1, #28
 80030c6:	f000 fdef 	bl	8003ca8 <wm8994_write_reg>
 80030ca:	4602      	mov	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	4413      	add	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f103 0018 	add.w	r0, r3, #24
 80030d8:	f107 0212 	add.w	r2, r7, #18
 80030dc:	2302      	movs	r3, #2
 80030de:	211d      	movs	r1, #29
 80030e0:	f000 fde2 	bl	8003ca8 <wm8994_write_reg>
 80030e4:	4602      	mov	r2, r0
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	4413      	add	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f103 0018 	add.w	r0, r3, #24
 80030f2:	f107 0212 	add.w	r2, r7, #18
 80030f6:	2302      	movs	r3, #2
 80030f8:	2126      	movs	r1, #38	@ 0x26
 80030fa:	f000 fdd5 	bl	8003ca8 <wm8994_write_reg>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	4413      	add	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f103 0018 	add.w	r0, r3, #24
 800310c:	f107 0212 	add.w	r2, r7, #18
 8003110:	2302      	movs	r3, #2
 8003112:	2127      	movs	r1, #39	@ 0x27
 8003114:	f000 fdc8 	bl	8003ca8 <wm8994_write_reg>
 8003118:	4602      	mov	r2, r0
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	4413      	add	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e083      	b.n	800322a <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8003128:	2101      	movs	r1, #1
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f8da 	bl	80032e4 <WM8994_SetMute>
 8003130:	6178      	str	r0, [r7, #20]
 8003132:	e07a      	b.n	800322a <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8003134:	2100      	movs	r1, #0
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f8d4 	bl	80032e4 <WM8994_SetMute>
 800313c:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	b29b      	uxth	r3, r3
 8003142:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003146:	b29b      	uxth	r3, r3
 8003148:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f103 0018 	add.w	r0, r3, #24
 8003150:	f107 0212 	add.w	r2, r7, #18
 8003154:	2302      	movs	r3, #2
 8003156:	211c      	movs	r1, #28
 8003158:	f000 fda6 	bl	8003ca8 <wm8994_write_reg>
 800315c:	4602      	mov	r2, r0
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	4413      	add	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f103 0018 	add.w	r0, r3, #24
 800316a:	f107 0212 	add.w	r2, r7, #18
 800316e:	2302      	movs	r3, #2
 8003170:	211d      	movs	r1, #29
 8003172:	f000 fd99 	bl	8003ca8 <wm8994_write_reg>
 8003176:	4602      	mov	r2, r0
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	4413      	add	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f103 0018 	add.w	r0, r3, #24
 8003184:	f107 0212 	add.w	r2, r7, #18
 8003188:	2302      	movs	r3, #2
 800318a:	2126      	movs	r1, #38	@ 0x26
 800318c:	f000 fd8c 	bl	8003ca8 <wm8994_write_reg>
 8003190:	4602      	mov	r2, r0
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	4413      	add	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f103 0018 	add.w	r0, r3, #24
 800319e:	f107 0212 	add.w	r2, r7, #18
 80031a2:	2302      	movs	r3, #2
 80031a4:	2127      	movs	r1, #39	@ 0x27
 80031a6:	f000 fd7f 	bl	8003ca8 <wm8994_write_reg>
 80031aa:	4602      	mov	r2, r0
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	4413      	add	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e03a      	b.n	800322a <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031bc:	b29b      	uxth	r3, r3
 80031be:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f103 0018 	add.w	r0, r3, #24
 80031c6:	f107 0212 	add.w	r2, r7, #18
 80031ca:	2302      	movs	r3, #2
 80031cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80031d0:	f000 fd6a 	bl	8003ca8 <wm8994_write_reg>
 80031d4:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f103 0018 	add.w	r0, r3, #24
 80031dc:	f107 0212 	add.w	r2, r7, #18
 80031e0:	2302      	movs	r3, #2
 80031e2:	f240 4101 	movw	r1, #1025	@ 0x401
 80031e6:	f000 fd5f 	bl	8003ca8 <wm8994_write_reg>
 80031ea:	4602      	mov	r2, r0
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	4413      	add	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f103 0018 	add.w	r0, r3, #24
 80031f8:	f107 0212 	add.w	r2, r7, #18
 80031fc:	2302      	movs	r3, #2
 80031fe:	f240 4104 	movw	r1, #1028	@ 0x404
 8003202:	f000 fd51 	bl	8003ca8 <wm8994_write_reg>
 8003206:	4602      	mov	r2, r0
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	4413      	add	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f103 0018 	add.w	r0, r3, #24
 8003214:	f107 0212 	add.w	r2, r7, #18
 8003218:	2302      	movs	r3, #2
 800321a:	f240 4105 	movw	r1, #1029	@ 0x405
 800321e:	f000 fd43 	bl	8003ca8 <wm8994_write_reg>
 8003222:	4602      	mov	r2, r0
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	4413      	add	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 8003230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003234:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8003236:	697b      	ldr	r3, [r7, #20]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d11e      	bne.n	8003294 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3318      	adds	r3, #24
 800325a:	f107 0212 	add.w	r2, r7, #18
 800325e:	4611      	mov	r1, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fd6a 	bl	8003d3a <wm8994_lo_hpout1l_vol_r>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 800326c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e02d      	b.n	80032d0 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8003274:	8a7b      	ldrh	r3, [r7, #18]
 8003276:	461a      	mov	r2, r3
 8003278:	2364      	movs	r3, #100	@ 0x64
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	4a17      	ldr	r2, [pc, #92]	@ (80032dc <WM8994_GetVolume+0x9c>)
 8003280:	fb82 1203 	smull	r1, r2, r2, r3
 8003284:	441a      	add	r2, r3
 8003286:	1152      	asrs	r2, r2, #5
 8003288:	17db      	asrs	r3, r3, #31
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	b2da      	uxtb	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e01d      	b.n	80032d0 <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3318      	adds	r3, #24
 8003298:	f107 0212 	add.w	r2, r7, #18
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fe63 	bl	8003f6a <wm8994_aif1_adc1_left_vol_adc1l_r>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e00e      	b.n	80032d0 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 80032b2:	8a7b      	ldrh	r3, [r7, #18]
 80032b4:	461a      	mov	r2, r3
 80032b6:	2364      	movs	r3, #100	@ 0x64
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	4a08      	ldr	r2, [pc, #32]	@ (80032e0 <WM8994_GetVolume+0xa0>)
 80032be:	fb82 1203 	smull	r1, r2, r2, r3
 80032c2:	441a      	add	r2, r3
 80032c4:	11d2      	asrs	r2, r2, #7
 80032c6:	17db      	asrs	r3, r3, #31
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 80032d0:	697b      	ldr	r3, [r7, #20]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	82082083 	.word	0x82082083
 80032e0:	891ac73b 	.word	0x891ac73b

080032e4 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d11c      	bne.n	800332e <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80032f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032f8:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f103 0018 	add.w	r0, r3, #24
 8003300:	f107 020a 	add.w	r2, r7, #10
 8003304:	2302      	movs	r3, #2
 8003306:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800330a:	f000 fccd 	bl	8003ca8 <wm8994_write_reg>
 800330e:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f103 0018 	add.w	r0, r3, #24
 8003316:	f107 020a 	add.w	r2, r7, #10
 800331a:	2302      	movs	r3, #2
 800331c:	f240 4122 	movw	r1, #1058	@ 0x422
 8003320:	f000 fcc2 	bl	8003ca8 <wm8994_write_reg>
 8003324:	4602      	mov	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e01a      	b.n	8003364 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 800332e:	2310      	movs	r3, #16
 8003330:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f103 0018 	add.w	r0, r3, #24
 8003338:	f107 020a 	add.w	r2, r7, #10
 800333c:	2302      	movs	r3, #2
 800333e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003342:	f000 fcb1 	bl	8003ca8 <wm8994_write_reg>
 8003346:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f103 0018 	add.w	r0, r3, #24
 800334e:	f107 020a 	add.w	r2, r7, #10
 8003352:	2302      	movs	r3, #2
 8003354:	f240 4122 	movw	r1, #1058	@ 0x422
 8003358:	f000 fca6 	bl	8003ca8 <wm8994_write_reg>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800336e:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003370:	68fb      	ldr	r3, [r7, #12]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d003      	beq.n	8003392 <WM8994_SetOutputMode+0x18>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b04      	cmp	r3, #4
 800338e:	f040 809c 	bne.w	80034ca <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 8003392:	2300      	movs	r3, #0
 8003394:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f103 0018 	add.w	r0, r3, #24
 800339c:	f107 020a 	add.w	r2, r7, #10
 80033a0:	2302      	movs	r3, #2
 80033a2:	2101      	movs	r1, #1
 80033a4:	f000 fc80 	bl	8003ca8 <wm8994_write_reg>
 80033a8:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 80033aa:	f240 3303 	movw	r3, #771	@ 0x303
 80033ae:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f103 0018 	add.w	r0, r3, #24
 80033b6:	f107 020a 	add.w	r2, r7, #10
 80033ba:	2302      	movs	r3, #2
 80033bc:	2105      	movs	r1, #5
 80033be:	f000 fc73 	bl	8003ca8 <wm8994_write_reg>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80033ca:	2301      	movs	r3, #1
 80033cc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f103 0018 	add.w	r0, r3, #24
 80033d4:	f107 020a 	add.w	r2, r7, #10
 80033d8:	2302      	movs	r3, #2
 80033da:	f240 6101 	movw	r1, #1537	@ 0x601
 80033de:	f000 fc63 	bl	8003ca8 <wm8994_write_reg>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f103 0018 	add.w	r0, r3, #24
 80033f0:	f107 020a 	add.w	r2, r7, #10
 80033f4:	2302      	movs	r3, #2
 80033f6:	f240 6102 	movw	r1, #1538	@ 0x602
 80033fa:	f000 fc55 	bl	8003ca8 <wm8994_write_reg>
 80033fe:	4602      	mov	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8003406:	2300      	movs	r3, #0
 8003408:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f103 0018 	add.w	r0, r3, #24
 8003410:	f107 020a 	add.w	r2, r7, #10
 8003414:	2302      	movs	r3, #2
 8003416:	f240 6104 	movw	r1, #1540	@ 0x604
 800341a:	f000 fc45 	bl	8003ca8 <wm8994_write_reg>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f103 0018 	add.w	r0, r3, #24
 800342c:	f107 020a 	add.w	r2, r7, #10
 8003430:	2302      	movs	r3, #2
 8003432:	f240 6105 	movw	r1, #1541	@ 0x605
 8003436:	f000 fc37 	bl	8003ca8 <wm8994_write_reg>
 800343a:	4602      	mov	r2, r0
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 8003442:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003446:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f103 0018 	add.w	r0, r3, #24
 800344e:	f107 020a 	add.w	r2, r7, #10
 8003452:	2302      	movs	r3, #2
 8003454:	212d      	movs	r1, #45	@ 0x2d
 8003456:	f000 fc27 	bl	8003ca8 <wm8994_write_reg>
 800345a:	4602      	mov	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f103 0018 	add.w	r0, r3, #24
 8003468:	f107 020a 	add.w	r2, r7, #10
 800346c:	2302      	movs	r3, #2
 800346e:	212e      	movs	r1, #46	@ 0x2e
 8003470:	f000 fc1a 	bl	8003ca8 <wm8994_write_reg>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4413      	add	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 800347c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8003480:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f103 0018 	add.w	r0, r3, #24
 8003488:	f107 020a 	add.w	r2, r7, #10
 800348c:	2302      	movs	r3, #2
 800348e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003492:	f000 fc09 	bl	8003ca8 <wm8994_write_reg>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 800349e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fb88 	bl	8003bb8 <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 80034a8:	2300      	movs	r3, #0
 80034aa:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f103 0018 	add.w	r0, r3, #24
 80034b2:	f107 020a 	add.w	r2, r7, #10
 80034b6:	2302      	movs	r3, #2
 80034b8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80034bc:	f000 fbf4 	bl	8003ca8 <wm8994_write_reg>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4413      	add	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e165      	b.n	8003796 <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d149      	bne.n	8003564 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 80034d0:	f640 430c 	movw	r3, #3084	@ 0xc0c
 80034d4:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f103 0018 	add.w	r0, r3, #24
 80034dc:	f107 020a 	add.w	r2, r7, #10
 80034e0:	2302      	movs	r3, #2
 80034e2:	2105      	movs	r1, #5
 80034e4:	f000 fbe0 	bl	8003ca8 <wm8994_write_reg>
 80034e8:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 80034ea:	2300      	movs	r3, #0
 80034ec:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f103 0018 	add.w	r0, r3, #24
 80034f4:	f107 020a 	add.w	r2, r7, #10
 80034f8:	2302      	movs	r3, #2
 80034fa:	f240 6101 	movw	r1, #1537	@ 0x601
 80034fe:	f000 fbd3 	bl	8003ca8 <wm8994_write_reg>
 8003502:	4602      	mov	r2, r0
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4413      	add	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f103 0018 	add.w	r0, r3, #24
 8003510:	f107 020a 	add.w	r2, r7, #10
 8003514:	2302      	movs	r3, #2
 8003516:	f240 6102 	movw	r1, #1538	@ 0x602
 800351a:	f000 fbc5 	bl	8003ca8 <wm8994_write_reg>
 800351e:	4602      	mov	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8003526:	2302      	movs	r3, #2
 8003528:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f103 0018 	add.w	r0, r3, #24
 8003530:	f107 020a 	add.w	r2, r7, #10
 8003534:	2302      	movs	r3, #2
 8003536:	f240 6104 	movw	r1, #1540	@ 0x604
 800353a:	f000 fbb5 	bl	8003ca8 <wm8994_write_reg>
 800353e:	4602      	mov	r2, r0
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f103 0018 	add.w	r0, r3, #24
 800354c:	f107 020a 	add.w	r2, r7, #10
 8003550:	2302      	movs	r3, #2
 8003552:	f240 6105 	movw	r1, #1541	@ 0x605
 8003556:	f000 fba7 	bl	8003ca8 <wm8994_write_reg>
 800355a:	4602      	mov	r2, r0
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
      break;
 8003562:	e03b      	b.n	80035dc <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8003564:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8003568:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f103 0018 	add.w	r0, r3, #24
 8003570:	f107 020a 	add.w	r2, r7, #10
 8003574:	2302      	movs	r3, #2
 8003576:	2105      	movs	r1, #5
 8003578:	f000 fb96 	bl	8003ca8 <wm8994_write_reg>
 800357c:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 800357e:	2301      	movs	r3, #1
 8003580:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 0018 	add.w	r0, r3, #24
 8003588:	f107 020a 	add.w	r2, r7, #10
 800358c:	2302      	movs	r3, #2
 800358e:	f240 6101 	movw	r1, #1537	@ 0x601
 8003592:	f000 fb89 	bl	8003ca8 <wm8994_write_reg>
 8003596:	4602      	mov	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f103 0018 	add.w	r0, r3, #24
 80035a4:	f107 020a 	add.w	r2, r7, #10
 80035a8:	2302      	movs	r3, #2
 80035aa:	f240 6102 	movw	r1, #1538	@ 0x602
 80035ae:	f000 fb7b 	bl	8003ca8 <wm8994_write_reg>
 80035b2:	4602      	mov	r2, r0
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 80035ba:	2302      	movs	r3, #2
 80035bc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f103 0018 	add.w	r0, r3, #24
 80035c4:	f107 020a 	add.w	r2, r7, #10
 80035c8:	2302      	movs	r3, #2
 80035ca:	f240 6104 	movw	r1, #1540	@ 0x604
 80035ce:	f000 fb6b 	bl	8003ca8 <wm8994_write_reg>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
      break;
 80035da:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 80035dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f103 0018 	add.w	r0, r3, #24
 80035e8:	f107 020a 	add.w	r2, r7, #10
 80035ec:	2302      	movs	r3, #2
 80035ee:	2103      	movs	r1, #3
 80035f0:	f000 fb5a 	bl	8003ca8 <wm8994_write_reg>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4413      	add	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 80035fc:	2300      	movs	r3, #0
 80035fe:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f103 0018 	add.w	r0, r3, #24
 8003606:	f107 020a 	add.w	r2, r7, #10
 800360a:	2302      	movs	r3, #2
 800360c:	2122      	movs	r1, #34	@ 0x22
 800360e:	f000 fb4b 	bl	8003ca8 <wm8994_write_reg>
 8003612:	4602      	mov	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f103 0018 	add.w	r0, r3, #24
 8003620:	f107 020a 	add.w	r2, r7, #10
 8003624:	2302      	movs	r3, #2
 8003626:	2123      	movs	r1, #35	@ 0x23
 8003628:	f000 fb3e 	bl	8003ca8 <wm8994_write_reg>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4413      	add	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 8003634:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003638:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f103 0018 	add.w	r0, r3, #24
 8003640:	f107 020a 	add.w	r2, r7, #10
 8003644:	2302      	movs	r3, #2
 8003646:	2136      	movs	r1, #54	@ 0x36
 8003648:	f000 fb2e 	bl	8003ca8 <wm8994_write_reg>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4413      	add	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 8003654:	f243 0303 	movw	r3, #12291	@ 0x3003
 8003658:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f103 0018 	add.w	r0, r3, #24
 8003660:	f107 020a 	add.w	r2, r7, #10
 8003664:	2302      	movs	r3, #2
 8003666:	2101      	movs	r1, #1
 8003668:	f000 fb1e 	bl	8003ca8 <wm8994_write_reg>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4413      	add	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 8003674:	2305      	movs	r3, #5
 8003676:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f103 0018 	add.w	r0, r3, #24
 800367e:	f107 020a 	add.w	r2, r7, #10
 8003682:	2302      	movs	r3, #2
 8003684:	2151      	movs	r1, #81	@ 0x51
 8003686:	f000 fb0f 	bl	8003ca8 <wm8994_write_reg>
 800368a:	4602      	mov	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 8003692:	f243 3303 	movw	r3, #13059	@ 0x3303
 8003696:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f103 0018 	add.w	r0, r3, #24
 800369e:	f107 020a 	add.w	r2, r7, #10
 80036a2:	2302      	movs	r3, #2
 80036a4:	2101      	movs	r1, #1
 80036a6:	f000 faff 	bl	8003ca8 <wm8994_write_reg>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 80036b2:	2322      	movs	r3, #34	@ 0x22
 80036b4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f103 0018 	add.w	r0, r3, #24
 80036bc:	f107 020a 	add.w	r2, r7, #10
 80036c0:	2302      	movs	r3, #2
 80036c2:	2160      	movs	r1, #96	@ 0x60
 80036c4:	f000 faf0 	bl	8003ca8 <wm8994_write_reg>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 80036d0:	f649 7325 	movw	r3, #40741	@ 0x9f25
 80036d4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f103 0018 	add.w	r0, r3, #24
 80036dc:	f107 020a 	add.w	r2, r7, #10
 80036e0:	2302      	movs	r3, #2
 80036e2:	214c      	movs	r1, #76	@ 0x4c
 80036e4:	f000 fae0 	bl	8003ca8 <wm8994_write_reg>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4413      	add	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 80036f0:	210f      	movs	r1, #15
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa60 	bl	8003bb8 <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 80036f8:	2301      	movs	r3, #1
 80036fa:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f103 0018 	add.w	r0, r3, #24
 8003702:	f107 020a 	add.w	r2, r7, #10
 8003706:	2302      	movs	r3, #2
 8003708:	212d      	movs	r1, #45	@ 0x2d
 800370a:	f000 facd 	bl	8003ca8 <wm8994_write_reg>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f103 0018 	add.w	r0, r3, #24
 800371c:	f107 020a 	add.w	r2, r7, #10
 8003720:	2302      	movs	r3, #2
 8003722:	212e      	movs	r1, #46	@ 0x2e
 8003724:	f000 fac0 	bl	8003ca8 <wm8994_write_reg>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4413      	add	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 8003730:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8003734:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f103 0018 	add.w	r0, r3, #24
 800373c:	f107 020a 	add.w	r2, r7, #10
 8003740:	2302      	movs	r3, #2
 8003742:	2103      	movs	r1, #3
 8003744:	f000 fab0 	bl	8003ca8 <wm8994_write_reg>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 8003750:	2333      	movs	r3, #51	@ 0x33
 8003752:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f103 0018 	add.w	r0, r3, #24
 800375a:	f107 020a 	add.w	r2, r7, #10
 800375e:	2302      	movs	r3, #2
 8003760:	2154      	movs	r1, #84	@ 0x54
 8003762:	f000 faa1 	bl	8003ca8 <wm8994_write_reg>
 8003766:	4602      	mov	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 800376e:	f240 1101 	movw	r1, #257	@ 0x101
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa20 	bl	8003bb8 <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 8003778:	23ee      	movs	r3, #238	@ 0xee
 800377a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f103 0018 	add.w	r0, r3, #24
 8003782:	f107 020a 	add.w	r2, r7, #10
 8003786:	2302      	movs	r3, #2
 8003788:	2160      	movs	r1, #96	@ 0x60
 800378a:	f000 fa8d 	bl	8003ca8 <wm8994_write_reg>
 800378e:	4602      	mov	r2, r0
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 800379c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037a0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80037a2:	68fb      	ldr	r3, [r7, #12]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3318      	adds	r3, #24
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	b292      	uxth	r2, r2
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fb4c 	bl	8003e62 <wm8994_aif1_control1_wl>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 80037d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3318      	adds	r3, #24
 80037f6:	f107 020a 	add.w	r2, r7, #10
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fb61 	bl	8003ec4 <wm8994_aif1_control1_wl_r>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8003808:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e021      	b.n	8003854 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 8003810:	897b      	ldrh	r3, [r7, #10]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d81a      	bhi.n	800384c <WM8994_GetResolution+0x6c>
 8003816:	a201      	add	r2, pc, #4	@ (adr r2, 800381c <WM8994_GetResolution+0x3c>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	0800382d 	.word	0x0800382d
 8003820:	08003835 	.word	0x08003835
 8003824:	0800383d 	.word	0x0800383d
 8003828:	08003845 	.word	0x08003845
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
      break;
 8003832:	e00f      	b.n	8003854 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]
      break;
 800383a:	e00b      	b.n	8003854 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2202      	movs	r2, #2
 8003840:	601a      	str	r2, [r3, #0]
      break;
 8003842:	e007      	b.n	8003854 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2203      	movs	r2, #3
 8003848:	601a      	str	r2, [r3, #0]
      break; 
 800384a:	e003      	b.n	8003854 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
      break;
 8003852:	bf00      	nop
    }
  }
  
  return ret;
 8003854:	68fb      	ldr	r3, [r7, #12]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop

08003860 <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3318      	adds	r3, #24
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	b292      	uxth	r2, r2
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fa9f 	bl	8003dbc <wm8994_aif1_control1_fmt>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 8003884:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003888:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 800388a:	68fb      	ldr	r3, [r7, #12]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3318      	adds	r3, #24
 80038a6:	f107 020a 	add.w	r2, r7, #10
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fab6 	bl	8003e1e <wm8994_aif1_control1_fmt_r>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e003      	b.n	80038c8 <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 80038c0:	897b      	ldrh	r3, [r7, #10]
 80038c2:	461a      	mov	r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 80038c8:	68fb      	ldr	r3, [r7, #12]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	4a55      	ldr	r2, [pc, #340]	@ (8003a38 <WM8994_SetFrequency+0x164>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d05d      	beq.n	80039a2 <WM8994_SetFrequency+0xce>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	4a53      	ldr	r2, [pc, #332]	@ (8003a38 <WM8994_SetFrequency+0x164>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	f200 8091 	bhi.w	8003a12 <WM8994_SetFrequency+0x13e>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d07d      	beq.n	80039f6 <WM8994_SetFrequency+0x122>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003900:	4293      	cmp	r3, r2
 8003902:	f200 8086 	bhi.w	8003a12 <WM8994_SetFrequency+0x13e>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800390c:	d03b      	beq.n	8003986 <WM8994_SetFrequency+0xb2>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003914:	d87d      	bhi.n	8003a12 <WM8994_SetFrequency+0x13e>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f245 6222 	movw	r2, #22050	@ 0x5622
 800391c:	4293      	cmp	r3, r2
 800391e:	d05c      	beq.n	80039da <WM8994_SetFrequency+0x106>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003926:	4293      	cmp	r3, r2
 8003928:	d873      	bhi.n	8003a12 <WM8994_SetFrequency+0x13e>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003930:	d01b      	beq.n	800396a <WM8994_SetFrequency+0x96>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003938:	d86b      	bhi.n	8003a12 <WM8994_SetFrequency+0x13e>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003940:	d005      	beq.n	800394e <WM8994_SetFrequency+0x7a>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003948:	4293      	cmp	r3, r2
 800394a:	d038      	beq.n	80039be <WM8994_SetFrequency+0xea>
 800394c:	e061      	b.n	8003a12 <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 800394e:	2303      	movs	r3, #3
 8003950:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f103 0018 	add.w	r0, r3, #24
 8003958:	f107 020a 	add.w	r2, r7, #10
 800395c:	2302      	movs	r3, #2
 800395e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003962:	f000 f9a1 	bl	8003ca8 <wm8994_write_reg>
 8003966:	60f8      	str	r0, [r7, #12]
    break;
 8003968:	e061      	b.n	8003a2e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 800396a:	2333      	movs	r3, #51	@ 0x33
 800396c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f103 0018 	add.w	r0, r3, #24
 8003974:	f107 020a 	add.w	r2, r7, #10
 8003978:	2302      	movs	r3, #2
 800397a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800397e:	f000 f993 	bl	8003ca8 <wm8994_write_reg>
 8003982:	60f8      	str	r0, [r7, #12]
    break;
 8003984:	e053      	b.n	8003a2e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8003986:	2363      	movs	r3, #99	@ 0x63
 8003988:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f103 0018 	add.w	r0, r3, #24
 8003990:	f107 020a 	add.w	r2, r7, #10
 8003994:	2302      	movs	r3, #2
 8003996:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800399a:	f000 f985 	bl	8003ca8 <wm8994_write_reg>
 800399e:	60f8      	str	r0, [r7, #12]
    break;
 80039a0:	e045      	b.n	8003a2e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 80039a2:	23a3      	movs	r3, #163	@ 0xa3
 80039a4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f103 0018 	add.w	r0, r3, #24
 80039ac:	f107 020a 	add.w	r2, r7, #10
 80039b0:	2302      	movs	r3, #2
 80039b2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80039b6:	f000 f977 	bl	8003ca8 <wm8994_write_reg>
 80039ba:	60f8      	str	r0, [r7, #12]
    break;
 80039bc:	e037      	b.n	8003a2e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 80039be:	2313      	movs	r3, #19
 80039c0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f103 0018 	add.w	r0, r3, #24
 80039c8:	f107 020a 	add.w	r2, r7, #10
 80039cc:	2302      	movs	r3, #2
 80039ce:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80039d2:	f000 f969 	bl	8003ca8 <wm8994_write_reg>
 80039d6:	60f8      	str	r0, [r7, #12]
    break;
 80039d8:	e029      	b.n	8003a2e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 80039da:	2343      	movs	r3, #67	@ 0x43
 80039dc:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f103 0018 	add.w	r0, r3, #24
 80039e4:	f107 020a 	add.w	r2, r7, #10
 80039e8:	2302      	movs	r3, #2
 80039ea:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80039ee:	f000 f95b 	bl	8003ca8 <wm8994_write_reg>
 80039f2:	60f8      	str	r0, [r7, #12]
    break;
 80039f4:	e01b      	b.n	8003a2e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 80039f6:	2373      	movs	r3, #115	@ 0x73
 80039f8:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f103 0018 	add.w	r0, r3, #24
 8003a00:	f107 020a 	add.w	r2, r7, #10
 8003a04:	2302      	movs	r3, #2
 8003a06:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003a0a:	f000 f94d 	bl	8003ca8 <wm8994_write_reg>
 8003a0e:	60f8      	str	r0, [r7, #12]
    break; 
 8003a10:	e00d      	b.n	8003a2e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8003a12:	2383      	movs	r3, #131	@ 0x83
 8003a14:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f103 0018 	add.w	r0, r3, #24
 8003a1c:	f107 020a 	add.w	r2, r7, #10
 8003a20:	2302      	movs	r3, #2
 8003a22:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003a26:	f000 f93f 	bl	8003ca8 <wm8994_write_reg>
 8003a2a:	60f8      	str	r0, [r7, #12]
    break; 
 8003a2c:	bf00      	nop
  }
  
  return ret;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	00017700 	.word	0x00017700

08003a3c <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3318      	adds	r3, #24
 8003a52:	f107 020a 	add.w	r2, r7, #10
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 f98d 	bl	8003d78 <wm8994_aif1_sr_r>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e043      	b.n	8003af4 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 8003a6c:	897b      	ldrh	r3, [r7, #10]
 8003a6e:	2b0a      	cmp	r3, #10
 8003a70:	d83f      	bhi.n	8003af2 <WM8994_GetFrequency+0xb6>
 8003a72:	a201      	add	r2, pc, #4	@ (adr r2, 8003a78 <WM8994_GetFrequency+0x3c>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003aaf 	.word	0x08003aaf
 8003a80:	08003af3 	.word	0x08003af3
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003ac3 	.word	0x08003ac3
 8003a8c:	08003af3 	.word	0x08003af3
 8003a90:	08003acd 	.word	0x08003acd
 8003a94:	08003ad7 	.word	0x08003ad7
 8003a98:	08003ae1 	.word	0x08003ae1
 8003a9c:	08003af3 	.word	0x08003af3
 8003aa0:	08003aeb 	.word	0x08003aeb
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003aaa:	601a      	str	r2, [r3, #0]
      break;
 8003aac:	e022      	b.n	8003af4 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003ab4:	601a      	str	r2, [r3, #0]
      break;    
 8003ab6:	e01d      	b.n	8003af4 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8003abe:	601a      	str	r2, [r3, #0]
      break;
 8003ac0:	e018      	b.n	8003af4 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003ac8:	601a      	str	r2, [r3, #0]
      break; 
 8003aca:	e013      	b.n	8003af4 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003ad2:	601a      	str	r2, [r3, #0]
      break; 
 8003ad4:	e00e      	b.n	8003af4 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003adc:	601a      	str	r2, [r3, #0]
      break;    
 8003ade:	e009      	b.n	8003af4 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003ae6:	601a      	str	r2, [r3, #0]
      break;
 8003ae8:	e004      	b.n	8003af4 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	4a04      	ldr	r2, [pc, #16]	@ (8003b00 <WM8994_GetFrequency+0xc4>)
 8003aee:	601a      	str	r2, [r3, #0]
      break;    
 8003af0:	e000      	b.n	8003af4 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 8003af2:	bf00      	nop
    }
  }
  
  return ret;
 8003af4:	68fb      	ldr	r3, [r7, #12]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	00017700 	.word	0x00017700

08003b04 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3318      	adds	r3, #24
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f8ee 	bl	8003cf8 <wm8994_sw_reset_w>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b26:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003b28:	68fb      	ldr	r3, [r7, #12]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e02c      	b.n	8003ba6 <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	891a      	ldrh	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <WM8994_RegisterBusIO+0x7c>)
 8003b80:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a0b      	ldr	r2, [pc, #44]	@ (8003bb4 <WM8994_RegisterBusIO+0x80>)
 8003b86:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4798      	blx	r3
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	e002      	b.n	8003ba6 <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ba4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	08003bed 	.word	0x08003bed
 8003bb4:	08003c1f 	.word	0x08003c1f

08003bb8 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	4798      	blx	r3
 8003bc8:	4603      	mov	r3, r0
 8003bca:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003bcc:	bf00      	nop
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	4798      	blx	r3
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d8f5      	bhi.n	8003bce <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	817b      	strh	r3, [r7, #10]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	691c      	ldr	r4, [r3, #16]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	8918      	ldrh	r0, [r3, #8]
 8003c0c:	893b      	ldrh	r3, [r7, #8]
 8003c0e:	8979      	ldrh	r1, [r7, #10]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	47a0      	blx	r4
 8003c14:	4603      	mov	r3, r0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd90      	pop	{r4, r7, pc}

08003c1e <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8003c1e:	b590      	push	{r4, r7, lr}
 8003c20:	b087      	sub	sp, #28
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	817b      	strh	r3, [r7, #10]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	68dc      	ldr	r4, [r3, #12]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	8918      	ldrh	r0, [r3, #8]
 8003c3e:	893b      	ldrh	r3, [r7, #8]
 8003c40:	8979      	ldrh	r1, [r7, #10]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	47a0      	blx	r4
 8003c46:	4603      	mov	r3, r0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd90      	pop	{r4, r7, pc}

08003c50 <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	817b      	strh	r3, [r7, #10]
 8003c60:	4613      	mov	r3, r2
 8003c62:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	685c      	ldr	r4, [r3, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6898      	ldr	r0, [r3, #8]
 8003c6c:	893b      	ldrh	r3, [r7, #8]
 8003c6e:	8979      	ldrh	r1, [r7, #10]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	47a0      	blx	r4
 8003c74:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db10      	blt.n	8003c9e <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b21b      	sxth	r3, r3
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	b21a      	sxth	r2, r3
 8003c8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8a7a      	ldrh	r2, [r7, #18]
 8003c9c:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8003c9e:	697b      	ldr	r3, [r7, #20]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd90      	pop	{r4, r7, pc}

08003ca8 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	817b      	strh	r3, [r7, #10]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	0a1b      	lsrs	r3, r3, #8
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b21b      	sxth	r3, r3
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	b21a      	sxth	r2, r3
 8003cd0:	8afb      	ldrh	r3, [r7, #22]
 8003cd2:	b21b      	sxth	r3, r3
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	b21b      	sxth	r3, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681c      	ldr	r4, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6898      	ldr	r0, [r3, #8]
 8003ce4:	893b      	ldrh	r3, [r7, #8]
 8003ce6:	f107 0216 	add.w	r2, r7, #22
 8003cea:	8979      	ldrh	r1, [r7, #10]
 8003cec:	47a0      	blx	r4
 8003cee:	4603      	mov	r3, r0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd90      	pop	{r4, r7, pc}

08003cf8 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 8003d04:	1cba      	adds	r2, r7, #2
 8003d06:	2302      	movs	r3, #2
 8003d08:	2100      	movs	r1, #0
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ffcc 	bl	8003ca8 <wm8994_write_reg>
 8003d10:	4603      	mov	r3, r0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 8003d24:	2302      	movs	r3, #2
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	2100      	movs	r1, #0
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ff90 	bl	8003c50 <wm8994_read_reg>
 8003d30:	4603      	mov	r3, r0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 8003d44:	2302      	movs	r3, #2
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	211c      	movs	r1, #28
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff80 	bl	8003c50 <wm8994_read_reg>
 8003d50:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 8003d82:	2302      	movs	r3, #2
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ff60 	bl	8003c50 <wm8994_read_reg>
 8003d90:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10c      	bne.n	8003db2 <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8003db2:	68fb      	ldr	r3, [r7, #12]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8003dcc:	f107 020a 	add.w	r2, r7, #10
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ff3a 	bl	8003c50 <wm8994_read_reg>
 8003ddc:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d117      	bne.n	8003e14 <wm8994_aif1_control1_fmt+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 8003de4:	897b      	ldrh	r3, [r7, #10]
 8003de6:	f023 0318 	bic.w	r3, r3, #24
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 8003dee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	b21a      	sxth	r2, r3
 8003df6:	897b      	ldrh	r3, [r7, #10]
 8003df8:	b21b      	sxth	r3, r3
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	b21b      	sxth	r3, r3
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8003e02:	f107 020a 	add.w	r2, r7, #10
 8003e06:	2302      	movs	r3, #2
 8003e08:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff4b 	bl	8003ca8 <wm8994_write_reg>
 8003e12:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8003e14:	68fb      	ldr	r3, [r7, #12]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 8003e28:	2302      	movs	r3, #2
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff0d 	bl	8003c50 <wm8994_read_reg>
 8003e36:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	f003 0318 	and.w	r3, r3, #24
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	08db      	lsrs	r3, r3, #3
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8003e58:	68fb      	ldr	r3, [r7, #12]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8003e72:	f107 020a 	add.w	r2, r7, #10
 8003e76:	2302      	movs	r3, #2
 8003e78:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff fee7 	bl	8003c50 <wm8994_read_reg>
 8003e82:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d117      	bne.n	8003eba <wm8994_aif1_control1_wl+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 8003e94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e98:	015b      	lsls	r3, r3, #5
 8003e9a:	b21a      	sxth	r2, r3
 8003e9c:	897b      	ldrh	r3, [r7, #10]
 8003e9e:	b21b      	sxth	r3, r3
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	b21b      	sxth	r3, r3
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8003ea8:	f107 020a 	add.w	r2, r7, #10
 8003eac:	2302      	movs	r3, #2
 8003eae:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fef8 	bl	8003ca8 <wm8994_write_reg>
 8003eb8:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8003eba:	68fb      	ldr	r3, [r7, #12]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 8003ece:	2302      	movs	r3, #2
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff feba 	bl	8003c50 <wm8994_read_reg>
 8003edc:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10c      	bne.n	8003efe <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8003efe:	68fb      	ldr	r3, [r7, #12]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8003f18:	f107 020a 	add.w	r2, r7, #10
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fe94 	bl	8003c50 <wm8994_read_reg>
 8003f28:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d117      	bne.n	8003f60 <wm8994_aif1_control1_adcr_src+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 8003f30:	897b      	ldrh	r3, [r7, #10]
 8003f32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 8003f3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f3e:	039b      	lsls	r3, r3, #14
 8003f40:	b21a      	sxth	r2, r3
 8003f42:	897b      	ldrh	r3, [r7, #10]
 8003f44:	b21b      	sxth	r3, r3
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b21b      	sxth	r3, r3
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8003f4e:	f107 020a 	add.w	r2, r7, #10
 8003f52:	2302      	movs	r3, #2
 8003f54:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fea5 	bl	8003ca8 <wm8994_write_reg>
 8003f5e:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8003f60:	68fb      	ldr	r3, [r7, #12]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 8003f74:	2302      	movs	r3, #2
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fe67 	bl	8003c50 <wm8994_read_reg>
 8003f82:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the full Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
    if(audio_state == AUDIO_STATE_PLAYING)
 8003fb0:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d103      	bne.n	8003fc0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x28>)
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	24000ed0 	.word	0x24000ed0
 8003fd0:	240006c0 	.word	0x240006c0

08003fd4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
    if(audio_state == AUDIO_STATE_PLAYING)
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d103      	bne.n	8003fec <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8003fe4:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x28>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
  }

}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	24000ed0 	.word	0x24000ed0
 8003ffc:	240006c0 	.word	0x240006c0

08004000 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Display message on the LCD screen */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_RED);
 8004008:	480f      	ldr	r0, [pc, #60]	@ (8004048 <BSP_AUDIO_OUT_Error_CallBack+0x48>)
 800400a:	f010 fd8d 	bl	8014b28 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 800400e:	f010 fdb3 	bl	8014b78 <UTIL_LCD_GetFont>
 8004012:	4603      	mov	r3, r0
 8004014:	88db      	ldrh	r3, [r3, #6]
 8004016:	461a      	mov	r2, r3
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	4619      	mov	r1, r3
 8004022:	2301      	movs	r3, #1
 8004024:	4a09      	ldr	r2, [pc, #36]	@ (800404c <BSP_AUDIO_OUT_Error_CallBack+0x4c>)
 8004026:	2000      	movs	r0, #0
 8004028:	f010 fe8a 	bl	8014d40 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800402c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004030:	f010 fd7a 	bl	8014b28 <UTIL_LCD_SetBackColor>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8004034:	bf00      	nop
 8004036:	2000      	movs	r0, #0
 8004038:	f000 fed6 	bl	8004de8 <BSP_PB_GetState>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
  {
    return;
 8004040:	bf00      	nop
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	ffff0000 	.word	0xffff0000
 800404c:	08017ec4 	.word	0x08017ec4

08004050 <AudioRecord_demo>:
  *   Audio peripheral.
  * @param  None
  * @retval None
*/
void AudioRecord_demo(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af02      	add	r7, sp, #8
   uint32_t channel_nbr = 2;
 8004056:	2302      	movs	r3, #2
 8004058:	60fb      	str	r3, [r7, #12]

  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800405a:	f107 0308 	add.w	r3, r7, #8
 800405e:	4619      	mov	r1, r3
 8004060:	2000      	movs	r0, #0
 8004062:	f003 fc67 	bl	8007934 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	4619      	mov	r1, r3
 800406a:	2000      	movs	r0, #0
 800406c:	f003 fc8a 	bl	8007984 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8004070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004074:	f010 fe18 	bl	8014ca8 <UTIL_LCD_Clear>
  /* Set Audio Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 90, UTIL_LCD_COLOR_BLUE);
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	4b51      	ldr	r3, [pc, #324]	@ (80041c0 <AudioRecord_demo+0x170>)
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	235a      	movs	r3, #90	@ 0x5a
 8004080:	2100      	movs	r1, #0
 8004082:	2000      	movs	r0, #0
 8004084:	f010 ff4a 	bl	8014f1c <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8004088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800408c:	f010 fd38 	bl	8014b00 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8004090:	484b      	ldr	r0, [pc, #300]	@ (80041c0 <AudioRecord_demo+0x170>)
 8004092:	f010 fd49 	bl	8014b28 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 8004096:	484b      	ldr	r0, [pc, #300]	@ (80041c4 <AudioRecord_demo+0x174>)
 8004098:	f010 fd5a 	bl	8014b50 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD SAI PDM EXAMPLE", CENTER_MODE);
 800409c:	2301      	movs	r3, #1
 800409e:	4a4a      	ldr	r2, [pc, #296]	@ (80041c8 <AudioRecord_demo+0x178>)
 80040a0:	2100      	movs	r1, #0
 80040a2:	2000      	movs	r0, #0
 80040a4:	f010 fe4c 	bl	8014d40 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font16);
 80040a8:	4848      	ldr	r0, [pc, #288]	@ (80041cc <AudioRecord_demo+0x17c>)
 80040aa:	f010 fd51 	bl	8014b50 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 24,  (uint8_t *)"Press User button for next menu", CENTER_MODE);
 80040ae:	2301      	movs	r3, #1
 80040b0:	4a47      	ldr	r2, [pc, #284]	@ (80041d0 <AudioRecord_demo+0x180>)
 80040b2:	2118      	movs	r1, #24
 80040b4:	2000      	movs	r0, #0
 80040b6:	f010 fe43 	bl	8014d40 <UTIL_LCD_DisplayStringAt>
  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 100, x_size - 20, y_size - 110, UTIL_LCD_COLOR_BLUE);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f1a3 0214 	sub.w	r2, r3, #20
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b6e      	subs	r3, #110	@ 0x6e
 80040c4:	493e      	ldr	r1, [pc, #248]	@ (80041c0 <AudioRecord_demo+0x170>)
 80040c6:	9100      	str	r1, [sp, #0]
 80040c8:	2164      	movs	r1, #100	@ 0x64
 80040ca:	200a      	movs	r0, #10
 80040cc:	f010 fee6 	bl	8014e9c <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 101, x_size - 22, y_size - 112, UTIL_LCD_COLOR_BLUE);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f1a3 0216 	sub.w	r2, r3, #22
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3b70      	subs	r3, #112	@ 0x70
 80040da:	4939      	ldr	r1, [pc, #228]	@ (80041c0 <AudioRecord_demo+0x170>)
 80040dc:	9100      	str	r1, [sp, #0]
 80040de:	2165      	movs	r1, #101	@ 0x65
 80040e0:	200b      	movs	r0, #11
 80040e2:	f010 fedb 	bl	8014e9c <UTIL_LCD_DrawRect>

  AudioFreq_ptr = AudioFreq+2; /* AUDIO_FREQUENCY_16K; */
 80040e6:	4a3b      	ldr	r2, [pc, #236]	@ (80041d4 <AudioRecord_demo+0x184>)
 80040e8:	4b3b      	ldr	r3, [pc, #236]	@ (80041d8 <AudioRecord_demo+0x188>)
 80040ea:	601a      	str	r2, [r3, #0]

  AudioOutInit.Device = AUDIO_OUT_DEVICE_AUTO;
 80040ec:	4b3b      	ldr	r3, [pc, #236]	@ (80041dc <AudioRecord_demo+0x18c>)
 80040ee:	2204      	movs	r2, #4
 80040f0:	601a      	str	r2, [r3, #0]
  AudioOutInit.ChannelsNbr = channel_nbr;
 80040f2:	4a3a      	ldr	r2, [pc, #232]	@ (80041dc <AudioRecord_demo+0x18c>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	60d3      	str	r3, [r2, #12]
  AudioOutInit.SampleRate = *AudioFreq_ptr;
 80040f8:	4b37      	ldr	r3, [pc, #220]	@ (80041d8 <AudioRecord_demo+0x188>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a37      	ldr	r2, [pc, #220]	@ (80041dc <AudioRecord_demo+0x18c>)
 8004100:	6053      	str	r3, [r2, #4]
  AudioOutInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 8004102:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <AudioRecord_demo+0x18c>)
 8004104:	2210      	movs	r2, #16
 8004106:	609a      	str	r2, [r3, #8]
  AudioOutInit.Volume = VolumeLevel;
 8004108:	4b35      	ldr	r3, [pc, #212]	@ (80041e0 <AudioRecord_demo+0x190>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a33      	ldr	r2, [pc, #204]	@ (80041dc <AudioRecord_demo+0x18c>)
 800410e:	6113      	str	r3, [r2, #16]

  AudioInInit.Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 8004110:	4b34      	ldr	r3, [pc, #208]	@ (80041e4 <AudioRecord_demo+0x194>)
 8004112:	2210      	movs	r2, #16
 8004114:	601a      	str	r2, [r3, #0]
  AudioInInit.ChannelsNbr = channel_nbr;
 8004116:	4a33      	ldr	r2, [pc, #204]	@ (80041e4 <AudioRecord_demo+0x194>)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	60d3      	str	r3, [r2, #12]
  AudioInInit.SampleRate = *AudioFreq_ptr;
 800411c:	4b2e      	ldr	r3, [pc, #184]	@ (80041d8 <AudioRecord_demo+0x188>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a30      	ldr	r2, [pc, #192]	@ (80041e4 <AudioRecord_demo+0x194>)
 8004124:	6053      	str	r3, [r2, #4]
  AudioInInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 8004126:	4b2f      	ldr	r3, [pc, #188]	@ (80041e4 <AudioRecord_demo+0x194>)
 8004128:	2210      	movs	r2, #16
 800412a:	609a      	str	r2, [r3, #8]
  AudioInInit.Volume = VolumeLevel;
 800412c:	4b2c      	ldr	r3, [pc, #176]	@ (80041e0 <AudioRecord_demo+0x190>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2c      	ldr	r2, [pc, #176]	@ (80041e4 <AudioRecord_demo+0x194>)
 8004132:	6113      	str	r3, [r2, #16]

  BSP_JOY_Init(JOY1, JOY_MODE_GPIO, JOY_ALL);
 8004134:	221f      	movs	r2, #31
 8004136:	2100      	movs	r1, #0
 8004138:	2000      	movs	r0, #0
 800413a:	f000 fe85 	bl	8004e48 <BSP_JOY_Init>

  /* Initialize Audio Recorder with 2 channels to be used */
  BSP_AUDIO_IN_Init(1, &AudioInInit);
 800413e:	4929      	ldr	r1, [pc, #164]	@ (80041e4 <AudioRecord_demo+0x194>)
 8004140:	2001      	movs	r0, #1
 8004142:	f001 fb47 	bl	80057d4 <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_GetState(1, &InState);
 8004146:	4928      	ldr	r1, [pc, #160]	@ (80041e8 <AudioRecord_demo+0x198>)
 8004148:	2001      	movs	r0, #1
 800414a:	f001 ff99 	bl	8006080 <BSP_AUDIO_IN_GetState>

  BSP_AUDIO_OUT_Init(0, &AudioOutInit);
 800414e:	4923      	ldr	r1, [pc, #140]	@ (80041dc <AudioRecord_demo+0x18c>)
 8004150:	2000      	movs	r0, #0
 8004152:	f000 ffbb 	bl	80050cc <BSP_AUDIO_OUT_Init>

  BSP_AUDIO_OUT_SetDevice(0, AUDIO_OUT_DEVICE_HEADPHONE);
 8004156:	2102      	movs	r1, #2
 8004158:	2000      	movs	r0, #0
 800415a:	f001 fad5 	bl	8005708 <BSP_AUDIO_OUT_SetDevice>

  /* Start Recording */
  UTIL_LCD_DisplayStringAt(0, 190, (uint8_t *)"Start Recording ", CENTER_MODE);
 800415e:	2301      	movs	r3, #1
 8004160:	4a22      	ldr	r2, [pc, #136]	@ (80041ec <AudioRecord_demo+0x19c>)
 8004162:	21be      	movs	r1, #190	@ 0xbe
 8004164:	2000      	movs	r0, #0
 8004166:	f010 fdeb 	bl	8014d40 <UTIL_LCD_DisplayStringAt>
  BSP_AUDIO_IN_RecordPDM(1, (uint8_t*)&recordPDMBuf, 2*AUDIO_IN_PDM_BUFFER_SIZE);
 800416a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800416e:	4920      	ldr	r1, [pc, #128]	@ (80041f0 <AudioRecord_demo+0x1a0>)
 8004170:	2001      	movs	r0, #1
 8004172:	f001 ff53 	bl	800601c <BSP_AUDIO_IN_RecordPDM>

  /* Play the recorded buffer*/
  UTIL_LCD_DisplayStringAt(0, 220, (uint8_t *)"Play the recorded buffer... ", CENTER_MODE);
 8004176:	2301      	movs	r3, #1
 8004178:	4a1e      	ldr	r2, [pc, #120]	@ (80041f4 <AudioRecord_demo+0x1a4>)
 800417a:	21dc      	movs	r1, #220	@ 0xdc
 800417c:	2000      	movs	r0, #0
 800417e:	f010 fddf 	bl	8014d40 <UTIL_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_Play(0, (uint8_t*)&RecPlayback[0], 2*RECORD_BUFFER_SIZE);
 8004182:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004186:	491c      	ldr	r1, [pc, #112]	@ (80041f8 <AudioRecord_demo+0x1a8>)
 8004188:	2000      	movs	r0, #0
 800418a:	f001 f9f5 	bl	8005578 <BSP_AUDIO_OUT_Play>
  while (1)
  {
    if (CheckForUserInput() > 0)
 800418e:	f000 fb4d 	bl	800482c <CheckForUserInput>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0fa      	beq.n	800418e <AudioRecord_demo+0x13e>
    {
      ButtonState = 0;
 8004198:	4b18      	ldr	r3, [pc, #96]	@ (80041fc <AudioRecord_demo+0x1ac>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_OUT_Stop(0);
 800419e:	2000      	movs	r0, #0
 80041a0:	f001 fa64 	bl	800566c <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit(0);
 80041a4:	2000      	movs	r0, #0
 80041a6:	f001 f88b 	bl	80052c0 <BSP_AUDIO_OUT_DeInit>
      BSP_AUDIO_IN_Stop(1);
 80041aa:	2001      	movs	r0, #1
 80041ac:	f001 fef4 	bl	8005f98 <BSP_AUDIO_IN_Stop>
      BSP_AUDIO_IN_DeInit(1);
 80041b0:	2001      	movs	r0, #1
 80041b2:	f001 fc97 	bl	8005ae4 <BSP_AUDIO_IN_DeInit>
      return;
 80041b6:	bf00      	nop
    }
  }
}
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	ff0000ff 	.word	0xff0000ff
 80041c4:	240005dc 	.word	0x240005dc
 80041c8:	08017edc 	.word	0x08017edc
 80041cc:	240005e4 	.word	0x240005e4
 80041d0:	08017efc 	.word	0x08017efc
 80041d4:	240004f4 	.word	0x240004f4
 80041d8:	24004ee4 	.word	0x24004ee4
 80041dc:	24004efc 	.word	0x24004efc
 80041e0:	24000510 	.word	0x24000510
 80041e4:	24004ee8 	.word	0x24004ee8
 80041e8:	24004ee0 	.word	0x24004ee0
 80041ec:	08017f1c 	.word	0x08017f1c
 80041f0:	38000000 	.word	0x38000000
 80041f4:	08017f30 	.word	0x08017f30
 80041f8:	24000ee0 	.word	0x24000ee0
 80041fc:	24004f24 	.word	0x24004f24

08004200 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void  BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	@ 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
    if(Instance == 1U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d168      	bne.n	80042e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0xe0>
 800420e:	4b38      	ldr	r3, [pc, #224]	@ (80042f0 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf0>)
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004216:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	dd1d      	ble.n	800425a <BSP_AUDIO_IN_TransferComplete_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f003 021f 	and.w	r2, r3, #31
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800422e:	f3bf 8f4f 	dsb	sy
}
 8004232:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004234:	4a2f      	ldr	r2, [pc, #188]	@ (80042f4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf4>)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	3320      	adds	r3, #32
 8004240:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3b20      	subs	r3, #32
 8004246:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	dcf2      	bgt.n	8004234 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 800424e:	f3bf 8f4f 	dsb	sy
}
 8004252:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004254:	f3bf 8f6f 	isb	sy
}
 8004258:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800425a:	bf00      	nop
  {
    /* Invalidate Data Cache to get the updated content of the SRAM*/
    SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE/2], AUDIO_IN_PDM_BUFFER_SIZE*2);

    BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t*)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE/2], &RecPlayback[playbackPtr]);
 800425c:	4b26      	ldr	r3, [pc, #152]	@ (80042f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	4a26      	ldr	r2, [pc, #152]	@ (80042fc <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>)
 8004264:	4413      	add	r3, r2
 8004266:	461a      	mov	r2, r3
 8004268:	4921      	ldr	r1, [pc, #132]	@ (80042f0 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf0>)
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f001 fe5a 	bl	8005f24 <BSP_AUDIO_IN_PDMToPCM>

    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&RecPlayback[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE/4);
 8004270:	4b21      	ldr	r3, [pc, #132]	@ (80042f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4a21      	ldr	r2, [pc, #132]	@ (80042fc <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>)
 8004278:	4413      	add	r3, r2
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
 800427c:	2340      	movs	r3, #64	@ 0x40
 800427e:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2b00      	cmp	r3, #0
 8004284:	dd1d      	ble.n	80042c2 <BSP_AUDIO_IN_TransferComplete_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	f003 021f 	and.w	r2, r3, #31
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	4413      	add	r3, r2
 8004290:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8004296:	f3bf 8f4f 	dsb	sy
}
 800429a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800429c:	4a15      	ldr	r2, [pc, #84]	@ (80042f4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf4>)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	3320      	adds	r3, #32
 80042a8:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3b20      	subs	r3, #32
 80042ae:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	dcf2      	bgt.n	800429c <BSP_AUDIO_IN_TransferComplete_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 80042b6:	f3bf 8f4f 	dsb	sy
}
 80042ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042bc:	f3bf 8f6f 	isb	sy
}
 80042c0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80042c2:	bf00      	nop

    playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 80042c4:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3320      	adds	r3, #32
 80042ca:	4a0b      	ldr	r2, [pc, #44]	@ (80042f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 80042cc:	6013      	str	r3, [r2, #0]
    if(playbackPtr >= RECORD_BUFFER_SIZE)
 80042ce:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d6:	d306      	bcc.n	80042e6 <BSP_AUDIO_IN_TransferComplete_CallBack+0xe6>
      playbackPtr = 0;
 80042d8:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
  else
  {
    AudioBufferOffset = BUFFER_OFFSET_FULL;
  }

}
 80042de:	e002      	b.n	80042e6 <BSP_AUDIO_IN_TransferComplete_CallBack+0xe6>
    AudioBufferOffset = BUFFER_OFFSET_FULL;
 80042e0:	4b07      	ldr	r3, [pc, #28]	@ (8004300 <BSP_AUDIO_IN_TransferComplete_CallBack+0x100>)
 80042e2:	2202      	movs	r2, #2
 80042e4:	601a      	str	r2, [r3, #0]
}
 80042e6:	bf00      	nop
 80042e8:	3728      	adds	r7, #40	@ 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	38000100 	.word	0x38000100
 80042f4:	e000ed00 	.word	0xe000ed00
 80042f8:	24004f10 	.word	0x24004f10
 80042fc:	24000ee0 	.word	0x24000ee0
 8004300:	24004f14 	.word	0x24004f14

08004304 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	@ 0x28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
    if(Instance == 1U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d168      	bne.n	80043e4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe0>
 8004312:	4b38      	ldr	r3, [pc, #224]	@ (80043f4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf0>)
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800431a:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	dd1d      	ble.n	800435e <BSP_AUDIO_IN_HalfTransfer_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f003 021f 	and.w	r2, r3, #31
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4413      	add	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004332:	f3bf 8f4f 	dsb	sy
}
 8004336:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004338:	4a2f      	ldr	r2, [pc, #188]	@ (80043f8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf4>)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3320      	adds	r3, #32
 8004344:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3b20      	subs	r3, #32
 800434a:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	dcf2      	bgt.n	8004338 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8004352:	f3bf 8f4f 	dsb	sy
}
 8004356:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004358:	f3bf 8f6f 	isb	sy
}
 800435c:	bf00      	nop
}
 800435e:	bf00      	nop
  {
    /* Invalidate Data Cache to get the updated content of the SRAM*/
    SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[0], AUDIO_IN_PDM_BUFFER_SIZE*2);

    BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t*)&recordPDMBuf[0], &RecPlayback[playbackPtr]);
 8004360:	4b26      	ldr	r3, [pc, #152]	@ (80043fc <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4a26      	ldr	r2, [pc, #152]	@ (8004400 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>)
 8004368:	4413      	add	r3, r2
 800436a:	461a      	mov	r2, r3
 800436c:	4921      	ldr	r1, [pc, #132]	@ (80043f4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf0>)
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f001 fdd8 	bl	8005f24 <BSP_AUDIO_IN_PDMToPCM>

    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&RecPlayback[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE/4);
 8004374:	4b21      	ldr	r3, [pc, #132]	@ (80043fc <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>)
 800437c:	4413      	add	r3, r2
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004380:	2340      	movs	r3, #64	@ 0x40
 8004382:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	2b00      	cmp	r3, #0
 8004388:	dd1d      	ble.n	80043c6 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	f003 021f 	and.w	r2, r3, #31
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	4413      	add	r3, r2
 8004394:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 800439a:	f3bf 8f4f 	dsb	sy
}
 800439e:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80043a0:	4a15      	ldr	r2, [pc, #84]	@ (80043f8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf4>)
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	3320      	adds	r3, #32
 80043ac:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3b20      	subs	r3, #32
 80043b2:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	dcf2      	bgt.n	80043a0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 80043ba:	f3bf 8f4f 	dsb	sy
}
 80043be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043c0:	f3bf 8f6f 	isb	sy
}
 80043c4:	bf00      	nop
}
 80043c6:	bf00      	nop

    playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 80043c8:	4b0c      	ldr	r3, [pc, #48]	@ (80043fc <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3320      	adds	r3, #32
 80043ce:	4a0b      	ldr	r2, [pc, #44]	@ (80043fc <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 80043d0:	6013      	str	r3, [r2, #0]
    if(playbackPtr >= RECORD_BUFFER_SIZE)
 80043d2:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043da:	d306      	bcc.n	80043ea <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe6>
    {
      playbackPtr = 0;
 80043dc:	4b07      	ldr	r3, [pc, #28]	@ (80043fc <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
  else
  {
    AudioBufferOffset = BUFFER_OFFSET_HALF;
  }

}
 80043e2:	e002      	b.n	80043ea <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe6>
    AudioBufferOffset = BUFFER_OFFSET_HALF;
 80043e4:	4b07      	ldr	r3, [pc, #28]	@ (8004404 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x100>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	3728      	adds	r7, #40	@ 0x28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	38000000 	.word	0x38000000
 80043f8:	e000ed00 	.word	0xe000ed00
 80043fc:	24004f10 	.word	0x24004f10
 8004400:	24000ee0 	.word	0x24000ee0
 8004404:	24004f14 	.word	0x24004f14

08004408 <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Stop the program with an infinite loop */
  Error_Handler();
 8004410:	f000 fa2c 	bl	800486c <Error_Handler>
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <BSP_CAMERA_FrameEventCallback>:

/**
  * @brief  Camera Frame Event callback.
  */
void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_Suspend(0);
 8004424:	2000      	movs	r0, #0
 8004426:	f002 fe51 	bl	80070cc <BSP_CAMERA_Suspend>

  /* Convert captured frame to ARGB8888 and copy it to LCD FRAME BUFFER */
  LCD_LL_Convert_RGB565ToARGB8888((uint32_t *)(CAMERA_FRAME_BUFFER), (uint32_t *)(LCD_LAYER_0_ADDRESS), CameraResX[index_resolution], CameraResY[index_resolution]);
 800442a:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <BSP_CAMERA_FrameEventCallback+0x40>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a0c      	ldr	r2, [pc, #48]	@ (8004460 <BSP_CAMERA_FrameEventCallback+0x44>)
 8004430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004434:	b29a      	uxth	r2, r3
 8004436:	4b09      	ldr	r3, [pc, #36]	@ (800445c <BSP_CAMERA_FrameEventCallback+0x40>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	490a      	ldr	r1, [pc, #40]	@ (8004464 <BSP_CAMERA_FrameEventCallback+0x48>)
 800443c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004440:	b29b      	uxth	r3, r3
 8004442:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8004446:	4808      	ldr	r0, [pc, #32]	@ (8004468 <BSP_CAMERA_FrameEventCallback+0x4c>)
 8004448:	f000 f810 	bl	800446c <LCD_LL_Convert_RGB565ToARGB8888>



  BSP_CAMERA_Resume(0);
 800444c:	2000      	movs	r0, #0
 800444e:	f002 fe5b 	bl	8007108 <BSP_CAMERA_Resume>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	24004f18 	.word	0x24004f18
 8004460:	24000514 	.word	0x24000514
 8004464:	24000528 	.word	0x24000528
 8004468:	d0600000 	.word	0xd0600000

0800446c <LCD_LL_Convert_RGB565ToARGB8888>:
  * @param  pSrc: Pointer to source buffer
  * @param  pDst: Pointer to destination buffer
  * @retval None
  */
static void LCD_LL_Convert_RGB565ToARGB8888(void *pSrc, void *pDst, uint16_t xsize, uint16_t ysize)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08c      	sub	sp, #48	@ 0x30
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4611      	mov	r1, r2
 8004478:	461a      	mov	r2, r3
 800447a:	460b      	mov	r3, r1
 800447c:	80fb      	strh	r3, [r7, #6]
 800447e:	4613      	mov	r3, r2
 8004480:	80bb      	strh	r3, [r7, #4]
  uint32_t xPos, yPos, destination;
  uint32_t LcdResX,LcdResY;
  BSP_LCD_GetXSize(0, &LcdResX);
 8004482:	f107 0318 	add.w	r3, r7, #24
 8004486:	4619      	mov	r1, r3
 8004488:	2000      	movs	r0, #0
 800448a:	f003 fa53 	bl	8007934 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &LcdResY);
 800448e:	f107 0314 	add.w	r3, r7, #20
 8004492:	4619      	mov	r1, r3
 8004494:	2000      	movs	r0, #0
 8004496:	f003 fa75 	bl	8007984 <BSP_LCD_GetYSize>
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800449a:	4b29      	ldr	r3, [pc, #164]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 800449c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80044a0:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80044a2:	4b27      	ldr	r3, [pc, #156]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
  hlcd_dma2d.Init.OutputOffset = LcdResX - xsize;
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	4a24      	ldr	r2, [pc, #144]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80044b0:	60d3      	str	r3, [r2, #12]
  /* DMA2D Callbacks Configuration */
  hlcd_dma2d.XferCpltCallback  = NULL;
 80044b2:	4b23      	ldr	r3, [pc, #140]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	621a      	str	r2, [r3, #32]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80044b8:	4b21      	ldr	r3, [pc, #132]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80044be:	4b20      	ldr	r3, [pc, #128]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80044c0:	22ff      	movs	r2, #255	@ 0xff
 80044c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80044c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80044c6:	2202      	movs	r2, #2
 80044c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80044ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 80044d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80044d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004544 <LCD_LL_Convert_RGB565ToARGB8888+0xd8>)
 80044d4:	601a      	str	r2, [r3, #0]

  /* Calculate the destination transfer address */
  xPos = (LcdResX  - xsize)/2;
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
  yPos = (LcdResY  - ysize)/2;
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	88bb      	ldrh	r3, [r7, #4]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	085b      	lsrs	r3, r3, #1
 80044e8:	623b      	str	r3, [r7, #32]

  destination = (uint32_t)pDst + (yPos * LcdResX + xPos) * 4;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	fb03 f202 	mul.w	r2, r3, r2
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	4413      	add	r3, r2
 80044f6:	009a      	lsls	r2, r3, #2
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4413      	add	r3, r2
 80044fc:	61fb      	str	r3, [r7, #28]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80044fe:	4810      	ldr	r0, [pc, #64]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8004500:	f007 fd3a 	bl	800bf78 <HAL_DMA2D_Init>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d116      	bne.n	8004538 <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800450a:	2101      	movs	r1, #1
 800450c:	480c      	ldr	r0, [pc, #48]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 800450e:	f007 feb5 	bl	800c27c <HAL_DMA2D_ConfigLayer>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10f      	bne.n	8004538 <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, destination, xsize, ysize) == HAL_OK)
 8004518:	68f9      	ldr	r1, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	88bb      	ldrh	r3, [r7, #4]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	4806      	ldr	r0, [pc, #24]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8004526:	f007 fd95 	bl	800c054 <HAL_DMA2D_Start>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d103      	bne.n	8004538 <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 100);
 8004530:	2164      	movs	r1, #100	@ 0x64
 8004532:	4803      	ldr	r0, [pc, #12]	@ (8004540 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8004534:	f007 fdb9 	bl	800c0aa <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8004538:	bf00      	nop
 800453a:	3728      	adds	r7, #40	@ 0x28
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	24005dd4 	.word	0x24005dd4
 8004544:	52001000 	.word	0x52001000

08004548 <BSP_JOY_Callback>:
     HAL_Delay(6);
  }
}

void BSP_JOY_Callback(JOY_TypeDef JOY, uint32_t JoyPin)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	6039      	str	r1, [r7, #0]
 8004552:	71fb      	strb	r3, [r7, #7]
    JoyPinPressed = JoyPin;
 8004554:	4a04      	ldr	r2, [pc, #16]	@ (8004568 <BSP_JOY_Callback+0x20>)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6013      	str	r3, [r2, #0]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	24004f1c 	.word	0x24004f1c

0800456c <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
    /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1
       (Cortex-M7) in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
    */

    /* Configure the MPU attributes as Write Through */
    MPU_Config();
 8004570:	f000 f983 	bl	800487a <MPU_Config>

    /* Enable the CPU Cache */
    CPU_CACHE_Enable();
 8004574:	f000 f9de 	bl	8004934 <CPU_CACHE_Enable>
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
       */
    HAL_Init();
 8004578:	f004 f9a4 	bl	80088c4 <HAL_Init>

    /* Configure the system clock to 400 MHz */
    SystemClock_Config();
 800457c:	f000 f856 	bl	800462c <SystemClock_Config>

    /* When system initialization is finished, Cortex-M7 could wakeup (when needed) the Cortex-M4 by
       means of HSEM notification or by any D2 wakeup source (SEV,EXTI..)   */

    /* Configure the Wakeup push-button in EXTI Mode */
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_EXTI);
 8004580:	2101      	movs	r1, #1
 8004582:	2000      	movs	r0, #0
 8004584:	f000 fbbe 	bl	8004d04 <BSP_PB_Init>
    BSP_LED_Init(LED1);
 8004588:	2000      	movs	r0, #0
 800458a:	f000 fb59 	bl	8004c40 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 800458e:	2001      	movs	r0, #1
 8004590:	f000 fb56 	bl	8004c40 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8004594:	2002      	movs	r0, #2
 8004596:	f000 fb53 	bl	8004c40 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 800459a:	2003      	movs	r0, #3
 800459c:	f000 fb50 	bl	8004c40 <BSP_LED_Init>
    /*##-1- Initialize the LCD #################################################*/
    /* Initialize the LCD */
    BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80045a0:	2101      	movs	r1, #1
 80045a2:	2000      	movs	r0, #0
 80045a4:	f002 fe36 	bl	8007214 <BSP_LCD_Init>
    UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80045a8:	481a      	ldr	r0, [pc, #104]	@ (8004614 <main+0xa8>)
 80045aa:	f010 fa53 	bl	8014a54 <UTIL_LCD_SetFuncDriver>
    UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 80045ae:	481a      	ldr	r0, [pc, #104]	@ (8004618 <main+0xac>)
 80045b0:	f010 face 	bl	8014b50 <UTIL_LCD_SetFont>
    Display_DemoDescription();
 80045b4:	f000 f8a8 	bl	8004708 <Display_DemoDescription>
    /* Wait For User inputs */
    while (1)
    {
        if (ButtonState == 1)
 80045b8:	4b18      	ldr	r3, [pc, #96]	@ (800461c <main+0xb0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d1fb      	bne.n	80045b8 <main+0x4c>
        {
            HAL_Delay(400);
 80045c0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80045c4:	f004 f9da 	bl	800897c <HAL_Delay>
            ButtonState = 0;
 80045c8:	4b14      	ldr	r3, [pc, #80]	@ (800461c <main+0xb0>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
            BSP_examples[DemoIndex++].DemoFunc();
 80045ce:	4b14      	ldr	r3, [pc, #80]	@ (8004620 <main+0xb4>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	b2d1      	uxtb	r1, r2
 80045d6:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <main+0xb4>)
 80045d8:	7011      	strb	r1, [r2, #0]
 80045da:	4619      	mov	r1, r3
 80045dc:	4a11      	ldr	r2, [pc, #68]	@ (8004624 <main+0xb8>)
 80045de:	460b      	mov	r3, r1
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	1a5b      	subs	r3, r3, r1
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4798      	blx	r3

            HAL_Delay(100);
 80045ec:	2064      	movs	r0, #100	@ 0x64
 80045ee:	f004 f9c5 	bl	800897c <HAL_Delay>

            if (DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 80045f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <main+0xb4>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <main+0xa2>
            {
                NbLoop++;
 80045fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004628 <main+0xbc>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	3301      	adds	r3, #1
 8004602:	b2da      	uxtb	r2, r3
 8004604:	4b08      	ldr	r3, [pc, #32]	@ (8004628 <main+0xbc>)
 8004606:	701a      	strb	r2, [r3, #0]
                DemoIndex = 0;
 8004608:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <main+0xb4>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
            }
            Display_DemoDescription();
 800460e:	f000 f87b 	bl	8004708 <Display_DemoDescription>
        if (ButtonState == 1)
 8004612:	e7d1      	b.n	80045b8 <main+0x4c>
 8004614:	0801a6cc 	.word	0x0801a6cc
 8004618:	240005dc 	.word	0x240005dc
 800461c:	24004f24 	.word	0x24004f24
 8004620:	24004f20 	.word	0x24004f20
 8004624:	24000540 	.word	0x24000540
 8004628:	2400053c 	.word	0x2400053c

0800462c <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b09e      	sub	sp, #120	@ 0x78
 8004630:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;
    HAL_StatusTypeDef ret = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    // while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
    // {
    // }

    /* Enable HSE Oscillator and activate PLL with HSE as source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004638:	2301      	movs	r3, #1
 800463a:	60bb      	str	r3, [r7, #8]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800463c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004640:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8004646:	2300      	movs	r3, #0
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800464a:	2302      	movs	r3, #2
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800464e:	2302      	movs	r3, #2
 8004650:	633b      	str	r3, [r7, #48]	@ 0x30

    RCC_OscInitStruct.PLL.PLLM = 5;
 8004652:	2305      	movs	r3, #5
 8004654:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLN = 160;
 8004656:	23a0      	movs	r3, #160	@ 0xa0
 8004658:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLP = 2;
 800465e:	2302      	movs	r3, #2
 8004660:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8004662:	2302      	movs	r3, #2
 8004664:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8004666:	2304      	movs	r3, #4
 8004668:	643b      	str	r3, [r7, #64]	@ 0x40

    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800466a:	2300      	movs	r3, #0
 800466c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800466e:	2308      	movs	r3, #8
 8004670:	64bb      	str	r3, [r7, #72]	@ 0x48
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004672:	f107 0308 	add.w	r3, r7, #8
 8004676:	4618      	mov	r0, r3
 8004678:	f00a fbd0 	bl	800ee1c <HAL_RCC_OscConfig>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 8004682:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <SystemClock_Config+0x62>
    {
        Error_Handler();
 800468a:	f000 f8ef 	bl	800486c <Error_Handler>
    }

    /* Select PLL as system clock source and configure  bus clocks dividers */
    RCC_ClkInitStruct.ClockType =
 800468e:	233f      	movs	r3, #63	@ 0x3f
 8004690:	657b      	str	r3, [r7, #84]	@ 0x54
        (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
         RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1);

    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004692:	2303      	movs	r3, #3
 8004694:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004696:	2300      	movs	r3, #0
 8004698:	65fb      	str	r3, [r7, #92]	@ 0x5c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800469a:	2308      	movs	r3, #8
 800469c:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800469e:	2340      	movs	r3, #64	@ 0x40
 80046a0:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80046a2:	2340      	movs	r3, #64	@ 0x40
 80046a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80046a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80046ac:	2340      	movs	r3, #64	@ 0x40
 80046ae:	673b      	str	r3, [r7, #112]	@ 0x70
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80046b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80046b4:	2104      	movs	r1, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f00b f80a 	bl	800f6d0 <HAL_RCC_ClockConfig>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 80046c2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <SystemClock_Config+0xa2>
    {
        Error_Handler();
 80046ca:	f000 f8cf 	bl	800486c <Error_Handler>
           - The activation of the SYSCFG clock
           - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
    */

    /*activate CSI clock mondatory for I/O Compensation Cell*/
    __HAL_RCC_CSI_ENABLE();
 80046ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004704 <SystemClock_Config+0xd8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004704 <SystemClock_Config+0xd8>)
 80046d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046d8:	6013      	str	r3, [r2, #0]

    /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046da:	4b0a      	ldr	r3, [pc, #40]	@ (8004704 <SystemClock_Config+0xd8>)
 80046dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046e0:	4a08      	ldr	r2, [pc, #32]	@ (8004704 <SystemClock_Config+0xd8>)
 80046e2:	f043 0302 	orr.w	r3, r3, #2
 80046e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80046ea:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <SystemClock_Config+0xd8>)
 80046ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]

    /* Enables the I/O Compensation Cell */
    HAL_EnableCompensationCell();
 80046f8:	f004 f970 	bl	80089dc <HAL_EnableCompensationCell>
}
 80046fc:	bf00      	nop
 80046fe:	3778      	adds	r7, #120	@ 0x78
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	58024400 	.word	0x58024400

08004708 <Display_DemoDescription>:
 * @brief  Display main demo messages
 * @param  None
 * @retval None
 */
static void Display_DemoDescription(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b094      	sub	sp, #80	@ 0x50
 800470c:	af02      	add	r7, sp, #8
    char desc[64];
    uint32_t x_size;
    uint32_t y_size;

    BSP_LCD_GetXSize(0, &x_size);
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	4619      	mov	r1, r3
 8004712:	2000      	movs	r0, #0
 8004714:	f003 f90e 	bl	8007934 <BSP_LCD_GetXSize>
    BSP_LCD_GetYSize(0, &y_size);
 8004718:	463b      	mov	r3, r7
 800471a:	4619      	mov	r1, r3
 800471c:	2000      	movs	r0, #0
 800471e:	f003 f931 	bl	8007984 <BSP_LCD_GetYSize>
    /* Set LCD Foreground Layer  */
    UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 8004722:	4835      	ldr	r0, [pc, #212]	@ (80047f8 <Display_DemoDescription+0xf0>)
 8004724:	f010 fa14 	bl	8014b50 <UTIL_LCD_SetFont>

    /* Clear the LCD */
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8004728:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800472c:	f010 f9fc 	bl	8014b28 <UTIL_LCD_SetBackColor>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8004730:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004734:	f010 fab8 	bl	8014ca8 <UTIL_LCD_Clear>

    /* Set the LCD Text Color */
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 8004738:	4830      	ldr	r0, [pc, #192]	@ (80047fc <Display_DemoDescription+0xf4>)
 800473a:	f010 f9e1 	bl	8014b00 <UTIL_LCD_SetTextColor>

    /* Display LCD messages */
    UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32H747I BSP", CENTER_MODE);
 800473e:	2301      	movs	r3, #1
 8004740:	4a2f      	ldr	r2, [pc, #188]	@ (8004800 <Display_DemoDescription+0xf8>)
 8004742:	210a      	movs	r1, #10
 8004744:	2000      	movs	r0, #0
 8004746:	f010 fafb 	bl	8014d40 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 800474a:	2301      	movs	r3, #1
 800474c:	4a2d      	ldr	r2, [pc, #180]	@ (8004804 <Display_DemoDescription+0xfc>)
 800474e:	2123      	movs	r1, #35	@ 0x23
 8004750:	2000      	movs	r0, #0
 8004752:	f010 faf5 	bl	8014d40 <UTIL_LCD_DisplayStringAt>

    /* Draw Bitmap */
    UTIL_LCD_DrawBitmap((x_size - 80) / 2, 65, (uint8_t *)stlogo);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3b50      	subs	r3, #80	@ 0x50
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	4a2a      	ldr	r2, [pc, #168]	@ (8004808 <Display_DemoDescription+0x100>)
 800475e:	2141      	movs	r1, #65	@ 0x41
 8004760:	4618      	mov	r0, r3
 8004762:	f010 fbc5 	bl	8014ef0 <UTIL_LCD_DrawBitmap>

    UTIL_LCD_SetFont(&Font12);
 8004766:	4829      	ldr	r0, [pc, #164]	@ (800480c <Display_DemoDescription+0x104>)
 8004768:	f010 f9f2 	bl	8014b50 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(0, y_size - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2018",
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	f1a3 0114 	sub.w	r1, r3, #20
 8004772:	2301      	movs	r3, #1
 8004774:	4a26      	ldr	r2, [pc, #152]	@ (8004810 <Display_DemoDescription+0x108>)
 8004776:	2000      	movs	r0, #0
 8004778:	f010 fae2 	bl	8014d40 <UTIL_LCD_DisplayStringAt>
                             CENTER_MODE);

    UTIL_LCD_SetFont(&Font16);
 800477c:	4825      	ldr	r0, [pc, #148]	@ (8004814 <Display_DemoDescription+0x10c>)
 800477e:	f010 f9e7 	bl	8014b50 <UTIL_LCD_SetFont>
    BSP_LCD_FillRect(0, 0, y_size / 2 + 15, x_size, 60, UTIL_LCD_COLOR_BLUE);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	f103 020f 	add.w	r2, r3, #15
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4922      	ldr	r1, [pc, #136]	@ (8004818 <Display_DemoDescription+0x110>)
 800478e:	9101      	str	r1, [sp, #4]
 8004790:	213c      	movs	r1, #60	@ 0x3c
 8004792:	9100      	str	r1, [sp, #0]
 8004794:	2100      	movs	r1, #0
 8004796:	2000      	movs	r0, #0
 8004798:	f003 fafe 	bl	8007d98 <BSP_LCD_FillRect>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800479c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047a0:	f010 f9ae 	bl	8014b00 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 80047a4:	481c      	ldr	r0, [pc, #112]	@ (8004818 <Display_DemoDescription+0x110>)
 80047a6:	f010 f9bf 	bl	8014b28 <UTIL_LCD_SetBackColor>
    UTIL_LCD_DisplayStringAt(0, y_size / 2 + 30,
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	f103 011e 	add.w	r1, r3, #30
 80047b2:	2301      	movs	r3, #1
 80047b4:	4a19      	ldr	r2, [pc, #100]	@ (800481c <Display_DemoDescription+0x114>)
 80047b6:	2000      	movs	r0, #0
 80047b8:	f010 fac2 	bl	8014d40 <UTIL_LCD_DisplayStringAt>
                             (uint8_t *)"Press Wakeup button to start :", CENTER_MODE);
    sprintf(desc, "%s example", BSP_examples[DemoIndex].DemoName);
 80047bc:	4b18      	ldr	r3, [pc, #96]	@ (8004820 <Display_DemoDescription+0x118>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4a16      	ldr	r2, [pc, #88]	@ (8004824 <Display_DemoDescription+0x11c>)
 80047cc:	4413      	add	r3, r2
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	f107 0308 	add.w	r3, r7, #8
 80047d4:	4914      	ldr	r1, [pc, #80]	@ (8004828 <Display_DemoDescription+0x120>)
 80047d6:	4618      	mov	r0, r3
 80047d8:	f012 fc06 	bl	8016fe8 <siprintf>
    UTIL_LCD_DisplayStringAt(0, y_size / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 80047e4:	f107 0208 	add.w	r2, r7, #8
 80047e8:	2301      	movs	r3, #1
 80047ea:	2000      	movs	r0, #0
 80047ec:	f010 faa8 	bl	8014d40 <UTIL_LCD_DisplayStringAt>
}
 80047f0:	bf00      	nop
 80047f2:	3748      	adds	r7, #72	@ 0x48
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	240005dc 	.word	0x240005dc
 80047fc:	ff000080 	.word	0xff000080
 8004800:	08017f50 	.word	0x08017f50
 8004804:	08017f60 	.word	0x08017f60
 8004808:	08018230 	.word	0x08018230
 800480c:	240005ec 	.word	0x240005ec
 8004810:	08017f74 	.word	0x08017f74
 8004814:	240005e4 	.word	0x240005e4
 8004818:	ff0000ff 	.word	0xff0000ff
 800481c:	08017f9c 	.word	0x08017f9c
 8004820:	24004f20 	.word	0x24004f20
 8004824:	24000540 	.word	0x24000540
 8004828:	08017fbc 	.word	0x08017fbc

0800482c <CheckForUserInput>:
/**
 * @brief  Check for user input
 * @param  None
 * @retval Input state (1 : active / 0 : Inactive)
 */
uint8_t CheckForUserInput(void) { return ButtonState; }
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
 8004830:	4b03      	ldr	r3, [pc, #12]	@ (8004840 <CheckForUserInput+0x14>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	24004f24 	.word	0x24004f24

08004844 <BSP_PB_Callback>:
 * @brief  Button Callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_WAKEUP)
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <BSP_PB_Callback+0x16>
    {

        ButtonState = 1;
 8004854:	4b04      	ldr	r3, [pc, #16]	@ (8004868 <BSP_PB_Callback+0x24>)
 8004856:	2201      	movs	r2, #1
 8004858:	601a      	str	r2, [r3, #0]
    }
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	24004f24 	.word	0x24004f24

0800486c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
    /* Turn LED REDon */
    BSP_LED_On(LED_RED);
 8004870:	2002      	movs	r0, #2
 8004872:	f000 fa29 	bl	8004cc8 <BSP_LED_On>
    while (1)
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <Error_Handler+0xa>

0800487a <MPU_Config>:
 *         The Region Size is 32MB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct;

    /* Disable the MPU */
    HAL_MPU_Disable();
 8004880:	f004 f9ce 	bl	8008c20 <HAL_MPU_Disable>

    /* Configure the MPU as Strongly ordered for not defined regions */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004884:	2301      	movs	r3, #1
 8004886:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x00;
 8004888:	2300      	movs	r3, #0
 800488a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800488c:	231f      	movs	r3, #31
 800488e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8004890:	2300      	movs	r3, #0
 8004892:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004898:	2300      	movs	r3, #0
 800489a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800489c:	2301      	movs	r3, #1
 800489e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x87;
 80048a8:	2387      	movs	r3, #135	@ 0x87
 80048aa:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80048b0:	463b      	mov	r3, r7
 80048b2:	4618      	mov	r0, r3
 80048b4:	f004 f9ec 	bl	8008c90 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for SDRAM */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80048b8:	2301      	movs	r3, #1
 80048ba:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 80048bc:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80048c0:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80048c2:	2318      	movs	r3, #24
 80048c4:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80048c6:	2303      	movs	r3, #3
 80048c8:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80048da:	2300      	movs	r3, #0
 80048dc:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80048de:	2300      	movs	r3, #0
 80048e0:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80048e6:	463b      	mov	r3, r7
 80048e8:	4618      	mov	r0, r3
 80048ea:	f004 f9d1 	bl	8008c90 <HAL_MPU_ConfigRegion>

    /* Configure the MPU QSPI flash */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80048ee:	2301      	movs	r3, #1
 80048f0:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 80048f2:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80048f6:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80048f8:	231a      	movs	r3, #26
 80048fa:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80048fc:	2303      	movs	r3, #3
 80048fe:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004900:	2300      	movs	r3, #0
 8004902:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004904:	2301      	movs	r3, #1
 8004906:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004908:	2300      	movs	r3, #0
 800490a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800490c:	2302      	movs	r3, #2
 800490e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004910:	2300      	movs	r3, #0
 8004912:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8004914:	2300      	movs	r3, #0
 8004916:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004918:	2300      	movs	r3, #0
 800491a:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800491c:	463b      	mov	r3, r7
 800491e:	4618      	mov	r0, r3
 8004920:	f004 f9b6 	bl	8008c90 <HAL_MPU_ConfigRegion>

    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004924:	2004      	movs	r0, #4
 8004926:	f004 f993 	bl	8008c50 <HAL_MPU_Enable>
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800493a:	4b34      	ldr	r3, [pc, #208]	@ (8004a0c <CPU_CACHE_Enable+0xd8>)
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d11b      	bne.n	800497e <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8004946:	f3bf 8f4f 	dsb	sy
}
 800494a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800494c:	f3bf 8f6f 	isb	sy
}
 8004950:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004952:	4b2e      	ldr	r3, [pc, #184]	@ (8004a0c <CPU_CACHE_Enable+0xd8>)
 8004954:	2200      	movs	r2, #0
 8004956:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800495a:	f3bf 8f4f 	dsb	sy
}
 800495e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004960:	f3bf 8f6f 	isb	sy
}
 8004964:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004966:	4b29      	ldr	r3, [pc, #164]	@ (8004a0c <CPU_CACHE_Enable+0xd8>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4a28      	ldr	r2, [pc, #160]	@ (8004a0c <CPU_CACHE_Enable+0xd8>)
 800496c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004970:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004972:	f3bf 8f4f 	dsb	sy
}
 8004976:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004978:	f3bf 8f6f 	isb	sy
}
 800497c:	e000      	b.n	8004980 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800497e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8004980:	4b22      	ldr	r3, [pc, #136]	@ (8004a0c <CPU_CACHE_Enable+0xd8>)
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d138      	bne.n	80049fe <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800498c:	4b1f      	ldr	r3, [pc, #124]	@ (8004a0c <CPU_CACHE_Enable+0xd8>)
 800498e:	2200      	movs	r2, #0
 8004990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004994:	f3bf 8f4f 	dsb	sy
}
 8004998:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800499a:	4b1c      	ldr	r3, [pc, #112]	@ (8004a0c <CPU_CACHE_Enable+0xd8>)
 800499c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a0:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	0b5b      	lsrs	r3, r3, #13
 80049a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80049aa:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	08db      	lsrs	r3, r3, #3
 80049b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049b4:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80049be:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80049c4:	4911      	ldr	r1, [pc, #68]	@ (8004a0c <CPU_CACHE_Enable+0xd8>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	1e5a      	subs	r2, r3, #1
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ef      	bne.n	80049b6 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1e5a      	subs	r2, r3, #1
 80049da:	60ba      	str	r2, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e5      	bne.n	80049ac <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80049e0:	f3bf 8f4f 	dsb	sy
}
 80049e4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80049e6:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <CPU_CACHE_Enable+0xd8>)
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	4a08      	ldr	r2, [pc, #32]	@ (8004a0c <CPU_CACHE_Enable+0xd8>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80049f2:	f3bf 8f4f 	dsb	sy
}
 80049f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049f8:	f3bf 8f6f 	isb	sy
}
 80049fc:	e000      	b.n	8004a00 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80049fe:	bf00      	nop
    /* Enable I-Cache */
    SCB_EnableICache();

    /* Enable D-Cache */
    SCB_EnableDCache();
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <BSP_SD_WriteCpltCallback>:
* @brief Tx Transfer completed callbacks
* @param hsd: SD handle
* @retval None
*/
void BSP_SD_WriteCpltCallback(uint32_t Instance)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  SD1WriteStatus = 1;
 8004a18:	4b04      	ldr	r3, [pc, #16]	@ (8004a2c <BSP_SD_WriteCpltCallback+0x1c>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	24004f28 	.word	0x24004f28

08004a30 <BSP_SD_ReadCpltCallback>:
* @brief Rx Transfer completed callbacks
* @param hsd: SD handle
* @retval None
*/
void BSP_SD_ReadCpltCallback(uint32_t Instance)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  SD1ReadStatus = 1;
 8004a38:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <BSP_SD_ReadCpltCallback+0x1c>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	24004f2c 	.word	0x24004f2c

08004a50 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <HardFault_Handler+0x4>

08004a74 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <MemManage_Handler+0x4>

08004a7c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004a80:	bf00      	nop
 8004a82:	e7fd      	b.n	8004a80 <BusFault_Handler+0x4>

08004a84 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004a88:	bf00      	nop
 8004a8a:	e7fd      	b.n	8004a88 <UsageFault_Handler+0x4>

08004a8c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	af00      	add	r7, sp, #0
}
 8004a9e:	bf00      	nop
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
}
 8004aac:	bf00      	nop
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8004aba:	f003 ff3f 	bl	800893c <HAL_IncTick>
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <EXTI2_IRQHandler>:
* @brief  This function handles External line 2 interrupt request.
* @param  None
* @retval None
*/
void EXTI2_IRQHandler(void)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_SEL);
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	2000      	movs	r0, #0
 8004aca:	f000 faaf 	bl	800502c <BSP_JOY_IRQHandler>
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <EXTI3_IRQHandler>:
* @brief  This function handles External line 3 interrupt request.
* @param  None
* @retval None
*/
void EXTI3_IRQHandler(void)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_DOWN);
 8004ad6:	2102      	movs	r1, #2
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f000 faa7 	bl	800502c <BSP_JOY_IRQHandler>
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <EXTI4_IRQHandler>:
* @brief  This function handles External line 4 interrupt request.
* @param  None
* @retval None
*/
void EXTI4_IRQHandler(void)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_LEFT);
 8004ae6:	2104      	movs	r1, #4
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f000 fa9f 	bl	800502c <BSP_JOY_IRQHandler>
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <EXTI9_5_IRQHandler>:
* @brief  This function handles External lines 9 to 5 interrupt request.
* @param  None
* @retval None
*/
void EXTI9_5_IRQHandler(void)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	af00      	add	r7, sp, #0
  BSP_JOY_IRQHandler(JOY1, JOY_RIGHT);
 8004af6:	2108      	movs	r1, #8
 8004af8:	2000      	movs	r0, #0
 8004afa:	f000 fa97 	bl	800502c <BSP_JOY_IRQHandler>
  BSP_JOY_IRQHandler(JOY1, JOY_UP);
 8004afe:	2110      	movs	r1, #16
 8004b00:	2000      	movs	r0, #0
 8004b02:	f000 fa93 	bl	800502c <BSP_JOY_IRQHandler>
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(BUTTON_WAKEUP);
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f000 f980 	bl	8004e14 <BSP_PB_IRQHandler>
}
 8004b14:	bf00      	nop
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles SAI DMA interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler()
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0,AUDIO_IN_DEVICE_DIGITAL_MIC);
 8004b1c:	2110      	movs	r1, #16
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f001 fad0 	bl	80060c4 <BSP_AUDIO_IN_IRQHandler>
}
 8004b24:	bf00      	nop
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	f000 fe11 	bl	8005754 <BSP_AUDIO_OUT_IRQHandler>
}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8004b3a:	2110      	movs	r1, #16
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	f001 fac1 	bl	80060c4 <BSP_AUDIO_IN_IRQHandler>
}
 8004b42:	bf00      	nop
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	af00      	add	r7, sp, #0
    BSP_SDRAM_IRQHandler(0);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f003 fd8e 	bl	800866c <BSP_SDRAM_IRQHandler>
}
 8004b50:	bf00      	nop
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <SDMMC1_IRQHandler>:
  * @brief  This function handles SD interrupt request.
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  BSP_SD_IRQHandler(0);
 8004b58:	2000      	movs	r0, #0
 8004b5a:	f003 fce1 	bl	8008520 <BSP_SD_IRQHandler>
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <DCMI_IRQHandler>:
  * @brief  DCMI interrupt handler.
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	af00      	add	r7, sp, #0
   BSP_CAMERA_IRQHandler(0);
 8004b66:	2000      	movs	r0, #0
 8004b68:	f002 faec 	bl	8007144 <BSP_CAMERA_IRQHandler>
}
 8004b6c:	bf00      	nop
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <DMA2_Stream3_IRQHandler>:
  * @brief  DMA interrupt handler.
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  BSP_CAMERA_DMA_IRQHandler(0);
 8004b74:	2000      	movs	r0, #0
 8004b76:	f002 faf3 	bl	8007160 <BSP_CAMERA_DMA_IRQHandler>
}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b88:	4a14      	ldr	r2, [pc, #80]	@ (8004bdc <_sbrk+0x5c>)
 8004b8a:	4b15      	ldr	r3, [pc, #84]	@ (8004be0 <_sbrk+0x60>)
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b94:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <_sbrk+0x64>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b9c:	4b11      	ldr	r3, [pc, #68]	@ (8004be4 <_sbrk+0x64>)
 8004b9e:	4a12      	ldr	r2, [pc, #72]	@ (8004be8 <_sbrk+0x68>)
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ba2:	4b10      	ldr	r3, [pc, #64]	@ (8004be4 <_sbrk+0x64>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d207      	bcs.n	8004bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bb0:	f012 fa44 	bl	801703c <__errno>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	220c      	movs	r2, #12
 8004bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bbe:	e009      	b.n	8004bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bc0:	4b08      	ldr	r3, [pc, #32]	@ (8004be4 <_sbrk+0x64>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bc6:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <_sbrk+0x64>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	4a05      	ldr	r2, [pc, #20]	@ (8004be4 <_sbrk+0x64>)
 8004bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	24080000 	.word	0x24080000
 8004be0:	00001000 	.word	0x00001000
 8004be4:	24004f30 	.word	0x24004f30
 8004be8:	24006288 	.word	0x24006288

08004bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004bf0:	f7fb fbc6 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bf4:	480c      	ldr	r0, [pc, #48]	@ (8004c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004bf6:	490d      	ldr	r1, [pc, #52]	@ (8004c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8004c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bfc:	e002      	b.n	8004c04 <LoopCopyDataInit>

08004bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c02:	3304      	adds	r3, #4

08004c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c08:	d3f9      	bcc.n	8004bfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8004c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c10:	e001      	b.n	8004c16 <LoopFillZerobss>

08004c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c14:	3204      	adds	r2, #4

08004c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c18:	d3fb      	bcc.n	8004c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c1a:	f012 fa15 	bl	8017048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c1e:	f7ff fca5 	bl	800456c <main>
  bx  lr
 8004c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004c28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004c2c:	24000644 	.word	0x24000644
  ldr r2, =_sidata
 8004c30:	0801d4c0 	.word	0x0801d4c0
  ldr r2, =_sbss
 8004c34:	24000660 	.word	0x24000660
  ldr r4, =_ebss
 8004c38:	24006284 	.word	0x24006284

08004c3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c3c:	e7fe      	b.n	8004c3c <ADC3_IRQHandler>
	...

08004c40 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	@ 0x28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8004c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cbc <BSP_LED_Init+0x7c>)
 8004c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c54:	4a19      	ldr	r2, [pc, #100]	@ (8004cbc <BSP_LED_Init+0x7c>)
 8004c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c5e:	4b17      	ldr	r3, [pc, #92]	@ (8004cbc <BSP_LED_Init+0x7c>)
 8004c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	4a14      	ldr	r2, [pc, #80]	@ (8004cc0 <BSP_LED_Init+0x80>)
 8004c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c76:	2301      	movs	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	4a0f      	ldr	r2, [pc, #60]	@ (8004cc4 <BSP_LED_Init+0x84>)
 8004c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c8a:	f107 0210 	add.w	r2, r7, #16
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f008 fa6b 	bl	800d16c <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <BSP_LED_Init+0x84>)
 8004c9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	4a07      	ldr	r2, [pc, #28]	@ (8004cc0 <BSP_LED_Init+0x80>)
 8004ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2201      	movs	r2, #1
 8004caa:	4619      	mov	r1, r3
 8004cac:	f008 fd30 	bl	800d710 <HAL_GPIO_WritePin>
 return ret;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3728      	adds	r7, #40	@ 0x28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	58024400 	.word	0x58024400
 8004cc0:	0801a608 	.word	0x0801a608
 8004cc4:	2400057c 	.word	0x2400057c

08004cc8 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	4a08      	ldr	r2, [pc, #32]	@ (8004cfc <BSP_LED_On+0x34>)
 8004cda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	4a07      	ldr	r2, [pc, #28]	@ (8004d00 <BSP_LED_On+0x38>)
 8004ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2200      	movs	r2, #0
 8004cea:	4619      	mov	r1, r3
 8004cec:	f008 fd10 	bl	800d710 <HAL_GPIO_WritePin>
  return ret;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	2400057c 	.word	0x2400057c
 8004d00:	0801a608 	.word	0x0801a608

08004d04 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t  BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	460a      	mov	r2, r1
 8004d0e:	71fb      	strb	r3, [r7, #7]
 8004d10:	4613      	mov	r3, r2
 8004d12:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8004d14:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd0 <BSP_PB_Init+0xcc>)
 8004d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd0 <BSP_PB_Init+0xcc>)
 8004d1c:	f043 0304 	orr.w	r3, r3, #4
 8004d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d24:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd0 <BSP_PB_Init+0xcc>)
 8004d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8004d32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d36:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8004d40:	79bb      	ldrb	r3, [r7, #6]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10c      	bne.n	8004d60 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004d46:	2300      	movs	r3, #0
 8004d48:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	4a21      	ldr	r2, [pc, #132]	@ (8004dd4 <BSP_PB_Init+0xd0>)
 8004d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d52:	f107 020c 	add.w	r2, r7, #12
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f008 fa07 	bl	800d16c <HAL_GPIO_Init>
 8004d5e:	e031      	b.n	8004dc4 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004d60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004d64:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd4 <BSP_PB_Init+0xd0>)
 8004d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6e:	f107 020c 	add.w	r2, r7, #12
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f008 f9f9 	bl	800d16c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4a16      	ldr	r2, [pc, #88]	@ (8004dd8 <BSP_PB_Init+0xd4>)
 8004d80:	441a      	add	r2, r3
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	4915      	ldr	r1, [pc, #84]	@ (8004ddc <BSP_PB_Init+0xd8>)
 8004d86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f008 f99c 	bl	800d0ca <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4a10      	ldr	r2, [pc, #64]	@ (8004dd8 <BSP_PB_Init+0xd4>)
 8004d98:	1898      	adds	r0, r3, r2
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	4a10      	ldr	r2, [pc, #64]	@ (8004de0 <BSP_PB_Init+0xdc>)
 8004d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da2:	461a      	mov	r2, r3
 8004da4:	2100      	movs	r1, #0
 8004da6:	f008 f971 	bl	800d08c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004daa:	2028      	movs	r0, #40	@ 0x28
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	4a0d      	ldr	r2, [pc, #52]	@ (8004de4 <BSP_PB_Init+0xe0>)
 8004db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db4:	2200      	movs	r2, #0
 8004db6:	4619      	mov	r1, r3
 8004db8:	f003 fefc 	bl	8008bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004dbc:	2328      	movs	r3, #40	@ 0x28
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f003 ff12 	bl	8008be8 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	2400058c 	.word	0x2400058c
 8004dd8:	24004f34 	.word	0x24004f34
 8004ddc:	0801a630 	.word	0x0801a630
 8004de0:	240005a4 	.word	0x240005a4
 8004de4:	240005a8 	.word	0x240005a8

08004de8 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	4a06      	ldr	r2, [pc, #24]	@ (8004e10 <BSP_PB_GetState+0x28>)
 8004df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004dfe:	4611      	mov	r1, r2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f008 fc6d 	bl	800d6e0 <HAL_GPIO_ReadPin>
 8004e06:	4603      	mov	r3, r0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	2400058c 	.word	0x2400058c

08004e14 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4a04      	ldr	r2, [pc, #16]	@ (8004e34 <BSP_PB_IRQHandler+0x20>)
 8004e24:	4413      	add	r3, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f008 f964 	bl	800d0f4 <HAL_EXTI_IRQHandler>
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	24004f34 	.word	0x24004f34

08004e38 <BUTTON_WAKEUP_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_WAKEUP_EXTI_Callback(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_WAKEUP);
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f7ff fd01 	bl	8004844 <BSP_PB_Callback>
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <BSP_JOY_Init>:
  *                                 with interrupt generation capability
  * @param  JoyPins joystick pins to be initialized
  * @retval BSP status
  */
int32_t BSP_JOY_Init(JOY_TypeDef JOY, JOYMode_TypeDef JoyMode, JOYPin_TypeDef JoyPins)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b090      	sub	sp, #64	@ 0x40
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	71fb      	strb	r3, [r7, #7]
 8004e52:	460b      	mov	r3, r1
 8004e54:	71bb      	strb	r3, [r7, #6]
 8004e56:	4613      	mov	r3, r2
 8004e58:	717b      	strb	r3, [r7, #5]
  int32_t ret = BSP_ERROR_NONE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 8004e5e:	797a      	ldrb	r2, [r7, #5]
 8004e60:	4b69      	ldr	r3, [pc, #420]	@ (8005008 <BSP_JOY_Init+0x1c0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	4a68      	ldr	r2, [pc, #416]	@ (8005008 <BSP_JOY_Init+0x1c0>)
 8004e68:	6013      	str	r3, [r2, #0]

  /* Initialized the Joystick. */
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e6e:	e0c1      	b.n	8004ff4 <BSP_JOY_Init+0x1ac>
  {
    key_pressed = 1UL << joykey;
 8004e70:	2201      	movs	r2, #1
 8004e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
    if((key_pressed & (uint32_t)JoyPins) == key_pressed)
 8004e7a:	797a      	ldrb	r2, [r7, #5]
 8004e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7e:	4013      	ands	r3, r2
 8004e80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e82:	429a      	cmp	r2, r3
 8004e84:	f040 80b3 	bne.w	8004fee <BSP_JOY_Init+0x1a6>
    {
      if(JOY == JOY1)
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f040 80af 	bne.w	8004fee <BSP_JOY_Init+0x1a6>
      {
      /* Enable the JOY clock */
        if(key_pressed == (uint32_t)JOY_SEL)
 8004e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10f      	bne.n	8004eb6 <BSP_JOY_Init+0x6e>
        {
          JOY1_SEL_GPIO_CLK_ENABLE();
 8004e96:	4b5d      	ldr	r3, [pc, #372]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e9c:	4a5b      	ldr	r2, [pc, #364]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004e9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ea6:	4b59      	ldr	r3, [pc, #356]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	e04a      	b.n	8004f4c <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t)JOY_DOWN)
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d10f      	bne.n	8004edc <BSP_JOY_Init+0x94>
        {
          JOY1_DOWN_GPIO_CLK_ENABLE();
 8004ebc:	4b53      	ldr	r3, [pc, #332]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ec2:	4a52      	ldr	r2, [pc, #328]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004ec4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ecc:	4b4f      	ldr	r3, [pc, #316]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	e037      	b.n	8004f4c <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t) JOY_LEFT)
 8004edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d10f      	bne.n	8004f02 <BSP_JOY_Init+0xba>
        {
          JOY1_LEFT_GPIO_CLK_ENABLE();
 8004ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ee8:	4a48      	ldr	r2, [pc, #288]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ef2:	4b46      	ldr	r3, [pc, #280]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	e024      	b.n	8004f4c <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 8004f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d10f      	bne.n	8004f28 <BSP_JOY_Init+0xe0>
        {
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 8004f08:	4b40      	ldr	r3, [pc, #256]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004f10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f18:	4b3c      	ldr	r3, [pc, #240]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	e011      	b.n	8004f4c <BSP_JOY_Init+0x104>
        }
        else
        {
          if(key_pressed == (uint32_t) JOY_UP)
 8004f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d10e      	bne.n	8004f4c <BSP_JOY_Init+0x104>
          {
            JOY1_UP_GPIO_CLK_ENABLE();
 8004f2e:	4b37      	ldr	r3, [pc, #220]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f34:	4a35      	ldr	r2, [pc, #212]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004f36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f3e:	4b33      	ldr	r3, [pc, #204]	@ (800500c <BSP_JOY_Init+0x1c4>)
 8004f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8004f4c:	4a30      	ldr	r2, [pc, #192]	@ (8005010 <BSP_JOY_Init+0x1c8>)
 8004f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f54:	623b      	str	r3, [r7, #32]
        gpio_init_structure.Pull = GPIO_PULLUP;
 8004f56:	2301      	movs	r3, #1
 8004f58:	62bb      	str	r3, [r7, #40]	@ 0x28
        gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (JoyMode == JOY_MODE_GPIO)
 8004f5e:	79bb      	ldrb	r3, [r7, #6]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10c      	bne.n	8004f7e <BSP_JOY_Init+0x136>
        {
          /* Configure Joy pin as input */
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004f64:	2300      	movs	r3, #0
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8004f68:	4a2a      	ldr	r2, [pc, #168]	@ (8005014 <BSP_JOY_Init+0x1cc>)
 8004f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f70:	f107 0220 	add.w	r2, r7, #32
 8004f74:	4611      	mov	r1, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f008 f8f8 	bl	800d16c <HAL_GPIO_Init>
 8004f7c:	e037      	b.n	8004fee <BSP_JOY_Init+0x1a6>
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004f7e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8004f84:	4a23      	ldr	r2, [pc, #140]	@ (8005014 <BSP_JOY_Init+0x1cc>)
 8004f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8c:	f107 0220 	add.w	r2, r7, #32
 8004f90:	4611      	mov	r1, r2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f008 f8ea 	bl	800d16c <HAL_GPIO_Init>

         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 8004f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8005018 <BSP_JOY_Init+0x1d0>)
 8004f9e:	441a      	add	r2, r3
 8004fa0:	491e      	ldr	r1, [pc, #120]	@ (800501c <BSP_JOY_Init+0x1d4>)
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f008 f88d 	bl	800d0ca <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 8004fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4a18      	ldr	r2, [pc, #96]	@ (8005018 <BSP_JOY_Init+0x1d0>)
 8004fb6:	1898      	adds	r0, r3, r2
 8004fb8:	4a19      	ldr	r2, [pc, #100]	@ (8005020 <BSP_JOY_Init+0x1d8>)
 8004fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	f008 f862 	bl	800d08c <HAL_EXTI_RegisterCallback>

          /* Enable and set Joy EXTI Interrupt to the lowest priority */
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 8004fc8:	4a16      	ldr	r2, [pc, #88]	@ (8005024 <BSP_JOY_Init+0x1dc>)
 8004fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fcc:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8004fd0:	4a15      	ldr	r2, [pc, #84]	@ (8005028 <BSP_JOY_Init+0x1e0>)
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4619      	mov	r1, r3
 8004fdc:	f003 fdea 	bl	8008bb4 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 8004fe0:	4a10      	ldr	r2, [pc, #64]	@ (8005024 <BSP_JOY_Init+0x1dc>)
 8004fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fe4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f003 fdfd 	bl	8008be8 <HAL_NVIC_EnableIRQ>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 8004fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	f67f af3a 	bls.w	8004e70 <BSP_JOY_Init+0x28>
        }
      }
    }
  }

  return ret;
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3740      	adds	r7, #64	@ 0x40
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	24004f3c 	.word	0x24004f3c
 800500c:	58024400 	.word	0x58024400
 8005010:	0801a618 	.word	0x0801a618
 8005014:	24000590 	.word	0x24000590
 8005018:	24004f40 	.word	0x24004f40
 800501c:	0801a634 	.word	0x0801a634
 8005020:	240005ac 	.word	0x240005ac
 8005024:	0801a624 	.word	0x0801a624
 8005028:	240005c0 	.word	0x240005c0

0800502c <BSP_JOY_IRQHandler>:
  * @param  JOY Joystick instance
  * @param  JoyPin Specifies the pin connected EXTI handler
  * @retval None
  */
void BSP_JOY_IRQHandler(JOY_TypeDef JOY, JOYPin_TypeDef JoyPin)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	460a      	mov	r2, r1
 8005036:	71fb      	strb	r3, [r7, #7]
 8005038:	4613      	mov	r3, r2
 800503a:	71bb      	strb	r3, [r7, #6]
  if(JOY == JOY1)
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d116      	bne.n	8005070 <BSP_JOY_IRQHandler+0x44>
  {
    HAL_EXTI_IRQHandler(&hjoy_exti[POSITION_VAL(JoyPin)]);
 8005042:	79bb      	ldrb	r3, [r7, #6]
 8005044:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	fa93 f3a3 	rbit	r3, r3
 800504c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <BSP_JOY_IRQHandler+0x30>
  {
    return 32U;
 8005058:	2320      	movs	r3, #32
 800505a:	e003      	b.n	8005064 <BSP_JOY_IRQHandler+0x38>
  }
  return __builtin_clz(value);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	fab3 f383 	clz	r3, r3
 8005062:	b2db      	uxtb	r3, r3
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4a04      	ldr	r2, [pc, #16]	@ (8005078 <BSP_JOY_IRQHandler+0x4c>)
 8005068:	4413      	add	r3, r2
 800506a:	4618      	mov	r0, r3
 800506c:	f008 f842 	bl	800d0f4 <HAL_EXTI_IRQHandler>
  }
}
 8005070:	bf00      	nop
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	24004f40 	.word	0x24004f40

0800507c <JOY1_UP_EXTI_Callback>:
/**
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_UP);
 8005080:	2110      	movs	r1, #16
 8005082:	2000      	movs	r0, #0
 8005084:	f7ff fa60 	bl	8004548 <BSP_JOY_Callback>
}
 8005088:	bf00      	nop
 800508a:	bd80      	pop	{r7, pc}

0800508c <JOY1_DOWN_EXTI_Callback>:
/**
  * @brief  JOY1 DOWN EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_DOWN_EXTI_Callback(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 8005090:	2102      	movs	r1, #2
 8005092:	2000      	movs	r0, #0
 8005094:	f7ff fa58 	bl	8004548 <BSP_JOY_Callback>
}
 8005098:	bf00      	nop
 800509a:	bd80      	pop	{r7, pc}

0800509c <JOY1_SEL_EXTI_Callback>:
/**
  * @brief  JOY1 SEL EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_SEL_EXTI_Callback(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_SEL);
 80050a0:	2101      	movs	r1, #1
 80050a2:	2000      	movs	r0, #0
 80050a4:	f7ff fa50 	bl	8004548 <BSP_JOY_Callback>
}
 80050a8:	bf00      	nop
 80050aa:	bd80      	pop	{r7, pc}

080050ac <JOY1_LEFT_EXTI_Callback>:
/**
  * @brief  JOY1 LEFT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_LEFT_EXTI_Callback(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 80050b0:	2104      	movs	r1, #4
 80050b2:	2000      	movs	r0, #0
 80050b4:	f7ff fa48 	bl	8004548 <BSP_JOY_Callback>
}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}

080050bc <JOY1_RIGHT_EXTI_Callback>:
/**
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 80050c0:	2108      	movs	r1, #8
 80050c2:	2000      	movs	r0, #0
 80050c4:	f7ff fa40 	bl	8004548 <BSP_JOY_Callback>
}
 80050c8:	bf00      	nop
 80050ca:	bd80      	pop	{r7, pc}

080050cc <BSP_AUDIO_OUT_Init>:
  * @param  Instance  : AUDIO_OUT Instance. It can only be 0 (SAI)
  * @param  AudioInit : AUDIO_OUT init Structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b094      	sub	sp, #80	@ 0x50
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d903      	bls.n	80050e8 <BSP_AUDIO_OUT_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80050e0:	f06f 0301 	mvn.w	r3, #1
 80050e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050e6:	e0da      	b.n	800529e <BSP_AUDIO_OUT_Init+0x1d2>
  }
  else
  {
    /* Fill Audio_Out_Ctx structure */
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6819      	ldr	r1, [r3, #0]
 80050ec:	486e      	ldr	r0, [pc, #440]	@ (80052a8 <BSP_AUDIO_OUT_Init+0x1dc>)
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4613      	mov	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4403      	add	r3, r0
 80050fa:	3304      	adds	r3, #4
 80050fc:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Instance       = Instance;
 80050fe:	496a      	ldr	r1, [pc, #424]	@ (80052a8 <BSP_AUDIO_OUT_Init+0x1dc>)
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	601a      	str	r2, [r3, #0]
    Audio_Out_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6859      	ldr	r1, [r3, #4]
 8005114:	4864      	ldr	r0, [pc, #400]	@ (80052a8 <BSP_AUDIO_OUT_Init+0x1dc>)
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4403      	add	r3, r0
 8005122:	3308      	adds	r3, #8
 8005124:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6899      	ldr	r1, [r3, #8]
 800512a:	485f      	ldr	r0, [pc, #380]	@ (80052a8 <BSP_AUDIO_OUT_Init+0x1dc>)
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4403      	add	r3, r0
 8005138:	330c      	adds	r3, #12
 800513a:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68d9      	ldr	r1, [r3, #12]
 8005140:	4859      	ldr	r0, [pc, #356]	@ (80052a8 <BSP_AUDIO_OUT_Init+0x1dc>)
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4403      	add	r3, r0
 800514e:	3314      	adds	r3, #20
 8005150:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6919      	ldr	r1, [r3, #16]
 8005156:	4854      	ldr	r0, [pc, #336]	@ (80052a8 <BSP_AUDIO_OUT_Init+0x1dc>)
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4403      	add	r3, r0
 8005164:	3310      	adds	r3, #16
 8005166:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].State          = AUDIO_OUT_STATE_RESET;
 8005168:	494f      	ldr	r1, [pc, #316]	@ (80052a8 <BSP_AUDIO_OUT_Init+0x1dc>)
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	331c      	adds	r3, #28
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

#if (USE_AUDIO_CODEC_WM8994 == 1)
    if(WM8994_Probe() != BSP_ERROR_NONE)
 800517c:	f000 ffe6 	bl	800614c <WM8994_Probe>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <BSP_AUDIO_OUT_Init+0xc0>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005186:	f06f 0304 	mvn.w	r3, #4
 800518a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
#endif

    if(ret == BSP_ERROR_NONE)
 800518c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800518e:	2b00      	cmp	r3, #0
 8005190:	f040 8085 	bne.w	800529e <BSP_AUDIO_OUT_Init+0x1d2>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	4619      	mov	r1, r3
 800519a:	4844      	ldr	r0, [pc, #272]	@ (80052ac <BSP_AUDIO_OUT_Init+0x1e0>)
 800519c:	f000 f95d 	bl	800545a <MX_SAI1_ClockConfig>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <BSP_AUDIO_OUT_Init+0xe2>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 80051a6:	f06f 0308 	mvn.w	r3, #8
 80051aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ac:	e077      	b.n	800529e <BSP_AUDIO_OUT_Init+0x1d2>
      }
      else
      {
        /* SAI data transfer preparation:
        Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80051ae:	4b3f      	ldr	r3, [pc, #252]	@ (80052ac <BSP_AUDIO_OUT_Init+0x1e0>)
 80051b0:	4a3f      	ldr	r2, [pc, #252]	@ (80052b0 <BSP_AUDIO_OUT_Init+0x1e4>)
 80051b2:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_out_sai);
 80051b4:	483d      	ldr	r0, [pc, #244]	@ (80052ac <BSP_AUDIO_OUT_Init+0x1e0>)
 80051b6:	f001 f823 	bl	8006200 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
        if(ret == BSP_ERROR_NONE)
 80051ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d16e      	bne.n	800529e <BSP_AUDIO_OUT_Init+0x1d2>
	{
          MX_SAI_Config_t mx_sai_config;

          /* Prepare haudio_out_sai handle */
          mx_sai_config.AudioFrequency    = AudioInit->SampleRate;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
          mx_sai_config.AudioMode         = SAI_MODEMASTER_TX;
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
          mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80051ca:	2301      	movs	r3, #1
 80051cc:	61fb      	str	r3, [r7, #28]
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d102      	bne.n	80051dc <BSP_AUDIO_OUT_Init+0x110>
 80051d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051da:	e000      	b.n	80051de <BSP_AUDIO_OUT_Init+0x112>
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d101      	bne.n	80051ec <BSP_AUDIO_OUT_Init+0x120>
 80051e8:	23e0      	movs	r3, #224	@ 0xe0
 80051ea:	e000      	b.n	80051ee <BSP_AUDIO_OUT_Init+0x122>
 80051ec:	2380      	movs	r3, #128	@ 0x80
 80051ee:	617b      	str	r3, [r7, #20]
          mx_sai_config.FrameLength       = 128;
 80051f0:	2380      	movs	r3, #128	@ 0x80
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
          mx_sai_config.ActiveFrameLength = 64;
 80051f4:	2340      	movs	r3, #64	@ 0x40
 80051f6:	633b      	str	r3, [r7, #48]	@ 0x30
          mx_sai_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 80051f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24
          mx_sai_config.Synchro           = SAI_ASYNCHRONOUS;
 80051fe:	2300      	movs	r3, #0
 8005200:	623b      	str	r3, [r7, #32]
          mx_sai_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8005202:	2300      	movs	r3, #0
 8005204:	62bb      	str	r3, [r7, #40]	@ 0x28
          mx_sai_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_02;
 8005206:	2305      	movs	r3, #5
 8005208:	637b      	str	r3, [r7, #52]	@ 0x34

          /* SAI peripheral initialization: this __weak function can be redefined by the application  */
          if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 800520a:	f107 030c 	add.w	r3, r7, #12
 800520e:	4619      	mov	r1, r3
 8005210:	4826      	ldr	r0, [pc, #152]	@ (80052ac <BSP_AUDIO_OUT_Init+0x1e0>)
 8005212:	f000 f899 	bl	8005348 <MX_SAI1_Block_A_Init>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <BSP_AUDIO_OUT_Init+0x158>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 800521c:	f06f 0303 	mvn.w	r3, #3
 8005220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005222:	e03c      	b.n	800529e <BSP_AUDIO_OUT_Init+0x1d2>
#endif
          else
          {
#if (USE_AUDIO_CODEC_WM8994 == 1)
            WM8994_Init_t codec_init;
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b20      	cmp	r3, #32
 800522a:	d101      	bne.n	8005230 <BSP_AUDIO_OUT_Init+0x164>
 800522c:	2303      	movs	r3, #3
 800522e:	e000      	b.n	8005232 <BSP_AUDIO_OUT_Init+0x166>
 8005230:	2300      	movs	r3, #0
 8005232:	647b      	str	r3, [r7, #68]	@ 0x44
            /* Fill codec_init structure */
            codec_init.Frequency    = AudioInit->SampleRate;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	643b      	str	r3, [r7, #64]	@ 0x40
            codec_init.InputDevice  = WM8994_IN_NONE;
 800523a:	2300      	movs	r3, #0
 800523c:	63bb      	str	r3, [r7, #56]	@ 0x38
            codec_init.OutputDevice = AudioInit->Device;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b64      	cmp	r3, #100	@ 0x64
 800524a:	d80a      	bhi.n	8005262 <BSP_AUDIO_OUT_Init+0x196>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	4613      	mov	r3, r2
 8005252:	019b      	lsls	r3, r3, #6
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	4a17      	ldr	r2, [pc, #92]	@ (80052b4 <BSP_AUDIO_OUT_Init+0x1e8>)
 8005258:	fba2 2303 	umull	r2, r3, r2, r3
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e000      	b.n	8005264 <BSP_AUDIO_OUT_Init+0x198>
 8005262:	233f      	movs	r3, #63	@ 0x3f
 8005264:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 8005266:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <BSP_AUDIO_OUT_Init+0x1ec>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <BSP_AUDIO_OUT_Init+0x1f0>)
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8005274:	4610      	mov	r0, r2
 8005276:	4798      	blx	r3
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <BSP_AUDIO_OUT_Init+0x1b8>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800527e:	f06f 0304 	mvn.w	r3, #4
 8005282:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
#endif
            if(ret == BSP_ERROR_NONE)
 8005284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <BSP_AUDIO_OUT_Init+0x1d2>
            {
              /* Update BSP AUDIO OUT state */
              Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 800528a:	4907      	ldr	r1, [pc, #28]	@ (80052a8 <BSP_AUDIO_OUT_Init+0x1dc>)
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	331c      	adds	r3, #28
 800529a:	2202      	movs	r2, #2
 800529c:	601a      	str	r2, [r3, #0]
	}
      }
    }
  }

  return ret;
 800529e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3750      	adds	r7, #80	@ 0x50
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	24005144 	.word	0x24005144
 80052ac:	24005014 	.word	0x24005014
 80052b0:	40015804 	.word	0x40015804
 80052b4:	51eb851f 	.word	0x51eb851f
 80052b8:	24004f68 	.word	0x24004f68
 80052bc:	24005010 	.word	0x24005010

080052c0 <BSP_AUDIO_OUT_DeInit>:
  * @brief  De-initializes the audio out peripheral.
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
int32_t BSP_AUDIO_OUT_DeInit(uint32_t Instance)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d903      	bls.n	80052da <BSP_AUDIO_OUT_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80052d2:	f06f 0301 	mvn.w	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e027      	b.n	800532a <BSP_AUDIO_OUT_DeInit+0x6a>
  }
  else
  {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
    SAI_MspDeInit(&haudio_out_sai);
 80052da:	4816      	ldr	r0, [pc, #88]	@ (8005334 <BSP_AUDIO_OUT_DeInit+0x74>)
 80052dc:	f001 fa2e 	bl	800673c <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */
    /* Initialize the haudio_out_sai Instance parameter */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80052e0:	4b14      	ldr	r3, [pc, #80]	@ (8005334 <BSP_AUDIO_OUT_DeInit+0x74>)
 80052e2:	4a15      	ldr	r2, [pc, #84]	@ (8005338 <BSP_AUDIO_OUT_DeInit+0x78>)
 80052e4:	601a      	str	r2, [r3, #0]
    /* Call the Media layer stop function */
    if(Audio_Drv->DeInit(Audio_CompObj) != 0)
 80052e6:	4b15      	ldr	r3, [pc, #84]	@ (800533c <BSP_AUDIO_OUT_DeInit+0x7c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	4a14      	ldr	r2, [pc, #80]	@ (8005340 <BSP_AUDIO_OUT_DeInit+0x80>)
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	4610      	mov	r0, r2
 80052f2:	4798      	blx	r3
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <BSP_AUDIO_OUT_DeInit+0x42>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80052fa:	f06f 0304 	mvn.w	r3, #4
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e013      	b.n	800532a <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 8005302:	480c      	ldr	r0, [pc, #48]	@ (8005334 <BSP_AUDIO_OUT_DeInit+0x74>)
 8005304:	f00d ff40 	bl	8013188 <HAL_SAI_DeInit>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <BSP_AUDIO_OUT_DeInit+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800530e:	f06f 0303 	mvn.w	r3, #3
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e009      	b.n	800532a <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else
    {
      /* Update BSP AUDIO OUT state */
      Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_RESET;
 8005316:	490b      	ldr	r1, [pc, #44]	@ (8005344 <BSP_AUDIO_OUT_DeInit+0x84>)
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	331c      	adds	r3, #28
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
    }
  }
  /* Return BSP status */
  return ret;
 800532a:	68fb      	ldr	r3, [r7, #12]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	24005014 	.word	0x24005014
 8005338:	40015804 	.word	0x40015804
 800533c:	24004f68 	.word	0x24004f68
 8005340:	24005010 	.word	0x24005010
 8005344:	24005144 	.word	0x24005144

08005348 <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005364:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_A */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	69da      	ldr	r2, [r3, #28]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv               = 0;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_DISABLE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]
  hsai->Init.PdmInit.Activation   = DISABLE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai->Init.PdmInit.ClockEnable  = 0;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.PdmInit.MicPairsNbr  = 0;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005406:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005414:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2204      	movs	r2, #4
 8005426:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f00d fbff 	bl	8012c34 <HAL_SAI_Init>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <MX_SAI1_Block_A_Init+0xf8>
  {
    ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_SAI_ENABLE(hsai);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800544e:	601a      	str	r2, [r3, #0]

  return ret;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b0b6      	sub	sp, #216	@ 0xd8
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800546a:	f107 0308 	add.w	r3, r7, #8
 800546e:	4618      	mov	r0, r3
 8005470:	f00b ff46 	bl	8011300 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <MX_SAI1_ClockConfig+0x38>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f245 6222 	movw	r2, #22050	@ 0x5622
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <MX_SAI1_ClockConfig+0x38>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800548e:	4293      	cmp	r3, r2
 8005490:	d105      	bne.n	800549e <MX_SAI1_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 8005492:	2326      	movs	r3, #38	@ 0x26
 8005494:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 8005496:	f240 13ad 	movw	r3, #429	@ 0x1ad
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e004      	b.n	80054a8 <MX_SAI1_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 800549e:	2307      	movs	r3, #7
 80054a0:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 80054a2:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 80054a6:	617b      	str	r3, [r7, #20]
  }
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80054a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80054b4:	2301      	movs	r3, #1
 80054b6:	667b      	str	r3, [r7, #100]	@ 0x64
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 80054b8:	2301      	movs	r3, #1
 80054ba:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 80054bc:	2301      	movs	r3, #1
 80054be:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 80054c0:	2319      	movs	r3, #25
 80054c2:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 80054c4:	f107 0308 	add.w	r3, r7, #8
 80054c8:	4618      	mov	r0, r3
 80054ca:	f00a fccf 	bl	800fe6c <HAL_RCCEx_PeriphCLKConfig>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <MX_SAI1_ClockConfig+0x80>
  {
    ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  return ret;
 80054da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80054de:	4618      	mov	r0, r3
 80054e0:	37d8      	adds	r7, #216	@ 0xd8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b0b6      	sub	sp, #216	@ 0xd8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80054f6:	f107 0308 	add.w	r3, r7, #8
 80054fa:	4618      	mov	r0, r3
 80054fc:	f00b ff00 	bl	8011300 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8005506:	4293      	cmp	r3, r2
 8005508:	d009      	beq.n	800551e <MX_SAI4_ClockConfig+0x38>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	f245 6222 	movw	r2, #22050	@ 0x5622
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <MX_SAI4_ClockConfig+0x38>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800551a:	4293      	cmp	r3, r2
 800551c:	d105      	bne.n	800552a <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 800551e:	2326      	movs	r3, #38	@ 0x26
 8005520:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 8005522:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e004      	b.n	8005534 <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 800552a:	2307      	movs	r3, #7
 800552c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 800552e:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8005532:	617b      	str	r3, [r7, #20]
  }
  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8005534:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8005540:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 8005548:	2301      	movs	r3, #1
 800554a:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 800554c:	2301      	movs	r3, #1
 800554e:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8005550:	2319      	movs	r3, #25
 8005552:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8005554:	f107 0308 	add.w	r3, r7, #8
 8005558:	4618      	mov	r0, r3
 800555a:	f00a fc87 	bl	800fe6c <HAL_RCCEx_PeriphCLKConfig>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <MX_SAI4_ClockConfig+0x84>
  {
    ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  return ret;
 800556a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800556e:	4618      	mov	r0, r3
 8005570:	37d8      	adds	r7, #216	@ 0xd8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <BSP_AUDIO_OUT_Play>:
  * @param  NbrOfBytes   Size of total samples in bytes
  *                      BitsPerSample: 16 or 32
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Play(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]

  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d80f      	bhi.n	80055ae <BSP_AUDIO_OUT_Play+0x36>
 800558e:	4933      	ldr	r1, [pc, #204]	@ (800565c <BSP_AUDIO_OUT_Play+0xe4>)
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	330c      	adds	r3, #12
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	08db      	lsrs	r3, r3, #3
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ac:	d303      	bcc.n	80055b6 <BSP_AUDIO_OUT_Play+0x3e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80055ae:	f06f 0301 	mvn.w	r3, #1
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e04d      	b.n	8005652 <BSP_AUDIO_OUT_Play+0xda>
  }
  else if((Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_STOP) || (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_RESET))
 80055b6:	4929      	ldr	r1, [pc, #164]	@ (800565c <BSP_AUDIO_OUT_Play+0xe4>)
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	331c      	adds	r3, #28
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d00a      	beq.n	80055e2 <BSP_AUDIO_OUT_Play+0x6a>
 80055cc:	4923      	ldr	r1, [pc, #140]	@ (800565c <BSP_AUDIO_OUT_Play+0xe4>)
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4613      	mov	r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	331c      	adds	r3, #28
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d134      	bne.n	800564c <BSP_AUDIO_OUT_Play+0xd4>
  {
    if(HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes /(Audio_Out_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 80055e2:	491e      	ldr	r1, [pc, #120]	@ (800565c <BSP_AUDIO_OUT_Play+0xe4>)
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4613      	mov	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	330c      	adds	r3, #12
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4817      	ldr	r0, [pc, #92]	@ (8005660 <BSP_AUDIO_OUT_Play+0xe8>)
 8005604:	f00d feb8 	bl	8013378 <HAL_SAI_Transmit_DMA>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <BSP_AUDIO_OUT_Play+0x9c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800560e:	f06f 0303 	mvn.w	r3, #3
 8005612:	617b      	str	r3, [r7, #20]
    }
    if(ret == BSP_ERROR_NONE)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d11b      	bne.n	8005652 <BSP_AUDIO_OUT_Play+0xda>
    {
      if(Audio_Drv->Play(Audio_CompObj) != BSP_ERROR_NONE)
 800561a:	4b12      	ldr	r3, [pc, #72]	@ (8005664 <BSP_AUDIO_OUT_Play+0xec>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a11      	ldr	r2, [pc, #68]	@ (8005668 <BSP_AUDIO_OUT_Play+0xf0>)
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	4610      	mov	r0, r2
 8005626:	4798      	blx	r3
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <BSP_AUDIO_OUT_Play+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800562e:	f06f 0304 	mvn.w	r3, #4
 8005632:	617b      	str	r3, [r7, #20]
    if(ret == BSP_ERROR_NONE)
 8005634:	e00d      	b.n	8005652 <BSP_AUDIO_OUT_Play+0xda>
      }
      else
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 8005636:	4909      	ldr	r1, [pc, #36]	@ (800565c <BSP_AUDIO_OUT_Play+0xe4>)
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4613      	mov	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	440b      	add	r3, r1
 8005644:	331c      	adds	r3, #28
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]
    if(ret == BSP_ERROR_NONE)
 800564a:	e002      	b.n	8005652 <BSP_AUDIO_OUT_Play+0xda>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_BUSY;
 800564c:	f06f 0302 	mvn.w	r3, #2
 8005650:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	24005144 	.word	0x24005144
 8005660:	24005014 	.word	0x24005014
 8005664:	24004f68 	.word	0x24004f68
 8005668:	24005010 	.word	0x24005010

0800566c <BSP_AUDIO_OUT_Stop>:
  * @brief  Stops audio playing and Power down the Audio Codec.
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Stop(uint32_t Instance)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d903      	bls.n	8005686 <BSP_AUDIO_OUT_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800567e:	f06f 0301 	mvn.w	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e033      	b.n	80056ee <BSP_AUDIO_OUT_Stop+0x82>
  }
  else if (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_PLAYING)
 8005686:	491c      	ldr	r1, [pc, #112]	@ (80056f8 <BSP_AUDIO_OUT_Stop+0x8c>)
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	331c      	adds	r3, #28
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d125      	bne.n	80056e8 <BSP_AUDIO_OUT_Stop+0x7c>
  {
    /* Call the Media layer stop function */
    if(Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) != BSP_ERROR_NONE)
 800569c:	4b17      	ldr	r3, [pc, #92]	@ (80056fc <BSP_AUDIO_OUT_Stop+0x90>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	4a17      	ldr	r2, [pc, #92]	@ (8005700 <BSP_AUDIO_OUT_Stop+0x94>)
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	2101      	movs	r1, #1
 80056a8:	4610      	mov	r0, r2
 80056aa:	4798      	blx	r3
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <BSP_AUDIO_OUT_Stop+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80056b2:	f06f 0304 	mvn.w	r3, #4
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	e019      	b.n	80056ee <BSP_AUDIO_OUT_Stop+0x82>
    }
    else
    {
      if(HAL_SAI_DMAStop(&haudio_out_sai)!= HAL_OK)
 80056ba:	4812      	ldr	r0, [pc, #72]	@ (8005704 <BSP_AUDIO_OUT_Stop+0x98>)
 80056bc:	f00d fdde 	bl	801327c <HAL_SAI_DMAStop>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <BSP_AUDIO_OUT_Stop+0x60>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80056c6:	f06f 0303 	mvn.w	r3, #3
 80056ca:	60fb      	str	r3, [r7, #12]
      }

      if( ret==BSP_ERROR_NONE)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10d      	bne.n	80056ee <BSP_AUDIO_OUT_Stop+0x82>
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 80056d2:	4909      	ldr	r1, [pc, #36]	@ (80056f8 <BSP_AUDIO_OUT_Stop+0x8c>)
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	331c      	adds	r3, #28
 80056e2:	2202      	movs	r2, #2
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e002      	b.n	80056ee <BSP_AUDIO_OUT_Stop+0x82>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_BUSY;
 80056e8:	f06f 0302 	mvn.w	r3, #2
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 80056ee:	68fb      	ldr	r3, [r7, #12]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	24005144 	.word	0x24005144
 80056fc:	24004f68 	.word	0x24004f68
 8005700:	24005010 	.word	0x24005010
 8005704:	24005014 	.word	0x24005014

08005708 <BSP_AUDIO_OUT_SetDevice>:
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI) or 1 (I2S)
  * @param  Device  The audio output device
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_SetDevice(uint32_t Instance, uint32_t Device)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]

  UNUSED(Device);

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d903      	bls.n	8005724 <BSP_AUDIO_OUT_SetDevice+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800571c:	f06f 0301 	mvn.w	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e00d      	b.n	8005740 <BSP_AUDIO_OUT_SetDevice+0x38>
  }
  /* Check audio out state */
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_STOP)
 8005724:	490a      	ldr	r1, [pc, #40]	@ (8005750 <BSP_AUDIO_OUT_SetDevice+0x48>)
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	331c      	adds	r3, #28
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d002      	beq.n	8005740 <BSP_AUDIO_OUT_SetDevice+0x38>
  {
    ret = BSP_ERROR_BUSY;
 800573a:	f06f 0302 	mvn.w	r3, #2
 800573e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do because there is only one device (AUDIO_OUT_DEVICE_HEADPHONE) */
  }

  /* Return BSP status */
  return ret;
 8005740:	68fb      	ldr	r3, [r7, #12]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	24005144 	.word	0x24005144

08005754 <BSP_AUDIO_OUT_IRQHandler>:
  /* Return BSP status */
  return ret;
}

void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d105      	bne.n	800576e <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8005762:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8005764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005768:	4618      	mov	r0, r3
 800576a:	f005 f8e7 	bl	800a93c <HAL_DMA_IRQHandler>
  }
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	24005014 	.word	0x24005014

0800577c <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h747i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 8005784:	2000      	movs	r0, #0
 8005786:	f7fe fc0f 	bl	8003fa8 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h747i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 800579a:	2000      	movs	r0, #0
 800579c:	f7fe fc1a 	bl	8003fd4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a06      	ldr	r2, [pc, #24]	@ (80057d0 <HAL_SAI_ErrorCallback+0x28>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d103      	bne.n	80057c2 <HAL_SAI_ErrorCallback+0x1a>
  {
  BSP_AUDIO_OUT_Error_CallBack(0);
 80057ba:	2000      	movs	r0, #0
 80057bc:	f7fe fc20 	bl	8004000 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
  BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 80057c0:	e002      	b.n	80057c8 <HAL_SAI_ErrorCallback+0x20>
  BSP_AUDIO_IN_Error_CallBack(0);
 80057c2:	2000      	movs	r0, #0
 80057c4:	f7fe fe20 	bl	8004408 <BSP_AUDIO_IN_Error_CallBack>
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40015804 	.word	0x40015804

080057d4 <BSP_AUDIO_IN_Init>:
  *       - 1 if SAI PDM is used
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 80057d4:	b590      	push	{r4, r7, lr}
 80057d6:	b093      	sub	sp, #76	@ 0x4c
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]


  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d902      	bls.n	80057ea <BSP_AUDIO_IN_Init+0x16>
  {
    return BSP_ERROR_WRONG_PARAM;
 80057e4:	f06f 0301 	mvn.w	r3, #1
 80057e8:	e175      	b.n	8005ad6 <BSP_AUDIO_IN_Init+0x302>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device          = AudioInit->Device;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6819      	ldr	r1, [r3, #0]
 80057ee:	489c      	ldr	r0, [pc, #624]	@ (8005a60 <BSP_AUDIO_IN_Init+0x28c>)
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4413      	add	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	4403      	add	r3, r0
 80057fc:	3304      	adds	r3, #4
 80057fe:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68d9      	ldr	r1, [r3, #12]
 8005804:	4896      	ldr	r0, [pc, #600]	@ (8005a60 <BSP_AUDIO_IN_Init+0x28c>)
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	4413      	add	r3, r2
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	4403      	add	r3, r0
 8005812:	3310      	adds	r3, #16
 8005814:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate      = AudioInit->SampleRate;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6859      	ldr	r1, [r3, #4]
 800581a:	4891      	ldr	r0, [pc, #580]	@ (8005a60 <BSP_AUDIO_IN_Init+0x28c>)
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	4413      	add	r3, r2
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	4403      	add	r3, r0
 8005828:	3308      	adds	r3, #8
 800582a:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	6899      	ldr	r1, [r3, #8]
 8005830:	488b      	ldr	r0, [pc, #556]	@ (8005a60 <BSP_AUDIO_IN_Init+0x28c>)
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4413      	add	r3, r2
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	4403      	add	r3, r0
 800583e:	330c      	adds	r3, #12
 8005840:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume          = AudioInit->Volume;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6919      	ldr	r1, [r3, #16]
 8005846:	4886      	ldr	r0, [pc, #536]	@ (8005a60 <BSP_AUDIO_IN_Init+0x28c>)
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4413      	add	r3, r2
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	4403      	add	r3, r0
 8005854:	3320      	adds	r3, #32
 8005856:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 8005858:	4981      	ldr	r1, [pc, #516]	@ (8005a60 <BSP_AUDIO_IN_Init+0x28c>)
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	4413      	add	r3, r2
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	440b      	add	r3, r1
 8005866:	3324      	adds	r3, #36	@ 0x24
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]

    if(Instance == 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f040 80b6 	bne.w	80059e0 <BSP_AUDIO_IN_Init+0x20c>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4619      	mov	r1, r3
 800587a:	487a      	ldr	r0, [pc, #488]	@ (8005a64 <BSP_AUDIO_IN_Init+0x290>)
 800587c:	f7ff fded 	bl	800545a <MX_SAI1_ClockConfig>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <BSP_AUDIO_IN_Init+0xb8>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8005886:	f06f 0308 	mvn.w	r3, #8
 800588a:	e124      	b.n	8005ad6 <BSP_AUDIO_IN_Init+0x302>
      }
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800588c:	4b75      	ldr	r3, [pc, #468]	@ (8005a64 <BSP_AUDIO_IN_Init+0x290>)
 800588e:	4a76      	ldr	r2, [pc, #472]	@ (8005a68 <BSP_AUDIO_IN_Init+0x294>)
 8005890:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai);
 8005892:	4874      	ldr	r0, [pc, #464]	@ (8005a64 <BSP_AUDIO_IN_Init+0x290>)
 8005894:	f000 fcb4 	bl	8006200 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config_t mx_config;

      mx_config.MonoStereoMode = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d102      	bne.n	80058a6 <BSP_AUDIO_IN_Init+0xd2>
 80058a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058a4:	e000      	b.n	80058a8 <BSP_AUDIO_IN_Init+0xd4>
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
      mx_config.FrameLength       = 64;
 80058aa:	2340      	movs	r3, #64	@ 0x40
 80058ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength = 32;
 80058ae:	2320      	movs	r3, #32
 80058b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.DataSize =(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?SAI_DATASIZE_32: SAI_DATASIZE_16;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d101      	bne.n	80058be <BSP_AUDIO_IN_Init+0xea>
 80058ba:	23e0      	movs	r3, #224	@ 0xe0
 80058bc:	e000      	b.n	80058c0 <BSP_AUDIO_IN_Init+0xec>
 80058be:	2380      	movs	r3, #128	@ 0x80
 80058c0:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength=(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?128: 64;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d101      	bne.n	80058ce <BSP_AUDIO_IN_Init+0xfa>
 80058ca:	2380      	movs	r3, #128	@ 0x80
 80058cc:	e000      	b.n	80058d0 <BSP_AUDIO_IN_Init+0xfc>
 80058ce:	2340      	movs	r3, #64	@ 0x40
 80058d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength=(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?64: 32;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d101      	bne.n	80058de <BSP_AUDIO_IN_Init+0x10a>
 80058da:	2340      	movs	r3, #64	@ 0x40
 80058dc:	e000      	b.n	80058e0 <BSP_AUDIO_IN_Init+0x10c>
 80058de:	2320      	movs	r3, #32
 80058e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_0123;
 80058e6:	230f      	movs	r3, #15
 80058e8:	633b      	str	r3, [r7, #48]	@ 0x30
      /* Prepare haudio_in_sai handle */
      haudio_in_sai.Instance        = SAI1_Block_B;
 80058ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005a64 <BSP_AUDIO_IN_Init+0x290>)
 80058ec:	4a5e      	ldr	r2, [pc, #376]	@ (8005a68 <BSP_AUDIO_IN_Init+0x294>)
 80058ee:	601a      	str	r2, [r3, #0]
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate;
 80058f0:	495b      	ldr	r1, [pc, #364]	@ (8005a60 <BSP_AUDIO_IN_Init+0x28c>)
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	4413      	add	r3, r2
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	440b      	add	r3, r1
 80058fe:	3308      	adds	r3, #8
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODESLAVE_RX;
 8005904:	2303      	movs	r3, #3
 8005906:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005908:	2301      	movs	r3, #1
 800590a:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_SYNCHRONOUS;
 800590c:	2301      	movs	r3, #1
 800590e:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8005910:	2300      	movs	r3, #0
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
      /* Disable SAI peripheral to allow access to SAI internal registers */

      if(MX_SAI1_Block_B_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 8005914:	f107 0308 	add.w	r3, r7, #8
 8005918:	4619      	mov	r1, r3
 800591a:	4852      	ldr	r0, [pc, #328]	@ (8005a64 <BSP_AUDIO_IN_Init+0x290>)
 800591c:	f000 f95c 	bl	8005bd8 <MX_SAI1_Block_B_Init>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <BSP_AUDIO_IN_Init+0x158>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8005926:	f06f 0303 	mvn.w	r3, #3
 800592a:	e0d4      	b.n	8005ad6 <BSP_AUDIO_IN_Init+0x302>
      }

      /* Prepare haudio_out_sai handle */
      haudio_out_sai.Instance       = SAI1_Block_A;
 800592c:	4b4f      	ldr	r3, [pc, #316]	@ (8005a6c <BSP_AUDIO_IN_Init+0x298>)
 800592e:	4a50      	ldr	r2, [pc, #320]	@ (8005a70 <BSP_AUDIO_IN_Init+0x29c>)
 8005930:	601a      	str	r2, [r3, #0]
      mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005936:	2300      	movs	r3, #0
 8005938:	61bb      	str	r3, [r7, #24]
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 800593a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800593e:	623b      	str	r3, [r7, #32]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8005940:	2300      	movs	r3, #0
 8005942:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8005944:	2300      	movs	r3, #0
 8005946:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8005948:	f107 0308 	add.w	r3, r7, #8
 800594c:	4619      	mov	r1, r3
 800594e:	4847      	ldr	r0, [pc, #284]	@ (8005a6c <BSP_AUDIO_IN_Init+0x298>)
 8005950:	f7ff fcfa 	bl	8005348 <MX_SAI1_Block_A_Init>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <BSP_AUDIO_IN_Init+0x18c>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 800595a:	f06f 0303 	mvn.w	r3, #3
 800595e:	e0ba      	b.n	8005ad6 <BSP_AUDIO_IN_Init+0x302>
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_AUDIO_CODEC_WM8994 == 1U)
      /* Initialize the codec internal registers */
      if(WM8994_Probe() == BSP_ERROR_NONE)
 8005960:	f000 fbf4 	bl	800614c <WM8994_Probe>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 80aa 	bne.w	8005ac0 <BSP_AUDIO_IN_Init+0x2ec>
      {
        WM8994_Init_t codec_init;

        /* Fill codec_init structure */
        codec_init.Frequency    = AudioInit->SampleRate;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        codec_init.OutputDevice = WM8994_OUT_NONE;
 8005972:	2300      	movs	r3, #0
 8005974:	63bb      	str	r3, [r7, #56]	@ 0x38
        if(AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <BSP_AUDIO_IN_Init+0x1b4>
        {
          codec_init.InputDevice = WM8994_IN_LINE1;
 800597e:	2303      	movs	r3, #3
 8005980:	637b      	str	r3, [r7, #52]	@ 0x34
          codec_init.OutputDevice = AUDIO_OUT_DEVICE_HEADPHONE;
 8005982:	2302      	movs	r3, #2
 8005984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005986:	e001      	b.n	800598c <BSP_AUDIO_IN_Init+0x1b8>
        }
        else /* (AudioInit->Device == AUDIO_IN_DEVICE_DIGITAL_MIC) */
        {
          codec_init.InputDevice = WM8994_IN_MIC2;
 8005988:	2302      	movs	r3, #2
 800598a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        codec_init.Resolution=(AudioInit->BitsPerSample==AUDIO_RESOLUTION_32B)? 3:0;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b20      	cmp	r3, #32
 8005992:	d101      	bne.n	8005998 <BSP_AUDIO_IN_Init+0x1c4>
 8005994:	2303      	movs	r3, #3
 8005996:	e000      	b.n	800599a <BSP_AUDIO_IN_Init+0x1c6>
 8005998:	2300      	movs	r3, #0
 800599a:	643b      	str	r3, [r7, #64]	@ 0x40
        /* Convert volume before sending to the codec */
        codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b63      	cmp	r3, #99	@ 0x63
 80059a2:	d80c      	bhi.n	80059be <BSP_AUDIO_IN_Init+0x1ea>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	4613      	mov	r3, r2
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	1a9b      	subs	r3, r3, r2
 80059b2:	4a30      	ldr	r2, [pc, #192]	@ (8005a74 <BSP_AUDIO_IN_Init+0x2a0>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	e000      	b.n	80059c0 <BSP_AUDIO_IN_Init+0x1ec>
 80059be:	23ef      	movs	r3, #239	@ 0xef
 80059c0:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Initialize the codec internal registers */
        if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 80059c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005a78 <BSP_AUDIO_IN_Init+0x2a4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a2c      	ldr	r2, [pc, #176]	@ (8005a7c <BSP_AUDIO_IN_Init+0x2a8>)
 80059ca:	6812      	ldr	r2, [r2, #0]
 80059cc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80059d0:	4610      	mov	r0, r2
 80059d2:	4798      	blx	r3
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d072      	beq.n	8005ac0 <BSP_AUDIO_IN_Init+0x2ec>
        {
          return BSP_ERROR_COMPONENT_FAILURE;
 80059da:	f06f 0304 	mvn.w	r3, #4
        return BSP_ERROR_CLOCK_FAILURE;
 80059de:	e07a      	b.n	8005ad6 <BSP_AUDIO_IN_Init+0x302>
        }
      }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
    }
    else if(Instance == 1U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d16c      	bne.n	8005ac0 <BSP_AUDIO_IN_Init+0x2ec>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4619      	mov	r1, r3
 80059ec:	481d      	ldr	r0, [pc, #116]	@ (8005a64 <BSP_AUDIO_IN_Init+0x290>)
 80059ee:	f7ff fd7a 	bl	80054e6 <MX_SAI4_ClockConfig>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <BSP_AUDIO_IN_Init+0x22a>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 80059f8:	f06f 0308 	mvn.w	r3, #8
 80059fc:	e06b      	b.n	8005ad6 <BSP_AUDIO_IN_Init+0x302>
      }
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 80059fe:	4b19      	ldr	r3, [pc, #100]	@ (8005a64 <BSP_AUDIO_IN_Init+0x290>)
 8005a00:	4a1f      	ldr	r2, [pc, #124]	@ (8005a80 <BSP_AUDIO_IN_Init+0x2ac>)
 8005a02:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai);
 8005a04:	4817      	ldr	r0, [pc, #92]	@ (8005a64 <BSP_AUDIO_IN_Init+0x290>)
 8005a06:	f000 fbfb 	bl	8006200 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config_t mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_16;
 8005a0e:	2380      	movs	r3, #128	@ 0x80
 8005a10:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 16;
 8005a12:	2310      	movs	r3, #16
 8005a14:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength = 1;
 8005a16:	2301      	movs	r3, #1
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	633b      	str	r3, [r7, #48]	@ 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*8;
 8005a22:	490f      	ldr	r1, [pc, #60]	@ (8005a60 <BSP_AUDIO_IN_Init+0x28c>)
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4613      	mov	r3, r2
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	4413      	add	r3, r2
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	440b      	add	r3, r1
 8005a30:	3308      	adds	r3, #8
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	627b      	str	r3, [r7, #36]	@ 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 8005a48:	f107 0308 	add.w	r3, r7, #8
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4805      	ldr	r0, [pc, #20]	@ (8005a64 <BSP_AUDIO_IN_Init+0x290>)
 8005a50:	f000 f93f 	bl	8005cd2 <MX_SAI4_Block_A_Init>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d014      	beq.n	8005a84 <BSP_AUDIO_IN_Init+0x2b0>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8005a5a:	f06f 0303 	mvn.w	r3, #3
 8005a5e:	e03a      	b.n	8005ad6 <BSP_AUDIO_IN_Init+0x302>
 8005a60:	2400518c 	.word	0x2400518c
 8005a64:	240050ac 	.word	0x240050ac
 8005a68:	40015824 	.word	0x40015824
 8005a6c:	24005014 	.word	0x24005014
 8005a70:	40015804 	.word	0x40015804
 8005a74:	51eb851f 	.word	0x51eb851f
 8005a78:	24004f68 	.word	0x24004f68
 8005a7c:	24005010 	.word	0x24005010
 8005a80:	58005404 	.word	0x58005404
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */

      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	6859      	ldr	r1, [r3, #4]
 8005a88:	4815      	ldr	r0, [pc, #84]	@ (8005ae0 <BSP_AUDIO_IN_Init+0x30c>)
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4413      	add	r3, r2
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	4403      	add	r3, r0
 8005a96:	3310      	adds	r3, #16
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	4c11      	ldr	r4, [pc, #68]	@ (8005ae0 <BSP_AUDIO_IN_Init+0x30c>)
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	4423      	add	r3, r4
 8005aa8:	3310      	adds	r3, #16
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4602      	mov	r2, r0
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f994 	bl	8005ddc <BSP_AUDIO_IN_PDMToPCM_Init>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <BSP_AUDIO_IN_Init+0x2ec>
      {
        return BSP_ERROR_NO_INIT;
 8005aba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005abe:	e00a      	b.n	8005ad6 <BSP_AUDIO_IN_Init+0x302>
    }
    else
    {}

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8005ac0:	4907      	ldr	r1, [pc, #28]	@ (8005ae0 <BSP_AUDIO_IN_Init+0x30c>)
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	4413      	add	r3, r2
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	440b      	add	r3, r1
 8005ace:	3324      	adds	r3, #36	@ 0x24
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	601a      	str	r2, [r3, #0]
    /* Return BSP status */
    return BSP_ERROR_NONE;
 8005ad4:	2300      	movs	r3, #0
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	374c      	adds	r7, #76	@ 0x4c
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd90      	pop	{r4, r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	2400518c 	.word	0x2400518c

08005ae4 <BSP_AUDIO_IN_DeInit>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used or 1 if PDM is used
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_DeInit(uint32_t Instance)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d903      	bls.n	8005afe <BSP_AUDIO_IN_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005af6:	f06f 0301 	mvn.w	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	e056      	b.n	8005bac <BSP_AUDIO_IN_DeInit+0xc8>
  }
  else
  {
    if(Instance == 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d12a      	bne.n	8005b5a <BSP_AUDIO_IN_DeInit+0x76>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 8005b04:	482c      	ldr	r0, [pc, #176]	@ (8005bb8 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005b06:	f000 fe19 	bl	800673c <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb8 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bbc <BSP_AUDIO_IN_DeInit+0xd8>)
 8005b0e:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005b10:	4b2b      	ldr	r3, [pc, #172]	@ (8005bc0 <BSP_AUDIO_IN_DeInit+0xdc>)
 8005b12:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc4 <BSP_AUDIO_IN_DeInit+0xe0>)
 8005b14:	601a      	str	r2, [r3, #0]

      if(Audio_Drv->DeInit(Audio_CompObj) != BSP_ERROR_NONE)
 8005b16:	4b2c      	ldr	r3, [pc, #176]	@ (8005bc8 <BSP_AUDIO_IN_DeInit+0xe4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bcc <BSP_AUDIO_IN_DeInit+0xe8>)
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <BSP_AUDIO_IN_DeInit+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b2a:	f06f 0304 	mvn.w	r3, #4
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e032      	b.n	8005b98 <BSP_AUDIO_IN_DeInit+0xb4>
      }/* De-Initializes SAI handles */
      else if(HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 8005b32:	4821      	ldr	r0, [pc, #132]	@ (8005bb8 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005b34:	f00d fb28 	bl	8013188 <HAL_SAI_DeInit>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <BSP_AUDIO_IN_DeInit+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005b3e:	f06f 0303 	mvn.w	r3, #3
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e028      	b.n	8005b98 <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 8005b46:	481e      	ldr	r0, [pc, #120]	@ (8005bc0 <BSP_AUDIO_IN_DeInit+0xdc>)
 8005b48:	f00d fb1e 	bl	8013188 <HAL_SAI_DeInit>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d022      	beq.n	8005b98 <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005b52:	f06f 0303 	mvn.w	r3, #3
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e01e      	b.n	8005b98 <BSP_AUDIO_IN_DeInit+0xb4>
        }
      }
    }
    else if (Instance == 1U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d11b      	bne.n	8005b98 <BSP_AUDIO_IN_DeInit+0xb4>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 8005b60:	4815      	ldr	r0, [pc, #84]	@ (8005bb8 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005b62:	f000 fdeb 	bl	800673c <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 8005b66:	4b14      	ldr	r3, [pc, #80]	@ (8005bb8 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005b68:	4a19      	ldr	r2, [pc, #100]	@ (8005bd0 <BSP_AUDIO_IN_DeInit+0xec>)
 8005b6a:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005b6c:	4b14      	ldr	r3, [pc, #80]	@ (8005bc0 <BSP_AUDIO_IN_DeInit+0xdc>)
 8005b6e:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <BSP_AUDIO_IN_DeInit+0xe0>)
 8005b70:	601a      	str	r2, [r3, #0]

      if(HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 8005b72:	4811      	ldr	r0, [pc, #68]	@ (8005bb8 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005b74:	f00d fb08 	bl	8013188 <HAL_SAI_DeInit>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <BSP_AUDIO_IN_DeInit+0xa2>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005b7e:	f06f 0303 	mvn.w	r3, #3
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e008      	b.n	8005b98 <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 8005b86:	480e      	ldr	r0, [pc, #56]	@ (8005bc0 <BSP_AUDIO_IN_DeInit+0xdc>)
 8005b88:	f00d fafe 	bl	8013188 <HAL_SAI_DeInit>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005b92:	f06f 0303 	mvn.w	r3, #3
 8005b96:	60fb      	str	r3, [r7, #12]
      }
    }
    else
    {}
    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RESET;
 8005b98:	490e      	ldr	r1, [pc, #56]	@ (8005bd4 <BSP_AUDIO_IN_DeInit+0xf0>)
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3324      	adds	r3, #36	@ 0x24
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
  }


  /* Return BSP status */
  return ret;
 8005bac:	68fb      	ldr	r3, [r7, #12]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	240050ac 	.word	0x240050ac
 8005bbc:	40015824 	.word	0x40015824
 8005bc0:	24005014 	.word	0x24005014
 8005bc4:	40015804 	.word	0x40015804
 8005bc8:	24004f68 	.word	0x24004f68
 8005bcc:	24005010 	.word	0x24005010
 8005bd0:	58005404 	.word	0x58005404
 8005bd4:	2400518c 	.word	0x2400518c

08005bd8 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	695a      	ldr	r2, [r3, #20]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	69da      	ldr	r2, [r3, #28]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2210      	movs	r2, #16
 8005c58:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 0;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.PdmInit.Activation     = DISABLE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005c8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f00c ffc3 	bl	8012c34 <HAL_SAI_Init>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <MX_SAI1_Block_B_Init+0xe0>
  {
    ret = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005cc6:	601a      	str	r2, [r3, #0]

  return ret;
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005cee:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005d0e:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2210      	movs	r2, #16
 8005d56:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 0;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK1_ENABLE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d72:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d90:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 1;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f00c ff3e 	bl	8012c34 <HAL_SAI_Init>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005dd0:	601a      	str	r2, [r3, #0]

  return ret;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d002      	beq.n	8005dfa <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8005df4:	f06f 0301 	mvn.w	r3, #1
 8005df8:	e085      	b.n	8005f06 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005dfa:	4b45      	ldr	r3, [pc, #276]	@ (8005f10 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8005dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e00:	4a43      	ldr	r2, [pc, #268]	@ (8005f10 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8005e02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e0a:	4b41      	ldr	r3, [pc, #260]	@ (8005f10 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8005e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e06e      	b.n	8005efc <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8005e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8005f14 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	214c      	movs	r1, #76	@ 0x4c
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	4413      	add	r3, r2
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8005e2e:	4a39      	ldr	r2, [pc, #228]	@ (8005f14 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	214c      	movs	r1, #76	@ 0x4c
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	3302      	adds	r3, #2
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8005e40:	4a34      	ldr	r2, [pc, #208]	@ (8005f14 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	214c      	movs	r1, #76	@ 0x4c
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4a32      	ldr	r2, [pc, #200]	@ (8005f18 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 8005e50:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	b298      	uxth	r0, r3
 8005e56:	4a2f      	ldr	r2, [pc, #188]	@ (8005f14 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	214c      	movs	r1, #76	@ 0x4c
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	4413      	add	r3, r2
 8005e62:	330a      	adds	r3, #10
 8005e64:	4602      	mov	r2, r0
 8005e66:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	b298      	uxth	r0, r3
 8005e6c:	4a29      	ldr	r2, [pc, #164]	@ (8005f14 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	214c      	movs	r1, #76	@ 0x4c
 8005e72:	fb01 f303 	mul.w	r3, r1, r3
 8005e76:	4413      	add	r3, r2
 8005e78:	3308      	adds	r3, #8
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	224c      	movs	r2, #76	@ 0x4c
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	4a23      	ldr	r2, [pc, #140]	@ (8005f14 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8005e88:	4413      	add	r3, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f010 feea 	bl	8016c64 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4a22      	ldr	r2, [pc, #136]	@ (8005f1c <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8005e94:	fba2 2303 	umull	r2, r3, r2, r3
 8005e98:	099b      	lsrs	r3, r3, #6
 8005e9a:	b298      	uxth	r0, r3
 8005e9c:	4920      	ldr	r1, [pc, #128]	@ (8005f20 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	4413      	add	r3, r2
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	440b      	add	r3, r1
 8005eaa:	3302      	adds	r3, #2
 8005eac:	4602      	mov	r2, r0
 8005eae:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 8005eb0:	491b      	ldr	r1, [pc, #108]	@ (8005f20 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	4413      	add	r3, r2
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	440b      	add	r3, r1
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	2218      	movs	r2, #24
 8005ec2:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8005ec4:	4916      	ldr	r1, [pc, #88]	@ (8005f20 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	440b      	add	r3, r1
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	224c      	movs	r2, #76	@ 0x4c
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	4a0d      	ldr	r2, [pc, #52]	@ (8005f14 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8005ee0:	1898      	adds	r0, r3, r2
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4413      	add	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	4a0c      	ldr	r2, [pc, #48]	@ (8005f20 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8005eee:	4413      	add	r3, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f010 ff3d 	bl	8016d70 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d38c      	bcc.n	8005e1e <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	58024400 	.word	0x58024400
 8005f14:	24004f6c 	.word	0x24004f6c
 8005f18:	7e809d48 	.word	0x7e809d48
 8005f1c:	10624dd3 	.word	0x10624dd3
 8005f20:	24005004 	.word	0x24005004

08005f24 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf    Pointer to PDM buffer data
  * @param  PCMBuf    Pointer to PCM buffer data
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM(uint32_t Instance, uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d002      	beq.n	8005f40 <BSP_AUDIO_IN_PDMToPCM+0x1c>
  {
    return BSP_ERROR_WRONG_PARAM;
 8005f3a:	f06f 0301 	mvn.w	r3, #1
 8005f3e:	e022      	b.n	8005f86 <BSP_AUDIO_IN_PDMToPCM+0x62>
  }
  else
  {
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e012      	b.n	8005f6c <BSP_AUDIO_IN_PDMToPCM+0x48>
    {
      PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	18d0      	adds	r0, r2, r3
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	18d1      	adds	r1, r2, r3
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	224c      	movs	r2, #76	@ 0x4c
 8005f58:	fb02 f303 	mul.w	r3, r2, r3
 8005f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005f90 <BSP_AUDIO_IN_PDMToPCM+0x6c>)
 8005f5e:	4413      	add	r3, r2
 8005f60:	461a      	mov	r2, r3
 8005f62:	f010 fff3 	bl	8016f4c <PDM_Filter>
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	4909      	ldr	r1, [pc, #36]	@ (8005f94 <BSP_AUDIO_IN_PDMToPCM+0x70>)
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4613      	mov	r3, r2
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	4413      	add	r3, r2
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	440b      	add	r3, r1
 8005f7a:	3310      	adds	r3, #16
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d3e0      	bcc.n	8005f46 <BSP_AUDIO_IN_PDMToPCM+0x22>
    }
  }

  return BSP_ERROR_NONE;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	24004f6c 	.word	0x24004f6c
 8005f94:	2400518c 	.word	0x2400518c

08005f98 <BSP_AUDIO_IN_Stop>:
  * @brief  Stop audio recording.
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Stop(uint32_t Instance)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d903      	bls.n	8005fb2 <BSP_AUDIO_IN_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005faa:	f06f 0301 	mvn.w	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e01c      	b.n	8005fec <BSP_AUDIO_IN_Stop+0x54>
  }
  else
  {

      if(Instance == 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10d      	bne.n	8005fd4 <BSP_AUDIO_IN_Stop+0x3c>
      {
        /* Call the Media layer stop function */
        if(Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) != BSP_ERROR_NONE)
 8005fb8:	4b14      	ldr	r3, [pc, #80]	@ (800600c <BSP_AUDIO_IN_Stop+0x74>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	4a14      	ldr	r2, [pc, #80]	@ (8006010 <BSP_AUDIO_IN_Stop+0x78>)
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4798      	blx	r3
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <BSP_AUDIO_IN_Stop+0x3c>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fce:	f06f 0304 	mvn.w	r3, #4
 8005fd2:	60fb      	str	r3, [r7, #12]
        }
      }

      if(ret == BSP_ERROR_NONE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d108      	bne.n	8005fec <BSP_AUDIO_IN_Stop+0x54>
      {
        if(HAL_SAI_DMAStop(&haudio_in_sai) != HAL_OK)
 8005fda:	480e      	ldr	r0, [pc, #56]	@ (8006014 <BSP_AUDIO_IN_Stop+0x7c>)
 8005fdc:	f00d f94e 	bl	801327c <HAL_SAI_DMAStop>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <BSP_AUDIO_IN_Stop+0x54>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005fe6:	f06f 0303 	mvn.w	r3, #3
 8005fea:	60fb      	str	r3, [r7, #12]
      }
    }


    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8005fec:	490a      	ldr	r1, [pc, #40]	@ (8006018 <BSP_AUDIO_IN_Stop+0x80>)
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	4413      	add	r3, r2
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3324      	adds	r3, #36	@ 0x24
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	601a      	str	r2, [r3, #0]

  /* Return BSP status */
  return ret;
 8006000:	68fb      	ldr	r3, [r7, #12]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	24004f68 	.word	0x24004f68
 8006010:	24005010 	.word	0x24005010
 8006014:	240050ac 	.word	0x240050ac
 8006018:	2400518c 	.word	0x2400518c

0800601c <BSP_AUDIO_IN_RecordPDM>:
  * @param  pBuf     Main buffer pointer for the recorded data storing
  * @param  NbrOfBytes  Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d003      	beq.n	800603a <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006032:	f06f 0301 	mvn.w	r3, #1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e018      	b.n	800606c <BSP_AUDIO_IN_RecordPDM+0x50>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 800603a:	490f      	ldr	r1, [pc, #60]	@ (8006078 <BSP_AUDIO_IN_RecordPDM+0x5c>)
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4613      	mov	r3, r2
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	4413      	add	r3, r2
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	440b      	add	r3, r1
 8006048:	330c      	adds	r3, #12
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	08db      	lsrs	r3, r3, #3
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	4808      	ldr	r0, [pc, #32]	@ (800607c <BSP_AUDIO_IN_RecordPDM+0x60>)
 800605c:	f00d fa42 	bl	80134e4 <HAL_SAI_Receive_DMA>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <BSP_AUDIO_IN_RecordPDM+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006066:	f06f 0303 	mvn.w	r3, #3
 800606a:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 800606c:	697b      	ldr	r3, [r7, #20]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	2400518c 	.word	0x2400518c
 800607c:	240050ac 	.word	0x240050ac

08006080 <BSP_AUDIO_IN_GetState>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used
  * @param  State     Audio Out state
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_GetState(uint32_t Instance, uint32_t *State)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d903      	bls.n	800609c <BSP_AUDIO_IN_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006094:	f06f 0301 	mvn.w	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	e00a      	b.n	80060b2 <BSP_AUDIO_IN_GetState+0x32>
  }
  else
  {
    /* Input State to be returned */
    *State = Audio_In_Ctx[Instance].State;
 800609c:	4908      	ldr	r1, [pc, #32]	@ (80060c0 <BSP_AUDIO_IN_GetState+0x40>)
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4413      	add	r3, r2
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	440b      	add	r3, r1
 80060aa:	3324      	adds	r3, #36	@ 0x24
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	601a      	str	r2, [r3, #0]
  }
  return ret;
 80060b2:	68fb      	ldr	r3, [r7, #12]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	2400518c 	.word	0x2400518c

080060c4 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_ANALOG_MIC
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d002      	beq.n	80060da <BSP_AUDIO_IN_IRQHandler+0x16>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d105      	bne.n	80060e6 <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80060da:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 80060dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060e0:	4618      	mov	r0, r3
 80060e2:	f004 fc2b 	bl	800a93c <HAL_DMA_IRQHandler>
  }
}
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	240050ac 	.word	0x240050ac

080060f4 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the first half */
  if(hsai->Instance == AUDIO_IN_SAIx)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a06      	ldr	r2, [pc, #24]	@ (800611c <HAL_SAI_RxHalfCpltCallback+0x28>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d103      	bne.n	800610e <HAL_SAI_RxHalfCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8006106:	2000      	movs	r0, #0
 8006108:	f7fe f8fc 	bl	8004304 <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }
}
 800610c:	e002      	b.n	8006114 <HAL_SAI_RxHalfCpltCallback+0x20>
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 800610e:	2001      	movs	r0, #1
 8006110:	f7fe f8f8 	bl	8004304 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40015824 	.word	0x40015824

08006120 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the second half */
  if(hsai->Instance == AUDIO_IN_SAIx)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a06      	ldr	r2, [pc, #24]	@ (8006148 <HAL_SAI_RxCpltCallback+0x28>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d103      	bne.n	800613a <HAL_SAI_RxCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8006132:	2000      	movs	r0, #0
 8006134:	f7fe f864 	bl	8004200 <BSP_AUDIO_IN_TransferComplete_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 8006138:	e002      	b.n	8006140 <HAL_SAI_RxCpltCallback+0x20>
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 800613a:	2001      	movs	r0, #1
 800613c:	f7fe f860 	bl	8004200 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40015824 	.word	0x40015824

0800614c <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006152:	2300      	movs	r3, #0
 8006154:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t              IOCtx;
  static WM8994_Object_t   WM8994Obj;
  uint32_t id;

  /* Configure the audio driver */
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 8006156:	2334      	movs	r3, #52	@ 0x34
 8006158:	81bb      	strh	r3, [r7, #12]
  IOCtx.Init        = BSP_I2C4_Init;
 800615a:	4b20      	ldr	r3, [pc, #128]	@ (80061dc <WM8994_Probe+0x90>)
 800615c:	607b      	str	r3, [r7, #4]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800615e:	4b20      	ldr	r3, [pc, #128]	@ (80061e0 <WM8994_Probe+0x94>)
 8006160:	60bb      	str	r3, [r7, #8]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8006162:	4b20      	ldr	r3, [pc, #128]	@ (80061e4 <WM8994_Probe+0x98>)
 8006164:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8006166:	4b20      	ldr	r3, [pc, #128]	@ (80061e8 <WM8994_Probe+0x9c>)
 8006168:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick     = BSP_GetTick;
 800616a:	4b20      	ldr	r3, [pc, #128]	@ (80061ec <WM8994_Probe+0xa0>)
 800616c:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	4619      	mov	r1, r3
 8006172:	481f      	ldr	r0, [pc, #124]	@ (80061f0 <WM8994_Probe+0xa4>)
 8006174:	f7fd fcde 	bl	8003b34 <WM8994_RegisterBusIO>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800617e:	f06f 0307 	mvn.w	r3, #7
 8006182:	61fb      	str	r3, [r7, #28]
 8006184:	e024      	b.n	80061d0 <WM8994_Probe+0x84>
  }
  else
  {
    /* Reset the codec */
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 8006186:	481a      	ldr	r0, [pc, #104]	@ (80061f0 <WM8994_Probe+0xa4>)
 8006188:	f7fd fcbc 	bl	8003b04 <WM8994_Reset>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <WM8994_Probe+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006192:	f06f 0304 	mvn.w	r3, #4
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	e01a      	b.n	80061d0 <WM8994_Probe+0x84>
    }
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 800619a:	463b      	mov	r3, r7
 800619c:	4619      	mov	r1, r3
 800619e:	4814      	ldr	r0, [pc, #80]	@ (80061f0 <WM8994_Probe+0xa4>)
 80061a0:	f7fc feab 	bl	8002efa <WM8994_ReadID>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <WM8994_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80061aa:	f06f 0304 	mvn.w	r3, #4
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	e00e      	b.n	80061d0 <WM8994_Probe+0x84>
    }
    else if(id != WM8994_ID)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	f648 1294 	movw	r2, #35220	@ 0x8994
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <WM8994_Probe+0x78>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80061bc:	f06f 0306 	mvn.w	r3, #6
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	e005      	b.n	80061d0 <WM8994_Probe+0x84>
    }
    else
    {
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 80061c4:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <WM8994_Probe+0xa8>)
 80061c6:	4a0c      	ldr	r2, [pc, #48]	@ (80061f8 <WM8994_Probe+0xac>)
 80061c8:	601a      	str	r2, [r3, #0]
      Audio_CompObj = &WM8994Obj;
 80061ca:	4b0c      	ldr	r3, [pc, #48]	@ (80061fc <WM8994_Probe+0xb0>)
 80061cc:	4a08      	ldr	r2, [pc, #32]	@ (80061f0 <WM8994_Probe+0xa4>)
 80061ce:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 80061d0:	69fb      	ldr	r3, [r7, #28]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3720      	adds	r7, #32
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	08006821 	.word	0x08006821
 80061e0:	08006895 	.word	0x08006895
 80061e4:	080069bd 	.word	0x080069bd
 80061e8:	08006961 	.word	0x08006961
 80061ec:	08006a19 	.word	0x08006a19
 80061f0:	240051ec 	.word	0x240051ec
 80061f4:	24004f68 	.word	0x24004f68
 80061f8:	240004a0 	.word	0x240004a0
 80061fc:	24005010 	.word	0x24005010

08006200 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b098      	sub	sp, #96	@ 0x60
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 8006208:	4b75      	ldr	r3, [pc, #468]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800620a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800620e:	4a74      	ldr	r2, [pc, #464]	@ (80063e0 <SAI_MspInit+0x1e0>)
 8006210:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006214:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006218:	4b71      	ldr	r3, [pc, #452]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800621a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800621e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_SCK_ENABLE();
 8006226:	4b6e      	ldr	r3, [pc, #440]	@ (80063e0 <SAI_MspInit+0x1e0>)
 8006228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800622c:	4a6c      	ldr	r2, [pc, #432]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800622e:	f043 0310 	orr.w	r3, r3, #16
 8006232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006236:	4b6a      	ldr	r3, [pc, #424]	@ (80063e0 <SAI_MspInit+0x1e0>)
 8006238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	647b      	str	r3, [r7, #68]	@ 0x44
 8006242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    AUDIO_OUT_SAIx_SD_ENABLE();
 8006244:	4b66      	ldr	r3, [pc, #408]	@ (80063e0 <SAI_MspInit+0x1e0>)
 8006246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800624a:	4a65      	ldr	r2, [pc, #404]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800624c:	f043 0310 	orr.w	r3, r3, #16
 8006250:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006254:	4b62      	ldr	r3, [pc, #392]	@ (80063e0 <SAI_MspInit+0x1e0>)
 8006256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    AUDIO_OUT_SAIx_FS_ENABLE();
 8006262:	4b5f      	ldr	r3, [pc, #380]	@ (80063e0 <SAI_MspInit+0x1e0>)
 8006264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006268:	4a5d      	ldr	r2, [pc, #372]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800626a:	f043 0310 	orr.w	r3, r3, #16
 800626e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006272:	4b5b      	ldr	r3, [pc, #364]	@ (80063e0 <SAI_MspInit+0x1e0>)
 8006274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800627e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8006280:	2310      	movs	r3, #16
 8006282:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006284:	2302      	movs	r3, #2
 8006286:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006288:	2300      	movs	r3, #0
 800628a:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800628c:	2303      	movs	r3, #3
 800628e:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 8006290:	2306      	movs	r3, #6
 8006292:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8006294:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006298:	4619      	mov	r1, r3
 800629a:	4852      	ldr	r0, [pc, #328]	@ (80063e4 <SAI_MspInit+0x1e4>)
 800629c:	f006 ff66 	bl	800d16c <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80062a0:	2320      	movs	r3, #32
 80062a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80062a4:	2306      	movs	r3, #6
 80062a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 80062a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80062ac:	4619      	mov	r1, r3
 80062ae:	484d      	ldr	r0, [pc, #308]	@ (80063e4 <SAI_MspInit+0x1e4>)
 80062b0:	f006 ff5c 	bl	800d16c <HAL_GPIO_Init>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80062b4:	2340      	movs	r3, #64	@ 0x40
 80062b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 80062b8:	2306      	movs	r3, #6
 80062ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80062bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80062c0:	4619      	mov	r1, r3
 80062c2:	4848      	ldr	r0, [pc, #288]	@ (80063e4 <SAI_MspInit+0x1e4>)
 80062c4:	f006 ff52 	bl	800d16c <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a46      	ldr	r2, [pc, #280]	@ (80063e8 <SAI_MspInit+0x1e8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d01e      	beq.n	8006310 <SAI_MspInit+0x110>
    {
      if(haudio_in_sai.State != HAL_SAI_STATE_READY)
 80062d2:	4b46      	ldr	r3, [pc, #280]	@ (80063ec <SAI_MspInit+0x1ec>)
 80062d4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d018      	beq.n	8006310 <SAI_MspInit+0x110>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 80062de:	4b40      	ldr	r3, [pc, #256]	@ (80063e0 <SAI_MspInit+0x1e0>)
 80062e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062e4:	4a3e      	ldr	r2, [pc, #248]	@ (80063e0 <SAI_MspInit+0x1e0>)
 80062e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80062ee:	4b3c      	ldr	r3, [pc, #240]	@ (80063e0 <SAI_MspInit+0x1e0>)
 80062f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80062fc:	2380      	movs	r3, #128	@ 0x80
 80062fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 8006300:	2306      	movs	r3, #6
 8006302:	65fb      	str	r3, [r7, #92]	@ 0x5c
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8006304:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006308:	4619      	mov	r1, r3
 800630a:	4839      	ldr	r0, [pc, #228]	@ (80063f0 <SAI_MspInit+0x1f0>)
 800630c:	f006 ff2e 	bl	800d16c <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a37      	ldr	r2, [pc, #220]	@ (80063f4 <SAI_MspInit+0x1f4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	f040 80b3 	bne.w	8006482 <SAI_MspInit+0x282>
  {

	    /* Enable SAI clock */
    __HAL_RCC_SAI1_CLK_ENABLE();
 800631c:	4b30      	ldr	r3, [pc, #192]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800631e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006322:	4a2f      	ldr	r2, [pc, #188]	@ (80063e0 <SAI_MspInit+0x1e0>)
 8006324:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006328:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800632c:	4b2c      	ldr	r3, [pc, #176]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800632e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006336:	637b      	str	r3, [r7, #52]	@ 0x34
 8006338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

  /* CODEC_SAI pins configuration: FS, SCK and SD pins */
  /* Enable FS, SCK and SD clocks */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 800633a:	4b29      	ldr	r3, [pc, #164]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800633c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006340:	4a27      	ldr	r2, [pc, #156]	@ (80063e0 <SAI_MspInit+0x1e0>)
 8006342:	f043 0310 	orr.w	r3, r3, #16
 8006346:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800634a:	4b25      	ldr	r3, [pc, #148]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800634c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	633b      	str	r3, [r7, #48]	@ 0x30
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  /* Enable FS, SCK and SD pins */
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8006358:	2370      	movs	r3, #112	@ 0x70
 800635a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800635c:	2302      	movs	r3, #2
 800635e:	653b      	str	r3, [r7, #80]	@ 0x50
  gpio_init_structure.Pull = GPIO_NOPULL;
 8006360:	2300      	movs	r3, #0
 8006362:	657b      	str	r3, [r7, #84]	@ 0x54
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006364:	2303      	movs	r3, #3
 8006366:	65bb      	str	r3, [r7, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF6_SAI1;
 8006368:	2306      	movs	r3, #6
 800636a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800636c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006370:	4619      	mov	r1, r3
 8006372:	481c      	ldr	r0, [pc, #112]	@ (80063e4 <SAI_MspInit+0x1e4>)
 8006374:	f006 fefa 	bl	800d16c <HAL_GPIO_Init>

  /* Enable MCLK clock */
   __HAL_RCC_GPIOG_CLK_ENABLE();
 8006378:	4b19      	ldr	r3, [pc, #100]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800637a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800637e:	4a18      	ldr	r2, [pc, #96]	@ (80063e0 <SAI_MspInit+0x1e0>)
 8006380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006384:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006388:	4b15      	ldr	r3, [pc, #84]	@ (80063e0 <SAI_MspInit+0x1e0>)
 800638a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800638e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Enable MCLK pin */
  gpio_init_structure.Pin = GPIO_PIN_7;
 8006396:	2380      	movs	r3, #128	@ 0x80
 8006398:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800639a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800639e:	4619      	mov	r1, r3
 80063a0:	4813      	ldr	r0, [pc, #76]	@ (80063f0 <SAI_MspInit+0x1f0>)
 80063a2:	f006 fee3 	bl	800d16c <HAL_GPIO_Init>


    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80063a6:	4b0e      	ldr	r3, [pc, #56]	@ (80063e0 <SAI_MspInit+0x1e0>)
 80063a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063ac:	4a0c      	ldr	r2, [pc, #48]	@ (80063e0 <SAI_MspInit+0x1e0>)
 80063ae:	f043 0302 	orr.w	r3, r3, #2
 80063b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80063b6:	4b0a      	ldr	r3, [pc, #40]	@ (80063e0 <SAI_MspInit+0x1e0>)
 80063b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Configure the hdma_saiTx handle parameters */
    if(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 80063c4:	4b0c      	ldr	r3, [pc, #48]	@ (80063f8 <SAI_MspInit+0x1f8>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d119      	bne.n	8006400 <SAI_MspInit+0x200>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80063cc:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <SAI_MspInit+0x1fc>)
 80063ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063d2:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80063d4:	4b09      	ldr	r3, [pc, #36]	@ (80063fc <SAI_MspInit+0x1fc>)
 80063d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80063da:	619a      	str	r2, [r3, #24]
 80063dc:	e018      	b.n	8006410 <SAI_MspInit+0x210>
 80063de:	bf00      	nop
 80063e0:	58024400 	.word	0x58024400
 80063e4:	58021000 	.word	0x58021000
 80063e8:	58005404 	.word	0x58005404
 80063ec:	240050ac 	.word	0x240050ac
 80063f0:	58021800 	.word	0x58021800
 80063f4:	40015804 	.word	0x40015804
 80063f8:	24005144 	.word	0x24005144
 80063fc:	24005214 	.word	0x24005214
    }
    else
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006400:	4baf      	ldr	r3, [pc, #700]	@ (80066c0 <SAI_MspInit+0x4c0>)
 8006402:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006406:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006408:	4bad      	ldr	r3, [pc, #692]	@ (80066c0 <SAI_MspInit+0x4c0>)
 800640a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800640e:	619a      	str	r2, [r3, #24]
    }

    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 8006410:	4bab      	ldr	r3, [pc, #684]	@ (80066c0 <SAI_MspInit+0x4c0>)
 8006412:	2257      	movs	r2, #87	@ 0x57
 8006414:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006416:	4baa      	ldr	r3, [pc, #680]	@ (80066c0 <SAI_MspInit+0x4c0>)
 8006418:	2200      	movs	r2, #0
 800641a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800641c:	4ba8      	ldr	r3, [pc, #672]	@ (80066c0 <SAI_MspInit+0x4c0>)
 800641e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006422:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8006424:	4ba6      	ldr	r3, [pc, #664]	@ (80066c0 <SAI_MspInit+0x4c0>)
 8006426:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800642a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800642c:	4ba4      	ldr	r3, [pc, #656]	@ (80066c0 <SAI_MspInit+0x4c0>)
 800642e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006432:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8006434:	4ba2      	ldr	r3, [pc, #648]	@ (80066c0 <SAI_MspInit+0x4c0>)
 8006436:	2204      	movs	r2, #4
 8006438:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800643a:	4ba1      	ldr	r3, [pc, #644]	@ (80066c0 <SAI_MspInit+0x4c0>)
 800643c:	2203      	movs	r2, #3
 800643e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006440:	4b9f      	ldr	r3, [pc, #636]	@ (80066c0 <SAI_MspInit+0x4c0>)
 8006442:	2240      	movs	r2, #64	@ 0x40
 8006444:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Instance                 = AUDIO_OUT_SAIx_DMAx_STREAM;
 8006446:	4b9e      	ldr	r3, [pc, #632]	@ (80066c0 <SAI_MspInit+0x4c0>)
 8006448:	4a9e      	ldr	r2, [pc, #632]	@ (80066c4 <SAI_MspInit+0x4c4>)
 800644a:	601a      	str	r2, [r3, #0]
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800644c:	4b9c      	ldr	r3, [pc, #624]	@ (80066c0 <SAI_MspInit+0x4c0>)
 800644e:	2200      	movs	r2, #0
 8006450:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8006452:	4b9b      	ldr	r3, [pc, #620]	@ (80066c0 <SAI_MspInit+0x4c0>)
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a99      	ldr	r2, [pc, #612]	@ (80066c0 <SAI_MspInit+0x4c0>)
 800645c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006460:	4a97      	ldr	r2, [pc, #604]	@ (80066c0 <SAI_MspInit+0x4c0>)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 8006466:	4896      	ldr	r0, [pc, #600]	@ (80066c0 <SAI_MspInit+0x4c0>)
 8006468:	f003 f8e4 	bl	8009634 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 800646c:	4894      	ldr	r0, [pc, #592]	@ (80066c0 <SAI_MspInit+0x4c0>)
 800646e:	f002 fd85 	bl	8008f7c <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 8006472:	2200      	movs	r2, #0
 8006474:	210e      	movs	r1, #14
 8006476:	2039      	movs	r0, #57	@ 0x39
 8006478:	f002 fb9c 	bl	8008bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800647c:	2039      	movs	r0, #57	@ 0x39
 800647e:	f002 fbb3 	bl	8008be8 <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a90      	ldr	r2, [pc, #576]	@ (80066c8 <SAI_MspInit+0x4c8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	f040 80b8 	bne.w	80065fe <SAI_MspInit+0x3fe>
  {
     /* Enable SAI clock */
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 800648e:	4b8f      	ldr	r3, [pc, #572]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006494:	4a8d      	ldr	r2, [pc, #564]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006496:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800649a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800649e:	4b8b      	ldr	r3, [pc, #556]	@ (80066cc <SAI_MspInit+0x4cc>)
 80064a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

     AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 80064ac:	4b87      	ldr	r3, [pc, #540]	@ (80066cc <SAI_MspInit+0x4cc>)
 80064ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064b2:	4a86      	ldr	r2, [pc, #536]	@ (80066cc <SAI_MspInit+0x4cc>)
 80064b4:	f043 0310 	orr.w	r3, r3, #16
 80064b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80064bc:	4b83      	ldr	r3, [pc, #524]	@ (80066cc <SAI_MspInit+0x4cc>)
 80064be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	623b      	str	r3, [r7, #32]
 80064c8:	6a3b      	ldr	r3, [r7, #32]
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 80064ca:	4b80      	ldr	r3, [pc, #512]	@ (80066cc <SAI_MspInit+0x4cc>)
 80064cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064d0:	4a7e      	ldr	r2, [pc, #504]	@ (80066cc <SAI_MspInit+0x4cc>)
 80064d2:	f043 0304 	orr.w	r3, r3, #4
 80064d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80064da:	4b7c      	ldr	r3, [pc, #496]	@ (80066cc <SAI_MspInit+0x4cc>)
 80064dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	69fb      	ldr	r3, [r7, #28]

     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 80064e8:	2304      	movs	r3, #4
 80064ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80064ec:	2302      	movs	r3, #2
 80064ee:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80064f4:	2302      	movs	r3, #2
 80064f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = GPIO_AF10_SAI4;
 80064f8:	230a      	movs	r3, #10
 80064fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 80064fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006500:	4619      	mov	r1, r3
 8006502:	4873      	ldr	r0, [pc, #460]	@ (80066d0 <SAI_MspInit+0x4d0>)
 8006504:	f006 fe32 	bl	800d16c <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 8006508:	2301      	movs	r3, #1
 800650a:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800650c:	2301      	movs	r3, #1
 800650e:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 8006510:	2302      	movs	r3, #2
 8006512:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 8006514:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006518:	4619      	mov	r1, r3
 800651a:	486e      	ldr	r0, [pc, #440]	@ (80066d4 <SAI_MspInit+0x4d4>)
 800651c:	f006 fe26 	bl	800d16c <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 8006520:	4b6a      	ldr	r3, [pc, #424]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006526:	4a69      	ldr	r2, [pc, #420]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006528:	f043 0310 	orr.w	r3, r3, #16
 800652c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006530:	4b66      	ldr	r3, [pc, #408]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	61bb      	str	r3, [r7, #24]
 800653c:	69bb      	ldr	r3, [r7, #24]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 800653e:	2330      	movs	r3, #48	@ 0x30
 8006540:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006542:	2302      	movs	r3, #2
 8006544:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006546:	2300      	movs	r3, #0
 8006548:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800654a:	2302      	movs	r3, #2
 800654c:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 800654e:	2308      	movs	r3, #8
 8006550:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8006552:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006556:	4619      	mov	r1, r3
 8006558:	485d      	ldr	r0, [pc, #372]	@ (80066d0 <SAI_MspInit+0x4d0>)
 800655a:	f006 fe07 	bl	800d16c <HAL_GPIO_Init>

    /* Enable the DMA clock */
      __HAL_RCC_BDMA_CLK_ENABLE();
 800655e:	4b5b      	ldr	r3, [pc, #364]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006564:	4a59      	ldr	r2, [pc, #356]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006566:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800656a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800656e:	4b57      	ldr	r3, [pc, #348]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	697b      	ldr	r3, [r7, #20]
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 800657c:	4b56      	ldr	r3, [pc, #344]	@ (80066d8 <SAI_MspInit+0x4d8>)
 800657e:	220f      	movs	r2, #15
 8006580:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006582:	4b55      	ldr	r3, [pc, #340]	@ (80066d8 <SAI_MspInit+0x4d8>)
 8006584:	2200      	movs	r2, #0
 8006586:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006588:	4b53      	ldr	r3, [pc, #332]	@ (80066d8 <SAI_MspInit+0x4d8>)
 800658a:	2200      	movs	r2, #0
 800658c:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800658e:	4b52      	ldr	r3, [pc, #328]	@ (80066d8 <SAI_MspInit+0x4d8>)
 8006590:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006594:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8006596:	4b50      	ldr	r3, [pc, #320]	@ (80066d8 <SAI_MspInit+0x4d8>)
 8006598:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800659c:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 800659e:	4b4e      	ldr	r3, [pc, #312]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80065a4:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80065a6:	4b4c      	ldr	r3, [pc, #304]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065ac:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80065ae:	4b4a      	ldr	r3, [pc, #296]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80065b4:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80065b6:	4b48      	ldr	r3, [pc, #288]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80065bc:	4b46      	ldr	r3, [pc, #280]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065be:	2203      	movs	r2, #3
 80065c0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80065c2:	4b45      	ldr	r3, [pc, #276]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80065c8:	4b43      	ldr	r3, [pc, #268]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 80065ce:	4b42      	ldr	r3, [pc, #264]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065d0:	4a42      	ldr	r2, [pc, #264]	@ (80066dc <SAI_MspInit+0x4dc>)
 80065d2:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a40      	ldr	r2, [pc, #256]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80065dc:	4a3e      	ldr	r2, [pc, #248]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80065e2:	483d      	ldr	r0, [pc, #244]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065e4:	f003 f826 	bl	8009634 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80065e8:	483b      	ldr	r0, [pc, #236]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80065ea:	f002 fcc7 	bl	8008f7c <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 80065ee:	2200      	movs	r2, #0
 80065f0:	210f      	movs	r1, #15
 80065f2:	2082      	movs	r0, #130	@ 0x82
 80065f4:	f002 fade 	bl	8008bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 80065f8:	2082      	movs	r0, #130	@ 0x82
 80065fa:	f002 faf5 	bl	8008be8 <HAL_NVIC_EnableIRQ>
  }
   /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a37      	ldr	r2, [pc, #220]	@ (80066e0 <SAI_MspInit+0x4e0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	f040 8091 	bne.w	800672c <SAI_MspInit+0x52c>
  {
        /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 800660a:	4b30      	ldr	r3, [pc, #192]	@ (80066cc <SAI_MspInit+0x4cc>)
 800660c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006610:	4a2e      	ldr	r2, [pc, #184]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006612:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006616:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800661a:	4b2c      	ldr	r3, [pc, #176]	@ (80066cc <SAI_MspInit+0x4cc>)
 800661c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	693b      	ldr	r3, [r7, #16]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8006628:	4b28      	ldr	r3, [pc, #160]	@ (80066cc <SAI_MspInit+0x4cc>)
 800662a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800662e:	4a27      	ldr	r2, [pc, #156]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006630:	f043 0310 	orr.w	r3, r3, #16
 8006634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006638:	4b24      	ldr	r3, [pc, #144]	@ (80066cc <SAI_MspInit+0x4cc>)
 800663a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8006646:	2308      	movs	r3, #8
 8006648:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800664a:	2302      	movs	r3, #2
 800664c:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 800664e:	2300      	movs	r3, #0
 8006650:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006652:	2302      	movs	r3, #2
 8006654:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8006656:	2306      	movs	r3, #6
 8006658:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800665a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800665e:	4619      	mov	r1, r3
 8006660:	481b      	ldr	r0, [pc, #108]	@ (80066d0 <SAI_MspInit+0x4d0>)
 8006662:	f006 fd83 	bl	800d16c <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8006666:	4b19      	ldr	r3, [pc, #100]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800666c:	4a17      	ldr	r2, [pc, #92]	@ (80066cc <SAI_MspInit+0x4cc>)
 800666e:	f043 0302 	orr.w	r3, r3, #2
 8006672:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006676:	4b15      	ldr	r3, [pc, #84]	@ (80066cc <SAI_MspInit+0x4cc>)
 8006678:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	68bb      	ldr	r3, [r7, #8]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 8006684:	4b14      	ldr	r3, [pc, #80]	@ (80066d8 <SAI_MspInit+0x4d8>)
 8006686:	2258      	movs	r2, #88	@ 0x58
 8006688:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800668a:	4b13      	ldr	r3, [pc, #76]	@ (80066d8 <SAI_MspInit+0x4d8>)
 800668c:	2200      	movs	r2, #0
 800668e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006690:	4b11      	ldr	r3, [pc, #68]	@ (80066d8 <SAI_MspInit+0x4d8>)
 8006692:	2200      	movs	r2, #0
 8006694:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006696:	4b10      	ldr	r3, [pc, #64]	@ (80066d8 <SAI_MspInit+0x4d8>)
 8006698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800669c:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800669e:	4b0e      	ldr	r3, [pc, #56]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80066a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066a4:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80066a6:	4b0c      	ldr	r3, [pc, #48]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80066a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80066ac:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80066ae:	4b0a      	ldr	r3, [pc, #40]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80066b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80066b4:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80066b6:	4b08      	ldr	r3, [pc, #32]	@ (80066d8 <SAI_MspInit+0x4d8>)
 80066b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80066bc:	621a      	str	r2, [r3, #32]
 80066be:	e011      	b.n	80066e4 <SAI_MspInit+0x4e4>
 80066c0:	24005214 	.word	0x24005214
 80066c4:	40020428 	.word	0x40020428
 80066c8:	58005404 	.word	0x58005404
 80066cc:	58024400 	.word	0x58024400
 80066d0:	58021000 	.word	0x58021000
 80066d4:	58020800 	.word	0x58020800
 80066d8:	2400528c 	.word	0x2400528c
 80066dc:	5802541c 	.word	0x5802541c
 80066e0:	40015824 	.word	0x40015824
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80066e4:	4b13      	ldr	r3, [pc, #76]	@ (8006734 <SAI_MspInit+0x534>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80066ea:	4b12      	ldr	r3, [pc, #72]	@ (8006734 <SAI_MspInit+0x534>)
 80066ec:	2203      	movs	r2, #3
 80066ee:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80066f0:	4b10      	ldr	r3, [pc, #64]	@ (8006734 <SAI_MspInit+0x534>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80066f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006734 <SAI_MspInit+0x534>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80066fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006734 <SAI_MspInit+0x534>)
 80066fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006738 <SAI_MspInit+0x538>)
 8006700:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a0b      	ldr	r2, [pc, #44]	@ (8006734 <SAI_MspInit+0x534>)
 8006706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800670a:	4a0a      	ldr	r2, [pc, #40]	@ (8006734 <SAI_MspInit+0x534>)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8006710:	4808      	ldr	r0, [pc, #32]	@ (8006734 <SAI_MspInit+0x534>)
 8006712:	f002 ff8f 	bl	8009634 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8006716:	4807      	ldr	r0, [pc, #28]	@ (8006734 <SAI_MspInit+0x534>)
 8006718:	f002 fc30 	bl	8008f7c <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800671c:	2200      	movs	r2, #0
 800671e:	210f      	movs	r1, #15
 8006720:	203c      	movs	r0, #60	@ 0x3c
 8006722:	f002 fa47 	bl	8008bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8006726:	203c      	movs	r0, #60	@ 0x3c
 8006728:	f002 fa5e 	bl	8008be8 <HAL_NVIC_EnableIRQ>

  }
}
 800672c:	bf00      	nop
 800672e:	3760      	adds	r7, #96	@ 0x60
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	2400528c 	.word	0x2400528c
 8006738:	40020470 	.word	0x40020470

0800673c <SAI_MspDeInit>:
  * @brief  Deinitializes SAI MSP.
  * @param  hsai  SAI handle
  * @retval HAL status
  */
static void SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a30      	ldr	r2, [pc, #192]	@ (800680c <SAI_MspDeInit+0xd0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d134      	bne.n	80067b8 <SAI_MspDeInit+0x7c>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800674e:	2039      	movs	r0, #57	@ 0x39
 8006750:	f002 fa58 	bl	8008c04 <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmatx);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800675a:	4618      	mov	r0, r3
 800675c:	f002 ff6a 	bl	8009634 <HAL_DMA_DeInit>

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800676e:	601a      	str	r2, [r3, #0]

    /* Deactivates CODEC_SAI pins FS, SCK, MCK and SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8006770:	2310      	movs	r3, #16
 8006772:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4619      	mov	r1, r3
 8006778:	4825      	ldr	r0, [pc, #148]	@ (8006810 <SAI_MspDeInit+0xd4>)
 800677a:	f006 fea7 	bl	800d4cc <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800677e:	2320      	movs	r3, #32
 8006780:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_GPIO_PORT, gpio_init_structure.Pin);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4619      	mov	r1, r3
 8006786:	4822      	ldr	r0, [pc, #136]	@ (8006810 <SAI_MspDeInit+0xd4>)
 8006788:	f006 fea0 	bl	800d4cc <HAL_GPIO_DeInit>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800678c:	2340      	movs	r3, #64	@ 0x40
 800678e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4619      	mov	r1, r3
 8006794:	481e      	ldr	r0, [pc, #120]	@ (8006810 <SAI_MspDeInit+0xd4>)
 8006796:	f006 fe99 	bl	800d4cc <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800679a:	2380      	movs	r3, #128	@ 0x80
 800679c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4619      	mov	r1, r3
 80067a2:	481c      	ldr	r0, [pc, #112]	@ (8006814 <SAI_MspDeInit+0xd8>)
 80067a4:	f006 fe92 	bl	800d4cc <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_OUT_SAIx_CLK_DISABLE();
 80067a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006818 <SAI_MspDeInit+0xdc>)
 80067aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006818 <SAI_MspDeInit+0xdc>)
 80067b0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80067b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  }
  if(hsai->Instance == AUDIO_IN_SAIx)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a17      	ldr	r2, [pc, #92]	@ (800681c <SAI_MspDeInit+0xe0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d11f      	bne.n	8006802 <SAI_MspDeInit+0xc6>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80067c2:	203c      	movs	r0, #60	@ 0x3c
 80067c4:	f002 fa1e 	bl	8008c04 <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmarx);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ce:	4618      	mov	r0, r3
 80067d0:	f002 ff30 	bl	8009634 <HAL_DMA_DeInit>

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80067e2:	601a      	str	r2, [r3, #0]

    /* Deactivates CODEC_SAI pin SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80067e4:	2308      	movs	r3, #8
 80067e6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_IN_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4619      	mov	r1, r3
 80067ec:	4808      	ldr	r0, [pc, #32]	@ (8006810 <SAI_MspDeInit+0xd4>)
 80067ee:	f006 fe6d 	bl	800d4cc <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_IN_SAIx_CLK_DISABLE();
 80067f2:	4b09      	ldr	r3, [pc, #36]	@ (8006818 <SAI_MspDeInit+0xdc>)
 80067f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067f8:	4a07      	ldr	r2, [pc, #28]	@ (8006818 <SAI_MspDeInit+0xdc>)
 80067fa:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80067fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  }
}
 8006802:	bf00      	nop
 8006804:	3720      	adds	r7, #32
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40015804 	.word	0x40015804
 8006810:	58021000 	.word	0x58021000
 8006814:	58021800 	.word	0x58021800
 8006818:	58024400 	.word	0x58024400
 800681c:	40015824 	.word	0x40015824

08006820 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006826:	2300      	movs	r3, #0
 8006828:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800682a:	4b16      	ldr	r3, [pc, #88]	@ (8006884 <BSP_I2C4_Init+0x64>)
 800682c:	4a16      	ldr	r2, [pc, #88]	@ (8006888 <BSP_I2C4_Init+0x68>)
 800682e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8006830:	4b16      	ldr	r3, [pc, #88]	@ (800688c <BSP_I2C4_Init+0x6c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11f      	bne.n	8006878 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8006838:	4b14      	ldr	r3, [pc, #80]	@ (800688c <BSP_I2C4_Init+0x6c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3301      	adds	r3, #1
 800683e:	4a13      	ldr	r2, [pc, #76]	@ (800688c <BSP_I2C4_Init+0x6c>)
 8006840:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8006842:	4810      	ldr	r0, [pc, #64]	@ (8006884 <BSP_I2C4_Init+0x64>)
 8006844:	f007 fa8c 	bl	800dd60 <HAL_I2C_GetState>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d114      	bne.n	8006878 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800684e:	480d      	ldr	r0, [pc, #52]	@ (8006884 <BSP_I2C4_Init+0x64>)
 8006850:	f000 fb60 	bl	8006f14 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006854:	f009 fab2 	bl	800fdbc <HAL_RCC_GetPCLK2Freq>
 8006858:	4603      	mov	r3, r0
 800685a:	490d      	ldr	r1, [pc, #52]	@ (8006890 <BSP_I2C4_Init+0x70>)
 800685c:	4618      	mov	r0, r3
 800685e:	f000 f8e3 	bl	8006a28 <I2C_GetTiming>
 8006862:	4603      	mov	r3, r0
 8006864:	4619      	mov	r1, r3
 8006866:	4807      	ldr	r0, [pc, #28]	@ (8006884 <BSP_I2C4_Init+0x64>)
 8006868:	f000 f838 	bl	80068dc <MX_I2C4_Init>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8006872:	f06f 0307 	mvn.w	r3, #7
 8006876:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8006878:	687b      	ldr	r3, [r7, #4]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	24005d0c 	.word	0x24005d0c
 8006888:	58001c00 	.word	0x58001c00
 800688c:	24005304 	.word	0x24005304
 8006890:	000186a0 	.word	0x000186a0

08006894 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800689a:	2300      	movs	r3, #0
 800689c:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800689e:	4b0d      	ldr	r3, [pc, #52]	@ (80068d4 <BSP_I2C4_DeInit+0x40>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	4a0b      	ldr	r2, [pc, #44]	@ (80068d4 <BSP_I2C4_DeInit+0x40>)
 80068a6:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80068a8:	4b0a      	ldr	r3, [pc, #40]	@ (80068d4 <BSP_I2C4_DeInit+0x40>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10b      	bne.n	80068c8 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80068b0:	4809      	ldr	r0, [pc, #36]	@ (80068d8 <BSP_I2C4_DeInit+0x44>)
 80068b2:	f000 fb9b 	bl	8006fec <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80068b6:	4808      	ldr	r0, [pc, #32]	@ (80068d8 <BSP_I2C4_DeInit+0x44>)
 80068b8:	f006 ffe0 	bl	800d87c <HAL_I2C_DeInit>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80068c2:	f06f 0307 	mvn.w	r3, #7
 80068c6:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80068c8:	687b      	ldr	r3, [r7, #4]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	24005304 	.word	0x24005304
 80068d8:	24005d0c 	.word	0x24005d0c

080068dc <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f006 ff12 	bl	800d744 <HAL_I2C_Init>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	73fb      	strb	r3, [r7, #15]
 800692a:	e014      	b.n	8006956 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800692c:	2300      	movs	r3, #0
 800692e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f007 fcf0 	bl	800e318 <HAL_I2CEx_ConfigAnalogFilter>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	73fb      	strb	r3, [r7, #15]
 8006942:	e008      	b.n	8006956 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8006944:	2100      	movs	r1, #0
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f007 fd31 	bl	800e3ae <HAL_I2CEx_ConfigDigitalFilter>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af02      	add	r7, sp, #8
 8006966:	60ba      	str	r2, [r7, #8]
 8006968:	461a      	mov	r2, r3
 800696a:	4603      	mov	r3, r0
 800696c:	81fb      	strh	r3, [r7, #14]
 800696e:	460b      	mov	r3, r1
 8006970:	81bb      	strh	r3, [r7, #12]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8006976:	89b9      	ldrh	r1, [r7, #12]
 8006978:	89f8      	ldrh	r0, [r7, #14]
 800697a:	88fb      	ldrh	r3, [r7, #6]
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2202      	movs	r2, #2
 8006982:	f000 fb57 	bl	8007034 <I2C4_WriteReg>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800698c:	2300      	movs	r3, #0
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e00c      	b.n	80069ac <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006992:	4809      	ldr	r0, [pc, #36]	@ (80069b8 <BSP_I2C4_WriteReg16+0x58>)
 8006994:	f007 f9f2 	bl	800dd7c <HAL_I2C_GetError>
 8006998:	4603      	mov	r3, r0
 800699a:	2b04      	cmp	r3, #4
 800699c:	d103      	bne.n	80069a6 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800699e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e002      	b.n	80069ac <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80069a6:	f06f 0303 	mvn.w	r3, #3
 80069aa:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80069ac:	697b      	ldr	r3, [r7, #20]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	24005d0c 	.word	0x24005d0c

080069bc <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60ba      	str	r2, [r7, #8]
 80069c4:	461a      	mov	r2, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	81fb      	strh	r3, [r7, #14]
 80069ca:	460b      	mov	r3, r1
 80069cc:	81bb      	strh	r3, [r7, #12]
 80069ce:	4613      	mov	r3, r2
 80069d0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80069d2:	89b9      	ldrh	r1, [r7, #12]
 80069d4:	89f8      	ldrh	r0, [r7, #14]
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2202      	movs	r2, #2
 80069de:	f000 fb4f 	bl	8007080 <I2C4_ReadReg>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	e00c      	b.n	8006a08 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80069ee:	4809      	ldr	r0, [pc, #36]	@ (8006a14 <BSP_I2C4_ReadReg16+0x58>)
 80069f0:	f007 f9c4 	bl	800dd7c <HAL_I2C_GetError>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d103      	bne.n	8006a02 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80069fa:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e002      	b.n	8006a08 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8006a02:	f06f 0303 	mvn.w	r3, #3
 8006a06:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8006a08:	697b      	ldr	r3, [r7, #20]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	24005d0c 	.word	0x24005d0c

08006a18 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8006a1c:	f001 ffa2 	bl	8008964 <HAL_GetTick>
 8006a20:	4603      	mov	r3, r0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d06b      	beq.n	8006b14 <I2C_GetTiming+0xec>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d068      	beq.n	8006b14 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8006a42:	2300      	movs	r3, #0
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	e060      	b.n	8006b0a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8006a48:	4a35      	ldr	r2, [pc, #212]	@ (8006b20 <I2C_GetTiming+0xf8>)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	212c      	movs	r1, #44	@ 0x2c
 8006a4e:	fb01 f303 	mul.w	r3, r1, r3
 8006a52:	4413      	add	r3, r2
 8006a54:	3304      	adds	r3, #4
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d352      	bcc.n	8006b04 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8006a5e:	4a30      	ldr	r2, [pc, #192]	@ (8006b20 <I2C_GetTiming+0xf8>)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	212c      	movs	r1, #44	@ 0x2c
 8006a64:	fb01 f303 	mul.w	r3, r1, r3
 8006a68:	4413      	add	r3, r2
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d847      	bhi.n	8006b04 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8006a74:	6939      	ldr	r1, [r7, #16]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f856 	bl	8006b28 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8006a7c:	6939      	ldr	r1, [r7, #16]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f940 	bl	8006d04 <I2C_Compute_SCLL_SCLH>
 8006a84:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a8a:	d842      	bhi.n	8006b12 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006a8c:	4925      	ldr	r1, [pc, #148]	@ (8006b24 <I2C_GetTiming+0xfc>)
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006a9e:	4821      	ldr	r0, [pc, #132]	@ (8006b24 <I2C_GetTiming+0xfc>)
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4403      	add	r3, r0
 8006aac:	3304      	adds	r3, #4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	051b      	lsls	r3, r3, #20
 8006ab2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006ab6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8006ab8:	481a      	ldr	r0, [pc, #104]	@ (8006b24 <I2C_GetTiming+0xfc>)
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4403      	add	r3, r0
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	041b      	lsls	r3, r3, #16
 8006acc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006ad0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8006ad2:	4814      	ldr	r0, [pc, #80]	@ (8006b24 <I2C_GetTiming+0xfc>)
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4403      	add	r3, r0
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8006ae8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8006aea:	480e      	ldr	r0, [pc, #56]	@ (8006b24 <I2C_GetTiming+0xfc>)
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4403      	add	r3, r0
 8006af8:	3310      	adds	r3, #16
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006afe:	430b      	orrs	r3, r1
 8006b00:	617b      	str	r3, [r7, #20]
        }
        break;
 8006b02:	e006      	b.n	8006b12 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	3301      	adds	r3, #1
 8006b08:	613b      	str	r3, [r7, #16]
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d99b      	bls.n	8006a48 <I2C_GetTiming+0x20>
 8006b10:	e000      	b.n	8006b14 <I2C_GetTiming+0xec>
        break;
 8006b12:	bf00      	nop
      }
    }
  }

  return ret;
 8006b14:	697b      	ldr	r3, [r7, #20]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	0801a648 	.word	0x0801a648
 8006b24:	24005308 	.word	0x24005308

08006b28 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b08f      	sub	sp, #60	@ 0x3c
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8006b32:	2310      	movs	r3, #16
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	085a      	lsrs	r2, r3, #1
 8006b3a:	4b6e      	ldr	r3, [pc, #440]	@ (8006cf4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8006b3c:	4413      	add	r3, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b44:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8006b46:	2332      	movs	r3, #50	@ 0x32
 8006b48:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8006b4a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006b4e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006b50:	4a69      	ldr	r2, [pc, #420]	@ (8006cf8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	212c      	movs	r1, #44	@ 0x2c
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3324      	adds	r3, #36	@ 0x24
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	4a65      	ldr	r2, [pc, #404]	@ (8006cf8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	212c      	movs	r1, #44	@ 0x2c
 8006b68:	fb01 f303 	mul.w	r3, r1, r3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	330c      	adds	r3, #12
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006b74:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006b76:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006b78:	495f      	ldr	r1, [pc, #380]	@ (8006cf8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	202c      	movs	r0, #44	@ 0x2c
 8006b7e:	fb00 f303 	mul.w	r3, r0, r3
 8006b82:	440b      	add	r3, r1
 8006b84:	3328      	adds	r3, #40	@ 0x28
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3303      	adds	r3, #3
 8006b8a:	69f9      	ldr	r1, [r7, #28]
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006b94:	4a58      	ldr	r2, [pc, #352]	@ (8006cf8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	212c      	movs	r1, #44	@ 0x2c
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	3310      	adds	r3, #16
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	4a54      	ldr	r2, [pc, #336]	@ (8006cf8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	212c      	movs	r1, #44	@ 0x2c
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3320      	adds	r3, #32
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8006bb8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006bba:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8006bbc:	494e      	ldr	r1, [pc, #312]	@ (8006cf8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	202c      	movs	r0, #44	@ 0x2c
 8006bc2:	fb00 f303 	mul.w	r3, r0, r3
 8006bc6:	440b      	add	r3, r1
 8006bc8:	3328      	adds	r3, #40	@ 0x28
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3304      	adds	r3, #4
 8006bce:	69f9      	ldr	r1, [r7, #28]
 8006bd0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8006bd8:	4a47      	ldr	r2, [pc, #284]	@ (8006cf8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	212c      	movs	r1, #44	@ 0x2c
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	4413      	add	r3, r2
 8006be4:	3320      	adds	r3, #32
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	4a43      	ldr	r2, [pc, #268]	@ (8006cf8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	212c      	movs	r1, #44	@ 0x2c
 8006bf0:	fb01 f303 	mul.w	r3, r1, r3
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3314      	adds	r3, #20
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4403      	add	r3, r0
 8006bfc:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	dc01      	bgt.n	8006c08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8006c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	dc01      	bgt.n	8006c12 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006c12:	2300      	movs	r3, #0
 8006c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c16:	e062      	b.n	8006cde <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c1c:	e059      	b.n	8006cd2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	3301      	adds	r3, #1
 8006c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c24:	3201      	adds	r2, #1
 8006c26:	fb03 f202 	mul.w	r2, r3, r2
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	fb02 f303 	mul.w	r3, r2, r3
 8006c30:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d348      	bcc.n	8006ccc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	623b      	str	r3, [r7, #32]
 8006c3e:	e042      	b.n	8006cc6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8006c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c42:	3301      	adds	r3, #1
 8006c44:	6a3a      	ldr	r2, [r7, #32]
 8006c46:	fb03 f202 	mul.w	r2, r3, r2
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
 8006c50:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d332      	bcc.n	8006cc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8006c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d82e      	bhi.n	8006cc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8006c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d02a      	beq.n	8006cc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006c6a:	4b24      	ldr	r3, [pc, #144]	@ (8006cfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	4924      	ldr	r1, [pc, #144]	@ (8006d00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c7c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8006c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8006cfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	491f      	ldr	r1, [pc, #124]	@ (8006d00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	3304      	adds	r3, #4
 8006c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c92:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8006c94:	4b19      	ldr	r3, [pc, #100]	@ (8006cfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	4919      	ldr	r1, [pc, #100]	@ (8006d00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	6a3a      	ldr	r2, [r7, #32]
 8006ca8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8006caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8006cae:	4b13      	ldr	r3, [pc, #76]	@ (8006cfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	4a11      	ldr	r2, [pc, #68]	@ (8006cfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006cb6:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006cb8:	4b10      	ldr	r3, [pc, #64]	@ (8006cfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cbe:	d812      	bhi.n	8006ce6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	623b      	str	r3, [r7, #32]
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	2b0f      	cmp	r3, #15
 8006cca:	d9b9      	bls.n	8006c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	3301      	adds	r3, #1
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	2b0f      	cmp	r3, #15
 8006cd6:	d9a2      	bls.n	8006c1e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	3301      	adds	r3, #1
 8006cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d999      	bls.n	8006c18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8006ce4:	e000      	b.n	8006ce8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8006ce6:	bf00      	nop
          }
        }
      }
    }
  }
}
 8006ce8:	373c      	adds	r7, #60	@ 0x3c
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	3b9aca00 	.word	0x3b9aca00
 8006cf8:	0801a648 	.word	0x0801a648
 8006cfc:	24005d08 	.word	0x24005d08
 8006d00:	24005308 	.word	0x24005308

08006d04 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b093      	sub	sp, #76	@ 0x4c
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8006d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	085a      	lsrs	r2, r3, #1
 8006d18:	4b7a      	ldr	r3, [pc, #488]	@ (8006f04 <I2C_Compute_SCLL_SCLH+0x200>)
 8006d1a:	4413      	add	r3, r2
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8006d24:	4a78      	ldr	r2, [pc, #480]	@ (8006f08 <I2C_Compute_SCLL_SCLH+0x204>)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	212c      	movs	r1, #44	@ 0x2c
 8006d2a:	fb01 f303 	mul.w	r3, r1, r3
 8006d2e:	4413      	add	r3, r2
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	085a      	lsrs	r2, r3, #1
 8006d34:	4b73      	ldr	r3, [pc, #460]	@ (8006f04 <I2C_Compute_SCLL_SCLH+0x200>)
 8006d36:	4413      	add	r3, r2
 8006d38:	4973      	ldr	r1, [pc, #460]	@ (8006f08 <I2C_Compute_SCLL_SCLH+0x204>)
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	202c      	movs	r0, #44	@ 0x2c
 8006d3e:	fb00 f202 	mul.w	r2, r0, r2
 8006d42:	440a      	add	r2, r1
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8006d4c:	2332      	movs	r3, #50	@ 0x32
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8006d50:	4a6d      	ldr	r2, [pc, #436]	@ (8006f08 <I2C_Compute_SCLL_SCLH+0x204>)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	212c      	movs	r1, #44	@ 0x2c
 8006d56:	fb01 f303 	mul.w	r3, r1, r3
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3328      	adds	r3, #40	@ 0x28
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d62:	fb02 f303 	mul.w	r3, r2, r3
 8006d66:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8006d68:	4a67      	ldr	r2, [pc, #412]	@ (8006f08 <I2C_Compute_SCLL_SCLH+0x204>)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	212c      	movs	r1, #44	@ 0x2c
 8006d6e:	fb01 f303 	mul.w	r3, r1, r3
 8006d72:	4413      	add	r3, r2
 8006d74:	3304      	adds	r3, #4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a62      	ldr	r2, [pc, #392]	@ (8006f04 <I2C_Compute_SCLL_SCLH+0x200>)
 8006d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8006d80:	4a61      	ldr	r2, [pc, #388]	@ (8006f08 <I2C_Compute_SCLL_SCLH+0x204>)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	212c      	movs	r1, #44	@ 0x2c
 8006d86:	fb01 f303 	mul.w	r3, r1, r3
 8006d8a:	4413      	add	r3, r2
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a5c      	ldr	r2, [pc, #368]	@ (8006f04 <I2C_Compute_SCLL_SCLH+0x200>)
 8006d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d96:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da0:	e0a3      	b.n	8006eea <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006da2:	495a      	ldr	r1, [pc, #360]	@ (8006f0c <I2C_Compute_SCLL_SCLH+0x208>)
 8006da4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dc0:	e08c      	b.n	8006edc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	441a      	add	r2, r3
 8006dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dca:	3301      	adds	r3, #1
 8006dcc:	6979      	ldr	r1, [r7, #20]
 8006dce:	fb03 f101 	mul.w	r1, r3, r1
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	440b      	add	r3, r1
 8006dd8:	4413      	add	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8006f08 <I2C_Compute_SCLL_SCLH+0x204>)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	212c      	movs	r1, #44	@ 0x2c
 8006de2:	fb01 f303 	mul.w	r3, r1, r3
 8006de6:	4413      	add	r3, r2
 8006de8:	3318      	adds	r3, #24
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d971      	bls.n	8006ed6 <I2C_Compute_SCLL_SCLH+0x1d2>
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	1ad2      	subs	r2, r2, r3
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d268      	bcs.n	8006ed6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006e04:	2300      	movs	r3, #0
 8006e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e08:	e062      	b.n	8006ed0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8006e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	441a      	add	r2, r3
 8006e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e12:	3301      	adds	r3, #1
 8006e14:	6979      	ldr	r1, [r7, #20]
 8006e16:	fb03 f101 	mul.w	r1, r3, r1
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	440b      	add	r3, r1
 8006e20:	4413      	add	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	441a      	add	r2, r3
 8006e2a:	4937      	ldr	r1, [pc, #220]	@ (8006f08 <I2C_Compute_SCLL_SCLH+0x204>)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	202c      	movs	r0, #44	@ 0x2c
 8006e30:	fb00 f303 	mul.w	r3, r0, r3
 8006e34:	440b      	add	r3, r1
 8006e36:	3320      	adds	r3, #32
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	441a      	add	r2, r3
 8006e3c:	4932      	ldr	r1, [pc, #200]	@ (8006f08 <I2C_Compute_SCLL_SCLH+0x204>)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	202c      	movs	r0, #44	@ 0x2c
 8006e42:	fb00 f303 	mul.w	r3, r0, r3
 8006e46:	440b      	add	r3, r1
 8006e48:	3324      	adds	r3, #36	@ 0x24
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d338      	bcc.n	8006eca <I2C_Compute_SCLL_SCLH+0x1c6>
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d834      	bhi.n	8006eca <I2C_Compute_SCLL_SCLH+0x1c6>
 8006e60:	4a29      	ldr	r2, [pc, #164]	@ (8006f08 <I2C_Compute_SCLL_SCLH+0x204>)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	212c      	movs	r1, #44	@ 0x2c
 8006e66:	fb01 f303 	mul.w	r3, r1, r3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	331c      	adds	r3, #28
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d329      	bcc.n	8006eca <I2C_Compute_SCLL_SCLH+0x1c6>
 8006e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d225      	bcs.n	8006eca <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	da02      	bge.n	8006e92 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	425b      	negs	r3, r3
 8006e90:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d917      	bls.n	8006eca <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8006e9e:	491b      	ldr	r1, [pc, #108]	@ (8006f0c <I2C_Compute_SCLL_SCLH+0x208>)
 8006ea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	3310      	adds	r3, #16
 8006eae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006eb0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8006eb2:	4916      	ldr	r1, [pc, #88]	@ (8006f0c <I2C_Compute_SCLL_SCLH+0x208>)
 8006eb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ec4:	601a      	str	r2, [r3, #0]
              ret = count;
 8006ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec8:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ecc:	3301      	adds	r3, #1
 8006ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed2:	2bff      	cmp	r3, #255	@ 0xff
 8006ed4:	d999      	bls.n	8006e0a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed8:	3301      	adds	r3, #1
 8006eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ede:	2bff      	cmp	r3, #255	@ 0xff
 8006ee0:	f67f af6f 	bls.w	8006dc2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eea:	4b09      	ldr	r3, [pc, #36]	@ (8006f10 <I2C_Compute_SCLL_SCLH+0x20c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	f4ff af56 	bcc.w	8006da2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8006ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	374c      	adds	r7, #76	@ 0x4c
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	3b9aca00 	.word	0x3b9aca00
 8006f08:	0801a648 	.word	0x0801a648
 8006f0c:	24005308 	.word	0x24005308
 8006f10:	24005d08 	.word	0x24005d08

08006f14 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08a      	sub	sp, #40	@ 0x28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006f1c:	4b31      	ldr	r3, [pc, #196]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f22:	4a30      	ldr	r2, [pc, #192]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006f24:	f043 0308 	orr.w	r3, r3, #8
 8006f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f40:	4a28      	ldr	r2, [pc, #160]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006f42:	f043 0308 	orr.w	r3, r3, #8
 8006f46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006f4a:	4b26      	ldr	r3, [pc, #152]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8006f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f5c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006f5e:	2312      	movs	r3, #18
 8006f60:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006f66:	2302      	movs	r3, #2
 8006f68:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006f6a:	2304      	movs	r3, #4
 8006f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006f6e:	f107 0314 	add.w	r3, r7, #20
 8006f72:	4619      	mov	r1, r3
 8006f74:	481c      	ldr	r0, [pc, #112]	@ (8006fe8 <I2C4_MspInit+0xd4>)
 8006f76:	f006 f8f9 	bl	800d16c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8006f7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006f7e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006f80:	2312      	movs	r3, #18
 8006f82:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006f90:	f107 0314 	add.w	r3, r7, #20
 8006f94:	4619      	mov	r1, r3
 8006f96:	4814      	ldr	r0, [pc, #80]	@ (8006fe8 <I2C4_MspInit+0xd4>)
 8006f98:	f006 f8e8 	bl	800d16c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8006f9c:	4b11      	ldr	r3, [pc, #68]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fa2:	4a10      	ldr	r2, [pc, #64]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fa8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006fac:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb6:	60bb      	str	r3, [r7, #8]
 8006fb8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8006fba:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fc0:	4a08      	ldr	r2, [pc, #32]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8006fca:	4b06      	ldr	r3, [pc, #24]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fd0:	4a04      	ldr	r2, [pc, #16]	@ (8006fe4 <I2C4_MspInit+0xd0>)
 8006fd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fd6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 8006fda:	bf00      	nop
 8006fdc:	3728      	adds	r7, #40	@ 0x28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	58024400 	.word	0x58024400
 8006fe8:	58020c00 	.word	0x58020c00

08006fec <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8006ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ff8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	480b      	ldr	r0, [pc, #44]	@ (800702c <I2C4_MspDeInit+0x40>)
 8007000:	f006 fa64 	bl	800d4cc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8007004:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007008:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4619      	mov	r1, r3
 800700e:	4807      	ldr	r0, [pc, #28]	@ (800702c <I2C4_MspDeInit+0x40>)
 8007010:	f006 fa5c 	bl	800d4cc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8007014:	4b06      	ldr	r3, [pc, #24]	@ (8007030 <I2C4_MspDeInit+0x44>)
 8007016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800701a:	4a05      	ldr	r2, [pc, #20]	@ (8007030 <I2C4_MspDeInit+0x44>)
 800701c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007020:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 8007024:	bf00      	nop
 8007026:	3720      	adds	r7, #32
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	58020c00 	.word	0x58020c00
 8007030:	58024400 	.word	0x58024400

08007034 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af04      	add	r7, sp, #16
 800703a:	607b      	str	r3, [r7, #4]
 800703c:	4603      	mov	r3, r0
 800703e:	81fb      	strh	r3, [r7, #14]
 8007040:	460b      	mov	r3, r1
 8007042:	81bb      	strh	r3, [r7, #12]
 8007044:	4613      	mov	r3, r2
 8007046:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007048:	8978      	ldrh	r0, [r7, #10]
 800704a:	89ba      	ldrh	r2, [r7, #12]
 800704c:	89f9      	ldrh	r1, [r7, #14]
 800704e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007052:	9302      	str	r3, [sp, #8]
 8007054:	8b3b      	ldrh	r3, [r7, #24]
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	4603      	mov	r3, r0
 800705e:	4807      	ldr	r0, [pc, #28]	@ (800707c <I2C4_WriteReg+0x48>)
 8007060:	f006 fc50 	bl	800d904 <HAL_I2C_Mem_Write>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800706a:	2300      	movs	r3, #0
 800706c:	e001      	b.n	8007072 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800706e:	f06f 0307 	mvn.w	r3, #7
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	24005d0c 	.word	0x24005d0c

08007080 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af04      	add	r7, sp, #16
 8007086:	607b      	str	r3, [r7, #4]
 8007088:	4603      	mov	r3, r0
 800708a:	81fb      	strh	r3, [r7, #14]
 800708c:	460b      	mov	r3, r1
 800708e:	81bb      	strh	r3, [r7, #12]
 8007090:	4613      	mov	r3, r2
 8007092:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007094:	8978      	ldrh	r0, [r7, #10]
 8007096:	89ba      	ldrh	r2, [r7, #12]
 8007098:	89f9      	ldrh	r1, [r7, #14]
 800709a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800709e:	9302      	str	r3, [sp, #8]
 80070a0:	8b3b      	ldrh	r3, [r7, #24]
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	4603      	mov	r3, r0
 80070aa:	4807      	ldr	r0, [pc, #28]	@ (80070c8 <I2C4_ReadReg+0x48>)
 80070ac:	f006 fd3e 	bl	800db2c <HAL_I2C_Mem_Read>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	e001      	b.n	80070be <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80070ba:	f06f 0307 	mvn.w	r3, #7
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	24005d0c 	.word	0x24005d0c

080070cc <BSP_CAMERA_Suspend>:
/**
  * @brief Suspend the CAMERA capture
  * @param  Instance Camera instance.
  */
int32_t BSP_CAMERA_Suspend(uint32_t Instance)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <BSP_CAMERA_Suspend+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80070da:	f06f 0301 	mvn.w	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	e00a      	b.n	80070f8 <BSP_CAMERA_Suspend+0x2c>
  }
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 80070e2:	4808      	ldr	r0, [pc, #32]	@ (8007104 <BSP_CAMERA_Suspend+0x38>)
 80070e4:	f001 fe26 	bl	8008d34 <HAL_DCMI_Suspend>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <BSP_CAMERA_Suspend+0x28>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80070ee:	f06f 0303 	mvn.w	r3, #3
 80070f2:	e002      	b.n	80070fa <BSP_CAMERA_Suspend+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 80070f8:	68fb      	ldr	r3, [r7, #12]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	24005d60 	.word	0x24005d60

08007108 <BSP_CAMERA_Resume>:
/**
  * @brief Resume the CAMERA capture
  * @param  Instance Camera instance.
  */
int32_t BSP_CAMERA_Resume(uint32_t Instance)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <BSP_CAMERA_Resume+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007116:	f06f 0301 	mvn.w	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	e00b      	b.n	8007136 <BSP_CAMERA_Resume+0x2e>
  }
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800711e:	4808      	ldr	r0, [pc, #32]	@ (8007140 <BSP_CAMERA_Resume+0x38>)
 8007120:	f001 fe60 	bl	8008de4 <HAL_DCMI_Resume>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <BSP_CAMERA_Resume+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800712a:	f06f 0303 	mvn.w	r3, #3
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	e001      	b.n	8007136 <BSP_CAMERA_Resume+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	24005d60 	.word	0x24005d60

08007144 <BSP_CAMERA_IRQHandler>:
  * @brief  This function handles DCMI interrupt request.
  * @param  Instance Camera instance
  * @retval None
  */
void BSP_CAMERA_IRQHandler(uint32_t Instance)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800714c:	4803      	ldr	r0, [pc, #12]	@ (800715c <BSP_CAMERA_IRQHandler+0x18>)
 800714e:	f001 fe75 	bl	8008e3c <HAL_DCMI_IRQHandler>
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	24005d60 	.word	0x24005d60

08007160 <BSP_CAMERA_DMA_IRQHandler>:
  * @brief  This function handles DCMI DMA interrupt request.
  * @param  Instance Camera instance
  * @retval None
  */
void BSP_CAMERA_DMA_IRQHandler(uint32_t Instance)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 8007168:	4b04      	ldr	r3, [pc, #16]	@ (800717c <BSP_CAMERA_DMA_IRQHandler+0x1c>)
 800716a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800716c:	4618      	mov	r0, r3
 800716e:	f003 fbe5 	bl	800a93c <HAL_DMA_IRQHandler>
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	24005d60 	.word	0x24005d60

08007180 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8007188:	2000      	movs	r0, #0
 800718a:	f000 f825 	bl	80071d8 <BSP_CAMERA_LineEventCallback>
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 800719e:	2000      	movs	r0, #0
 80071a0:	f7fd f93c 	bl	800441c <BSP_CAMERA_FrameEventCallback>
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 80071b4:	2000      	movs	r0, #0
 80071b6:	f000 f819 	bl	80071ec <BSP_CAMERA_VsyncEventCallback>
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 80071ca:	2000      	movs	r0, #0
 80071cc:	f000 f818 	bl	8007200 <BSP_CAMERA_ErrorCallback>
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af02      	add	r7, sp, #8
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800721e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8007228:	2201      	movs	r2, #1
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f805 	bl	800723c <BSP_LCD_InitEx>
 8007232:	4603      	mov	r3, r0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08e      	sub	sp, #56	@ 0x38
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800724a:	2300      	movs	r3, #0
 800724c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t ctrl_pixel_format, ltdc_pixel_format, dsi_pixel_format;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d808      	bhi.n	8007266 <BSP_LCD_InitEx+0x2a>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d105      	bne.n	8007266 <BSP_LCD_InitEx+0x2a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d006      	beq.n	800726e <BSP_LCD_InitEx+0x32>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d003      	beq.n	800726e <BSP_LCD_InitEx+0x32>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007266:	f06f 0301 	mvn.w	r3, #1
 800726a:	637b      	str	r3, [r7, #52]	@ 0x34
 800726c:	e0db      	b.n	8007426 <BSP_LCD_InitEx+0x1ea>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b02      	cmp	r3, #2
 8007272:	d10e      	bne.n	8007292 <BSP_LCD_InitEx+0x56>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8007274:	2302      	movs	r3, #2
 8007276:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dsi_pixel_format = DSI_RGB565;
 8007278:	2300      	movs	r3, #0
 800727a:	62bb      	str	r3, [r7, #40]	@ 0x28
      Lcd_Ctx[Instance].BppFactor = 2U;
 800727c:	496c      	ldr	r1, [pc, #432]	@ (8007430 <BSP_LCD_InitEx+0x1f4>)
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4613      	mov	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	1a9b      	subs	r3, r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	440b      	add	r3, r1
 800728a:	3310      	adds	r3, #16
 800728c:	2202      	movs	r2, #2
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	e00d      	b.n	80072ae <BSP_LCD_InitEx+0x72>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8007292:	2300      	movs	r3, #0
 8007294:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dsi_pixel_format = DSI_RGB888;
 8007296:	2305      	movs	r3, #5
 8007298:	62bb      	str	r3, [r7, #40]	@ 0x28
      Lcd_Ctx[Instance].BppFactor = 4U;
 800729a:	4965      	ldr	r1, [pc, #404]	@ (8007430 <BSP_LCD_InitEx+0x1f4>)
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4613      	mov	r3, r2
 80072a0:	00db      	lsls	r3, r3, #3
 80072a2:	1a9b      	subs	r3, r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	440b      	add	r3, r1
 80072a8:	3310      	adds	r3, #16
 80072aa:	2204      	movs	r2, #4
 80072ac:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80072ae:	4960      	ldr	r1, [pc, #384]	@ (8007430 <BSP_LCD_InitEx+0x1f4>)
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4613      	mov	r3, r2
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	330c      	adds	r3, #12
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80072c2:	495b      	ldr	r1, [pc, #364]	@ (8007430 <BSP_LCD_InitEx+0x1f4>)
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	4613      	mov	r3, r2
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80072d4:	4956      	ldr	r1, [pc, #344]	@ (8007430 <BSP_LCD_InitEx+0x1f4>)
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4613      	mov	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	1a9b      	subs	r3, r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	3304      	adds	r3, #4
 80072e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072e6:	601a      	str	r2, [r3, #0]

    /* Toggle Hardware Reset of the LCD using its XRES signal (active low) */
    BSP_LCD_Reset(Instance);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f8af 	bl	800744c <BSP_LCD_Reset>


    /* Initialize LCD special pins GPIOs */
    LCD_InitSequence();
 80072ee:	f000 f8e7 	bl	80074c0 <LCD_InitSequence>

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80072f2:	4b50      	ldr	r3, [pc, #320]	@ (8007434 <BSP_LCD_InitEx+0x1f8>)
 80072f4:	4a50      	ldr	r2, [pc, #320]	@ (8007438 <BSP_LCD_InitEx+0x1fc>)
 80072f6:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 80072f8:	4b50      	ldr	r3, [pc, #320]	@ (800743c <BSP_LCD_InitEx+0x200>)
 80072fa:	4a51      	ldr	r2, [pc, #324]	@ (8007440 <BSP_LCD_InitEx+0x204>)
 80072fc:	601a      	str	r2, [r3, #0]
    hlcd_dsi.Instance = DSI;
 80072fe:	4b51      	ldr	r3, [pc, #324]	@ (8007444 <BSP_LCD_InitEx+0x208>)
 8007300:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007304:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8007306:	484b      	ldr	r0, [pc, #300]	@ (8007434 <BSP_LCD_InitEx+0x1f8>)
 8007308:	f000 ff36 	bl	8008178 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 800730c:	484b      	ldr	r0, [pc, #300]	@ (800743c <BSP_LCD_InitEx+0x200>)
 800730e:	f000 ff65 	bl	80081dc <DMA2D_MspInit>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    DSI_MspInit(&hlcd_dsi);
 8007312:	484c      	ldr	r0, [pc, #304]	@ (8007444 <BSP_LCD_InitEx+0x208>)
 8007314:	f000 ff90 	bl	8008238 <DSI_MspInit>
#endif
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	4849      	ldr	r0, [pc, #292]	@ (8007444 <BSP_LCD_InitEx+0x208>)
 8007320:	f000 f936 	bl	8007590 <MX_DSIHOST_DSI_Init>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <BSP_LCD_InitEx+0xf6>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800732a:	f06f 0303 	mvn.w	r3, #3
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007330:	e014      	b.n	800735c <BSP_LCD_InitEx+0x120>
    }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8007332:	4840      	ldr	r0, [pc, #256]	@ (8007434 <BSP_LCD_InitEx+0x1f8>)
 8007334:	f000 fa94 	bl	8007860 <MX_LTDC_ClockConfig>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <BSP_LCD_InitEx+0x10a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800733e:	f06f 0303 	mvn.w	r3, #3
 8007342:	637b      	str	r3, [r7, #52]	@ 0x34
 8007344:	e00a      	b.n	800735c <BSP_LCD_InitEx+0x120>
    }
    else
    {
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8007346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	483a      	ldr	r0, [pc, #232]	@ (8007434 <BSP_LCD_InitEx+0x1f8>)
 800734c:	f000 f9d2 	bl	80076f4 <MX_LTDC_Init>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <BSP_LCD_InitEx+0x120>
     {
       ret = BSP_ERROR_PERIPH_FAILURE;
 8007356:	f06f 0303 	mvn.w	r3, #3
 800735a:	637b      	str	r3, [r7, #52]	@ 0x34
     }
    }

    if(ret == BSP_ERROR_NONE)
 800735c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735e:	2b00      	cmp	r3, #0
 8007360:	d161      	bne.n	8007426 <BSP_LCD_InitEx+0x1ea>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8007362:	2000      	movs	r0, #0
 8007364:	f001 f8f0 	bl	8008548 <BSP_SDRAM_Init>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <BSP_LCD_InitEx+0x138>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 800736e:	f06f 0303 	mvn.w	r3, #3
 8007372:	e059      	b.n	8007428 <BSP_LCD_InitEx+0x1ec>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	613b      	str	r3, [r7, #16]
      config.X1          = Width;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	617b      	str	r3, [r7, #20]
      config.Y0          = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	61bb      	str	r3, [r7, #24]
      config.Y1          = Height;
 8007380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007382:	61fb      	str	r3, [r7, #28]
      config.PixelFormat = ltdc_pixel_format;
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	623b      	str	r3, [r7, #32]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8007388:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800738c:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800738e:	f107 0310 	add.w	r3, r7, #16
 8007392:	461a      	mov	r2, r3
 8007394:	2100      	movs	r1, #0
 8007396:	4827      	ldr	r0, [pc, #156]	@ (8007434 <BSP_LCD_InitEx+0x1f8>)
 8007398:	f000 fa20 	bl	80077dc <MX_LTDC_ConfigLayer>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <BSP_LCD_InitEx+0x16e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80073a2:	f06f 0303 	mvn.w	r3, #3
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a8:	e033      	b.n	8007412 <BSP_LCD_InitEx+0x1d6>
      }
      else
      {
        /* Enable the DSI host and wrapper after the LTDC initialization
        To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
        (void)HAL_DSI_Start(&hlcd_dsi);
 80073aa:	4826      	ldr	r0, [pc, #152]	@ (8007444 <BSP_LCD_InitEx+0x208>)
 80073ac:	f005 fcb4 	bl	800cd18 <HAL_DSI_Start>

        /* Enable the DSI BTW for read operations */
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 80073b0:	2104      	movs	r1, #4
 80073b2:	4824      	ldr	r0, [pc, #144]	@ (8007444 <BSP_LCD_InitEx+0x208>)
 80073b4:	f005 fc88 	bl	800ccc8 <HAL_DSI_ConfigFlowControl>

        /* Initialize the NT35510 LCD Display IC Driver (KoD LCD IC Driver)
        depending on configuration of DSI */
        if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d102      	bne.n	80073c4 <BSP_LCD_InitEx+0x188>
        {
          ctrl_pixel_format = NT35510_FORMAT_RBG565;
 80073be:	2302      	movs	r3, #2
 80073c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073c2:	e001      	b.n	80073c8 <BSP_LCD_InitEx+0x18c>
        }
        else /* LCD_PIXEL_FORMAT_RGB888 */
        {
          ctrl_pixel_format = NT35510_FORMAT_RGB888;
 80073c4:	2300      	movs	r3, #0
 80073c6:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        if(NT35510_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073cc:	f000 ffc8 	bl	8008360 <NT35510_Probe>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01b      	beq.n	800740e <BSP_LCD_InitEx+0x1d2>
        {
         Lcd_Driver_Type = LCD_CTRL_OTM8009A;
 80073d6:	4b1c      	ldr	r3, [pc, #112]	@ (8007448 <BSP_LCD_InitEx+0x20c>)
 80073d8:	2201      	movs	r2, #1
 80073da:	701a      	strb	r2, [r3, #0]

          if(ret == BSP_ERROR_NONE)
 80073dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d117      	bne.n	8007412 <BSP_LCD_InitEx+0x1d6>
          {
            /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
            depending on configuration of DSI */
            if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d102      	bne.n	80073ee <BSP_LCD_InitEx+0x1b2>
            {
              ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 80073e8:	2302      	movs	r3, #2
 80073ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80073ec:	e001      	b.n	80073f2 <BSP_LCD_InitEx+0x1b6>
            }
            else /* LCD_PIXEL_FORMAT_RGB888 */
            {
              ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 80073ee:	2300      	movs	r3, #0
 80073f0:	633b      	str	r3, [r7, #48]	@ 0x30
            }
            if(OTM8009A_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073f6:	f001 f80f 	bl	8008418 <OTM8009A_Probe>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <BSP_LCD_InitEx+0x1cc>
            {
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007400:	f06f 0306 	mvn.w	r3, #6
 8007404:	637b      	str	r3, [r7, #52]	@ 0x34
 8007406:	e004      	b.n	8007412 <BSP_LCD_InitEx+0x1d6>
            }
            else
            {
              ret = BSP_ERROR_NONE;
 8007408:	2300      	movs	r3, #0
 800740a:	637b      	str	r3, [r7, #52]	@ 0x34
 800740c:	e001      	b.n	8007412 <BSP_LCD_InitEx+0x1d6>
            }
          }
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800740e:	2300      	movs	r3, #0
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
    /* By default the reload is activated and executed immediately */
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8007412:	4907      	ldr	r1, [pc, #28]	@ (8007430 <BSP_LCD_InitEx+0x1f4>)
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4613      	mov	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	1a9b      	subs	r3, r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	440b      	add	r3, r1
 8007420:	3318      	adds	r3, #24
 8007422:	2201      	movs	r2, #1
 8007424:	601a      	str	r2, [r3, #0]
   }
  }

  return ret;
 8007426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007428:	4618      	mov	r0, r3
 800742a:	3738      	adds	r7, #56	@ 0x38
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	24005ee4 	.word	0x24005ee4
 8007434:	24005e3c 	.word	0x24005e3c
 8007438:	50001000 	.word	0x50001000
 800743c:	24005dd4 	.word	0x24005dd4
 8007440:	52001000 	.word	0x52001000
 8007444:	24005db8 	.word	0x24005db8
 8007448:	24005f00 	.word	0x24005f00

0800744c <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 8007454:	4b18      	ldr	r3, [pc, #96]	@ (80074b8 <BSP_LCD_Reset+0x6c>)
 8007456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800745a:	4a17      	ldr	r2, [pc, #92]	@ (80074b8 <BSP_LCD_Reset+0x6c>)
 800745c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007460:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007464:	4b14      	ldr	r3, [pc, #80]	@ (80074b8 <BSP_LCD_Reset+0x6c>)
 8007466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800746a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746e:	60bb      	str	r3, [r7, #8]
 8007470:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8007472:	2308      	movs	r3, #8
 8007474:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8007476:	2301      	movs	r3, #1
 8007478:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800747a:	2301      	movs	r3, #1
 800747c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800747e:	2303      	movs	r3, #3
 8007480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8007482:	f107 030c 	add.w	r3, r7, #12
 8007486:	4619      	mov	r1, r3
 8007488:	480c      	ldr	r0, [pc, #48]	@ (80074bc <BSP_LCD_Reset+0x70>)
 800748a:	f005 fe6f 	bl	800d16c <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800748e:	2200      	movs	r2, #0
 8007490:	2108      	movs	r1, #8
 8007492:	480a      	ldr	r0, [pc, #40]	@ (80074bc <BSP_LCD_Reset+0x70>)
 8007494:	f006 f93c 	bl	800d710 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8007498:	2014      	movs	r0, #20
 800749a:	f001 fa6f 	bl	800897c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 800749e:	2201      	movs	r2, #1
 80074a0:	2108      	movs	r1, #8
 80074a2:	4806      	ldr	r0, [pc, #24]	@ (80074bc <BSP_LCD_Reset+0x70>)
 80074a4:	f006 f934 	bl	800d710 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80074a8:	200a      	movs	r0, #10
 80074aa:	f001 fa67 	bl	800897c <HAL_Delay>
}
 80074ae:	bf00      	nop
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	58024400 	.word	0x58024400
 80074bc:	58021800 	.word	0x58021800

080074c0 <LCD_InitSequence>:
/**
  * @brief  Configure LCD control pins (Back-light, Display Enable and TE)
  * @retval None
  */
static void LCD_InitSequence(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /* LCD_BL_CTRL GPIO configuration */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80074c6:	4b30      	ldr	r3, [pc, #192]	@ (8007588 <LCD_InitSequence+0xc8>)
 80074c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007588 <LCD_InitSequence+0xc8>)
 80074ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80074d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007588 <LCD_InitSequence+0xc8>)
 80074d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 80074e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074e8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80074ea:	2301      	movs	r3, #1
 80074ec:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80074ee:	2302      	movs	r3, #2
 80074f0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80074f6:	f107 030c 	add.w	r3, r7, #12
 80074fa:	4619      	mov	r1, r3
 80074fc:	4823      	ldr	r0, [pc, #140]	@ (800758c <LCD_InitSequence+0xcc>)
 80074fe:	f005 fe35 	bl	800d16c <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8007502:	2201      	movs	r2, #1
 8007504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007508:	4820      	ldr	r0, [pc, #128]	@ (800758c <LCD_InitSequence+0xcc>)
 800750a:	f006 f901 	bl	800d710 <HAL_GPIO_WritePin>

  /* LCD_TE_CTRL GPIO configuration */
  LCD_TE_GPIO_CLK_ENABLE();
 800750e:	4b1e      	ldr	r3, [pc, #120]	@ (8007588 <LCD_InitSequence+0xc8>)
 8007510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007514:	4a1c      	ldr	r2, [pc, #112]	@ (8007588 <LCD_InitSequence+0xc8>)
 8007516:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800751a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800751e:	4b1a      	ldr	r3, [pc, #104]	@ (8007588 <LCD_InitSequence+0xc8>)
 8007520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007528:	607b      	str	r3, [r7, #4]
 800752a:	687b      	ldr	r3, [r7, #4]

  gpio_init_structure.Pin       = LCD_TE_PIN;
 800752c:	2304      	movs	r3, #4
 800752e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8007530:	2300      	movs	r3, #0
 8007532:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007534:	2302      	movs	r3, #2
 8007536:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8007538:	f107 030c 	add.w	r3, r7, #12
 800753c:	4619      	mov	r1, r3
 800753e:	4813      	ldr	r0, [pc, #76]	@ (800758c <LCD_InitSequence+0xcc>)
 8007540:	f005 fe14 	bl	800d16c <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8007544:	2201      	movs	r2, #1
 8007546:	2104      	movs	r1, #4
 8007548:	4810      	ldr	r0, [pc, #64]	@ (800758c <LCD_InitSequence+0xcc>)
 800754a:	f006 f8e1 	bl	800d710 <HAL_GPIO_WritePin>

      /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 800754e:	2200      	movs	r2, #0
 8007550:	210f      	movs	r1, #15
 8007552:	2058      	movs	r0, #88	@ 0x58
 8007554:	f001 fb2e 	bl	8008bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8007558:	2058      	movs	r0, #88	@ 0x58
 800755a:	f001 fb45 	bl	8008be8 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 800755e:	2200      	movs	r2, #0
 8007560:	210f      	movs	r1, #15
 8007562:	205a      	movs	r0, #90	@ 0x5a
 8007564:	f001 fb26 	bl	8008bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8007568:	205a      	movs	r0, #90	@ 0x5a
 800756a:	f001 fb3d 	bl	8008be8 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 800756e:	2200      	movs	r2, #0
 8007570:	210f      	movs	r1, #15
 8007572:	207b      	movs	r0, #123	@ 0x7b
 8007574:	f001 fb1e 	bl	8008bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8007578:	207b      	movs	r0, #123	@ 0x7b
 800757a:	f001 fb35 	bl	8008be8 <HAL_NVIC_EnableIRQ>
}
 800757e:	bf00      	nop
 8007580:	3720      	adds	r7, #32
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	58024400 	.word	0x58024400
 800758c:	58022400 	.word	0x58022400

08007590 <MX_DSIHOST_DSI_Init>:
  * @param  Height Vertical active height
  * @param  PixelFormat DSI color coding RGB888 or RGB565
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DSIHOST_DSI_Init(DSI_HandleTypeDef *hdsi, uint32_t Width, uint32_t Height, uint32_t PixelFormat)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b0a2      	sub	sp, #136	@ 0x88
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	603b      	str	r3, [r7, #0]
  DSI_PLLInitTypeDef PLLInit;
  DSI_VidCfgTypeDef VidCfg;

  hdsi->Instance = DSI;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80075a4:	601a      	str	r2, [r3, #0]
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	605a      	str	r2, [r3, #4]
  hdsi->Init.TXEscapeCkdiv = 4;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2204      	movs	r2, #4
 80075b0:	609a      	str	r2, [r3, #8]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 80075b8:	2364      	movs	r3, #100	@ 0x64
 80075ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80075bc:	2305      	movs	r3, #5
 80075be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80075c2:	2300      	movs	r3, #0
 80075c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 80075c8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80075cc:	4619      	mov	r1, r3
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f004 fff0 	bl	800c5b4 <HAL_DSI_Init>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <MX_DSIHOST_DSI_Init+0x4e>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e07f      	b.n	80076de <MX_DSIHOST_DSI_Init+0x14e>
  /* Timing parameters for all Video modes */
  /*
  The lane byte clock is set 62500 Khz
  The pixel clock is set to 27429 Khz
  */
  VidCfg.VirtualChannelID = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	613b      	str	r3, [r7, #16]
  VidCfg.ColorCoding = PixelFormat;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	617b      	str	r3, [r7, #20]

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 80075e6:	4b40      	ldr	r3, [pc, #256]	@ (80076e8 <MX_DSIHOST_DSI_Init+0x158>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d103      	bne.n	80075f6 <MX_DSIHOST_DSI_Init+0x66>
  {
    VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_ENABLE;
 80075ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075f2:	61bb      	str	r3, [r7, #24]
 80075f4:	e001      	b.n	80075fa <MX_DSIHOST_DSI_Init+0x6a>
  }
  else
  {
    VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
  }

  VidCfg.Mode = DSI_VID_MODE_BURST;
 80075fa:	2302      	movs	r3, #2
 80075fc:	61fb      	str	r3, [r7, #28]
  VidCfg.PacketSize = Width;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	623b      	str	r3, [r7, #32]
  VidCfg.NumberOfChunks = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	627b      	str	r3, [r7, #36]	@ 0x24
  VidCfg.NullPacketSize = 0xFFFU;
 8007606:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800760a:	62bb      	str	r3, [r7, #40]	@ 0x28
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800760c:	2300      	movs	r3, #0
 800760e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8007610:	2300      	movs	r3, #0
 8007612:	633b      	str	r3, [r7, #48]	@ 0x30
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8007614:	2300      	movs	r3, #0
 8007616:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8007618:	4b33      	ldr	r3, [pc, #204]	@ (80076e8 <MX_DSIHOST_DSI_Init+0x158>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d116      	bne.n	800764e <MX_DSIHOST_DSI_Init+0xbe>
  {
    VidCfg.HorizontalSyncActive = (NT35510_480X800_HSYNC * 62500U)/27429U;
 8007620:	2304      	movs	r3, #4
 8007622:	63bb      	str	r3, [r7, #56]	@ 0x38
    VidCfg.HorizontalBackPorch = (NT35510_480X800_HBP * 62500U)/27429U;
 8007624:	234d      	movs	r3, #77	@ 0x4d
 8007626:	63fb      	str	r3, [r7, #60]	@ 0x3c
    VidCfg.HorizontalLine = ((Width + NT35510_480X800_HSYNC + NT35510_480X800_HBP + NT35510_480X800_HFP) * 62500U)/27429U;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f24f 4224 	movw	r2, #62500	@ 0xf424
 800762e:	fb03 f202 	mul.w	r2, r3, r2
 8007632:	4b2e      	ldr	r3, [pc, #184]	@ (80076ec <MX_DSIHOST_DSI_Init+0x15c>)
 8007634:	4413      	add	r3, r2
 8007636:	4a2e      	ldr	r2, [pc, #184]	@ (80076f0 <MX_DSIHOST_DSI_Init+0x160>)
 8007638:	fba2 2303 	umull	r2, r3, r2, r3
 800763c:	0b5b      	lsrs	r3, r3, #13
 800763e:	643b      	str	r3, [r7, #64]	@ 0x40
    VidCfg.VerticalSyncActive = NT35510_480X800_VSYNC;
 8007640:	2378      	movs	r3, #120	@ 0x78
 8007642:	647b      	str	r3, [r7, #68]	@ 0x44
    VidCfg.VerticalBackPorch = NT35510_480X800_VBP;
 8007644:	2396      	movs	r3, #150	@ 0x96
 8007646:	64bb      	str	r3, [r7, #72]	@ 0x48
    VidCfg.VerticalFrontPorch = NT35510_480X800_VFP;
 8007648:	2396      	movs	r3, #150	@ 0x96
 800764a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800764c:	e015      	b.n	800767a <MX_DSIHOST_DSI_Init+0xea>
  }
  else
  {
    VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 800764e:	2304      	movs	r3, #4
 8007650:	63bb      	str	r3, [r7, #56]	@ 0x38
    VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8007652:	234d      	movs	r3, #77	@ 0x4d
 8007654:	63fb      	str	r3, [r7, #60]	@ 0x3c
    VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f24f 4224 	movw	r2, #62500	@ 0xf424
 800765c:	fb03 f202 	mul.w	r2, r3, r2
 8007660:	4b22      	ldr	r3, [pc, #136]	@ (80076ec <MX_DSIHOST_DSI_Init+0x15c>)
 8007662:	4413      	add	r3, r2
 8007664:	4a22      	ldr	r2, [pc, #136]	@ (80076f0 <MX_DSIHOST_DSI_Init+0x160>)
 8007666:	fba2 2303 	umull	r2, r3, r2, r3
 800766a:	0b5b      	lsrs	r3, r3, #13
 800766c:	643b      	str	r3, [r7, #64]	@ 0x40
    VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 800766e:	2301      	movs	r3, #1
 8007670:	647b      	str	r3, [r7, #68]	@ 0x44
    VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8007672:	230f      	movs	r3, #15
 8007674:	64bb      	str	r3, [r7, #72]	@ 0x48
    VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8007676:	2310      	movs	r3, #16
 8007678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  VidCfg.VerticalActive = Height;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	653b      	str	r3, [r7, #80]	@ 0x50
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800767e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007682:	657b      	str	r3, [r7, #84]	@ 0x54

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8007684:	4b18      	ldr	r3, [pc, #96]	@ (80076e8 <MX_DSIHOST_DSI_Init+0x158>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d104      	bne.n	8007696 <MX_DSIHOST_DSI_Init+0x106>
  {
    VidCfg.LPLargestPacketSize = 64;
 800768c:	2340      	movs	r3, #64	@ 0x40
 800768e:	65bb      	str	r3, [r7, #88]	@ 0x58
    VidCfg.LPVACTLargestPacketSize = 64;
 8007690:	2340      	movs	r3, #64	@ 0x40
 8007692:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007694:	e003      	b.n	800769e <MX_DSIHOST_DSI_Init+0x10e>
  }
  else
  {
    VidCfg.LPLargestPacketSize = 4;
 8007696:	2304      	movs	r3, #4
 8007698:	65bb      	str	r3, [r7, #88]	@ 0x58
    VidCfg.LPVACTLargestPacketSize = 4;
 800769a:	2304      	movs	r3, #4
 800769c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800769e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80076a2:	663b      	str	r3, [r7, #96]	@ 0x60
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 80076a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076a8:	667b      	str	r3, [r7, #100]	@ 0x64
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 80076aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80076ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 80076b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 80076b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076ba:	673b      	str	r3, [r7, #112]	@ 0x70
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 80076bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80076c0:	677b      	str	r3, [r7, #116]	@ 0x74
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 80076c2:	2300      	movs	r3, #0
 80076c4:	67bb      	str	r3, [r7, #120]	@ 0x78

  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80076c6:	f107 0310 	add.w	r3, r7, #16
 80076ca:	4619      	mov	r1, r3
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f005 f8fb 	bl	800c8c8 <HAL_DSI_ConfigVideoMode>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <MX_DSIHOST_DSI_Init+0x14c>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <MX_DSIHOST_DSI_Init+0x14e>
  }

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3788      	adds	r7, #136	@ 0x88
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	24005f00 	.word	0x24005f00
 80076ec:	0042c1d8 	.word	0x0042c1d8
 80076f0:	4c751ce3 	.word	0x4c751ce3

080076f4 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4a34      	ldr	r2, [pc, #208]	@ (80077d4 <MX_LTDC_Init+0xe0>)
 8007704:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	611a      	str	r2, [r3, #16]

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 800771e:	4b2e      	ldr	r3, [pc, #184]	@ (80077d8 <MX_LTDC_Init+0xe4>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d121      	bne.n	800776a <MX_LTDC_Init+0x76>
  {
    hltdc->Init.HorizontalSync     = NT35510_480X800_HSYNC - 1;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	615a      	str	r2, [r3, #20]
    hltdc->Init.AccumulatedHBP     = NT35510_480X800_HSYNC + NT35510_480X800_HBP - 1;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2223      	movs	r2, #35	@ 0x23
 8007730:	61da      	str	r2, [r3, #28]
    hltdc->Init.AccumulatedActiveW = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP - 1;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	625a      	str	r2, [r3, #36]	@ 0x24
    hltdc->Init.TotalWidth         = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP + NT35510_480X800_HFP - 1;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f103 0245 	add.w	r2, r3, #69	@ 0x45
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	62da      	str	r2, [r3, #44]	@ 0x2c
    hltdc->Init.VerticalSync       = NT35510_480X800_VSYNC - 1;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2277      	movs	r2, #119	@ 0x77
 800774a:	619a      	str	r2, [r3, #24]
    hltdc->Init.AccumulatedVBP     = NT35510_480X800_VSYNC + NT35510_480X800_VBP - 1;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f240 120d 	movw	r2, #269	@ 0x10d
 8007752:	621a      	str	r2, [r3, #32]
    hltdc->Init.AccumulatedActiveH = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP - 1;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f203 120d 	addw	r2, r3, #269	@ 0x10d
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	629a      	str	r2, [r3, #40]	@ 0x28
    hltdc->Init.TotalHeigh         = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP + NT35510_480X800_VFP - 1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f203 12a3 	addw	r2, r3, #419	@ 0x1a3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	631a      	str	r2, [r3, #48]	@ 0x30
 8007768:	e01f      	b.n	80077aa <MX_LTDC_Init+0xb6>
  }
  else
  {
    hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	615a      	str	r2, [r3, #20]
    hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2223      	movs	r2, #35	@ 0x23
 8007774:	61da      	str	r2, [r3, #28]
    hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	625a      	str	r2, [r3, #36]	@ 0x24
    hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f103 0245 	add.w	r2, r3, #69	@ 0x45
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	62da      	str	r2, [r3, #44]	@ 0x2c
    hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	619a      	str	r2, [r3, #24]
    hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	220f      	movs	r2, #15
 8007794:	621a      	str	r2, [r3, #32]
    hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f103 020f 	add.w	r2, r3, #15
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	629a      	str	r2, [r3, #40]	@ 0x28
    hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f103 021f 	add.w	r2, r3, #31
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  hltdc->Init.Backcolor.Blue  = 0x00;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0x00;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0x00;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f006 fe3f 	bl	800e446 <HAL_LTDC_Init>
 80077c8:	4603      	mov	r3, r0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	50001000 	.word	0x50001000
 80077d8:	24005f00 	.word	0x24005f00

080077dc <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b092      	sub	sp, #72	@ 0x48
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 8007806:	23ff      	movs	r3, #255	@ 0xff
 8007808:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800780e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007812:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007814:	2307      	movs	r3, #7
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 8007842:	2300      	movs	r3, #0
 8007844:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8007848:	f107 0314 	add.w	r3, r7, #20
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f006 fe9f 	bl	800e594 <HAL_LTDC_ConfigLayer>
 8007856:	4603      	mov	r3, r0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3748      	adds	r7, #72	@ 0x48
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b0b4      	sub	sp, #208	@ 0xd0
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8007868:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800786c:	f04f 0300 	mov.w	r3, #0
 8007870:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8007874:	2305      	movs	r3, #5
 8007876:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8007878:	2384      	movs	r3, #132	@ 0x84
 800787a:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800787c:	2302      	movs	r3, #2
 800787e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q      = 2U;
 8007880:	2302      	movs	r3, #2
 8007882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8007884:	2318      	movs	r3, #24
 8007886:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8007888:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800788c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800788e:	2300      	movs	r3, #0
 8007890:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8007896:	f107 0308 	add.w	r3, r7, #8
 800789a:	4618      	mov	r0, r3
 800789c:	f008 fae6 	bl	800fe6c <HAL_RCCEx_PeriphCLKConfig>
 80078a0:	4603      	mov	r3, r0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	37d0      	adds	r7, #208	@ 0xd0
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80078c0:	f06f 0301 	mvn.w	r3, #1
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	e009      	b.n	80078dc <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80078c8:	4908      	ldr	r1, [pc, #32]	@ (80078ec <BSP_LCD_SetActiveLayer+0x40>)
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	4613      	mov	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	440b      	add	r3, r1
 80078d6:	3308      	adds	r3, #8
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80078dc:	68fb      	ldr	r3, [r7, #12]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	24005ee4 	.word	0x24005ee4

080078f0 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007904:	f06f 0301 	mvn.w	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	e00a      	b.n	8007922 <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800790c:	4908      	ldr	r1, [pc, #32]	@ (8007930 <BSP_LCD_GetPixelFormat+0x40>)
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	4613      	mov	r3, r2
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	1a9b      	subs	r3, r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	440b      	add	r3, r1
 800791a:	330c      	adds	r3, #12
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8007922:	68fb      	ldr	r3, [r7, #12]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	24005ee4 	.word	0x24005ee4

08007934 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007948:	f06f 0301 	mvn.w	r3, #1
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e00e      	b.n	800796e <BSP_LCD_GetXSize+0x3a>
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8007950:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <BSP_LCD_GetXSize+0x48>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <BSP_LCD_GetXSize+0x3a>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800795a:	4909      	ldr	r1, [pc, #36]	@ (8007980 <BSP_LCD_GetXSize+0x4c>)
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	4613      	mov	r3, r2
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	1a9b      	subs	r3, r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	440b      	add	r3, r1
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800796e:	68fb      	ldr	r3, [r7, #12]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	24005db0 	.word	0x24005db0
 8007980:	24005ee4 	.word	0x24005ee4

08007984 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007998:	f06f 0301 	mvn.w	r3, #1
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	e00f      	b.n	80079c0 <BSP_LCD_GetYSize+0x3c>
  }
  else if(Lcd_Drv->GetYSize != NULL)
 80079a0:	4b0b      	ldr	r3, [pc, #44]	@ (80079d0 <BSP_LCD_GetYSize+0x4c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <BSP_LCD_GetYSize+0x3c>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80079aa:	490a      	ldr	r1, [pc, #40]	@ (80079d4 <BSP_LCD_GetYSize+0x50>)
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	1a9b      	subs	r3, r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	3304      	adds	r3, #4
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80079c0:	68fb      	ldr	r3, [r7, #12]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	24005db0 	.word	0x24005db0
 80079d4:	24005ee4 	.word	0x24005ee4

080079d8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80079d8:	b590      	push	{r4, r7, lr}
 80079da:	b08f      	sub	sp, #60	@ 0x3c
 80079dc:	af02      	add	r7, sp, #8
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	330a      	adds	r3, #10
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	330b      	adds	r3, #11
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	441a      	add	r2, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	330c      	adds	r3, #12
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	441a      	add	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	330d      	adds	r3, #13
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	061b      	lsls	r3, r3, #24
 8007a0e:	4413      	add	r3, r2
 8007a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	3312      	adds	r3, #18
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	3313      	adds	r3, #19
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	441a      	add	r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	3314      	adds	r3, #20
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	041b      	lsls	r3, r3, #16
 8007a2c:	441a      	add	r2, r3
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	3315      	adds	r3, #21
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	061b      	lsls	r3, r3, #24
 8007a36:	4413      	add	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	3316      	adds	r3, #22
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	3317      	adds	r3, #23
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	441a      	add	r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	3318      	adds	r3, #24
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	041b      	lsls	r3, r3, #16
 8007a54:	441a      	add	r2, r3
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	3319      	adds	r3, #25
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	061b      	lsls	r3, r3, #24
 8007a5e:	4413      	add	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	331c      	adds	r3, #28
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	331d      	adds	r3, #29
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	021b      	lsls	r3, r3, #8
 8007a72:	4413      	add	r3, r2
 8007a74:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8007a76:	493f      	ldr	r1, [pc, #252]	@ (8007b74 <BSP_LCD_DrawBitmap+0x19c>)
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	1a9b      	subs	r3, r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	440b      	add	r3, r1
 8007a84:	3308      	adds	r3, #8
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a3b      	ldr	r2, [pc, #236]	@ (8007b78 <BSP_LCD_DrawBitmap+0x1a0>)
 8007a8a:	2134      	movs	r1, #52	@ 0x34
 8007a8c:	fb01 f303 	mul.w	r3, r1, r3
 8007a90:	4413      	add	r3, r2
 8007a92:	335c      	adds	r3, #92	@ 0x5c
 8007a94:	6819      	ldr	r1, [r3, #0]
 8007a96:	4837      	ldr	r0, [pc, #220]	@ (8007b74 <BSP_LCD_DrawBitmap+0x19c>)
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	1a9b      	subs	r3, r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4403      	add	r3, r0
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	fb03 f202 	mul.w	r2, r3, r2
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	18d0      	adds	r0, r2, r3
 8007ab0:	4c30      	ldr	r4, [pc, #192]	@ (8007b74 <BSP_LCD_DrawBitmap+0x19c>)
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	1a9b      	subs	r3, r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4423      	add	r3, r4
 8007abe:	3310      	adds	r3, #16
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	fb00 f303 	mul.w	r3, r0, r3
 8007ac6:	440b      	add	r3, r1
 8007ac8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	3b20      	subs	r3, #32
 8007ace:	2b07      	cmp	r3, #7
 8007ad0:	d802      	bhi.n	8007ad8 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad6:	e008      	b.n	8007aea <BSP_LCD_DrawBitmap+0x112>
  }
  else if ((bit_pixel/8U) == 2U)
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	3b10      	subs	r3, #16
 8007adc:	2b07      	cmp	r3, #7
 8007ade:	d802      	bhi.n	8007ae6 <BSP_LCD_DrawBitmap+0x10e>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae4:	e001      	b.n	8007aea <BSP_LCD_DrawBitmap+0x112>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	fb02 f303 	mul.w	r3, r2, r3
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	08d2      	lsrs	r2, r2, #3
 8007af8:	fb03 f202 	mul.w	r2, r3, r2
 8007afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007afe:	4413      	add	r3, r2
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	4413      	add	r3, r2
 8007b04:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8007b06:	2300      	movs	r3, #0
 8007b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b0a:	e029      	b.n	8007b60 <BSP_LCD_DrawBitmap+0x188>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8007b0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	6a39      	ldr	r1, [r7, #32]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fad6 	bl	80080c8 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8007b1c:	4915      	ldr	r1, [pc, #84]	@ (8007b74 <BSP_LCD_DrawBitmap+0x19c>)
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4613      	mov	r3, r2
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	1a9b      	subs	r3, r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	6819      	ldr	r1, [r3, #0]
 8007b2c:	4811      	ldr	r0, [pc, #68]	@ (8007b74 <BSP_LCD_DrawBitmap+0x19c>)
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4613      	mov	r3, r2
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4403      	add	r3, r0
 8007b3a:	3310      	adds	r3, #16
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b44:	4413      	add	r3, r2
 8007b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	08db      	lsrs	r3, r3, #3
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	fb02 f303 	mul.w	r3, r2, r3
 8007b52:	425b      	negs	r3, r3
 8007b54:	6a3a      	ldr	r2, [r7, #32]
 8007b56:	4413      	add	r3, r2
 8007b58:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8007b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d3d1      	bcc.n	8007b0c <BSP_LCD_DrawBitmap+0x134>
  }

  return ret;
 8007b68:	69fb      	ldr	r3, [r7, #28]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3734      	adds	r7, #52	@ 0x34
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd90      	pop	{r4, r7, pc}
 8007b72:	bf00      	nop
 8007b74:	24005ee4 	.word	0x24005ee4
 8007b78:	24005e3c 	.word	0x24005e3c

08007b7c <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
 8007b8e:	e035      	b.n	8007bfc <BSP_LCD_FillRGBRect+0x80>
  {
    for(j = 0; j < Width; j++)
 8007b90:	2300      	movs	r3, #0
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	e02b      	b.n	8007bee <BSP_LCD_FillRGBRect+0x72>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	3302      	adds	r3, #2
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	041b      	lsls	r3, r3, #16
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	3303      	adds	r3, #3
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	061b      	lsls	r3, r3, #24
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	18d1      	adds	r1, r2, r3
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	441a      	add	r2, r3
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 f99e 	bl	8007f0c <BSP_LCD_WritePixel>
      pData += Lcd_Ctx[Instance].BppFactor;
 8007bd0:	490f      	ldr	r1, [pc, #60]	@ (8007c10 <BSP_LCD_FillRGBRect+0x94>)
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	1a9b      	subs	r3, r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	3310      	adds	r3, #16
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	4413      	add	r3, r2
 8007be6:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	3301      	adds	r3, #1
 8007bec:	61bb      	str	r3, [r7, #24]
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d3cf      	bcc.n	8007b96 <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	69fa      	ldr	r2, [r7, #28]
 8007bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d3c5      	bcc.n	8007b90 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3720      	adds	r7, #32
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	24005ee4 	.word	0x24005ee4

08007c14 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8007c14:	b590      	push	{r4, r7, lr}
 8007c16:	b089      	sub	sp, #36	@ 0x24
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8007c22:	4928      	ldr	r1, [pc, #160]	@ (8007cc4 <BSP_LCD_DrawHLine+0xb0>)
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4613      	mov	r3, r2
 8007c28:	00db      	lsls	r3, r3, #3
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	3308      	adds	r3, #8
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a24      	ldr	r2, [pc, #144]	@ (8007cc8 <BSP_LCD_DrawHLine+0xb4>)
 8007c36:	2134      	movs	r1, #52	@ 0x34
 8007c38:	fb01 f303 	mul.w	r3, r1, r3
 8007c3c:	4413      	add	r3, r2
 8007c3e:	335c      	adds	r3, #92	@ 0x5c
 8007c40:	6819      	ldr	r1, [r3, #0]
 8007c42:	4820      	ldr	r0, [pc, #128]	@ (8007cc4 <BSP_LCD_DrawHLine+0xb0>)
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4613      	mov	r3, r2
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4403      	add	r3, r0
 8007c50:	3310      	adds	r3, #16
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	4c1b      	ldr	r4, [pc, #108]	@ (8007cc4 <BSP_LCD_DrawHLine+0xb0>)
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4423      	add	r3, r4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	fb03 f202 	mul.w	r2, r3, r2
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	fb00 f303 	mul.w	r3, r0, r3
 8007c72:	440b      	add	r3, r1
 8007c74:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	18d1      	adds	r1, r2, r3
 8007c7c:	4811      	ldr	r0, [pc, #68]	@ (8007cc4 <BSP_LCD_DrawHLine+0xb0>)
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4403      	add	r3, r0
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4299      	cmp	r1, r3
 8007c8e:	d90a      	bls.n	8007ca6 <BSP_LCD_DrawHLine+0x92>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8007c90:	490c      	ldr	r1, [pc, #48]	@ (8007cc4 <BSP_LCD_DrawHLine+0xb0>)
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4613      	mov	r3, r2
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	1a9b      	subs	r3, r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8007ca6:	6979      	ldr	r1, [r7, #20]
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	9301      	str	r3, [sp, #4]
 8007cac:	2300      	movs	r3, #0
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 f993 	bl	8007fe0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	371c      	adds	r7, #28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd90      	pop	{r4, r7, pc}
 8007cc4:	24005ee4 	.word	0x24005ee4
 8007cc8:	24005e3c 	.word	0x24005e3c

08007ccc <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8007ccc:	b590      	push	{r4, r7, lr}
 8007cce:	b089      	sub	sp, #36	@ 0x24
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8007cda:	492d      	ldr	r1, [pc, #180]	@ (8007d90 <BSP_LCD_DrawVLine+0xc4>)
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	3308      	adds	r3, #8
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a29      	ldr	r2, [pc, #164]	@ (8007d94 <BSP_LCD_DrawVLine+0xc8>)
 8007cee:	2134      	movs	r1, #52	@ 0x34
 8007cf0:	fb01 f303 	mul.w	r3, r1, r3
 8007cf4:	4413      	add	r3, r2
 8007cf6:	335c      	adds	r3, #92	@ 0x5c
 8007cf8:	6819      	ldr	r1, [r3, #0]
 8007cfa:	4825      	ldr	r0, [pc, #148]	@ (8007d90 <BSP_LCD_DrawVLine+0xc4>)
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	1a9b      	subs	r3, r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4403      	add	r3, r0
 8007d08:	3310      	adds	r3, #16
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	4c20      	ldr	r4, [pc, #128]	@ (8007d90 <BSP_LCD_DrawVLine+0xc4>)
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	1a9b      	subs	r3, r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4423      	add	r3, r4
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	fb03 f202 	mul.w	r2, r3, r2
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	4413      	add	r3, r2
 8007d26:	fb00 f303 	mul.w	r3, r0, r3
 8007d2a:	440b      	add	r3, r1
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	18d1      	adds	r1, r2, r3
 8007d34:	4816      	ldr	r0, [pc, #88]	@ (8007d90 <BSP_LCD_DrawVLine+0xc4>)
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4403      	add	r3, r0
 8007d42:	3304      	adds	r3, #4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4299      	cmp	r1, r3
 8007d48:	d90b      	bls.n	8007d62 <BSP_LCD_DrawVLine+0x96>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8007d4a:	4911      	ldr	r1, [pc, #68]	@ (8007d90 <BSP_LCD_DrawVLine+0xc4>)
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	1a9b      	subs	r3, r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	3304      	adds	r3, #4
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	603b      	str	r3, [r7, #0]
  }
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8007d62:	6979      	ldr	r1, [r7, #20]
 8007d64:	480a      	ldr	r0, [pc, #40]	@ (8007d90 <BSP_LCD_DrawVLine+0xc4>)
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	1a9b      	subs	r3, r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4403      	add	r3, r0
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d78:	9201      	str	r2, [sp, #4]
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f92d 	bl	8007fe0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	371c      	adds	r7, #28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd90      	pop	{r4, r7, pc}
 8007d90:	24005ee4 	.word	0x24005ee4
 8007d94:	24005e3c 	.word	0x24005e3c

08007d98 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8007d98:	b590      	push	{r4, r7, lr}
 8007d9a:	b089      	sub	sp, #36	@ 0x24
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8007da6:	4921      	ldr	r1, [pc, #132]	@ (8007e2c <BSP_LCD_FillRect+0x94>)
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4613      	mov	r3, r2
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	1a9b      	subs	r3, r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	440b      	add	r3, r1
 8007db4:	3308      	adds	r3, #8
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e30 <BSP_LCD_FillRect+0x98>)
 8007dba:	2134      	movs	r1, #52	@ 0x34
 8007dbc:	fb01 f303 	mul.w	r3, r1, r3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	335c      	adds	r3, #92	@ 0x5c
 8007dc4:	6819      	ldr	r1, [r3, #0]
 8007dc6:	4819      	ldr	r0, [pc, #100]	@ (8007e2c <BSP_LCD_FillRect+0x94>)
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	1a9b      	subs	r3, r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4403      	add	r3, r0
 8007dd4:	3310      	adds	r3, #16
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	4c14      	ldr	r4, [pc, #80]	@ (8007e2c <BSP_LCD_FillRect+0x94>)
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4423      	add	r3, r4
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	fb03 f202 	mul.w	r2, r3, r2
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4413      	add	r3, r2
 8007df2:	fb00 f303 	mul.w	r3, r0, r3
 8007df6:	440b      	add	r3, r1
 8007df8:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8007dfa:	6979      	ldr	r1, [r7, #20]
 8007dfc:	480b      	ldr	r0, [pc, #44]	@ (8007e2c <BSP_LCD_FillRect+0x94>)
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4613      	mov	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4403      	add	r3, r0
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e12:	9201      	str	r2, [sp, #4]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 f8e0 	bl	8007fe0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd90      	pop	{r4, r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	24005ee4 	.word	0x24005ee4
 8007e30:	24005e3c 	.word	0x24005e3c

08007e34 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007e42:	4930      	ldr	r1, [pc, #192]	@ (8007f04 <BSP_LCD_ReadPixel+0xd0>)
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4613      	mov	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	1a9b      	subs	r3, r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	3308      	adds	r3, #8
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a2c      	ldr	r2, [pc, #176]	@ (8007f08 <BSP_LCD_ReadPixel+0xd4>)
 8007e56:	2134      	movs	r1, #52	@ 0x34
 8007e58:	fb01 f303 	mul.w	r3, r1, r3
 8007e5c:	4413      	add	r3, r2
 8007e5e:	3348      	adds	r3, #72	@ 0x48
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d122      	bne.n	8007eac <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8007e66:	4927      	ldr	r1, [pc, #156]	@ (8007f04 <BSP_LCD_ReadPixel+0xd0>)
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	1a9b      	subs	r3, r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	440b      	add	r3, r1
 8007e74:	3308      	adds	r3, #8
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a23      	ldr	r2, [pc, #140]	@ (8007f08 <BSP_LCD_ReadPixel+0xd4>)
 8007e7a:	2134      	movs	r1, #52	@ 0x34
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	4413      	add	r3, r2
 8007e82:	335c      	adds	r3, #92	@ 0x5c
 8007e84:	6819      	ldr	r1, [r3, #0]
 8007e86:	481f      	ldr	r0, [pc, #124]	@ (8007f04 <BSP_LCD_ReadPixel+0xd0>)
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	1a9b      	subs	r3, r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4403      	add	r3, r0
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	fb03 f202 	mul.w	r2, r3, r2
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	e023      	b.n	8007ef4 <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8007eac:	4915      	ldr	r1, [pc, #84]	@ (8007f04 <BSP_LCD_ReadPixel+0xd0>)
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	440b      	add	r3, r1
 8007eba:	3308      	adds	r3, #8
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a12      	ldr	r2, [pc, #72]	@ (8007f08 <BSP_LCD_ReadPixel+0xd4>)
 8007ec0:	2134      	movs	r1, #52	@ 0x34
 8007ec2:	fb01 f303 	mul.w	r3, r1, r3
 8007ec6:	4413      	add	r3, r2
 8007ec8:	335c      	adds	r3, #92	@ 0x5c
 8007eca:	6819      	ldr	r1, [r3, #0]
 8007ecc:	480d      	ldr	r0, [pc, #52]	@ (8007f04 <BSP_LCD_ReadPixel+0xd0>)
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	1a9b      	subs	r3, r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4403      	add	r3, r0
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	fb03 f202 	mul.w	r2, r3, r2
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	440b      	add	r3, r1
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	24005ee4 	.word	0x24005ee4
 8007f08:	24005e3c 	.word	0x24005e3c

08007f0c <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007f1a:	492f      	ldr	r1, [pc, #188]	@ (8007fd8 <BSP_LCD_WritePixel+0xcc>)
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	1a9b      	subs	r3, r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	440b      	add	r3, r1
 8007f28:	3308      	adds	r3, #8
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8007fdc <BSP_LCD_WritePixel+0xd0>)
 8007f2e:	2134      	movs	r1, #52	@ 0x34
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	4413      	add	r3, r2
 8007f36:	3348      	adds	r3, #72	@ 0x48
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d122      	bne.n	8007f84 <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007f3e:	4926      	ldr	r1, [pc, #152]	@ (8007fd8 <BSP_LCD_WritePixel+0xcc>)
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4613      	mov	r3, r2
 8007f44:	00db      	lsls	r3, r3, #3
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a22      	ldr	r2, [pc, #136]	@ (8007fdc <BSP_LCD_WritePixel+0xd0>)
 8007f52:	2134      	movs	r1, #52	@ 0x34
 8007f54:	fb01 f303 	mul.w	r3, r1, r3
 8007f58:	4413      	add	r3, r2
 8007f5a:	335c      	adds	r3, #92	@ 0x5c
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	481e      	ldr	r0, [pc, #120]	@ (8007fd8 <BSP_LCD_WritePixel+0xcc>)
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4613      	mov	r3, r2
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	1a9b      	subs	r3, r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4403      	add	r3, r0
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	fb03 f202 	mul.w	r2, r3, r2
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	e021      	b.n	8007fc8 <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007f84:	4914      	ldr	r1, [pc, #80]	@ (8007fd8 <BSP_LCD_WritePixel+0xcc>)
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	1a9b      	subs	r3, r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	3308      	adds	r3, #8
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a11      	ldr	r2, [pc, #68]	@ (8007fdc <BSP_LCD_WritePixel+0xd0>)
 8007f98:	2134      	movs	r1, #52	@ 0x34
 8007f9a:	fb01 f303 	mul.w	r3, r1, r3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	335c      	adds	r3, #92	@ 0x5c
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	480c      	ldr	r0, [pc, #48]	@ (8007fd8 <BSP_LCD_WritePixel+0xcc>)
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4403      	add	r3, r0
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	fb03 f202 	mul.w	r2, r3, r2
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	440b      	add	r3, r1
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	b292      	uxth	r2, r2
 8007fc6:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	24005ee4 	.word	0x24005ee4
 8007fdc:	24005e3c 	.word	0x24005e3c

08007fe0 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8007ff2:	4932      	ldr	r1, [pc, #200]	@ (80080bc <LL_FillBuffer+0xdc>)
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	440b      	add	r3, r1
 8008000:	330c      	adds	r3, #12
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d129      	bne.n	800805c <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8008008:	2302      	movs	r3, #2
 800800a:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	0adb      	lsrs	r3, r3, #11
 8008010:	f003 021f 	and.w	r2, r3, #31
 8008014:	4613      	mov	r3, r2
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	4413      	add	r3, r2
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	3317      	adds	r3, #23
 8008020:	099b      	lsrs	r3, r3, #6
 8008022:	0419      	lsls	r1, r3, #16
 8008024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008026:	095b      	lsrs	r3, r3, #5
 8008028:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800802c:	4613      	mov	r3, r2
 800802e:	01db      	lsls	r3, r3, #7
 8008030:	4413      	add	r3, r2
 8008032:	005b      	lsls	r3, r3, #1
 8008034:	4413      	add	r3, r2
 8008036:	3321      	adds	r3, #33	@ 0x21
 8008038:	099b      	lsrs	r3, r3, #6
 800803a:	021b      	lsls	r3, r3, #8
 800803c:	4319      	orrs	r1, r3
 800803e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008040:	f003 021f 	and.w	r2, r3, #31
 8008044:	4613      	mov	r3, r2
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	4413      	add	r3, r2
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	3317      	adds	r3, #23
 8008050:	099b      	lsrs	r3, r3, #6
 8008052:	430b      	orrs	r3, r1
 8008054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008058:	613b      	str	r3, [r7, #16]
    break;
 800805a:	e002      	b.n	8008062 <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]
    break;
 8008060:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8008062:	4b17      	ldr	r3, [pc, #92]	@ (80080c0 <LL_FillBuffer+0xe0>)
 8008064:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8008068:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800806a:	4a15      	ldr	r2, [pc, #84]	@ (80080c0 <LL_FillBuffer+0xe0>)
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8008070:	4a13      	ldr	r2, [pc, #76]	@ (80080c0 <LL_FillBuffer+0xe0>)
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8008076:	4b12      	ldr	r3, [pc, #72]	@ (80080c0 <LL_FillBuffer+0xe0>)
 8008078:	4a12      	ldr	r2, [pc, #72]	@ (80080c4 <LL_FillBuffer+0xe4>)
 800807a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800807c:	4810      	ldr	r0, [pc, #64]	@ (80080c0 <LL_FillBuffer+0xe0>)
 800807e:	f003 ff7b 	bl	800bf78 <HAL_DMA2D_Init>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d115      	bne.n	80080b4 <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8008088:	2101      	movs	r1, #1
 800808a:	480d      	ldr	r0, [pc, #52]	@ (80080c0 <LL_FillBuffer+0xe0>)
 800808c:	f004 f8f6 	bl	800c27c <HAL_DMA2D_ConfigLayer>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10e      	bne.n	80080b4 <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6939      	ldr	r1, [r7, #16]
 80080a0:	4807      	ldr	r0, [pc, #28]	@ (80080c0 <LL_FillBuffer+0xe0>)
 80080a2:	f003 ffd7 	bl	800c054 <HAL_DMA2D_Start>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d103      	bne.n	80080b4 <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80080ac:	2119      	movs	r1, #25
 80080ae:	4804      	ldr	r0, [pc, #16]	@ (80080c0 <LL_FillBuffer+0xe0>)
 80080b0:	f003 fffb 	bl	800c0aa <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80080b4:	bf00      	nop
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	24005ee4 	.word	0x24005ee4
 80080c0:	24005dd4 	.word	0x24005dd4
 80080c4:	52001000 	.word	0x52001000

080080c8 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b088      	sub	sp, #32
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 80080d6:	4925      	ldr	r1, [pc, #148]	@ (800816c <LL_ConvertLineToRGB+0xa4>)
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4613      	mov	r3, r2
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	1a9b      	subs	r3, r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	330c      	adds	r3, #12
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d102      	bne.n	80080f2 <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80080ec:	2302      	movs	r3, #2
 80080ee:	617b      	str	r3, [r7, #20]
    break;
 80080f0:	e002      	b.n	80080f8 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]
    break;
 80080f6:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80080f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 80080fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80080fe:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8008100:	4a1b      	ldr	r2, [pc, #108]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8008106:	4b1a      	ldr	r3, [pc, #104]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 8008108:	2200      	movs	r2, #0
 800810a:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800810c:	4b18      	ldr	r3, [pc, #96]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 800810e:	2200      	movs	r2, #0
 8008110:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8008112:	4b17      	ldr	r3, [pc, #92]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 8008114:	22ff      	movs	r2, #255	@ 0xff
 8008116:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8008118:	4a15      	ldr	r2, [pc, #84]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800811e:	4b14      	ldr	r3, [pc, #80]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 8008120:	2200      	movs	r2, #0
 8008122:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 8008124:	4b12      	ldr	r3, [pc, #72]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 8008126:	4a13      	ldr	r2, [pc, #76]	@ (8008174 <LL_ConvertLineToRGB+0xac>)
 8008128:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800812a:	4811      	ldr	r0, [pc, #68]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 800812c:	f003 ff24 	bl	800bf78 <HAL_DMA2D_Init>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d115      	bne.n	8008162 <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8008136:	2101      	movs	r1, #1
 8008138:	480d      	ldr	r0, [pc, #52]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 800813a:	f004 f89f 	bl	800c27c <HAL_DMA2D_ConfigLayer>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10e      	bne.n	8008162 <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	2301      	movs	r3, #1
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	4808      	ldr	r0, [pc, #32]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 8008150:	f003 ff80 	bl	800c054 <HAL_DMA2D_Start>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d103      	bne.n	8008162 <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800815a:	2132      	movs	r1, #50	@ 0x32
 800815c:	4804      	ldr	r0, [pc, #16]	@ (8008170 <LL_ConvertLineToRGB+0xa8>)
 800815e:	f003 ffa4 	bl	800c0aa <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8008162:	bf00      	nop
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	24005ee4 	.word	0x24005ee4
 8008170:	24005dd4 	.word	0x24005dd4
 8008174:	52001000 	.word	0x52001000

08008178 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance == LTDC)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a13      	ldr	r2, [pc, #76]	@ (80081d4 <LTDC_MspInit+0x5c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d11e      	bne.n	80081c8 <LTDC_MspInit+0x50>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800818a:	4b13      	ldr	r3, [pc, #76]	@ (80081d8 <LTDC_MspInit+0x60>)
 800818c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008190:	4a11      	ldr	r2, [pc, #68]	@ (80081d8 <LTDC_MspInit+0x60>)
 8008192:	f043 0308 	orr.w	r3, r3, #8
 8008196:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800819a:	4b0f      	ldr	r3, [pc, #60]	@ (80081d8 <LTDC_MspInit+0x60>)
 800819c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081a0:	f003 0308 	and.w	r3, r3, #8
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	68fb      	ldr	r3, [r7, #12]


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 80081a8:	4b0b      	ldr	r3, [pc, #44]	@ (80081d8 <LTDC_MspInit+0x60>)
 80081aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081ae:	4a0a      	ldr	r2, [pc, #40]	@ (80081d8 <LTDC_MspInit+0x60>)
 80081b0:	f043 0308 	orr.w	r3, r3, #8
 80081b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80081b8:	4b07      	ldr	r3, [pc, #28]	@ (80081d8 <LTDC_MspInit+0x60>)
 80081ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081be:	4a06      	ldr	r2, [pc, #24]	@ (80081d8 <LTDC_MspInit+0x60>)
 80081c0:	f023 0308 	bic.w	r3, r3, #8
 80081c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 80081c8:	bf00      	nop
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	50001000 	.word	0x50001000
 80081d8:	58024400 	.word	0x58024400

080081dc <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a11      	ldr	r2, [pc, #68]	@ (8008230 <DMA2D_MspInit+0x54>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d11a      	bne.n	8008224 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80081ee:	4b11      	ldr	r3, [pc, #68]	@ (8008234 <DMA2D_MspInit+0x58>)
 80081f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80081f4:	4a0f      	ldr	r2, [pc, #60]	@ (8008234 <DMA2D_MspInit+0x58>)
 80081f6:	f043 0310 	orr.w	r3, r3, #16
 80081fa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80081fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008234 <DMA2D_MspInit+0x58>)
 8008200:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008204:	f003 0310 	and.w	r3, r3, #16
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 800820c:	4b09      	ldr	r3, [pc, #36]	@ (8008234 <DMA2D_MspInit+0x58>)
 800820e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008210:	4a08      	ldr	r2, [pc, #32]	@ (8008234 <DMA2D_MspInit+0x58>)
 8008212:	f043 0310 	orr.w	r3, r3, #16
 8008216:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8008218:	4b06      	ldr	r3, [pc, #24]	@ (8008234 <DMA2D_MspInit+0x58>)
 800821a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800821c:	4a05      	ldr	r2, [pc, #20]	@ (8008234 <DMA2D_MspInit+0x58>)
 800821e:	f023 0310 	bic.w	r3, r3, #16
 8008222:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	52001000 	.word	0x52001000
 8008234:	58024400 	.word	0x58024400

08008238 <DSI_MspInit>:
  * @brief  Initialize the BSP DSI Msp.
  * @param  hdsi  DSI handle
  * @retval None
  */
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance == DSI)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008248:	d11e      	bne.n	8008288 <DSI_MspInit+0x50>
  {
    /** Enable DSI Host and wrapper clocks */
    __HAL_RCC_DSI_CLK_ENABLE();
 800824a:	4b12      	ldr	r3, [pc, #72]	@ (8008294 <DSI_MspInit+0x5c>)
 800824c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008250:	4a10      	ldr	r2, [pc, #64]	@ (8008294 <DSI_MspInit+0x5c>)
 8008252:	f043 0310 	orr.w	r3, r3, #16
 8008256:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800825a:	4b0e      	ldr	r3, [pc, #56]	@ (8008294 <DSI_MspInit+0x5c>)
 800825c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	68fb      	ldr	r3, [r7, #12]

    /** Soft Reset the DSI Host and wrapper */
    __HAL_RCC_DSI_FORCE_RESET();
 8008268:	4b0a      	ldr	r3, [pc, #40]	@ (8008294 <DSI_MspInit+0x5c>)
 800826a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800826e:	4a09      	ldr	r2, [pc, #36]	@ (8008294 <DSI_MspInit+0x5c>)
 8008270:	f043 0310 	orr.w	r3, r3, #16
 8008274:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8008278:	4b06      	ldr	r3, [pc, #24]	@ (8008294 <DSI_MspInit+0x5c>)
 800827a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800827e:	4a05      	ldr	r2, [pc, #20]	@ (8008294 <DSI_MspInit+0x5c>)
 8008280:	f023 0310 	bic.w	r3, r3, #16
 8008284:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	58024400 	.word	0x58024400

08008298 <DSI_IO_Write>:
  * @param  pData pointer to a buffer of data to be write
  * @param  Size To precise command to be used (short or long)
  * @retval BSP status
  */
static int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af02      	add	r7, sp, #8
 800829e:	60ba      	str	r2, [r7, #8]
 80082a0:	461a      	mov	r2, r3
 80082a2:	4603      	mov	r3, r0
 80082a4:	81fb      	strh	r3, [r7, #14]
 80082a6:	460b      	mov	r3, r1
 80082a8:	81bb      	strh	r3, [r7, #12]
 80082aa:	4613      	mov	r3, r2
 80082ac:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]

  if(Size <= 1U)
 80082b2:	88fb      	ldrh	r3, [r7, #6]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d812      	bhi.n	80082de <DSI_IO_Write+0x46>
  {
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80082b8:	89f9      	ldrh	r1, [r7, #14]
 80082ba:	89b8      	ldrh	r0, [r7, #12]
 80082bc:	88fb      	ldrh	r3, [r7, #6]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	4413      	add	r3, r2
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	4603      	mov	r3, r0
 80082c8:	2215      	movs	r2, #21
 80082ca:	4810      	ldr	r0, [pc, #64]	@ (800830c <DSI_IO_Write+0x74>)
 80082cc:	f004 fd60 	bl	800cd90 <HAL_DSI_ShortWrite>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d014      	beq.n	8008300 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80082d6:	f06f 0307 	mvn.w	r3, #7
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e010      	b.n	8008300 <DSI_IO_Write+0x68>
    }
  }
  else
  {
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80082de:	89f9      	ldrh	r1, [r7, #14]
 80082e0:	88f8      	ldrh	r0, [r7, #6]
 80082e2:	89bb      	ldrh	r3, [r7, #12]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	9201      	str	r2, [sp, #4]
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	4603      	mov	r3, r0
 80082ec:	2239      	movs	r2, #57	@ 0x39
 80082ee:	4807      	ldr	r0, [pc, #28]	@ (800830c <DSI_IO_Write+0x74>)
 80082f0:	f004 fd70 	bl	800cdd4 <HAL_DSI_LongWrite>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80082fa:	f06f 0307 	mvn.w	r3, #7
 80082fe:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008300:	697b      	ldr	r3, [r7, #20]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	24005db8 	.word	0x24005db8

08008310 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08a      	sub	sp, #40	@ 0x28
 8008314:	af04      	add	r7, sp, #16
 8008316:	60ba      	str	r2, [r7, #8]
 8008318:	461a      	mov	r2, r3
 800831a:	4603      	mov	r3, r0
 800831c:	81fb      	strh	r3, [r7, #14]
 800831e:	460b      	mov	r3, r1
 8008320:	81bb      	strh	r3, [r7, #12]
 8008322:	4613      	mov	r3, r2
 8008324:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800832a:	89f9      	ldrh	r1, [r7, #14]
 800832c:	88f8      	ldrh	r0, [r7, #6]
 800832e:	89bb      	ldrh	r3, [r7, #12]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	9202      	str	r2, [sp, #8]
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	2306      	movs	r3, #6
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	4603      	mov	r3, r0
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	4807      	ldr	r0, [pc, #28]	@ (800835c <DSI_IO_Read+0x4c>)
 8008340:	f004 fde0 	bl	800cf04 <HAL_DSI_Read>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <DSI_IO_Read+0x40>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800834a:	f06f 0307 	mvn.w	r3, #7
 800834e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8008350:	697b      	ldr	r3, [r7, #20]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	24005db8 	.word	0x24005db8

08008360 <NT35510_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
int32_t NT35510_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t id = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	61bb      	str	r3, [r7, #24]
  NT35510_IO_t              IOCtx;
  static NT35510_Object_t   NT35510Obj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 8008372:	4b22      	ldr	r3, [pc, #136]	@ (80083fc <NT35510_Probe+0x9c>)
 8008374:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 8008376:	4b22      	ldr	r3, [pc, #136]	@ (8008400 <NT35510_Probe+0xa0>)
 8008378:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 800837a:	4b22      	ldr	r3, [pc, #136]	@ (8008404 <NT35510_Probe+0xa4>)
 800837c:	613b      	str	r3, [r7, #16]

  if(NT35510_RegisterBusIO(&NT35510Obj, &IOCtx) != NT35510_OK)
 800837e:	f107 0308 	add.w	r3, r7, #8
 8008382:	4619      	mov	r1, r3
 8008384:	4820      	ldr	r0, [pc, #128]	@ (8008408 <NT35510_Probe+0xa8>)
 8008386:	f7f8 f97d 	bl	8000684 <NT35510_RegisterBusIO>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <NT35510_Probe+0x38>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8008390:	f06f 0307 	mvn.w	r3, #7
 8008394:	61fb      	str	r3, [r7, #28]
 8008396:	e02c      	b.n	80083f2 <NT35510_Probe+0x92>
  }
  else
  {
    Lcd_CompObj = &NT35510Obj;
 8008398:	4b1c      	ldr	r3, [pc, #112]	@ (800840c <NT35510_Probe+0xac>)
 800839a:	4a1b      	ldr	r2, [pc, #108]	@ (8008408 <NT35510_Probe+0xa8>)
 800839c:	601a      	str	r2, [r3, #0]

    if(NT35510_ReadID(Lcd_CompObj, &id) != NT35510_OK)
 800839e:	4b1b      	ldr	r3, [pc, #108]	@ (800840c <NT35510_Probe+0xac>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f107 0218 	add.w	r2, r7, #24
 80083a6:	4611      	mov	r1, r2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7f8 fc03 	bl	8000bb4 <NT35510_ReadID>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <NT35510_Probe+0x5c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80083b4:	f06f 0304 	mvn.w	r3, #4
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	e01a      	b.n	80083f2 <NT35510_Probe+0x92>
    }
    else if (id != NT35510_ID)
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	2b80      	cmp	r3, #128	@ 0x80
 80083c0:	d003      	beq.n	80083ca <NT35510_Probe+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80083c2:	f06f 0306 	mvn.w	r3, #6
 80083c6:	61fb      	str	r3, [r7, #28]
 80083c8:	e013      	b.n	80083f2 <NT35510_Probe+0x92>
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &NT35510_LCD_Driver;
 80083ca:	4b11      	ldr	r3, [pc, #68]	@ (8008410 <NT35510_Probe+0xb0>)
 80083cc:	4a11      	ldr	r2, [pc, #68]	@ (8008414 <NT35510_Probe+0xb4>)
 80083ce:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != NT35510_OK)
 80083d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008410 <NT35510_Probe+0xb0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a0d      	ldr	r2, [pc, #52]	@ (800840c <NT35510_Probe+0xac>)
 80083d8:	6810      	ldr	r0, [r2, #0]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4798      	blx	r3
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <NT35510_Probe+0x8e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80083e6:	f06f 0304 	mvn.w	r3, #4
 80083ea:	61fb      	str	r3, [r7, #28]
 80083ec:	e001      	b.n	80083f2 <NT35510_Probe+0x92>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 80083f2:	69fb      	ldr	r3, [r7, #28]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3720      	adds	r7, #32
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	08006a19 	.word	0x08006a19
 8008400:	08008299 	.word	0x08008299
 8008404:	08008311 	.word	0x08008311
 8008408:	24005f04 	.word	0x24005f04
 800840c:	24005db4 	.word	0x24005db4
 8008410:	24005db0 	.word	0x24005db0
 8008414:	24000408 	.word	0x24000408

08008418 <OTM8009A_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OTM8009A_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t id = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	61bb      	str	r3, [r7, #24]
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 800842a:	4b22      	ldr	r3, [pc, #136]	@ (80084b4 <OTM8009A_Probe+0x9c>)
 800842c:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 800842e:	4b22      	ldr	r3, [pc, #136]	@ (80084b8 <OTM8009A_Probe+0xa0>)
 8008430:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 8008432:	4b22      	ldr	r3, [pc, #136]	@ (80084bc <OTM8009A_Probe+0xa4>)
 8008434:	613b      	str	r3, [r7, #16]

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8008436:	f107 0308 	add.w	r3, r7, #8
 800843a:	4619      	mov	r1, r3
 800843c:	4820      	ldr	r0, [pc, #128]	@ (80084c0 <OTM8009A_Probe+0xa8>)
 800843e:	f7f8 fe11 	bl	8001064 <OTM8009A_RegisterBusIO>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <OTM8009A_Probe+0x38>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8008448:	f06f 0307 	mvn.w	r3, #7
 800844c:	61fb      	str	r3, [r7, #28]
 800844e:	e02c      	b.n	80084aa <OTM8009A_Probe+0x92>
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8008450:	4b1c      	ldr	r3, [pc, #112]	@ (80084c4 <OTM8009A_Probe+0xac>)
 8008452:	4a1b      	ldr	r2, [pc, #108]	@ (80084c0 <OTM8009A_Probe+0xa8>)
 8008454:	601a      	str	r2, [r3, #0]

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8008456:	4b1b      	ldr	r3, [pc, #108]	@ (80084c4 <OTM8009A_Probe+0xac>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f107 0218 	add.w	r2, r7, #24
 800845e:	4611      	mov	r1, r2
 8008460:	4618      	mov	r0, r3
 8008462:	f7f9 fc03 	bl	8001c6c <OTM8009A_ReadID>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <OTM8009A_Probe+0x5c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800846c:	f06f 0304 	mvn.w	r3, #4
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	e01a      	b.n	80084aa <OTM8009A_Probe+0x92>
    }
    else if (id != OTM8009A_ID)
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2b40      	cmp	r3, #64	@ 0x40
 8008478:	d003      	beq.n	8008482 <OTM8009A_Probe+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800847a:	f06f 0306 	mvn.w	r3, #6
 800847e:	61fb      	str	r3, [r7, #28]
 8008480:	e013      	b.n	80084aa <OTM8009A_Probe+0x92>
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8008482:	4b11      	ldr	r3, [pc, #68]	@ (80084c8 <OTM8009A_Probe+0xb0>)
 8008484:	4a11      	ldr	r2, [pc, #68]	@ (80084cc <OTM8009A_Probe+0xb4>)
 8008486:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8008488:	4b0f      	ldr	r3, [pc, #60]	@ (80084c8 <OTM8009A_Probe+0xb0>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a0d      	ldr	r2, [pc, #52]	@ (80084c4 <OTM8009A_Probe+0xac>)
 8008490:	6810      	ldr	r0, [r2, #0]
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	4798      	blx	r3
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <OTM8009A_Probe+0x8e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800849e:	f06f 0304 	mvn.w	r3, #4
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	e001      	b.n	80084aa <OTM8009A_Probe+0x92>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 80084aa:	69fb      	ldr	r3, [r7, #28]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3720      	adds	r7, #32
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	08006a19 	.word	0x08006a19
 80084b8:	08008299 	.word	0x08008299
 80084bc:	08008311 	.word	0x08008311
 80084c0:	24005f24 	.word	0x24005f24
 80084c4:	24005db4 	.word	0x24005db4
 80084c8:	24005db0 	.word	0x24005db0
 80084cc:	24000454 	.word	0x24000454

080084d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a06      	ldr	r2, [pc, #24]	@ (80084f4 <HAL_SD_TxCpltCallback+0x24>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	bf14      	ite	ne
 80084e0:	2301      	movne	r3, #1
 80084e2:	2300      	moveq	r3, #0
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fc fa92 	bl	8004a10 <BSP_SD_WriteCpltCallback>
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	24005f44 	.word	0x24005f44

080084f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a06      	ldr	r2, [pc, #24]	@ (800851c <HAL_SD_RxCpltCallback+0x24>)
 8008504:	4293      	cmp	r3, r2
 8008506:	bf14      	ite	ne
 8008508:	2301      	movne	r3, #1
 800850a:	2300      	moveq	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	4618      	mov	r0, r3
 8008510:	f7fc fa8e 	bl	8004a30 <BSP_SD_ReadCpltCallback>
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	24005f44 	.word	0x24005f44

08008520 <BSP_SD_IRQHandler>:
  * @brief  This function handles SDMMC interrupt requests.
  * @param  Instance  SD Instance
  * @retval None
  */
void BSP_SD_IRQHandler(uint32_t Instance)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  HAL_SD_IRQHandler(&hsd_sdmmc[Instance]);
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	015b      	lsls	r3, r3, #5
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4a04      	ldr	r2, [pc, #16]	@ (8008544 <BSP_SD_IRQHandler+0x24>)
 8008534:	4413      	add	r3, r2
 8008536:	4618      	mov	r0, r3
 8008538:	f00b f986 	bl	8013848 <HAL_SD_IRQHandler>
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	24005f44 	.word	0x24005f44

08008548 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8008556:	f06f 0301 	mvn.w	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	e033      	b.n	80085c6 <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 800855e:	481c      	ldr	r0, [pc, #112]	@ (80085d0 <BSP_SDRAM_Init+0x88>)
 8008560:	f000 f89a 	bl	8008698 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8008564:	481a      	ldr	r0, [pc, #104]	@ (80085d0 <BSP_SDRAM_Init+0x88>)
 8008566:	f000 f837 	bl	80085d8 <MX_SDRAM_Init>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 8008570:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	e026      	b.n	80085c6 <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8008578:	4b16      	ldr	r3, [pc, #88]	@ (80085d4 <BSP_SDRAM_Init+0x8c>)
 800857a:	2208      	movs	r2, #8
 800857c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800857e:	4b15      	ldr	r3, [pc, #84]	@ (80085d4 <BSP_SDRAM_Init+0x8c>)
 8008580:	2203      	movs	r2, #3
 8008582:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8008584:	4b13      	ldr	r3, [pc, #76]	@ (80085d4 <BSP_SDRAM_Init+0x8c>)
 8008586:	f240 6203 	movw	r2, #1539	@ 0x603
 800858a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800858c:	4b11      	ldr	r3, [pc, #68]	@ (80085d4 <BSP_SDRAM_Init+0x8c>)
 800858e:	2200      	movs	r2, #0
 8008590:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8008592:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <BSP_SDRAM_Init+0x8c>)
 8008594:	2200      	movs	r2, #0
 8008596:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8008598:	4b0e      	ldr	r3, [pc, #56]	@ (80085d4 <BSP_SDRAM_Init+0x8c>)
 800859a:	2230      	movs	r2, #48	@ 0x30
 800859c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800859e:	4b0d      	ldr	r3, [pc, #52]	@ (80085d4 <BSP_SDRAM_Init+0x8c>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80085a4:	4b0b      	ldr	r3, [pc, #44]	@ (80085d4 <BSP_SDRAM_Init+0x8c>)
 80085a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085aa:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80085ac:	4909      	ldr	r1, [pc, #36]	@ (80085d4 <BSP_SDRAM_Init+0x8c>)
 80085ae:	4808      	ldr	r0, [pc, #32]	@ (80085d0 <BSP_SDRAM_Init+0x88>)
 80085b0:	f7f7 ff5c 	bl	800046c <IS42S32800J_Init>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80085ba:	f06f 0304 	mvn.w	r3, #4
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	e001      	b.n	80085c6 <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80085c6:	68fb      	ldr	r3, [r7, #12]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	24005fc0 	.word	0x24005fc0
 80085d4:	24005ff4 	.word	0x24005ff4

080085d8 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08a      	sub	sp, #40	@ 0x28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a20      	ldr	r2, [pc, #128]	@ (8008664 <MX_SDRAM_Init+0x8c>)
 80085e4:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2204      	movs	r2, #4
 80085f6:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2220      	movs	r2, #32
 80085fc:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2240      	movs	r2, #64	@ 0x40
 8008602:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800860a:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008618:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008620:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8008622:	4b11      	ldr	r3, [pc, #68]	@ (8008668 <MX_SDRAM_Init+0x90>)
 8008624:	2200      	movs	r2, #0
 8008626:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8008628:	2302      	movs	r3, #2
 800862a:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800862c:	2307      	movs	r3, #7
 800862e:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 8008630:	2304      	movs	r3, #4
 8008632:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 8008634:	2307      	movs	r3, #7
 8008636:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 8008638:	2302      	movs	r3, #2
 800863a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 800863c:	2302      	movs	r3, #2
 800863e:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 8008640:	2302      	movs	r3, #2
 8008642:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8008644:	f107 030c 	add.w	r3, r7, #12
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f00b fb76 	bl	8013d3c <HAL_SDRAM_Init>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e000      	b.n	800865c <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3728      	adds	r7, #40	@ 0x28
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	52004140 	.word	0x52004140
 8008668:	24005fc0 	.word	0x24005fc0

0800866c <BSP_SDRAM_IRQHandler>:
/**
  * @brief  This function handles MDMA_MDMA_Channel0 for SDRAM interrupt request.
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8008674:	4a07      	ldr	r2, [pc, #28]	@ (8008694 <BSP_SDRAM_IRQHandler+0x28>)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2134      	movs	r1, #52	@ 0x34
 800867a:	fb01 f303 	mul.w	r3, r1, r3
 800867e:	4413      	add	r3, r2
 8008680:	3330      	adds	r3, #48	@ 0x30
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f006 f9dd 	bl	800ea44 <HAL_MDMA_IRQHandler>
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	24005fc0 	.word	0x24005fc0

08008698 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b090      	sub	sp, #64	@ 0x40
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80086a0:	4b7f      	ldr	r3, [pc, #508]	@ (80088a0 <SDRAM_MspInit+0x208>)
 80086a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80086a6:	4a7e      	ldr	r2, [pc, #504]	@ (80088a0 <SDRAM_MspInit+0x208>)
 80086a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80086ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80086b0:	4b7b      	ldr	r3, [pc, #492]	@ (80088a0 <SDRAM_MspInit+0x208>)
 80086b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80086b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80086be:	4b78      	ldr	r3, [pc, #480]	@ (80088a0 <SDRAM_MspInit+0x208>)
 80086c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80086c4:	4a76      	ldr	r2, [pc, #472]	@ (80088a0 <SDRAM_MspInit+0x208>)
 80086c6:	f043 0301 	orr.w	r3, r3, #1
 80086ca:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80086ce:	4b74      	ldr	r3, [pc, #464]	@ (80088a0 <SDRAM_MspInit+0x208>)
 80086d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80086dc:	4b70      	ldr	r3, [pc, #448]	@ (80088a0 <SDRAM_MspInit+0x208>)
 80086de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086e2:	4a6f      	ldr	r2, [pc, #444]	@ (80088a0 <SDRAM_MspInit+0x208>)
 80086e4:	f043 0308 	orr.w	r3, r3, #8
 80086e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80086ec:	4b6c      	ldr	r3, [pc, #432]	@ (80088a0 <SDRAM_MspInit+0x208>)
 80086ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	623b      	str	r3, [r7, #32]
 80086f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80086fa:	4b69      	ldr	r3, [pc, #420]	@ (80088a0 <SDRAM_MspInit+0x208>)
 80086fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008700:	4a67      	ldr	r2, [pc, #412]	@ (80088a0 <SDRAM_MspInit+0x208>)
 8008702:	f043 0310 	orr.w	r3, r3, #16
 8008706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800870a:	4b65      	ldr	r3, [pc, #404]	@ (80088a0 <SDRAM_MspInit+0x208>)
 800870c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008718:	4b61      	ldr	r3, [pc, #388]	@ (80088a0 <SDRAM_MspInit+0x208>)
 800871a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800871e:	4a60      	ldr	r2, [pc, #384]	@ (80088a0 <SDRAM_MspInit+0x208>)
 8008720:	f043 0320 	orr.w	r3, r3, #32
 8008724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008728:	4b5d      	ldr	r3, [pc, #372]	@ (80088a0 <SDRAM_MspInit+0x208>)
 800872a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	61bb      	str	r3, [r7, #24]
 8008734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008736:	4b5a      	ldr	r3, [pc, #360]	@ (80088a0 <SDRAM_MspInit+0x208>)
 8008738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800873c:	4a58      	ldr	r2, [pc, #352]	@ (80088a0 <SDRAM_MspInit+0x208>)
 800873e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008746:	4b56      	ldr	r3, [pc, #344]	@ (80088a0 <SDRAM_MspInit+0x208>)
 8008748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800874c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008754:	4b52      	ldr	r3, [pc, #328]	@ (80088a0 <SDRAM_MspInit+0x208>)
 8008756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800875a:	4a51      	ldr	r2, [pc, #324]	@ (80088a0 <SDRAM_MspInit+0x208>)
 800875c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008764:	4b4e      	ldr	r3, [pc, #312]	@ (80088a0 <SDRAM_MspInit+0x208>)
 8008766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800876a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008772:	4b4b      	ldr	r3, [pc, #300]	@ (80088a0 <SDRAM_MspInit+0x208>)
 8008774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008778:	4a49      	ldr	r2, [pc, #292]	@ (80088a0 <SDRAM_MspInit+0x208>)
 800877a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800877e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008782:	4b47      	ldr	r3, [pc, #284]	@ (80088a0 <SDRAM_MspInit+0x208>)
 8008784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008790:	2302      	movs	r3, #2
 8008792:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008794:	2301      	movs	r3, #1
 8008796:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008798:	2303      	movs	r3, #3
 800879a:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800879c:	230c      	movs	r3, #12
 800879e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80087a0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80087a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80087a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80087aa:	4619      	mov	r1, r3
 80087ac:	483d      	ldr	r0, [pc, #244]	@ (80088a4 <SDRAM_MspInit+0x20c>)
 80087ae:	f004 fcdd 	bl	800d16c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80087b2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80087b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80087b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80087bc:	4619      	mov	r1, r3
 80087be:	483a      	ldr	r0, [pc, #232]	@ (80088a8 <SDRAM_MspInit+0x210>)
 80087c0:	f004 fcd4 	bl	800d16c <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80087c4:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80087c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80087ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80087ce:	4619      	mov	r1, r3
 80087d0:	4836      	ldr	r0, [pc, #216]	@ (80088ac <SDRAM_MspInit+0x214>)
 80087d2:	f004 fccb 	bl	800d16c <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80087d6:	f248 1337 	movw	r3, #33079	@ 0x8137
 80087da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80087dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80087e0:	4619      	mov	r1, r3
 80087e2:	4833      	ldr	r0, [pc, #204]	@ (80088b0 <SDRAM_MspInit+0x218>)
 80087e4:	f004 fcc2 	bl	800d16c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80087e8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80087ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80087ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80087f2:	4619      	mov	r1, r3
 80087f4:	482f      	ldr	r0, [pc, #188]	@ (80088b4 <SDRAM_MspInit+0x21c>)
 80087f6:	f004 fcb9 	bl	800d16c <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80087fa:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 80087fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008800:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008804:	4619      	mov	r1, r3
 8008806:	482c      	ldr	r0, [pc, #176]	@ (80088b8 <SDRAM_MspInit+0x220>)
 8008808:	f004 fcb0 	bl	800d16c <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800880c:	4b2b      	ldr	r3, [pc, #172]	@ (80088bc <SDRAM_MspInit+0x224>)
 800880e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008812:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8008814:	4b29      	ldr	r3, [pc, #164]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800881a:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800881c:	4b27      	ldr	r3, [pc, #156]	@ (80088bc <SDRAM_MspInit+0x224>)
 800881e:	2280      	movs	r2, #128	@ 0x80
 8008820:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8008822:	4b26      	ldr	r3, [pc, #152]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008824:	2200      	movs	r2, #0
 8008826:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8008828:	4b24      	ldr	r3, [pc, #144]	@ (80088bc <SDRAM_MspInit+0x224>)
 800882a:	f240 2202 	movw	r2, #514	@ 0x202
 800882e:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8008830:	4b22      	ldr	r3, [pc, #136]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008832:	f640 0208 	movw	r2, #2056	@ 0x808
 8008836:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8008838:	4b20      	ldr	r3, [pc, #128]	@ (80088bc <SDRAM_MspInit+0x224>)
 800883a:	2220      	movs	r2, #32
 800883c:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800883e:	4b1f      	ldr	r3, [pc, #124]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008840:	2280      	movs	r2, #128	@ 0x80
 8008842:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8008844:	4b1d      	ldr	r3, [pc, #116]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008846:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800884a:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 800884c:	4b1b      	ldr	r3, [pc, #108]	@ (80088bc <SDRAM_MspInit+0x224>)
 800884e:	2200      	movs	r2, #0
 8008850:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8008852:	4b1a      	ldr	r3, [pc, #104]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008854:	2200      	movs	r2, #0
 8008856:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8008858:	4b18      	ldr	r3, [pc, #96]	@ (80088bc <SDRAM_MspInit+0x224>)
 800885a:	2280      	movs	r2, #128	@ 0x80
 800885c:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800885e:	4b17      	ldr	r3, [pc, #92]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008860:	2200      	movs	r2, #0
 8008862:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8008864:	4b15      	ldr	r3, [pc, #84]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008866:	2200      	movs	r2, #0
 8008868:	639a      	str	r2, [r3, #56]	@ 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800886a:	4b14      	ldr	r3, [pc, #80]	@ (80088bc <SDRAM_MspInit+0x224>)
 800886c:	4a14      	ldr	r2, [pc, #80]	@ (80088c0 <SDRAM_MspInit+0x228>)
 800886e:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a12      	ldr	r2, [pc, #72]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008874:	631a      	str	r2, [r3, #48]	@ 0x30
 8008876:	4a11      	ldr	r2, [pc, #68]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800887c:	480f      	ldr	r0, [pc, #60]	@ (80088bc <SDRAM_MspInit+0x224>)
 800887e:	f006 f889 	bl	800e994 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8008882:	480e      	ldr	r0, [pc, #56]	@ (80088bc <SDRAM_MspInit+0x224>)
 8008884:	f006 f83a 	bl	800e8fc <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8008888:	2200      	movs	r2, #0
 800888a:	210f      	movs	r1, #15
 800888c:	207a      	movs	r0, #122	@ 0x7a
 800888e:	f000 f991 	bl	8008bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8008892:	207a      	movs	r0, #122	@ 0x7a
 8008894:	f000 f9a8 	bl	8008be8 <HAL_NVIC_EnableIRQ>
}
 8008898:	bf00      	nop
 800889a:	3740      	adds	r7, #64	@ 0x40
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	58024400 	.word	0x58024400
 80088a4:	58020c00 	.word	0x58020c00
 80088a8:	58021000 	.word	0x58021000
 80088ac:	58021400 	.word	0x58021400
 80088b0:	58021800 	.word	0x58021800
 80088b4:	58021c00 	.word	0x58021c00
 80088b8:	58022000 	.word	0x58022000
 80088bc:	24006014 	.word	0x24006014
 80088c0:	52000040 	.word	0x52000040

080088c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80088ca:	2003      	movs	r0, #3
 80088cc:	f000 f967 	bl	8008b9e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088d0:	f007 f8b4 	bl	800fa3c <HAL_RCC_GetSysClockFreq>
 80088d4:	4602      	mov	r2, r0
 80088d6:	4b15      	ldr	r3, [pc, #84]	@ (800892c <HAL_Init+0x68>)
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	0a1b      	lsrs	r3, r3, #8
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	4913      	ldr	r1, [pc, #76]	@ (8008930 <HAL_Init+0x6c>)
 80088e2:	5ccb      	ldrb	r3, [r1, r3]
 80088e4:	f003 031f 	and.w	r3, r3, #31
 80088e8:	fa22 f303 	lsr.w	r3, r2, r3
 80088ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088ee:	4b0f      	ldr	r3, [pc, #60]	@ (800892c <HAL_Init+0x68>)
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008930 <HAL_Init+0x6c>)
 80088f8:	5cd3      	ldrb	r3, [r2, r3]
 80088fa:	f003 031f 	and.w	r3, r3, #31
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
 8008904:	4a0b      	ldr	r2, [pc, #44]	@ (8008934 <HAL_Init+0x70>)
 8008906:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008908:	4a0b      	ldr	r2, [pc, #44]	@ (8008938 <HAL_Init+0x74>)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800890e:	200f      	movs	r0, #15
 8008910:	f00b fd7e 	bl	8014410 <HAL_InitTick>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e002      	b.n	8008924 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800891e:	f7fc f897 	bl	8004a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	58024400 	.word	0x58024400
 8008930:	08018000 	.word	0x08018000
 8008934:	24000404 	.word	0x24000404
 8008938:	24000400 	.word	0x24000400

0800893c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008940:	4b06      	ldr	r3, [pc, #24]	@ (800895c <HAL_IncTick+0x20>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	461a      	mov	r2, r3
 8008946:	4b06      	ldr	r3, [pc, #24]	@ (8008960 <HAL_IncTick+0x24>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4413      	add	r3, r2
 800894c:	4a04      	ldr	r2, [pc, #16]	@ (8008960 <HAL_IncTick+0x24>)
 800894e:	6013      	str	r3, [r2, #0]
}
 8008950:	bf00      	nop
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	240005d8 	.word	0x240005d8
 8008960:	24006080 	.word	0x24006080

08008964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008964:	b480      	push	{r7}
 8008966:	af00      	add	r7, sp, #0
  return uwTick;
 8008968:	4b03      	ldr	r3, [pc, #12]	@ (8008978 <HAL_GetTick+0x14>)
 800896a:	681b      	ldr	r3, [r3, #0]
}
 800896c:	4618      	mov	r0, r3
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	24006080 	.word	0x24006080

0800897c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008984:	f7ff ffee 	bl	8008964 <HAL_GetTick>
 8008988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008994:	d005      	beq.n	80089a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008996:	4b0a      	ldr	r3, [pc, #40]	@ (80089c0 <HAL_Delay+0x44>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80089a2:	bf00      	nop
 80089a4:	f7ff ffde 	bl	8008964 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d8f7      	bhi.n	80089a4 <HAL_Delay+0x28>
  {
  }
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	240005d8 	.word	0x240005d8

080089c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80089c4:	b480      	push	{r7}
 80089c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80089c8:	4b03      	ldr	r3, [pc, #12]	@ (80089d8 <HAL_GetREVID+0x14>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	0c1b      	lsrs	r3, r3, #16
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	5c001000 	.word	0x5c001000

080089dc <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80089e0:	4b05      	ldr	r3, [pc, #20]	@ (80089f8 <HAL_EnableCompensationCell+0x1c>)
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	4a04      	ldr	r2, [pc, #16]	@ (80089f8 <HAL_EnableCompensationCell+0x1c>)
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	6213      	str	r3, [r2, #32]
}
 80089ec:	bf00      	nop
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	58000400 	.word	0x58000400

080089fc <__NVIC_SetPriorityGrouping>:
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a3c <__NVIC_SetPriorityGrouping+0x40>)
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008a18:	4013      	ands	r3, r2
 8008a1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008a24:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <__NVIC_SetPriorityGrouping+0x44>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a2a:	4a04      	ldr	r2, [pc, #16]	@ (8008a3c <__NVIC_SetPriorityGrouping+0x40>)
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	60d3      	str	r3, [r2, #12]
}
 8008a30:	bf00      	nop
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	e000ed00 	.word	0xe000ed00
 8008a40:	05fa0000 	.word	0x05fa0000

08008a44 <__NVIC_GetPriorityGrouping>:
{
 8008a44:	b480      	push	{r7}
 8008a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a48:	4b04      	ldr	r3, [pc, #16]	@ (8008a5c <__NVIC_GetPriorityGrouping+0x18>)
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	0a1b      	lsrs	r3, r3, #8
 8008a4e:	f003 0307 	and.w	r3, r3, #7
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	e000ed00 	.word	0xe000ed00

08008a60 <__NVIC_EnableIRQ>:
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	db0b      	blt.n	8008a8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	f003 021f 	and.w	r2, r3, #31
 8008a78:	4907      	ldr	r1, [pc, #28]	@ (8008a98 <__NVIC_EnableIRQ+0x38>)
 8008a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a7e:	095b      	lsrs	r3, r3, #5
 8008a80:	2001      	movs	r0, #1
 8008a82:	fa00 f202 	lsl.w	r2, r0, r2
 8008a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	e000e100 	.word	0xe000e100

08008a9c <__NVIC_DisableIRQ>:
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	db12      	blt.n	8008ad4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	f003 021f 	and.w	r2, r3, #31
 8008ab4:	490a      	ldr	r1, [pc, #40]	@ (8008ae0 <__NVIC_DisableIRQ+0x44>)
 8008ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aba:	095b      	lsrs	r3, r3, #5
 8008abc:	2001      	movs	r0, #1
 8008abe:	fa00 f202 	lsl.w	r2, r0, r2
 8008ac2:	3320      	adds	r3, #32
 8008ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008ac8:	f3bf 8f4f 	dsb	sy
}
 8008acc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008ace:	f3bf 8f6f 	isb	sy
}
 8008ad2:	bf00      	nop
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	e000e100 	.word	0xe000e100

08008ae4 <__NVIC_SetPriority>:
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	6039      	str	r1, [r7, #0]
 8008aee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	db0a      	blt.n	8008b0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	490c      	ldr	r1, [pc, #48]	@ (8008b30 <__NVIC_SetPriority+0x4c>)
 8008afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b02:	0112      	lsls	r2, r2, #4
 8008b04:	b2d2      	uxtb	r2, r2
 8008b06:	440b      	add	r3, r1
 8008b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008b0c:	e00a      	b.n	8008b24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	4908      	ldr	r1, [pc, #32]	@ (8008b34 <__NVIC_SetPriority+0x50>)
 8008b14:	88fb      	ldrh	r3, [r7, #6]
 8008b16:	f003 030f 	and.w	r3, r3, #15
 8008b1a:	3b04      	subs	r3, #4
 8008b1c:	0112      	lsls	r2, r2, #4
 8008b1e:	b2d2      	uxtb	r2, r2
 8008b20:	440b      	add	r3, r1
 8008b22:	761a      	strb	r2, [r3, #24]
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	e000e100 	.word	0xe000e100
 8008b34:	e000ed00 	.word	0xe000ed00

08008b38 <NVIC_EncodePriority>:
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b089      	sub	sp, #36	@ 0x24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	f1c3 0307 	rsb	r3, r3, #7
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	bf28      	it	cs
 8008b56:	2304      	movcs	r3, #4
 8008b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	2b06      	cmp	r3, #6
 8008b60:	d902      	bls.n	8008b68 <NVIC_EncodePriority+0x30>
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	3b03      	subs	r3, #3
 8008b66:	e000      	b.n	8008b6a <NVIC_EncodePriority+0x32>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	fa02 f303 	lsl.w	r3, r2, r3
 8008b76:	43da      	mvns	r2, r3
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	401a      	ands	r2, r3
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	fa01 f303 	lsl.w	r3, r1, r3
 8008b8a:	43d9      	mvns	r1, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b90:	4313      	orrs	r3, r2
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3724      	adds	r7, #36	@ 0x24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff ff28 	bl	80089fc <__NVIC_SetPriorityGrouping>
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008bc2:	f7ff ff3f 	bl	8008a44 <__NVIC_GetPriorityGrouping>
 8008bc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	6978      	ldr	r0, [r7, #20]
 8008bce:	f7ff ffb3 	bl	8008b38 <NVIC_EncodePriority>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff ff82 	bl	8008ae4 <__NVIC_SetPriority>
}
 8008be0:	bf00      	nop
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff ff32 	bl	8008a60 <__NVIC_EnableIRQ>
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff ff42 	bl	8008a9c <__NVIC_DisableIRQ>
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008c24:	f3bf 8f5f 	dmb	sy
}
 8008c28:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008c2a:	4b07      	ldr	r3, [pc, #28]	@ (8008c48 <HAL_MPU_Disable+0x28>)
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2e:	4a06      	ldr	r2, [pc, #24]	@ (8008c48 <HAL_MPU_Disable+0x28>)
 8008c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c34:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008c36:	4b05      	ldr	r3, [pc, #20]	@ (8008c4c <HAL_MPU_Disable+0x2c>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	605a      	str	r2, [r3, #4]
}
 8008c3c:	bf00      	nop
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	e000ed00 	.word	0xe000ed00
 8008c4c:	e000ed90 	.word	0xe000ed90

08008c50 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008c58:	4a0b      	ldr	r2, [pc, #44]	@ (8008c88 <HAL_MPU_Enable+0x38>)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f043 0301 	orr.w	r3, r3, #1
 8008c60:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008c62:	4b0a      	ldr	r3, [pc, #40]	@ (8008c8c <HAL_MPU_Enable+0x3c>)
 8008c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c66:	4a09      	ldr	r2, [pc, #36]	@ (8008c8c <HAL_MPU_Enable+0x3c>)
 8008c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c6c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008c6e:	f3bf 8f4f 	dsb	sy
}
 8008c72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008c74:	f3bf 8f6f 	isb	sy
}
 8008c78:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	e000ed90 	.word	0xe000ed90
 8008c8c:	e000ed00 	.word	0xe000ed00

08008c90 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	785a      	ldrb	r2, [r3, #1]
 8008c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8008d0c <HAL_MPU_ConfigRegion+0x7c>)
 8008c9e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8008ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d0c <HAL_MPU_ConfigRegion+0x7c>)
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	4a19      	ldr	r2, [pc, #100]	@ (8008d0c <HAL_MPU_ConfigRegion+0x7c>)
 8008ca6:	f023 0301 	bic.w	r3, r3, #1
 8008caa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8008cac:	4a17      	ldr	r2, [pc, #92]	@ (8008d0c <HAL_MPU_ConfigRegion+0x7c>)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	7b1b      	ldrb	r3, [r3, #12]
 8008cb8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	7adb      	ldrb	r3, [r3, #11]
 8008cbe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008cc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	7a9b      	ldrb	r3, [r3, #10]
 8008cc6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008cc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	7b5b      	ldrb	r3, [r3, #13]
 8008cce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008cd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	7b9b      	ldrb	r3, [r3, #14]
 8008cd6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008cd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	7bdb      	ldrb	r3, [r3, #15]
 8008cde:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008ce0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	7a5b      	ldrb	r3, [r3, #9]
 8008ce6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008ce8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	7a1b      	ldrb	r3, [r3, #8]
 8008cee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008cf0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	7812      	ldrb	r2, [r2, #0]
 8008cf6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008cf8:	4a04      	ldr	r2, [pc, #16]	@ (8008d0c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008cfa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008cfc:	6113      	str	r3, [r2, #16]
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	e000ed90 	.word	0xe000ed90

08008d10 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8008d14:	4b06      	ldr	r3, [pc, #24]	@ (8008d30 <HAL_GetCurrentCPUID+0x20>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d1c:	2b70      	cmp	r3, #112	@ 0x70
 8008d1e:	d101      	bne.n	8008d24 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e000      	b.n	8008d26 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8008d24:	2301      	movs	r3, #1
  }
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	e000ed00 	.word	0xe000ed00

08008d34 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8008d3c:	4b27      	ldr	r3, [pc, #156]	@ (8008ddc <HAL_DCMI_Suspend+0xa8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a27      	ldr	r2, [pc, #156]	@ (8008de0 <HAL_DCMI_Suspend+0xac>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	0a5b      	lsrs	r3, r3, #9
 8008d48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d101      	bne.n	8008d64 <HAL_DCMI_Suspend+0x30>
 8008d60:	2302      	movs	r3, #2
 8008d62:	e034      	b.n	8008dce <HAL_DCMI_Suspend+0x9a>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d125      	bne.n	8008dc4 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2205      	movs	r2, #5
 8008d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 0201 	bic.w	r2, r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10c      	bne.n	8008db6 <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008da0:	f043 0220 	orr.w	r2, r3, #32
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        status = HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	72fb      	strb	r3, [r7, #11]
        break;
 8008db4:	e006      	b.n	8008dc4 <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e5      	bne.n	8008d90 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8008dcc:	7afb      	ldrb	r3, [r7, #11]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	24000400 	.word	0x24000400
 8008de0:	10624dd3 	.word	0x10624dd3

08008de4 <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d101      	bne.n	8008dfa <HAL_DCMI_Resume+0x16>
 8008df6:	2302      	movs	r3, #2
 8008df8:	e01a      	b.n	8008e30 <HAL_DCMI_Resume+0x4c>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	d10b      	bne.n	8008e26 <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2202      	movs	r2, #2
 8008e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f042 0201 	orr.w	r2, r2, #1
 8008e24:	601a      	str	r2, [r3, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d016      	beq.n	8008e84 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2204      	movs	r2, #4
 8008e5c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e62:	f043 0202 	orr.w	r2, r3, #2
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2204      	movs	r2, #4
 8008e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e76:	4a31      	ldr	r2, [pc, #196]	@ (8008f3c <HAL_DCMI_IRQHandler+0x100>)
 8008e78:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 fb16 	bl	800a4b0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d016      	beq.n	8008ebc <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2202      	movs	r2, #2
 8008e94:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e9a:	f043 0201 	orr.w	r2, r3, #1
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eae:	4a23      	ldr	r2, [pc, #140]	@ (8008f3c <HAL_DCMI_IRQHandler+0x100>)
 8008eb0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f001 fafa 	bl	800a4b0 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f003 0310 	and.w	r3, r3, #16
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d006      	beq.n	8008ed4 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2210      	movs	r2, #16
 8008ecc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7fe f956 	bl	8007180 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 0308 	and.w	r3, r3, #8
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d006      	beq.n	8008eec <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7fe f960 	bl	80071ac <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d01d      	beq.n	8008f32 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d107      	bne.n	8008f14 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 021e 	bic.w	r2, r2, #30
 8008f12:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0201 	bic.w	r2, r2, #1
 8008f22:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7fe f932 	bl	8007196 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8008f32:	bf00      	nop
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	08008f41 	.word	0x08008f41

08008f40 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d009      	beq.n	8008f6c <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7fe f928 	bl	80071c2 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8008f72:	bf00      	nop
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008f84:	f7ff fcee 	bl	8008964 <HAL_GetTick>
 8008f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e316      	b.n	80095c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a66      	ldr	r2, [pc, #408]	@ (8009134 <HAL_DMA_Init+0x1b8>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d04a      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a65      	ldr	r2, [pc, #404]	@ (8009138 <HAL_DMA_Init+0x1bc>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d045      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a63      	ldr	r2, [pc, #396]	@ (800913c <HAL_DMA_Init+0x1c0>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d040      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a62      	ldr	r2, [pc, #392]	@ (8009140 <HAL_DMA_Init+0x1c4>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d03b      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a60      	ldr	r2, [pc, #384]	@ (8009144 <HAL_DMA_Init+0x1c8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d036      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a5f      	ldr	r2, [pc, #380]	@ (8009148 <HAL_DMA_Init+0x1cc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d031      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a5d      	ldr	r2, [pc, #372]	@ (800914c <HAL_DMA_Init+0x1d0>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d02c      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a5c      	ldr	r2, [pc, #368]	@ (8009150 <HAL_DMA_Init+0x1d4>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d027      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8009154 <HAL_DMA_Init+0x1d8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d022      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a59      	ldr	r2, [pc, #356]	@ (8009158 <HAL_DMA_Init+0x1dc>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d01d      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a57      	ldr	r2, [pc, #348]	@ (800915c <HAL_DMA_Init+0x1e0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d018      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a56      	ldr	r2, [pc, #344]	@ (8009160 <HAL_DMA_Init+0x1e4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d013      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a54      	ldr	r2, [pc, #336]	@ (8009164 <HAL_DMA_Init+0x1e8>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d00e      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a53      	ldr	r2, [pc, #332]	@ (8009168 <HAL_DMA_Init+0x1ec>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d009      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a51      	ldr	r2, [pc, #324]	@ (800916c <HAL_DMA_Init+0x1f0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d004      	beq.n	8009034 <HAL_DMA_Init+0xb8>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a50      	ldr	r2, [pc, #320]	@ (8009170 <HAL_DMA_Init+0x1f4>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d101      	bne.n	8009038 <HAL_DMA_Init+0xbc>
 8009034:	2301      	movs	r3, #1
 8009036:	e000      	b.n	800903a <HAL_DMA_Init+0xbe>
 8009038:	2300      	movs	r3, #0
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 813b 	beq.w	80092b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a37      	ldr	r2, [pc, #220]	@ (8009134 <HAL_DMA_Init+0x1b8>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d04a      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a36      	ldr	r2, [pc, #216]	@ (8009138 <HAL_DMA_Init+0x1bc>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d045      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a34      	ldr	r2, [pc, #208]	@ (800913c <HAL_DMA_Init+0x1c0>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d040      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a33      	ldr	r2, [pc, #204]	@ (8009140 <HAL_DMA_Init+0x1c4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d03b      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a31      	ldr	r2, [pc, #196]	@ (8009144 <HAL_DMA_Init+0x1c8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d036      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a30      	ldr	r2, [pc, #192]	@ (8009148 <HAL_DMA_Init+0x1cc>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d031      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a2e      	ldr	r2, [pc, #184]	@ (800914c <HAL_DMA_Init+0x1d0>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d02c      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a2d      	ldr	r2, [pc, #180]	@ (8009150 <HAL_DMA_Init+0x1d4>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d027      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a2b      	ldr	r2, [pc, #172]	@ (8009154 <HAL_DMA_Init+0x1d8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d022      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009158 <HAL_DMA_Init+0x1dc>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d01d      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a28      	ldr	r2, [pc, #160]	@ (800915c <HAL_DMA_Init+0x1e0>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d018      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a27      	ldr	r2, [pc, #156]	@ (8009160 <HAL_DMA_Init+0x1e4>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d013      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a25      	ldr	r2, [pc, #148]	@ (8009164 <HAL_DMA_Init+0x1e8>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d00e      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a24      	ldr	r2, [pc, #144]	@ (8009168 <HAL_DMA_Init+0x1ec>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d009      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a22      	ldr	r2, [pc, #136]	@ (800916c <HAL_DMA_Init+0x1f0>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d004      	beq.n	80090f0 <HAL_DMA_Init+0x174>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a21      	ldr	r2, [pc, #132]	@ (8009170 <HAL_DMA_Init+0x1f4>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d108      	bne.n	8009102 <HAL_DMA_Init+0x186>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0201 	bic.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	e007      	b.n	8009112 <HAL_DMA_Init+0x196>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0201 	bic.w	r2, r2, #1
 8009110:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009112:	e02f      	b.n	8009174 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009114:	f7ff fc26 	bl	8008964 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b05      	cmp	r3, #5
 8009120:	d928      	bls.n	8009174 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2203      	movs	r2, #3
 800912c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e246      	b.n	80095c2 <HAL_DMA_Init+0x646>
 8009134:	40020010 	.word	0x40020010
 8009138:	40020028 	.word	0x40020028
 800913c:	40020040 	.word	0x40020040
 8009140:	40020058 	.word	0x40020058
 8009144:	40020070 	.word	0x40020070
 8009148:	40020088 	.word	0x40020088
 800914c:	400200a0 	.word	0x400200a0
 8009150:	400200b8 	.word	0x400200b8
 8009154:	40020410 	.word	0x40020410
 8009158:	40020428 	.word	0x40020428
 800915c:	40020440 	.word	0x40020440
 8009160:	40020458 	.word	0x40020458
 8009164:	40020470 	.word	0x40020470
 8009168:	40020488 	.word	0x40020488
 800916c:	400204a0 	.word	0x400204a0
 8009170:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1c8      	bne.n	8009114 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4b83      	ldr	r3, [pc, #524]	@ (800939c <HAL_DMA_Init+0x420>)
 800918e:	4013      	ands	r3, r2
 8009190:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800919a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	4313      	orrs	r3, r2
 80091be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	d107      	bne.n	80091d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d0:	4313      	orrs	r3, r2
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80091d8:	4b71      	ldr	r3, [pc, #452]	@ (80093a0 <HAL_DMA_Init+0x424>)
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	4b71      	ldr	r3, [pc, #452]	@ (80093a4 <HAL_DMA_Init+0x428>)
 80091de:	4013      	ands	r3, r2
 80091e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091e4:	d328      	bcc.n	8009238 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	2b28      	cmp	r3, #40	@ 0x28
 80091ec:	d903      	bls.n	80091f6 <HAL_DMA_Init+0x27a>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80091f4:	d917      	bls.n	8009226 <HAL_DMA_Init+0x2aa>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80091fc:	d903      	bls.n	8009206 <HAL_DMA_Init+0x28a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2b42      	cmp	r3, #66	@ 0x42
 8009204:	d90f      	bls.n	8009226 <HAL_DMA_Init+0x2aa>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	2b46      	cmp	r3, #70	@ 0x46
 800920c:	d903      	bls.n	8009216 <HAL_DMA_Init+0x29a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	2b48      	cmp	r3, #72	@ 0x48
 8009214:	d907      	bls.n	8009226 <HAL_DMA_Init+0x2aa>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2b4e      	cmp	r3, #78	@ 0x4e
 800921c:	d905      	bls.n	800922a <HAL_DMA_Init+0x2ae>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	2b52      	cmp	r3, #82	@ 0x52
 8009224:	d801      	bhi.n	800922a <HAL_DMA_Init+0x2ae>
 8009226:	2301      	movs	r3, #1
 8009228:	e000      	b.n	800922c <HAL_DMA_Init+0x2b0>
 800922a:	2300      	movs	r3, #0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009236:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f023 0307 	bic.w	r3, r3, #7
 800924e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	4313      	orrs	r3, r2
 8009258:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925e:	2b04      	cmp	r3, #4
 8009260:	d117      	bne.n	8009292 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00e      	beq.n	8009292 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f002 fcf5 	bl	800bc64 <DMA_CheckFifoParam>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d008      	beq.n	8009292 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2240      	movs	r2, #64	@ 0x40
 8009284:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e197      	b.n	80095c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f002 fc30 	bl	800bb00 <DMA_CalcBaseAndBitshift>
 80092a0:	4603      	mov	r3, r0
 80092a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092a8:	f003 031f 	and.w	r3, r3, #31
 80092ac:	223f      	movs	r2, #63	@ 0x3f
 80092ae:	409a      	lsls	r2, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	609a      	str	r2, [r3, #8]
 80092b4:	e0cd      	b.n	8009452 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a3b      	ldr	r2, [pc, #236]	@ (80093a8 <HAL_DMA_Init+0x42c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d022      	beq.n	8009306 <HAL_DMA_Init+0x38a>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a39      	ldr	r2, [pc, #228]	@ (80093ac <HAL_DMA_Init+0x430>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d01d      	beq.n	8009306 <HAL_DMA_Init+0x38a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a38      	ldr	r2, [pc, #224]	@ (80093b0 <HAL_DMA_Init+0x434>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d018      	beq.n	8009306 <HAL_DMA_Init+0x38a>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a36      	ldr	r2, [pc, #216]	@ (80093b4 <HAL_DMA_Init+0x438>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d013      	beq.n	8009306 <HAL_DMA_Init+0x38a>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a35      	ldr	r2, [pc, #212]	@ (80093b8 <HAL_DMA_Init+0x43c>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d00e      	beq.n	8009306 <HAL_DMA_Init+0x38a>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a33      	ldr	r2, [pc, #204]	@ (80093bc <HAL_DMA_Init+0x440>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d009      	beq.n	8009306 <HAL_DMA_Init+0x38a>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a32      	ldr	r2, [pc, #200]	@ (80093c0 <HAL_DMA_Init+0x444>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d004      	beq.n	8009306 <HAL_DMA_Init+0x38a>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a30      	ldr	r2, [pc, #192]	@ (80093c4 <HAL_DMA_Init+0x448>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d101      	bne.n	800930a <HAL_DMA_Init+0x38e>
 8009306:	2301      	movs	r3, #1
 8009308:	e000      	b.n	800930c <HAL_DMA_Init+0x390>
 800930a:	2300      	movs	r3, #0
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 8097 	beq.w	8009440 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a24      	ldr	r2, [pc, #144]	@ (80093a8 <HAL_DMA_Init+0x42c>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d021      	beq.n	8009360 <HAL_DMA_Init+0x3e4>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a22      	ldr	r2, [pc, #136]	@ (80093ac <HAL_DMA_Init+0x430>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d01c      	beq.n	8009360 <HAL_DMA_Init+0x3e4>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a21      	ldr	r2, [pc, #132]	@ (80093b0 <HAL_DMA_Init+0x434>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d017      	beq.n	8009360 <HAL_DMA_Init+0x3e4>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a1f      	ldr	r2, [pc, #124]	@ (80093b4 <HAL_DMA_Init+0x438>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d012      	beq.n	8009360 <HAL_DMA_Init+0x3e4>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a1e      	ldr	r2, [pc, #120]	@ (80093b8 <HAL_DMA_Init+0x43c>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d00d      	beq.n	8009360 <HAL_DMA_Init+0x3e4>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a1c      	ldr	r2, [pc, #112]	@ (80093bc <HAL_DMA_Init+0x440>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d008      	beq.n	8009360 <HAL_DMA_Init+0x3e4>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1b      	ldr	r2, [pc, #108]	@ (80093c0 <HAL_DMA_Init+0x444>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <HAL_DMA_Init+0x3e4>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a19      	ldr	r2, [pc, #100]	@ (80093c4 <HAL_DMA_Init+0x448>)
 800935e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	4b13      	ldr	r3, [pc, #76]	@ (80093c8 <HAL_DMA_Init+0x44c>)
 800937c:	4013      	ands	r3, r2
 800937e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b40      	cmp	r3, #64	@ 0x40
 8009386:	d021      	beq.n	80093cc <HAL_DMA_Init+0x450>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	2b80      	cmp	r3, #128	@ 0x80
 800938e:	d102      	bne.n	8009396 <HAL_DMA_Init+0x41a>
 8009390:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009394:	e01b      	b.n	80093ce <HAL_DMA_Init+0x452>
 8009396:	2300      	movs	r3, #0
 8009398:	e019      	b.n	80093ce <HAL_DMA_Init+0x452>
 800939a:	bf00      	nop
 800939c:	fe10803f 	.word	0xfe10803f
 80093a0:	5c001000 	.word	0x5c001000
 80093a4:	ffff0000 	.word	0xffff0000
 80093a8:	58025408 	.word	0x58025408
 80093ac:	5802541c 	.word	0x5802541c
 80093b0:	58025430 	.word	0x58025430
 80093b4:	58025444 	.word	0x58025444
 80093b8:	58025458 	.word	0x58025458
 80093bc:	5802546c 	.word	0x5802546c
 80093c0:	58025480 	.word	0x58025480
 80093c4:	58025494 	.word	0x58025494
 80093c8:	fffe000f 	.word	0xfffe000f
 80093cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	68d2      	ldr	r2, [r2, #12]
 80093d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80093d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80093dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80093e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80093ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80093f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80093fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	4b6e      	ldr	r3, [pc, #440]	@ (80095cc <HAL_DMA_Init+0x650>)
 8009414:	4413      	add	r3, r2
 8009416:	4a6e      	ldr	r2, [pc, #440]	@ (80095d0 <HAL_DMA_Init+0x654>)
 8009418:	fba2 2303 	umull	r2, r3, r2, r3
 800941c:	091b      	lsrs	r3, r3, #4
 800941e:	009a      	lsls	r2, r3, #2
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f002 fb6b 	bl	800bb00 <DMA_CalcBaseAndBitshift>
 800942a:	4603      	mov	r3, r0
 800942c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009432:	f003 031f 	and.w	r3, r3, #31
 8009436:	2201      	movs	r2, #1
 8009438:	409a      	lsls	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	605a      	str	r2, [r3, #4]
 800943e:	e008      	b.n	8009452 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2240      	movs	r2, #64	@ 0x40
 8009444:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2203      	movs	r2, #3
 800944a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e0b7      	b.n	80095c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a5f      	ldr	r2, [pc, #380]	@ (80095d4 <HAL_DMA_Init+0x658>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d072      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a5d      	ldr	r2, [pc, #372]	@ (80095d8 <HAL_DMA_Init+0x65c>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d06d      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a5c      	ldr	r2, [pc, #368]	@ (80095dc <HAL_DMA_Init+0x660>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d068      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a5a      	ldr	r2, [pc, #360]	@ (80095e0 <HAL_DMA_Init+0x664>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d063      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a59      	ldr	r2, [pc, #356]	@ (80095e4 <HAL_DMA_Init+0x668>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d05e      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a57      	ldr	r2, [pc, #348]	@ (80095e8 <HAL_DMA_Init+0x66c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d059      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a56      	ldr	r2, [pc, #344]	@ (80095ec <HAL_DMA_Init+0x670>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d054      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a54      	ldr	r2, [pc, #336]	@ (80095f0 <HAL_DMA_Init+0x674>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d04f      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a53      	ldr	r2, [pc, #332]	@ (80095f4 <HAL_DMA_Init+0x678>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d04a      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a51      	ldr	r2, [pc, #324]	@ (80095f8 <HAL_DMA_Init+0x67c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d045      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a50      	ldr	r2, [pc, #320]	@ (80095fc <HAL_DMA_Init+0x680>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d040      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a4e      	ldr	r2, [pc, #312]	@ (8009600 <HAL_DMA_Init+0x684>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d03b      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a4d      	ldr	r2, [pc, #308]	@ (8009604 <HAL_DMA_Init+0x688>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d036      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a4b      	ldr	r2, [pc, #300]	@ (8009608 <HAL_DMA_Init+0x68c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d031      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a4a      	ldr	r2, [pc, #296]	@ (800960c <HAL_DMA_Init+0x690>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d02c      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a48      	ldr	r2, [pc, #288]	@ (8009610 <HAL_DMA_Init+0x694>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d027      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a47      	ldr	r2, [pc, #284]	@ (8009614 <HAL_DMA_Init+0x698>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d022      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a45      	ldr	r2, [pc, #276]	@ (8009618 <HAL_DMA_Init+0x69c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d01d      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a44      	ldr	r2, [pc, #272]	@ (800961c <HAL_DMA_Init+0x6a0>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d018      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a42      	ldr	r2, [pc, #264]	@ (8009620 <HAL_DMA_Init+0x6a4>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d013      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a41      	ldr	r2, [pc, #260]	@ (8009624 <HAL_DMA_Init+0x6a8>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d00e      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a3f      	ldr	r2, [pc, #252]	@ (8009628 <HAL_DMA_Init+0x6ac>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d009      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a3e      	ldr	r2, [pc, #248]	@ (800962c <HAL_DMA_Init+0x6b0>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d004      	beq.n	8009542 <HAL_DMA_Init+0x5c6>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a3c      	ldr	r2, [pc, #240]	@ (8009630 <HAL_DMA_Init+0x6b4>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d101      	bne.n	8009546 <HAL_DMA_Init+0x5ca>
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <HAL_DMA_Init+0x5cc>
 8009546:	2300      	movs	r3, #0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d032      	beq.n	80095b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f002 fc05 	bl	800bd5c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	2b80      	cmp	r3, #128	@ 0x80
 8009558:	d102      	bne.n	8009560 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009568:	b2d2      	uxtb	r2, r2
 800956a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009574:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d010      	beq.n	80095a0 <HAL_DMA_Init+0x624>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	2b08      	cmp	r3, #8
 8009584:	d80c      	bhi.n	80095a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f002 fc82 	bl	800be90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800959c:	605a      	str	r2, [r3, #4]
 800959e:	e008      	b.n	80095b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3718      	adds	r7, #24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	a7fdabf8 	.word	0xa7fdabf8
 80095d0:	cccccccd 	.word	0xcccccccd
 80095d4:	40020010 	.word	0x40020010
 80095d8:	40020028 	.word	0x40020028
 80095dc:	40020040 	.word	0x40020040
 80095e0:	40020058 	.word	0x40020058
 80095e4:	40020070 	.word	0x40020070
 80095e8:	40020088 	.word	0x40020088
 80095ec:	400200a0 	.word	0x400200a0
 80095f0:	400200b8 	.word	0x400200b8
 80095f4:	40020410 	.word	0x40020410
 80095f8:	40020428 	.word	0x40020428
 80095fc:	40020440 	.word	0x40020440
 8009600:	40020458 	.word	0x40020458
 8009604:	40020470 	.word	0x40020470
 8009608:	40020488 	.word	0x40020488
 800960c:	400204a0 	.word	0x400204a0
 8009610:	400204b8 	.word	0x400204b8
 8009614:	58025408 	.word	0x58025408
 8009618:	5802541c 	.word	0x5802541c
 800961c:	58025430 	.word	0x58025430
 8009620:	58025444 	.word	0x58025444
 8009624:	58025458 	.word	0x58025458
 8009628:	5802546c 	.word	0x5802546c
 800962c:	58025480 	.word	0x58025480
 8009630:	58025494 	.word	0x58025494

08009634 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e1a8      	b.n	8009998 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a82      	ldr	r2, [pc, #520]	@ (8009854 <HAL_DMA_DeInit+0x220>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d04a      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a80      	ldr	r2, [pc, #512]	@ (8009858 <HAL_DMA_DeInit+0x224>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d045      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a7f      	ldr	r2, [pc, #508]	@ (800985c <HAL_DMA_DeInit+0x228>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d040      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a7d      	ldr	r2, [pc, #500]	@ (8009860 <HAL_DMA_DeInit+0x22c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d03b      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a7c      	ldr	r2, [pc, #496]	@ (8009864 <HAL_DMA_DeInit+0x230>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d036      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a7a      	ldr	r2, [pc, #488]	@ (8009868 <HAL_DMA_DeInit+0x234>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d031      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a79      	ldr	r2, [pc, #484]	@ (800986c <HAL_DMA_DeInit+0x238>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d02c      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a77      	ldr	r2, [pc, #476]	@ (8009870 <HAL_DMA_DeInit+0x23c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d027      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a76      	ldr	r2, [pc, #472]	@ (8009874 <HAL_DMA_DeInit+0x240>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d022      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a74      	ldr	r2, [pc, #464]	@ (8009878 <HAL_DMA_DeInit+0x244>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d01d      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a73      	ldr	r2, [pc, #460]	@ (800987c <HAL_DMA_DeInit+0x248>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d018      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a71      	ldr	r2, [pc, #452]	@ (8009880 <HAL_DMA_DeInit+0x24c>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d013      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a70      	ldr	r2, [pc, #448]	@ (8009884 <HAL_DMA_DeInit+0x250>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d00e      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a6e      	ldr	r2, [pc, #440]	@ (8009888 <HAL_DMA_DeInit+0x254>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d009      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a6d      	ldr	r2, [pc, #436]	@ (800988c <HAL_DMA_DeInit+0x258>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d004      	beq.n	80096e6 <HAL_DMA_DeInit+0xb2>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a6b      	ldr	r2, [pc, #428]	@ (8009890 <HAL_DMA_DeInit+0x25c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d108      	bne.n	80096f8 <HAL_DMA_DeInit+0xc4>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0201 	bic.w	r2, r2, #1
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	e007      	b.n	8009708 <HAL_DMA_DeInit+0xd4>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0201 	bic.w	r2, r2, #1
 8009706:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a51      	ldr	r2, [pc, #324]	@ (8009854 <HAL_DMA_DeInit+0x220>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d04a      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a50      	ldr	r2, [pc, #320]	@ (8009858 <HAL_DMA_DeInit+0x224>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d045      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a4e      	ldr	r2, [pc, #312]	@ (800985c <HAL_DMA_DeInit+0x228>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d040      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a4d      	ldr	r2, [pc, #308]	@ (8009860 <HAL_DMA_DeInit+0x22c>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d03b      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a4b      	ldr	r2, [pc, #300]	@ (8009864 <HAL_DMA_DeInit+0x230>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d036      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a4a      	ldr	r2, [pc, #296]	@ (8009868 <HAL_DMA_DeInit+0x234>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d031      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a48      	ldr	r2, [pc, #288]	@ (800986c <HAL_DMA_DeInit+0x238>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d02c      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a47      	ldr	r2, [pc, #284]	@ (8009870 <HAL_DMA_DeInit+0x23c>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d027      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a45      	ldr	r2, [pc, #276]	@ (8009874 <HAL_DMA_DeInit+0x240>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d022      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a44      	ldr	r2, [pc, #272]	@ (8009878 <HAL_DMA_DeInit+0x244>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d01d      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a42      	ldr	r2, [pc, #264]	@ (800987c <HAL_DMA_DeInit+0x248>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d018      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a41      	ldr	r2, [pc, #260]	@ (8009880 <HAL_DMA_DeInit+0x24c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d013      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a3f      	ldr	r2, [pc, #252]	@ (8009884 <HAL_DMA_DeInit+0x250>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d00e      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a3e      	ldr	r2, [pc, #248]	@ (8009888 <HAL_DMA_DeInit+0x254>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d009      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a3c      	ldr	r2, [pc, #240]	@ (800988c <HAL_DMA_DeInit+0x258>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d004      	beq.n	80097a8 <HAL_DMA_DeInit+0x174>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a3b      	ldr	r2, [pc, #236]	@ (8009890 <HAL_DMA_DeInit+0x25c>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d101      	bne.n	80097ac <HAL_DMA_DeInit+0x178>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e000      	b.n	80097ae <HAL_DMA_DeInit+0x17a>
 80097ac:	2300      	movs	r3, #0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d025      	beq.n	80097fe <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2200      	movs	r2, #0
 80097c0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2200      	movs	r2, #0
 80097c8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2200      	movs	r2, #0
 80097d0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2200      	movs	r2, #0
 80097d8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2221      	movs	r2, #33	@ 0x21
 80097e0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f002 f98c 	bl	800bb00 <DMA_CalcBaseAndBitshift>
 80097e8:	4603      	mov	r3, r0
 80097ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097f0:	f003 031f 	and.w	r3, r3, #31
 80097f4:	223f      	movs	r2, #63	@ 0x3f
 80097f6:	409a      	lsls	r2, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	609a      	str	r2, [r3, #8]
 80097fc:	e081      	b.n	8009902 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a24      	ldr	r2, [pc, #144]	@ (8009894 <HAL_DMA_DeInit+0x260>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d022      	beq.n	800984e <HAL_DMA_DeInit+0x21a>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a22      	ldr	r2, [pc, #136]	@ (8009898 <HAL_DMA_DeInit+0x264>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d01d      	beq.n	800984e <HAL_DMA_DeInit+0x21a>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a21      	ldr	r2, [pc, #132]	@ (800989c <HAL_DMA_DeInit+0x268>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d018      	beq.n	800984e <HAL_DMA_DeInit+0x21a>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a1f      	ldr	r2, [pc, #124]	@ (80098a0 <HAL_DMA_DeInit+0x26c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d013      	beq.n	800984e <HAL_DMA_DeInit+0x21a>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a1e      	ldr	r2, [pc, #120]	@ (80098a4 <HAL_DMA_DeInit+0x270>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d00e      	beq.n	800984e <HAL_DMA_DeInit+0x21a>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a1c      	ldr	r2, [pc, #112]	@ (80098a8 <HAL_DMA_DeInit+0x274>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d009      	beq.n	800984e <HAL_DMA_DeInit+0x21a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a1b      	ldr	r2, [pc, #108]	@ (80098ac <HAL_DMA_DeInit+0x278>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d004      	beq.n	800984e <HAL_DMA_DeInit+0x21a>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a19      	ldr	r2, [pc, #100]	@ (80098b0 <HAL_DMA_DeInit+0x27c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d132      	bne.n	80098b4 <HAL_DMA_DeInit+0x280>
 800984e:	2301      	movs	r3, #1
 8009850:	e031      	b.n	80098b6 <HAL_DMA_DeInit+0x282>
 8009852:	bf00      	nop
 8009854:	40020010 	.word	0x40020010
 8009858:	40020028 	.word	0x40020028
 800985c:	40020040 	.word	0x40020040
 8009860:	40020058 	.word	0x40020058
 8009864:	40020070 	.word	0x40020070
 8009868:	40020088 	.word	0x40020088
 800986c:	400200a0 	.word	0x400200a0
 8009870:	400200b8 	.word	0x400200b8
 8009874:	40020410 	.word	0x40020410
 8009878:	40020428 	.word	0x40020428
 800987c:	40020440 	.word	0x40020440
 8009880:	40020458 	.word	0x40020458
 8009884:	40020470 	.word	0x40020470
 8009888:	40020488 	.word	0x40020488
 800988c:	400204a0 	.word	0x400204a0
 8009890:	400204b8 	.word	0x400204b8
 8009894:	58025408 	.word	0x58025408
 8009898:	5802541c 	.word	0x5802541c
 800989c:	58025430 	.word	0x58025430
 80098a0:	58025444 	.word	0x58025444
 80098a4:	58025458 	.word	0x58025458
 80098a8:	5802546c 	.word	0x5802546c
 80098ac:	58025480 	.word	0x58025480
 80098b0:	58025494 	.word	0x58025494
 80098b4:	2300      	movs	r3, #0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d021      	beq.n	80098fe <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2200      	movs	r2, #0
 80098c0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2200      	movs	r2, #0
 80098c8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2200      	movs	r2, #0
 80098d0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2200      	movs	r2, #0
 80098d8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2200      	movs	r2, #0
 80098e0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f002 f90c 	bl	800bb00 <DMA_CalcBaseAndBitshift>
 80098e8:	4603      	mov	r3, r0
 80098ea:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098f0:	f003 031f 	and.w	r3, r3, #31
 80098f4:	2201      	movs	r2, #1
 80098f6:	409a      	lsls	r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	605a      	str	r2, [r3, #4]
 80098fc:	e001      	b.n	8009902 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e04a      	b.n	8009998 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f002 fa2a 	bl	800bd5c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800990c:	2b00      	cmp	r3, #0
 800990e:	d008      	beq.n	8009922 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009920:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00f      	beq.n	800994a <HAL_DMA_DeInit+0x316>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	2b08      	cmp	r3, #8
 8009930:	d80b      	bhi.n	800994a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f002 faac 	bl	800be90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800993c:	2200      	movs	r2, #0
 800993e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009948:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
 80099ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e226      	b.n	8009e0a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d101      	bne.n	80099ca <HAL_DMA_Start_IT+0x2a>
 80099c6:	2302      	movs	r3, #2
 80099c8:	e21f      	b.n	8009e0a <HAL_DMA_Start_IT+0x46a>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b01      	cmp	r3, #1
 80099dc:	f040 820a 	bne.w	8009df4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a68      	ldr	r2, [pc, #416]	@ (8009b94 <HAL_DMA_Start_IT+0x1f4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d04a      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a66      	ldr	r2, [pc, #408]	@ (8009b98 <HAL_DMA_Start_IT+0x1f8>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d045      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a65      	ldr	r2, [pc, #404]	@ (8009b9c <HAL_DMA_Start_IT+0x1fc>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d040      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a63      	ldr	r2, [pc, #396]	@ (8009ba0 <HAL_DMA_Start_IT+0x200>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d03b      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a62      	ldr	r2, [pc, #392]	@ (8009ba4 <HAL_DMA_Start_IT+0x204>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d036      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a60      	ldr	r2, [pc, #384]	@ (8009ba8 <HAL_DMA_Start_IT+0x208>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d031      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8009bac <HAL_DMA_Start_IT+0x20c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d02c      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a5d      	ldr	r2, [pc, #372]	@ (8009bb0 <HAL_DMA_Start_IT+0x210>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d027      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a5c      	ldr	r2, [pc, #368]	@ (8009bb4 <HAL_DMA_Start_IT+0x214>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d022      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a5a      	ldr	r2, [pc, #360]	@ (8009bb8 <HAL_DMA_Start_IT+0x218>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d01d      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a59      	ldr	r2, [pc, #356]	@ (8009bbc <HAL_DMA_Start_IT+0x21c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d018      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a57      	ldr	r2, [pc, #348]	@ (8009bc0 <HAL_DMA_Start_IT+0x220>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d013      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a56      	ldr	r2, [pc, #344]	@ (8009bc4 <HAL_DMA_Start_IT+0x224>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d00e      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a54      	ldr	r2, [pc, #336]	@ (8009bc8 <HAL_DMA_Start_IT+0x228>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d009      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a53      	ldr	r2, [pc, #332]	@ (8009bcc <HAL_DMA_Start_IT+0x22c>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d004      	beq.n	8009a8e <HAL_DMA_Start_IT+0xee>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a51      	ldr	r2, [pc, #324]	@ (8009bd0 <HAL_DMA_Start_IT+0x230>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d108      	bne.n	8009aa0 <HAL_DMA_Start_IT+0x100>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 0201 	bic.w	r2, r2, #1
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	e007      	b.n	8009ab0 <HAL_DMA_Start_IT+0x110>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f022 0201 	bic.w	r2, r2, #1
 8009aae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	68b9      	ldr	r1, [r7, #8]
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f001 fe76 	bl	800b7a8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a34      	ldr	r2, [pc, #208]	@ (8009b94 <HAL_DMA_Start_IT+0x1f4>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d04a      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a33      	ldr	r2, [pc, #204]	@ (8009b98 <HAL_DMA_Start_IT+0x1f8>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d045      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a31      	ldr	r2, [pc, #196]	@ (8009b9c <HAL_DMA_Start_IT+0x1fc>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d040      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a30      	ldr	r2, [pc, #192]	@ (8009ba0 <HAL_DMA_Start_IT+0x200>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d03b      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8009ba4 <HAL_DMA_Start_IT+0x204>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d036      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a2d      	ldr	r2, [pc, #180]	@ (8009ba8 <HAL_DMA_Start_IT+0x208>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d031      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a2b      	ldr	r2, [pc, #172]	@ (8009bac <HAL_DMA_Start_IT+0x20c>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d02c      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a2a      	ldr	r2, [pc, #168]	@ (8009bb0 <HAL_DMA_Start_IT+0x210>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d027      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a28      	ldr	r2, [pc, #160]	@ (8009bb4 <HAL_DMA_Start_IT+0x214>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d022      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a27      	ldr	r2, [pc, #156]	@ (8009bb8 <HAL_DMA_Start_IT+0x218>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d01d      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a25      	ldr	r2, [pc, #148]	@ (8009bbc <HAL_DMA_Start_IT+0x21c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d018      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a24      	ldr	r2, [pc, #144]	@ (8009bc0 <HAL_DMA_Start_IT+0x220>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d013      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a22      	ldr	r2, [pc, #136]	@ (8009bc4 <HAL_DMA_Start_IT+0x224>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d00e      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a21      	ldr	r2, [pc, #132]	@ (8009bc8 <HAL_DMA_Start_IT+0x228>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d009      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8009bcc <HAL_DMA_Start_IT+0x22c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d004      	beq.n	8009b5c <HAL_DMA_Start_IT+0x1bc>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a1e      	ldr	r2, [pc, #120]	@ (8009bd0 <HAL_DMA_Start_IT+0x230>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d101      	bne.n	8009b60 <HAL_DMA_Start_IT+0x1c0>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e000      	b.n	8009b62 <HAL_DMA_Start_IT+0x1c2>
 8009b60:	2300      	movs	r3, #0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d036      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f023 021e 	bic.w	r2, r3, #30
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f042 0216 	orr.w	r2, r2, #22
 8009b78:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d03e      	beq.n	8009c00 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f042 0208 	orr.w	r2, r2, #8
 8009b90:	601a      	str	r2, [r3, #0]
 8009b92:	e035      	b.n	8009c00 <HAL_DMA_Start_IT+0x260>
 8009b94:	40020010 	.word	0x40020010
 8009b98:	40020028 	.word	0x40020028
 8009b9c:	40020040 	.word	0x40020040
 8009ba0:	40020058 	.word	0x40020058
 8009ba4:	40020070 	.word	0x40020070
 8009ba8:	40020088 	.word	0x40020088
 8009bac:	400200a0 	.word	0x400200a0
 8009bb0:	400200b8 	.word	0x400200b8
 8009bb4:	40020410 	.word	0x40020410
 8009bb8:	40020428 	.word	0x40020428
 8009bbc:	40020440 	.word	0x40020440
 8009bc0:	40020458 	.word	0x40020458
 8009bc4:	40020470 	.word	0x40020470
 8009bc8:	40020488 	.word	0x40020488
 8009bcc:	400204a0 	.word	0x400204a0
 8009bd0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f023 020e 	bic.w	r2, r3, #14
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 020a 	orr.w	r2, r2, #10
 8009be6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d007      	beq.n	8009c00 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0204 	orr.w	r2, r2, #4
 8009bfe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a83      	ldr	r2, [pc, #524]	@ (8009e14 <HAL_DMA_Start_IT+0x474>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d072      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a82      	ldr	r2, [pc, #520]	@ (8009e18 <HAL_DMA_Start_IT+0x478>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d06d      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a80      	ldr	r2, [pc, #512]	@ (8009e1c <HAL_DMA_Start_IT+0x47c>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d068      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a7f      	ldr	r2, [pc, #508]	@ (8009e20 <HAL_DMA_Start_IT+0x480>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d063      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a7d      	ldr	r2, [pc, #500]	@ (8009e24 <HAL_DMA_Start_IT+0x484>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d05e      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a7c      	ldr	r2, [pc, #496]	@ (8009e28 <HAL_DMA_Start_IT+0x488>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d059      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a7a      	ldr	r2, [pc, #488]	@ (8009e2c <HAL_DMA_Start_IT+0x48c>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d054      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a79      	ldr	r2, [pc, #484]	@ (8009e30 <HAL_DMA_Start_IT+0x490>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d04f      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a77      	ldr	r2, [pc, #476]	@ (8009e34 <HAL_DMA_Start_IT+0x494>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d04a      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a76      	ldr	r2, [pc, #472]	@ (8009e38 <HAL_DMA_Start_IT+0x498>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d045      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a74      	ldr	r2, [pc, #464]	@ (8009e3c <HAL_DMA_Start_IT+0x49c>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d040      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a73      	ldr	r2, [pc, #460]	@ (8009e40 <HAL_DMA_Start_IT+0x4a0>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d03b      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a71      	ldr	r2, [pc, #452]	@ (8009e44 <HAL_DMA_Start_IT+0x4a4>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d036      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a70      	ldr	r2, [pc, #448]	@ (8009e48 <HAL_DMA_Start_IT+0x4a8>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d031      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a6e      	ldr	r2, [pc, #440]	@ (8009e4c <HAL_DMA_Start_IT+0x4ac>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d02c      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a6d      	ldr	r2, [pc, #436]	@ (8009e50 <HAL_DMA_Start_IT+0x4b0>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d027      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a6b      	ldr	r2, [pc, #428]	@ (8009e54 <HAL_DMA_Start_IT+0x4b4>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d022      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a6a      	ldr	r2, [pc, #424]	@ (8009e58 <HAL_DMA_Start_IT+0x4b8>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d01d      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a68      	ldr	r2, [pc, #416]	@ (8009e5c <HAL_DMA_Start_IT+0x4bc>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d018      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a67      	ldr	r2, [pc, #412]	@ (8009e60 <HAL_DMA_Start_IT+0x4c0>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d013      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a65      	ldr	r2, [pc, #404]	@ (8009e64 <HAL_DMA_Start_IT+0x4c4>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d00e      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a64      	ldr	r2, [pc, #400]	@ (8009e68 <HAL_DMA_Start_IT+0x4c8>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d009      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a62      	ldr	r2, [pc, #392]	@ (8009e6c <HAL_DMA_Start_IT+0x4cc>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d004      	beq.n	8009cf0 <HAL_DMA_Start_IT+0x350>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a61      	ldr	r2, [pc, #388]	@ (8009e70 <HAL_DMA_Start_IT+0x4d0>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d101      	bne.n	8009cf4 <HAL_DMA_Start_IT+0x354>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e000      	b.n	8009cf6 <HAL_DMA_Start_IT+0x356>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d01a      	beq.n	8009d30 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d007      	beq.n	8009d18 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d16:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d007      	beq.n	8009d30 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d2e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a37      	ldr	r2, [pc, #220]	@ (8009e14 <HAL_DMA_Start_IT+0x474>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d04a      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a36      	ldr	r2, [pc, #216]	@ (8009e18 <HAL_DMA_Start_IT+0x478>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d045      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a34      	ldr	r2, [pc, #208]	@ (8009e1c <HAL_DMA_Start_IT+0x47c>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d040      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a33      	ldr	r2, [pc, #204]	@ (8009e20 <HAL_DMA_Start_IT+0x480>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d03b      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a31      	ldr	r2, [pc, #196]	@ (8009e24 <HAL_DMA_Start_IT+0x484>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d036      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a30      	ldr	r2, [pc, #192]	@ (8009e28 <HAL_DMA_Start_IT+0x488>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d031      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a2e      	ldr	r2, [pc, #184]	@ (8009e2c <HAL_DMA_Start_IT+0x48c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d02c      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8009e30 <HAL_DMA_Start_IT+0x490>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d027      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a2b      	ldr	r2, [pc, #172]	@ (8009e34 <HAL_DMA_Start_IT+0x494>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d022      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8009e38 <HAL_DMA_Start_IT+0x498>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d01d      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a28      	ldr	r2, [pc, #160]	@ (8009e3c <HAL_DMA_Start_IT+0x49c>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d018      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a27      	ldr	r2, [pc, #156]	@ (8009e40 <HAL_DMA_Start_IT+0x4a0>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d013      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a25      	ldr	r2, [pc, #148]	@ (8009e44 <HAL_DMA_Start_IT+0x4a4>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00e      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a24      	ldr	r2, [pc, #144]	@ (8009e48 <HAL_DMA_Start_IT+0x4a8>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d009      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a22      	ldr	r2, [pc, #136]	@ (8009e4c <HAL_DMA_Start_IT+0x4ac>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d004      	beq.n	8009dd0 <HAL_DMA_Start_IT+0x430>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a21      	ldr	r2, [pc, #132]	@ (8009e50 <HAL_DMA_Start_IT+0x4b0>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d108      	bne.n	8009de2 <HAL_DMA_Start_IT+0x442>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0201 	orr.w	r2, r2, #1
 8009dde:	601a      	str	r2, [r3, #0]
 8009de0:	e012      	b.n	8009e08 <HAL_DMA_Start_IT+0x468>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f042 0201 	orr.w	r2, r2, #1
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	e009      	b.n	8009e08 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009dfa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	40020010 	.word	0x40020010
 8009e18:	40020028 	.word	0x40020028
 8009e1c:	40020040 	.word	0x40020040
 8009e20:	40020058 	.word	0x40020058
 8009e24:	40020070 	.word	0x40020070
 8009e28:	40020088 	.word	0x40020088
 8009e2c:	400200a0 	.word	0x400200a0
 8009e30:	400200b8 	.word	0x400200b8
 8009e34:	40020410 	.word	0x40020410
 8009e38:	40020428 	.word	0x40020428
 8009e3c:	40020440 	.word	0x40020440
 8009e40:	40020458 	.word	0x40020458
 8009e44:	40020470 	.word	0x40020470
 8009e48:	40020488 	.word	0x40020488
 8009e4c:	400204a0 	.word	0x400204a0
 8009e50:	400204b8 	.word	0x400204b8
 8009e54:	58025408 	.word	0x58025408
 8009e58:	5802541c 	.word	0x5802541c
 8009e5c:	58025430 	.word	0x58025430
 8009e60:	58025444 	.word	0x58025444
 8009e64:	58025458 	.word	0x58025458
 8009e68:	5802546c 	.word	0x5802546c
 8009e6c:	58025480 	.word	0x58025480
 8009e70:	58025494 	.word	0x58025494

08009e74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009e7c:	f7fe fd72 	bl	8008964 <HAL_GetTick>
 8009e80:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e2dc      	b.n	800a446 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d008      	beq.n	8009eaa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2280      	movs	r2, #128	@ 0x80
 8009e9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e2cd      	b.n	800a446 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a76      	ldr	r2, [pc, #472]	@ (800a088 <HAL_DMA_Abort+0x214>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d04a      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a74      	ldr	r2, [pc, #464]	@ (800a08c <HAL_DMA_Abort+0x218>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d045      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a73      	ldr	r2, [pc, #460]	@ (800a090 <HAL_DMA_Abort+0x21c>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d040      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a71      	ldr	r2, [pc, #452]	@ (800a094 <HAL_DMA_Abort+0x220>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d03b      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a70      	ldr	r2, [pc, #448]	@ (800a098 <HAL_DMA_Abort+0x224>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d036      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800a09c <HAL_DMA_Abort+0x228>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d031      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a6d      	ldr	r2, [pc, #436]	@ (800a0a0 <HAL_DMA_Abort+0x22c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d02c      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a6b      	ldr	r2, [pc, #428]	@ (800a0a4 <HAL_DMA_Abort+0x230>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d027      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a6a      	ldr	r2, [pc, #424]	@ (800a0a8 <HAL_DMA_Abort+0x234>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d022      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a68      	ldr	r2, [pc, #416]	@ (800a0ac <HAL_DMA_Abort+0x238>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d01d      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a67      	ldr	r2, [pc, #412]	@ (800a0b0 <HAL_DMA_Abort+0x23c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d018      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a65      	ldr	r2, [pc, #404]	@ (800a0b4 <HAL_DMA_Abort+0x240>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d013      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a64      	ldr	r2, [pc, #400]	@ (800a0b8 <HAL_DMA_Abort+0x244>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d00e      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a62      	ldr	r2, [pc, #392]	@ (800a0bc <HAL_DMA_Abort+0x248>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d009      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a61      	ldr	r2, [pc, #388]	@ (800a0c0 <HAL_DMA_Abort+0x24c>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d004      	beq.n	8009f4a <HAL_DMA_Abort+0xd6>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a5f      	ldr	r2, [pc, #380]	@ (800a0c4 <HAL_DMA_Abort+0x250>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d101      	bne.n	8009f4e <HAL_DMA_Abort+0xda>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <HAL_DMA_Abort+0xdc>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d013      	beq.n	8009f7c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f022 021e 	bic.w	r2, r2, #30
 8009f62:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	695a      	ldr	r2, [r3, #20]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f72:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	617b      	str	r3, [r7, #20]
 8009f7a:	e00a      	b.n	8009f92 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 020e 	bic.w	r2, r2, #14
 8009f8a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a3c      	ldr	r2, [pc, #240]	@ (800a088 <HAL_DMA_Abort+0x214>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d072      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a3a      	ldr	r2, [pc, #232]	@ (800a08c <HAL_DMA_Abort+0x218>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d06d      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a39      	ldr	r2, [pc, #228]	@ (800a090 <HAL_DMA_Abort+0x21c>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d068      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a37      	ldr	r2, [pc, #220]	@ (800a094 <HAL_DMA_Abort+0x220>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d063      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a36      	ldr	r2, [pc, #216]	@ (800a098 <HAL_DMA_Abort+0x224>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d05e      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a34      	ldr	r2, [pc, #208]	@ (800a09c <HAL_DMA_Abort+0x228>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d059      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a33      	ldr	r2, [pc, #204]	@ (800a0a0 <HAL_DMA_Abort+0x22c>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d054      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a31      	ldr	r2, [pc, #196]	@ (800a0a4 <HAL_DMA_Abort+0x230>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d04f      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a30      	ldr	r2, [pc, #192]	@ (800a0a8 <HAL_DMA_Abort+0x234>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d04a      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a2e      	ldr	r2, [pc, #184]	@ (800a0ac <HAL_DMA_Abort+0x238>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d045      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a2d      	ldr	r2, [pc, #180]	@ (800a0b0 <HAL_DMA_Abort+0x23c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d040      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a2b      	ldr	r2, [pc, #172]	@ (800a0b4 <HAL_DMA_Abort+0x240>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d03b      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a2a      	ldr	r2, [pc, #168]	@ (800a0b8 <HAL_DMA_Abort+0x244>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d036      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a28      	ldr	r2, [pc, #160]	@ (800a0bc <HAL_DMA_Abort+0x248>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d031      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a27      	ldr	r2, [pc, #156]	@ (800a0c0 <HAL_DMA_Abort+0x24c>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d02c      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a25      	ldr	r2, [pc, #148]	@ (800a0c4 <HAL_DMA_Abort+0x250>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d027      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a24      	ldr	r2, [pc, #144]	@ (800a0c8 <HAL_DMA_Abort+0x254>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d022      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a22      	ldr	r2, [pc, #136]	@ (800a0cc <HAL_DMA_Abort+0x258>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d01d      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a21      	ldr	r2, [pc, #132]	@ (800a0d0 <HAL_DMA_Abort+0x25c>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d018      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a1f      	ldr	r2, [pc, #124]	@ (800a0d4 <HAL_DMA_Abort+0x260>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d013      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a1e      	ldr	r2, [pc, #120]	@ (800a0d8 <HAL_DMA_Abort+0x264>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d00e      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a1c      	ldr	r2, [pc, #112]	@ (800a0dc <HAL_DMA_Abort+0x268>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d009      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a1b      	ldr	r2, [pc, #108]	@ (800a0e0 <HAL_DMA_Abort+0x26c>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d004      	beq.n	800a082 <HAL_DMA_Abort+0x20e>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a19      	ldr	r2, [pc, #100]	@ (800a0e4 <HAL_DMA_Abort+0x270>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d132      	bne.n	800a0e8 <HAL_DMA_Abort+0x274>
 800a082:	2301      	movs	r3, #1
 800a084:	e031      	b.n	800a0ea <HAL_DMA_Abort+0x276>
 800a086:	bf00      	nop
 800a088:	40020010 	.word	0x40020010
 800a08c:	40020028 	.word	0x40020028
 800a090:	40020040 	.word	0x40020040
 800a094:	40020058 	.word	0x40020058
 800a098:	40020070 	.word	0x40020070
 800a09c:	40020088 	.word	0x40020088
 800a0a0:	400200a0 	.word	0x400200a0
 800a0a4:	400200b8 	.word	0x400200b8
 800a0a8:	40020410 	.word	0x40020410
 800a0ac:	40020428 	.word	0x40020428
 800a0b0:	40020440 	.word	0x40020440
 800a0b4:	40020458 	.word	0x40020458
 800a0b8:	40020470 	.word	0x40020470
 800a0bc:	40020488 	.word	0x40020488
 800a0c0:	400204a0 	.word	0x400204a0
 800a0c4:	400204b8 	.word	0x400204b8
 800a0c8:	58025408 	.word	0x58025408
 800a0cc:	5802541c 	.word	0x5802541c
 800a0d0:	58025430 	.word	0x58025430
 800a0d4:	58025444 	.word	0x58025444
 800a0d8:	58025458 	.word	0x58025458
 800a0dc:	5802546c 	.word	0x5802546c
 800a0e0:	58025480 	.word	0x58025480
 800a0e4:	58025494 	.word	0x58025494
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d007      	beq.n	800a0fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a6d      	ldr	r2, [pc, #436]	@ (800a2b8 <HAL_DMA_Abort+0x444>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d04a      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a6b      	ldr	r2, [pc, #428]	@ (800a2bc <HAL_DMA_Abort+0x448>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d045      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a6a      	ldr	r2, [pc, #424]	@ (800a2c0 <HAL_DMA_Abort+0x44c>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d040      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a68      	ldr	r2, [pc, #416]	@ (800a2c4 <HAL_DMA_Abort+0x450>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d03b      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a67      	ldr	r2, [pc, #412]	@ (800a2c8 <HAL_DMA_Abort+0x454>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d036      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a65      	ldr	r2, [pc, #404]	@ (800a2cc <HAL_DMA_Abort+0x458>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d031      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a64      	ldr	r2, [pc, #400]	@ (800a2d0 <HAL_DMA_Abort+0x45c>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d02c      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a62      	ldr	r2, [pc, #392]	@ (800a2d4 <HAL_DMA_Abort+0x460>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d027      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a61      	ldr	r2, [pc, #388]	@ (800a2d8 <HAL_DMA_Abort+0x464>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d022      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a5f      	ldr	r2, [pc, #380]	@ (800a2dc <HAL_DMA_Abort+0x468>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d01d      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a5e      	ldr	r2, [pc, #376]	@ (800a2e0 <HAL_DMA_Abort+0x46c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d018      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a5c      	ldr	r2, [pc, #368]	@ (800a2e4 <HAL_DMA_Abort+0x470>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d013      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a5b      	ldr	r2, [pc, #364]	@ (800a2e8 <HAL_DMA_Abort+0x474>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00e      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a59      	ldr	r2, [pc, #356]	@ (800a2ec <HAL_DMA_Abort+0x478>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d009      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a58      	ldr	r2, [pc, #352]	@ (800a2f0 <HAL_DMA_Abort+0x47c>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d004      	beq.n	800a19e <HAL_DMA_Abort+0x32a>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a56      	ldr	r2, [pc, #344]	@ (800a2f4 <HAL_DMA_Abort+0x480>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d108      	bne.n	800a1b0 <HAL_DMA_Abort+0x33c>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f022 0201 	bic.w	r2, r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	e007      	b.n	800a1c0 <HAL_DMA_Abort+0x34c>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 0201 	bic.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a1c0:	e013      	b.n	800a1ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a1c2:	f7fe fbcf 	bl	8008964 <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	2b05      	cmp	r3, #5
 800a1ce:	d90c      	bls.n	800a1ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2203      	movs	r2, #3
 800a1da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e12d      	b.n	800a446 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1e5      	bne.n	800a1c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a2f      	ldr	r2, [pc, #188]	@ (800a2b8 <HAL_DMA_Abort+0x444>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d04a      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a2d      	ldr	r2, [pc, #180]	@ (800a2bc <HAL_DMA_Abort+0x448>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d045      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a2c      	ldr	r2, [pc, #176]	@ (800a2c0 <HAL_DMA_Abort+0x44c>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d040      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a2a      	ldr	r2, [pc, #168]	@ (800a2c4 <HAL_DMA_Abort+0x450>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d03b      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a29      	ldr	r2, [pc, #164]	@ (800a2c8 <HAL_DMA_Abort+0x454>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d036      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a27      	ldr	r2, [pc, #156]	@ (800a2cc <HAL_DMA_Abort+0x458>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d031      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a26      	ldr	r2, [pc, #152]	@ (800a2d0 <HAL_DMA_Abort+0x45c>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d02c      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a24      	ldr	r2, [pc, #144]	@ (800a2d4 <HAL_DMA_Abort+0x460>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d027      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a23      	ldr	r2, [pc, #140]	@ (800a2d8 <HAL_DMA_Abort+0x464>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d022      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a21      	ldr	r2, [pc, #132]	@ (800a2dc <HAL_DMA_Abort+0x468>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d01d      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a20      	ldr	r2, [pc, #128]	@ (800a2e0 <HAL_DMA_Abort+0x46c>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d018      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a1e      	ldr	r2, [pc, #120]	@ (800a2e4 <HAL_DMA_Abort+0x470>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d013      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a1d      	ldr	r2, [pc, #116]	@ (800a2e8 <HAL_DMA_Abort+0x474>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d00e      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a1b      	ldr	r2, [pc, #108]	@ (800a2ec <HAL_DMA_Abort+0x478>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d009      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a1a      	ldr	r2, [pc, #104]	@ (800a2f0 <HAL_DMA_Abort+0x47c>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d004      	beq.n	800a296 <HAL_DMA_Abort+0x422>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a18      	ldr	r2, [pc, #96]	@ (800a2f4 <HAL_DMA_Abort+0x480>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d101      	bne.n	800a29a <HAL_DMA_Abort+0x426>
 800a296:	2301      	movs	r3, #1
 800a298:	e000      	b.n	800a29c <HAL_DMA_Abort+0x428>
 800a29a:	2300      	movs	r3, #0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d02b      	beq.n	800a2f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2aa:	f003 031f 	and.w	r3, r3, #31
 800a2ae:	223f      	movs	r2, #63	@ 0x3f
 800a2b0:	409a      	lsls	r2, r3
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	609a      	str	r2, [r3, #8]
 800a2b6:	e02a      	b.n	800a30e <HAL_DMA_Abort+0x49a>
 800a2b8:	40020010 	.word	0x40020010
 800a2bc:	40020028 	.word	0x40020028
 800a2c0:	40020040 	.word	0x40020040
 800a2c4:	40020058 	.word	0x40020058
 800a2c8:	40020070 	.word	0x40020070
 800a2cc:	40020088 	.word	0x40020088
 800a2d0:	400200a0 	.word	0x400200a0
 800a2d4:	400200b8 	.word	0x400200b8
 800a2d8:	40020410 	.word	0x40020410
 800a2dc:	40020428 	.word	0x40020428
 800a2e0:	40020440 	.word	0x40020440
 800a2e4:	40020458 	.word	0x40020458
 800a2e8:	40020470 	.word	0x40020470
 800a2ec:	40020488 	.word	0x40020488
 800a2f0:	400204a0 	.word	0x400204a0
 800a2f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a302:	f003 031f 	and.w	r3, r3, #31
 800a306:	2201      	movs	r2, #1
 800a308:	409a      	lsls	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a4f      	ldr	r2, [pc, #316]	@ (800a450 <HAL_DMA_Abort+0x5dc>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d072      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a4d      	ldr	r2, [pc, #308]	@ (800a454 <HAL_DMA_Abort+0x5e0>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d06d      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a4c      	ldr	r2, [pc, #304]	@ (800a458 <HAL_DMA_Abort+0x5e4>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d068      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a4a      	ldr	r2, [pc, #296]	@ (800a45c <HAL_DMA_Abort+0x5e8>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d063      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a49      	ldr	r2, [pc, #292]	@ (800a460 <HAL_DMA_Abort+0x5ec>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d05e      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a47      	ldr	r2, [pc, #284]	@ (800a464 <HAL_DMA_Abort+0x5f0>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d059      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a46      	ldr	r2, [pc, #280]	@ (800a468 <HAL_DMA_Abort+0x5f4>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d054      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a44      	ldr	r2, [pc, #272]	@ (800a46c <HAL_DMA_Abort+0x5f8>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d04f      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a43      	ldr	r2, [pc, #268]	@ (800a470 <HAL_DMA_Abort+0x5fc>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d04a      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a41      	ldr	r2, [pc, #260]	@ (800a474 <HAL_DMA_Abort+0x600>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d045      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a40      	ldr	r2, [pc, #256]	@ (800a478 <HAL_DMA_Abort+0x604>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d040      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a3e      	ldr	r2, [pc, #248]	@ (800a47c <HAL_DMA_Abort+0x608>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d03b      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a3d      	ldr	r2, [pc, #244]	@ (800a480 <HAL_DMA_Abort+0x60c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d036      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a3b      	ldr	r2, [pc, #236]	@ (800a484 <HAL_DMA_Abort+0x610>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d031      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a3a      	ldr	r2, [pc, #232]	@ (800a488 <HAL_DMA_Abort+0x614>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d02c      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a38      	ldr	r2, [pc, #224]	@ (800a48c <HAL_DMA_Abort+0x618>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d027      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a37      	ldr	r2, [pc, #220]	@ (800a490 <HAL_DMA_Abort+0x61c>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d022      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a35      	ldr	r2, [pc, #212]	@ (800a494 <HAL_DMA_Abort+0x620>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d01d      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a34      	ldr	r2, [pc, #208]	@ (800a498 <HAL_DMA_Abort+0x624>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d018      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a32      	ldr	r2, [pc, #200]	@ (800a49c <HAL_DMA_Abort+0x628>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d013      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a31      	ldr	r2, [pc, #196]	@ (800a4a0 <HAL_DMA_Abort+0x62c>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d00e      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a2f      	ldr	r2, [pc, #188]	@ (800a4a4 <HAL_DMA_Abort+0x630>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d009      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a2e      	ldr	r2, [pc, #184]	@ (800a4a8 <HAL_DMA_Abort+0x634>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d004      	beq.n	800a3fe <HAL_DMA_Abort+0x58a>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a2c      	ldr	r2, [pc, #176]	@ (800a4ac <HAL_DMA_Abort+0x638>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d101      	bne.n	800a402 <HAL_DMA_Abort+0x58e>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e000      	b.n	800a404 <HAL_DMA_Abort+0x590>
 800a402:	2300      	movs	r3, #0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d015      	beq.n	800a434 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a410:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00c      	beq.n	800a434 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a428:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a432:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3718      	adds	r7, #24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	40020010 	.word	0x40020010
 800a454:	40020028 	.word	0x40020028
 800a458:	40020040 	.word	0x40020040
 800a45c:	40020058 	.word	0x40020058
 800a460:	40020070 	.word	0x40020070
 800a464:	40020088 	.word	0x40020088
 800a468:	400200a0 	.word	0x400200a0
 800a46c:	400200b8 	.word	0x400200b8
 800a470:	40020410 	.word	0x40020410
 800a474:	40020428 	.word	0x40020428
 800a478:	40020440 	.word	0x40020440
 800a47c:	40020458 	.word	0x40020458
 800a480:	40020470 	.word	0x40020470
 800a484:	40020488 	.word	0x40020488
 800a488:	400204a0 	.word	0x400204a0
 800a48c:	400204b8 	.word	0x400204b8
 800a490:	58025408 	.word	0x58025408
 800a494:	5802541c 	.word	0x5802541c
 800a498:	58025430 	.word	0x58025430
 800a49c:	58025444 	.word	0x58025444
 800a4a0:	58025458 	.word	0x58025458
 800a4a4:	5802546c 	.word	0x5802546c
 800a4a8:	58025480 	.word	0x58025480
 800a4ac:	58025494 	.word	0x58025494

0800a4b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e237      	b.n	800a932 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d004      	beq.n	800a4d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2280      	movs	r2, #128	@ 0x80
 800a4d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e22c      	b.n	800a932 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a5c      	ldr	r2, [pc, #368]	@ (800a650 <HAL_DMA_Abort_IT+0x1a0>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d04a      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a5b      	ldr	r2, [pc, #364]	@ (800a654 <HAL_DMA_Abort_IT+0x1a4>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d045      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a59      	ldr	r2, [pc, #356]	@ (800a658 <HAL_DMA_Abort_IT+0x1a8>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d040      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a58      	ldr	r2, [pc, #352]	@ (800a65c <HAL_DMA_Abort_IT+0x1ac>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d03b      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a56      	ldr	r2, [pc, #344]	@ (800a660 <HAL_DMA_Abort_IT+0x1b0>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d036      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a55      	ldr	r2, [pc, #340]	@ (800a664 <HAL_DMA_Abort_IT+0x1b4>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d031      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a53      	ldr	r2, [pc, #332]	@ (800a668 <HAL_DMA_Abort_IT+0x1b8>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d02c      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a52      	ldr	r2, [pc, #328]	@ (800a66c <HAL_DMA_Abort_IT+0x1bc>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d027      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a50      	ldr	r2, [pc, #320]	@ (800a670 <HAL_DMA_Abort_IT+0x1c0>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d022      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a4f      	ldr	r2, [pc, #316]	@ (800a674 <HAL_DMA_Abort_IT+0x1c4>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d01d      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a4d      	ldr	r2, [pc, #308]	@ (800a678 <HAL_DMA_Abort_IT+0x1c8>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d018      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a4c      	ldr	r2, [pc, #304]	@ (800a67c <HAL_DMA_Abort_IT+0x1cc>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d013      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a4a      	ldr	r2, [pc, #296]	@ (800a680 <HAL_DMA_Abort_IT+0x1d0>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d00e      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a49      	ldr	r2, [pc, #292]	@ (800a684 <HAL_DMA_Abort_IT+0x1d4>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d009      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a47      	ldr	r2, [pc, #284]	@ (800a688 <HAL_DMA_Abort_IT+0x1d8>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d004      	beq.n	800a578 <HAL_DMA_Abort_IT+0xc8>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a46      	ldr	r2, [pc, #280]	@ (800a68c <HAL_DMA_Abort_IT+0x1dc>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d101      	bne.n	800a57c <HAL_DMA_Abort_IT+0xcc>
 800a578:	2301      	movs	r3, #1
 800a57a:	e000      	b.n	800a57e <HAL_DMA_Abort_IT+0xce>
 800a57c:	2300      	movs	r3, #0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f000 8086 	beq.w	800a690 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2204      	movs	r2, #4
 800a588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a2f      	ldr	r2, [pc, #188]	@ (800a650 <HAL_DMA_Abort_IT+0x1a0>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d04a      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a2e      	ldr	r2, [pc, #184]	@ (800a654 <HAL_DMA_Abort_IT+0x1a4>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d045      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a2c      	ldr	r2, [pc, #176]	@ (800a658 <HAL_DMA_Abort_IT+0x1a8>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d040      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a2b      	ldr	r2, [pc, #172]	@ (800a65c <HAL_DMA_Abort_IT+0x1ac>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d03b      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a29      	ldr	r2, [pc, #164]	@ (800a660 <HAL_DMA_Abort_IT+0x1b0>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d036      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a28      	ldr	r2, [pc, #160]	@ (800a664 <HAL_DMA_Abort_IT+0x1b4>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d031      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a26      	ldr	r2, [pc, #152]	@ (800a668 <HAL_DMA_Abort_IT+0x1b8>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d02c      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a25      	ldr	r2, [pc, #148]	@ (800a66c <HAL_DMA_Abort_IT+0x1bc>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d027      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a23      	ldr	r2, [pc, #140]	@ (800a670 <HAL_DMA_Abort_IT+0x1c0>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d022      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a22      	ldr	r2, [pc, #136]	@ (800a674 <HAL_DMA_Abort_IT+0x1c4>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d01d      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a20      	ldr	r2, [pc, #128]	@ (800a678 <HAL_DMA_Abort_IT+0x1c8>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d018      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a67c <HAL_DMA_Abort_IT+0x1cc>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d013      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a1d      	ldr	r2, [pc, #116]	@ (800a680 <HAL_DMA_Abort_IT+0x1d0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d00e      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a1c      	ldr	r2, [pc, #112]	@ (800a684 <HAL_DMA_Abort_IT+0x1d4>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d009      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a1a      	ldr	r2, [pc, #104]	@ (800a688 <HAL_DMA_Abort_IT+0x1d8>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d004      	beq.n	800a62c <HAL_DMA_Abort_IT+0x17c>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a19      	ldr	r2, [pc, #100]	@ (800a68c <HAL_DMA_Abort_IT+0x1dc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d108      	bne.n	800a63e <HAL_DMA_Abort_IT+0x18e>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 0201 	bic.w	r2, r2, #1
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	e178      	b.n	800a930 <HAL_DMA_Abort_IT+0x480>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f022 0201 	bic.w	r2, r2, #1
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	e16f      	b.n	800a930 <HAL_DMA_Abort_IT+0x480>
 800a650:	40020010 	.word	0x40020010
 800a654:	40020028 	.word	0x40020028
 800a658:	40020040 	.word	0x40020040
 800a65c:	40020058 	.word	0x40020058
 800a660:	40020070 	.word	0x40020070
 800a664:	40020088 	.word	0x40020088
 800a668:	400200a0 	.word	0x400200a0
 800a66c:	400200b8 	.word	0x400200b8
 800a670:	40020410 	.word	0x40020410
 800a674:	40020428 	.word	0x40020428
 800a678:	40020440 	.word	0x40020440
 800a67c:	40020458 	.word	0x40020458
 800a680:	40020470 	.word	0x40020470
 800a684:	40020488 	.word	0x40020488
 800a688:	400204a0 	.word	0x400204a0
 800a68c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 020e 	bic.w	r2, r2, #14
 800a69e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a6c      	ldr	r2, [pc, #432]	@ (800a858 <HAL_DMA_Abort_IT+0x3a8>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d04a      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a6b      	ldr	r2, [pc, #428]	@ (800a85c <HAL_DMA_Abort_IT+0x3ac>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d045      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a69      	ldr	r2, [pc, #420]	@ (800a860 <HAL_DMA_Abort_IT+0x3b0>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d040      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a68      	ldr	r2, [pc, #416]	@ (800a864 <HAL_DMA_Abort_IT+0x3b4>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d03b      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a66      	ldr	r2, [pc, #408]	@ (800a868 <HAL_DMA_Abort_IT+0x3b8>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d036      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a65      	ldr	r2, [pc, #404]	@ (800a86c <HAL_DMA_Abort_IT+0x3bc>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d031      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a63      	ldr	r2, [pc, #396]	@ (800a870 <HAL_DMA_Abort_IT+0x3c0>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d02c      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a62      	ldr	r2, [pc, #392]	@ (800a874 <HAL_DMA_Abort_IT+0x3c4>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d027      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a60      	ldr	r2, [pc, #384]	@ (800a878 <HAL_DMA_Abort_IT+0x3c8>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d022      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a5f      	ldr	r2, [pc, #380]	@ (800a87c <HAL_DMA_Abort_IT+0x3cc>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d01d      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a5d      	ldr	r2, [pc, #372]	@ (800a880 <HAL_DMA_Abort_IT+0x3d0>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d018      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a5c      	ldr	r2, [pc, #368]	@ (800a884 <HAL_DMA_Abort_IT+0x3d4>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d013      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a5a      	ldr	r2, [pc, #360]	@ (800a888 <HAL_DMA_Abort_IT+0x3d8>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d00e      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a59      	ldr	r2, [pc, #356]	@ (800a88c <HAL_DMA_Abort_IT+0x3dc>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d009      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a57      	ldr	r2, [pc, #348]	@ (800a890 <HAL_DMA_Abort_IT+0x3e0>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d004      	beq.n	800a740 <HAL_DMA_Abort_IT+0x290>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a56      	ldr	r2, [pc, #344]	@ (800a894 <HAL_DMA_Abort_IT+0x3e4>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d108      	bne.n	800a752 <HAL_DMA_Abort_IT+0x2a2>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f022 0201 	bic.w	r2, r2, #1
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	e007      	b.n	800a762 <HAL_DMA_Abort_IT+0x2b2>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f022 0201 	bic.w	r2, r2, #1
 800a760:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a3c      	ldr	r2, [pc, #240]	@ (800a858 <HAL_DMA_Abort_IT+0x3a8>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d072      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a3a      	ldr	r2, [pc, #232]	@ (800a85c <HAL_DMA_Abort_IT+0x3ac>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d06d      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a39      	ldr	r2, [pc, #228]	@ (800a860 <HAL_DMA_Abort_IT+0x3b0>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d068      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a37      	ldr	r2, [pc, #220]	@ (800a864 <HAL_DMA_Abort_IT+0x3b4>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d063      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a36      	ldr	r2, [pc, #216]	@ (800a868 <HAL_DMA_Abort_IT+0x3b8>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d05e      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a34      	ldr	r2, [pc, #208]	@ (800a86c <HAL_DMA_Abort_IT+0x3bc>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d059      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a33      	ldr	r2, [pc, #204]	@ (800a870 <HAL_DMA_Abort_IT+0x3c0>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d054      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a31      	ldr	r2, [pc, #196]	@ (800a874 <HAL_DMA_Abort_IT+0x3c4>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d04f      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a30      	ldr	r2, [pc, #192]	@ (800a878 <HAL_DMA_Abort_IT+0x3c8>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d04a      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a2e      	ldr	r2, [pc, #184]	@ (800a87c <HAL_DMA_Abort_IT+0x3cc>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d045      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a2d      	ldr	r2, [pc, #180]	@ (800a880 <HAL_DMA_Abort_IT+0x3d0>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d040      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a2b      	ldr	r2, [pc, #172]	@ (800a884 <HAL_DMA_Abort_IT+0x3d4>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d03b      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a2a      	ldr	r2, [pc, #168]	@ (800a888 <HAL_DMA_Abort_IT+0x3d8>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d036      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a28      	ldr	r2, [pc, #160]	@ (800a88c <HAL_DMA_Abort_IT+0x3dc>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d031      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a27      	ldr	r2, [pc, #156]	@ (800a890 <HAL_DMA_Abort_IT+0x3e0>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d02c      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a25      	ldr	r2, [pc, #148]	@ (800a894 <HAL_DMA_Abort_IT+0x3e4>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d027      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a24      	ldr	r2, [pc, #144]	@ (800a898 <HAL_DMA_Abort_IT+0x3e8>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d022      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a22      	ldr	r2, [pc, #136]	@ (800a89c <HAL_DMA_Abort_IT+0x3ec>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d01d      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a21      	ldr	r2, [pc, #132]	@ (800a8a0 <HAL_DMA_Abort_IT+0x3f0>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d018      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a1f      	ldr	r2, [pc, #124]	@ (800a8a4 <HAL_DMA_Abort_IT+0x3f4>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d013      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a1e      	ldr	r2, [pc, #120]	@ (800a8a8 <HAL_DMA_Abort_IT+0x3f8>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d00e      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a1c      	ldr	r2, [pc, #112]	@ (800a8ac <HAL_DMA_Abort_IT+0x3fc>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d009      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a1b      	ldr	r2, [pc, #108]	@ (800a8b0 <HAL_DMA_Abort_IT+0x400>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d004      	beq.n	800a852 <HAL_DMA_Abort_IT+0x3a2>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a19      	ldr	r2, [pc, #100]	@ (800a8b4 <HAL_DMA_Abort_IT+0x404>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d132      	bne.n	800a8b8 <HAL_DMA_Abort_IT+0x408>
 800a852:	2301      	movs	r3, #1
 800a854:	e031      	b.n	800a8ba <HAL_DMA_Abort_IT+0x40a>
 800a856:	bf00      	nop
 800a858:	40020010 	.word	0x40020010
 800a85c:	40020028 	.word	0x40020028
 800a860:	40020040 	.word	0x40020040
 800a864:	40020058 	.word	0x40020058
 800a868:	40020070 	.word	0x40020070
 800a86c:	40020088 	.word	0x40020088
 800a870:	400200a0 	.word	0x400200a0
 800a874:	400200b8 	.word	0x400200b8
 800a878:	40020410 	.word	0x40020410
 800a87c:	40020428 	.word	0x40020428
 800a880:	40020440 	.word	0x40020440
 800a884:	40020458 	.word	0x40020458
 800a888:	40020470 	.word	0x40020470
 800a88c:	40020488 	.word	0x40020488
 800a890:	400204a0 	.word	0x400204a0
 800a894:	400204b8 	.word	0x400204b8
 800a898:	58025408 	.word	0x58025408
 800a89c:	5802541c 	.word	0x5802541c
 800a8a0:	58025430 	.word	0x58025430
 800a8a4:	58025444 	.word	0x58025444
 800a8a8:	58025458 	.word	0x58025458
 800a8ac:	5802546c 	.word	0x5802546c
 800a8b0:	58025480 	.word	0x58025480
 800a8b4:	58025494 	.word	0x58025494
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d028      	beq.n	800a910 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a8cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8d8:	f003 031f 	and.w	r3, r3, #31
 800a8dc:	2201      	movs	r2, #1
 800a8de:	409a      	lsls	r2, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a8ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00c      	beq.n	800a910 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a904:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a90e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a924:	2b00      	cmp	r3, #0
 800a926:	d003      	beq.n	800a930 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop

0800a93c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08a      	sub	sp, #40	@ 0x28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a944:	2300      	movs	r3, #0
 800a946:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a948:	4b67      	ldr	r3, [pc, #412]	@ (800aae8 <HAL_DMA_IRQHandler+0x1ac>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a67      	ldr	r2, [pc, #412]	@ (800aaec <HAL_DMA_IRQHandler+0x1b0>)
 800a94e:	fba2 2303 	umull	r2, r3, r2, r3
 800a952:	0a9b      	lsrs	r3, r3, #10
 800a954:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a95a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a960:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a5f      	ldr	r2, [pc, #380]	@ (800aaf0 <HAL_DMA_IRQHandler+0x1b4>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d04a      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a5d      	ldr	r2, [pc, #372]	@ (800aaf4 <HAL_DMA_IRQHandler+0x1b8>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d045      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a5c      	ldr	r2, [pc, #368]	@ (800aaf8 <HAL_DMA_IRQHandler+0x1bc>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d040      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a5a      	ldr	r2, [pc, #360]	@ (800aafc <HAL_DMA_IRQHandler+0x1c0>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d03b      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a59      	ldr	r2, [pc, #356]	@ (800ab00 <HAL_DMA_IRQHandler+0x1c4>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d036      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a57      	ldr	r2, [pc, #348]	@ (800ab04 <HAL_DMA_IRQHandler+0x1c8>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d031      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a56      	ldr	r2, [pc, #344]	@ (800ab08 <HAL_DMA_IRQHandler+0x1cc>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d02c      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a54      	ldr	r2, [pc, #336]	@ (800ab0c <HAL_DMA_IRQHandler+0x1d0>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d027      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a53      	ldr	r2, [pc, #332]	@ (800ab10 <HAL_DMA_IRQHandler+0x1d4>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d022      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a51      	ldr	r2, [pc, #324]	@ (800ab14 <HAL_DMA_IRQHandler+0x1d8>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d01d      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a50      	ldr	r2, [pc, #320]	@ (800ab18 <HAL_DMA_IRQHandler+0x1dc>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d018      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a4e      	ldr	r2, [pc, #312]	@ (800ab1c <HAL_DMA_IRQHandler+0x1e0>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d013      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a4d      	ldr	r2, [pc, #308]	@ (800ab20 <HAL_DMA_IRQHandler+0x1e4>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d00e      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a4b      	ldr	r2, [pc, #300]	@ (800ab24 <HAL_DMA_IRQHandler+0x1e8>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d009      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a4a      	ldr	r2, [pc, #296]	@ (800ab28 <HAL_DMA_IRQHandler+0x1ec>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d004      	beq.n	800aa0e <HAL_DMA_IRQHandler+0xd2>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a48      	ldr	r2, [pc, #288]	@ (800ab2c <HAL_DMA_IRQHandler+0x1f0>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d101      	bne.n	800aa12 <HAL_DMA_IRQHandler+0xd6>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e000      	b.n	800aa14 <HAL_DMA_IRQHandler+0xd8>
 800aa12:	2300      	movs	r3, #0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 842b 	beq.w	800b270 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa1e:	f003 031f 	and.w	r3, r3, #31
 800aa22:	2208      	movs	r2, #8
 800aa24:	409a      	lsls	r2, r3
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 80a2 	beq.w	800ab74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a2e      	ldr	r2, [pc, #184]	@ (800aaf0 <HAL_DMA_IRQHandler+0x1b4>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d04a      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a2d      	ldr	r2, [pc, #180]	@ (800aaf4 <HAL_DMA_IRQHandler+0x1b8>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d045      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a2b      	ldr	r2, [pc, #172]	@ (800aaf8 <HAL_DMA_IRQHandler+0x1bc>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d040      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a2a      	ldr	r2, [pc, #168]	@ (800aafc <HAL_DMA_IRQHandler+0x1c0>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d03b      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a28      	ldr	r2, [pc, #160]	@ (800ab00 <HAL_DMA_IRQHandler+0x1c4>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d036      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a27      	ldr	r2, [pc, #156]	@ (800ab04 <HAL_DMA_IRQHandler+0x1c8>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d031      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a25      	ldr	r2, [pc, #148]	@ (800ab08 <HAL_DMA_IRQHandler+0x1cc>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d02c      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a24      	ldr	r2, [pc, #144]	@ (800ab0c <HAL_DMA_IRQHandler+0x1d0>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d027      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a22      	ldr	r2, [pc, #136]	@ (800ab10 <HAL_DMA_IRQHandler+0x1d4>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d022      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a21      	ldr	r2, [pc, #132]	@ (800ab14 <HAL_DMA_IRQHandler+0x1d8>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d01d      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a1f      	ldr	r2, [pc, #124]	@ (800ab18 <HAL_DMA_IRQHandler+0x1dc>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d018      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a1e      	ldr	r2, [pc, #120]	@ (800ab1c <HAL_DMA_IRQHandler+0x1e0>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d013      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a1c      	ldr	r2, [pc, #112]	@ (800ab20 <HAL_DMA_IRQHandler+0x1e4>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d00e      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a1b      	ldr	r2, [pc, #108]	@ (800ab24 <HAL_DMA_IRQHandler+0x1e8>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d009      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a19      	ldr	r2, [pc, #100]	@ (800ab28 <HAL_DMA_IRQHandler+0x1ec>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d004      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x194>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a18      	ldr	r2, [pc, #96]	@ (800ab2c <HAL_DMA_IRQHandler+0x1f0>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d12f      	bne.n	800ab30 <HAL_DMA_IRQHandler+0x1f4>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 0304 	and.w	r3, r3, #4
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bf14      	ite	ne
 800aade:	2301      	movne	r3, #1
 800aae0:	2300      	moveq	r3, #0
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	e02e      	b.n	800ab44 <HAL_DMA_IRQHandler+0x208>
 800aae6:	bf00      	nop
 800aae8:	24000400 	.word	0x24000400
 800aaec:	1b4e81b5 	.word	0x1b4e81b5
 800aaf0:	40020010 	.word	0x40020010
 800aaf4:	40020028 	.word	0x40020028
 800aaf8:	40020040 	.word	0x40020040
 800aafc:	40020058 	.word	0x40020058
 800ab00:	40020070 	.word	0x40020070
 800ab04:	40020088 	.word	0x40020088
 800ab08:	400200a0 	.word	0x400200a0
 800ab0c:	400200b8 	.word	0x400200b8
 800ab10:	40020410 	.word	0x40020410
 800ab14:	40020428 	.word	0x40020428
 800ab18:	40020440 	.word	0x40020440
 800ab1c:	40020458 	.word	0x40020458
 800ab20:	40020470 	.word	0x40020470
 800ab24:	40020488 	.word	0x40020488
 800ab28:	400204a0 	.word	0x400204a0
 800ab2c:	400204b8 	.word	0x400204b8
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0308 	and.w	r3, r3, #8
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bf14      	ite	ne
 800ab3e:	2301      	movne	r3, #1
 800ab40:	2300      	moveq	r3, #0
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d015      	beq.n	800ab74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f022 0204 	bic.w	r2, r2, #4
 800ab56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab5c:	f003 031f 	and.w	r3, r3, #31
 800ab60:	2208      	movs	r2, #8
 800ab62:	409a      	lsls	r2, r3
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab6c:	f043 0201 	orr.w	r2, r3, #1
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab78:	f003 031f 	and.w	r3, r3, #31
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d06e      	beq.n	800ac68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a69      	ldr	r2, [pc, #420]	@ (800ad34 <HAL_DMA_IRQHandler+0x3f8>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d04a      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a67      	ldr	r2, [pc, #412]	@ (800ad38 <HAL_DMA_IRQHandler+0x3fc>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d045      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a66      	ldr	r2, [pc, #408]	@ (800ad3c <HAL_DMA_IRQHandler+0x400>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d040      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a64      	ldr	r2, [pc, #400]	@ (800ad40 <HAL_DMA_IRQHandler+0x404>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d03b      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a63      	ldr	r2, [pc, #396]	@ (800ad44 <HAL_DMA_IRQHandler+0x408>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d036      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a61      	ldr	r2, [pc, #388]	@ (800ad48 <HAL_DMA_IRQHandler+0x40c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d031      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a60      	ldr	r2, [pc, #384]	@ (800ad4c <HAL_DMA_IRQHandler+0x410>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d02c      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a5e      	ldr	r2, [pc, #376]	@ (800ad50 <HAL_DMA_IRQHandler+0x414>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d027      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a5d      	ldr	r2, [pc, #372]	@ (800ad54 <HAL_DMA_IRQHandler+0x418>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d022      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a5b      	ldr	r2, [pc, #364]	@ (800ad58 <HAL_DMA_IRQHandler+0x41c>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d01d      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a5a      	ldr	r2, [pc, #360]	@ (800ad5c <HAL_DMA_IRQHandler+0x420>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d018      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a58      	ldr	r2, [pc, #352]	@ (800ad60 <HAL_DMA_IRQHandler+0x424>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d013      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a57      	ldr	r2, [pc, #348]	@ (800ad64 <HAL_DMA_IRQHandler+0x428>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d00e      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a55      	ldr	r2, [pc, #340]	@ (800ad68 <HAL_DMA_IRQHandler+0x42c>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d009      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a54      	ldr	r2, [pc, #336]	@ (800ad6c <HAL_DMA_IRQHandler+0x430>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d004      	beq.n	800ac2a <HAL_DMA_IRQHandler+0x2ee>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a52      	ldr	r2, [pc, #328]	@ (800ad70 <HAL_DMA_IRQHandler+0x434>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d10a      	bne.n	800ac40 <HAL_DMA_IRQHandler+0x304>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bf14      	ite	ne
 800ac38:	2301      	movne	r3, #1
 800ac3a:	2300      	moveq	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	e003      	b.n	800ac48 <HAL_DMA_IRQHandler+0x30c>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2300      	movs	r3, #0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00d      	beq.n	800ac68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac50:	f003 031f 	and.w	r3, r3, #31
 800ac54:	2201      	movs	r2, #1
 800ac56:	409a      	lsls	r2, r3
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac60:	f043 0202 	orr.w	r2, r3, #2
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac6c:	f003 031f 	and.w	r3, r3, #31
 800ac70:	2204      	movs	r2, #4
 800ac72:	409a      	lsls	r2, r3
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	4013      	ands	r3, r2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 808f 	beq.w	800ad9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a2c      	ldr	r2, [pc, #176]	@ (800ad34 <HAL_DMA_IRQHandler+0x3f8>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d04a      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a2a      	ldr	r2, [pc, #168]	@ (800ad38 <HAL_DMA_IRQHandler+0x3fc>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d045      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a29      	ldr	r2, [pc, #164]	@ (800ad3c <HAL_DMA_IRQHandler+0x400>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d040      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a27      	ldr	r2, [pc, #156]	@ (800ad40 <HAL_DMA_IRQHandler+0x404>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d03b      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a26      	ldr	r2, [pc, #152]	@ (800ad44 <HAL_DMA_IRQHandler+0x408>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d036      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a24      	ldr	r2, [pc, #144]	@ (800ad48 <HAL_DMA_IRQHandler+0x40c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d031      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a23      	ldr	r2, [pc, #140]	@ (800ad4c <HAL_DMA_IRQHandler+0x410>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d02c      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a21      	ldr	r2, [pc, #132]	@ (800ad50 <HAL_DMA_IRQHandler+0x414>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d027      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a20      	ldr	r2, [pc, #128]	@ (800ad54 <HAL_DMA_IRQHandler+0x418>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d022      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a1e      	ldr	r2, [pc, #120]	@ (800ad58 <HAL_DMA_IRQHandler+0x41c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d01d      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a1d      	ldr	r2, [pc, #116]	@ (800ad5c <HAL_DMA_IRQHandler+0x420>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d018      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a1b      	ldr	r2, [pc, #108]	@ (800ad60 <HAL_DMA_IRQHandler+0x424>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d013      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a1a      	ldr	r2, [pc, #104]	@ (800ad64 <HAL_DMA_IRQHandler+0x428>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00e      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a18      	ldr	r2, [pc, #96]	@ (800ad68 <HAL_DMA_IRQHandler+0x42c>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d009      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a17      	ldr	r2, [pc, #92]	@ (800ad6c <HAL_DMA_IRQHandler+0x430>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d004      	beq.n	800ad1e <HAL_DMA_IRQHandler+0x3e2>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a15      	ldr	r2, [pc, #84]	@ (800ad70 <HAL_DMA_IRQHandler+0x434>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d12a      	bne.n	800ad74 <HAL_DMA_IRQHandler+0x438>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0302 	and.w	r3, r3, #2
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	bf14      	ite	ne
 800ad2c:	2301      	movne	r3, #1
 800ad2e:	2300      	moveq	r3, #0
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	e023      	b.n	800ad7c <HAL_DMA_IRQHandler+0x440>
 800ad34:	40020010 	.word	0x40020010
 800ad38:	40020028 	.word	0x40020028
 800ad3c:	40020040 	.word	0x40020040
 800ad40:	40020058 	.word	0x40020058
 800ad44:	40020070 	.word	0x40020070
 800ad48:	40020088 	.word	0x40020088
 800ad4c:	400200a0 	.word	0x400200a0
 800ad50:	400200b8 	.word	0x400200b8
 800ad54:	40020410 	.word	0x40020410
 800ad58:	40020428 	.word	0x40020428
 800ad5c:	40020440 	.word	0x40020440
 800ad60:	40020458 	.word	0x40020458
 800ad64:	40020470 	.word	0x40020470
 800ad68:	40020488 	.word	0x40020488
 800ad6c:	400204a0 	.word	0x400204a0
 800ad70:	400204b8 	.word	0x400204b8
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00d      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad84:	f003 031f 	and.w	r3, r3, #31
 800ad88:	2204      	movs	r2, #4
 800ad8a:	409a      	lsls	r2, r3
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad94:	f043 0204 	orr.w	r2, r3, #4
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ada0:	f003 031f 	and.w	r3, r3, #31
 800ada4:	2210      	movs	r2, #16
 800ada6:	409a      	lsls	r2, r3
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	4013      	ands	r3, r2
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 80a6 	beq.w	800aefe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a85      	ldr	r2, [pc, #532]	@ (800afcc <HAL_DMA_IRQHandler+0x690>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d04a      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a83      	ldr	r2, [pc, #524]	@ (800afd0 <HAL_DMA_IRQHandler+0x694>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d045      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a82      	ldr	r2, [pc, #520]	@ (800afd4 <HAL_DMA_IRQHandler+0x698>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d040      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a80      	ldr	r2, [pc, #512]	@ (800afd8 <HAL_DMA_IRQHandler+0x69c>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d03b      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a7f      	ldr	r2, [pc, #508]	@ (800afdc <HAL_DMA_IRQHandler+0x6a0>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d036      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a7d      	ldr	r2, [pc, #500]	@ (800afe0 <HAL_DMA_IRQHandler+0x6a4>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d031      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a7c      	ldr	r2, [pc, #496]	@ (800afe4 <HAL_DMA_IRQHandler+0x6a8>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d02c      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a7a      	ldr	r2, [pc, #488]	@ (800afe8 <HAL_DMA_IRQHandler+0x6ac>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d027      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a79      	ldr	r2, [pc, #484]	@ (800afec <HAL_DMA_IRQHandler+0x6b0>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d022      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a77      	ldr	r2, [pc, #476]	@ (800aff0 <HAL_DMA_IRQHandler+0x6b4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d01d      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a76      	ldr	r2, [pc, #472]	@ (800aff4 <HAL_DMA_IRQHandler+0x6b8>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d018      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a74      	ldr	r2, [pc, #464]	@ (800aff8 <HAL_DMA_IRQHandler+0x6bc>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d013      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a73      	ldr	r2, [pc, #460]	@ (800affc <HAL_DMA_IRQHandler+0x6c0>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d00e      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a71      	ldr	r2, [pc, #452]	@ (800b000 <HAL_DMA_IRQHandler+0x6c4>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d009      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a70      	ldr	r2, [pc, #448]	@ (800b004 <HAL_DMA_IRQHandler+0x6c8>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d004      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x516>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a6e      	ldr	r2, [pc, #440]	@ (800b008 <HAL_DMA_IRQHandler+0x6cc>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d10a      	bne.n	800ae68 <HAL_DMA_IRQHandler+0x52c>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 0308 	and.w	r3, r3, #8
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	bf14      	ite	ne
 800ae60:	2301      	movne	r3, #1
 800ae62:	2300      	moveq	r3, #0
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	e009      	b.n	800ae7c <HAL_DMA_IRQHandler+0x540>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0304 	and.w	r3, r3, #4
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	bf14      	ite	ne
 800ae76:	2301      	movne	r3, #1
 800ae78:	2300      	moveq	r3, #0
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d03e      	beq.n	800aefe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae84:	f003 031f 	and.w	r3, r3, #31
 800ae88:	2210      	movs	r2, #16
 800ae8a:	409a      	lsls	r2, r3
 800ae8c:	6a3b      	ldr	r3, [r7, #32]
 800ae8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d018      	beq.n	800aed0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d108      	bne.n	800aebe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d024      	beq.n	800aefe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	4798      	blx	r3
 800aebc:	e01f      	b.n	800aefe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d01b      	beq.n	800aefe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	4798      	blx	r3
 800aece:	e016      	b.n	800aefe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d107      	bne.n	800aeee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f022 0208 	bic.w	r2, r2, #8
 800aeec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af02:	f003 031f 	and.w	r3, r3, #31
 800af06:	2220      	movs	r2, #32
 800af08:	409a      	lsls	r2, r3
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	4013      	ands	r3, r2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f000 8110 	beq.w	800b134 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a2c      	ldr	r2, [pc, #176]	@ (800afcc <HAL_DMA_IRQHandler+0x690>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d04a      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a2b      	ldr	r2, [pc, #172]	@ (800afd0 <HAL_DMA_IRQHandler+0x694>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d045      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a29      	ldr	r2, [pc, #164]	@ (800afd4 <HAL_DMA_IRQHandler+0x698>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d040      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a28      	ldr	r2, [pc, #160]	@ (800afd8 <HAL_DMA_IRQHandler+0x69c>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d03b      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a26      	ldr	r2, [pc, #152]	@ (800afdc <HAL_DMA_IRQHandler+0x6a0>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d036      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a25      	ldr	r2, [pc, #148]	@ (800afe0 <HAL_DMA_IRQHandler+0x6a4>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d031      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a23      	ldr	r2, [pc, #140]	@ (800afe4 <HAL_DMA_IRQHandler+0x6a8>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d02c      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a22      	ldr	r2, [pc, #136]	@ (800afe8 <HAL_DMA_IRQHandler+0x6ac>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d027      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a20      	ldr	r2, [pc, #128]	@ (800afec <HAL_DMA_IRQHandler+0x6b0>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d022      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a1f      	ldr	r2, [pc, #124]	@ (800aff0 <HAL_DMA_IRQHandler+0x6b4>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d01d      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a1d      	ldr	r2, [pc, #116]	@ (800aff4 <HAL_DMA_IRQHandler+0x6b8>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d018      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a1c      	ldr	r2, [pc, #112]	@ (800aff8 <HAL_DMA_IRQHandler+0x6bc>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d013      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a1a      	ldr	r2, [pc, #104]	@ (800affc <HAL_DMA_IRQHandler+0x6c0>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d00e      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a19      	ldr	r2, [pc, #100]	@ (800b000 <HAL_DMA_IRQHandler+0x6c4>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d009      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a17      	ldr	r2, [pc, #92]	@ (800b004 <HAL_DMA_IRQHandler+0x6c8>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d004      	beq.n	800afb4 <HAL_DMA_IRQHandler+0x678>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a16      	ldr	r2, [pc, #88]	@ (800b008 <HAL_DMA_IRQHandler+0x6cc>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d12b      	bne.n	800b00c <HAL_DMA_IRQHandler+0x6d0>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 0310 	and.w	r3, r3, #16
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	bf14      	ite	ne
 800afc2:	2301      	movne	r3, #1
 800afc4:	2300      	moveq	r3, #0
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	e02a      	b.n	800b020 <HAL_DMA_IRQHandler+0x6e4>
 800afca:	bf00      	nop
 800afcc:	40020010 	.word	0x40020010
 800afd0:	40020028 	.word	0x40020028
 800afd4:	40020040 	.word	0x40020040
 800afd8:	40020058 	.word	0x40020058
 800afdc:	40020070 	.word	0x40020070
 800afe0:	40020088 	.word	0x40020088
 800afe4:	400200a0 	.word	0x400200a0
 800afe8:	400200b8 	.word	0x400200b8
 800afec:	40020410 	.word	0x40020410
 800aff0:	40020428 	.word	0x40020428
 800aff4:	40020440 	.word	0x40020440
 800aff8:	40020458 	.word	0x40020458
 800affc:	40020470 	.word	0x40020470
 800b000:	40020488 	.word	0x40020488
 800b004:	400204a0 	.word	0x400204a0
 800b008:	400204b8 	.word	0x400204b8
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 0302 	and.w	r3, r3, #2
 800b016:	2b00      	cmp	r3, #0
 800b018:	bf14      	ite	ne
 800b01a:	2301      	movne	r3, #1
 800b01c:	2300      	moveq	r3, #0
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 8087 	beq.w	800b134 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b02a:	f003 031f 	and.w	r3, r3, #31
 800b02e:	2220      	movs	r2, #32
 800b030:	409a      	lsls	r2, r3
 800b032:	6a3b      	ldr	r3, [r7, #32]
 800b034:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d139      	bne.n	800b0b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f022 0216 	bic.w	r2, r2, #22
 800b050:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	695a      	ldr	r2, [r3, #20]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b060:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b066:	2b00      	cmp	r3, #0
 800b068:	d103      	bne.n	800b072 <HAL_DMA_IRQHandler+0x736>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d007      	beq.n	800b082 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f022 0208 	bic.w	r2, r2, #8
 800b080:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b086:	f003 031f 	and.w	r3, r3, #31
 800b08a:	223f      	movs	r2, #63	@ 0x3f
 800b08c:	409a      	lsls	r2, r3
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 834a 	beq.w	800b740 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	4798      	blx	r3
          }
          return;
 800b0b4:	e344      	b.n	800b740 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d018      	beq.n	800b0f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d108      	bne.n	800b0e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d02c      	beq.n	800b134 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	4798      	blx	r3
 800b0e2:	e027      	b.n	800b134 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d023      	beq.n	800b134 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	4798      	blx	r3
 800b0f4:	e01e      	b.n	800b134 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10f      	bne.n	800b124 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0210 	bic.w	r2, r2, #16
 800b112:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 8306 	beq.w	800b74a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	f000 8088 	beq.w	800b25c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2204      	movs	r2, #4
 800b150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a7a      	ldr	r2, [pc, #488]	@ (800b344 <HAL_DMA_IRQHandler+0xa08>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d04a      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a79      	ldr	r2, [pc, #484]	@ (800b348 <HAL_DMA_IRQHandler+0xa0c>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d045      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a77      	ldr	r2, [pc, #476]	@ (800b34c <HAL_DMA_IRQHandler+0xa10>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d040      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a76      	ldr	r2, [pc, #472]	@ (800b350 <HAL_DMA_IRQHandler+0xa14>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d03b      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a74      	ldr	r2, [pc, #464]	@ (800b354 <HAL_DMA_IRQHandler+0xa18>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d036      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a73      	ldr	r2, [pc, #460]	@ (800b358 <HAL_DMA_IRQHandler+0xa1c>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d031      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a71      	ldr	r2, [pc, #452]	@ (800b35c <HAL_DMA_IRQHandler+0xa20>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d02c      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a70      	ldr	r2, [pc, #448]	@ (800b360 <HAL_DMA_IRQHandler+0xa24>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d027      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a6e      	ldr	r2, [pc, #440]	@ (800b364 <HAL_DMA_IRQHandler+0xa28>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d022      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a6d      	ldr	r2, [pc, #436]	@ (800b368 <HAL_DMA_IRQHandler+0xa2c>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d01d      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a6b      	ldr	r2, [pc, #428]	@ (800b36c <HAL_DMA_IRQHandler+0xa30>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d018      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a6a      	ldr	r2, [pc, #424]	@ (800b370 <HAL_DMA_IRQHandler+0xa34>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d013      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a68      	ldr	r2, [pc, #416]	@ (800b374 <HAL_DMA_IRQHandler+0xa38>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d00e      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a67      	ldr	r2, [pc, #412]	@ (800b378 <HAL_DMA_IRQHandler+0xa3c>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d009      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a65      	ldr	r2, [pc, #404]	@ (800b37c <HAL_DMA_IRQHandler+0xa40>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d004      	beq.n	800b1f4 <HAL_DMA_IRQHandler+0x8b8>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a64      	ldr	r2, [pc, #400]	@ (800b380 <HAL_DMA_IRQHandler+0xa44>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d108      	bne.n	800b206 <HAL_DMA_IRQHandler+0x8ca>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f022 0201 	bic.w	r2, r2, #1
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	e007      	b.n	800b216 <HAL_DMA_IRQHandler+0x8da>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f022 0201 	bic.w	r2, r2, #1
 800b214:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b21e:	429a      	cmp	r2, r3
 800b220:	d307      	bcc.n	800b232 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1f2      	bne.n	800b216 <HAL_DMA_IRQHandler+0x8da>
 800b230:	e000      	b.n	800b234 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b232:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d004      	beq.n	800b24c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2203      	movs	r2, #3
 800b246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b24a:	e003      	b.n	800b254 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 8272 	beq.w	800b74a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	4798      	blx	r3
 800b26e:	e26c      	b.n	800b74a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a43      	ldr	r2, [pc, #268]	@ (800b384 <HAL_DMA_IRQHandler+0xa48>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d022      	beq.n	800b2c0 <HAL_DMA_IRQHandler+0x984>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a42      	ldr	r2, [pc, #264]	@ (800b388 <HAL_DMA_IRQHandler+0xa4c>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d01d      	beq.n	800b2c0 <HAL_DMA_IRQHandler+0x984>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a40      	ldr	r2, [pc, #256]	@ (800b38c <HAL_DMA_IRQHandler+0xa50>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d018      	beq.n	800b2c0 <HAL_DMA_IRQHandler+0x984>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a3f      	ldr	r2, [pc, #252]	@ (800b390 <HAL_DMA_IRQHandler+0xa54>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d013      	beq.n	800b2c0 <HAL_DMA_IRQHandler+0x984>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a3d      	ldr	r2, [pc, #244]	@ (800b394 <HAL_DMA_IRQHandler+0xa58>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d00e      	beq.n	800b2c0 <HAL_DMA_IRQHandler+0x984>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a3c      	ldr	r2, [pc, #240]	@ (800b398 <HAL_DMA_IRQHandler+0xa5c>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d009      	beq.n	800b2c0 <HAL_DMA_IRQHandler+0x984>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a3a      	ldr	r2, [pc, #232]	@ (800b39c <HAL_DMA_IRQHandler+0xa60>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d004      	beq.n	800b2c0 <HAL_DMA_IRQHandler+0x984>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a39      	ldr	r2, [pc, #228]	@ (800b3a0 <HAL_DMA_IRQHandler+0xa64>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d101      	bne.n	800b2c4 <HAL_DMA_IRQHandler+0x988>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e000      	b.n	800b2c6 <HAL_DMA_IRQHandler+0x98a>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f000 823f 	beq.w	800b74a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2d8:	f003 031f 	and.w	r3, r3, #31
 800b2dc:	2204      	movs	r2, #4
 800b2de:	409a      	lsls	r2, r3
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	4013      	ands	r3, r2
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 80cd 	beq.w	800b484 <HAL_DMA_IRQHandler+0xb48>
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f003 0304 	and.w	r3, r3, #4
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 80c7 	beq.w	800b484 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2fa:	f003 031f 	and.w	r3, r3, #31
 800b2fe:	2204      	movs	r2, #4
 800b300:	409a      	lsls	r2, r3
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d049      	beq.n	800b3a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b316:	2b00      	cmp	r3, #0
 800b318:	d109      	bne.n	800b32e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f000 8210 	beq.w	800b744 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b32c:	e20a      	b.n	800b744 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 8206 	beq.w	800b744 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b340:	e200      	b.n	800b744 <HAL_DMA_IRQHandler+0xe08>
 800b342:	bf00      	nop
 800b344:	40020010 	.word	0x40020010
 800b348:	40020028 	.word	0x40020028
 800b34c:	40020040 	.word	0x40020040
 800b350:	40020058 	.word	0x40020058
 800b354:	40020070 	.word	0x40020070
 800b358:	40020088 	.word	0x40020088
 800b35c:	400200a0 	.word	0x400200a0
 800b360:	400200b8 	.word	0x400200b8
 800b364:	40020410 	.word	0x40020410
 800b368:	40020428 	.word	0x40020428
 800b36c:	40020440 	.word	0x40020440
 800b370:	40020458 	.word	0x40020458
 800b374:	40020470 	.word	0x40020470
 800b378:	40020488 	.word	0x40020488
 800b37c:	400204a0 	.word	0x400204a0
 800b380:	400204b8 	.word	0x400204b8
 800b384:	58025408 	.word	0x58025408
 800b388:	5802541c 	.word	0x5802541c
 800b38c:	58025430 	.word	0x58025430
 800b390:	58025444 	.word	0x58025444
 800b394:	58025458 	.word	0x58025458
 800b398:	5802546c 	.word	0x5802546c
 800b39c:	58025480 	.word	0x58025480
 800b3a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	f003 0320 	and.w	r3, r3, #32
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d160      	bne.n	800b470 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a7f      	ldr	r2, [pc, #508]	@ (800b5b0 <HAL_DMA_IRQHandler+0xc74>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d04a      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a7d      	ldr	r2, [pc, #500]	@ (800b5b4 <HAL_DMA_IRQHandler+0xc78>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d045      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a7c      	ldr	r2, [pc, #496]	@ (800b5b8 <HAL_DMA_IRQHandler+0xc7c>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d040      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a7a      	ldr	r2, [pc, #488]	@ (800b5bc <HAL_DMA_IRQHandler+0xc80>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d03b      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a79      	ldr	r2, [pc, #484]	@ (800b5c0 <HAL_DMA_IRQHandler+0xc84>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d036      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a77      	ldr	r2, [pc, #476]	@ (800b5c4 <HAL_DMA_IRQHandler+0xc88>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d031      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a76      	ldr	r2, [pc, #472]	@ (800b5c8 <HAL_DMA_IRQHandler+0xc8c>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d02c      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a74      	ldr	r2, [pc, #464]	@ (800b5cc <HAL_DMA_IRQHandler+0xc90>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d027      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a73      	ldr	r2, [pc, #460]	@ (800b5d0 <HAL_DMA_IRQHandler+0xc94>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d022      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a71      	ldr	r2, [pc, #452]	@ (800b5d4 <HAL_DMA_IRQHandler+0xc98>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d01d      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a70      	ldr	r2, [pc, #448]	@ (800b5d8 <HAL_DMA_IRQHandler+0xc9c>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d018      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a6e      	ldr	r2, [pc, #440]	@ (800b5dc <HAL_DMA_IRQHandler+0xca0>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d013      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a6d      	ldr	r2, [pc, #436]	@ (800b5e0 <HAL_DMA_IRQHandler+0xca4>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d00e      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a6b      	ldr	r2, [pc, #428]	@ (800b5e4 <HAL_DMA_IRQHandler+0xca8>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d009      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a6a      	ldr	r2, [pc, #424]	@ (800b5e8 <HAL_DMA_IRQHandler+0xcac>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d004      	beq.n	800b44e <HAL_DMA_IRQHandler+0xb12>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a68      	ldr	r2, [pc, #416]	@ (800b5ec <HAL_DMA_IRQHandler+0xcb0>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d108      	bne.n	800b460 <HAL_DMA_IRQHandler+0xb24>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f022 0208 	bic.w	r2, r2, #8
 800b45c:	601a      	str	r2, [r3, #0]
 800b45e:	e007      	b.n	800b470 <HAL_DMA_IRQHandler+0xb34>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f022 0204 	bic.w	r2, r2, #4
 800b46e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 8165 	beq.w	800b744 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b482:	e15f      	b.n	800b744 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b488:	f003 031f 	and.w	r3, r3, #31
 800b48c:	2202      	movs	r2, #2
 800b48e:	409a      	lsls	r2, r3
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	4013      	ands	r3, r2
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 80c5 	beq.w	800b624 <HAL_DMA_IRQHandler+0xce8>
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	f003 0302 	and.w	r3, r3, #2
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 80bf 	beq.w	800b624 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4aa:	f003 031f 	and.w	r3, r3, #31
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	409a      	lsls	r2, r3
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d018      	beq.n	800b4f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d109      	bne.n	800b4de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 813a 	beq.w	800b748 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b4dc:	e134      	b.n	800b748 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f000 8130 	beq.w	800b748 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b4f0:	e12a      	b.n	800b748 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	f003 0320 	and.w	r3, r3, #32
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f040 8089 	bne.w	800b610 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a2b      	ldr	r2, [pc, #172]	@ (800b5b0 <HAL_DMA_IRQHandler+0xc74>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d04a      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a29      	ldr	r2, [pc, #164]	@ (800b5b4 <HAL_DMA_IRQHandler+0xc78>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d045      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a28      	ldr	r2, [pc, #160]	@ (800b5b8 <HAL_DMA_IRQHandler+0xc7c>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d040      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a26      	ldr	r2, [pc, #152]	@ (800b5bc <HAL_DMA_IRQHandler+0xc80>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d03b      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a25      	ldr	r2, [pc, #148]	@ (800b5c0 <HAL_DMA_IRQHandler+0xc84>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d036      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a23      	ldr	r2, [pc, #140]	@ (800b5c4 <HAL_DMA_IRQHandler+0xc88>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d031      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a22      	ldr	r2, [pc, #136]	@ (800b5c8 <HAL_DMA_IRQHandler+0xc8c>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d02c      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a20      	ldr	r2, [pc, #128]	@ (800b5cc <HAL_DMA_IRQHandler+0xc90>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d027      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d0 <HAL_DMA_IRQHandler+0xc94>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d022      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a1d      	ldr	r2, [pc, #116]	@ (800b5d4 <HAL_DMA_IRQHandler+0xc98>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d01d      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a1c      	ldr	r2, [pc, #112]	@ (800b5d8 <HAL_DMA_IRQHandler+0xc9c>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d018      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a1a      	ldr	r2, [pc, #104]	@ (800b5dc <HAL_DMA_IRQHandler+0xca0>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d013      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a19      	ldr	r2, [pc, #100]	@ (800b5e0 <HAL_DMA_IRQHandler+0xca4>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d00e      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a17      	ldr	r2, [pc, #92]	@ (800b5e4 <HAL_DMA_IRQHandler+0xca8>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d009      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a16      	ldr	r2, [pc, #88]	@ (800b5e8 <HAL_DMA_IRQHandler+0xcac>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d004      	beq.n	800b59e <HAL_DMA_IRQHandler+0xc62>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a14      	ldr	r2, [pc, #80]	@ (800b5ec <HAL_DMA_IRQHandler+0xcb0>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d128      	bne.n	800b5f0 <HAL_DMA_IRQHandler+0xcb4>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f022 0214 	bic.w	r2, r2, #20
 800b5ac:	601a      	str	r2, [r3, #0]
 800b5ae:	e027      	b.n	800b600 <HAL_DMA_IRQHandler+0xcc4>
 800b5b0:	40020010 	.word	0x40020010
 800b5b4:	40020028 	.word	0x40020028
 800b5b8:	40020040 	.word	0x40020040
 800b5bc:	40020058 	.word	0x40020058
 800b5c0:	40020070 	.word	0x40020070
 800b5c4:	40020088 	.word	0x40020088
 800b5c8:	400200a0 	.word	0x400200a0
 800b5cc:	400200b8 	.word	0x400200b8
 800b5d0:	40020410 	.word	0x40020410
 800b5d4:	40020428 	.word	0x40020428
 800b5d8:	40020440 	.word	0x40020440
 800b5dc:	40020458 	.word	0x40020458
 800b5e0:	40020470 	.word	0x40020470
 800b5e4:	40020488 	.word	0x40020488
 800b5e8:	400204a0 	.word	0x400204a0
 800b5ec:	400204b8 	.word	0x400204b8
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f022 020a 	bic.w	r2, r2, #10
 800b5fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 8097 	beq.w	800b748 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b622:	e091      	b.n	800b748 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b628:	f003 031f 	and.w	r3, r3, #31
 800b62c:	2208      	movs	r2, #8
 800b62e:	409a      	lsls	r2, r3
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	4013      	ands	r3, r2
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 8088 	beq.w	800b74a <HAL_DMA_IRQHandler+0xe0e>
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f003 0308 	and.w	r3, r3, #8
 800b640:	2b00      	cmp	r3, #0
 800b642:	f000 8082 	beq.w	800b74a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a41      	ldr	r2, [pc, #260]	@ (800b750 <HAL_DMA_IRQHandler+0xe14>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d04a      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a3f      	ldr	r2, [pc, #252]	@ (800b754 <HAL_DMA_IRQHandler+0xe18>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d045      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a3e      	ldr	r2, [pc, #248]	@ (800b758 <HAL_DMA_IRQHandler+0xe1c>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d040      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a3c      	ldr	r2, [pc, #240]	@ (800b75c <HAL_DMA_IRQHandler+0xe20>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d03b      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a3b      	ldr	r2, [pc, #236]	@ (800b760 <HAL_DMA_IRQHandler+0xe24>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d036      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a39      	ldr	r2, [pc, #228]	@ (800b764 <HAL_DMA_IRQHandler+0xe28>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d031      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a38      	ldr	r2, [pc, #224]	@ (800b768 <HAL_DMA_IRQHandler+0xe2c>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d02c      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a36      	ldr	r2, [pc, #216]	@ (800b76c <HAL_DMA_IRQHandler+0xe30>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d027      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a35      	ldr	r2, [pc, #212]	@ (800b770 <HAL_DMA_IRQHandler+0xe34>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d022      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a33      	ldr	r2, [pc, #204]	@ (800b774 <HAL_DMA_IRQHandler+0xe38>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d01d      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a32      	ldr	r2, [pc, #200]	@ (800b778 <HAL_DMA_IRQHandler+0xe3c>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d018      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a30      	ldr	r2, [pc, #192]	@ (800b77c <HAL_DMA_IRQHandler+0xe40>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d013      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a2f      	ldr	r2, [pc, #188]	@ (800b780 <HAL_DMA_IRQHandler+0xe44>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d00e      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a2d      	ldr	r2, [pc, #180]	@ (800b784 <HAL_DMA_IRQHandler+0xe48>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d009      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a2c      	ldr	r2, [pc, #176]	@ (800b788 <HAL_DMA_IRQHandler+0xe4c>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d004      	beq.n	800b6e6 <HAL_DMA_IRQHandler+0xdaa>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a2a      	ldr	r2, [pc, #168]	@ (800b78c <HAL_DMA_IRQHandler+0xe50>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d108      	bne.n	800b6f8 <HAL_DMA_IRQHandler+0xdbc>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f022 021c 	bic.w	r2, r2, #28
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	e007      	b.n	800b708 <HAL_DMA_IRQHandler+0xdcc>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f022 020e 	bic.w	r2, r2, #14
 800b706:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b70c:	f003 031f 	and.w	r3, r3, #31
 800b710:	2201      	movs	r2, #1
 800b712:	409a      	lsls	r2, r3
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b732:	2b00      	cmp	r3, #0
 800b734:	d009      	beq.n	800b74a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	4798      	blx	r3
 800b73e:	e004      	b.n	800b74a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b740:	bf00      	nop
 800b742:	e002      	b.n	800b74a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b744:	bf00      	nop
 800b746:	e000      	b.n	800b74a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b748:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b74a:	3728      	adds	r7, #40	@ 0x28
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	40020010 	.word	0x40020010
 800b754:	40020028 	.word	0x40020028
 800b758:	40020040 	.word	0x40020040
 800b75c:	40020058 	.word	0x40020058
 800b760:	40020070 	.word	0x40020070
 800b764:	40020088 	.word	0x40020088
 800b768:	400200a0 	.word	0x400200a0
 800b76c:	400200b8 	.word	0x400200b8
 800b770:	40020410 	.word	0x40020410
 800b774:	40020428 	.word	0x40020428
 800b778:	40020440 	.word	0x40020440
 800b77c:	40020458 	.word	0x40020458
 800b780:	40020470 	.word	0x40020470
 800b784:	40020488 	.word	0x40020488
 800b788:	400204a0 	.word	0x400204a0
 800b78c:	400204b8 	.word	0x400204b8

0800b790 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7ba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7c0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a7f      	ldr	r2, [pc, #508]	@ (800b9c4 <DMA_SetConfig+0x21c>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d072      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a7d      	ldr	r2, [pc, #500]	@ (800b9c8 <DMA_SetConfig+0x220>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d06d      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a7c      	ldr	r2, [pc, #496]	@ (800b9cc <DMA_SetConfig+0x224>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d068      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a7a      	ldr	r2, [pc, #488]	@ (800b9d0 <DMA_SetConfig+0x228>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d063      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a79      	ldr	r2, [pc, #484]	@ (800b9d4 <DMA_SetConfig+0x22c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d05e      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a77      	ldr	r2, [pc, #476]	@ (800b9d8 <DMA_SetConfig+0x230>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d059      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a76      	ldr	r2, [pc, #472]	@ (800b9dc <DMA_SetConfig+0x234>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d054      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a74      	ldr	r2, [pc, #464]	@ (800b9e0 <DMA_SetConfig+0x238>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d04f      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a73      	ldr	r2, [pc, #460]	@ (800b9e4 <DMA_SetConfig+0x23c>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d04a      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a71      	ldr	r2, [pc, #452]	@ (800b9e8 <DMA_SetConfig+0x240>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d045      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a70      	ldr	r2, [pc, #448]	@ (800b9ec <DMA_SetConfig+0x244>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d040      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a6e      	ldr	r2, [pc, #440]	@ (800b9f0 <DMA_SetConfig+0x248>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d03b      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a6d      	ldr	r2, [pc, #436]	@ (800b9f4 <DMA_SetConfig+0x24c>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d036      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a6b      	ldr	r2, [pc, #428]	@ (800b9f8 <DMA_SetConfig+0x250>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d031      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a6a      	ldr	r2, [pc, #424]	@ (800b9fc <DMA_SetConfig+0x254>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d02c      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a68      	ldr	r2, [pc, #416]	@ (800ba00 <DMA_SetConfig+0x258>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d027      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a67      	ldr	r2, [pc, #412]	@ (800ba04 <DMA_SetConfig+0x25c>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d022      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a65      	ldr	r2, [pc, #404]	@ (800ba08 <DMA_SetConfig+0x260>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d01d      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a64      	ldr	r2, [pc, #400]	@ (800ba0c <DMA_SetConfig+0x264>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d018      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a62      	ldr	r2, [pc, #392]	@ (800ba10 <DMA_SetConfig+0x268>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d013      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a61      	ldr	r2, [pc, #388]	@ (800ba14 <DMA_SetConfig+0x26c>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d00e      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a5f      	ldr	r2, [pc, #380]	@ (800ba18 <DMA_SetConfig+0x270>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d009      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a5e      	ldr	r2, [pc, #376]	@ (800ba1c <DMA_SetConfig+0x274>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d004      	beq.n	800b8b2 <DMA_SetConfig+0x10a>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a5c      	ldr	r2, [pc, #368]	@ (800ba20 <DMA_SetConfig+0x278>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d101      	bne.n	800b8b6 <DMA_SetConfig+0x10e>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e000      	b.n	800b8b8 <DMA_SetConfig+0x110>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00d      	beq.n	800b8d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b8c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d004      	beq.n	800b8d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b8d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a39      	ldr	r2, [pc, #228]	@ (800b9c4 <DMA_SetConfig+0x21c>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d04a      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a38      	ldr	r2, [pc, #224]	@ (800b9c8 <DMA_SetConfig+0x220>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d045      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a36      	ldr	r2, [pc, #216]	@ (800b9cc <DMA_SetConfig+0x224>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d040      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a35      	ldr	r2, [pc, #212]	@ (800b9d0 <DMA_SetConfig+0x228>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d03b      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a33      	ldr	r2, [pc, #204]	@ (800b9d4 <DMA_SetConfig+0x22c>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d036      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a32      	ldr	r2, [pc, #200]	@ (800b9d8 <DMA_SetConfig+0x230>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d031      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a30      	ldr	r2, [pc, #192]	@ (800b9dc <DMA_SetConfig+0x234>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d02c      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a2f      	ldr	r2, [pc, #188]	@ (800b9e0 <DMA_SetConfig+0x238>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d027      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a2d      	ldr	r2, [pc, #180]	@ (800b9e4 <DMA_SetConfig+0x23c>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d022      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a2c      	ldr	r2, [pc, #176]	@ (800b9e8 <DMA_SetConfig+0x240>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d01d      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a2a      	ldr	r2, [pc, #168]	@ (800b9ec <DMA_SetConfig+0x244>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d018      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a29      	ldr	r2, [pc, #164]	@ (800b9f0 <DMA_SetConfig+0x248>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d013      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a27      	ldr	r2, [pc, #156]	@ (800b9f4 <DMA_SetConfig+0x24c>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d00e      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a26      	ldr	r2, [pc, #152]	@ (800b9f8 <DMA_SetConfig+0x250>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d009      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a24      	ldr	r2, [pc, #144]	@ (800b9fc <DMA_SetConfig+0x254>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d004      	beq.n	800b978 <DMA_SetConfig+0x1d0>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a23      	ldr	r2, [pc, #140]	@ (800ba00 <DMA_SetConfig+0x258>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d101      	bne.n	800b97c <DMA_SetConfig+0x1d4>
 800b978:	2301      	movs	r3, #1
 800b97a:	e000      	b.n	800b97e <DMA_SetConfig+0x1d6>
 800b97c:	2300      	movs	r3, #0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d059      	beq.n	800ba36 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b986:	f003 031f 	and.w	r3, r3, #31
 800b98a:	223f      	movs	r2, #63	@ 0x3f
 800b98c:	409a      	lsls	r2, r3
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b9a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	2b40      	cmp	r3, #64	@ 0x40
 800b9b0:	d138      	bne.n	800ba24 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b9c2:	e086      	b.n	800bad2 <DMA_SetConfig+0x32a>
 800b9c4:	40020010 	.word	0x40020010
 800b9c8:	40020028 	.word	0x40020028
 800b9cc:	40020040 	.word	0x40020040
 800b9d0:	40020058 	.word	0x40020058
 800b9d4:	40020070 	.word	0x40020070
 800b9d8:	40020088 	.word	0x40020088
 800b9dc:	400200a0 	.word	0x400200a0
 800b9e0:	400200b8 	.word	0x400200b8
 800b9e4:	40020410 	.word	0x40020410
 800b9e8:	40020428 	.word	0x40020428
 800b9ec:	40020440 	.word	0x40020440
 800b9f0:	40020458 	.word	0x40020458
 800b9f4:	40020470 	.word	0x40020470
 800b9f8:	40020488 	.word	0x40020488
 800b9fc:	400204a0 	.word	0x400204a0
 800ba00:	400204b8 	.word	0x400204b8
 800ba04:	58025408 	.word	0x58025408
 800ba08:	5802541c 	.word	0x5802541c
 800ba0c:	58025430 	.word	0x58025430
 800ba10:	58025444 	.word	0x58025444
 800ba14:	58025458 	.word	0x58025458
 800ba18:	5802546c 	.word	0x5802546c
 800ba1c:	58025480 	.word	0x58025480
 800ba20:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	60da      	str	r2, [r3, #12]
}
 800ba34:	e04d      	b.n	800bad2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a29      	ldr	r2, [pc, #164]	@ (800bae0 <DMA_SetConfig+0x338>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d022      	beq.n	800ba86 <DMA_SetConfig+0x2de>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a27      	ldr	r2, [pc, #156]	@ (800bae4 <DMA_SetConfig+0x33c>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d01d      	beq.n	800ba86 <DMA_SetConfig+0x2de>
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a26      	ldr	r2, [pc, #152]	@ (800bae8 <DMA_SetConfig+0x340>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d018      	beq.n	800ba86 <DMA_SetConfig+0x2de>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a24      	ldr	r2, [pc, #144]	@ (800baec <DMA_SetConfig+0x344>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d013      	beq.n	800ba86 <DMA_SetConfig+0x2de>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a23      	ldr	r2, [pc, #140]	@ (800baf0 <DMA_SetConfig+0x348>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d00e      	beq.n	800ba86 <DMA_SetConfig+0x2de>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a21      	ldr	r2, [pc, #132]	@ (800baf4 <DMA_SetConfig+0x34c>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d009      	beq.n	800ba86 <DMA_SetConfig+0x2de>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a20      	ldr	r2, [pc, #128]	@ (800baf8 <DMA_SetConfig+0x350>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d004      	beq.n	800ba86 <DMA_SetConfig+0x2de>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a1e      	ldr	r2, [pc, #120]	@ (800bafc <DMA_SetConfig+0x354>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d101      	bne.n	800ba8a <DMA_SetConfig+0x2e2>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e000      	b.n	800ba8c <DMA_SetConfig+0x2e4>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d020      	beq.n	800bad2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba94:	f003 031f 	and.w	r3, r3, #31
 800ba98:	2201      	movs	r2, #1
 800ba9a:	409a      	lsls	r2, r3
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	2b40      	cmp	r3, #64	@ 0x40
 800baae:	d108      	bne.n	800bac2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	60da      	str	r2, [r3, #12]
}
 800bac0:	e007      	b.n	800bad2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	60da      	str	r2, [r3, #12]
}
 800bad2:	bf00      	nop
 800bad4:	371c      	adds	r7, #28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	58025408 	.word	0x58025408
 800bae4:	5802541c 	.word	0x5802541c
 800bae8:	58025430 	.word	0x58025430
 800baec:	58025444 	.word	0x58025444
 800baf0:	58025458 	.word	0x58025458
 800baf4:	5802546c 	.word	0x5802546c
 800baf8:	58025480 	.word	0x58025480
 800bafc:	58025494 	.word	0x58025494

0800bb00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a42      	ldr	r2, [pc, #264]	@ (800bc18 <DMA_CalcBaseAndBitshift+0x118>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d04a      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a41      	ldr	r2, [pc, #260]	@ (800bc1c <DMA_CalcBaseAndBitshift+0x11c>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d045      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a3f      	ldr	r2, [pc, #252]	@ (800bc20 <DMA_CalcBaseAndBitshift+0x120>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d040      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a3e      	ldr	r2, [pc, #248]	@ (800bc24 <DMA_CalcBaseAndBitshift+0x124>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d03b      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a3c      	ldr	r2, [pc, #240]	@ (800bc28 <DMA_CalcBaseAndBitshift+0x128>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d036      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a3b      	ldr	r2, [pc, #236]	@ (800bc2c <DMA_CalcBaseAndBitshift+0x12c>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d031      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a39      	ldr	r2, [pc, #228]	@ (800bc30 <DMA_CalcBaseAndBitshift+0x130>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d02c      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a38      	ldr	r2, [pc, #224]	@ (800bc34 <DMA_CalcBaseAndBitshift+0x134>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d027      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a36      	ldr	r2, [pc, #216]	@ (800bc38 <DMA_CalcBaseAndBitshift+0x138>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d022      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a35      	ldr	r2, [pc, #212]	@ (800bc3c <DMA_CalcBaseAndBitshift+0x13c>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d01d      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a33      	ldr	r2, [pc, #204]	@ (800bc40 <DMA_CalcBaseAndBitshift+0x140>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d018      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a32      	ldr	r2, [pc, #200]	@ (800bc44 <DMA_CalcBaseAndBitshift+0x144>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d013      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a30      	ldr	r2, [pc, #192]	@ (800bc48 <DMA_CalcBaseAndBitshift+0x148>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d00e      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a2f      	ldr	r2, [pc, #188]	@ (800bc4c <DMA_CalcBaseAndBitshift+0x14c>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d009      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a2d      	ldr	r2, [pc, #180]	@ (800bc50 <DMA_CalcBaseAndBitshift+0x150>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d004      	beq.n	800bba8 <DMA_CalcBaseAndBitshift+0xa8>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a2c      	ldr	r2, [pc, #176]	@ (800bc54 <DMA_CalcBaseAndBitshift+0x154>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d101      	bne.n	800bbac <DMA_CalcBaseAndBitshift+0xac>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e000      	b.n	800bbae <DMA_CalcBaseAndBitshift+0xae>
 800bbac:	2300      	movs	r3, #0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d024      	beq.n	800bbfc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	3b10      	subs	r3, #16
 800bbba:	4a27      	ldr	r2, [pc, #156]	@ (800bc58 <DMA_CalcBaseAndBitshift+0x158>)
 800bbbc:	fba2 2303 	umull	r2, r3, r2, r3
 800bbc0:	091b      	lsrs	r3, r3, #4
 800bbc2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f003 0307 	and.w	r3, r3, #7
 800bbca:	4a24      	ldr	r2, [pc, #144]	@ (800bc5c <DMA_CalcBaseAndBitshift+0x15c>)
 800bbcc:	5cd3      	ldrb	r3, [r2, r3]
 800bbce:	461a      	mov	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b03      	cmp	r3, #3
 800bbd8:	d908      	bls.n	800bbec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	4b1f      	ldr	r3, [pc, #124]	@ (800bc60 <DMA_CalcBaseAndBitshift+0x160>)
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	1d1a      	adds	r2, r3, #4
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	659a      	str	r2, [r3, #88]	@ 0x58
 800bbea:	e00d      	b.n	800bc08 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc60 <DMA_CalcBaseAndBitshift+0x160>)
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	6593      	str	r3, [r2, #88]	@ 0x58
 800bbfa:	e005      	b.n	800bc08 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	40020010 	.word	0x40020010
 800bc1c:	40020028 	.word	0x40020028
 800bc20:	40020040 	.word	0x40020040
 800bc24:	40020058 	.word	0x40020058
 800bc28:	40020070 	.word	0x40020070
 800bc2c:	40020088 	.word	0x40020088
 800bc30:	400200a0 	.word	0x400200a0
 800bc34:	400200b8 	.word	0x400200b8
 800bc38:	40020410 	.word	0x40020410
 800bc3c:	40020428 	.word	0x40020428
 800bc40:	40020440 	.word	0x40020440
 800bc44:	40020458 	.word	0x40020458
 800bc48:	40020470 	.word	0x40020470
 800bc4c:	40020488 	.word	0x40020488
 800bc50:	400204a0 	.word	0x400204a0
 800bc54:	400204b8 	.word	0x400204b8
 800bc58:	aaaaaaab 	.word	0xaaaaaaab
 800bc5c:	0801a6f8 	.word	0x0801a6f8
 800bc60:	fffffc00 	.word	0xfffffc00

0800bc64 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d120      	bne.n	800bcba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d858      	bhi.n	800bd32 <DMA_CheckFifoParam+0xce>
 800bc80:	a201      	add	r2, pc, #4	@ (adr r2, 800bc88 <DMA_CheckFifoParam+0x24>)
 800bc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc86:	bf00      	nop
 800bc88:	0800bc99 	.word	0x0800bc99
 800bc8c:	0800bcab 	.word	0x0800bcab
 800bc90:	0800bc99 	.word	0x0800bc99
 800bc94:	0800bd33 	.word	0x0800bd33
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d048      	beq.n	800bd36 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bca8:	e045      	b.n	800bd36 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bcb2:	d142      	bne.n	800bd3a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bcb8:	e03f      	b.n	800bd3a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	699b      	ldr	r3, [r3, #24]
 800bcbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcc2:	d123      	bne.n	800bd0c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d838      	bhi.n	800bd3e <DMA_CheckFifoParam+0xda>
 800bccc:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd4 <DMA_CheckFifoParam+0x70>)
 800bcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd2:	bf00      	nop
 800bcd4:	0800bce5 	.word	0x0800bce5
 800bcd8:	0800bceb 	.word	0x0800bceb
 800bcdc:	0800bce5 	.word	0x0800bce5
 800bce0:	0800bcfd 	.word	0x0800bcfd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	73fb      	strb	r3, [r7, #15]
        break;
 800bce8:	e030      	b.n	800bd4c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d025      	beq.n	800bd42 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bcfa:	e022      	b.n	800bd42 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bd04:	d11f      	bne.n	800bd46 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bd0a:	e01c      	b.n	800bd46 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d902      	bls.n	800bd1a <DMA_CheckFifoParam+0xb6>
 800bd14:	2b03      	cmp	r3, #3
 800bd16:	d003      	beq.n	800bd20 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800bd18:	e018      	b.n	800bd4c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	73fb      	strb	r3, [r7, #15]
        break;
 800bd1e:	e015      	b.n	800bd4c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00e      	beq.n	800bd4a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd30:	e00b      	b.n	800bd4a <DMA_CheckFifoParam+0xe6>
        break;
 800bd32:	bf00      	nop
 800bd34:	e00a      	b.n	800bd4c <DMA_CheckFifoParam+0xe8>
        break;
 800bd36:	bf00      	nop
 800bd38:	e008      	b.n	800bd4c <DMA_CheckFifoParam+0xe8>
        break;
 800bd3a:	bf00      	nop
 800bd3c:	e006      	b.n	800bd4c <DMA_CheckFifoParam+0xe8>
        break;
 800bd3e:	bf00      	nop
 800bd40:	e004      	b.n	800bd4c <DMA_CheckFifoParam+0xe8>
        break;
 800bd42:	bf00      	nop
 800bd44:	e002      	b.n	800bd4c <DMA_CheckFifoParam+0xe8>
        break;
 800bd46:	bf00      	nop
 800bd48:	e000      	b.n	800bd4c <DMA_CheckFifoParam+0xe8>
    break;
 800bd4a:	bf00      	nop
    }
  }

  return status;
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3714      	adds	r7, #20
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop

0800bd5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a38      	ldr	r2, [pc, #224]	@ (800be50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d022      	beq.n	800bdba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a36      	ldr	r2, [pc, #216]	@ (800be54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d01d      	beq.n	800bdba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a35      	ldr	r2, [pc, #212]	@ (800be58 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d018      	beq.n	800bdba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a33      	ldr	r2, [pc, #204]	@ (800be5c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d013      	beq.n	800bdba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a32      	ldr	r2, [pc, #200]	@ (800be60 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d00e      	beq.n	800bdba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a30      	ldr	r2, [pc, #192]	@ (800be64 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d009      	beq.n	800bdba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a2f      	ldr	r2, [pc, #188]	@ (800be68 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d004      	beq.n	800bdba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a2d      	ldr	r2, [pc, #180]	@ (800be6c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d101      	bne.n	800bdbe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e000      	b.n	800bdc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d01a      	beq.n	800bdfa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	3b08      	subs	r3, #8
 800bdcc:	4a28      	ldr	r2, [pc, #160]	@ (800be70 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800bdce:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd2:	091b      	lsrs	r3, r3, #4
 800bdd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	4b26      	ldr	r3, [pc, #152]	@ (800be74 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800bdda:	4413      	add	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	461a      	mov	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a24      	ldr	r2, [pc, #144]	@ (800be78 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800bde8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f003 031f 	and.w	r3, r3, #31
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	409a      	lsls	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800bdf8:	e024      	b.n	800be44 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	3b10      	subs	r3, #16
 800be02:	4a1e      	ldr	r2, [pc, #120]	@ (800be7c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800be04:	fba2 2303 	umull	r2, r3, r2, r3
 800be08:	091b      	lsrs	r3, r3, #4
 800be0a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	4a1c      	ldr	r2, [pc, #112]	@ (800be80 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d806      	bhi.n	800be22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	4a1b      	ldr	r2, [pc, #108]	@ (800be84 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d902      	bls.n	800be22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3308      	adds	r3, #8
 800be20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	4b18      	ldr	r3, [pc, #96]	@ (800be88 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	461a      	mov	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a16      	ldr	r2, [pc, #88]	@ (800be8c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800be34:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f003 031f 	and.w	r3, r3, #31
 800be3c:	2201      	movs	r2, #1
 800be3e:	409a      	lsls	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800be44:	bf00      	nop
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	58025408 	.word	0x58025408
 800be54:	5802541c 	.word	0x5802541c
 800be58:	58025430 	.word	0x58025430
 800be5c:	58025444 	.word	0x58025444
 800be60:	58025458 	.word	0x58025458
 800be64:	5802546c 	.word	0x5802546c
 800be68:	58025480 	.word	0x58025480
 800be6c:	58025494 	.word	0x58025494
 800be70:	cccccccd 	.word	0xcccccccd
 800be74:	16009600 	.word	0x16009600
 800be78:	58025880 	.word	0x58025880
 800be7c:	aaaaaaab 	.word	0xaaaaaaab
 800be80:	400204b8 	.word	0x400204b8
 800be84:	4002040f 	.word	0x4002040f
 800be88:	10008200 	.word	0x10008200
 800be8c:	40020880 	.word	0x40020880

0800be90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d04a      	beq.n	800bf3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2b08      	cmp	r3, #8
 800beaa:	d847      	bhi.n	800bf3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a25      	ldr	r2, [pc, #148]	@ (800bf48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d022      	beq.n	800befc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a24      	ldr	r2, [pc, #144]	@ (800bf4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d01d      	beq.n	800befc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a22      	ldr	r2, [pc, #136]	@ (800bf50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d018      	beq.n	800befc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a21      	ldr	r2, [pc, #132]	@ (800bf54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d013      	beq.n	800befc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a1f      	ldr	r2, [pc, #124]	@ (800bf58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d00e      	beq.n	800befc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a1e      	ldr	r2, [pc, #120]	@ (800bf5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d009      	beq.n	800befc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a1c      	ldr	r2, [pc, #112]	@ (800bf60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d004      	beq.n	800befc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a1b      	ldr	r2, [pc, #108]	@ (800bf64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d101      	bne.n	800bf00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800befc:	2301      	movs	r3, #1
 800befe:	e000      	b.n	800bf02 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800bf00:	2300      	movs	r3, #0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	4b17      	ldr	r3, [pc, #92]	@ (800bf68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	461a      	mov	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a15      	ldr	r2, [pc, #84]	@ (800bf6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800bf18:	671a      	str	r2, [r3, #112]	@ 0x70
 800bf1a:	e009      	b.n	800bf30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	4b14      	ldr	r3, [pc, #80]	@ (800bf70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800bf20:	4413      	add	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	461a      	mov	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a11      	ldr	r2, [pc, #68]	@ (800bf74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800bf2e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	3b01      	subs	r3, #1
 800bf34:	2201      	movs	r2, #1
 800bf36:	409a      	lsls	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800bf3c:	bf00      	nop
 800bf3e:	3714      	adds	r7, #20
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	58025408 	.word	0x58025408
 800bf4c:	5802541c 	.word	0x5802541c
 800bf50:	58025430 	.word	0x58025430
 800bf54:	58025444 	.word	0x58025444
 800bf58:	58025458 	.word	0x58025458
 800bf5c:	5802546c 	.word	0x5802546c
 800bf60:	58025480 	.word	0x58025480
 800bf64:	58025494 	.word	0x58025494
 800bf68:	1600963f 	.word	0x1600963f
 800bf6c:	58025940 	.word	0x58025940
 800bf70:	1000823f 	.word	0x1000823f
 800bf74:	40020940 	.word	0x40020940

0800bf78 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e04f      	b.n	800c02a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d106      	bne.n	800bfa4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f84e 	bl	800c040 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	4b20      	ldr	r3, [pc, #128]	@ (800c034 <HAL_DMA2D_Init+0xbc>)
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	6851      	ldr	r1, [r2, #4]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	69d2      	ldr	r2, [r2, #28]
 800bfbe:	4311      	orrs	r1, r2
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	6812      	ldr	r2, [r2, #0]
 800bfc4:	430b      	orrs	r3, r1
 800bfc6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfce:	4b1a      	ldr	r3, [pc, #104]	@ (800c038 <HAL_DMA2D_Init+0xc0>)
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	6891      	ldr	r1, [r2, #8]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	6992      	ldr	r2, [r2, #24]
 800bfda:	4311      	orrs	r1, r2
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	6812      	ldr	r2, [r2, #0]
 800bfe0:	430b      	orrs	r3, r1
 800bfe2:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bfea:	4b14      	ldr	r3, [pc, #80]	@ (800c03c <HAL_DMA2D_Init+0xc4>)
 800bfec:	4013      	ands	r3, r2
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	68d1      	ldr	r1, [r2, #12]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	6812      	ldr	r2, [r2, #0]
 800bff6:	430b      	orrs	r3, r1
 800bff8:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c000:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	051a      	lsls	r2, r3, #20
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	055b      	lsls	r3, r3, #21
 800c010:	431a      	orrs	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	430a      	orrs	r2, r1
 800c018:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	fff8ffbf 	.word	0xfff8ffbf
 800c038:	fffffef8 	.word	0xfffffef8
 800c03c:	ffff0000 	.word	0xffff0000

0800c040 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af02      	add	r7, sp, #8
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d101      	bne.n	800c070 <HAL_DMA2D_Start+0x1c>
 800c06c:	2302      	movs	r3, #2
 800c06e:	e018      	b.n	800c0a2 <HAL_DMA2D_Start+0x4e>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2202      	movs	r2, #2
 800c07c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	68b9      	ldr	r1, [r7, #8]
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f000 f9a4 	bl	800c3d8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f042 0201 	orr.w	r2, r2, #1
 800c09e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b086      	sub	sp, #24
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 0301 	and.w	r3, r3, #1
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d056      	beq.n	800c174 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800c0c6:	f7fc fc4d 	bl	8008964 <HAL_GetTick>
 800c0ca:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800c0cc:	e04b      	b.n	800c166 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d023      	beq.n	800c128 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f003 0320 	and.w	r3, r3, #32
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d005      	beq.n	800c0f6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0ee:	f043 0202 	orr.w	r2, r3, #2
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f003 0301 	and.w	r3, r3, #1
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c104:	f043 0201 	orr.w	r2, r3, #1
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2221      	movs	r2, #33	@ 0x21
 800c112:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2204      	movs	r2, #4
 800c118:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	e0a5      	b.n	800c274 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c12e:	d01a      	beq.n	800c166 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c130:	f7fc fc18 	bl	8008964 <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d302      	bcc.n	800c146 <HAL_DMA2D_PollForTransfer+0x9c>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d10f      	bne.n	800c166 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c14a:	f043 0220 	orr.w	r2, r3, #32
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2203      	movs	r2, #3
 800c156:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e086      	b.n	800c274 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	f003 0302 	and.w	r3, r3, #2
 800c170:	2b00      	cmp	r3, #0
 800c172:	d0ac      	beq.n	800c0ce <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	69db      	ldr	r3, [r3, #28]
 800c17a:	f003 0320 	and.w	r3, r3, #32
 800c17e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c186:	f003 0320 	and.w	r3, r3, #32
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	4313      	orrs	r3, r2
 800c18e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d061      	beq.n	800c25a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800c196:	f7fc fbe5 	bl	8008964 <HAL_GetTick>
 800c19a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800c19c:	e056      	b.n	800c24c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d02e      	beq.n	800c20e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f003 0308 	and.w	r3, r3, #8
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1be:	f043 0204 	orr.w	r2, r3, #4
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f003 0320 	and.w	r3, r3, #32
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d005      	beq.n	800c1dc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1d4:	f043 0202 	orr.w	r2, r3, #2
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f003 0301 	and.w	r3, r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d005      	beq.n	800c1f2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1ea:	f043 0201 	orr.w	r2, r3, #1
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2229      	movs	r2, #41	@ 0x29
 800c1f8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2204      	movs	r2, #4
 800c1fe:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e032      	b.n	800c274 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c214:	d01a      	beq.n	800c24c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c216:	f7fc fba5 	bl	8008964 <HAL_GetTick>
 800c21a:	4602      	mov	r2, r0
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	683a      	ldr	r2, [r7, #0]
 800c222:	429a      	cmp	r2, r3
 800c224:	d302      	bcc.n	800c22c <HAL_DMA2D_PollForTransfer+0x182>
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10f      	bne.n	800c24c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c230:	f043 0220 	orr.w	r2, r3, #32
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2203      	movs	r2, #3
 800c23c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800c248:	2303      	movs	r3, #3
 800c24a:	e013      	b.n	800c274 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	f003 0310 	and.w	r3, r3, #16
 800c256:	2b00      	cmp	r3, #0
 800c258:	d0a1      	beq.n	800c19e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2212      	movs	r2, #18
 800c260:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3718      	adds	r7, #24
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b087      	sub	sp, #28
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d101      	bne.n	800c2a0 <HAL_DMA2D_ConfigLayer+0x24>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e092      	b.n	800c3c6 <HAL_DMA2D_ConfigLayer+0x14a>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800c2b0:	683a      	ldr	r2, [r7, #0]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	00db      	lsls	r3, r3, #3
 800c2b6:	1a9b      	subs	r3, r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	3328      	adds	r3, #40	@ 0x28
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	4413      	add	r3, r2
 800c2c0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	685a      	ldr	r2, [r3, #4]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	041b      	lsls	r3, r3, #16
 800c2cc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c2d4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	695b      	ldr	r3, [r3, #20]
 800c2da:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800c2e0:	4b3c      	ldr	r3, [pc, #240]	@ (800c3d4 <HAL_DMA2D_ConfigLayer+0x158>)
 800c2e2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	2b0a      	cmp	r3, #10
 800c2ea:	d003      	beq.n	800c2f4 <HAL_DMA2D_ConfigLayer+0x78>
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	2b09      	cmp	r3, #9
 800c2f2:	d107      	bne.n	800c304 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c2fc:	693a      	ldr	r2, [r7, #16]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	613b      	str	r3, [r7, #16]
 800c302:	e005      	b.n	800c310 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	061b      	lsls	r3, r3, #24
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	4313      	orrs	r3, r2
 800c30e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d120      	bne.n	800c358 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	43db      	mvns	r3, r3
 800c320:	ea02 0103 	and.w	r1, r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	693a      	ldr	r2, [r7, #16]
 800c32a:	430a      	orrs	r2, r1
 800c32c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	6812      	ldr	r2, [r2, #0]
 800c336:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	2b0a      	cmp	r3, #10
 800c33e:	d003      	beq.n	800c348 <HAL_DMA2D_ConfigLayer+0xcc>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	2b09      	cmp	r3, #9
 800c346:	d135      	bne.n	800c3b4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	68da      	ldr	r2, [r3, #12]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800c354:	629a      	str	r2, [r3, #40]	@ 0x28
 800c356:	e02d      	b.n	800c3b4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	2b0b      	cmp	r3, #11
 800c35e:	d109      	bne.n	800c374 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	699b      	ldr	r3, [r3, #24]
 800c364:	049b      	lsls	r3, r3, #18
 800c366:	693a      	ldr	r2, [r7, #16]
 800c368:	4313      	orrs	r3, r2
 800c36a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800c372:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	69da      	ldr	r2, [r3, #28]
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	43db      	mvns	r3, r3
 800c37e:	ea02 0103 	and.w	r1, r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	693a      	ldr	r2, [r7, #16]
 800c388:	430a      	orrs	r2, r1
 800c38a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	6812      	ldr	r2, [r2, #0]
 800c394:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	2b0a      	cmp	r3, #10
 800c39c:	d003      	beq.n	800c3a6 <HAL_DMA2D_ConfigLayer+0x12a>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	2b09      	cmp	r3, #9
 800c3a4:	d106      	bne.n	800c3b4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	68da      	ldr	r2, [r3, #12]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800c3b2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	371c      	adds	r7, #28
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	ff33000f 	.word	0xff33000f

0800c3d8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b08b      	sub	sp, #44	@ 0x2c
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3ec:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	041a      	lsls	r2, r3, #16
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f6:	431a      	orrs	r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	430a      	orrs	r2, r1
 800c3fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c410:	d174      	bne.n	800c4fc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c418:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c420:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c428:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d108      	bne.n	800c44a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	431a      	orrs	r2, r3
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	4313      	orrs	r3, r2
 800c442:	697a      	ldr	r2, [r7, #20]
 800c444:	4313      	orrs	r3, r2
 800c446:	627b      	str	r3, [r7, #36]	@ 0x24
 800c448:	e053      	b.n	800c4f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d106      	bne.n	800c460 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800c452:	69ba      	ldr	r2, [r7, #24]
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	4313      	orrs	r3, r2
 800c458:	697a      	ldr	r2, [r7, #20]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c45e:	e048      	b.n	800c4f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	2b02      	cmp	r3, #2
 800c466:	d111      	bne.n	800c48c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	0cdb      	lsrs	r3, r3, #19
 800c46c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	0a9b      	lsrs	r3, r3, #10
 800c472:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	08db      	lsrs	r3, r3, #3
 800c478:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	015a      	lsls	r2, r3, #5
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	02db      	lsls	r3, r3, #11
 800c482:	4313      	orrs	r3, r2
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	4313      	orrs	r3, r2
 800c488:	627b      	str	r3, [r7, #36]	@ 0x24
 800c48a:	e032      	b.n	800c4f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	2b03      	cmp	r3, #3
 800c492:	d117      	bne.n	800c4c4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	0fdb      	lsrs	r3, r3, #31
 800c498:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	0cdb      	lsrs	r3, r3, #19
 800c49e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	0adb      	lsrs	r3, r3, #11
 800c4a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	08db      	lsrs	r3, r3, #3
 800c4aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	015a      	lsls	r2, r3, #5
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	029b      	lsls	r3, r3, #10
 800c4b4:	431a      	orrs	r2, r3
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	03db      	lsls	r3, r3, #15
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	697a      	ldr	r2, [r7, #20]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4c2:	e016      	b.n	800c4f2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800c4c4:	6a3b      	ldr	r3, [r7, #32]
 800c4c6:	0f1b      	lsrs	r3, r3, #28
 800c4c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	0d1b      	lsrs	r3, r3, #20
 800c4ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	0b1b      	lsrs	r3, r3, #12
 800c4d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	091b      	lsrs	r3, r3, #4
 800c4da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	011a      	lsls	r2, r3, #4
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	021b      	lsls	r3, r3, #8
 800c4e4:	431a      	orrs	r2, r3
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	031b      	lsls	r3, r3, #12
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	697a      	ldr	r2, [r7, #20]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4f8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800c4fa:	e00d      	b.n	800c518 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c504:	d104      	bne.n	800c510 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	615a      	str	r2, [r3, #20]
}
 800c50e:	e003      	b.n	800c518 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	60da      	str	r2, [r3, #12]
}
 800c518:	bf00      	nop
 800c51a:	372c      	adds	r7, #44	@ 0x2c
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
 800c530:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	019a      	lsls	r2, r3, #6
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	431a      	orrs	r2, r3
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	021b      	lsls	r3, r3, #8
 800c53e:	431a      	orrs	r2, r3
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	041b      	lsls	r3, r3, #16
 800c544:	431a      	orrs	r2, r3
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800c54a:	bf00      	nop
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b086      	sub	sp, #24
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	60f8      	str	r0, [r7, #12]
 800c55e:	60b9      	str	r1, [r7, #8]
 800c560:	607a      	str	r2, [r7, #4]
 800c562:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800c564:	f7fc f9fe 	bl	8008964 <HAL_GetTick>
 800c568:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800c56a:	e009      	b.n	800c580 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c56c:	f7fc f9fa 	bl	8008964 <HAL_GetTick>
 800c570:	4602      	mov	r2, r0
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c57a:	d901      	bls.n	800c580 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800c57c:	2303      	movs	r3, #3
 800c57e:	e015      	b.n	800c5ac <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c586:	f003 0301 	and.w	r3, r3, #1
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d0ee      	beq.n	800c56c <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	019a      	lsls	r2, r3, #6
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	431a      	orrs	r2, r3
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	021b      	lsls	r3, r3, #8
 800c59a:	ea42 0103 	orr.w	r1, r2, r3
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	041a      	lsls	r2, r3, #16
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	430a      	orrs	r2, r1
 800c5a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3718      	adds	r7, #24
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08a      	sub	sp, #40	@ 0x28
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e16c      	b.n	800c8a2 <HAL_DSI_Init+0x2ee>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	7c5b      	ldrb	r3, [r3, #17]
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d102      	bne.n	800c5d8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f96e 	bl	800c8b4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2203      	movs	r2, #3
 800c5dc:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800c5de:	2300      	movs	r3, #0
 800c5e0:	61bb      	str	r3, [r7, #24]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800c5f2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800c5fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c602:	61bb      	str	r3, [r7, #24]
 800c604:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c606:	f7fc f9ad 	bl	8008964 <HAL_GetTick>
 800c60a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800c60c:	e009      	b.n	800c622 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c60e:	f7fc f9a9 	bl	8008964 <HAL_GetTick>
 800c612:	4602      	mov	r2, r0
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c61c:	d901      	bls.n	800c622 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800c61e:	2303      	movs	r3, #3
 800c620:	e13f      	b.n	800c8a2 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800c62a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d0ed      	beq.n	800c60e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	4b9b      	ldr	r3, [pc, #620]	@ (800c8ac <HAL_DSI_Init+0x2f8>)
 800c640:	400b      	ands	r3, r1
 800c642:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800c65a:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800c662:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	430a      	orrs	r2, r1
 800c66a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800c66e:	2300      	movs	r3, #0
 800c670:	617b      	str	r3, [r7, #20]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f042 0201 	orr.w	r2, r2, #1
 800c682:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800c68e:	f003 0301 	and.w	r3, r3, #1
 800c692:	617b      	str	r3, [r7, #20]
 800c694:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800c696:	2001      	movs	r0, #1
 800c698:	f7fc f970 	bl	800897c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800c69c:	f7fc f962 	bl	8008964 <HAL_GetTick>
 800c6a0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800c6a2:	e009      	b.n	800c6b8 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c6a4:	f7fc f95e 	bl	8008964 <HAL_GetTick>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ac:	1ad3      	subs	r3, r2, r3
 800c6ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c6b2:	d901      	bls.n	800c6b8 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	e0f4      	b.n	800c8a2 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800c6c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d0ed      	beq.n	800c6a4 <HAL_DSI_Init+0xf0>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	613b      	str	r3, [r7, #16]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f042 0201 	orr.w	r2, r2, #1
 800c6da:	605a      	str	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	f003 0301 	and.w	r3, r3, #1
 800c6e6:	613b      	str	r3, [r7, #16]
 800c6e8:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800c6f8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6899      	ldr	r1, [r3, #8]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	689a      	ldr	r2, [r3, #8]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	430a      	orrs	r2, r1
 800c70a:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f042 0202 	orr.w	r2, r2, #2
 800c71c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f042 0204 	orr.w	r2, r2, #4
 800c730:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f022 0203 	bic.w	r2, r2, #3
 800c744:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68da      	ldr	r2, [r3, #12]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	430a      	orrs	r2, r1
 800c75a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 800c75e:	f7fc f901 	bl	8008964 <HAL_GetTick>
 800c762:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c76c:	f003 0303 	and.w	r3, r3, #3
 800c770:	2b00      	cmp	r3, #0
 800c772:	d123      	bne.n	800c7bc <HAL_DSI_Init+0x208>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800c774:	e00c      	b.n	800c790 <HAL_DSI_Init+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c776:	f7fc f8f5 	bl	8008964 <HAL_GetTick>
 800c77a:	4602      	mov	r2, r0
 800c77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c784:	d904      	bls.n	800c790 <HAL_DSI_Init+0x1dc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 800c78c:	2303      	movs	r3, #3
 800c78e:	e088      	b.n	800c8a2 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c798:	f003 0314 	and.w	r3, r3, #20
 800c79c:	2b14      	cmp	r3, #20
 800c79e:	d1ea      	bne.n	800c776 <HAL_DSI_Init+0x1c2>
 800c7a0:	e014      	b.n	800c7cc <HAL_DSI_Init+0x218>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c7a2:	f7fc f8df 	bl	8008964 <HAL_GetTick>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c7b0:	d904      	bls.n	800c7bc <HAL_DSI_Init+0x208>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	e072      	b.n	800c8a2 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c7c4:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800c7c8:	2b94      	cmp	r3, #148	@ 0x94
 800c7ca:	d1ea      	bne.n	800c7a2 <HAL_DSI_Init+0x1ee>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <HAL_DSI_Init+0x226>
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	e000      	b.n	800c7dc <HAL_DSI_Init+0x228>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	4a33      	ldr	r2, [pc, #204]	@ (800c8b0 <HAL_DSI_Init+0x2fc>)
 800c7e2:	fb03 f202 	mul.w	r2, r3, r2
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	f003 0303 	and.w	r3, r3, #3
 800c7ee:	409a      	lsls	r2, r3
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800c7f8:	fb01 f303 	mul.w	r3, r1, r3
 800c7fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c800:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800c812:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	69fa      	ldr	r2, [r7, #28]
 800c824:	430a      	orrs	r2, r1
 800c826:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2200      	movs	r2, #0
 800c830:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2200      	movs	r2, #0
 800c83a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 800c844:	2300      	movs	r3, #0
 800c846:	60fb      	str	r3, [r7, #12]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f022 0201 	bic.w	r2, r2, #1
 800c856:	605a      	str	r2, [r3, #4]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	f003 0301 	and.w	r3, r3, #1
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f022 0203 	bic.w	r2, r2, #3
 800c876:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	431a      	orrs	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f042 0201 	orr.w	r2, r2, #1
 800c890:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3728      	adds	r7, #40	@ 0x28
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	fffc8603 	.word	0xfffc8603
 800c8b0:	003d0900 	.word	0x003d0900

0800c8b4 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	7c1b      	ldrb	r3, [r3, #16]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d101      	bne.n	800c8de <HAL_DSI_ConfigVideoMode+0x16>
 800c8da:	2302      	movs	r3, #2
 800c8dc:	e1ee      	b.n	800ccbc <HAL_DSI_ConfigVideoMode+0x3f4>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f022 0201 	bic.w	r2, r2, #1
 800c8f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f022 0201 	bic.w	r2, r2, #1
 800c904:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f022 0203 	bic.w	r2, r2, #3
 800c916:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	68da      	ldr	r2, [r3, #12]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	430a      	orrs	r2, r1
 800c928:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	4b8b      	ldr	r3, [pc, #556]	@ (800cb64 <HAL_DSI_ConfigVideoMode+0x29c>)
 800c936:	400b      	ands	r3, r1
 800c938:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	691a      	ldr	r2, [r3, #16]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	430a      	orrs	r2, r1
 800c94a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	4b84      	ldr	r3, [pc, #528]	@ (800cb68 <HAL_DSI_ConfigVideoMode+0x2a0>)
 800c958:	400b      	ands	r3, r1
 800c95a:	6413      	str	r3, [r2, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	695a      	ldr	r2, [r3, #20]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	430a      	orrs	r2, r1
 800c96c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	4b7b      	ldr	r3, [pc, #492]	@ (800cb68 <HAL_DSI_ConfigVideoMode+0x2a0>)
 800c97a:	400b      	ands	r3, r1
 800c97c:	6453      	str	r3, [r2, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	699a      	ldr	r2, [r3, #24]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	430a      	orrs	r2, r1
 800c98e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68da      	ldr	r2, [r3, #12]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f022 0203 	bic.w	r2, r2, #3
 800c99e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68d9      	ldr	r1, [r3, #12]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	430a      	orrs	r2, r1
 800c9b0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	695a      	ldr	r2, [r3, #20]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f022 0207 	bic.w	r2, r2, #7
 800c9c0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6959      	ldr	r1, [r3, #20]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	6a1b      	ldr	r3, [r3, #32]
 800c9d0:	431a      	orrs	r2, r3
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	431a      	orrs	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	691a      	ldr	r2, [r3, #16]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f022 020f 	bic.w	r2, r2, #15
 800c9ee:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6919      	ldr	r1, [r3, #16]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	685a      	ldr	r2, [r3, #4]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	430a      	orrs	r2, r1
 800ca00:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f022 020e 	bic.w	r2, r2, #14
 800ca12:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	005a      	lsls	r2, r3, #1
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	430a      	orrs	r2, r1
 800ca2a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d110      	bne.n	800ca58 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	691a      	ldr	r2, [r3, #16]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca44:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	6919      	ldr	r1, [r3, #16]
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	689a      	ldr	r2, [r3, #8]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	430a      	orrs	r2, r1
 800ca56:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	4b42      	ldr	r3, [pc, #264]	@ (800cb6c <HAL_DSI_ConfigVideoMode+0x2a4>)
 800ca64:	400b      	ands	r3, r1
 800ca66:	6493      	str	r3, [r2, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	430a      	orrs	r2, r1
 800ca78:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	4b39      	ldr	r3, [pc, #228]	@ (800cb6c <HAL_DSI_ConfigVideoMode+0x2a4>)
 800ca86:	400b      	ands	r3, r1
 800ca88:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	430a      	orrs	r2, r1
 800ca9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	4b32      	ldr	r3, [pc, #200]	@ (800cb70 <HAL_DSI_ConfigVideoMode+0x2a8>)
 800caa8:	400b      	ands	r3, r1
 800caaa:	6513      	str	r3, [r2, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	430a      	orrs	r2, r1
 800cabc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	4b2a      	ldr	r3, [pc, #168]	@ (800cb74 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800caca:	400b      	ands	r3, r1
 800cacc:	6553      	str	r3, [r2, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	430a      	orrs	r2, r1
 800cade:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	4b22      	ldr	r3, [pc, #136]	@ (800cb74 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800caec:	400b      	ands	r3, r1
 800caee:	6593      	str	r3, [r2, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	430a      	orrs	r2, r1
 800cb00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	4b19      	ldr	r3, [pc, #100]	@ (800cb74 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800cb0e:	400b      	ands	r3, r1
 800cb10:	65d3      	str	r3, [r2, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	430a      	orrs	r2, r1
 800cb22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb64 <HAL_DSI_ConfigVideoMode+0x29c>)
 800cb30:	400b      	ands	r3, r1
 800cb32:	6613      	str	r3, [r2, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	430a      	orrs	r2, r1
 800cb44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cb54:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb60:	e00a      	b.n	800cb78 <HAL_DSI_ConfigVideoMode+0x2b0>
 800cb62:	bf00      	nop
 800cb64:	ffffc000 	.word	0xffffc000
 800cb68:	ffffe000 	.word	0xffffe000
 800cb6c:	fffff000 	.word	0xfffff000
 800cb70:	ffff8000 	.word	0xffff8000
 800cb74:	fffffc00 	.word	0xfffffc00
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	699a      	ldr	r2, [r3, #24]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 800cb8e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	6999      	ldr	r1, [r3, #24]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb9a:	041a      	lsls	r2, r3, #16
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	430a      	orrs	r2, r1
 800cba2:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	699a      	ldr	r2, [r3, #24]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cbb2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	6999      	ldr	r1, [r3, #24]
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	430a      	orrs	r2, r1
 800cbc4:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cbd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	430a      	orrs	r2, r1
 800cbe6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cbf6:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	430a      	orrs	r2, r1
 800cc08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cc18:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	430a      	orrs	r2, r1
 800cc4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800cc5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cc7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	430a      	orrs	r2, r1
 800cc90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cca0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	7c1b      	ldrb	r3, [r3, #16]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d101      	bne.n	800ccde <HAL_DSI_ConfigFlowControl+0x16>
 800ccda:	2302      	movs	r3, #2
 800ccdc:	e016      	b.n	800cd0c <HAL_DSI_ConfigFlowControl+0x44>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2201      	movs	r2, #1
 800cce2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f022 021f 	bic.w	r2, r2, #31
 800ccf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	430a      	orrs	r2, r1
 800cd02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	7c1b      	ldrb	r3, [r3, #16]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d101      	bne.n	800cd2c <HAL_DSI_Start+0x14>
 800cd28:	2302      	movs	r3, #2
 800cd2a:	e02b      	b.n	800cd84 <HAL_DSI_Start+0x6c>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800cd32:	2300      	movs	r3, #0
 800cd34:	60fb      	str	r3, [r7, #12]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f042 0201 	orr.w	r2, r2, #1
 800cd44:	605a      	str	r2, [r3, #4]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	f003 0301 	and.w	r3, r3, #1
 800cd50:	60fb      	str	r3, [r7, #12]
 800cd52:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800cd54:	2300      	movs	r3, #0
 800cd56:	60bb      	str	r3, [r7, #8]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f042 0208 	orr.w	r2, r2, #8
 800cd68:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800cd74:	f003 0308 	and.w	r3, r3, #8
 800cd78:	60bb      	str	r3, [r7, #8]
 800cd7a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b088      	sub	sp, #32
 800cd94:	af02      	add	r7, sp, #8
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
 800cd9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	7c1b      	ldrb	r3, [r3, #16]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d101      	bne.n	800cdaa <HAL_DSI_ShortWrite+0x1a>
 800cda6:	2302      	movs	r3, #2
 800cda8:	e010      	b.n	800cdcc <HAL_DSI_ShortWrite+0x3c>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2201      	movs	r2, #1
 800cdae:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800cdb0:	6a3b      	ldr	r3, [r7, #32]
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	68b9      	ldr	r1, [r7, #8]
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	f7ff fbcb 	bl	800c556 <DSI_ShortWrite>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	741a      	strb	r2, [r3, #16]

  return status;
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3718      	adds	r7, #24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b08c      	sub	sp, #48	@ 0x30
 800cdd8:	af02      	add	r7, sp, #8
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
 800cde0:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;
 800cde2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde4:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	7c1b      	ldrb	r3, [r3, #16]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d101      	bne.n	800cdf2 <HAL_DSI_LongWrite+0x1e>
 800cdee:	2302      	movs	r3, #2
 800cdf0:	e084      	b.n	800cefc <HAL_DSI_LongWrite+0x128>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800cdf8:	f7fb fdb4 	bl	8008964 <HAL_GetTick>
 800cdfc:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800cdfe:	e00c      	b.n	800ce1a <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ce00:	f7fb fdb0 	bl	8008964 <HAL_GetTick>
 800ce04:	4602      	mov	r2, r0
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce0e:	d904      	bls.n	800ce1a <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2200      	movs	r2, #0
 800ce14:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800ce16:	2303      	movs	r3, #3
 800ce18:	e070      	b.n	800cefc <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce20:	f003 0301 	and.w	r3, r3, #1
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d0eb      	beq.n	800ce00 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800ce28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce2a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	2b03      	cmp	r3, #3
 800ce30:	bf28      	it	cs
 800ce32:	2303      	movcs	r3, #3
 800ce34:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800ce36:	2300      	movs	r3, #0
 800ce38:	623b      	str	r3, [r7, #32]
 800ce3a:	e00f      	b.n	800ce5c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800ce3c:	69ba      	ldr	r2, [r7, #24]
 800ce3e:	6a3b      	ldr	r3, [r7, #32]
 800ce40:	4413      	add	r3, r2
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	461a      	mov	r2, r3
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	00db      	lsls	r3, r3, #3
 800ce4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce50:	69fa      	ldr	r2, [r7, #28]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800ce56:	6a3b      	ldr	r3, [r7, #32]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	623b      	str	r3, [r7, #32]
 800ce5c:	6a3a      	ldr	r2, [r7, #32]
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d3eb      	bcc.n	800ce3c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	69fa      	ldr	r2, [r7, #28]
 800ce6a:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 800ce6c:	683a      	ldr	r2, [r7, #0]
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	4413      	add	r3, r2
 800ce7a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800ce7c:	e028      	b.n	800ced0 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce80:	2b04      	cmp	r3, #4
 800ce82:	bf28      	it	cs
 800ce84:	2304      	movcs	r3, #4
 800ce86:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	623b      	str	r3, [r7, #32]
 800ce90:	e00e      	b.n	800ceb0 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ce92:	69ba      	ldr	r2, [r7, #24]
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	4413      	add	r3, r2
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	fa02 f303 	lsl.w	r3, r2, r3
 800cea4:	69fa      	ldr	r2, [r7, #28]
 800cea6:	4313      	orrs	r3, r2
 800cea8:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800ceaa:	6a3b      	ldr	r3, [r7, #32]
 800ceac:	3301      	adds	r3, #1
 800ceae:	623b      	str	r3, [r7, #32]
 800ceb0:	6a3a      	ldr	r2, [r7, #32]
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d3ec      	bcc.n	800ce92 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	69fa      	ldr	r2, [r7, #28]
 800cebe:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 800cec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 800cec8:	69ba      	ldr	r2, [r7, #24]
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	4413      	add	r3, r2
 800cece:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800ced0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1d3      	bne.n	800ce7e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800cede:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	3301      	adds	r3, #1
 800cee4:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	4613      	mov	r3, r2
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	68b9      	ldr	r1, [r7, #8]
 800cef0:	f7ff fb18 	bl	800c524 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2200      	movs	r2, #0
 800cef8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3728      	adds	r7, #40	@ 0x28
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b08c      	sub	sp, #48	@ 0x30
 800cf08:	af02      	add	r7, sp, #8
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
 800cf10:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t datasize = Size;
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	7c1b      	ldrb	r3, [r3, #16]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d101      	bne.n	800cf26 <HAL_DSI_Read+0x22>
 800cf22:	2302      	movs	r3, #2
 800cf24:	e0ae      	b.n	800d084 <HAL_DSI_Read+0x180>
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d913      	bls.n	800cf5a <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	b2da      	uxtb	r2, r3
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	2237      	movs	r2, #55	@ 0x37
 800cf42:	68b9      	ldr	r1, [r7, #8]
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f7ff fb06 	bl	800c556 <DSI_ShortWrite>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d004      	beq.n	800cf5a <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2200      	movs	r2, #0
 800cf54:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800cf56:	2301      	movs	r3, #1
 800cf58:	e094      	b.n	800d084 <HAL_DSI_Read+0x180>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5c:	2b06      	cmp	r3, #6
 800cf5e:	d109      	bne.n	800cf74 <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6818      	ldr	r0, [r3, #0]
 800cf64:	2300      	movs	r3, #0
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf6c:	68b9      	ldr	r1, [r7, #8]
 800cf6e:	f7ff fad9 	bl	800c524 <DSI_ConfigPacketHeader>
 800cf72:	e033      	b.n	800cfdc <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800cf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf76:	2b04      	cmp	r3, #4
 800cf78:	d109      	bne.n	800cf8e <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6818      	ldr	r0, [r3, #0]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	2300      	movs	r3, #0
 800cf84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf86:	68b9      	ldr	r1, [r7, #8]
 800cf88:	f7ff facc 	bl	800c524 <DSI_ConfigPacketHeader>
 800cf8c:	e026      	b.n	800cfdc <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf90:	2b14      	cmp	r3, #20
 800cf92:	d10c      	bne.n	800cfae <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6818      	ldr	r0, [r3, #0]
 800cf98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfa6:	68b9      	ldr	r1, [r7, #8]
 800cfa8:	f7ff fabc 	bl	800c524 <DSI_ConfigPacketHeader>
 800cfac:	e016      	b.n	800cfdc <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800cfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb0:	2b24      	cmp	r3, #36	@ 0x24
 800cfb2:	d10e      	bne.n	800cfd2 <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6818      	ldr	r0, [r3, #0]
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfca:	68b9      	ldr	r1, [r7, #8]
 800cfcc:	f7ff faaa 	bl	800c524 <DSI_ConfigPacketHeader>
 800cfd0:	e004      	b.n	800cfdc <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e053      	b.n	800d084 <HAL_DSI_Read+0x180>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800cfdc:	f7fb fcc2 	bl	8008964 <HAL_GetTick>
 800cfe0:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 800cfe2:	e048      	b.n	800d076 <HAL_DSI_Read+0x172>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfea:	f003 0310 	and.w	r3, r3, #16
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d120      	bne.n	800d034 <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cff8:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800cffa:	6a3b      	ldr	r3, [r7, #32]
 800cffc:	2b04      	cmp	r3, #4
 800cffe:	bf28      	it	cs
 800d000:	2304      	movcs	r3, #4
 800d002:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 800d004:	2300      	movs	r3, #0
 800d006:	61fb      	str	r3, [r7, #28]
 800d008:	e010      	b.n	800d02c <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	00db      	lsls	r3, r3, #3
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	fa22 f303 	lsr.w	r3, r2, r3
 800d014:	b2da      	uxtb	r2, r3
 800d016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d018:	701a      	strb	r2, [r3, #0]
        pdata++;
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	3301      	adds	r3, #1
 800d01e:	627b      	str	r3, [r7, #36]	@ 0x24
        datasize--;
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	3b01      	subs	r3, #1
 800d024:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	3301      	adds	r3, #1
 800d02a:	61fb      	str	r3, [r7, #28]
 800d02c:	69fa      	ldr	r2, [r7, #28]
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	429a      	cmp	r2, r3
 800d032:	d3ea      	bcc.n	800d00a <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d034:	f7fb fc96 	bl	8008964 <HAL_GetTick>
 800d038:	4602      	mov	r2, r0
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d042:	d904      	bls.n	800d04e <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800d04a:	2303      	movs	r3, #3
 800d04c:	e01a      	b.n	800d084 <HAL_DSI_Read+0x180>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d10c      	bne.n	800d076 <HAL_DSI_Read+0x172>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d064:	f003 0320 	and.w	r3, r3, #32
 800d068:	2b20      	cmp	r3, #32
 800d06a:	d104      	bne.n	800d076 <HAL_DSI_Read+0x172>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	741a      	strb	r2, [r3, #16]

        return HAL_ERROR;
 800d072:	2301      	movs	r3, #1
 800d074:	e006      	b.n	800d084 <HAL_DSI_Read+0x180>
  while (((int32_t)(datasize)) > 0)
 800d076:	6a3b      	ldr	r3, [r7, #32]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	dcb3      	bgt.n	800cfe4 <HAL_DSI_Read+0xe0>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3728      	adds	r7, #40	@ 0x28
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800d08c:	b480      	push	{r7}
 800d08e:	b087      	sub	sp, #28
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	460b      	mov	r3, r1
 800d096:	607a      	str	r2, [r7, #4]
 800d098:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e00a      	b.n	800d0be <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800d0a8:	7afb      	ldrb	r3, [r7, #11]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d103      	bne.n	800d0b6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	605a      	str	r2, [r3, #4]
      break;
 800d0b4:	e002      	b.n	800d0bc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	75fb      	strb	r3, [r7, #23]
      break;
 800d0ba:	bf00      	nop
  }

  return status;
 800d0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	371c      	adds	r7, #28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr

0800d0ca <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800d0ca:	b480      	push	{r7}
 800d0cc:	b083      	sub	sp, #12
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d101      	bne.n	800d0de <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e003      	b.n	800d0e6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800d0e4:	2300      	movs	r3, #0
  }
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
	...

0800d0f4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	0c1b      	lsrs	r3, r3, #16
 800d102:	f003 0303 	and.w	r3, r3, #3
 800d106:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f003 031f 	and.w	r3, r3, #31
 800d110:	2201      	movs	r2, #1
 800d112:	fa02 f303 	lsl.w	r3, r2, r3
 800d116:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800d118:	f7fb fdfa 	bl	8008d10 <HAL_GetCurrentCPUID>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b03      	cmp	r3, #3
 800d120:	d105      	bne.n	800d12e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	011a      	lsls	r2, r3, #4
 800d126:	4b0f      	ldr	r3, [pc, #60]	@ (800d164 <HAL_EXTI_IRQHandler+0x70>)
 800d128:	4413      	add	r3, r2
 800d12a:	617b      	str	r3, [r7, #20]
 800d12c:	e004      	b.n	800d138 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	011a      	lsls	r2, r3, #4
 800d132:	4b0d      	ldr	r3, [pc, #52]	@ (800d168 <HAL_EXTI_IRQHandler+0x74>)
 800d134:	4413      	add	r3, r2
 800d136:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	4013      	ands	r3, r2
 800d140:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d009      	beq.n	800d15c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d002      	beq.n	800d15c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	4798      	blx	r3
    }
  }
}
 800d15c:	bf00      	nop
 800d15e:	3718      	adds	r7, #24
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	58000088 	.word	0x58000088
 800d168:	580000c8 	.word	0x580000c8

0800d16c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b089      	sub	sp, #36	@ 0x24
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d176:	2300      	movs	r3, #0
 800d178:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d17a:	4b89      	ldr	r3, [pc, #548]	@ (800d3a0 <HAL_GPIO_Init+0x234>)
 800d17c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d17e:	e194      	b.n	800d4aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	2101      	movs	r1, #1
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	fa01 f303 	lsl.w	r3, r1, r3
 800d18c:	4013      	ands	r3, r2
 800d18e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 8186 	beq.w	800d4a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	f003 0303 	and.w	r3, r3, #3
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d005      	beq.n	800d1b0 <HAL_GPIO_Init+0x44>
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	f003 0303 	and.w	r3, r3, #3
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d130      	bne.n	800d212 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	2203      	movs	r2, #3
 800d1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c0:	43db      	mvns	r3, r3
 800d1c2:	69ba      	ldr	r2, [r7, #24]
 800d1c4:	4013      	ands	r3, r2
 800d1c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	68da      	ldr	r2, [r3, #12]
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	005b      	lsls	r3, r3, #1
 800d1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d4:	69ba      	ldr	r2, [r7, #24]
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	69ba      	ldr	r2, [r7, #24]
 800d1de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ee:	43db      	mvns	r3, r3
 800d1f0:	69ba      	ldr	r2, [r7, #24]
 800d1f2:	4013      	ands	r3, r2
 800d1f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	091b      	lsrs	r3, r3, #4
 800d1fc:	f003 0201 	and.w	r2, r3, #1
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	fa02 f303 	lsl.w	r3, r2, r3
 800d206:	69ba      	ldr	r2, [r7, #24]
 800d208:	4313      	orrs	r3, r2
 800d20a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	69ba      	ldr	r2, [r7, #24]
 800d210:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	f003 0303 	and.w	r3, r3, #3
 800d21a:	2b03      	cmp	r3, #3
 800d21c:	d017      	beq.n	800d24e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	2203      	movs	r2, #3
 800d22a:	fa02 f303 	lsl.w	r3, r2, r3
 800d22e:	43db      	mvns	r3, r3
 800d230:	69ba      	ldr	r2, [r7, #24]
 800d232:	4013      	ands	r3, r2
 800d234:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	689a      	ldr	r2, [r3, #8]
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	005b      	lsls	r3, r3, #1
 800d23e:	fa02 f303 	lsl.w	r3, r2, r3
 800d242:	69ba      	ldr	r2, [r7, #24]
 800d244:	4313      	orrs	r3, r2
 800d246:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	69ba      	ldr	r2, [r7, #24]
 800d24c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	f003 0303 	and.w	r3, r3, #3
 800d256:	2b02      	cmp	r3, #2
 800d258:	d123      	bne.n	800d2a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	08da      	lsrs	r2, r3, #3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	3208      	adds	r2, #8
 800d262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	f003 0307 	and.w	r3, r3, #7
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	220f      	movs	r2, #15
 800d272:	fa02 f303 	lsl.w	r3, r2, r3
 800d276:	43db      	mvns	r3, r3
 800d278:	69ba      	ldr	r2, [r7, #24]
 800d27a:	4013      	ands	r3, r2
 800d27c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	691a      	ldr	r2, [r3, #16]
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	f003 0307 	and.w	r3, r3, #7
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	fa02 f303 	lsl.w	r3, r2, r3
 800d28e:	69ba      	ldr	r2, [r7, #24]
 800d290:	4313      	orrs	r3, r2
 800d292:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	08da      	lsrs	r2, r3, #3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3208      	adds	r2, #8
 800d29c:	69b9      	ldr	r1, [r7, #24]
 800d29e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	2203      	movs	r2, #3
 800d2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b2:	43db      	mvns	r3, r3
 800d2b4:	69ba      	ldr	r2, [r7, #24]
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	f003 0203 	and.w	r2, r3, #3
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	005b      	lsls	r3, r3, #1
 800d2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ca:	69ba      	ldr	r2, [r7, #24]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	69ba      	ldr	r2, [r7, #24]
 800d2d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 80e0 	beq.w	800d4a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2e4:	4b2f      	ldr	r3, [pc, #188]	@ (800d3a4 <HAL_GPIO_Init+0x238>)
 800d2e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2ea:	4a2e      	ldr	r2, [pc, #184]	@ (800d3a4 <HAL_GPIO_Init+0x238>)
 800d2ec:	f043 0302 	orr.w	r3, r3, #2
 800d2f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d2f4:	4b2b      	ldr	r3, [pc, #172]	@ (800d3a4 <HAL_GPIO_Init+0x238>)
 800d2f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2fa:	f003 0302 	and.w	r3, r3, #2
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d302:	4a29      	ldr	r2, [pc, #164]	@ (800d3a8 <HAL_GPIO_Init+0x23c>)
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	089b      	lsrs	r3, r3, #2
 800d308:	3302      	adds	r3, #2
 800d30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d30e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	f003 0303 	and.w	r3, r3, #3
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	220f      	movs	r2, #15
 800d31a:	fa02 f303 	lsl.w	r3, r2, r3
 800d31e:	43db      	mvns	r3, r3
 800d320:	69ba      	ldr	r2, [r7, #24]
 800d322:	4013      	ands	r3, r2
 800d324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a20      	ldr	r2, [pc, #128]	@ (800d3ac <HAL_GPIO_Init+0x240>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d052      	beq.n	800d3d4 <HAL_GPIO_Init+0x268>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a1f      	ldr	r2, [pc, #124]	@ (800d3b0 <HAL_GPIO_Init+0x244>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d031      	beq.n	800d39a <HAL_GPIO_Init+0x22e>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a1e      	ldr	r2, [pc, #120]	@ (800d3b4 <HAL_GPIO_Init+0x248>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d02b      	beq.n	800d396 <HAL_GPIO_Init+0x22a>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4a1d      	ldr	r2, [pc, #116]	@ (800d3b8 <HAL_GPIO_Init+0x24c>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d025      	beq.n	800d392 <HAL_GPIO_Init+0x226>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4a1c      	ldr	r2, [pc, #112]	@ (800d3bc <HAL_GPIO_Init+0x250>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d01f      	beq.n	800d38e <HAL_GPIO_Init+0x222>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4a1b      	ldr	r2, [pc, #108]	@ (800d3c0 <HAL_GPIO_Init+0x254>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d019      	beq.n	800d38a <HAL_GPIO_Init+0x21e>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4a1a      	ldr	r2, [pc, #104]	@ (800d3c4 <HAL_GPIO_Init+0x258>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d013      	beq.n	800d386 <HAL_GPIO_Init+0x21a>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4a19      	ldr	r2, [pc, #100]	@ (800d3c8 <HAL_GPIO_Init+0x25c>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d00d      	beq.n	800d382 <HAL_GPIO_Init+0x216>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	4a18      	ldr	r2, [pc, #96]	@ (800d3cc <HAL_GPIO_Init+0x260>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d007      	beq.n	800d37e <HAL_GPIO_Init+0x212>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4a17      	ldr	r2, [pc, #92]	@ (800d3d0 <HAL_GPIO_Init+0x264>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d101      	bne.n	800d37a <HAL_GPIO_Init+0x20e>
 800d376:	2309      	movs	r3, #9
 800d378:	e02d      	b.n	800d3d6 <HAL_GPIO_Init+0x26a>
 800d37a:	230a      	movs	r3, #10
 800d37c:	e02b      	b.n	800d3d6 <HAL_GPIO_Init+0x26a>
 800d37e:	2308      	movs	r3, #8
 800d380:	e029      	b.n	800d3d6 <HAL_GPIO_Init+0x26a>
 800d382:	2307      	movs	r3, #7
 800d384:	e027      	b.n	800d3d6 <HAL_GPIO_Init+0x26a>
 800d386:	2306      	movs	r3, #6
 800d388:	e025      	b.n	800d3d6 <HAL_GPIO_Init+0x26a>
 800d38a:	2305      	movs	r3, #5
 800d38c:	e023      	b.n	800d3d6 <HAL_GPIO_Init+0x26a>
 800d38e:	2304      	movs	r3, #4
 800d390:	e021      	b.n	800d3d6 <HAL_GPIO_Init+0x26a>
 800d392:	2303      	movs	r3, #3
 800d394:	e01f      	b.n	800d3d6 <HAL_GPIO_Init+0x26a>
 800d396:	2302      	movs	r3, #2
 800d398:	e01d      	b.n	800d3d6 <HAL_GPIO_Init+0x26a>
 800d39a:	2301      	movs	r3, #1
 800d39c:	e01b      	b.n	800d3d6 <HAL_GPIO_Init+0x26a>
 800d39e:	bf00      	nop
 800d3a0:	58000080 	.word	0x58000080
 800d3a4:	58024400 	.word	0x58024400
 800d3a8:	58000400 	.word	0x58000400
 800d3ac:	58020000 	.word	0x58020000
 800d3b0:	58020400 	.word	0x58020400
 800d3b4:	58020800 	.word	0x58020800
 800d3b8:	58020c00 	.word	0x58020c00
 800d3bc:	58021000 	.word	0x58021000
 800d3c0:	58021400 	.word	0x58021400
 800d3c4:	58021800 	.word	0x58021800
 800d3c8:	58021c00 	.word	0x58021c00
 800d3cc:	58022000 	.word	0x58022000
 800d3d0:	58022400 	.word	0x58022400
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	69fa      	ldr	r2, [r7, #28]
 800d3d8:	f002 0203 	and.w	r2, r2, #3
 800d3dc:	0092      	lsls	r2, r2, #2
 800d3de:	4093      	lsls	r3, r2
 800d3e0:	69ba      	ldr	r2, [r7, #24]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d3e6:	4938      	ldr	r1, [pc, #224]	@ (800d4c8 <HAL_GPIO_Init+0x35c>)
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	089b      	lsrs	r3, r3, #2
 800d3ec:	3302      	adds	r3, #2
 800d3ee:	69ba      	ldr	r2, [r7, #24]
 800d3f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d3f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	43db      	mvns	r3, r3
 800d400:	69ba      	ldr	r2, [r7, #24]
 800d402:	4013      	ands	r3, r2
 800d404:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d003      	beq.n	800d41a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800d412:	69ba      	ldr	r2, [r7, #24]
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	4313      	orrs	r3, r2
 800d418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d41a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	43db      	mvns	r3, r3
 800d42e:	69ba      	ldr	r2, [r7, #24]
 800d430:	4013      	ands	r3, r2
 800d432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d003      	beq.n	800d448 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d440:	69ba      	ldr	r2, [r7, #24]
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	4313      	orrs	r3, r2
 800d446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d448:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	43db      	mvns	r3, r3
 800d45a:	69ba      	ldr	r2, [r7, #24]
 800d45c:	4013      	ands	r3, r2
 800d45e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d003      	beq.n	800d474 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800d46c:	69ba      	ldr	r2, [r7, #24]
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	4313      	orrs	r3, r2
 800d472:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	69ba      	ldr	r2, [r7, #24]
 800d478:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	43db      	mvns	r3, r3
 800d484:	69ba      	ldr	r2, [r7, #24]
 800d486:	4013      	ands	r3, r2
 800d488:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800d496:	69ba      	ldr	r2, [r7, #24]
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	4313      	orrs	r3, r2
 800d49c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	69ba      	ldr	r2, [r7, #24]
 800d4a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f47f ae63 	bne.w	800d180 <HAL_GPIO_Init+0x14>
  }
}
 800d4ba:	bf00      	nop
 800d4bc:	bf00      	nop
 800d4be:	3724      	adds	r7, #36	@ 0x24
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	58000400 	.word	0x58000400

0800d4cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b087      	sub	sp, #28
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d4da:	4b75      	ldr	r3, [pc, #468]	@ (800d6b0 <HAL_GPIO_DeInit+0x1e4>)
 800d4dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d4de:	e0d9      	b.n	800d694 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e8:	683a      	ldr	r2, [r7, #0]
 800d4ea:	4013      	ands	r3, r2
 800d4ec:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f000 80cc 	beq.w	800d68e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d4f6:	4a6f      	ldr	r2, [pc, #444]	@ (800d6b4 <HAL_GPIO_DeInit+0x1e8>)
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	089b      	lsrs	r3, r3, #2
 800d4fc:	3302      	adds	r3, #2
 800d4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d502:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	f003 0303 	and.w	r3, r3, #3
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	220f      	movs	r2, #15
 800d50e:	fa02 f303 	lsl.w	r3, r2, r3
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	4013      	ands	r3, r2
 800d516:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a67      	ldr	r2, [pc, #412]	@ (800d6b8 <HAL_GPIO_DeInit+0x1ec>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d037      	beq.n	800d590 <HAL_GPIO_DeInit+0xc4>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a66      	ldr	r2, [pc, #408]	@ (800d6bc <HAL_GPIO_DeInit+0x1f0>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d031      	beq.n	800d58c <HAL_GPIO_DeInit+0xc0>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4a65      	ldr	r2, [pc, #404]	@ (800d6c0 <HAL_GPIO_DeInit+0x1f4>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d02b      	beq.n	800d588 <HAL_GPIO_DeInit+0xbc>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	4a64      	ldr	r2, [pc, #400]	@ (800d6c4 <HAL_GPIO_DeInit+0x1f8>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d025      	beq.n	800d584 <HAL_GPIO_DeInit+0xb8>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	4a63      	ldr	r2, [pc, #396]	@ (800d6c8 <HAL_GPIO_DeInit+0x1fc>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d01f      	beq.n	800d580 <HAL_GPIO_DeInit+0xb4>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a62      	ldr	r2, [pc, #392]	@ (800d6cc <HAL_GPIO_DeInit+0x200>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d019      	beq.n	800d57c <HAL_GPIO_DeInit+0xb0>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4a61      	ldr	r2, [pc, #388]	@ (800d6d0 <HAL_GPIO_DeInit+0x204>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d013      	beq.n	800d578 <HAL_GPIO_DeInit+0xac>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a60      	ldr	r2, [pc, #384]	@ (800d6d4 <HAL_GPIO_DeInit+0x208>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d00d      	beq.n	800d574 <HAL_GPIO_DeInit+0xa8>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a5f      	ldr	r2, [pc, #380]	@ (800d6d8 <HAL_GPIO_DeInit+0x20c>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d007      	beq.n	800d570 <HAL_GPIO_DeInit+0xa4>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a5e      	ldr	r2, [pc, #376]	@ (800d6dc <HAL_GPIO_DeInit+0x210>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d101      	bne.n	800d56c <HAL_GPIO_DeInit+0xa0>
 800d568:	2309      	movs	r3, #9
 800d56a:	e012      	b.n	800d592 <HAL_GPIO_DeInit+0xc6>
 800d56c:	230a      	movs	r3, #10
 800d56e:	e010      	b.n	800d592 <HAL_GPIO_DeInit+0xc6>
 800d570:	2308      	movs	r3, #8
 800d572:	e00e      	b.n	800d592 <HAL_GPIO_DeInit+0xc6>
 800d574:	2307      	movs	r3, #7
 800d576:	e00c      	b.n	800d592 <HAL_GPIO_DeInit+0xc6>
 800d578:	2306      	movs	r3, #6
 800d57a:	e00a      	b.n	800d592 <HAL_GPIO_DeInit+0xc6>
 800d57c:	2305      	movs	r3, #5
 800d57e:	e008      	b.n	800d592 <HAL_GPIO_DeInit+0xc6>
 800d580:	2304      	movs	r3, #4
 800d582:	e006      	b.n	800d592 <HAL_GPIO_DeInit+0xc6>
 800d584:	2303      	movs	r3, #3
 800d586:	e004      	b.n	800d592 <HAL_GPIO_DeInit+0xc6>
 800d588:	2302      	movs	r3, #2
 800d58a:	e002      	b.n	800d592 <HAL_GPIO_DeInit+0xc6>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e000      	b.n	800d592 <HAL_GPIO_DeInit+0xc6>
 800d590:	2300      	movs	r3, #0
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	f002 0203 	and.w	r2, r2, #3
 800d598:	0092      	lsls	r2, r2, #2
 800d59a:	4093      	lsls	r3, r2
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d136      	bne.n	800d610 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	43db      	mvns	r3, r3
 800d5aa:	401a      	ands	r2, r3
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	685a      	ldr	r2, [r3, #4]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	43db      	mvns	r3, r3
 800d5b8:	401a      	ands	r2, r3
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800d5be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5c2:	685a      	ldr	r2, [r3, #4]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	43db      	mvns	r3, r3
 800d5c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5cc:	4013      	ands	r3, r2
 800d5ce:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800d5d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	43db      	mvns	r3, r3
 800d5da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5de:	4013      	ands	r3, r2
 800d5e0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	f003 0303 	and.w	r3, r3, #3
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	220f      	movs	r2, #15
 800d5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d5f2:	4a30      	ldr	r2, [pc, #192]	@ (800d6b4 <HAL_GPIO_DeInit+0x1e8>)
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	089b      	lsrs	r3, r3, #2
 800d5f8:	3302      	adds	r3, #2
 800d5fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	43da      	mvns	r2, r3
 800d602:	482c      	ldr	r0, [pc, #176]	@ (800d6b4 <HAL_GPIO_DeInit+0x1e8>)
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	089b      	lsrs	r3, r3, #2
 800d608:	400a      	ands	r2, r1
 800d60a:	3302      	adds	r3, #2
 800d60c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	2103      	movs	r1, #3
 800d61a:	fa01 f303 	lsl.w	r3, r1, r3
 800d61e:	431a      	orrs	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	08da      	lsrs	r2, r3, #3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	3208      	adds	r2, #8
 800d62c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	f003 0307 	and.w	r3, r3, #7
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	220f      	movs	r2, #15
 800d63a:	fa02 f303 	lsl.w	r3, r2, r3
 800d63e:	43db      	mvns	r3, r3
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	08d2      	lsrs	r2, r2, #3
 800d644:	4019      	ands	r1, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	3208      	adds	r2, #8
 800d64a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	68da      	ldr	r2, [r3, #12]
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	005b      	lsls	r3, r3, #1
 800d656:	2103      	movs	r1, #3
 800d658:	fa01 f303 	lsl.w	r3, r1, r3
 800d65c:	43db      	mvns	r3, r3
 800d65e:	401a      	ands	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	2101      	movs	r1, #1
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	fa01 f303 	lsl.w	r3, r1, r3
 800d670:	43db      	mvns	r3, r3
 800d672:	401a      	ands	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	689a      	ldr	r2, [r3, #8]
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	005b      	lsls	r3, r3, #1
 800d680:	2103      	movs	r1, #3
 800d682:	fa01 f303 	lsl.w	r3, r1, r3
 800d686:	43db      	mvns	r3, r3
 800d688:	401a      	ands	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	3301      	adds	r3, #1
 800d692:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800d694:	683a      	ldr	r2, [r7, #0]
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	fa22 f303 	lsr.w	r3, r2, r3
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f47f af1f 	bne.w	800d4e0 <HAL_GPIO_DeInit+0x14>
  }
}
 800d6a2:	bf00      	nop
 800d6a4:	bf00      	nop
 800d6a6:	371c      	adds	r7, #28
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr
 800d6b0:	58000080 	.word	0x58000080
 800d6b4:	58000400 	.word	0x58000400
 800d6b8:	58020000 	.word	0x58020000
 800d6bc:	58020400 	.word	0x58020400
 800d6c0:	58020800 	.word	0x58020800
 800d6c4:	58020c00 	.word	0x58020c00
 800d6c8:	58021000 	.word	0x58021000
 800d6cc:	58021400 	.word	0x58021400
 800d6d0:	58021800 	.word	0x58021800
 800d6d4:	58021c00 	.word	0x58021c00
 800d6d8:	58022000 	.word	0x58022000
 800d6dc:	58022400 	.word	0x58022400

0800d6e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	691a      	ldr	r2, [r3, #16]
 800d6f0:	887b      	ldrh	r3, [r7, #2]
 800d6f2:	4013      	ands	r3, r2
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d002      	beq.n	800d6fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	73fb      	strb	r3, [r7, #15]
 800d6fc:	e001      	b.n	800d702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d6fe:	2300      	movs	r3, #0
 800d700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d702:	7bfb      	ldrb	r3, [r7, #15]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3714      	adds	r7, #20
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr

0800d710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	460b      	mov	r3, r1
 800d71a:	807b      	strh	r3, [r7, #2]
 800d71c:	4613      	mov	r3, r2
 800d71e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d720:	787b      	ldrb	r3, [r7, #1]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d003      	beq.n	800d72e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d726:	887a      	ldrh	r2, [r7, #2]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800d72c:	e003      	b.n	800d736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d72e:	887b      	ldrh	r3, [r7, #2]
 800d730:	041a      	lsls	r2, r3, #16
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	619a      	str	r2, [r3, #24]
}
 800d736:	bf00      	nop
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
	...

0800d744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d101      	bne.n	800d756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e08b      	b.n	800d86e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d106      	bne.n	800d770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 f8b5 	bl	800d8da <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2224      	movs	r2, #36	@ 0x24
 800d774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f022 0201 	bic.w	r2, r2, #1
 800d786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	685a      	ldr	r2, [r3, #4]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800d794:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	689a      	ldr	r2, [r3, #8]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d7a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d107      	bne.n	800d7be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	689a      	ldr	r2, [r3, #8]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d7ba:	609a      	str	r2, [r3, #8]
 800d7bc:	e006      	b.n	800d7cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	689a      	ldr	r2, [r3, #8]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800d7ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d108      	bne.n	800d7e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	685a      	ldr	r2, [r3, #4]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d7e2:	605a      	str	r2, [r3, #4]
 800d7e4:	e007      	b.n	800d7f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	685a      	ldr	r2, [r3, #4]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d7f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6859      	ldr	r1, [r3, #4]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	4b1d      	ldr	r3, [pc, #116]	@ (800d878 <HAL_I2C_Init+0x134>)
 800d802:	430b      	orrs	r3, r1
 800d804:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68da      	ldr	r2, [r3, #12]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d814:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	691a      	ldr	r2, [r3, #16]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	695b      	ldr	r3, [r3, #20]
 800d81e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	699b      	ldr	r3, [r3, #24]
 800d826:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	430a      	orrs	r2, r1
 800d82e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	69d9      	ldr	r1, [r3, #28]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a1a      	ldr	r2, [r3, #32]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	430a      	orrs	r2, r1
 800d83e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f042 0201 	orr.w	r2, r2, #1
 800d84e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2220      	movs	r2, #32
 800d85a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800d86c:	2300      	movs	r3, #0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3708      	adds	r7, #8
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	02008000 	.word	0x02008000

0800d87c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d101      	bne.n	800d88e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e021      	b.n	800d8d2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2224      	movs	r2, #36	@ 0x24
 800d892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f022 0201 	bic.w	r2, r2, #1
 800d8a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 f821 	bl	800d8ee <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d8da:	b480      	push	{r7}
 800d8dc:	b083      	sub	sp, #12
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d8e2:	bf00      	nop
 800d8e4:	370c      	adds	r7, #12
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr

0800d8ee <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d8ee:	b480      	push	{r7}
 800d8f0:	b083      	sub	sp, #12
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d8f6:	bf00      	nop
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr
	...

0800d904 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b088      	sub	sp, #32
 800d908:	af02      	add	r7, sp, #8
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	4608      	mov	r0, r1
 800d90e:	4611      	mov	r1, r2
 800d910:	461a      	mov	r2, r3
 800d912:	4603      	mov	r3, r0
 800d914:	817b      	strh	r3, [r7, #10]
 800d916:	460b      	mov	r3, r1
 800d918:	813b      	strh	r3, [r7, #8]
 800d91a:	4613      	mov	r3, r2
 800d91c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b20      	cmp	r3, #32
 800d928:	f040 80f9 	bne.w	800db1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d92c:	6a3b      	ldr	r3, [r7, #32]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d002      	beq.n	800d938 <HAL_I2C_Mem_Write+0x34>
 800d932:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d934:	2b00      	cmp	r3, #0
 800d936:	d105      	bne.n	800d944 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d93e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e0ed      	b.n	800db20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d101      	bne.n	800d952 <HAL_I2C_Mem_Write+0x4e>
 800d94e:	2302      	movs	r3, #2
 800d950:	e0e6      	b.n	800db20 <HAL_I2C_Mem_Write+0x21c>
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2201      	movs	r2, #1
 800d956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d95a:	f7fb f803 	bl	8008964 <HAL_GetTick>
 800d95e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	2319      	movs	r3, #25
 800d966:	2201      	movs	r2, #1
 800d968:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f000 fadd 	bl	800df2c <I2C_WaitOnFlagUntilTimeout>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800d978:	2301      	movs	r3, #1
 800d97a:	e0d1      	b.n	800db20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2221      	movs	r2, #33	@ 0x21
 800d980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2240      	movs	r2, #64	@ 0x40
 800d988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6a3a      	ldr	r2, [r7, #32]
 800d996:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d99c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d9a4:	88f8      	ldrh	r0, [r7, #6]
 800d9a6:	893a      	ldrh	r2, [r7, #8]
 800d9a8:	8979      	ldrh	r1, [r7, #10]
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	9301      	str	r3, [sp, #4]
 800d9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f000 f9ed 	bl	800dd94 <I2C_RequestMemoryWrite>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d005      	beq.n	800d9cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e0a9      	b.n	800db20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	2bff      	cmp	r3, #255	@ 0xff
 800d9d4:	d90e      	bls.n	800d9f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	22ff      	movs	r2, #255	@ 0xff
 800d9da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9e0:	b2da      	uxtb	r2, r3
 800d9e2:	8979      	ldrh	r1, [r7, #10]
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f000 fc61 	bl	800e2b4 <I2C_TransferConfig>
 800d9f2:	e00f      	b.n	800da14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da02:	b2da      	uxtb	r2, r3
 800da04:	8979      	ldrh	r1, [r7, #10]
 800da06:	2300      	movs	r3, #0
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f000 fc50 	bl	800e2b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da14:	697a      	ldr	r2, [r7, #20]
 800da16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f000 fae0 	bl	800dfde <I2C_WaitOnTXISFlagUntilTimeout>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800da24:	2301      	movs	r3, #1
 800da26:	e07b      	b.n	800db20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da2c:	781a      	ldrb	r2, [r3, #0]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da38:	1c5a      	adds	r2, r3, #1
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da42:	b29b      	uxth	r3, r3
 800da44:	3b01      	subs	r3, #1
 800da46:	b29a      	uxth	r2, r3
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da50:	3b01      	subs	r3, #1
 800da52:	b29a      	uxth	r2, r3
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d034      	beq.n	800dacc <HAL_I2C_Mem_Write+0x1c8>
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da66:	2b00      	cmp	r3, #0
 800da68:	d130      	bne.n	800dacc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da70:	2200      	movs	r2, #0
 800da72:	2180      	movs	r1, #128	@ 0x80
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f000 fa59 	bl	800df2c <I2C_WaitOnFlagUntilTimeout>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d001      	beq.n	800da84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800da80:	2301      	movs	r3, #1
 800da82:	e04d      	b.n	800db20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da88:	b29b      	uxth	r3, r3
 800da8a:	2bff      	cmp	r3, #255	@ 0xff
 800da8c:	d90e      	bls.n	800daac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	22ff      	movs	r2, #255	@ 0xff
 800da92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	8979      	ldrh	r1, [r7, #10]
 800da9c:	2300      	movs	r3, #0
 800da9e:	9300      	str	r3, [sp, #0]
 800daa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800daa4:	68f8      	ldr	r0, [r7, #12]
 800daa6:	f000 fc05 	bl	800e2b4 <I2C_TransferConfig>
 800daaa:	e00f      	b.n	800dacc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dab0:	b29a      	uxth	r2, r3
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	8979      	ldrh	r1, [r7, #10]
 800dabe:	2300      	movs	r3, #0
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f000 fbf4 	bl	800e2b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d19e      	bne.n	800da14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dad6:	697a      	ldr	r2, [r7, #20]
 800dad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f000 fac6 	bl	800e06c <I2C_WaitOnSTOPFlagUntilTimeout>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d001      	beq.n	800daea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800dae6:	2301      	movs	r3, #1
 800dae8:	e01a      	b.n	800db20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2220      	movs	r2, #32
 800daf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	6859      	ldr	r1, [r3, #4]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	4b0a      	ldr	r3, [pc, #40]	@ (800db28 <HAL_I2C_Mem_Write+0x224>)
 800dafe:	400b      	ands	r3, r1
 800db00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2220      	movs	r2, #32
 800db06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2200      	movs	r2, #0
 800db16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800db1a:	2300      	movs	r3, #0
 800db1c:	e000      	b.n	800db20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800db1e:	2302      	movs	r3, #2
  }
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	fe00e800 	.word	0xfe00e800

0800db2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b088      	sub	sp, #32
 800db30:	af02      	add	r7, sp, #8
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	4608      	mov	r0, r1
 800db36:	4611      	mov	r1, r2
 800db38:	461a      	mov	r2, r3
 800db3a:	4603      	mov	r3, r0
 800db3c:	817b      	strh	r3, [r7, #10]
 800db3e:	460b      	mov	r3, r1
 800db40:	813b      	strh	r3, [r7, #8]
 800db42:	4613      	mov	r3, r2
 800db44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	2b20      	cmp	r3, #32
 800db50:	f040 80fd 	bne.w	800dd4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800db54:	6a3b      	ldr	r3, [r7, #32]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d002      	beq.n	800db60 <HAL_I2C_Mem_Read+0x34>
 800db5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d105      	bne.n	800db6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800db68:	2301      	movs	r3, #1
 800db6a:	e0f1      	b.n	800dd50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800db72:	2b01      	cmp	r3, #1
 800db74:	d101      	bne.n	800db7a <HAL_I2C_Mem_Read+0x4e>
 800db76:	2302      	movs	r3, #2
 800db78:	e0ea      	b.n	800dd50 <HAL_I2C_Mem_Read+0x224>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800db82:	f7fa feef 	bl	8008964 <HAL_GetTick>
 800db86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	2319      	movs	r3, #25
 800db8e:	2201      	movs	r2, #1
 800db90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f000 f9c9 	bl	800df2c <I2C_WaitOnFlagUntilTimeout>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e0d5      	b.n	800dd50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2222      	movs	r2, #34	@ 0x22
 800dba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2240      	movs	r2, #64	@ 0x40
 800dbb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6a3a      	ldr	r2, [r7, #32]
 800dbbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dbc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dbcc:	88f8      	ldrh	r0, [r7, #6]
 800dbce:	893a      	ldrh	r2, [r7, #8]
 800dbd0:	8979      	ldrh	r1, [r7, #10]
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	9301      	str	r3, [sp, #4]
 800dbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	4603      	mov	r3, r0
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f000 f92d 	bl	800de3c <I2C_RequestMemoryRead>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d005      	beq.n	800dbf4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e0ad      	b.n	800dd50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	2bff      	cmp	r3, #255	@ 0xff
 800dbfc:	d90e      	bls.n	800dc1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	22ff      	movs	r2, #255	@ 0xff
 800dc02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	8979      	ldrh	r1, [r7, #10]
 800dc0c:	4b52      	ldr	r3, [pc, #328]	@ (800dd58 <HAL_I2C_Mem_Read+0x22c>)
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 fb4d 	bl	800e2b4 <I2C_TransferConfig>
 800dc1a:	e00f      	b.n	800dc3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	8979      	ldrh	r1, [r7, #10]
 800dc2e:	4b4a      	ldr	r3, [pc, #296]	@ (800dd58 <HAL_I2C_Mem_Read+0x22c>)
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f000 fb3c 	bl	800e2b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc42:	2200      	movs	r2, #0
 800dc44:	2104      	movs	r1, #4
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	f000 f970 	bl	800df2c <I2C_WaitOnFlagUntilTimeout>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d001      	beq.n	800dc56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800dc52:	2301      	movs	r3, #1
 800dc54:	e07c      	b.n	800dd50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc60:	b2d2      	uxtb	r2, r2
 800dc62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc68:	1c5a      	adds	r2, r3, #1
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc72:	3b01      	subs	r3, #1
 800dc74:	b29a      	uxth	r2, r3
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	3b01      	subs	r3, #1
 800dc82:	b29a      	uxth	r2, r3
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d034      	beq.n	800dcfc <HAL_I2C_Mem_Read+0x1d0>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d130      	bne.n	800dcfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dca0:	2200      	movs	r2, #0
 800dca2:	2180      	movs	r1, #128	@ 0x80
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f000 f941 	bl	800df2c <I2C_WaitOnFlagUntilTimeout>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d001      	beq.n	800dcb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e04d      	b.n	800dd50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	2bff      	cmp	r3, #255	@ 0xff
 800dcbc:	d90e      	bls.n	800dcdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	22ff      	movs	r2, #255	@ 0xff
 800dcc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcc8:	b2da      	uxtb	r2, r3
 800dcca:	8979      	ldrh	r1, [r7, #10]
 800dccc:	2300      	movs	r3, #0
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f000 faed 	bl	800e2b4 <I2C_TransferConfig>
 800dcda:	e00f      	b.n	800dcfc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	8979      	ldrh	r1, [r7, #10]
 800dcee:	2300      	movs	r3, #0
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f000 fadc 	bl	800e2b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d19a      	bne.n	800dc3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dd06:	697a      	ldr	r2, [r7, #20]
 800dd08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f000 f9ae 	bl	800e06c <I2C_WaitOnSTOPFlagUntilTimeout>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800dd16:	2301      	movs	r3, #1
 800dd18:	e01a      	b.n	800dd50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2220      	movs	r2, #32
 800dd20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	6859      	ldr	r1, [r3, #4]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	4b0b      	ldr	r3, [pc, #44]	@ (800dd5c <HAL_I2C_Mem_Read+0x230>)
 800dd2e:	400b      	ands	r3, r1
 800dd30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2220      	movs	r2, #32
 800dd36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	e000      	b.n	800dd50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800dd4e:	2302      	movs	r3, #2
  }
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	80002400 	.word	0x80002400
 800dd5c:	fe00e800 	.word	0xfe00e800

0800dd60 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dd6e:	b2db      	uxtb	r3, r3
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b086      	sub	sp, #24
 800dd98:	af02      	add	r7, sp, #8
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	4608      	mov	r0, r1
 800dd9e:	4611      	mov	r1, r2
 800dda0:	461a      	mov	r2, r3
 800dda2:	4603      	mov	r3, r0
 800dda4:	817b      	strh	r3, [r7, #10]
 800dda6:	460b      	mov	r3, r1
 800dda8:	813b      	strh	r3, [r7, #8]
 800ddaa:	4613      	mov	r3, r2
 800ddac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ddae:	88fb      	ldrh	r3, [r7, #6]
 800ddb0:	b2da      	uxtb	r2, r3
 800ddb2:	8979      	ldrh	r1, [r7, #10]
 800ddb4:	4b20      	ldr	r3, [pc, #128]	@ (800de38 <I2C_RequestMemoryWrite+0xa4>)
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f000 fa79 	bl	800e2b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ddc2:	69fa      	ldr	r2, [r7, #28]
 800ddc4:	69b9      	ldr	r1, [r7, #24]
 800ddc6:	68f8      	ldr	r0, [r7, #12]
 800ddc8:	f000 f909 	bl	800dfde <I2C_WaitOnTXISFlagUntilTimeout>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e02c      	b.n	800de30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ddd6:	88fb      	ldrh	r3, [r7, #6]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d105      	bne.n	800dde8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800dddc:	893b      	ldrh	r3, [r7, #8]
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	629a      	str	r2, [r3, #40]	@ 0x28
 800dde6:	e015      	b.n	800de14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800dde8:	893b      	ldrh	r3, [r7, #8]
 800ddea:	0a1b      	lsrs	r3, r3, #8
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	b2da      	uxtb	r2, r3
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ddf6:	69fa      	ldr	r2, [r7, #28]
 800ddf8:	69b9      	ldr	r1, [r7, #24]
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	f000 f8ef 	bl	800dfde <I2C_WaitOnTXISFlagUntilTimeout>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d001      	beq.n	800de0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e012      	b.n	800de30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800de0a:	893b      	ldrh	r3, [r7, #8]
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	2200      	movs	r2, #0
 800de1c:	2180      	movs	r1, #128	@ 0x80
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f000 f884 	bl	800df2c <I2C_WaitOnFlagUntilTimeout>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	e000      	b.n	800de30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3710      	adds	r7, #16
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	80002000 	.word	0x80002000

0800de3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af02      	add	r7, sp, #8
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	4608      	mov	r0, r1
 800de46:	4611      	mov	r1, r2
 800de48:	461a      	mov	r2, r3
 800de4a:	4603      	mov	r3, r0
 800de4c:	817b      	strh	r3, [r7, #10]
 800de4e:	460b      	mov	r3, r1
 800de50:	813b      	strh	r3, [r7, #8]
 800de52:	4613      	mov	r3, r2
 800de54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800de56:	88fb      	ldrh	r3, [r7, #6]
 800de58:	b2da      	uxtb	r2, r3
 800de5a:	8979      	ldrh	r1, [r7, #10]
 800de5c:	4b20      	ldr	r3, [pc, #128]	@ (800dee0 <I2C_RequestMemoryRead+0xa4>)
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	2300      	movs	r3, #0
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f000 fa26 	bl	800e2b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de68:	69fa      	ldr	r2, [r7, #28]
 800de6a:	69b9      	ldr	r1, [r7, #24]
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f000 f8b6 	bl	800dfde <I2C_WaitOnTXISFlagUntilTimeout>
 800de72:	4603      	mov	r3, r0
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800de78:	2301      	movs	r3, #1
 800de7a:	e02c      	b.n	800ded6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800de7c:	88fb      	ldrh	r3, [r7, #6]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d105      	bne.n	800de8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800de82:	893b      	ldrh	r3, [r7, #8]
 800de84:	b2da      	uxtb	r2, r3
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	629a      	str	r2, [r3, #40]	@ 0x28
 800de8c:	e015      	b.n	800deba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800de8e:	893b      	ldrh	r3, [r7, #8]
 800de90:	0a1b      	lsrs	r3, r3, #8
 800de92:	b29b      	uxth	r3, r3
 800de94:	b2da      	uxtb	r2, r3
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de9c:	69fa      	ldr	r2, [r7, #28]
 800de9e:	69b9      	ldr	r1, [r7, #24]
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f000 f89c 	bl	800dfde <I2C_WaitOnTXISFlagUntilTimeout>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d001      	beq.n	800deb0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800deac:	2301      	movs	r3, #1
 800deae:	e012      	b.n	800ded6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800deb0:	893b      	ldrh	r3, [r7, #8]
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	2200      	movs	r2, #0
 800dec2:	2140      	movs	r1, #64	@ 0x40
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f000 f831 	bl	800df2c <I2C_WaitOnFlagUntilTimeout>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ded0:	2301      	movs	r3, #1
 800ded2:	e000      	b.n	800ded6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	80002000 	.word	0x80002000

0800dee4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	699b      	ldr	r3, [r3, #24]
 800def2:	f003 0302 	and.w	r3, r3, #2
 800def6:	2b02      	cmp	r3, #2
 800def8:	d103      	bne.n	800df02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2200      	movs	r2, #0
 800df00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	699b      	ldr	r3, [r3, #24]
 800df08:	f003 0301 	and.w	r3, r3, #1
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d007      	beq.n	800df20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	699a      	ldr	r2, [r3, #24]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f042 0201 	orr.w	r2, r2, #1
 800df1e:	619a      	str	r2, [r3, #24]
  }
}
 800df20:	bf00      	nop
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	603b      	str	r3, [r7, #0]
 800df38:	4613      	mov	r3, r2
 800df3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800df3c:	e03b      	b.n	800dfb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800df3e:	69ba      	ldr	r2, [r7, #24]
 800df40:	6839      	ldr	r1, [r7, #0]
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f000 f8d6 	bl	800e0f4 <I2C_IsErrorOccurred>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d001      	beq.n	800df52 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	e041      	b.n	800dfd6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df58:	d02d      	beq.n	800dfb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df5a:	f7fa fd03 	bl	8008964 <HAL_GetTick>
 800df5e:	4602      	mov	r2, r0
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	683a      	ldr	r2, [r7, #0]
 800df66:	429a      	cmp	r2, r3
 800df68:	d302      	bcc.n	800df70 <I2C_WaitOnFlagUntilTimeout+0x44>
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d122      	bne.n	800dfb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	699a      	ldr	r2, [r3, #24]
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	4013      	ands	r3, r2
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	bf0c      	ite	eq
 800df80:	2301      	moveq	r3, #1
 800df82:	2300      	movne	r3, #0
 800df84:	b2db      	uxtb	r3, r3
 800df86:	461a      	mov	r2, r3
 800df88:	79fb      	ldrb	r3, [r7, #7]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d113      	bne.n	800dfb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df92:	f043 0220 	orr.w	r2, r3, #32
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2220      	movs	r2, #32
 800df9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2200      	movs	r2, #0
 800dfae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e00f      	b.n	800dfd6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	699a      	ldr	r2, [r3, #24]
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	4013      	ands	r3, r2
 800dfc0:	68ba      	ldr	r2, [r7, #8]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	bf0c      	ite	eq
 800dfc6:	2301      	moveq	r3, #1
 800dfc8:	2300      	movne	r3, #0
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	461a      	mov	r2, r3
 800dfce:	79fb      	ldrb	r3, [r7, #7]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d0b4      	beq.n	800df3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	60f8      	str	r0, [r7, #12]
 800dfe6:	60b9      	str	r1, [r7, #8]
 800dfe8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800dfea:	e033      	b.n	800e054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	68b9      	ldr	r1, [r7, #8]
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f000 f87f 	bl	800e0f4 <I2C_IsErrorOccurred>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d001      	beq.n	800e000 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dffc:	2301      	movs	r3, #1
 800dffe:	e031      	b.n	800e064 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e006:	d025      	beq.n	800e054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e008:	f7fa fcac 	bl	8008964 <HAL_GetTick>
 800e00c:	4602      	mov	r2, r0
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	429a      	cmp	r2, r3
 800e016:	d302      	bcc.n	800e01e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d11a      	bne.n	800e054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	699b      	ldr	r3, [r3, #24]
 800e024:	f003 0302 	and.w	r3, r3, #2
 800e028:	2b02      	cmp	r3, #2
 800e02a:	d013      	beq.n	800e054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e030:	f043 0220 	orr.w	r2, r3, #32
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2220      	movs	r2, #32
 800e03c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2200      	movs	r2, #0
 800e044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2200      	movs	r2, #0
 800e04c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e050:	2301      	movs	r3, #1
 800e052:	e007      	b.n	800e064 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	699b      	ldr	r3, [r3, #24]
 800e05a:	f003 0302 	and.w	r3, r3, #2
 800e05e:	2b02      	cmp	r3, #2
 800e060:	d1c4      	bne.n	800dfec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e078:	e02f      	b.n	800e0da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	68b9      	ldr	r1, [r7, #8]
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f000 f838 	bl	800e0f4 <I2C_IsErrorOccurred>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	e02d      	b.n	800e0ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e08e:	f7fa fc69 	bl	8008964 <HAL_GetTick>
 800e092:	4602      	mov	r2, r0
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	1ad3      	subs	r3, r2, r3
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d302      	bcc.n	800e0a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d11a      	bne.n	800e0da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	699b      	ldr	r3, [r3, #24]
 800e0aa:	f003 0320 	and.w	r3, r3, #32
 800e0ae:	2b20      	cmp	r3, #32
 800e0b0:	d013      	beq.n	800e0da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0b6:	f043 0220 	orr.w	r2, r3, #32
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2220      	movs	r2, #32
 800e0c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	e007      	b.n	800e0ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	699b      	ldr	r3, [r3, #24]
 800e0e0:	f003 0320 	and.w	r3, r3, #32
 800e0e4:	2b20      	cmp	r3, #32
 800e0e6:	d1c8      	bne.n	800e07a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b08a      	sub	sp, #40	@ 0x28
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e100:	2300      	movs	r3, #0
 800e102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	699b      	ldr	r3, [r3, #24]
 800e10c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e10e:	2300      	movs	r3, #0
 800e110:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	f003 0310 	and.w	r3, r3, #16
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d068      	beq.n	800e1f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2210      	movs	r2, #16
 800e126:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e128:	e049      	b.n	800e1be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e130:	d045      	beq.n	800e1be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e132:	f7fa fc17 	bl	8008964 <HAL_GetTick>
 800e136:	4602      	mov	r2, r0
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	68ba      	ldr	r2, [r7, #8]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d302      	bcc.n	800e148 <I2C_IsErrorOccurred+0x54>
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d13a      	bne.n	800e1be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e152:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e15a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	699b      	ldr	r3, [r3, #24]
 800e162:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e16a:	d121      	bne.n	800e1b0 <I2C_IsErrorOccurred+0xbc>
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e172:	d01d      	beq.n	800e1b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e174:	7cfb      	ldrb	r3, [r7, #19]
 800e176:	2b20      	cmp	r3, #32
 800e178:	d01a      	beq.n	800e1b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	685a      	ldr	r2, [r3, #4]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e188:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e18a:	f7fa fbeb 	bl	8008964 <HAL_GetTick>
 800e18e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e190:	e00e      	b.n	800e1b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e192:	f7fa fbe7 	bl	8008964 <HAL_GetTick>
 800e196:	4602      	mov	r2, r0
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	2b19      	cmp	r3, #25
 800e19e:	d907      	bls.n	800e1b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800e1a0:	6a3b      	ldr	r3, [r7, #32]
 800e1a2:	f043 0320 	orr.w	r3, r3, #32
 800e1a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800e1ae:	e006      	b.n	800e1be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	699b      	ldr	r3, [r3, #24]
 800e1b6:	f003 0320 	and.w	r3, r3, #32
 800e1ba:	2b20      	cmp	r3, #32
 800e1bc:	d1e9      	bne.n	800e192 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	699b      	ldr	r3, [r3, #24]
 800e1c4:	f003 0320 	and.w	r3, r3, #32
 800e1c8:	2b20      	cmp	r3, #32
 800e1ca:	d003      	beq.n	800e1d4 <I2C_IsErrorOccurred+0xe0>
 800e1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d0aa      	beq.n	800e12a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e1d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d103      	bne.n	800e1e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2220      	movs	r2, #32
 800e1e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e1e4:	6a3b      	ldr	r3, [r7, #32]
 800e1e6:	f043 0304 	orr.w	r3, r3, #4
 800e1ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	699b      	ldr	r3, [r3, #24]
 800e1f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e200:	2b00      	cmp	r3, #0
 800e202:	d00b      	beq.n	800e21c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e204:	6a3b      	ldr	r3, [r7, #32]
 800e206:	f043 0301 	orr.w	r3, r3, #1
 800e20a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e214:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e216:	2301      	movs	r3, #1
 800e218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00b      	beq.n	800e23e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e226:	6a3b      	ldr	r3, [r7, #32]
 800e228:	f043 0308 	orr.w	r3, r3, #8
 800e22c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e236:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e238:	2301      	movs	r3, #1
 800e23a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00b      	beq.n	800e260 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	f043 0302 	orr.w	r3, r3, #2
 800e24e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e258:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800e260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e264:	2b00      	cmp	r3, #0
 800e266:	d01c      	beq.n	800e2a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f7ff fe3b 	bl	800dee4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	6859      	ldr	r1, [r3, #4]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	4b0d      	ldr	r3, [pc, #52]	@ (800e2b0 <I2C_IsErrorOccurred+0x1bc>)
 800e27a:	400b      	ands	r3, r1
 800e27c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e282:	6a3b      	ldr	r3, [r7, #32]
 800e284:	431a      	orrs	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2220      	movs	r2, #32
 800e28e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800e2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3728      	adds	r7, #40	@ 0x28
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	fe00e800 	.word	0xfe00e800

0800e2b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b087      	sub	sp, #28
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	607b      	str	r3, [r7, #4]
 800e2be:	460b      	mov	r3, r1
 800e2c0:	817b      	strh	r3, [r7, #10]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e2c6:	897b      	ldrh	r3, [r7, #10]
 800e2c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e2cc:	7a7b      	ldrb	r3, [r7, #9]
 800e2ce:	041b      	lsls	r3, r3, #16
 800e2d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e2d4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e2da:	6a3b      	ldr	r3, [r7, #32]
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e2e2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	0d5b      	lsrs	r3, r3, #21
 800e2ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800e2f2:	4b08      	ldr	r3, [pc, #32]	@ (800e314 <I2C_TransferConfig+0x60>)
 800e2f4:	430b      	orrs	r3, r1
 800e2f6:	43db      	mvns	r3, r3
 800e2f8:	ea02 0103 	and.w	r1, r2, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	697a      	ldr	r2, [r7, #20]
 800e302:	430a      	orrs	r2, r1
 800e304:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e306:	bf00      	nop
 800e308:	371c      	adds	r7, #28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	03ff63ff 	.word	0x03ff63ff

0800e318 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	2b20      	cmp	r3, #32
 800e32c:	d138      	bne.n	800e3a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e334:	2b01      	cmp	r3, #1
 800e336:	d101      	bne.n	800e33c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e338:	2302      	movs	r3, #2
 800e33a:	e032      	b.n	800e3a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2201      	movs	r2, #1
 800e340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2224      	movs	r2, #36	@ 0x24
 800e348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f022 0201 	bic.w	r2, r2, #1
 800e35a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e36a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	6819      	ldr	r1, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	683a      	ldr	r2, [r7, #0]
 800e378:	430a      	orrs	r2, r1
 800e37a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f042 0201 	orr.w	r2, r2, #1
 800e38a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2220      	movs	r2, #32
 800e390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e39c:	2300      	movs	r3, #0
 800e39e:	e000      	b.n	800e3a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e3a0:	2302      	movs	r3, #2
  }
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	370c      	adds	r7, #12
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr

0800e3ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e3ae:	b480      	push	{r7}
 800e3b0:	b085      	sub	sp, #20
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
 800e3b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	2b20      	cmp	r3, #32
 800e3c2:	d139      	bne.n	800e438 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d101      	bne.n	800e3d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e3ce:	2302      	movs	r3, #2
 800e3d0:	e033      	b.n	800e43a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2224      	movs	r2, #36	@ 0x24
 800e3de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f022 0201 	bic.w	r2, r2, #1
 800e3f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e400:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	021b      	lsls	r3, r3, #8
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	4313      	orrs	r3, r2
 800e40a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	68fa      	ldr	r2, [r7, #12]
 800e412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f042 0201 	orr.w	r2, r2, #1
 800e422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2220      	movs	r2, #32
 800e428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2200      	movs	r2, #0
 800e430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e434:	2300      	movs	r3, #0
 800e436:	e000      	b.n	800e43a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e438:	2302      	movs	r3, #2
  }
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3714      	adds	r7, #20
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr

0800e446 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b084      	sub	sp, #16
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d101      	bne.n	800e458 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800e454:	2301      	movs	r3, #1
 800e456:	e08f      	b.n	800e578 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	2b00      	cmp	r3, #0
 800e462:	d106      	bne.n	800e472 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 f887 	bl	800e580 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2202      	movs	r2, #2
 800e476:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	699a      	ldr	r2, [r3, #24]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800e488:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	6999      	ldr	r1, [r3, #24]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	685a      	ldr	r2, [r3, #4]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	689b      	ldr	r3, [r3, #8]
 800e498:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e49e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	691b      	ldr	r3, [r3, #16]
 800e4a4:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	695b      	ldr	r3, [r3, #20]
 800e4b2:	041b      	lsls	r3, r3, #16
 800e4b4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6999      	ldr	r1, [r3, #24]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	430a      	orrs	r2, r1
 800e4c2:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	69db      	ldr	r3, [r3, #28]
 800e4c8:	041b      	lsls	r3, r3, #16
 800e4ca:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a19      	ldr	r1, [r3, #32]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	430a      	orrs	r2, r1
 800e4d8:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4de:	041b      	lsls	r3, r3, #16
 800e4e0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	68fa      	ldr	r2, [r7, #12]
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f4:	041b      	lsls	r3, r3, #16
 800e4f6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	430a      	orrs	r2, r1
 800e504:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e50c:	021b      	lsls	r3, r3, #8
 800e50e:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e516:	041b      	lsls	r3, r3, #16
 800e518:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800e528:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	4313      	orrs	r3, r2
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800e53c:	431a      	orrs	r2, r3
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	430a      	orrs	r2, r1
 800e544:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f042 0206 	orr.w	r2, r2, #6
 800e554:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	699a      	ldr	r2, [r3, #24]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f042 0201 	orr.w	r2, r2, #1
 800e564:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2200      	movs	r2, #0
 800e56a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2201      	movs	r2, #1
 800e572:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800e576:	2300      	movs	r3, #0
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3710      	adds	r7, #16
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800e588:	bf00      	nop
 800e58a:	370c      	adds	r7, #12
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800e594:	b5b0      	push	{r4, r5, r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d101      	bne.n	800e5ae <HAL_LTDC_ConfigLayer+0x1a>
 800e5aa:	2302      	movs	r3, #2
 800e5ac:	e02c      	b.n	800e608 <HAL_LTDC_ConfigLayer+0x74>
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2202      	movs	r2, #2
 800e5ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2134      	movs	r1, #52	@ 0x34
 800e5c4:	fb01 f303 	mul.w	r3, r1, r3
 800e5c8:	4413      	add	r3, r2
 800e5ca:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	4614      	mov	r4, r2
 800e5d2:	461d      	mov	r5, r3
 800e5d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5e0:	682b      	ldr	r3, [r5, #0]
 800e5e2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	68b9      	ldr	r1, [r7, #8]
 800e5e8:	68f8      	ldr	r0, [r7, #12]
 800e5ea:	f000 f811 	bl	800e610 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2200      	movs	r2, #0
 800e602:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800e606:	2300      	movs	r3, #0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3710      	adds	r7, #16
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bdb0      	pop	{r4, r5, r7, pc}

0800e610 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800e610:	b480      	push	{r7}
 800e612:	b089      	sub	sp, #36	@ 0x24
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	68db      	ldr	r3, [r3, #12]
 800e626:	0c1b      	lsrs	r3, r3, #16
 800e628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e62c:	4413      	add	r3, r2
 800e62e:	041b      	lsls	r3, r3, #16
 800e630:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	461a      	mov	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	01db      	lsls	r3, r3, #7
 800e63c:	4413      	add	r3, r2
 800e63e:	3384      	adds	r3, #132	@ 0x84
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	68fa      	ldr	r2, [r7, #12]
 800e644:	6812      	ldr	r2, [r2, #0]
 800e646:	4611      	mov	r1, r2
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	01d2      	lsls	r2, r2, #7
 800e64c:	440a      	add	r2, r1
 800e64e:	3284      	adds	r2, #132	@ 0x84
 800e650:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800e654:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68db      	ldr	r3, [r3, #12]
 800e660:	0c1b      	lsrs	r3, r3, #16
 800e662:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e666:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e668:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4619      	mov	r1, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	01db      	lsls	r3, r3, #7
 800e674:	440b      	add	r3, r1
 800e676:	3384      	adds	r3, #132	@ 0x84
 800e678:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e67e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	68da      	ldr	r2, [r3, #12]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e68e:	4413      	add	r3, r2
 800e690:	041b      	lsls	r3, r3, #16
 800e692:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	461a      	mov	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	01db      	lsls	r3, r3, #7
 800e69e:	4413      	add	r3, r2
 800e6a0:	3384      	adds	r3, #132	@ 0x84
 800e6a2:	689b      	ldr	r3, [r3, #8]
 800e6a4:	68fa      	ldr	r2, [r7, #12]
 800e6a6:	6812      	ldr	r2, [r2, #0]
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	01d2      	lsls	r2, r2, #7
 800e6ae:	440a      	add	r2, r1
 800e6b0:	3284      	adds	r2, #132	@ 0x84
 800e6b2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800e6b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	689a      	ldr	r2, [r3, #8]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e6c6:	4413      	add	r3, r2
 800e6c8:	1c5a      	adds	r2, r3, #1
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	01db      	lsls	r3, r3, #7
 800e6d4:	440b      	add	r3, r1
 800e6d6:	3384      	adds	r3, #132	@ 0x84
 800e6d8:	4619      	mov	r1, r3
 800e6da:	69fb      	ldr	r3, [r7, #28]
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	01db      	lsls	r3, r3, #7
 800e6ea:	4413      	add	r3, r2
 800e6ec:	3384      	adds	r3, #132	@ 0x84
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	6812      	ldr	r2, [r2, #0]
 800e6f4:	4611      	mov	r1, r2
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	01d2      	lsls	r2, r2, #7
 800e6fa:	440a      	add	r2, r1
 800e6fc:	3284      	adds	r2, #132	@ 0x84
 800e6fe:	f023 0307 	bic.w	r3, r3, #7
 800e702:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	461a      	mov	r2, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	01db      	lsls	r3, r3, #7
 800e70e:	4413      	add	r3, r2
 800e710:	3384      	adds	r3, #132	@ 0x84
 800e712:	461a      	mov	r2, r3
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	691b      	ldr	r3, [r3, #16]
 800e718:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e720:	021b      	lsls	r3, r3, #8
 800e722:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e72a:	041b      	lsls	r3, r3, #16
 800e72c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	699b      	ldr	r3, [r3, #24]
 800e732:	061b      	lsls	r3, r3, #24
 800e734:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e73c:	461a      	mov	r2, r3
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	431a      	orrs	r2, r3
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	431a      	orrs	r2, r3
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4619      	mov	r1, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	01db      	lsls	r3, r3, #7
 800e750:	440b      	add	r3, r1
 800e752:	3384      	adds	r3, #132	@ 0x84
 800e754:	4619      	mov	r1, r3
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	4313      	orrs	r3, r2
 800e75a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	461a      	mov	r2, r3
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	01db      	lsls	r3, r3, #7
 800e766:	4413      	add	r3, r2
 800e768:	3384      	adds	r3, #132	@ 0x84
 800e76a:	695b      	ldr	r3, [r3, #20]
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	6812      	ldr	r2, [r2, #0]
 800e770:	4611      	mov	r1, r2
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	01d2      	lsls	r2, r2, #7
 800e776:	440a      	add	r2, r1
 800e778:	3284      	adds	r2, #132	@ 0x84
 800e77a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e77e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	461a      	mov	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	01db      	lsls	r3, r3, #7
 800e78a:	4413      	add	r3, r2
 800e78c:	3384      	adds	r3, #132	@ 0x84
 800e78e:	461a      	mov	r2, r3
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	695b      	ldr	r3, [r3, #20]
 800e794:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	461a      	mov	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	01db      	lsls	r3, r3, #7
 800e7a0:	4413      	add	r3, r2
 800e7a2:	3384      	adds	r3, #132	@ 0x84
 800e7a4:	69da      	ldr	r2, [r3, #28]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	01db      	lsls	r3, r3, #7
 800e7b0:	440b      	add	r3, r1
 800e7b2:	3384      	adds	r3, #132	@ 0x84
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	4b4f      	ldr	r3, [pc, #316]	@ (800e8f4 <LTDC_SetConfig+0x2e4>)
 800e7b8:	4013      	ands	r3, r2
 800e7ba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	69da      	ldr	r2, [r3, #28]
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	6a1b      	ldr	r3, [r3, #32]
 800e7c4:	68f9      	ldr	r1, [r7, #12]
 800e7c6:	6809      	ldr	r1, [r1, #0]
 800e7c8:	4608      	mov	r0, r1
 800e7ca:	6879      	ldr	r1, [r7, #4]
 800e7cc:	01c9      	lsls	r1, r1, #7
 800e7ce:	4401      	add	r1, r0
 800e7d0:	3184      	adds	r1, #132	@ 0x84
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	01db      	lsls	r3, r3, #7
 800e7e0:	4413      	add	r3, r2
 800e7e2:	3384      	adds	r3, #132	@ 0x84
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7ea:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	691b      	ldr	r3, [r3, #16]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d102      	bne.n	800e7fa <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800e7f4:	2304      	movs	r3, #4
 800e7f6:	61fb      	str	r3, [r7, #28]
 800e7f8:	e01b      	b.n	800e832 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d102      	bne.n	800e808 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800e802:	2303      	movs	r3, #3
 800e804:	61fb      	str	r3, [r7, #28]
 800e806:	e014      	b.n	800e832 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	2b04      	cmp	r3, #4
 800e80e:	d00b      	beq.n	800e828 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800e814:	2b02      	cmp	r3, #2
 800e816:	d007      	beq.n	800e828 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800e81c:	2b03      	cmp	r3, #3
 800e81e:	d003      	beq.n	800e828 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800e824:	2b07      	cmp	r3, #7
 800e826:	d102      	bne.n	800e82e <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800e828:	2302      	movs	r3, #2
 800e82a:	61fb      	str	r3, [r7, #28]
 800e82c:	e001      	b.n	800e832 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800e82e:	2301      	movs	r3, #1
 800e830:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	461a      	mov	r2, r3
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	01db      	lsls	r3, r3, #7
 800e83c:	4413      	add	r3, r2
 800e83e:	3384      	adds	r3, #132	@ 0x84
 800e840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	6812      	ldr	r2, [r2, #0]
 800e846:	4611      	mov	r1, r2
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	01d2      	lsls	r2, r2, #7
 800e84c:	440a      	add	r2, r1
 800e84e:	3284      	adds	r2, #132	@ 0x84
 800e850:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800e854:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e85a:	69fa      	ldr	r2, [r7, #28]
 800e85c:	fb02 f303 	mul.w	r3, r2, r3
 800e860:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	6859      	ldr	r1, [r3, #4]
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	1acb      	subs	r3, r1, r3
 800e86c:	69f9      	ldr	r1, [r7, #28]
 800e86e:	fb01 f303 	mul.w	r3, r1, r3
 800e872:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800e874:	68f9      	ldr	r1, [r7, #12]
 800e876:	6809      	ldr	r1, [r1, #0]
 800e878:	4608      	mov	r0, r1
 800e87a:	6879      	ldr	r1, [r7, #4]
 800e87c:	01c9      	lsls	r1, r1, #7
 800e87e:	4401      	add	r1, r0
 800e880:	3184      	adds	r1, #132	@ 0x84
 800e882:	4313      	orrs	r3, r2
 800e884:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	461a      	mov	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	01db      	lsls	r3, r3, #7
 800e890:	4413      	add	r3, r2
 800e892:	3384      	adds	r3, #132	@ 0x84
 800e894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4619      	mov	r1, r3
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	01db      	lsls	r3, r3, #7
 800e8a0:	440b      	add	r3, r1
 800e8a2:	3384      	adds	r3, #132	@ 0x84
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4b14      	ldr	r3, [pc, #80]	@ (800e8f8 <LTDC_SetConfig+0x2e8>)
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	01db      	lsls	r3, r3, #7
 800e8b6:	4413      	add	r3, r2
 800e8b8:	3384      	adds	r3, #132	@ 0x84
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8c0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	01db      	lsls	r3, r3, #7
 800e8cc:	4413      	add	r3, r2
 800e8ce:	3384      	adds	r3, #132	@ 0x84
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	6812      	ldr	r2, [r2, #0]
 800e8d6:	4611      	mov	r1, r2
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	01d2      	lsls	r2, r2, #7
 800e8dc:	440a      	add	r2, r1
 800e8de:	3284      	adds	r2, #132	@ 0x84
 800e8e0:	f043 0301 	orr.w	r3, r3, #1
 800e8e4:	6013      	str	r3, [r2, #0]
}
 800e8e6:	bf00      	nop
 800e8e8:	3724      	adds	r7, #36	@ 0x24
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	fffff8f8 	.word	0xfffff8f8
 800e8f8:	fffff800 	.word	0xfffff800

0800e8fc <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e904:	f7fa f82e 	bl	8008964 <HAL_GetTick>
 800e908:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d101      	bne.n	800e914 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800e910:	2301      	movs	r3, #1
 800e912:	e03b      	b.n	800e98c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2202      	movs	r2, #2
 800e920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	68da      	ldr	r2, [r3, #12]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f022 0201 	bic.w	r2, r2, #1
 800e932:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e934:	e00f      	b.n	800e956 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800e936:	f7fa f815 	bl	8008964 <HAL_GetTick>
 800e93a:	4602      	mov	r2, r0
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	2b05      	cmp	r3, #5
 800e942:	d908      	bls.n	800e956 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2240      	movs	r2, #64	@ 0x40
 800e948:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2203      	movs	r2, #3
 800e94e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800e952:	2301      	movs	r3, #1
 800e954:	e01a      	b.n	800e98c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	f003 0301 	and.w	r3, r3, #1
 800e960:	2b00      	cmp	r3, #0
 800e962:	d1e8      	bne.n	800e936 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 f9c1 	bl	800ecec <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2201      	movs	r2, #1
 800e986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e98a:	2300      	movs	r3, #0
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3710      	adds	r7, #16
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d101      	bne.n	800e9a6 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e048      	b.n	800ea38 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	68da      	ldr	r2, [r3, #12]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f022 0201 	bic.w	r2, r2, #1
 800e9b4:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2200      	movs	r2, #0
 800ea04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	221f      	movs	r2, #31
 800ea0c:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2200      	movs	r2, #0
 800ea24:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ea36:	2300      	movs	r3, #0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b086      	sub	sp, #24
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ea50:	4b91      	ldr	r3, [pc, #580]	@ (800ec98 <HAL_MDMA_IRQHandler+0x254>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a91      	ldr	r2, [pc, #580]	@ (800ec9c <HAL_MDMA_IRQHandler+0x258>)
 800ea56:	fba2 2303 	umull	r2, r3, r2, r3
 800ea5a:	0a9b      	lsrs	r3, r3, #10
 800ea5c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	461a      	mov	r2, r3
 800ea64:	4b8e      	ldr	r3, [pc, #568]	@ (800eca0 <HAL_MDMA_IRQHandler+0x25c>)
 800ea66:	4413      	add	r3, r2
 800ea68:	099b      	lsrs	r3, r3, #6
 800ea6a:	f003 031f 	and.w	r3, r3, #31
 800ea6e:	2201      	movs	r2, #1
 800ea70:	fa02 f303 	lsl.w	r3, r2, r3
 800ea74:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800ea76:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	4013      	ands	r3, r2
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f000 812d 	beq.w	800ece0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f003 0301 	and.w	r3, r3, #1
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d054      	beq.n	800eb3e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	f003 0302 	and.w	r3, r3, #2
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d04d      	beq.n	800eb3e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	68da      	ldr	r2, [r3, #12]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f022 0202 	bic.w	r2, r2, #2
 800eab0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	689b      	ldr	r3, [r3, #8]
 800eab8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d106      	bne.n	800ead2 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eac8:	f043 0201 	orr.w	r2, r3, #1
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	669a      	str	r2, [r3, #104]	@ 0x68
 800ead0:	e005      	b.n	800eade <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ead6:	f043 0202 	orr.w	r2, r3, #2
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d005      	beq.n	800eaf4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eaec:	f043 0204 	orr.w	r2, r3, #4
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d005      	beq.n	800eb0a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb02:	f043 0208 	orr.w	r2, r3, #8
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d005      	beq.n	800eb20 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb18:	f043 0210 	orr.w	r2, r3, #16
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d005      	beq.n	800eb36 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb2e:	f043 0220 	orr.w	r2, r3, #32
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f003 0310 	and.w	r3, r3, #16
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d012      	beq.n	800eb72 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	f003 0320 	and.w	r3, r3, #32
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d00b      	beq.n	800eb72 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2210      	movs	r2, #16
 800eb60:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d003      	beq.n	800eb72 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f003 0308 	and.w	r3, r3, #8
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d012      	beq.n	800eba6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	f003 0310 	and.w	r3, r3, #16
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d00b      	beq.n	800eba6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2208      	movs	r2, #8
 800eb94:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d003      	beq.n	800eba6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f003 0304 	and.w	r3, r3, #4
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d012      	beq.n	800ebda <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	f003 0308 	and.w	r3, r3, #8
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00b      	beq.n	800ebda <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	2204      	movs	r2, #4
 800ebc8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d003      	beq.n	800ebda <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f003 0302 	and.w	r3, r3, #2
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d039      	beq.n	800ec5c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	68db      	ldr	r3, [r3, #12]
 800ebee:	f003 0304 	and.w	r3, r3, #4
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d032      	beq.n	800ec5c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68da      	ldr	r2, [r3, #12]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800ec04:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	2b04      	cmp	r3, #4
 800ec10:	d110      	bne.n	800ec34 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2200      	movs	r2, #0
 800ec16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d05c      	beq.n	800ece4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	4798      	blx	r3
        }
        return;
 800ec32:	e057      	b.n	800ece4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2202      	movs	r2, #2
 800ec3a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2201      	movs	r2, #1
 800ec48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d003      	beq.n	800ec5c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d040      	beq.n	800ece6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2204      	movs	r2, #4
 800ec68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	68da      	ldr	r2, [r3, #12]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f022 0201 	bic.w	r2, r2, #1
 800ec7a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	3301      	adds	r3, #1
 800ec80:	60bb      	str	r3, [r7, #8]
 800ec82:	697a      	ldr	r2, [r7, #20]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d30d      	bcc.n	800eca4 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	f003 0301 	and.w	r3, r3, #1
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d1f2      	bne.n	800ec7c <HAL_MDMA_IRQHandler+0x238>
 800ec96:	e006      	b.n	800eca6 <HAL_MDMA_IRQHandler+0x262>
 800ec98:	24000400 	.word	0x24000400
 800ec9c:	1b4e81b5 	.word	0x1b4e81b5
 800eca0:	adffffc0 	.word	0xadffffc0
        break;
 800eca4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	f003 0301 	and.w	r3, r3, #1
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d004      	beq.n	800ecc6 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2203      	movs	r2, #3
 800ecc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ecc4:	e003      	b.n	800ecce <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2201      	movs	r2, #1
 800ecca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d007      	beq.n	800ece6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	4798      	blx	r3
 800ecde:	e002      	b.n	800ece6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800ece0:	bf00      	nop
 800ece2:	e000      	b.n	800ece6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800ece4:	bf00      	nop
    }
  }
}
 800ece6:	3718      	adds	r7, #24
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68d9      	ldr	r1, [r3, #12]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	691a      	ldr	r2, [r3, #16]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	430a      	orrs	r2, r1
 800ed02:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	695a      	ldr	r2, [r3, #20]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	699b      	ldr	r3, [r3, #24]
 800ed0c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ed12:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6a1b      	ldr	r3, [r3, #32]
 800ed18:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ed1e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed24:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ed2a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed30:	3b01      	subs	r3, #1
 800ed32:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800ed34:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ed40:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ed42:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed4c:	d107      	bne.n	800ed5e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	691a      	ldr	r2, [r3, #16]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800ed5c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2200      	movs	r2, #0
 800ed64:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	da11      	bge.n	800ed92 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	695a      	ldr	r2, [r3, #20]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ed7c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed82:	425b      	negs	r3, r3
 800ed84:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	b292      	uxth	r2, r2
 800ed8e:	621a      	str	r2, [r3, #32]
 800ed90:	e006      	b.n	800eda0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed96:	461a      	mov	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	b292      	uxth	r2, r2
 800ed9e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	da15      	bge.n	800edd4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	695a      	ldr	r2, [r3, #20]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800edb6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edbc:	425b      	negs	r3, r3
 800edbe:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	6a19      	ldr	r1, [r3, #32]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	041a      	lsls	r2, r3, #16
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	430a      	orrs	r2, r1
 800edd0:	621a      	str	r2, [r3, #32]
 800edd2:	e009      	b.n	800ede8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	6a19      	ldr	r1, [r3, #32]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edde:	041a      	lsls	r2, r3, #16
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	430a      	orrs	r2, r1
 800ede6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edf0:	d006      	beq.n	800ee00 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685a      	ldr	r2, [r3, #4]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	b2d2      	uxtb	r2, r2
 800edfc:	629a      	str	r2, [r3, #40]	@ 0x28
 800edfe:	e003      	b.n	800ee08 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2200      	movs	r2, #0
 800ee06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ee10:	bf00      	nop
 800ee12:	3714      	adds	r7, #20
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08c      	sub	sp, #48	@ 0x30
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d102      	bne.n	800ee30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	f000 bc48 	b.w	800f6c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f003 0301 	and.w	r3, r3, #1
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f000 8088 	beq.w	800ef4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ee3e:	4b99      	ldr	r3, [pc, #612]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ee40:	691b      	ldr	r3, [r3, #16]
 800ee42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ee46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ee48:	4b96      	ldr	r3, [pc, #600]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ee4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ee4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee50:	2b10      	cmp	r3, #16
 800ee52:	d007      	beq.n	800ee64 <HAL_RCC_OscConfig+0x48>
 800ee54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee56:	2b18      	cmp	r3, #24
 800ee58:	d111      	bne.n	800ee7e <HAL_RCC_OscConfig+0x62>
 800ee5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee5c:	f003 0303 	and.w	r3, r3, #3
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	d10c      	bne.n	800ee7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee64:	4b8f      	ldr	r3, [pc, #572]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d06d      	beq.n	800ef4c <HAL_RCC_OscConfig+0x130>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d169      	bne.n	800ef4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	f000 bc21 	b.w	800f6c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee86:	d106      	bne.n	800ee96 <HAL_RCC_OscConfig+0x7a>
 800ee88:	4b86      	ldr	r3, [pc, #536]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4a85      	ldr	r2, [pc, #532]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ee8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee92:	6013      	str	r3, [r2, #0]
 800ee94:	e02e      	b.n	800eef4 <HAL_RCC_OscConfig+0xd8>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d10c      	bne.n	800eeb8 <HAL_RCC_OscConfig+0x9c>
 800ee9e:	4b81      	ldr	r3, [pc, #516]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a80      	ldr	r2, [pc, #512]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eea8:	6013      	str	r3, [r2, #0]
 800eeaa:	4b7e      	ldr	r3, [pc, #504]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4a7d      	ldr	r2, [pc, #500]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eeb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eeb4:	6013      	str	r3, [r2, #0]
 800eeb6:	e01d      	b.n	800eef4 <HAL_RCC_OscConfig+0xd8>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800eec0:	d10c      	bne.n	800eedc <HAL_RCC_OscConfig+0xc0>
 800eec2:	4b78      	ldr	r3, [pc, #480]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a77      	ldr	r2, [pc, #476]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800eecc:	6013      	str	r3, [r2, #0]
 800eece:	4b75      	ldr	r3, [pc, #468]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a74      	ldr	r2, [pc, #464]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eed8:	6013      	str	r3, [r2, #0]
 800eeda:	e00b      	b.n	800eef4 <HAL_RCC_OscConfig+0xd8>
 800eedc:	4b71      	ldr	r3, [pc, #452]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a70      	ldr	r2, [pc, #448]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eee6:	6013      	str	r3, [r2, #0]
 800eee8:	4b6e      	ldr	r3, [pc, #440]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a6d      	ldr	r2, [pc, #436]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eeee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	685b      	ldr	r3, [r3, #4]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d013      	beq.n	800ef24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eefc:	f7f9 fd32 	bl	8008964 <HAL_GetTick>
 800ef00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ef02:	e008      	b.n	800ef16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ef04:	f7f9 fd2e 	bl	8008964 <HAL_GetTick>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef0c:	1ad3      	subs	r3, r2, r3
 800ef0e:	2b64      	cmp	r3, #100	@ 0x64
 800ef10:	d901      	bls.n	800ef16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ef12:	2303      	movs	r3, #3
 800ef14:	e3d4      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ef16:	4b63      	ldr	r3, [pc, #396]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d0f0      	beq.n	800ef04 <HAL_RCC_OscConfig+0xe8>
 800ef22:	e014      	b.n	800ef4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef24:	f7f9 fd1e 	bl	8008964 <HAL_GetTick>
 800ef28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ef2a:	e008      	b.n	800ef3e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ef2c:	f7f9 fd1a 	bl	8008964 <HAL_GetTick>
 800ef30:	4602      	mov	r2, r0
 800ef32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef34:	1ad3      	subs	r3, r2, r3
 800ef36:	2b64      	cmp	r3, #100	@ 0x64
 800ef38:	d901      	bls.n	800ef3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ef3a:	2303      	movs	r3, #3
 800ef3c:	e3c0      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ef3e:	4b59      	ldr	r3, [pc, #356]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1f0      	bne.n	800ef2c <HAL_RCC_OscConfig+0x110>
 800ef4a:	e000      	b.n	800ef4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ef4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f003 0302 	and.w	r3, r3, #2
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f000 80ca 	beq.w	800f0f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ef5c:	4b51      	ldr	r3, [pc, #324]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ef64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ef66:	4b4f      	ldr	r3, [pc, #316]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ef68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ef6c:	6a3b      	ldr	r3, [r7, #32]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d007      	beq.n	800ef82 <HAL_RCC_OscConfig+0x166>
 800ef72:	6a3b      	ldr	r3, [r7, #32]
 800ef74:	2b18      	cmp	r3, #24
 800ef76:	d156      	bne.n	800f026 <HAL_RCC_OscConfig+0x20a>
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	f003 0303 	and.w	r3, r3, #3
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d151      	bne.n	800f026 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ef82:	4b48      	ldr	r3, [pc, #288]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	f003 0304 	and.w	r3, r3, #4
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d005      	beq.n	800ef9a <HAL_RCC_OscConfig+0x17e>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d101      	bne.n	800ef9a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800ef96:	2301      	movs	r3, #1
 800ef98:	e392      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ef9a:	4b42      	ldr	r3, [pc, #264]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f023 0219 	bic.w	r2, r3, #25
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	493f      	ldr	r1, [pc, #252]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800efa8:	4313      	orrs	r3, r2
 800efaa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800efac:	f7f9 fcda 	bl	8008964 <HAL_GetTick>
 800efb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800efb2:	e008      	b.n	800efc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800efb4:	f7f9 fcd6 	bl	8008964 <HAL_GetTick>
 800efb8:	4602      	mov	r2, r0
 800efba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d901      	bls.n	800efc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800efc2:	2303      	movs	r3, #3
 800efc4:	e37c      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800efc6:	4b37      	ldr	r3, [pc, #220]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f003 0304 	and.w	r3, r3, #4
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d0f0      	beq.n	800efb4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800efd2:	f7f9 fcf7 	bl	80089c4 <HAL_GetREVID>
 800efd6:	4603      	mov	r3, r0
 800efd8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800efdc:	4293      	cmp	r3, r2
 800efde:	d817      	bhi.n	800f010 <HAL_RCC_OscConfig+0x1f4>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	691b      	ldr	r3, [r3, #16]
 800efe4:	2b40      	cmp	r3, #64	@ 0x40
 800efe6:	d108      	bne.n	800effa <HAL_RCC_OscConfig+0x1de>
 800efe8:	4b2e      	ldr	r3, [pc, #184]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800eff0:	4a2c      	ldr	r2, [pc, #176]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800eff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eff6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800eff8:	e07a      	b.n	800f0f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800effa:	4b2a      	ldr	r3, [pc, #168]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	691b      	ldr	r3, [r3, #16]
 800f006:	031b      	lsls	r3, r3, #12
 800f008:	4926      	ldr	r1, [pc, #152]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800f00a:	4313      	orrs	r3, r2
 800f00c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f00e:	e06f      	b.n	800f0f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f010:	4b24      	ldr	r3, [pc, #144]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	691b      	ldr	r3, [r3, #16]
 800f01c:	061b      	lsls	r3, r3, #24
 800f01e:	4921      	ldr	r1, [pc, #132]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800f020:	4313      	orrs	r3, r2
 800f022:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f024:	e064      	b.n	800f0f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d047      	beq.n	800f0be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f02e:	4b1d      	ldr	r3, [pc, #116]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f023 0219 	bic.w	r2, r3, #25
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	491a      	ldr	r1, [pc, #104]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800f03c:	4313      	orrs	r3, r2
 800f03e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f040:	f7f9 fc90 	bl	8008964 <HAL_GetTick>
 800f044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f046:	e008      	b.n	800f05a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f048:	f7f9 fc8c 	bl	8008964 <HAL_GetTick>
 800f04c:	4602      	mov	r2, r0
 800f04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f050:	1ad3      	subs	r3, r2, r3
 800f052:	2b02      	cmp	r3, #2
 800f054:	d901      	bls.n	800f05a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800f056:	2303      	movs	r3, #3
 800f058:	e332      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f05a:	4b12      	ldr	r3, [pc, #72]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f003 0304 	and.w	r3, r3, #4
 800f062:	2b00      	cmp	r3, #0
 800f064:	d0f0      	beq.n	800f048 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f066:	f7f9 fcad 	bl	80089c4 <HAL_GetREVID>
 800f06a:	4603      	mov	r3, r0
 800f06c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f070:	4293      	cmp	r3, r2
 800f072:	d819      	bhi.n	800f0a8 <HAL_RCC_OscConfig+0x28c>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	691b      	ldr	r3, [r3, #16]
 800f078:	2b40      	cmp	r3, #64	@ 0x40
 800f07a:	d108      	bne.n	800f08e <HAL_RCC_OscConfig+0x272>
 800f07c:	4b09      	ldr	r3, [pc, #36]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800f084:	4a07      	ldr	r2, [pc, #28]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800f086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f08a:	6053      	str	r3, [r2, #4]
 800f08c:	e030      	b.n	800f0f0 <HAL_RCC_OscConfig+0x2d4>
 800f08e:	4b05      	ldr	r3, [pc, #20]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	031b      	lsls	r3, r3, #12
 800f09c:	4901      	ldr	r1, [pc, #4]	@ (800f0a4 <HAL_RCC_OscConfig+0x288>)
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	604b      	str	r3, [r1, #4]
 800f0a2:	e025      	b.n	800f0f0 <HAL_RCC_OscConfig+0x2d4>
 800f0a4:	58024400 	.word	0x58024400
 800f0a8:	4b9a      	ldr	r3, [pc, #616]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	691b      	ldr	r3, [r3, #16]
 800f0b4:	061b      	lsls	r3, r3, #24
 800f0b6:	4997      	ldr	r1, [pc, #604]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f0b8:	4313      	orrs	r3, r2
 800f0ba:	604b      	str	r3, [r1, #4]
 800f0bc:	e018      	b.n	800f0f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f0be:	4b95      	ldr	r3, [pc, #596]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	4a94      	ldr	r2, [pc, #592]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f0c4:	f023 0301 	bic.w	r3, r3, #1
 800f0c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0ca:	f7f9 fc4b 	bl	8008964 <HAL_GetTick>
 800f0ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f0d0:	e008      	b.n	800f0e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f0d2:	f7f9 fc47 	bl	8008964 <HAL_GetTick>
 800f0d6:	4602      	mov	r2, r0
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0da:	1ad3      	subs	r3, r2, r3
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d901      	bls.n	800f0e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800f0e0:	2303      	movs	r3, #3
 800f0e2:	e2ed      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f0e4:	4b8b      	ldr	r3, [pc, #556]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d1f0      	bne.n	800f0d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f003 0310 	and.w	r3, r3, #16
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f000 80a9 	beq.w	800f250 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f0fe:	4b85      	ldr	r3, [pc, #532]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f106:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f108:	4b82      	ldr	r3, [pc, #520]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f10a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f10c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	2b08      	cmp	r3, #8
 800f112:	d007      	beq.n	800f124 <HAL_RCC_OscConfig+0x308>
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	2b18      	cmp	r3, #24
 800f118:	d13a      	bne.n	800f190 <HAL_RCC_OscConfig+0x374>
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	f003 0303 	and.w	r3, r3, #3
 800f120:	2b01      	cmp	r3, #1
 800f122:	d135      	bne.n	800f190 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f124:	4b7b      	ldr	r3, [pc, #492]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d005      	beq.n	800f13c <HAL_RCC_OscConfig+0x320>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	69db      	ldr	r3, [r3, #28]
 800f134:	2b80      	cmp	r3, #128	@ 0x80
 800f136:	d001      	beq.n	800f13c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800f138:	2301      	movs	r3, #1
 800f13a:	e2c1      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f13c:	f7f9 fc42 	bl	80089c4 <HAL_GetREVID>
 800f140:	4603      	mov	r3, r0
 800f142:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f146:	4293      	cmp	r3, r2
 800f148:	d817      	bhi.n	800f17a <HAL_RCC_OscConfig+0x35e>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6a1b      	ldr	r3, [r3, #32]
 800f14e:	2b20      	cmp	r3, #32
 800f150:	d108      	bne.n	800f164 <HAL_RCC_OscConfig+0x348>
 800f152:	4b70      	ldr	r3, [pc, #448]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f15a:	4a6e      	ldr	r2, [pc, #440]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f15c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f160:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f162:	e075      	b.n	800f250 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f164:	4b6b      	ldr	r3, [pc, #428]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6a1b      	ldr	r3, [r3, #32]
 800f170:	069b      	lsls	r3, r3, #26
 800f172:	4968      	ldr	r1, [pc, #416]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f174:	4313      	orrs	r3, r2
 800f176:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f178:	e06a      	b.n	800f250 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f17a:	4b66      	ldr	r3, [pc, #408]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6a1b      	ldr	r3, [r3, #32]
 800f186:	061b      	lsls	r3, r3, #24
 800f188:	4962      	ldr	r1, [pc, #392]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f18a:	4313      	orrs	r3, r2
 800f18c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f18e:	e05f      	b.n	800f250 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	69db      	ldr	r3, [r3, #28]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d042      	beq.n	800f21e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f198:	4b5e      	ldr	r3, [pc, #376]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4a5d      	ldr	r2, [pc, #372]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f19e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1a4:	f7f9 fbde 	bl	8008964 <HAL_GetTick>
 800f1a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f1aa:	e008      	b.n	800f1be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f1ac:	f7f9 fbda 	bl	8008964 <HAL_GetTick>
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b4:	1ad3      	subs	r3, r2, r3
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d901      	bls.n	800f1be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800f1ba:	2303      	movs	r3, #3
 800f1bc:	e280      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f1be:	4b55      	ldr	r3, [pc, #340]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d0f0      	beq.n	800f1ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f1ca:	f7f9 fbfb 	bl	80089c4 <HAL_GetREVID>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d817      	bhi.n	800f208 <HAL_RCC_OscConfig+0x3ec>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6a1b      	ldr	r3, [r3, #32]
 800f1dc:	2b20      	cmp	r3, #32
 800f1de:	d108      	bne.n	800f1f2 <HAL_RCC_OscConfig+0x3d6>
 800f1e0:	4b4c      	ldr	r3, [pc, #304]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f1e8:	4a4a      	ldr	r2, [pc, #296]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f1ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f1ee:	6053      	str	r3, [r2, #4]
 800f1f0:	e02e      	b.n	800f250 <HAL_RCC_OscConfig+0x434>
 800f1f2:	4b48      	ldr	r3, [pc, #288]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6a1b      	ldr	r3, [r3, #32]
 800f1fe:	069b      	lsls	r3, r3, #26
 800f200:	4944      	ldr	r1, [pc, #272]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f202:	4313      	orrs	r3, r2
 800f204:	604b      	str	r3, [r1, #4]
 800f206:	e023      	b.n	800f250 <HAL_RCC_OscConfig+0x434>
 800f208:	4b42      	ldr	r3, [pc, #264]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6a1b      	ldr	r3, [r3, #32]
 800f214:	061b      	lsls	r3, r3, #24
 800f216:	493f      	ldr	r1, [pc, #252]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f218:	4313      	orrs	r3, r2
 800f21a:	60cb      	str	r3, [r1, #12]
 800f21c:	e018      	b.n	800f250 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f21e:	4b3d      	ldr	r3, [pc, #244]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4a3c      	ldr	r2, [pc, #240]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f22a:	f7f9 fb9b 	bl	8008964 <HAL_GetTick>
 800f22e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f230:	e008      	b.n	800f244 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f232:	f7f9 fb97 	bl	8008964 <HAL_GetTick>
 800f236:	4602      	mov	r2, r0
 800f238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23a:	1ad3      	subs	r3, r2, r3
 800f23c:	2b02      	cmp	r3, #2
 800f23e:	d901      	bls.n	800f244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f240:	2303      	movs	r3, #3
 800f242:	e23d      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f244:	4b33      	ldr	r3, [pc, #204]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d1f0      	bne.n	800f232 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f003 0308 	and.w	r3, r3, #8
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d036      	beq.n	800f2ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	695b      	ldr	r3, [r3, #20]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d019      	beq.n	800f298 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f264:	4b2b      	ldr	r3, [pc, #172]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f268:	4a2a      	ldr	r2, [pc, #168]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f26a:	f043 0301 	orr.w	r3, r3, #1
 800f26e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f270:	f7f9 fb78 	bl	8008964 <HAL_GetTick>
 800f274:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f276:	e008      	b.n	800f28a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f278:	f7f9 fb74 	bl	8008964 <HAL_GetTick>
 800f27c:	4602      	mov	r2, r0
 800f27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f280:	1ad3      	subs	r3, r2, r3
 800f282:	2b02      	cmp	r3, #2
 800f284:	d901      	bls.n	800f28a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800f286:	2303      	movs	r3, #3
 800f288:	e21a      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f28a:	4b22      	ldr	r3, [pc, #136]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f28c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f28e:	f003 0302 	and.w	r3, r3, #2
 800f292:	2b00      	cmp	r3, #0
 800f294:	d0f0      	beq.n	800f278 <HAL_RCC_OscConfig+0x45c>
 800f296:	e018      	b.n	800f2ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f298:	4b1e      	ldr	r3, [pc, #120]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f29a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f29c:	4a1d      	ldr	r2, [pc, #116]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f29e:	f023 0301 	bic.w	r3, r3, #1
 800f2a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f2a4:	f7f9 fb5e 	bl	8008964 <HAL_GetTick>
 800f2a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f2aa:	e008      	b.n	800f2be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f2ac:	f7f9 fb5a 	bl	8008964 <HAL_GetTick>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	d901      	bls.n	800f2be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	e200      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f2be:	4b15      	ldr	r3, [pc, #84]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f2c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2c2:	f003 0302 	and.w	r3, r3, #2
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d1f0      	bne.n	800f2ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f003 0320 	and.w	r3, r3, #32
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d039      	beq.n	800f34a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	699b      	ldr	r3, [r3, #24]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d01c      	beq.n	800f318 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f2de:	4b0d      	ldr	r3, [pc, #52]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a0c      	ldr	r2, [pc, #48]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f2e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f2e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f2ea:	f7f9 fb3b 	bl	8008964 <HAL_GetTick>
 800f2ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f2f0:	e008      	b.n	800f304 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f2f2:	f7f9 fb37 	bl	8008964 <HAL_GetTick>
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	2b02      	cmp	r3, #2
 800f2fe:	d901      	bls.n	800f304 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800f300:	2303      	movs	r3, #3
 800f302:	e1dd      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f304:	4b03      	ldr	r3, [pc, #12]	@ (800f314 <HAL_RCC_OscConfig+0x4f8>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d0f0      	beq.n	800f2f2 <HAL_RCC_OscConfig+0x4d6>
 800f310:	e01b      	b.n	800f34a <HAL_RCC_OscConfig+0x52e>
 800f312:	bf00      	nop
 800f314:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f318:	4b9b      	ldr	r3, [pc, #620]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4a9a      	ldr	r2, [pc, #616]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f31e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f322:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f324:	f7f9 fb1e 	bl	8008964 <HAL_GetTick>
 800f328:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f32a:	e008      	b.n	800f33e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f32c:	f7f9 fb1a 	bl	8008964 <HAL_GetTick>
 800f330:	4602      	mov	r2, r0
 800f332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f334:	1ad3      	subs	r3, r2, r3
 800f336:	2b02      	cmp	r3, #2
 800f338:	d901      	bls.n	800f33e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800f33a:	2303      	movs	r3, #3
 800f33c:	e1c0      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f33e:	4b92      	ldr	r3, [pc, #584]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1f0      	bne.n	800f32c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f003 0304 	and.w	r3, r3, #4
 800f352:	2b00      	cmp	r3, #0
 800f354:	f000 8081 	beq.w	800f45a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f358:	4b8c      	ldr	r3, [pc, #560]	@ (800f58c <HAL_RCC_OscConfig+0x770>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a8b      	ldr	r2, [pc, #556]	@ (800f58c <HAL_RCC_OscConfig+0x770>)
 800f35e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f362:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f364:	f7f9 fafe 	bl	8008964 <HAL_GetTick>
 800f368:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f36a:	e008      	b.n	800f37e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f36c:	f7f9 fafa 	bl	8008964 <HAL_GetTick>
 800f370:	4602      	mov	r2, r0
 800f372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f374:	1ad3      	subs	r3, r2, r3
 800f376:	2b64      	cmp	r3, #100	@ 0x64
 800f378:	d901      	bls.n	800f37e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800f37a:	2303      	movs	r3, #3
 800f37c:	e1a0      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f37e:	4b83      	ldr	r3, [pc, #524]	@ (800f58c <HAL_RCC_OscConfig+0x770>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f386:	2b00      	cmp	r3, #0
 800f388:	d0f0      	beq.n	800f36c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d106      	bne.n	800f3a0 <HAL_RCC_OscConfig+0x584>
 800f392:	4b7d      	ldr	r3, [pc, #500]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f396:	4a7c      	ldr	r2, [pc, #496]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f398:	f043 0301 	orr.w	r3, r3, #1
 800f39c:	6713      	str	r3, [r2, #112]	@ 0x70
 800f39e:	e02d      	b.n	800f3fc <HAL_RCC_OscConfig+0x5e0>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	689b      	ldr	r3, [r3, #8]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d10c      	bne.n	800f3c2 <HAL_RCC_OscConfig+0x5a6>
 800f3a8:	4b77      	ldr	r3, [pc, #476]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3ac:	4a76      	ldr	r2, [pc, #472]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3ae:	f023 0301 	bic.w	r3, r3, #1
 800f3b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800f3b4:	4b74      	ldr	r3, [pc, #464]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3b8:	4a73      	ldr	r2, [pc, #460]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3ba:	f023 0304 	bic.w	r3, r3, #4
 800f3be:	6713      	str	r3, [r2, #112]	@ 0x70
 800f3c0:	e01c      	b.n	800f3fc <HAL_RCC_OscConfig+0x5e0>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	2b05      	cmp	r3, #5
 800f3c8:	d10c      	bne.n	800f3e4 <HAL_RCC_OscConfig+0x5c8>
 800f3ca:	4b6f      	ldr	r3, [pc, #444]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3ce:	4a6e      	ldr	r2, [pc, #440]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3d0:	f043 0304 	orr.w	r3, r3, #4
 800f3d4:	6713      	str	r3, [r2, #112]	@ 0x70
 800f3d6:	4b6c      	ldr	r3, [pc, #432]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3da:	4a6b      	ldr	r2, [pc, #428]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3dc:	f043 0301 	orr.w	r3, r3, #1
 800f3e0:	6713      	str	r3, [r2, #112]	@ 0x70
 800f3e2:	e00b      	b.n	800f3fc <HAL_RCC_OscConfig+0x5e0>
 800f3e4:	4b68      	ldr	r3, [pc, #416]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3e8:	4a67      	ldr	r2, [pc, #412]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3ea:	f023 0301 	bic.w	r3, r3, #1
 800f3ee:	6713      	str	r3, [r2, #112]	@ 0x70
 800f3f0:	4b65      	ldr	r3, [pc, #404]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3f4:	4a64      	ldr	r2, [pc, #400]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f3f6:	f023 0304 	bic.w	r3, r3, #4
 800f3fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d015      	beq.n	800f430 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f404:	f7f9 faae 	bl	8008964 <HAL_GetTick>
 800f408:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f40a:	e00a      	b.n	800f422 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f40c:	f7f9 faaa 	bl	8008964 <HAL_GetTick>
 800f410:	4602      	mov	r2, r0
 800f412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d901      	bls.n	800f422 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800f41e:	2303      	movs	r3, #3
 800f420:	e14e      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f422:	4b59      	ldr	r3, [pc, #356]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f426:	f003 0302 	and.w	r3, r3, #2
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d0ee      	beq.n	800f40c <HAL_RCC_OscConfig+0x5f0>
 800f42e:	e014      	b.n	800f45a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f430:	f7f9 fa98 	bl	8008964 <HAL_GetTick>
 800f434:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f436:	e00a      	b.n	800f44e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f438:	f7f9 fa94 	bl	8008964 <HAL_GetTick>
 800f43c:	4602      	mov	r2, r0
 800f43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f440:	1ad3      	subs	r3, r2, r3
 800f442:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f446:	4293      	cmp	r3, r2
 800f448:	d901      	bls.n	800f44e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800f44a:	2303      	movs	r3, #3
 800f44c:	e138      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f44e:	4b4e      	ldr	r3, [pc, #312]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f452:	f003 0302 	and.w	r3, r3, #2
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1ee      	bne.n	800f438 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f45e:	2b00      	cmp	r3, #0
 800f460:	f000 812d 	beq.w	800f6be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f464:	4b48      	ldr	r3, [pc, #288]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f466:	691b      	ldr	r3, [r3, #16]
 800f468:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f46c:	2b18      	cmp	r3, #24
 800f46e:	f000 80bd 	beq.w	800f5ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f476:	2b02      	cmp	r3, #2
 800f478:	f040 809e 	bne.w	800f5b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f47c:	4b42      	ldr	r3, [pc, #264]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4a41      	ldr	r2, [pc, #260]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f488:	f7f9 fa6c 	bl	8008964 <HAL_GetTick>
 800f48c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f48e:	e008      	b.n	800f4a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f490:	f7f9 fa68 	bl	8008964 <HAL_GetTick>
 800f494:	4602      	mov	r2, r0
 800f496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f498:	1ad3      	subs	r3, r2, r3
 800f49a:	2b02      	cmp	r3, #2
 800f49c:	d901      	bls.n	800f4a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800f49e:	2303      	movs	r3, #3
 800f4a0:	e10e      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f4a2:	4b39      	ldr	r3, [pc, #228]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1f0      	bne.n	800f490 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f4ae:	4b36      	ldr	r3, [pc, #216]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f4b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f4b2:	4b37      	ldr	r3, [pc, #220]	@ (800f590 <HAL_RCC_OscConfig+0x774>)
 800f4b4:	4013      	ands	r3, r2
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f4be:	0112      	lsls	r2, r2, #4
 800f4c0:	430a      	orrs	r2, r1
 800f4c2:	4931      	ldr	r1, [pc, #196]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f4c4:	4313      	orrs	r3, r2
 800f4c6:	628b      	str	r3, [r1, #40]	@ 0x28
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4cc:	3b01      	subs	r3, #1
 800f4ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4d6:	3b01      	subs	r3, #1
 800f4d8:	025b      	lsls	r3, r3, #9
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	431a      	orrs	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	041b      	lsls	r3, r3, #16
 800f4e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f4ea:	431a      	orrs	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	061b      	lsls	r3, r3, #24
 800f4f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f4f8:	4923      	ldr	r1, [pc, #140]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800f4fe:	4b22      	ldr	r3, [pc, #136]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f502:	4a21      	ldr	r2, [pc, #132]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f504:	f023 0301 	bic.w	r3, r3, #1
 800f508:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f50a:	4b1f      	ldr	r3, [pc, #124]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f50c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f50e:	4b21      	ldr	r3, [pc, #132]	@ (800f594 <HAL_RCC_OscConfig+0x778>)
 800f510:	4013      	ands	r3, r2
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f516:	00d2      	lsls	r2, r2, #3
 800f518:	491b      	ldr	r1, [pc, #108]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f51a:	4313      	orrs	r3, r2
 800f51c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f51e:	4b1a      	ldr	r3, [pc, #104]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f522:	f023 020c 	bic.w	r2, r3, #12
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f52a:	4917      	ldr	r1, [pc, #92]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f52c:	4313      	orrs	r3, r2
 800f52e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f530:	4b15      	ldr	r3, [pc, #84]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f534:	f023 0202 	bic.w	r2, r3, #2
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f53c:	4912      	ldr	r1, [pc, #72]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f53e:	4313      	orrs	r3, r2
 800f540:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f542:	4b11      	ldr	r3, [pc, #68]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f546:	4a10      	ldr	r2, [pc, #64]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f54c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f54e:	4b0e      	ldr	r3, [pc, #56]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f552:	4a0d      	ldr	r2, [pc, #52]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f558:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f55a:	4b0b      	ldr	r3, [pc, #44]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f55e:	4a0a      	ldr	r2, [pc, #40]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800f566:	4b08      	ldr	r3, [pc, #32]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f56a:	4a07      	ldr	r2, [pc, #28]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f56c:	f043 0301 	orr.w	r3, r3, #1
 800f570:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f572:	4b05      	ldr	r3, [pc, #20]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a04      	ldr	r2, [pc, #16]	@ (800f588 <HAL_RCC_OscConfig+0x76c>)
 800f578:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f57c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f57e:	f7f9 f9f1 	bl	8008964 <HAL_GetTick>
 800f582:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f584:	e011      	b.n	800f5aa <HAL_RCC_OscConfig+0x78e>
 800f586:	bf00      	nop
 800f588:	58024400 	.word	0x58024400
 800f58c:	58024800 	.word	0x58024800
 800f590:	fffffc0c 	.word	0xfffffc0c
 800f594:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f598:	f7f9 f9e4 	bl	8008964 <HAL_GetTick>
 800f59c:	4602      	mov	r2, r0
 800f59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	2b02      	cmp	r3, #2
 800f5a4:	d901      	bls.n	800f5aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800f5a6:	2303      	movs	r3, #3
 800f5a8:	e08a      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f5aa:	4b47      	ldr	r3, [pc, #284]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d0f0      	beq.n	800f598 <HAL_RCC_OscConfig+0x77c>
 800f5b6:	e082      	b.n	800f6be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f5b8:	4b43      	ldr	r3, [pc, #268]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4a42      	ldr	r2, [pc, #264]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f5be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f5c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5c4:	f7f9 f9ce 	bl	8008964 <HAL_GetTick>
 800f5c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f5ca:	e008      	b.n	800f5de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f5cc:	f7f9 f9ca 	bl	8008964 <HAL_GetTick>
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d4:	1ad3      	subs	r3, r2, r3
 800f5d6:	2b02      	cmp	r3, #2
 800f5d8:	d901      	bls.n	800f5de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800f5da:	2303      	movs	r3, #3
 800f5dc:	e070      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f5de:	4b3a      	ldr	r3, [pc, #232]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d1f0      	bne.n	800f5cc <HAL_RCC_OscConfig+0x7b0>
 800f5ea:	e068      	b.n	800f6be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800f5ec:	4b36      	ldr	r3, [pc, #216]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800f5f2:	4b35      	ldr	r3, [pc, #212]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d031      	beq.n	800f664 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	f003 0203 	and.w	r2, r3, #3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d12a      	bne.n	800f664 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	091b      	lsrs	r3, r3, #4
 800f612:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d122      	bne.n	800f664 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f628:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d11a      	bne.n	800f664 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	0a5b      	lsrs	r3, r3, #9
 800f632:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f63a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d111      	bne.n	800f664 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	0c1b      	lsrs	r3, r3, #16
 800f644:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f64c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f64e:	429a      	cmp	r2, r3
 800f650:	d108      	bne.n	800f664 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	0e1b      	lsrs	r3, r3, #24
 800f656:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f65e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f660:	429a      	cmp	r2, r3
 800f662:	d001      	beq.n	800f668 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800f664:	2301      	movs	r3, #1
 800f666:	e02b      	b.n	800f6c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800f668:	4b17      	ldr	r3, [pc, #92]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f66c:	08db      	lsrs	r3, r3, #3
 800f66e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f672:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f678:	693a      	ldr	r2, [r7, #16]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d01f      	beq.n	800f6be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800f67e:	4b12      	ldr	r3, [pc, #72]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f682:	4a11      	ldr	r2, [pc, #68]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f684:	f023 0301 	bic.w	r3, r3, #1
 800f688:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f68a:	f7f9 f96b 	bl	8008964 <HAL_GetTick>
 800f68e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800f690:	bf00      	nop
 800f692:	f7f9 f967 	bl	8008964 <HAL_GetTick>
 800f696:	4602      	mov	r2, r0
 800f698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d0f9      	beq.n	800f692 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f69e:	4b0a      	ldr	r3, [pc, #40]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f6a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800f6cc <HAL_RCC_OscConfig+0x8b0>)
 800f6a4:	4013      	ands	r3, r2
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f6aa:	00d2      	lsls	r2, r2, #3
 800f6ac:	4906      	ldr	r1, [pc, #24]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800f6b2:	4b05      	ldr	r3, [pc, #20]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6b6:	4a04      	ldr	r2, [pc, #16]	@ (800f6c8 <HAL_RCC_OscConfig+0x8ac>)
 800f6b8:	f043 0301 	orr.w	r3, r3, #1
 800f6bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3730      	adds	r7, #48	@ 0x30
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	58024400 	.word	0x58024400
 800f6cc:	ffff0007 	.word	0xffff0007

0800f6d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d101      	bne.n	800f6e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	e19c      	b.n	800fa1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f6e4:	4b8a      	ldr	r3, [pc, #552]	@ (800f910 <HAL_RCC_ClockConfig+0x240>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	f003 030f 	and.w	r3, r3, #15
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d910      	bls.n	800f714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f6f2:	4b87      	ldr	r3, [pc, #540]	@ (800f910 <HAL_RCC_ClockConfig+0x240>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f023 020f 	bic.w	r2, r3, #15
 800f6fa:	4985      	ldr	r1, [pc, #532]	@ (800f910 <HAL_RCC_ClockConfig+0x240>)
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f702:	4b83      	ldr	r3, [pc, #524]	@ (800f910 <HAL_RCC_ClockConfig+0x240>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f003 030f 	and.w	r3, r3, #15
 800f70a:	683a      	ldr	r2, [r7, #0]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d001      	beq.n	800f714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f710:	2301      	movs	r3, #1
 800f712:	e184      	b.n	800fa1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f003 0304 	and.w	r3, r3, #4
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d010      	beq.n	800f742 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	691a      	ldr	r2, [r3, #16]
 800f724:	4b7b      	ldr	r3, [pc, #492]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d908      	bls.n	800f742 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f730:	4b78      	ldr	r3, [pc, #480]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f732:	699b      	ldr	r3, [r3, #24]
 800f734:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	691b      	ldr	r3, [r3, #16]
 800f73c:	4975      	ldr	r1, [pc, #468]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f73e:	4313      	orrs	r3, r2
 800f740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f003 0308 	and.w	r3, r3, #8
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d010      	beq.n	800f770 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	695a      	ldr	r2, [r3, #20]
 800f752:	4b70      	ldr	r3, [pc, #448]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f754:	69db      	ldr	r3, [r3, #28]
 800f756:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d908      	bls.n	800f770 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f75e:	4b6d      	ldr	r3, [pc, #436]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f760:	69db      	ldr	r3, [r3, #28]
 800f762:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	695b      	ldr	r3, [r3, #20]
 800f76a:	496a      	ldr	r1, [pc, #424]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f76c:	4313      	orrs	r3, r2
 800f76e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f003 0310 	and.w	r3, r3, #16
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d010      	beq.n	800f79e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	699a      	ldr	r2, [r3, #24]
 800f780:	4b64      	ldr	r3, [pc, #400]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f782:	69db      	ldr	r3, [r3, #28]
 800f784:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f788:	429a      	cmp	r2, r3
 800f78a:	d908      	bls.n	800f79e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f78c:	4b61      	ldr	r3, [pc, #388]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f78e:	69db      	ldr	r3, [r3, #28]
 800f790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	699b      	ldr	r3, [r3, #24]
 800f798:	495e      	ldr	r1, [pc, #376]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f79a:	4313      	orrs	r3, r2
 800f79c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f003 0320 	and.w	r3, r3, #32
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d010      	beq.n	800f7cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	69da      	ldr	r2, [r3, #28]
 800f7ae:	4b59      	ldr	r3, [pc, #356]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f7b0:	6a1b      	ldr	r3, [r3, #32]
 800f7b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d908      	bls.n	800f7cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f7ba:	4b56      	ldr	r3, [pc, #344]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f7bc:	6a1b      	ldr	r3, [r3, #32]
 800f7be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	69db      	ldr	r3, [r3, #28]
 800f7c6:	4953      	ldr	r1, [pc, #332]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f003 0302 	and.w	r3, r3, #2
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d010      	beq.n	800f7fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	68da      	ldr	r2, [r3, #12]
 800f7dc:	4b4d      	ldr	r3, [pc, #308]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f7de:	699b      	ldr	r3, [r3, #24]
 800f7e0:	f003 030f 	and.w	r3, r3, #15
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d908      	bls.n	800f7fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f7e8:	4b4a      	ldr	r3, [pc, #296]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f7ea:	699b      	ldr	r3, [r3, #24]
 800f7ec:	f023 020f 	bic.w	r2, r3, #15
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	4947      	ldr	r1, [pc, #284]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f003 0301 	and.w	r3, r3, #1
 800f802:	2b00      	cmp	r3, #0
 800f804:	d055      	beq.n	800f8b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f806:	4b43      	ldr	r3, [pc, #268]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f808:	699b      	ldr	r3, [r3, #24]
 800f80a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	689b      	ldr	r3, [r3, #8]
 800f812:	4940      	ldr	r1, [pc, #256]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f814:	4313      	orrs	r3, r2
 800f816:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d107      	bne.n	800f830 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f820:	4b3c      	ldr	r3, [pc, #240]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d121      	bne.n	800f870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f82c:	2301      	movs	r3, #1
 800f82e:	e0f6      	b.n	800fa1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	2b03      	cmp	r3, #3
 800f836:	d107      	bne.n	800f848 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f838:	4b36      	ldr	r3, [pc, #216]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f840:	2b00      	cmp	r3, #0
 800f842:	d115      	bne.n	800f870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f844:	2301      	movs	r3, #1
 800f846:	e0ea      	b.n	800fa1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d107      	bne.n	800f860 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f850:	4b30      	ldr	r3, [pc, #192]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d109      	bne.n	800f870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f85c:	2301      	movs	r3, #1
 800f85e:	e0de      	b.n	800fa1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f860:	4b2c      	ldr	r3, [pc, #176]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f003 0304 	and.w	r3, r3, #4
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d101      	bne.n	800f870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f86c:	2301      	movs	r3, #1
 800f86e:	e0d6      	b.n	800fa1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f870:	4b28      	ldr	r3, [pc, #160]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f872:	691b      	ldr	r3, [r3, #16]
 800f874:	f023 0207 	bic.w	r2, r3, #7
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	4925      	ldr	r1, [pc, #148]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f87e:	4313      	orrs	r3, r2
 800f880:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f882:	f7f9 f86f 	bl	8008964 <HAL_GetTick>
 800f886:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f888:	e00a      	b.n	800f8a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f88a:	f7f9 f86b 	bl	8008964 <HAL_GetTick>
 800f88e:	4602      	mov	r2, r0
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f898:	4293      	cmp	r3, r2
 800f89a:	d901      	bls.n	800f8a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800f89c:	2303      	movs	r3, #3
 800f89e:	e0be      	b.n	800fa1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f8a0:	4b1c      	ldr	r3, [pc, #112]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	00db      	lsls	r3, r3, #3
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d1eb      	bne.n	800f88a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f003 0302 	and.w	r3, r3, #2
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d010      	beq.n	800f8e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	68da      	ldr	r2, [r3, #12]
 800f8c2:	4b14      	ldr	r3, [pc, #80]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f8c4:	699b      	ldr	r3, [r3, #24]
 800f8c6:	f003 030f 	and.w	r3, r3, #15
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d208      	bcs.n	800f8e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f8ce:	4b11      	ldr	r3, [pc, #68]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f8d0:	699b      	ldr	r3, [r3, #24]
 800f8d2:	f023 020f 	bic.w	r2, r3, #15
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	490e      	ldr	r1, [pc, #56]	@ (800f914 <HAL_RCC_ClockConfig+0x244>)
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f8e0:	4b0b      	ldr	r3, [pc, #44]	@ (800f910 <HAL_RCC_ClockConfig+0x240>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f003 030f 	and.w	r3, r3, #15
 800f8e8:	683a      	ldr	r2, [r7, #0]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d214      	bcs.n	800f918 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f8ee:	4b08      	ldr	r3, [pc, #32]	@ (800f910 <HAL_RCC_ClockConfig+0x240>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f023 020f 	bic.w	r2, r3, #15
 800f8f6:	4906      	ldr	r1, [pc, #24]	@ (800f910 <HAL_RCC_ClockConfig+0x240>)
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f8fe:	4b04      	ldr	r3, [pc, #16]	@ (800f910 <HAL_RCC_ClockConfig+0x240>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f003 030f 	and.w	r3, r3, #15
 800f906:	683a      	ldr	r2, [r7, #0]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d005      	beq.n	800f918 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800f90c:	2301      	movs	r3, #1
 800f90e:	e086      	b.n	800fa1e <HAL_RCC_ClockConfig+0x34e>
 800f910:	52002000 	.word	0x52002000
 800f914:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f003 0304 	and.w	r3, r3, #4
 800f920:	2b00      	cmp	r3, #0
 800f922:	d010      	beq.n	800f946 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	691a      	ldr	r2, [r3, #16]
 800f928:	4b3f      	ldr	r3, [pc, #252]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f92a:	699b      	ldr	r3, [r3, #24]
 800f92c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f930:	429a      	cmp	r2, r3
 800f932:	d208      	bcs.n	800f946 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f934:	4b3c      	ldr	r3, [pc, #240]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f936:	699b      	ldr	r3, [r3, #24]
 800f938:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	691b      	ldr	r3, [r3, #16]
 800f940:	4939      	ldr	r1, [pc, #228]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f942:	4313      	orrs	r3, r2
 800f944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f003 0308 	and.w	r3, r3, #8
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d010      	beq.n	800f974 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	695a      	ldr	r2, [r3, #20]
 800f956:	4b34      	ldr	r3, [pc, #208]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f958:	69db      	ldr	r3, [r3, #28]
 800f95a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f95e:	429a      	cmp	r2, r3
 800f960:	d208      	bcs.n	800f974 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f962:	4b31      	ldr	r3, [pc, #196]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f964:	69db      	ldr	r3, [r3, #28]
 800f966:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	695b      	ldr	r3, [r3, #20]
 800f96e:	492e      	ldr	r1, [pc, #184]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f970:	4313      	orrs	r3, r2
 800f972:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f003 0310 	and.w	r3, r3, #16
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d010      	beq.n	800f9a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	699a      	ldr	r2, [r3, #24]
 800f984:	4b28      	ldr	r3, [pc, #160]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f986:	69db      	ldr	r3, [r3, #28]
 800f988:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d208      	bcs.n	800f9a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f990:	4b25      	ldr	r3, [pc, #148]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f992:	69db      	ldr	r3, [r3, #28]
 800f994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	699b      	ldr	r3, [r3, #24]
 800f99c:	4922      	ldr	r1, [pc, #136]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f003 0320 	and.w	r3, r3, #32
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d010      	beq.n	800f9d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	69da      	ldr	r2, [r3, #28]
 800f9b2:	4b1d      	ldr	r3, [pc, #116]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f9b4:	6a1b      	ldr	r3, [r3, #32]
 800f9b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d208      	bcs.n	800f9d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f9be:	4b1a      	ldr	r3, [pc, #104]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f9c0:	6a1b      	ldr	r3, [r3, #32]
 800f9c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	69db      	ldr	r3, [r3, #28]
 800f9ca:	4917      	ldr	r1, [pc, #92]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f9d0:	f000 f834 	bl	800fa3c <HAL_RCC_GetSysClockFreq>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	4b14      	ldr	r3, [pc, #80]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f9d8:	699b      	ldr	r3, [r3, #24]
 800f9da:	0a1b      	lsrs	r3, r3, #8
 800f9dc:	f003 030f 	and.w	r3, r3, #15
 800f9e0:	4912      	ldr	r1, [pc, #72]	@ (800fa2c <HAL_RCC_ClockConfig+0x35c>)
 800f9e2:	5ccb      	ldrb	r3, [r1, r3]
 800f9e4:	f003 031f 	and.w	r3, r3, #31
 800f9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800f9ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f9ee:	4b0e      	ldr	r3, [pc, #56]	@ (800fa28 <HAL_RCC_ClockConfig+0x358>)
 800f9f0:	699b      	ldr	r3, [r3, #24]
 800f9f2:	f003 030f 	and.w	r3, r3, #15
 800f9f6:	4a0d      	ldr	r2, [pc, #52]	@ (800fa2c <HAL_RCC_ClockConfig+0x35c>)
 800f9f8:	5cd3      	ldrb	r3, [r2, r3]
 800f9fa:	f003 031f 	and.w	r3, r3, #31
 800f9fe:	693a      	ldr	r2, [r7, #16]
 800fa00:	fa22 f303 	lsr.w	r3, r2, r3
 800fa04:	4a0a      	ldr	r2, [pc, #40]	@ (800fa30 <HAL_RCC_ClockConfig+0x360>)
 800fa06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fa08:	4a0a      	ldr	r2, [pc, #40]	@ (800fa34 <HAL_RCC_ClockConfig+0x364>)
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800fa0e:	4b0a      	ldr	r3, [pc, #40]	@ (800fa38 <HAL_RCC_ClockConfig+0x368>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4618      	mov	r0, r3
 800fa14:	f004 fcfc 	bl	8014410 <HAL_InitTick>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3718      	adds	r7, #24
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	58024400 	.word	0x58024400
 800fa2c:	08018000 	.word	0x08018000
 800fa30:	24000404 	.word	0x24000404
 800fa34:	24000400 	.word	0x24000400
 800fa38:	240005d4 	.word	0x240005d4

0800fa3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b089      	sub	sp, #36	@ 0x24
 800fa40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fa42:	4bb3      	ldr	r3, [pc, #716]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fa44:	691b      	ldr	r3, [r3, #16]
 800fa46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fa4a:	2b18      	cmp	r3, #24
 800fa4c:	f200 8155 	bhi.w	800fcfa <HAL_RCC_GetSysClockFreq+0x2be>
 800fa50:	a201      	add	r2, pc, #4	@ (adr r2, 800fa58 <HAL_RCC_GetSysClockFreq+0x1c>)
 800fa52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa56:	bf00      	nop
 800fa58:	0800fabd 	.word	0x0800fabd
 800fa5c:	0800fcfb 	.word	0x0800fcfb
 800fa60:	0800fcfb 	.word	0x0800fcfb
 800fa64:	0800fcfb 	.word	0x0800fcfb
 800fa68:	0800fcfb 	.word	0x0800fcfb
 800fa6c:	0800fcfb 	.word	0x0800fcfb
 800fa70:	0800fcfb 	.word	0x0800fcfb
 800fa74:	0800fcfb 	.word	0x0800fcfb
 800fa78:	0800fae3 	.word	0x0800fae3
 800fa7c:	0800fcfb 	.word	0x0800fcfb
 800fa80:	0800fcfb 	.word	0x0800fcfb
 800fa84:	0800fcfb 	.word	0x0800fcfb
 800fa88:	0800fcfb 	.word	0x0800fcfb
 800fa8c:	0800fcfb 	.word	0x0800fcfb
 800fa90:	0800fcfb 	.word	0x0800fcfb
 800fa94:	0800fcfb 	.word	0x0800fcfb
 800fa98:	0800fae9 	.word	0x0800fae9
 800fa9c:	0800fcfb 	.word	0x0800fcfb
 800faa0:	0800fcfb 	.word	0x0800fcfb
 800faa4:	0800fcfb 	.word	0x0800fcfb
 800faa8:	0800fcfb 	.word	0x0800fcfb
 800faac:	0800fcfb 	.word	0x0800fcfb
 800fab0:	0800fcfb 	.word	0x0800fcfb
 800fab4:	0800fcfb 	.word	0x0800fcfb
 800fab8:	0800faef 	.word	0x0800faef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fabc:	4b94      	ldr	r3, [pc, #592]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f003 0320 	and.w	r3, r3, #32
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d009      	beq.n	800fadc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fac8:	4b91      	ldr	r3, [pc, #580]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	08db      	lsrs	r3, r3, #3
 800face:	f003 0303 	and.w	r3, r3, #3
 800fad2:	4a90      	ldr	r2, [pc, #576]	@ (800fd14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fad4:	fa22 f303 	lsr.w	r3, r2, r3
 800fad8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800fada:	e111      	b.n	800fd00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fadc:	4b8d      	ldr	r3, [pc, #564]	@ (800fd14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fade:	61bb      	str	r3, [r7, #24]
      break;
 800fae0:	e10e      	b.n	800fd00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800fae2:	4b8d      	ldr	r3, [pc, #564]	@ (800fd18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800fae4:	61bb      	str	r3, [r7, #24]
      break;
 800fae6:	e10b      	b.n	800fd00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800fae8:	4b8c      	ldr	r3, [pc, #560]	@ (800fd1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800faea:	61bb      	str	r3, [r7, #24]
      break;
 800faec:	e108      	b.n	800fd00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800faee:	4b88      	ldr	r3, [pc, #544]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800faf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faf2:	f003 0303 	and.w	r3, r3, #3
 800faf6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800faf8:	4b85      	ldr	r3, [pc, #532]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fafc:	091b      	lsrs	r3, r3, #4
 800fafe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fb02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fb04:	4b82      	ldr	r3, [pc, #520]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fb06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb08:	f003 0301 	and.w	r3, r3, #1
 800fb0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fb0e:	4b80      	ldr	r3, [pc, #512]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fb10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb12:	08db      	lsrs	r3, r3, #3
 800fb14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb18:	68fa      	ldr	r2, [r7, #12]
 800fb1a:	fb02 f303 	mul.w	r3, r2, r3
 800fb1e:	ee07 3a90 	vmov	s15, r3
 800fb22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	f000 80e1 	beq.w	800fcf4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	2b02      	cmp	r3, #2
 800fb36:	f000 8083 	beq.w	800fc40 <HAL_RCC_GetSysClockFreq+0x204>
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	2b02      	cmp	r3, #2
 800fb3e:	f200 80a1 	bhi.w	800fc84 <HAL_RCC_GetSysClockFreq+0x248>
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d003      	beq.n	800fb50 <HAL_RCC_GetSysClockFreq+0x114>
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	d056      	beq.n	800fbfc <HAL_RCC_GetSysClockFreq+0x1c0>
 800fb4e:	e099      	b.n	800fc84 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb50:	4b6f      	ldr	r3, [pc, #444]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	f003 0320 	and.w	r3, r3, #32
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d02d      	beq.n	800fbb8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb5c:	4b6c      	ldr	r3, [pc, #432]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	08db      	lsrs	r3, r3, #3
 800fb62:	f003 0303 	and.w	r3, r3, #3
 800fb66:	4a6b      	ldr	r2, [pc, #428]	@ (800fd14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fb68:	fa22 f303 	lsr.w	r3, r2, r3
 800fb6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	ee07 3a90 	vmov	s15, r3
 800fb74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	ee07 3a90 	vmov	s15, r3
 800fb7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb86:	4b62      	ldr	r3, [pc, #392]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fb88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb8e:	ee07 3a90 	vmov	s15, r3
 800fb92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb96:	ed97 6a02 	vldr	s12, [r7, #8]
 800fb9a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800fd20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fb9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbb2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800fbb6:	e087      	b.n	800fcc8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	ee07 3a90 	vmov	s15, r3
 800fbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbc2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800fd24 <HAL_RCC_GetSysClockFreq+0x2e8>
 800fbc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbca:	4b51      	ldr	r3, [pc, #324]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fbcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbd2:	ee07 3a90 	vmov	s15, r3
 800fbd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbda:	ed97 6a02 	vldr	s12, [r7, #8]
 800fbde:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800fd20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fbe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fbfa:	e065      	b.n	800fcc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	ee07 3a90 	vmov	s15, r3
 800fc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc06:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800fd28 <HAL_RCC_GetSysClockFreq+0x2ec>
 800fc0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc0e:	4b40      	ldr	r3, [pc, #256]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fc10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc16:	ee07 3a90 	vmov	s15, r3
 800fc1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800fc22:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800fd20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fc26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fc3e:	e043      	b.n	800fcc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	ee07 3a90 	vmov	s15, r3
 800fc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc4a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800fd2c <HAL_RCC_GetSysClockFreq+0x2f0>
 800fc4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc52:	4b2f      	ldr	r3, [pc, #188]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fc54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc5a:	ee07 3a90 	vmov	s15, r3
 800fc5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc62:	ed97 6a02 	vldr	s12, [r7, #8]
 800fc66:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800fd20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fc6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fc82:	e021      	b.n	800fcc8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	ee07 3a90 	vmov	s15, r3
 800fc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc8e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800fd28 <HAL_RCC_GetSysClockFreq+0x2ec>
 800fc92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc96:	4b1e      	ldr	r3, [pc, #120]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fc98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc9e:	ee07 3a90 	vmov	s15, r3
 800fca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fca6:	ed97 6a02 	vldr	s12, [r7, #8]
 800fcaa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800fd20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fcae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fcba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fcc6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800fcc8:	4b11      	ldr	r3, [pc, #68]	@ (800fd10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fcca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fccc:	0a5b      	lsrs	r3, r3, #9
 800fcce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	ee07 3a90 	vmov	s15, r3
 800fcdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fce0:	edd7 6a07 	vldr	s13, [r7, #28]
 800fce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcec:	ee17 3a90 	vmov	r3, s15
 800fcf0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800fcf2:	e005      	b.n	800fd00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	61bb      	str	r3, [r7, #24]
      break;
 800fcf8:	e002      	b.n	800fd00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800fcfa:	4b07      	ldr	r3, [pc, #28]	@ (800fd18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800fcfc:	61bb      	str	r3, [r7, #24]
      break;
 800fcfe:	bf00      	nop
  }

  return sysclockfreq;
 800fd00:	69bb      	ldr	r3, [r7, #24]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3724      	adds	r7, #36	@ 0x24
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	58024400 	.word	0x58024400
 800fd14:	03d09000 	.word	0x03d09000
 800fd18:	003d0900 	.word	0x003d0900
 800fd1c:	017d7840 	.word	0x017d7840
 800fd20:	46000000 	.word	0x46000000
 800fd24:	4c742400 	.word	0x4c742400
 800fd28:	4a742400 	.word	0x4a742400
 800fd2c:	4bbebc20 	.word	0x4bbebc20

0800fd30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fd36:	f7ff fe81 	bl	800fa3c <HAL_RCC_GetSysClockFreq>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	4b10      	ldr	r3, [pc, #64]	@ (800fd80 <HAL_RCC_GetHCLKFreq+0x50>)
 800fd3e:	699b      	ldr	r3, [r3, #24]
 800fd40:	0a1b      	lsrs	r3, r3, #8
 800fd42:	f003 030f 	and.w	r3, r3, #15
 800fd46:	490f      	ldr	r1, [pc, #60]	@ (800fd84 <HAL_RCC_GetHCLKFreq+0x54>)
 800fd48:	5ccb      	ldrb	r3, [r1, r3]
 800fd4a:	f003 031f 	and.w	r3, r3, #31
 800fd4e:	fa22 f303 	lsr.w	r3, r2, r3
 800fd52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fd54:	4b0a      	ldr	r3, [pc, #40]	@ (800fd80 <HAL_RCC_GetHCLKFreq+0x50>)
 800fd56:	699b      	ldr	r3, [r3, #24]
 800fd58:	f003 030f 	and.w	r3, r3, #15
 800fd5c:	4a09      	ldr	r2, [pc, #36]	@ (800fd84 <HAL_RCC_GetHCLKFreq+0x54>)
 800fd5e:	5cd3      	ldrb	r3, [r2, r3]
 800fd60:	f003 031f 	and.w	r3, r3, #31
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	fa22 f303 	lsr.w	r3, r2, r3
 800fd6a:	4a07      	ldr	r2, [pc, #28]	@ (800fd88 <HAL_RCC_GetHCLKFreq+0x58>)
 800fd6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fd6e:	4a07      	ldr	r2, [pc, #28]	@ (800fd8c <HAL_RCC_GetHCLKFreq+0x5c>)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800fd74:	4b04      	ldr	r3, [pc, #16]	@ (800fd88 <HAL_RCC_GetHCLKFreq+0x58>)
 800fd76:	681b      	ldr	r3, [r3, #0]
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	58024400 	.word	0x58024400
 800fd84:	08018000 	.word	0x08018000
 800fd88:	24000404 	.word	0x24000404
 800fd8c:	24000400 	.word	0x24000400

0800fd90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800fd94:	f7ff ffcc 	bl	800fd30 <HAL_RCC_GetHCLKFreq>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	4b06      	ldr	r3, [pc, #24]	@ (800fdb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fd9c:	69db      	ldr	r3, [r3, #28]
 800fd9e:	091b      	lsrs	r3, r3, #4
 800fda0:	f003 0307 	and.w	r3, r3, #7
 800fda4:	4904      	ldr	r1, [pc, #16]	@ (800fdb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800fda6:	5ccb      	ldrb	r3, [r1, r3]
 800fda8:	f003 031f 	and.w	r3, r3, #31
 800fdac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	58024400 	.word	0x58024400
 800fdb8:	08018000 	.word	0x08018000

0800fdbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800fdc0:	f7ff ffb6 	bl	800fd30 <HAL_RCC_GetHCLKFreq>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	4b06      	ldr	r3, [pc, #24]	@ (800fde0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fdc8:	69db      	ldr	r3, [r3, #28]
 800fdca:	0a1b      	lsrs	r3, r3, #8
 800fdcc:	f003 0307 	and.w	r3, r3, #7
 800fdd0:	4904      	ldr	r1, [pc, #16]	@ (800fde4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800fdd2:	5ccb      	ldrb	r3, [r1, r3]
 800fdd4:	f003 031f 	and.w	r3, r3, #31
 800fdd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	58024400 	.word	0x58024400
 800fde4:	08018000 	.word	0x08018000

0800fde8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	223f      	movs	r2, #63	@ 0x3f
 800fdf6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800fdf8:	4b1a      	ldr	r3, [pc, #104]	@ (800fe64 <HAL_RCC_GetClockConfig+0x7c>)
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	f003 0207 	and.w	r2, r3, #7
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800fe04:	4b17      	ldr	r3, [pc, #92]	@ (800fe64 <HAL_RCC_GetClockConfig+0x7c>)
 800fe06:	699b      	ldr	r3, [r3, #24]
 800fe08:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800fe10:	4b14      	ldr	r3, [pc, #80]	@ (800fe64 <HAL_RCC_GetClockConfig+0x7c>)
 800fe12:	699b      	ldr	r3, [r3, #24]
 800fe14:	f003 020f 	and.w	r2, r3, #15
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800fe1c:	4b11      	ldr	r3, [pc, #68]	@ (800fe64 <HAL_RCC_GetClockConfig+0x7c>)
 800fe1e:	699b      	ldr	r3, [r3, #24]
 800fe20:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800fe28:	4b0e      	ldr	r3, [pc, #56]	@ (800fe64 <HAL_RCC_GetClockConfig+0x7c>)
 800fe2a:	69db      	ldr	r3, [r3, #28]
 800fe2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800fe34:	4b0b      	ldr	r3, [pc, #44]	@ (800fe64 <HAL_RCC_GetClockConfig+0x7c>)
 800fe36:	69db      	ldr	r3, [r3, #28]
 800fe38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800fe40:	4b08      	ldr	r3, [pc, #32]	@ (800fe64 <HAL_RCC_GetClockConfig+0x7c>)
 800fe42:	6a1b      	ldr	r3, [r3, #32]
 800fe44:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800fe4c:	4b06      	ldr	r3, [pc, #24]	@ (800fe68 <HAL_RCC_GetClockConfig+0x80>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f003 020f 	and.w	r2, r3, #15
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	601a      	str	r2, [r3, #0]
}
 800fe58:	bf00      	nop
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr
 800fe64:	58024400 	.word	0x58024400
 800fe68:	52002000 	.word	0x52002000

0800fe6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800fe6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe70:	b0cc      	sub	sp, #304	@ 0x130
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800fe78:	2300      	movs	r3, #0
 800fe7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800fe7e:	2300      	movs	r3, #0
 800fe80:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800fe84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800fe90:	2500      	movs	r5, #0
 800fe92:	ea54 0305 	orrs.w	r3, r4, r5
 800fe96:	d049      	beq.n	800ff2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800fe98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fea2:	d02f      	beq.n	800ff04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800fea4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fea8:	d828      	bhi.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800feaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800feae:	d01a      	beq.n	800fee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800feb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800feb4:	d822      	bhi.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d003      	beq.n	800fec2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800feba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800febe:	d007      	beq.n	800fed0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800fec0:	e01c      	b.n	800fefc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fec2:	4bb8      	ldr	r3, [pc, #736]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fec6:	4ab7      	ldr	r2, [pc, #732]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800fece:	e01a      	b.n	800ff06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fed4:	3308      	adds	r3, #8
 800fed6:	2102      	movs	r1, #2
 800fed8:	4618      	mov	r0, r3
 800feda:	f002 fd47 	bl	801296c <RCCEx_PLL2_Config>
 800fede:	4603      	mov	r3, r0
 800fee0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800fee4:	e00f      	b.n	800ff06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800feea:	3328      	adds	r3, #40	@ 0x28
 800feec:	2102      	movs	r1, #2
 800feee:	4618      	mov	r0, r3
 800fef0:	f002 fdee 	bl	8012ad0 <RCCEx_PLL3_Config>
 800fef4:	4603      	mov	r3, r0
 800fef6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800fefa:	e004      	b.n	800ff06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fefc:	2301      	movs	r3, #1
 800fefe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800ff02:	e000      	b.n	800ff06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ff04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d10a      	bne.n	800ff24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ff0e:	4ba5      	ldr	r3, [pc, #660]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ff10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ff16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff1c:	4aa1      	ldr	r2, [pc, #644]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ff1e:	430b      	orrs	r3, r1
 800ff20:	6513      	str	r3, [r2, #80]	@ 0x50
 800ff22:	e003      	b.n	800ff2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff24:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ff28:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ff2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff34:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ff38:	f04f 0900 	mov.w	r9, #0
 800ff3c:	ea58 0309 	orrs.w	r3, r8, r9
 800ff40:	d047      	beq.n	800ffd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ff42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff48:	2b04      	cmp	r3, #4
 800ff4a:	d82a      	bhi.n	800ffa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ff4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ff54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ff4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff52:	bf00      	nop
 800ff54:	0800ff69 	.word	0x0800ff69
 800ff58:	0800ff77 	.word	0x0800ff77
 800ff5c:	0800ff8d 	.word	0x0800ff8d
 800ff60:	0800ffab 	.word	0x0800ffab
 800ff64:	0800ffab 	.word	0x0800ffab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ff68:	4b8e      	ldr	r3, [pc, #568]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ff6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff6c:	4a8d      	ldr	r2, [pc, #564]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ff6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ff72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ff74:	e01a      	b.n	800ffac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ff76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff7a:	3308      	adds	r3, #8
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f002 fcf4 	bl	801296c <RCCEx_PLL2_Config>
 800ff84:	4603      	mov	r3, r0
 800ff86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ff8a:	e00f      	b.n	800ffac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ff8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff90:	3328      	adds	r3, #40	@ 0x28
 800ff92:	2100      	movs	r1, #0
 800ff94:	4618      	mov	r0, r3
 800ff96:	f002 fd9b 	bl	8012ad0 <RCCEx_PLL3_Config>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ffa0:	e004      	b.n	800ffac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800ffa8:	e000      	b.n	800ffac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ffaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ffac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d10a      	bne.n	800ffca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ffb4:	4b7b      	ldr	r3, [pc, #492]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ffb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ffb8:	f023 0107 	bic.w	r1, r3, #7
 800ffbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ffc2:	4a78      	ldr	r2, [pc, #480]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ffc4:	430b      	orrs	r3, r1
 800ffc6:	6513      	str	r3, [r2, #80]	@ 0x50
 800ffc8:	e003      	b.n	800ffd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ffce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ffd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffda:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800ffde:	f04f 0b00 	mov.w	fp, #0
 800ffe2:	ea5a 030b 	orrs.w	r3, sl, fp
 800ffe6:	d04c      	beq.n	8010082 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ffe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ffee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fff2:	d030      	beq.n	8010056 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800fff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fff8:	d829      	bhi.n	801004e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800fffa:	2bc0      	cmp	r3, #192	@ 0xc0
 800fffc:	d02d      	beq.n	801005a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800fffe:	2bc0      	cmp	r3, #192	@ 0xc0
 8010000:	d825      	bhi.n	801004e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8010002:	2b80      	cmp	r3, #128	@ 0x80
 8010004:	d018      	beq.n	8010038 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8010006:	2b80      	cmp	r3, #128	@ 0x80
 8010008:	d821      	bhi.n	801004e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801000a:	2b00      	cmp	r3, #0
 801000c:	d002      	beq.n	8010014 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801000e:	2b40      	cmp	r3, #64	@ 0x40
 8010010:	d007      	beq.n	8010022 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8010012:	e01c      	b.n	801004e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010014:	4b63      	ldr	r3, [pc, #396]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010018:	4a62      	ldr	r2, [pc, #392]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801001a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801001e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8010020:	e01c      	b.n	801005c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010022:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010026:	3308      	adds	r3, #8
 8010028:	2100      	movs	r1, #0
 801002a:	4618      	mov	r0, r3
 801002c:	f002 fc9e 	bl	801296c <RCCEx_PLL2_Config>
 8010030:	4603      	mov	r3, r0
 8010032:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8010036:	e011      	b.n	801005c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801003c:	3328      	adds	r3, #40	@ 0x28
 801003e:	2100      	movs	r1, #0
 8010040:	4618      	mov	r0, r3
 8010042:	f002 fd45 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010046:	4603      	mov	r3, r0
 8010048:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801004c:	e006      	b.n	801005c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801004e:	2301      	movs	r3, #1
 8010050:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010054:	e002      	b.n	801005c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8010056:	bf00      	nop
 8010058:	e000      	b.n	801005c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801005a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801005c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010060:	2b00      	cmp	r3, #0
 8010062:	d10a      	bne.n	801007a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8010064:	4b4f      	ldr	r3, [pc, #316]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010068:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801006c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010072:	4a4c      	ldr	r2, [pc, #304]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010074:	430b      	orrs	r3, r1
 8010076:	6513      	str	r3, [r2, #80]	@ 0x50
 8010078:	e003      	b.n	8010082 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801007a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801007e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8010082:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801008e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8010092:	2300      	movs	r3, #0
 8010094:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8010098:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 801009c:	460b      	mov	r3, r1
 801009e:	4313      	orrs	r3, r2
 80100a0:	d053      	beq.n	801014a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80100a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80100a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80100aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80100ae:	d035      	beq.n	801011c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80100b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80100b4:	d82e      	bhi.n	8010114 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80100b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80100ba:	d031      	beq.n	8010120 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80100bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80100c0:	d828      	bhi.n	8010114 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80100c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80100c6:	d01a      	beq.n	80100fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80100c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80100cc:	d822      	bhi.n	8010114 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d003      	beq.n	80100da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80100d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80100d6:	d007      	beq.n	80100e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80100d8:	e01c      	b.n	8010114 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80100da:	4b32      	ldr	r3, [pc, #200]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80100dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100de:	4a31      	ldr	r2, [pc, #196]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80100e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80100e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80100e6:	e01c      	b.n	8010122 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80100e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80100ec:	3308      	adds	r3, #8
 80100ee:	2100      	movs	r1, #0
 80100f0:	4618      	mov	r0, r3
 80100f2:	f002 fc3b 	bl	801296c <RCCEx_PLL2_Config>
 80100f6:	4603      	mov	r3, r0
 80100f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80100fc:	e011      	b.n	8010122 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80100fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010102:	3328      	adds	r3, #40	@ 0x28
 8010104:	2100      	movs	r1, #0
 8010106:	4618      	mov	r0, r3
 8010108:	f002 fce2 	bl	8012ad0 <RCCEx_PLL3_Config>
 801010c:	4603      	mov	r3, r0
 801010e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010112:	e006      	b.n	8010122 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8010114:	2301      	movs	r3, #1
 8010116:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801011a:	e002      	b.n	8010122 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801011c:	bf00      	nop
 801011e:	e000      	b.n	8010122 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8010120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010122:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010126:	2b00      	cmp	r3, #0
 8010128:	d10b      	bne.n	8010142 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801012a:	4b1e      	ldr	r3, [pc, #120]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801012c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801012e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8010132:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010136:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801013a:	4a1a      	ldr	r2, [pc, #104]	@ (80101a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801013c:	430b      	orrs	r3, r1
 801013e:	6593      	str	r3, [r2, #88]	@ 0x58
 8010140:	e003      	b.n	801014a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010142:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010146:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801014a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801014e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010152:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8010156:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801015a:	2300      	movs	r3, #0
 801015c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8010160:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8010164:	460b      	mov	r3, r1
 8010166:	4313      	orrs	r3, r2
 8010168:	d056      	beq.n	8010218 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801016a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801016e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010172:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010176:	d038      	beq.n	80101ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8010178:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801017c:	d831      	bhi.n	80101e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801017e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010182:	d034      	beq.n	80101ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8010184:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010188:	d82b      	bhi.n	80101e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801018a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801018e:	d01d      	beq.n	80101cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8010190:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010194:	d825      	bhi.n	80101e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010196:	2b00      	cmp	r3, #0
 8010198:	d006      	beq.n	80101a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801019a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801019e:	d00a      	beq.n	80101b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80101a0:	e01f      	b.n	80101e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80101a2:	bf00      	nop
 80101a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80101a8:	4ba2      	ldr	r3, [pc, #648]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80101aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101ac:	4aa1      	ldr	r2, [pc, #644]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80101ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80101b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80101b4:	e01c      	b.n	80101f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80101b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80101ba:	3308      	adds	r3, #8
 80101bc:	2100      	movs	r1, #0
 80101be:	4618      	mov	r0, r3
 80101c0:	f002 fbd4 	bl	801296c <RCCEx_PLL2_Config>
 80101c4:	4603      	mov	r3, r0
 80101c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80101ca:	e011      	b.n	80101f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80101cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80101d0:	3328      	adds	r3, #40	@ 0x28
 80101d2:	2100      	movs	r1, #0
 80101d4:	4618      	mov	r0, r3
 80101d6:	f002 fc7b 	bl	8012ad0 <RCCEx_PLL3_Config>
 80101da:	4603      	mov	r3, r0
 80101dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80101e0:	e006      	b.n	80101f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80101e2:	2301      	movs	r3, #1
 80101e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80101e8:	e002      	b.n	80101f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80101ea:	bf00      	nop
 80101ec:	e000      	b.n	80101f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80101ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80101f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d10b      	bne.n	8010210 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80101f8:	4b8e      	ldr	r3, [pc, #568]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80101fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8010200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010204:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010208:	4a8a      	ldr	r2, [pc, #552]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801020a:	430b      	orrs	r3, r1
 801020c:	6593      	str	r3, [r2, #88]	@ 0x58
 801020e:	e003      	b.n	8010218 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010210:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010214:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801021c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010220:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8010224:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8010228:	2300      	movs	r3, #0
 801022a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801022e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8010232:	460b      	mov	r3, r1
 8010234:	4313      	orrs	r3, r2
 8010236:	d03a      	beq.n	80102ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8010238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801023c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801023e:	2b30      	cmp	r3, #48	@ 0x30
 8010240:	d01f      	beq.n	8010282 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8010242:	2b30      	cmp	r3, #48	@ 0x30
 8010244:	d819      	bhi.n	801027a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8010246:	2b20      	cmp	r3, #32
 8010248:	d00c      	beq.n	8010264 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801024a:	2b20      	cmp	r3, #32
 801024c:	d815      	bhi.n	801027a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801024e:	2b00      	cmp	r3, #0
 8010250:	d019      	beq.n	8010286 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8010252:	2b10      	cmp	r3, #16
 8010254:	d111      	bne.n	801027a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010256:	4b77      	ldr	r3, [pc, #476]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801025a:	4a76      	ldr	r2, [pc, #472]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801025c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010260:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010262:	e011      	b.n	8010288 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010264:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010268:	3308      	adds	r3, #8
 801026a:	2102      	movs	r1, #2
 801026c:	4618      	mov	r0, r3
 801026e:	f002 fb7d 	bl	801296c <RCCEx_PLL2_Config>
 8010272:	4603      	mov	r3, r0
 8010274:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010278:	e006      	b.n	8010288 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801027a:	2301      	movs	r3, #1
 801027c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010280:	e002      	b.n	8010288 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8010282:	bf00      	nop
 8010284:	e000      	b.n	8010288 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8010286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010288:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801028c:	2b00      	cmp	r3, #0
 801028e:	d10a      	bne.n	80102a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010290:	4b68      	ldr	r3, [pc, #416]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010294:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8010298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801029c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801029e:	4a65      	ldr	r2, [pc, #404]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80102a0:	430b      	orrs	r3, r1
 80102a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80102a4:	e003      	b.n	80102ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80102aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80102ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80102b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80102ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80102be:	2300      	movs	r3, #0
 80102c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80102c4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80102c8:	460b      	mov	r3, r1
 80102ca:	4313      	orrs	r3, r2
 80102cc:	d051      	beq.n	8010372 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80102ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80102d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80102d8:	d035      	beq.n	8010346 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80102da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80102de:	d82e      	bhi.n	801033e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80102e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80102e4:	d031      	beq.n	801034a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80102e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80102ea:	d828      	bhi.n	801033e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80102ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102f0:	d01a      	beq.n	8010328 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80102f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102f6:	d822      	bhi.n	801033e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d003      	beq.n	8010304 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80102fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010300:	d007      	beq.n	8010312 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8010302:	e01c      	b.n	801033e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010304:	4b4b      	ldr	r3, [pc, #300]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010308:	4a4a      	ldr	r2, [pc, #296]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801030a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801030e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010310:	e01c      	b.n	801034c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010316:	3308      	adds	r3, #8
 8010318:	2100      	movs	r1, #0
 801031a:	4618      	mov	r0, r3
 801031c:	f002 fb26 	bl	801296c <RCCEx_PLL2_Config>
 8010320:	4603      	mov	r3, r0
 8010322:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010326:	e011      	b.n	801034c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801032c:	3328      	adds	r3, #40	@ 0x28
 801032e:	2100      	movs	r1, #0
 8010330:	4618      	mov	r0, r3
 8010332:	f002 fbcd 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010336:	4603      	mov	r3, r0
 8010338:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801033c:	e006      	b.n	801034c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801033e:	2301      	movs	r3, #1
 8010340:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010344:	e002      	b.n	801034c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8010346:	bf00      	nop
 8010348:	e000      	b.n	801034c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801034a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801034c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010350:	2b00      	cmp	r3, #0
 8010352:	d10a      	bne.n	801036a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8010354:	4b37      	ldr	r3, [pc, #220]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010358:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801035c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010362:	4a34      	ldr	r2, [pc, #208]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010364:	430b      	orrs	r3, r1
 8010366:	6513      	str	r3, [r2, #80]	@ 0x50
 8010368:	e003      	b.n	8010372 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801036a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801036e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801037e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8010382:	2300      	movs	r3, #0
 8010384:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010388:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801038c:	460b      	mov	r3, r1
 801038e:	4313      	orrs	r3, r2
 8010390:	d056      	beq.n	8010440 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8010392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801039c:	d033      	beq.n	8010406 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801039e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80103a2:	d82c      	bhi.n	80103fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80103a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80103a8:	d02f      	beq.n	801040a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80103aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80103ae:	d826      	bhi.n	80103fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80103b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80103b4:	d02b      	beq.n	801040e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80103b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80103ba:	d820      	bhi.n	80103fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80103bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80103c0:	d012      	beq.n	80103e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80103c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80103c6:	d81a      	bhi.n	80103fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d022      	beq.n	8010412 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80103cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103d0:	d115      	bne.n	80103fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80103d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80103d6:	3308      	adds	r3, #8
 80103d8:	2101      	movs	r1, #1
 80103da:	4618      	mov	r0, r3
 80103dc:	f002 fac6 	bl	801296c <RCCEx_PLL2_Config>
 80103e0:	4603      	mov	r3, r0
 80103e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80103e6:	e015      	b.n	8010414 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80103e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80103ec:	3328      	adds	r3, #40	@ 0x28
 80103ee:	2101      	movs	r1, #1
 80103f0:	4618      	mov	r0, r3
 80103f2:	f002 fb6d 	bl	8012ad0 <RCCEx_PLL3_Config>
 80103f6:	4603      	mov	r3, r0
 80103f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80103fc:	e00a      	b.n	8010414 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80103fe:	2301      	movs	r3, #1
 8010400:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010404:	e006      	b.n	8010414 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010406:	bf00      	nop
 8010408:	e004      	b.n	8010414 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801040a:	bf00      	nop
 801040c:	e002      	b.n	8010414 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801040e:	bf00      	nop
 8010410:	e000      	b.n	8010414 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010414:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010418:	2b00      	cmp	r3, #0
 801041a:	d10d      	bne.n	8010438 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801041c:	4b05      	ldr	r3, [pc, #20]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801041e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010420:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8010424:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801042a:	4a02      	ldr	r2, [pc, #8]	@ (8010434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801042c:	430b      	orrs	r3, r1
 801042e:	6513      	str	r3, [r2, #80]	@ 0x50
 8010430:	e006      	b.n	8010440 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8010432:	bf00      	nop
 8010434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010438:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801043c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010448:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801044c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010450:	2300      	movs	r3, #0
 8010452:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010456:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801045a:	460b      	mov	r3, r1
 801045c:	4313      	orrs	r3, r2
 801045e:	d055      	beq.n	801050c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8010460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801046c:	d033      	beq.n	80104d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801046e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010472:	d82c      	bhi.n	80104ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010478:	d02f      	beq.n	80104da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801047a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801047e:	d826      	bhi.n	80104ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010480:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010484:	d02b      	beq.n	80104de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8010486:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801048a:	d820      	bhi.n	80104ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 801048c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010490:	d012      	beq.n	80104b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8010492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010496:	d81a      	bhi.n	80104ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010498:	2b00      	cmp	r3, #0
 801049a:	d022      	beq.n	80104e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801049c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80104a0:	d115      	bne.n	80104ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80104a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80104a6:	3308      	adds	r3, #8
 80104a8:	2101      	movs	r1, #1
 80104aa:	4618      	mov	r0, r3
 80104ac:	f002 fa5e 	bl	801296c <RCCEx_PLL2_Config>
 80104b0:	4603      	mov	r3, r0
 80104b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80104b6:	e015      	b.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80104b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80104bc:	3328      	adds	r3, #40	@ 0x28
 80104be:	2101      	movs	r1, #1
 80104c0:	4618      	mov	r0, r3
 80104c2:	f002 fb05 	bl	8012ad0 <RCCEx_PLL3_Config>
 80104c6:	4603      	mov	r3, r0
 80104c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80104cc:	e00a      	b.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80104ce:	2301      	movs	r3, #1
 80104d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80104d4:	e006      	b.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80104d6:	bf00      	nop
 80104d8:	e004      	b.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80104da:	bf00      	nop
 80104dc:	e002      	b.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80104de:	bf00      	nop
 80104e0:	e000      	b.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80104e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80104e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10b      	bne.n	8010504 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80104ec:	4bb6      	ldr	r3, [pc, #728]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80104ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80104f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80104f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80104fc:	4ab2      	ldr	r2, [pc, #712]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80104fe:	430b      	orrs	r3, r1
 8010500:	6593      	str	r3, [r2, #88]	@ 0x58
 8010502:	e003      	b.n	801050c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010504:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010508:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 801050c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8010518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801051c:	2300      	movs	r3, #0
 801051e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010522:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8010526:	460b      	mov	r3, r1
 8010528:	4313      	orrs	r3, r2
 801052a:	d02a      	beq.n	8010582 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 801052c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010532:	2b00      	cmp	r3, #0
 8010534:	d011      	beq.n	801055a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8010536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801053a:	d10a      	bne.n	8010552 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801053c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010540:	3308      	adds	r3, #8
 8010542:	2101      	movs	r1, #1
 8010544:	4618      	mov	r0, r3
 8010546:	f002 fa11 	bl	801296c <RCCEx_PLL2_Config>
 801054a:	4603      	mov	r3, r0
 801054c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8010550:	e004      	b.n	801055c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010552:	2301      	movs	r3, #1
 8010554:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010558:	e000      	b.n	801055c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 801055a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801055c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010560:	2b00      	cmp	r3, #0
 8010562:	d10a      	bne.n	801057a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8010564:	4b98      	ldr	r3, [pc, #608]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010568:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801056c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010572:	4a95      	ldr	r2, [pc, #596]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010574:	430b      	orrs	r3, r1
 8010576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8010578:	e003      	b.n	8010582 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801057a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801057e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801058e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010592:	2300      	movs	r3, #0
 8010594:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8010598:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801059c:	460b      	mov	r3, r1
 801059e:	4313      	orrs	r3, r2
 80105a0:	d037      	beq.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80105a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80105ac:	d00e      	beq.n	80105cc <HAL_RCCEx_PeriphCLKConfig+0x760>
 80105ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80105b2:	d816      	bhi.n	80105e2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d018      	beq.n	80105ea <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80105b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80105bc:	d111      	bne.n	80105e2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105be:	4b82      	ldr	r3, [pc, #520]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80105c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105c2:	4a81      	ldr	r2, [pc, #516]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80105c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80105c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80105ca:	e00f      	b.n	80105ec <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80105cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105d0:	3308      	adds	r3, #8
 80105d2:	2101      	movs	r1, #1
 80105d4:	4618      	mov	r0, r3
 80105d6:	f002 f9c9 	bl	801296c <RCCEx_PLL2_Config>
 80105da:	4603      	mov	r3, r0
 80105dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80105e0:	e004      	b.n	80105ec <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80105e2:	2301      	movs	r3, #1
 80105e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80105e8:	e000      	b.n	80105ec <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80105ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80105ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d10a      	bne.n	801060a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80105f4:	4b74      	ldr	r3, [pc, #464]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80105f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80105fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010602:	4a71      	ldr	r2, [pc, #452]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010604:	430b      	orrs	r3, r1
 8010606:	6513      	str	r3, [r2, #80]	@ 0x50
 8010608:	e003      	b.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801060a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801060e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8010612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801061e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010622:	2300      	movs	r3, #0
 8010624:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8010628:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801062c:	460b      	mov	r3, r1
 801062e:	4313      	orrs	r3, r2
 8010630:	d03a      	beq.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8010632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010638:	2b03      	cmp	r3, #3
 801063a:	d81d      	bhi.n	8010678 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 801063c:	a201      	add	r2, pc, #4	@ (adr r2, 8010644 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 801063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010642:	bf00      	nop
 8010644:	08010681 	.word	0x08010681
 8010648:	08010655 	.word	0x08010655
 801064c:	08010663 	.word	0x08010663
 8010650:	08010681 	.word	0x08010681
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010654:	4b5c      	ldr	r3, [pc, #368]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010658:	4a5b      	ldr	r2, [pc, #364]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801065a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801065e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010660:	e00f      	b.n	8010682 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010662:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010666:	3308      	adds	r3, #8
 8010668:	2102      	movs	r1, #2
 801066a:	4618      	mov	r0, r3
 801066c:	f002 f97e 	bl	801296c <RCCEx_PLL2_Config>
 8010670:	4603      	mov	r3, r0
 8010672:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010676:	e004      	b.n	8010682 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8010678:	2301      	movs	r3, #1
 801067a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801067e:	e000      	b.n	8010682 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8010680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010682:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010686:	2b00      	cmp	r3, #0
 8010688:	d10a      	bne.n	80106a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801068a:	4b4f      	ldr	r3, [pc, #316]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801068e:	f023 0103 	bic.w	r1, r3, #3
 8010692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010698:	4a4b      	ldr	r2, [pc, #300]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801069a:	430b      	orrs	r3, r1
 801069c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801069e:	e003      	b.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80106a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80106a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80106ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80106b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80106b8:	2300      	movs	r3, #0
 80106ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80106be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80106c2:	460b      	mov	r3, r1
 80106c4:	4313      	orrs	r3, r2
 80106c6:	f000 80a0 	beq.w	801080a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80106ca:	4b40      	ldr	r3, [pc, #256]	@ (80107cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	4a3f      	ldr	r2, [pc, #252]	@ (80107cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80106d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80106d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80106d6:	f7f8 f945 	bl	8008964 <HAL_GetTick>
 80106da:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80106de:	e00b      	b.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80106e0:	f7f8 f940 	bl	8008964 <HAL_GetTick>
 80106e4:	4602      	mov	r2, r0
 80106e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106ea:	1ad3      	subs	r3, r2, r3
 80106ec:	2b64      	cmp	r3, #100	@ 0x64
 80106ee:	d903      	bls.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80106f0:	2303      	movs	r3, #3
 80106f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80106f6:	e005      	b.n	8010704 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80106f8:	4b34      	ldr	r3, [pc, #208]	@ (80107cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010700:	2b00      	cmp	r3, #0
 8010702:	d0ed      	beq.n	80106e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8010704:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010708:	2b00      	cmp	r3, #0
 801070a:	d17a      	bne.n	8010802 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801070c:	4b2e      	ldr	r3, [pc, #184]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801070e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010710:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010714:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010718:	4053      	eors	r3, r2
 801071a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801071e:	2b00      	cmp	r3, #0
 8010720:	d015      	beq.n	801074e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010722:	4b29      	ldr	r3, [pc, #164]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801072a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801072e:	4b26      	ldr	r3, [pc, #152]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010732:	4a25      	ldr	r2, [pc, #148]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010738:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801073a:	4b23      	ldr	r3, [pc, #140]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801073c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801073e:	4a22      	ldr	r2, [pc, #136]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010744:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8010746:	4a20      	ldr	r2, [pc, #128]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010748:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801074c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801074e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010752:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801075a:	d118      	bne.n	801078e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801075c:	f7f8 f902 	bl	8008964 <HAL_GetTick>
 8010760:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010764:	e00d      	b.n	8010782 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010766:	f7f8 f8fd 	bl	8008964 <HAL_GetTick>
 801076a:	4602      	mov	r2, r0
 801076c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010770:	1ad2      	subs	r2, r2, r3
 8010772:	f241 3388 	movw	r3, #5000	@ 0x1388
 8010776:	429a      	cmp	r2, r3
 8010778:	d903      	bls.n	8010782 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 801077a:	2303      	movs	r3, #3
 801077c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8010780:	e005      	b.n	801078e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010782:	4b11      	ldr	r3, [pc, #68]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010786:	f003 0302 	and.w	r3, r3, #2
 801078a:	2b00      	cmp	r3, #0
 801078c:	d0eb      	beq.n	8010766 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 801078e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010792:	2b00      	cmp	r3, #0
 8010794:	d130      	bne.n	80107f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010796:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801079a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801079e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80107a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80107a6:	d115      	bne.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80107a8:	4b07      	ldr	r3, [pc, #28]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80107aa:	691b      	ldr	r3, [r3, #16]
 80107ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80107b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80107b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80107b8:	091a      	lsrs	r2, r3, #4
 80107ba:	4b05      	ldr	r3, [pc, #20]	@ (80107d0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80107bc:	4013      	ands	r3, r2
 80107be:	4a02      	ldr	r2, [pc, #8]	@ (80107c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80107c0:	430b      	orrs	r3, r1
 80107c2:	6113      	str	r3, [r2, #16]
 80107c4:	e00c      	b.n	80107e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80107c6:	bf00      	nop
 80107c8:	58024400 	.word	0x58024400
 80107cc:	58024800 	.word	0x58024800
 80107d0:	00ffffcf 	.word	0x00ffffcf
 80107d4:	4bd4      	ldr	r3, [pc, #848]	@ (8010b28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80107d6:	691b      	ldr	r3, [r3, #16]
 80107d8:	4ad3      	ldr	r2, [pc, #844]	@ (8010b28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80107da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80107de:	6113      	str	r3, [r2, #16]
 80107e0:	4bd1      	ldr	r3, [pc, #836]	@ (8010b28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80107e2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80107e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80107e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80107ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80107f0:	4acd      	ldr	r2, [pc, #820]	@ (8010b28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80107f2:	430b      	orrs	r3, r1
 80107f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80107f6:	e008      	b.n	801080a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80107f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80107fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8010800:	e003      	b.n	801080a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010802:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010806:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801080a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	f002 0301 	and.w	r3, r2, #1
 8010816:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801081a:	2300      	movs	r3, #0
 801081c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010820:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010824:	460b      	mov	r3, r1
 8010826:	4313      	orrs	r3, r2
 8010828:	f000 808b 	beq.w	8010942 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801082c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010834:	2b28      	cmp	r3, #40	@ 0x28
 8010836:	d86b      	bhi.n	8010910 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8010838:	a201      	add	r2, pc, #4	@ (adr r2, 8010840 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 801083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801083e:	bf00      	nop
 8010840:	08010919 	.word	0x08010919
 8010844:	08010911 	.word	0x08010911
 8010848:	08010911 	.word	0x08010911
 801084c:	08010911 	.word	0x08010911
 8010850:	08010911 	.word	0x08010911
 8010854:	08010911 	.word	0x08010911
 8010858:	08010911 	.word	0x08010911
 801085c:	08010911 	.word	0x08010911
 8010860:	080108e5 	.word	0x080108e5
 8010864:	08010911 	.word	0x08010911
 8010868:	08010911 	.word	0x08010911
 801086c:	08010911 	.word	0x08010911
 8010870:	08010911 	.word	0x08010911
 8010874:	08010911 	.word	0x08010911
 8010878:	08010911 	.word	0x08010911
 801087c:	08010911 	.word	0x08010911
 8010880:	080108fb 	.word	0x080108fb
 8010884:	08010911 	.word	0x08010911
 8010888:	08010911 	.word	0x08010911
 801088c:	08010911 	.word	0x08010911
 8010890:	08010911 	.word	0x08010911
 8010894:	08010911 	.word	0x08010911
 8010898:	08010911 	.word	0x08010911
 801089c:	08010911 	.word	0x08010911
 80108a0:	08010919 	.word	0x08010919
 80108a4:	08010911 	.word	0x08010911
 80108a8:	08010911 	.word	0x08010911
 80108ac:	08010911 	.word	0x08010911
 80108b0:	08010911 	.word	0x08010911
 80108b4:	08010911 	.word	0x08010911
 80108b8:	08010911 	.word	0x08010911
 80108bc:	08010911 	.word	0x08010911
 80108c0:	08010919 	.word	0x08010919
 80108c4:	08010911 	.word	0x08010911
 80108c8:	08010911 	.word	0x08010911
 80108cc:	08010911 	.word	0x08010911
 80108d0:	08010911 	.word	0x08010911
 80108d4:	08010911 	.word	0x08010911
 80108d8:	08010911 	.word	0x08010911
 80108dc:	08010911 	.word	0x08010911
 80108e0:	08010919 	.word	0x08010919
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80108e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80108e8:	3308      	adds	r3, #8
 80108ea:	2101      	movs	r1, #1
 80108ec:	4618      	mov	r0, r3
 80108ee:	f002 f83d 	bl	801296c <RCCEx_PLL2_Config>
 80108f2:	4603      	mov	r3, r0
 80108f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80108f8:	e00f      	b.n	801091a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80108fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80108fe:	3328      	adds	r3, #40	@ 0x28
 8010900:	2101      	movs	r1, #1
 8010902:	4618      	mov	r0, r3
 8010904:	f002 f8e4 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010908:	4603      	mov	r3, r0
 801090a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801090e:	e004      	b.n	801091a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010910:	2301      	movs	r3, #1
 8010912:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010916:	e000      	b.n	801091a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8010918:	bf00      	nop
    }

    if (ret == HAL_OK)
 801091a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10b      	bne.n	801093a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010922:	4b81      	ldr	r3, [pc, #516]	@ (8010b28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8010924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010926:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801092a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801092e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010932:	4a7d      	ldr	r2, [pc, #500]	@ (8010b28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8010934:	430b      	orrs	r3, r1
 8010936:	6553      	str	r3, [r2, #84]	@ 0x54
 8010938:	e003      	b.n	8010942 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801093a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801093e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010942:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094a:	f002 0302 	and.w	r3, r2, #2
 801094e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010952:	2300      	movs	r3, #0
 8010954:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8010958:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801095c:	460b      	mov	r3, r1
 801095e:	4313      	orrs	r3, r2
 8010960:	d042      	beq.n	80109e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010962:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010968:	2b05      	cmp	r3, #5
 801096a:	d825      	bhi.n	80109b8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 801096c:	a201      	add	r2, pc, #4	@ (adr r2, 8010974 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 801096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010972:	bf00      	nop
 8010974:	080109c1 	.word	0x080109c1
 8010978:	0801098d 	.word	0x0801098d
 801097c:	080109a3 	.word	0x080109a3
 8010980:	080109c1 	.word	0x080109c1
 8010984:	080109c1 	.word	0x080109c1
 8010988:	080109c1 	.word	0x080109c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801098c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010990:	3308      	adds	r3, #8
 8010992:	2101      	movs	r1, #1
 8010994:	4618      	mov	r0, r3
 8010996:	f001 ffe9 	bl	801296c <RCCEx_PLL2_Config>
 801099a:	4603      	mov	r3, r0
 801099c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80109a0:	e00f      	b.n	80109c2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80109a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80109a6:	3328      	adds	r3, #40	@ 0x28
 80109a8:	2101      	movs	r1, #1
 80109aa:	4618      	mov	r0, r3
 80109ac:	f002 f890 	bl	8012ad0 <RCCEx_PLL3_Config>
 80109b0:	4603      	mov	r3, r0
 80109b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80109b6:	e004      	b.n	80109c2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80109b8:	2301      	movs	r3, #1
 80109ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80109be:	e000      	b.n	80109c2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80109c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80109c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d10a      	bne.n	80109e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80109ca:	4b57      	ldr	r3, [pc, #348]	@ (8010b28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80109cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109ce:	f023 0107 	bic.w	r1, r3, #7
 80109d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80109d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109d8:	4a53      	ldr	r2, [pc, #332]	@ (8010b28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80109da:	430b      	orrs	r3, r1
 80109dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80109de:	e003      	b.n	80109e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80109e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80109e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80109ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f0:	f002 0304 	and.w	r3, r2, #4
 80109f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80109f8:	2300      	movs	r3, #0
 80109fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80109fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8010a02:	460b      	mov	r3, r1
 8010a04:	4313      	orrs	r3, r2
 8010a06:	d044      	beq.n	8010a92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010a10:	2b05      	cmp	r3, #5
 8010a12:	d825      	bhi.n	8010a60 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8010a14:	a201      	add	r2, pc, #4	@ (adr r2, 8010a1c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8010a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a1a:	bf00      	nop
 8010a1c:	08010a69 	.word	0x08010a69
 8010a20:	08010a35 	.word	0x08010a35
 8010a24:	08010a4b 	.word	0x08010a4b
 8010a28:	08010a69 	.word	0x08010a69
 8010a2c:	08010a69 	.word	0x08010a69
 8010a30:	08010a69 	.word	0x08010a69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010a34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010a38:	3308      	adds	r3, #8
 8010a3a:	2101      	movs	r1, #1
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f001 ff95 	bl	801296c <RCCEx_PLL2_Config>
 8010a42:	4603      	mov	r3, r0
 8010a44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010a48:	e00f      	b.n	8010a6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010a4e:	3328      	adds	r3, #40	@ 0x28
 8010a50:	2101      	movs	r1, #1
 8010a52:	4618      	mov	r0, r3
 8010a54:	f002 f83c 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010a5e:	e004      	b.n	8010a6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010a60:	2301      	movs	r3, #1
 8010a62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010a66:	e000      	b.n	8010a6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8010a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010a6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d10b      	bne.n	8010a8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010a72:	4b2d      	ldr	r3, [pc, #180]	@ (8010b28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8010a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a76:	f023 0107 	bic.w	r1, r3, #7
 8010a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010a82:	4a29      	ldr	r2, [pc, #164]	@ (8010b28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8010a84:	430b      	orrs	r3, r1
 8010a86:	6593      	str	r3, [r2, #88]	@ 0x58
 8010a88:	e003      	b.n	8010a92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010a8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9a:	f002 0320 	and.w	r3, r2, #32
 8010a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010aac:	460b      	mov	r3, r1
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	d057      	beq.n	8010b62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8010ab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010abe:	d035      	beq.n	8010b2c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8010ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010ac4:	d82c      	bhi.n	8010b20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8010ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010aca:	d031      	beq.n	8010b30 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8010acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ad0:	d826      	bhi.n	8010b20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8010ad2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010ad6:	d02d      	beq.n	8010b34 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8010ad8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010adc:	d820      	bhi.n	8010b20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8010ade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010ae2:	d012      	beq.n	8010b0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8010ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010ae8:	d81a      	bhi.n	8010b20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d024      	beq.n	8010b38 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8010aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010af2:	d115      	bne.n	8010b20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010af4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010af8:	3308      	adds	r3, #8
 8010afa:	2100      	movs	r1, #0
 8010afc:	4618      	mov	r0, r3
 8010afe:	f001 ff35 	bl	801296c <RCCEx_PLL2_Config>
 8010b02:	4603      	mov	r3, r0
 8010b04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010b08:	e017      	b.n	8010b3a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010b0e:	3328      	adds	r3, #40	@ 0x28
 8010b10:	2102      	movs	r1, #2
 8010b12:	4618      	mov	r0, r3
 8010b14:	f001 ffdc 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010b1e:	e00c      	b.n	8010b3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010b20:	2301      	movs	r3, #1
 8010b22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010b26:	e008      	b.n	8010b3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8010b28:	58024400 	.word	0x58024400
        break;
 8010b2c:	bf00      	nop
 8010b2e:	e004      	b.n	8010b3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8010b30:	bf00      	nop
 8010b32:	e002      	b.n	8010b3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8010b34:	bf00      	nop
 8010b36:	e000      	b.n	8010b3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8010b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010b3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d10b      	bne.n	8010b5a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010b42:	4bc2      	ldr	r3, [pc, #776]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8010b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010b52:	4abe      	ldr	r2, [pc, #760]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010b54:	430b      	orrs	r3, r1
 8010b56:	6553      	str	r3, [r2, #84]	@ 0x54
 8010b58:	e003      	b.n	8010b62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010b5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8010b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010b72:	2300      	movs	r3, #0
 8010b74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010b78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	d055      	beq.n	8010c2e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8010b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010b86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010b8a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8010b8e:	d033      	beq.n	8010bf8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8010b90:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8010b94:	d82c      	bhi.n	8010bf0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8010b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b9a:	d02f      	beq.n	8010bfc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8010b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ba0:	d826      	bhi.n	8010bf0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8010ba2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010ba6:	d02b      	beq.n	8010c00 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8010ba8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010bac:	d820      	bhi.n	8010bf0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8010bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010bb2:	d012      	beq.n	8010bda <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8010bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010bb8:	d81a      	bhi.n	8010bf0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d022      	beq.n	8010c04 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8010bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010bc2:	d115      	bne.n	8010bf0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010bc8:	3308      	adds	r3, #8
 8010bca:	2100      	movs	r1, #0
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f001 fecd 	bl	801296c <RCCEx_PLL2_Config>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010bd8:	e015      	b.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010bde:	3328      	adds	r3, #40	@ 0x28
 8010be0:	2102      	movs	r1, #2
 8010be2:	4618      	mov	r0, r3
 8010be4:	f001 ff74 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010be8:	4603      	mov	r3, r0
 8010bea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010bee:	e00a      	b.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010bf6:	e006      	b.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8010bf8:	bf00      	nop
 8010bfa:	e004      	b.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8010bfc:	bf00      	nop
 8010bfe:	e002      	b.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8010c00:	bf00      	nop
 8010c02:	e000      	b.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8010c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d10b      	bne.n	8010c26 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010c0e:	4b8f      	ldr	r3, [pc, #572]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8010c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010c1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010c1e:	4a8b      	ldr	r2, [pc, #556]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010c20:	430b      	orrs	r3, r1
 8010c22:	6593      	str	r3, [r2, #88]	@ 0x58
 8010c24:	e003      	b.n	8010c2e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010c2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c36:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8010c3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010c44:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8010c48:	460b      	mov	r3, r1
 8010c4a:	4313      	orrs	r3, r2
 8010c4c:	d055      	beq.n	8010cfa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010c52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010c56:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8010c5a:	d033      	beq.n	8010cc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8010c5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8010c60:	d82c      	bhi.n	8010cbc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8010c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c66:	d02f      	beq.n	8010cc8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8010c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c6c:	d826      	bhi.n	8010cbc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8010c6e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010c72:	d02b      	beq.n	8010ccc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8010c74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010c78:	d820      	bhi.n	8010cbc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8010c7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010c7e:	d012      	beq.n	8010ca6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8010c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010c84:	d81a      	bhi.n	8010cbc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d022      	beq.n	8010cd0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8010c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010c8e:	d115      	bne.n	8010cbc <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010c90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010c94:	3308      	adds	r3, #8
 8010c96:	2100      	movs	r1, #0
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f001 fe67 	bl	801296c <RCCEx_PLL2_Config>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010ca4:	e015      	b.n	8010cd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010caa:	3328      	adds	r3, #40	@ 0x28
 8010cac:	2102      	movs	r1, #2
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f001 ff0e 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010cba:	e00a      	b.n	8010cd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010cc2:	e006      	b.n	8010cd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8010cc4:	bf00      	nop
 8010cc6:	e004      	b.n	8010cd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8010cc8:	bf00      	nop
 8010cca:	e002      	b.n	8010cd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8010ccc:	bf00      	nop
 8010cce:	e000      	b.n	8010cd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8010cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010cd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d10b      	bne.n	8010cf2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010cda:	4b5c      	ldr	r3, [pc, #368]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010cde:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8010ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010ce6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010cea:	4a58      	ldr	r2, [pc, #352]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010cec:	430b      	orrs	r3, r1
 8010cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8010cf0:	e003      	b.n	8010cfa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010cf2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010cf6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d02:	f002 0308 	and.w	r3, r2, #8
 8010d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010d10:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8010d14:	460b      	mov	r3, r1
 8010d16:	4313      	orrs	r3, r2
 8010d18:	d01e      	beq.n	8010d58 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8010d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010d26:	d10c      	bne.n	8010d42 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010d2c:	3328      	adds	r3, #40	@ 0x28
 8010d2e:	2102      	movs	r1, #2
 8010d30:	4618      	mov	r0, r3
 8010d32:	f001 fecd 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010d36:	4603      	mov	r3, r0
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d002      	beq.n	8010d42 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010d42:	4b42      	ldr	r3, [pc, #264]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010d52:	4a3e      	ldr	r2, [pc, #248]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010d54:	430b      	orrs	r3, r1
 8010d56:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010d58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d60:	f002 0310 	and.w	r3, r2, #16
 8010d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010d68:	2300      	movs	r3, #0
 8010d6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010d6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8010d72:	460b      	mov	r3, r1
 8010d74:	4313      	orrs	r3, r2
 8010d76:	d01e      	beq.n	8010db6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8010d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d84:	d10c      	bne.n	8010da0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010d8a:	3328      	adds	r3, #40	@ 0x28
 8010d8c:	2102      	movs	r1, #2
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f001 fe9e 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010d94:	4603      	mov	r3, r0
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d002      	beq.n	8010da0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010da0:	4b2a      	ldr	r3, [pc, #168]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010da4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8010da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010db0:	4a26      	ldr	r2, [pc, #152]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010db2:	430b      	orrs	r3, r1
 8010db4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dbe:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8010dc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010dcc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	4313      	orrs	r3, r2
 8010dd4:	d040      	beq.n	8010e58 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8010dd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010dda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010de2:	d022      	beq.n	8010e2a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8010de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010de8:	d81b      	bhi.n	8010e22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d003      	beq.n	8010df6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8010dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010df2:	d00b      	beq.n	8010e0c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8010df4:	e015      	b.n	8010e22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010dfa:	3308      	adds	r3, #8
 8010dfc:	2100      	movs	r1, #0
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f001 fdb4 	bl	801296c <RCCEx_PLL2_Config>
 8010e04:	4603      	mov	r3, r0
 8010e06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010e0a:	e00f      	b.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010e0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010e10:	3328      	adds	r3, #40	@ 0x28
 8010e12:	2102      	movs	r1, #2
 8010e14:	4618      	mov	r0, r3
 8010e16:	f001 fe5b 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010e20:	e004      	b.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010e22:	2301      	movs	r3, #1
 8010e24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010e28:	e000      	b.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8010e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010e2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d10d      	bne.n	8010e50 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010e34:	4b05      	ldr	r3, [pc, #20]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e38:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8010e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010e40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010e44:	4a01      	ldr	r2, [pc, #4]	@ (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010e46:	430b      	orrs	r3, r1
 8010e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8010e4a:	e005      	b.n	8010e58 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8010e4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010e54:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e60:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8010e64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010e66:	2300      	movs	r3, #0
 8010e68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010e6a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8010e6e:	460b      	mov	r3, r1
 8010e70:	4313      	orrs	r3, r2
 8010e72:	d03b      	beq.n	8010eec <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8010e74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010e7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010e80:	d01f      	beq.n	8010ec2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8010e82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010e86:	d818      	bhi.n	8010eba <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8010e88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010e8c:	d003      	beq.n	8010e96 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8010e8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010e92:	d007      	beq.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8010e94:	e011      	b.n	8010eba <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010e96:	4b64      	ldr	r3, [pc, #400]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8010e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e9a:	4a63      	ldr	r2, [pc, #396]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8010e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8010ea2:	e00f      	b.n	8010ec4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010ea8:	3328      	adds	r3, #40	@ 0x28
 8010eaa:	2101      	movs	r1, #1
 8010eac:	4618      	mov	r0, r3
 8010eae:	f001 fe0f 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8010eb8:	e004      	b.n	8010ec4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010eba:	2301      	movs	r3, #1
 8010ebc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010ec0:	e000      	b.n	8010ec4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8010ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010ec4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d10b      	bne.n	8010ee4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010ecc:	4b56      	ldr	r3, [pc, #344]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8010ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ed0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8010ed4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010edc:	4a52      	ldr	r2, [pc, #328]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8010ede:	430b      	orrs	r3, r1
 8010ee0:	6553      	str	r3, [r2, #84]	@ 0x54
 8010ee2:	e003      	b.n	8010eec <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ee4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010ee8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8010ef8:	673b      	str	r3, [r7, #112]	@ 0x70
 8010efa:	2300      	movs	r3, #0
 8010efc:	677b      	str	r3, [r7, #116]	@ 0x74
 8010efe:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8010f02:	460b      	mov	r3, r1
 8010f04:	4313      	orrs	r3, r2
 8010f06:	d031      	beq.n	8010f6c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8010f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d003      	beq.n	8010f1a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8010f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f16:	d007      	beq.n	8010f28 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8010f18:	e011      	b.n	8010f3e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010f1a:	4b43      	ldr	r3, [pc, #268]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8010f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f1e:	4a42      	ldr	r2, [pc, #264]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8010f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010f26:	e00e      	b.n	8010f46 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010f2c:	3308      	adds	r3, #8
 8010f2e:	2102      	movs	r1, #2
 8010f30:	4618      	mov	r0, r3
 8010f32:	f001 fd1b 	bl	801296c <RCCEx_PLL2_Config>
 8010f36:	4603      	mov	r3, r0
 8010f38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010f3c:	e003      	b.n	8010f46 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8010f3e:	2301      	movs	r3, #1
 8010f40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010f46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d10a      	bne.n	8010f64 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010f4e:	4b36      	ldr	r3, [pc, #216]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8010f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010f52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010f56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f5c:	4a32      	ldr	r2, [pc, #200]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8010f5e:	430b      	orrs	r3, r1
 8010f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8010f62:	e003      	b.n	8010f6c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010f68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010f6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8010f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010f7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8010f82:	460b      	mov	r3, r1
 8010f84:	4313      	orrs	r3, r2
 8010f86:	d00c      	beq.n	8010fa2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010f8c:	3328      	adds	r3, #40	@ 0x28
 8010f8e:	2102      	movs	r1, #2
 8010f90:	4618      	mov	r0, r3
 8010f92:	f001 fd9d 	bl	8012ad0 <RCCEx_PLL3_Config>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d002      	beq.n	8010fa2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8010fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010faa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8010fae:	663b      	str	r3, [r7, #96]	@ 0x60
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8010fb4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8010fb8:	460b      	mov	r3, r1
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	d03a      	beq.n	8011034 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8010fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010fca:	d018      	beq.n	8010ffe <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8010fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010fd0:	d811      	bhi.n	8010ff6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8010fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fd6:	d014      	beq.n	8011002 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8010fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fdc:	d80b      	bhi.n	8010ff6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d011      	beq.n	8011006 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8010fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010fe6:	d106      	bne.n	8010ff6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8010fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fec:	4a0e      	ldr	r2, [pc, #56]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8010fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8010ff4:	e008      	b.n	8011008 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010ffc:	e004      	b.n	8011008 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8010ffe:	bf00      	nop
 8011000:	e002      	b.n	8011008 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8011002:	bf00      	nop
 8011004:	e000      	b.n	8011008 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8011006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011008:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801100c:	2b00      	cmp	r3, #0
 801100e:	d10d      	bne.n	801102c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011010:	4b05      	ldr	r3, [pc, #20]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8011012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011014:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8011018:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801101c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011020:	4a01      	ldr	r2, [pc, #4]	@ (8011028 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8011022:	430b      	orrs	r3, r1
 8011024:	6553      	str	r3, [r2, #84]	@ 0x54
 8011026:	e005      	b.n	8011034 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8011028:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801102c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011030:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011034:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8011040:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011042:	2300      	movs	r3, #0
 8011044:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011046:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801104a:	460b      	mov	r3, r1
 801104c:	4313      	orrs	r3, r2
 801104e:	d009      	beq.n	8011064 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011050:	4baa      	ldr	r3, [pc, #680]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011054:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801105c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801105e:	4aa7      	ldr	r2, [pc, #668]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011060:	430b      	orrs	r3, r1
 8011062:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8011064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8011070:	653b      	str	r3, [r7, #80]	@ 0x50
 8011072:	2300      	movs	r3, #0
 8011074:	657b      	str	r3, [r7, #84]	@ 0x54
 8011076:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801107a:	460b      	mov	r3, r1
 801107c:	4313      	orrs	r3, r2
 801107e:	d00a      	beq.n	8011096 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8011080:	4b9e      	ldr	r3, [pc, #632]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011082:	691b      	ldr	r3, [r3, #16]
 8011084:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8011088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801108c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011090:	4a9a      	ldr	r2, [pc, #616]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011092:	430b      	orrs	r3, r1
 8011094:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80110a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80110a4:	2300      	movs	r3, #0
 80110a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80110a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80110ac:	460b      	mov	r3, r1
 80110ae:	4313      	orrs	r3, r2
 80110b0:	d009      	beq.n	80110c6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80110b2:	4b92      	ldr	r3, [pc, #584]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80110b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80110ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80110be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110c0:	4a8e      	ldr	r2, [pc, #568]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80110c2:	430b      	orrs	r3, r1
 80110c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80110c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80110ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80110d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80110d4:	2300      	movs	r3, #0
 80110d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80110d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80110dc:	460b      	mov	r3, r1
 80110de:	4313      	orrs	r3, r2
 80110e0:	d00e      	beq.n	8011100 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80110e2:	4b86      	ldr	r3, [pc, #536]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80110e4:	691b      	ldr	r3, [r3, #16]
 80110e6:	4a85      	ldr	r2, [pc, #532]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80110e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80110ec:	6113      	str	r3, [r2, #16]
 80110ee:	4b83      	ldr	r3, [pc, #524]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80110f0:	6919      	ldr	r1, [r3, #16]
 80110f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80110f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80110fa:	4a80      	ldr	r2, [pc, #512]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80110fc:	430b      	orrs	r3, r1
 80110fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011108:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801110c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801110e:	2300      	movs	r3, #0
 8011110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011112:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8011116:	460b      	mov	r3, r1
 8011118:	4313      	orrs	r3, r2
 801111a:	d009      	beq.n	8011130 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801111c:	4b77      	ldr	r3, [pc, #476]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801111e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011120:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8011124:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801112a:	4a74      	ldr	r2, [pc, #464]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801112c:	430b      	orrs	r3, r1
 801112e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011138:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801113c:	633b      	str	r3, [r7, #48]	@ 0x30
 801113e:	2300      	movs	r3, #0
 8011140:	637b      	str	r3, [r7, #52]	@ 0x34
 8011142:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8011146:	460b      	mov	r3, r1
 8011148:	4313      	orrs	r3, r2
 801114a:	d00a      	beq.n	8011162 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801114c:	4b6b      	ldr	r3, [pc, #428]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801114e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011150:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8011154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801115c:	4a67      	ldr	r2, [pc, #412]	@ (80112fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801115e:	430b      	orrs	r3, r1
 8011160:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8011162:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116a:	2100      	movs	r1, #0
 801116c:	62b9      	str	r1, [r7, #40]	@ 0x28
 801116e:	f003 0301 	and.w	r3, r3, #1
 8011172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011174:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8011178:	460b      	mov	r3, r1
 801117a:	4313      	orrs	r3, r2
 801117c:	d011      	beq.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801117e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011182:	3308      	adds	r3, #8
 8011184:	2100      	movs	r1, #0
 8011186:	4618      	mov	r0, r3
 8011188:	f001 fbf0 	bl	801296c <RCCEx_PLL2_Config>
 801118c:	4603      	mov	r3, r0
 801118e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8011192:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011196:	2b00      	cmp	r3, #0
 8011198:	d003      	beq.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801119a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801119e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80111a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80111a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111aa:	2100      	movs	r1, #0
 80111ac:	6239      	str	r1, [r7, #32]
 80111ae:	f003 0302 	and.w	r3, r3, #2
 80111b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80111b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80111b8:	460b      	mov	r3, r1
 80111ba:	4313      	orrs	r3, r2
 80111bc:	d011      	beq.n	80111e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80111be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80111c2:	3308      	adds	r3, #8
 80111c4:	2101      	movs	r1, #1
 80111c6:	4618      	mov	r0, r3
 80111c8:	f001 fbd0 	bl	801296c <RCCEx_PLL2_Config>
 80111cc:	4603      	mov	r3, r0
 80111ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80111d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d003      	beq.n	80111e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80111da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80111de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80111e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80111e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ea:	2100      	movs	r1, #0
 80111ec:	61b9      	str	r1, [r7, #24]
 80111ee:	f003 0304 	and.w	r3, r3, #4
 80111f2:	61fb      	str	r3, [r7, #28]
 80111f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80111f8:	460b      	mov	r3, r1
 80111fa:	4313      	orrs	r3, r2
 80111fc:	d011      	beq.n	8011222 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80111fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011202:	3308      	adds	r3, #8
 8011204:	2102      	movs	r1, #2
 8011206:	4618      	mov	r0, r3
 8011208:	f001 fbb0 	bl	801296c <RCCEx_PLL2_Config>
 801120c:	4603      	mov	r3, r0
 801120e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8011212:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011216:	2b00      	cmp	r3, #0
 8011218:	d003      	beq.n	8011222 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801121a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801121e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8011222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	2100      	movs	r1, #0
 801122c:	6139      	str	r1, [r7, #16]
 801122e:	f003 0308 	and.w	r3, r3, #8
 8011232:	617b      	str	r3, [r7, #20]
 8011234:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011238:	460b      	mov	r3, r1
 801123a:	4313      	orrs	r3, r2
 801123c:	d011      	beq.n	8011262 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801123e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011242:	3328      	adds	r3, #40	@ 0x28
 8011244:	2100      	movs	r1, #0
 8011246:	4618      	mov	r0, r3
 8011248:	f001 fc42 	bl	8012ad0 <RCCEx_PLL3_Config>
 801124c:	4603      	mov	r3, r0
 801124e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8011252:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011256:	2b00      	cmp	r3, #0
 8011258:	d003      	beq.n	8011262 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801125a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801125e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8011262:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126a:	2100      	movs	r1, #0
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	f003 0310 	and.w	r3, r3, #16
 8011272:	60fb      	str	r3, [r7, #12]
 8011274:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011278:	460b      	mov	r3, r1
 801127a:	4313      	orrs	r3, r2
 801127c:	d011      	beq.n	80112a2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801127e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011282:	3328      	adds	r3, #40	@ 0x28
 8011284:	2101      	movs	r1, #1
 8011286:	4618      	mov	r0, r3
 8011288:	f001 fc22 	bl	8012ad0 <RCCEx_PLL3_Config>
 801128c:	4603      	mov	r3, r0
 801128e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8011292:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011296:	2b00      	cmp	r3, #0
 8011298:	d003      	beq.n	80112a2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801129a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801129e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80112a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80112a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112aa:	2100      	movs	r1, #0
 80112ac:	6039      	str	r1, [r7, #0]
 80112ae:	f003 0320 	and.w	r3, r3, #32
 80112b2:	607b      	str	r3, [r7, #4]
 80112b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80112b8:	460b      	mov	r3, r1
 80112ba:	4313      	orrs	r3, r2
 80112bc:	d011      	beq.n	80112e2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80112be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80112c2:	3328      	adds	r3, #40	@ 0x28
 80112c4:	2102      	movs	r1, #2
 80112c6:	4618      	mov	r0, r3
 80112c8:	f001 fc02 	bl	8012ad0 <RCCEx_PLL3_Config>
 80112cc:	4603      	mov	r3, r0
 80112ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80112d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d003      	beq.n	80112e2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80112de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80112e2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d101      	bne.n	80112ee <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80112ea:	2300      	movs	r3, #0
 80112ec:	e000      	b.n	80112f0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80112ee:	2301      	movs	r3, #1
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80112f6:	46bd      	mov	sp, r7
 80112f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80112fc:	58024400 	.word	0x58024400

08011300 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011300:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011304:	b08d      	sub	sp, #52	@ 0x34
 8011306:	af00      	add	r7, sp, #0
 8011308:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 801130a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801130c:	4aad      	ldr	r2, [pc, #692]	@ (80115c4 <HAL_RCCEx_GetPeriphCLKConfig+0x2c4>)
 801130e:	f04f 0300 	mov.w	r3, #0
 8011312:	e9c1 2300 	strd	r2, r3, [r1]
    RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
 8011316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131c:	f042 0408 	orr.w	r4, r2, #8
 8011320:	461d      	mov	r5, r3
 8011322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011324:	e9c3 4500 	strd	r4, r5, [r3]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
 8011328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132e:	f442 7800 	orr.w	r8, r2, #512	@ 0x200
 8011332:	4699      	mov	r9, r3
 8011334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011336:	e9c3 8900 	strd	r8, r9, [r3]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 801133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011340:	f442 6180 	orr.w	r1, r2, #1024	@ 0x400
 8011344:	6239      	str	r1, [r7, #32]
 8011346:	627b      	str	r3, [r7, #36]	@ 0x24
 8011348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801134a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801134e:	e9c3 1200 	strd	r1, r2, [r3]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 8011352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011358:	f442 6100 	orr.w	r1, r2, #2048	@ 0x800
 801135c:	61b9      	str	r1, [r7, #24]
 801135e:	61fb      	str	r3, [r7, #28]
 8011360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011362:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011366:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
 801136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011370:	f042 7100 	orr.w	r1, r2, #33554432	@ 0x2000000
 8011374:	6139      	str	r1, [r7, #16]
 8011376:	617b      	str	r3, [r7, #20]
 8011378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801137a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801137e:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
 8011382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011388:	f042 5180 	orr.w	r1, r2, #268435456	@ 0x10000000
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	60fb      	str	r3, [r7, #12]
 8011390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011392:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011396:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 801139a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a0:	f042 5100 	orr.w	r1, r2, #536870912	@ 0x20000000
 80113a4:	6039      	str	r1, [r7, #0]
 80113a6:	607b      	str	r3, [r7, #4]
 80113a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80113ae:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* LTDC */
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
 80113b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b8:	f042 6a80 	orr.w	sl, r2, #67108864	@ 0x4000000
 80113bc:	469b      	mov	fp, r3
 80113be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c0:	e9c3 ab00 	strd	sl, fp, [r3]
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos);
 80113c4:	4b80      	ldr	r3, [pc, #512]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80113c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113c8:	0d1b      	lsrs	r3, r3, #20
 80113ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80113ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d0:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos) + 1U;
 80113d2:	4b7d      	ldr	r3, [pc, #500]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80113d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113da:	1c5a      	adds	r2, r3, #1
 80113dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113de:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos) + 1U;
 80113e0:	4b79      	ldr	r3, [pc, #484]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80113e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113e4:	0e1b      	lsrs	r3, r3, #24
 80113e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113ea:	1c5a      	adds	r2, r3, #1
 80113ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ee:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos) + 1U;
 80113f0:	4b75      	ldr	r3, [pc, #468]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80113f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113f4:	0a5b      	lsrs	r3, r3, #9
 80113f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113fa:	1c5a      	adds	r2, r3, #1
 80113fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113fe:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos) + 1U;
 8011400:	4b71      	ldr	r3, [pc, #452]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011404:	0c1b      	lsrs	r3, r3, #16
 8011406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801140a:	1c5a      	adds	r2, r3, #1
 801140c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801140e:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 8011410:	4b6d      	ldr	r3, [pc, #436]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011414:	0a9b      	lsrs	r3, r3, #10
 8011416:	f003 0203 	and.w	r2, r3, #3
 801141a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801141c:	63da      	str	r2, [r3, #60]	@ 0x3c
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 801141e:	4b6a      	ldr	r3, [pc, #424]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011422:	0a5b      	lsrs	r3, r3, #9
 8011424:	f003 0201 	and.w	r2, r3, #1
 8011428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801142a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos);
 801142c:	4b66      	ldr	r3, [pc, #408]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011430:	0b1b      	lsrs	r3, r3, #12
 8011432:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011438:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos) + 1U;
 801143a:	4b63      	ldr	r3, [pc, #396]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801143c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801143e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011442:	1c5a      	adds	r2, r3, #1
 8011444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011446:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos) + 1U;
 8011448:	4b5f      	ldr	r3, [pc, #380]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801144a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801144c:	0e1b      	lsrs	r3, r3, #24
 801144e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011452:	1c5a      	adds	r2, r3, #1
 8011454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011456:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos) + 1U;
 8011458:	4b5b      	ldr	r3, [pc, #364]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801145a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801145c:	0a5b      	lsrs	r3, r3, #9
 801145e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011462:	1c5a      	adds	r2, r3, #1
 8011464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011466:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos) + 1U;
 8011468:	4b57      	ldr	r3, [pc, #348]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801146a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801146c:	0c1b      	lsrs	r3, r3, #16
 801146e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011472:	1c5a      	adds	r2, r3, #1
 8011474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011476:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 8011478:	4b53      	ldr	r3, [pc, #332]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801147a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801147c:	099b      	lsrs	r3, r3, #6
 801147e:	f003 0203 	and.w	r2, r3, #3
 8011482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011484:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 8011486:	4b50      	ldr	r3, [pc, #320]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801148a:	095b      	lsrs	r3, r3, #5
 801148c:	f003 0201 	and.w	r2, r3, #1
 8011490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011492:	621a      	str	r2, [r3, #32]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 8011494:	4b4c      	ldr	r3, [pc, #304]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011498:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801149c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801149e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 80114a2:	4b49      	ldr	r3, [pc, #292]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80114a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114a6:	f003 0207 	and.w	r2, r3, #7
 80114aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 80114ae:	4b46      	ldr	r3, [pc, #280]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80114b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114b2:	f003 0207 	and.w	r2, r3, #7
 80114b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 80114bc:	4b42      	ldr	r3, [pc, #264]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80114be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114c0:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 80114c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 80114ca:	4b3f      	ldr	r3, [pc, #252]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80114cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80114d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 80114d8:	4b3b      	ldr	r3, [pc, #236]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80114da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80114e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 80114e6:	4b38      	ldr	r3, [pc, #224]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80114e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114ea:	f403 4260 	and.w	r2, r3, #57344	@ 0xe000
 80114ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 80114f4:	4b34      	ldr	r3, [pc, #208]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80114f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114f8:	f003 0207 	and.w	r2, r3, #7
 80114fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114fe:	65da      	str	r2, [r3, #92]	@ 0x5c
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
 8011500:	4b31      	ldr	r3, [pc, #196]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011504:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8011508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801150a:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 801150c:	4b2e      	ldr	r3, [pc, #184]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011510:	f403 0260 	and.w	r2, r3, #14680064	@ 0xe00000
 8011514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011516:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 801151a:	4b2b      	ldr	r3, [pc, #172]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801151e:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8011522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011524:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 8011528:	4b27      	ldr	r3, [pc, #156]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801152a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801152c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8011530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011532:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 8011536:	4b24      	ldr	r3, [pc, #144]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801153a:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 801153e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011540:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 8011544:	4b20      	ldr	r3, [pc, #128]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011548:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 801154c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801154e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 8011550:	4b1d      	ldr	r3, [pc, #116]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011554:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8011558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801155a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
 801155e:	4b1a      	ldr	r3, [pc, #104]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011560:	691b      	ldr	r3, [r3, #16]
 8011562:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8011566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011568:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 801156c:	4b16      	ldr	r3, [pc, #88]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801156e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011570:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8011574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011576:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 801157a:	4b13      	ldr	r3, [pc, #76]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801157c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801157e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8011582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011584:	679a      	str	r2, [r3, #120]	@ 0x78
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 8011586:	4b10      	ldr	r3, [pc, #64]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801158a:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 801158e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011590:	671a      	str	r2, [r3, #112]	@ 0x70
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8011592:	4b0d      	ldr	r3, [pc, #52]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011596:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 801159a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801159c:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 801159e:	4b0a      	ldr	r3, [pc, #40]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80115a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115a2:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
 80115a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a8:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 80115aa:	4b07      	ldr	r3, [pc, #28]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80115ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115ae:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
 80115b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b4:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 80115b6:	4b04      	ldr	r3, [pc, #16]	@ (80115c8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80115b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80115be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c0:	e004      	b.n	80115cc <HAL_RCCEx_GetPeriphCLKConfig+0x2cc>
 80115c2:	bf00      	nop
 80115c4:	c9fff1f7 	.word	0xc9fff1f7
 80115c8:	58024400 	.word	0x58024400
 80115cc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 80115d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011648 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 80115d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115d4:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 80115d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115da:	675a      	str	r2, [r3, #116]	@ 0x74
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 80115dc:	4b1a      	ldr	r3, [pc, #104]	@ (8011648 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 80115de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80115e0:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80115e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 80115ea:	4b17      	ldr	r3, [pc, #92]	@ (8011648 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 80115ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80115ee:	f003 0203 	and.w	r2, r3, #3
 80115f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f4:	649a      	str	r2, [r3, #72]	@ 0x48
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
 80115f6:	4b14      	ldr	r3, [pc, #80]	@ (8011648 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 80115f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80115fa:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80115fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011600:	64da      	str	r2, [r3, #76]	@ 0x4c
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */

#if defined(DSI)
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
 8011602:	4b11      	ldr	r3, [pc, #68]	@ (8011648 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 8011604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011606:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801160a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801160c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 801160e:	4b0e      	ldr	r3, [pc, #56]	@ (8011648 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 8011610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011612:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 8011616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011618:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 801161a:	4b0b      	ldr	r3, [pc, #44]	@ (8011648 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 801161c:	691b      	ldr	r3, [r3, #16]
 801161e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011622:	2b00      	cmp	r3, #0
 8011624:	d104      	bne.n	8011630 <HAL_RCCEx_GetPeriphCLKConfig+0x330>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8011626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011628:	2200      	movs	r2, #0
 801162a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 801162e:	e004      	b.n	801163a <HAL_RCCEx_GetPeriphCLKConfig+0x33a>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8011630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011632:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011636:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 801163a:	bf00      	nop
 801163c:	3734      	adds	r7, #52	@ 0x34
 801163e:	46bd      	mov	sp, r7
 8011640:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011644:	4770      	bx	lr
 8011646:	bf00      	nop
 8011648:	58024400 	.word	0x58024400

0801164c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b090      	sub	sp, #64	@ 0x40
 8011650:	af00      	add	r7, sp, #0
 8011652:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8011656:	e9d7 2300 	ldrd	r2, r3, [r7]
 801165a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801165e:	430b      	orrs	r3, r1
 8011660:	f040 8094 	bne.w	801178c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8011664:	4b9e      	ldr	r3, [pc, #632]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011668:	f003 0307 	and.w	r3, r3, #7
 801166c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801166e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011670:	2b04      	cmp	r3, #4
 8011672:	f200 8087 	bhi.w	8011784 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8011676:	a201      	add	r2, pc, #4	@ (adr r2, 801167c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8011678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801167c:	08011691 	.word	0x08011691
 8011680:	080116b9 	.word	0x080116b9
 8011684:	080116e1 	.word	0x080116e1
 8011688:	0801177d 	.word	0x0801177d
 801168c:	08011709 	.word	0x08011709
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011690:	4b93      	ldr	r3, [pc, #588]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011698:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801169c:	d108      	bne.n	80116b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801169e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80116a2:	4618      	mov	r0, r3
 80116a4:	f001 f810 	bl	80126c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80116a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80116ac:	f000 bd45 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80116b0:	2300      	movs	r3, #0
 80116b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80116b4:	f000 bd41 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80116b8:	4b89      	ldr	r3, [pc, #548]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80116c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80116c4:	d108      	bne.n	80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116c6:	f107 0318 	add.w	r3, r7, #24
 80116ca:	4618      	mov	r0, r3
 80116cc:	f000 fd54 	bl	8012178 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80116d4:	f000 bd31 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80116d8:	2300      	movs	r3, #0
 80116da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80116dc:	f000 bd2d 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80116e0:	4b7f      	ldr	r3, [pc, #508]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80116e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80116ec:	d108      	bne.n	8011700 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116ee:	f107 030c 	add.w	r3, r7, #12
 80116f2:	4618      	mov	r0, r3
 80116f4:	f000 fe94 	bl	8012420 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80116fc:	f000 bd1d 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011700:	2300      	movs	r3, #0
 8011702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011704:	f000 bd19 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011708:	4b75      	ldr	r3, [pc, #468]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801170a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801170c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011710:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011712:	4b73      	ldr	r3, [pc, #460]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	f003 0304 	and.w	r3, r3, #4
 801171a:	2b04      	cmp	r3, #4
 801171c:	d10c      	bne.n	8011738 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801171e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011720:	2b00      	cmp	r3, #0
 8011722:	d109      	bne.n	8011738 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011724:	4b6e      	ldr	r3, [pc, #440]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	08db      	lsrs	r3, r3, #3
 801172a:	f003 0303 	and.w	r3, r3, #3
 801172e:	4a6d      	ldr	r2, [pc, #436]	@ (80118e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8011730:	fa22 f303 	lsr.w	r3, r2, r3
 8011734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011736:	e01f      	b.n	8011778 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011738:	4b69      	ldr	r3, [pc, #420]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011744:	d106      	bne.n	8011754 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8011746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801174c:	d102      	bne.n	8011754 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801174e:	4b66      	ldr	r3, [pc, #408]	@ (80118e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8011750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011752:	e011      	b.n	8011778 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011754:	4b62      	ldr	r3, [pc, #392]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801175c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011760:	d106      	bne.n	8011770 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8011762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011768:	d102      	bne.n	8011770 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801176a:	4b60      	ldr	r3, [pc, #384]	@ (80118ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801176c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801176e:	e003      	b.n	8011778 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011770:	2300      	movs	r3, #0
 8011772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011774:	f000 bce1 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011778:	f000 bcdf 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801177c:	4b5c      	ldr	r3, [pc, #368]	@ (80118f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011780:	f000 bcdb 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011784:	2300      	movs	r3, #0
 8011786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011788:	f000 bcd7 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801178c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011790:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8011794:	430b      	orrs	r3, r1
 8011796:	f040 80ad 	bne.w	80118f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801179a:	4b51      	ldr	r3, [pc, #324]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801179c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801179e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80117a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80117a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117aa:	d056      	beq.n	801185a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80117ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117b2:	f200 8090 	bhi.w	80118d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80117b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80117ba:	f000 8088 	beq.w	80118ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80117be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80117c2:	f200 8088 	bhi.w	80118d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80117c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117c8:	2b80      	cmp	r3, #128	@ 0x80
 80117ca:	d032      	beq.n	8011832 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80117cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ce:	2b80      	cmp	r3, #128	@ 0x80
 80117d0:	f200 8081 	bhi.w	80118d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80117d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d003      	beq.n	80117e2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80117da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117dc:	2b40      	cmp	r3, #64	@ 0x40
 80117de:	d014      	beq.n	801180a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80117e0:	e079      	b.n	80118d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80117e2:	4b3f      	ldr	r3, [pc, #252]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80117ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80117ee:	d108      	bne.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80117f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80117f4:	4618      	mov	r0, r3
 80117f6:	f000 ff67 	bl	80126c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80117fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80117fe:	f000 bc9c 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011802:	2300      	movs	r3, #0
 8011804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011806:	f000 bc98 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801180a:	4b35      	ldr	r3, [pc, #212]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011816:	d108      	bne.n	801182a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011818:	f107 0318 	add.w	r3, r7, #24
 801181c:	4618      	mov	r0, r3
 801181e:	f000 fcab 	bl	8012178 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011822:	69bb      	ldr	r3, [r7, #24]
 8011824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011826:	f000 bc88 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801182a:	2300      	movs	r3, #0
 801182c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801182e:	f000 bc84 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011832:	4b2b      	ldr	r3, [pc, #172]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801183a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801183e:	d108      	bne.n	8011852 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011840:	f107 030c 	add.w	r3, r7, #12
 8011844:	4618      	mov	r0, r3
 8011846:	f000 fdeb 	bl	8012420 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801184e:	f000 bc74 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011852:	2300      	movs	r3, #0
 8011854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011856:	f000 bc70 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801185a:	4b21      	ldr	r3, [pc, #132]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801185e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011862:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011864:	4b1e      	ldr	r3, [pc, #120]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	f003 0304 	and.w	r3, r3, #4
 801186c:	2b04      	cmp	r3, #4
 801186e:	d10c      	bne.n	801188a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8011870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011872:	2b00      	cmp	r3, #0
 8011874:	d109      	bne.n	801188a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011876:	4b1a      	ldr	r3, [pc, #104]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	08db      	lsrs	r3, r3, #3
 801187c:	f003 0303 	and.w	r3, r3, #3
 8011880:	4a18      	ldr	r2, [pc, #96]	@ (80118e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8011882:	fa22 f303 	lsr.w	r3, r2, r3
 8011886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011888:	e01f      	b.n	80118ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801188a:	4b15      	ldr	r3, [pc, #84]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011896:	d106      	bne.n	80118a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8011898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801189a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801189e:	d102      	bne.n	80118a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80118a0:	4b11      	ldr	r3, [pc, #68]	@ (80118e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80118a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80118a4:	e011      	b.n	80118ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80118a6:	4b0e      	ldr	r3, [pc, #56]	@ (80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80118ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80118b2:	d106      	bne.n	80118c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80118b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80118ba:	d102      	bne.n	80118c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80118bc:	4b0b      	ldr	r3, [pc, #44]	@ (80118ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80118be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80118c0:	e003      	b.n	80118ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80118c2:	2300      	movs	r3, #0
 80118c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80118c6:	f000 bc38 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80118ca:	f000 bc36 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80118ce:	4b08      	ldr	r3, [pc, #32]	@ (80118f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80118d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80118d2:	f000 bc32 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80118d6:	2300      	movs	r3, #0
 80118d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80118da:	f000 bc2e 	b.w	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80118de:	bf00      	nop
 80118e0:	58024400 	.word	0x58024400
 80118e4:	03d09000 	.word	0x03d09000
 80118e8:	003d0900 	.word	0x003d0900
 80118ec:	017d7840 	.word	0x017d7840
 80118f0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80118f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80118f8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80118fc:	430b      	orrs	r3, r1
 80118fe:	f040 809c 	bne.w	8011a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8011902:	4b9e      	ldr	r3, [pc, #632]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011906:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801190a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801190c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801190e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011912:	d054      	beq.n	80119be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8011914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011916:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801191a:	f200 808b 	bhi.w	8011a34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801191e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011920:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011924:	f000 8083 	beq.w	8011a2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8011928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801192a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801192e:	f200 8081 	bhi.w	8011a34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8011932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011938:	d02f      	beq.n	801199a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801193a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801193c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011940:	d878      	bhi.n	8011a34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8011942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011944:	2b00      	cmp	r3, #0
 8011946:	d004      	beq.n	8011952 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8011948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801194a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801194e:	d012      	beq.n	8011976 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8011950:	e070      	b.n	8011a34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011952:	4b8a      	ldr	r3, [pc, #552]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801195a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801195e:	d107      	bne.n	8011970 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011964:	4618      	mov	r0, r3
 8011966:	f000 feaf 	bl	80126c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801196a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801196c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801196e:	e3e4      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011970:	2300      	movs	r3, #0
 8011972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011974:	e3e1      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011976:	4b81      	ldr	r3, [pc, #516]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801197e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011982:	d107      	bne.n	8011994 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011984:	f107 0318 	add.w	r3, r7, #24
 8011988:	4618      	mov	r0, r3
 801198a:	f000 fbf5 	bl	8012178 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801198e:	69bb      	ldr	r3, [r7, #24]
 8011990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011992:	e3d2      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011994:	2300      	movs	r3, #0
 8011996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011998:	e3cf      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801199a:	4b78      	ldr	r3, [pc, #480]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80119a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80119a6:	d107      	bne.n	80119b8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80119a8:	f107 030c 	add.w	r3, r7, #12
 80119ac:	4618      	mov	r0, r3
 80119ae:	f000 fd37 	bl	8012420 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80119b6:	e3c0      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80119b8:	2300      	movs	r3, #0
 80119ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80119bc:	e3bd      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80119be:	4b6f      	ldr	r3, [pc, #444]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80119c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80119c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80119c8:	4b6c      	ldr	r3, [pc, #432]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	f003 0304 	and.w	r3, r3, #4
 80119d0:	2b04      	cmp	r3, #4
 80119d2:	d10c      	bne.n	80119ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80119d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d109      	bne.n	80119ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80119da:	4b68      	ldr	r3, [pc, #416]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	08db      	lsrs	r3, r3, #3
 80119e0:	f003 0303 	and.w	r3, r3, #3
 80119e4:	4a66      	ldr	r2, [pc, #408]	@ (8011b80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80119e6:	fa22 f303 	lsr.w	r3, r2, r3
 80119ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80119ec:	e01e      	b.n	8011a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80119ee:	4b63      	ldr	r3, [pc, #396]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80119f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80119fa:	d106      	bne.n	8011a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80119fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011a02:	d102      	bne.n	8011a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011a04:	4b5f      	ldr	r3, [pc, #380]	@ (8011b84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8011a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a08:	e010      	b.n	8011a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011a12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011a16:	d106      	bne.n	8011a26 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8011a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011a1e:	d102      	bne.n	8011a26 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011a20:	4b59      	ldr	r3, [pc, #356]	@ (8011b88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8011a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a24:	e002      	b.n	8011a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011a26:	2300      	movs	r3, #0
 8011a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011a2a:	e386      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011a2c:	e385      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011a2e:	4b57      	ldr	r3, [pc, #348]	@ (8011b8c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a32:	e382      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011a34:	2300      	movs	r3, #0
 8011a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a38:	e37f      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8011a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a3e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8011a42:	430b      	orrs	r3, r1
 8011a44:	f040 80a7 	bne.w	8011b96 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8011a48:	4b4c      	ldr	r3, [pc, #304]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a4c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8011a50:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8011a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011a58:	d055      	beq.n	8011b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8011a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011a60:	f200 8096 	bhi.w	8011b90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011a6a:	f000 8084 	beq.w	8011b76 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8011a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011a74:	f200 808c 	bhi.w	8011b90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011a7e:	d030      	beq.n	8011ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8011a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011a86:	f200 8083 	bhi.w	8011b90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d004      	beq.n	8011a9a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8011a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011a96:	d012      	beq.n	8011abe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8011a98:	e07a      	b.n	8011b90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011a9a:	4b38      	ldr	r3, [pc, #224]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011aa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011aa6:	d107      	bne.n	8011ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011aac:	4618      	mov	r0, r3
 8011aae:	f000 fe0b 	bl	80126c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ab6:	e340      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011abc:	e33d      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011abe:	4b2f      	ldr	r3, [pc, #188]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011aca:	d107      	bne.n	8011adc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011acc:	f107 0318 	add.w	r3, r7, #24
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f000 fb51 	bl	8012178 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ada:	e32e      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011adc:	2300      	movs	r3, #0
 8011ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ae0:	e32b      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011ae2:	4b26      	ldr	r3, [pc, #152]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011aee:	d107      	bne.n	8011b00 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011af0:	f107 030c 	add.w	r3, r7, #12
 8011af4:	4618      	mov	r0, r3
 8011af6:	f000 fc93 	bl	8012420 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011afe:	e31c      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b00:	2300      	movs	r3, #0
 8011b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011b04:	e319      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011b06:	4b1d      	ldr	r3, [pc, #116]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011b0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011b10:	4b1a      	ldr	r3, [pc, #104]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f003 0304 	and.w	r3, r3, #4
 8011b18:	2b04      	cmp	r3, #4
 8011b1a:	d10c      	bne.n	8011b36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8011b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d109      	bne.n	8011b36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011b22:	4b16      	ldr	r3, [pc, #88]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	08db      	lsrs	r3, r3, #3
 8011b28:	f003 0303 	and.w	r3, r3, #3
 8011b2c:	4a14      	ldr	r2, [pc, #80]	@ (8011b80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8011b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8011b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b34:	e01e      	b.n	8011b74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011b36:	4b11      	ldr	r3, [pc, #68]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b42:	d106      	bne.n	8011b52 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8011b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011b4a:	d102      	bne.n	8011b52 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8011b84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8011b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b50:	e010      	b.n	8011b74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011b52:	4b0a      	ldr	r3, [pc, #40]	@ (8011b7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011b5e:	d106      	bne.n	8011b6e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8011b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011b66:	d102      	bne.n	8011b6e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011b68:	4b07      	ldr	r3, [pc, #28]	@ (8011b88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8011b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b6c:	e002      	b.n	8011b74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011b72:	e2e2      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011b74:	e2e1      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011b76:	4b05      	ldr	r3, [pc, #20]	@ (8011b8c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011b7a:	e2de      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011b7c:	58024400 	.word	0x58024400
 8011b80:	03d09000 	.word	0x03d09000
 8011b84:	003d0900 	.word	0x003d0900
 8011b88:	017d7840 	.word	0x017d7840
 8011b8c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8011b90:	2300      	movs	r3, #0
 8011b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011b94:	e2d1      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8011b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b9a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8011b9e:	430b      	orrs	r3, r1
 8011ba0:	f040 809c 	bne.w	8011cdc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8011ba4:	4b93      	ldr	r3, [pc, #588]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ba8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8011bac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011bb4:	d054      	beq.n	8011c60 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8011bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011bbc:	f200 808b 	bhi.w	8011cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011bc6:	f000 8083 	beq.w	8011cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8011bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011bd0:	f200 8081 	bhi.w	8011cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011bda:	d02f      	beq.n	8011c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8011bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011be2:	d878      	bhi.n	8011cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d004      	beq.n	8011bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8011bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011bf0:	d012      	beq.n	8011c18 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8011bf2:	e070      	b.n	8011cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011bf4:	4b7f      	ldr	r3, [pc, #508]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011c00:	d107      	bne.n	8011c12 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011c06:	4618      	mov	r0, r3
 8011c08:	f000 fd5e 	bl	80126c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011c10:	e293      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011c12:	2300      	movs	r3, #0
 8011c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c16:	e290      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011c18:	4b76      	ldr	r3, [pc, #472]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011c24:	d107      	bne.n	8011c36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c26:	f107 0318 	add.w	r3, r7, #24
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f000 faa4 	bl	8012178 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011c30:	69bb      	ldr	r3, [r7, #24]
 8011c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011c34:	e281      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011c36:	2300      	movs	r3, #0
 8011c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c3a:	e27e      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011c3c:	4b6d      	ldr	r3, [pc, #436]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011c48:	d107      	bne.n	8011c5a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c4a:	f107 030c 	add.w	r3, r7, #12
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f000 fbe6 	bl	8012420 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011c58:	e26f      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c5e:	e26c      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011c60:	4b64      	ldr	r3, [pc, #400]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011c64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011c68:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011c6a:	4b62      	ldr	r3, [pc, #392]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	f003 0304 	and.w	r3, r3, #4
 8011c72:	2b04      	cmp	r3, #4
 8011c74:	d10c      	bne.n	8011c90 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8011c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d109      	bne.n	8011c90 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011c7c:	4b5d      	ldr	r3, [pc, #372]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	08db      	lsrs	r3, r3, #3
 8011c82:	f003 0303 	and.w	r3, r3, #3
 8011c86:	4a5c      	ldr	r2, [pc, #368]	@ (8011df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011c88:	fa22 f303 	lsr.w	r3, r2, r3
 8011c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c8e:	e01e      	b.n	8011cce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011c90:	4b58      	ldr	r3, [pc, #352]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c9c:	d106      	bne.n	8011cac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8011c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ca0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011ca4:	d102      	bne.n	8011cac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011ca6:	4b55      	ldr	r3, [pc, #340]	@ (8011dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011caa:	e010      	b.n	8011cce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011cac:	4b51      	ldr	r3, [pc, #324]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011cb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011cb8:	d106      	bne.n	8011cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8011cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011cc0:	d102      	bne.n	8011cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8011e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011cc6:	e002      	b.n	8011cce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011ccc:	e235      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011cce:	e234      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8011e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8011cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011cd4:	e231      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011cda:	e22e      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8011cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ce0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8011ce4:	430b      	orrs	r3, r1
 8011ce6:	f040 808f 	bne.w	8011e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8011cea:	4b42      	ldr	r3, [pc, #264]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011cee:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8011cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8011cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cf6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011cfa:	d06b      	beq.n	8011dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8011cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cfe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011d02:	d874      	bhi.n	8011dee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011d0a:	d056      	beq.n	8011dba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8011d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011d12:	d86c      	bhi.n	8011dee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011d1a:	d03b      	beq.n	8011d94 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8011d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011d22:	d864      	bhi.n	8011dee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011d2a:	d021      	beq.n	8011d70 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8011d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011d32:	d85c      	bhi.n	8011dee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d004      	beq.n	8011d44 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8011d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d40:	d004      	beq.n	8011d4c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8011d42:	e054      	b.n	8011dee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8011d44:	f7fe f824 	bl	800fd90 <HAL_RCC_GetPCLK1Freq>
 8011d48:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011d4a:	e1f6      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011d4c:	4b29      	ldr	r3, [pc, #164]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011d54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011d58:	d107      	bne.n	8011d6a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d5a:	f107 0318 	add.w	r3, r7, #24
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f000 fa0a 	bl	8012178 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d68:	e1e7      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011d6e:	e1e4      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011d70:	4b20      	ldr	r3, [pc, #128]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011d7c:	d107      	bne.n	8011d8e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d7e:	f107 030c 	add.w	r3, r7, #12
 8011d82:	4618      	mov	r0, r3
 8011d84:	f000 fb4c 	bl	8012420 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d8c:	e1d5      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011d92:	e1d2      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011d94:	4b17      	ldr	r3, [pc, #92]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f003 0304 	and.w	r3, r3, #4
 8011d9c:	2b04      	cmp	r3, #4
 8011d9e:	d109      	bne.n	8011db4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011da0:	4b14      	ldr	r3, [pc, #80]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	08db      	lsrs	r3, r3, #3
 8011da6:	f003 0303 	and.w	r3, r3, #3
 8011daa:	4a13      	ldr	r2, [pc, #76]	@ (8011df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011dac:	fa22 f303 	lsr.w	r3, r2, r3
 8011db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011db2:	e1c2      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011db4:	2300      	movs	r3, #0
 8011db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011db8:	e1bf      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011dba:	4b0e      	ldr	r3, [pc, #56]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011dc6:	d102      	bne.n	8011dce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8011dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8011dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011dcc:	e1b5      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011dd2:	e1b2      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011dd4:	4b07      	ldr	r3, [pc, #28]	@ (8011df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011ddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011de0:	d102      	bne.n	8011de8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8011de2:	4b07      	ldr	r3, [pc, #28]	@ (8011e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011de6:	e1a8      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011de8:	2300      	movs	r3, #0
 8011dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011dec:	e1a5      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011dee:	2300      	movs	r3, #0
 8011df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011df2:	e1a2      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011df4:	58024400 	.word	0x58024400
 8011df8:	03d09000 	.word	0x03d09000
 8011dfc:	003d0900 	.word	0x003d0900
 8011e00:	017d7840 	.word	0x017d7840
 8011e04:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8011e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e0c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8011e10:	430b      	orrs	r3, r1
 8011e12:	d173      	bne.n	8011efc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8011e14:	4b9c      	ldr	r3, [pc, #624]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011e1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011e24:	d02f      	beq.n	8011e86 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8011e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011e2c:	d863      	bhi.n	8011ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8011e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d004      	beq.n	8011e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8011e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011e3a:	d012      	beq.n	8011e62 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8011e3c:	e05b      	b.n	8011ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011e3e:	4b92      	ldr	r3, [pc, #584]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011e46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011e4a:	d107      	bne.n	8011e5c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e4c:	f107 0318 	add.w	r3, r7, #24
 8011e50:	4618      	mov	r0, r3
 8011e52:	f000 f991 	bl	8012178 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e5a:	e16e      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e60:	e16b      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011e62:	4b89      	ldr	r3, [pc, #548]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e6e:	d107      	bne.n	8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e70:	f107 030c 	add.w	r3, r7, #12
 8011e74:	4618      	mov	r0, r3
 8011e76:	f000 fad3 	bl	8012420 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e7e:	e15c      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e80:	2300      	movs	r3, #0
 8011e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e84:	e159      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011e86:	4b80      	ldr	r3, [pc, #512]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011e8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011e8e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011e90:	4b7d      	ldr	r3, [pc, #500]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	f003 0304 	and.w	r3, r3, #4
 8011e98:	2b04      	cmp	r3, #4
 8011e9a:	d10c      	bne.n	8011eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8011e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d109      	bne.n	8011eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011ea2:	4b79      	ldr	r3, [pc, #484]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	08db      	lsrs	r3, r3, #3
 8011ea8:	f003 0303 	and.w	r3, r3, #3
 8011eac:	4a77      	ldr	r2, [pc, #476]	@ (801208c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011eae:	fa22 f303 	lsr.w	r3, r2, r3
 8011eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011eb4:	e01e      	b.n	8011ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011eb6:	4b74      	ldr	r3, [pc, #464]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011ec2:	d106      	bne.n	8011ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8011ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ec6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011eca:	d102      	bne.n	8011ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011ecc:	4b70      	ldr	r3, [pc, #448]	@ (8012090 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8011ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ed0:	e010      	b.n	8011ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011eda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011ede:	d106      	bne.n	8011eee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8011ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011ee6:	d102      	bne.n	8011eee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011ee8:	4b6a      	ldr	r3, [pc, #424]	@ (8012094 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011eec:	e002      	b.n	8011ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011ef2:	e122      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011ef4:	e121      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011efa:	e11e      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8011efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f00:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8011f04:	430b      	orrs	r3, r1
 8011f06:	d133      	bne.n	8011f70 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8011f08:	4b5f      	ldr	r3, [pc, #380]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011f10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d004      	beq.n	8011f22 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8011f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011f1e:	d012      	beq.n	8011f46 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8011f20:	e023      	b.n	8011f6a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011f22:	4b59      	ldr	r3, [pc, #356]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011f2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011f2e:	d107      	bne.n	8011f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011f30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011f34:	4618      	mov	r0, r3
 8011f36:	f000 fbc7 	bl	80126c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f3e:	e0fc      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f40:	2300      	movs	r3, #0
 8011f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f44:	e0f9      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011f46:	4b50      	ldr	r3, [pc, #320]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011f4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011f52:	d107      	bne.n	8011f64 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011f54:	f107 0318 	add.w	r3, r7, #24
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f000 f90d 	bl	8012178 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011f5e:	6a3b      	ldr	r3, [r7, #32]
 8011f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f62:	e0ea      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f64:	2300      	movs	r3, #0
 8011f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f68:	e0e7      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f6e:	e0e4      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f74:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8011f78:	430b      	orrs	r3, r1
 8011f7a:	f040 808d 	bne.w	8012098 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8011f7e:	4b42      	ldr	r3, [pc, #264]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f82:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8011f86:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011f8e:	d06b      	beq.n	8012068 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8011f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011f96:	d874      	bhi.n	8012082 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f9e:	d056      	beq.n	801204e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8011fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011fa6:	d86c      	bhi.n	8012082 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011faa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011fae:	d03b      	beq.n	8012028 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8011fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011fb6:	d864      	bhi.n	8012082 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011fbe:	d021      	beq.n	8012004 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8011fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011fc6:	d85c      	bhi.n	8012082 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d004      	beq.n	8011fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8011fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011fd4:	d004      	beq.n	8011fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8011fd6:	e054      	b.n	8012082 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8011fd8:	f000 f8b8 	bl	801214c <HAL_RCCEx_GetD3PCLK1Freq>
 8011fdc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011fde:	e0ac      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011fe0:	4b29      	ldr	r3, [pc, #164]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011fe8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011fec:	d107      	bne.n	8011ffe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011fee:	f107 0318 	add.w	r3, r7, #24
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f000 f8c0 	bl	8012178 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ffc:	e09d      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011ffe:	2300      	movs	r3, #0
 8012000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012002:	e09a      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012004:	4b20      	ldr	r3, [pc, #128]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801200c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012010:	d107      	bne.n	8012022 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012012:	f107 030c 	add.w	r3, r7, #12
 8012016:	4618      	mov	r0, r3
 8012018:	f000 fa02 	bl	8012420 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012020:	e08b      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012022:	2300      	movs	r3, #0
 8012024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012026:	e088      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012028:	4b17      	ldr	r3, [pc, #92]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f003 0304 	and.w	r3, r3, #4
 8012030:	2b04      	cmp	r3, #4
 8012032:	d109      	bne.n	8012048 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012034:	4b14      	ldr	r3, [pc, #80]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	08db      	lsrs	r3, r3, #3
 801203a:	f003 0303 	and.w	r3, r3, #3
 801203e:	4a13      	ldr	r2, [pc, #76]	@ (801208c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8012040:	fa22 f303 	lsr.w	r3, r2, r3
 8012044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012046:	e078      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012048:	2300      	movs	r3, #0
 801204a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801204c:	e075      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801204e:	4b0e      	ldr	r3, [pc, #56]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801205a:	d102      	bne.n	8012062 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801205c:	4b0c      	ldr	r3, [pc, #48]	@ (8012090 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012060:	e06b      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012062:	2300      	movs	r3, #0
 8012064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012066:	e068      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012068:	4b07      	ldr	r3, [pc, #28]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012074:	d102      	bne.n	801207c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8012076:	4b07      	ldr	r3, [pc, #28]	@ (8012094 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8012078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801207a:	e05e      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801207c:	2300      	movs	r3, #0
 801207e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012080:	e05b      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8012082:	2300      	movs	r3, #0
 8012084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012086:	e058      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8012088:	58024400 	.word	0x58024400
 801208c:	03d09000 	.word	0x03d09000
 8012090:	003d0900 	.word	0x003d0900
 8012094:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8012098:	e9d7 2300 	ldrd	r2, r3, [r7]
 801209c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80120a0:	430b      	orrs	r3, r1
 80120a2:	d148      	bne.n	8012136 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80120a4:	4b27      	ldr	r3, [pc, #156]	@ (8012144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80120a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80120ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80120ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80120b4:	d02a      	beq.n	801210c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80120b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80120bc:	d838      	bhi.n	8012130 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80120be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d004      	beq.n	80120ce <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80120c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80120ca:	d00d      	beq.n	80120e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80120cc:	e030      	b.n	8012130 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80120ce:	4b1d      	ldr	r3, [pc, #116]	@ (8012144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80120d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80120da:	d102      	bne.n	80120e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80120dc:	4b1a      	ldr	r3, [pc, #104]	@ (8012148 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80120de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80120e0:	e02b      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80120e2:	2300      	movs	r3, #0
 80120e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80120e6:	e028      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80120e8:	4b16      	ldr	r3, [pc, #88]	@ (8012144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80120f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80120f4:	d107      	bne.n	8012106 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80120f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80120fa:	4618      	mov	r0, r3
 80120fc:	f000 fae4 	bl	80126c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012104:	e019      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012106:	2300      	movs	r3, #0
 8012108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801210a:	e016      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801210c:	4b0d      	ldr	r3, [pc, #52]	@ (8012144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012118:	d107      	bne.n	801212a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801211a:	f107 0318 	add.w	r3, r7, #24
 801211e:	4618      	mov	r0, r3
 8012120:	f000 f82a 	bl	8012178 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012124:	69fb      	ldr	r3, [r7, #28]
 8012126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012128:	e007      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801212a:	2300      	movs	r3, #0
 801212c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801212e:	e004      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8012130:	2300      	movs	r3, #0
 8012132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012134:	e001      	b.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8012136:	2300      	movs	r3, #0
 8012138:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801213a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801213c:	4618      	mov	r0, r3
 801213e:	3740      	adds	r7, #64	@ 0x40
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	58024400 	.word	0x58024400
 8012148:	017d7840 	.word	0x017d7840

0801214c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8012150:	f7fd fdee 	bl	800fd30 <HAL_RCC_GetHCLKFreq>
 8012154:	4602      	mov	r2, r0
 8012156:	4b06      	ldr	r3, [pc, #24]	@ (8012170 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012158:	6a1b      	ldr	r3, [r3, #32]
 801215a:	091b      	lsrs	r3, r3, #4
 801215c:	f003 0307 	and.w	r3, r3, #7
 8012160:	4904      	ldr	r1, [pc, #16]	@ (8012174 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8012162:	5ccb      	ldrb	r3, [r1, r3]
 8012164:	f003 031f 	and.w	r3, r3, #31
 8012168:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801216c:	4618      	mov	r0, r3
 801216e:	bd80      	pop	{r7, pc}
 8012170:	58024400 	.word	0x58024400
 8012174:	08018000 	.word	0x08018000

08012178 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8012178:	b480      	push	{r7}
 801217a:	b089      	sub	sp, #36	@ 0x24
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012180:	4ba1      	ldr	r3, [pc, #644]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012184:	f003 0303 	and.w	r3, r3, #3
 8012188:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801218a:	4b9f      	ldr	r3, [pc, #636]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801218e:	0b1b      	lsrs	r3, r3, #12
 8012190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012194:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8012196:	4b9c      	ldr	r3, [pc, #624]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801219a:	091b      	lsrs	r3, r3, #4
 801219c:	f003 0301 	and.w	r3, r3, #1
 80121a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80121a2:	4b99      	ldr	r3, [pc, #612]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80121a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121a6:	08db      	lsrs	r3, r3, #3
 80121a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80121ac:	693a      	ldr	r2, [r7, #16]
 80121ae:	fb02 f303 	mul.w	r3, r2, r3
 80121b2:	ee07 3a90 	vmov	s15, r3
 80121b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	f000 8111 	beq.w	80123e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	2b02      	cmp	r3, #2
 80121ca:	f000 8083 	beq.w	80122d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	2b02      	cmp	r3, #2
 80121d2:	f200 80a1 	bhi.w	8012318 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d003      	beq.n	80121e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d056      	beq.n	8012290 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80121e2:	e099      	b.n	8012318 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80121e4:	4b88      	ldr	r3, [pc, #544]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	f003 0320 	and.w	r3, r3, #32
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d02d      	beq.n	801224c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80121f0:	4b85      	ldr	r3, [pc, #532]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	08db      	lsrs	r3, r3, #3
 80121f6:	f003 0303 	and.w	r3, r3, #3
 80121fa:	4a84      	ldr	r2, [pc, #528]	@ (801240c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80121fc:	fa22 f303 	lsr.w	r3, r2, r3
 8012200:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	ee07 3a90 	vmov	s15, r3
 8012208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	ee07 3a90 	vmov	s15, r3
 8012212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801221a:	4b7b      	ldr	r3, [pc, #492]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801221c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801221e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012222:	ee07 3a90 	vmov	s15, r3
 8012226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801222a:	ed97 6a03 	vldr	s12, [r7, #12]
 801222e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8012410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801223a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801223e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012246:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801224a:	e087      	b.n	801235c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	ee07 3a90 	vmov	s15, r3
 8012252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012256:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8012414 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801225a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801225e:	4b6a      	ldr	r3, [pc, #424]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012266:	ee07 3a90 	vmov	s15, r3
 801226a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801226e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012272:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8012410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801227a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801227e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012286:	ee67 7a27 	vmul.f32	s15, s14, s15
 801228a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801228e:	e065      	b.n	801235c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	ee07 3a90 	vmov	s15, r3
 8012296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801229a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8012418 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801229e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122a2:	4b59      	ldr	r3, [pc, #356]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80122a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122aa:	ee07 3a90 	vmov	s15, r3
 80122ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80122b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8012410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80122ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80122be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80122c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80122d2:	e043      	b.n	801235c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	ee07 3a90 	vmov	s15, r3
 80122da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801241c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80122e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122e6:	4b48      	ldr	r3, [pc, #288]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80122e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122ee:	ee07 3a90 	vmov	s15, r3
 80122f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80122fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8012410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80122fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801230a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801230e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012316:	e021      	b.n	801235c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	ee07 3a90 	vmov	s15, r3
 801231e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012322:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8012418 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801232a:	4b37      	ldr	r3, [pc, #220]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801232c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801232e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012332:	ee07 3a90 	vmov	s15, r3
 8012336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801233a:	ed97 6a03 	vldr	s12, [r7, #12]
 801233e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8012410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801234a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801234e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801235a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801235c:	4b2a      	ldr	r3, [pc, #168]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801235e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012360:	0a5b      	lsrs	r3, r3, #9
 8012362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012366:	ee07 3a90 	vmov	s15, r3
 801236a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801236e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012372:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012376:	edd7 6a07 	vldr	s13, [r7, #28]
 801237a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801237e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012382:	ee17 2a90 	vmov	r2, s15
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801238a:	4b1f      	ldr	r3, [pc, #124]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801238c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801238e:	0c1b      	lsrs	r3, r3, #16
 8012390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012394:	ee07 3a90 	vmov	s15, r3
 8012398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801239c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80123a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80123a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80123a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123b0:	ee17 2a90 	vmov	r2, s15
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80123b8:	4b13      	ldr	r3, [pc, #76]	@ (8012408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80123ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123bc:	0e1b      	lsrs	r3, r3, #24
 80123be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80123c2:	ee07 3a90 	vmov	s15, r3
 80123c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80123ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80123d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80123d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123de:	ee17 2a90 	vmov	r2, s15
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80123e6:	e008      	b.n	80123fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2200      	movs	r2, #0
 80123ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2200      	movs	r2, #0
 80123f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2200      	movs	r2, #0
 80123f8:	609a      	str	r2, [r3, #8]
}
 80123fa:	bf00      	nop
 80123fc:	3724      	adds	r7, #36	@ 0x24
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr
 8012406:	bf00      	nop
 8012408:	58024400 	.word	0x58024400
 801240c:	03d09000 	.word	0x03d09000
 8012410:	46000000 	.word	0x46000000
 8012414:	4c742400 	.word	0x4c742400
 8012418:	4a742400 	.word	0x4a742400
 801241c:	4bbebc20 	.word	0x4bbebc20

08012420 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8012420:	b480      	push	{r7}
 8012422:	b089      	sub	sp, #36	@ 0x24
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012428:	4ba1      	ldr	r3, [pc, #644]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801242c:	f003 0303 	and.w	r3, r3, #3
 8012430:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8012432:	4b9f      	ldr	r3, [pc, #636]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012436:	0d1b      	lsrs	r3, r3, #20
 8012438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801243c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801243e:	4b9c      	ldr	r3, [pc, #624]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012442:	0a1b      	lsrs	r3, r3, #8
 8012444:	f003 0301 	and.w	r3, r3, #1
 8012448:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801244a:	4b99      	ldr	r3, [pc, #612]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801244e:	08db      	lsrs	r3, r3, #3
 8012450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012454:	693a      	ldr	r2, [r7, #16]
 8012456:	fb02 f303 	mul.w	r3, r2, r3
 801245a:	ee07 3a90 	vmov	s15, r3
 801245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012462:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	2b00      	cmp	r3, #0
 801246a:	f000 8111 	beq.w	8012690 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	2b02      	cmp	r3, #2
 8012472:	f000 8083 	beq.w	801257c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8012476:	69bb      	ldr	r3, [r7, #24]
 8012478:	2b02      	cmp	r3, #2
 801247a:	f200 80a1 	bhi.w	80125c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d003      	beq.n	801248c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	2b01      	cmp	r3, #1
 8012488:	d056      	beq.n	8012538 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801248a:	e099      	b.n	80125c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801248c:	4b88      	ldr	r3, [pc, #544]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	f003 0320 	and.w	r3, r3, #32
 8012494:	2b00      	cmp	r3, #0
 8012496:	d02d      	beq.n	80124f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012498:	4b85      	ldr	r3, [pc, #532]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	08db      	lsrs	r3, r3, #3
 801249e:	f003 0303 	and.w	r3, r3, #3
 80124a2:	4a84      	ldr	r2, [pc, #528]	@ (80126b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80124a4:	fa22 f303 	lsr.w	r3, r2, r3
 80124a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	ee07 3a90 	vmov	s15, r3
 80124b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	ee07 3a90 	vmov	s15, r3
 80124ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80124c2:	4b7b      	ldr	r3, [pc, #492]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80124c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124ca:	ee07 3a90 	vmov	s15, r3
 80124ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80124d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80126b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80124da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80124de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80124e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80124e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80124ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80124f2:	e087      	b.n	8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	ee07 3a90 	vmov	s15, r3
 80124fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80126bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8012502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012506:	4b6a      	ldr	r3, [pc, #424]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801250a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801250e:	ee07 3a90 	vmov	s15, r3
 8012512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012516:	ed97 6a03 	vldr	s12, [r7, #12]
 801251a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80126b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801251e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801252a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801252e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012536:	e065      	b.n	8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	ee07 3a90 	vmov	s15, r3
 801253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012542:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80126c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801254a:	4b59      	ldr	r3, [pc, #356]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801254e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012552:	ee07 3a90 	vmov	s15, r3
 8012556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801255a:	ed97 6a03 	vldr	s12, [r7, #12]
 801255e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80126b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801256a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801256e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801257a:	e043      	b.n	8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	ee07 3a90 	vmov	s15, r3
 8012582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012586:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80126c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801258a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801258e:	4b48      	ldr	r3, [pc, #288]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012596:	ee07 3a90 	vmov	s15, r3
 801259a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801259e:	ed97 6a03 	vldr	s12, [r7, #12]
 80125a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80126b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80125a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80125aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80125ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80125b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80125b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80125be:	e021      	b.n	8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	ee07 3a90 	vmov	s15, r3
 80125c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80126c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80125ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80125d2:	4b37      	ldr	r3, [pc, #220]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80125d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80125d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125da:	ee07 3a90 	vmov	s15, r3
 80125de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80125e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80125e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80126b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80125ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80125ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80125f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80125f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80125fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012602:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8012604:	4b2a      	ldr	r3, [pc, #168]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012608:	0a5b      	lsrs	r3, r3, #9
 801260a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801260e:	ee07 3a90 	vmov	s15, r3
 8012612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012616:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801261a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801261e:	edd7 6a07 	vldr	s13, [r7, #28]
 8012622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801262a:	ee17 2a90 	vmov	r2, s15
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8012632:	4b1f      	ldr	r3, [pc, #124]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012636:	0c1b      	lsrs	r3, r3, #16
 8012638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801263c:	ee07 3a90 	vmov	s15, r3
 8012640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012644:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012648:	ee37 7a87 	vadd.f32	s14, s15, s14
 801264c:	edd7 6a07 	vldr	s13, [r7, #28]
 8012650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012658:	ee17 2a90 	vmov	r2, s15
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8012660:	4b13      	ldr	r3, [pc, #76]	@ (80126b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012664:	0e1b      	lsrs	r3, r3, #24
 8012666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801266a:	ee07 3a90 	vmov	s15, r3
 801266e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012676:	ee37 7a87 	vadd.f32	s14, s15, s14
 801267a:	edd7 6a07 	vldr	s13, [r7, #28]
 801267e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012686:	ee17 2a90 	vmov	r2, s15
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801268e:	e008      	b.n	80126a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2200      	movs	r2, #0
 8012694:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2200      	movs	r2, #0
 801269a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2200      	movs	r2, #0
 80126a0:	609a      	str	r2, [r3, #8]
}
 80126a2:	bf00      	nop
 80126a4:	3724      	adds	r7, #36	@ 0x24
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	58024400 	.word	0x58024400
 80126b4:	03d09000 	.word	0x03d09000
 80126b8:	46000000 	.word	0x46000000
 80126bc:	4c742400 	.word	0x4c742400
 80126c0:	4a742400 	.word	0x4a742400
 80126c4:	4bbebc20 	.word	0x4bbebc20

080126c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80126c8:	b480      	push	{r7}
 80126ca:	b089      	sub	sp, #36	@ 0x24
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80126d0:	4ba0      	ldr	r3, [pc, #640]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80126d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126d4:	f003 0303 	and.w	r3, r3, #3
 80126d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80126da:	4b9e      	ldr	r3, [pc, #632]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80126dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126de:	091b      	lsrs	r3, r3, #4
 80126e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80126e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80126e6:	4b9b      	ldr	r3, [pc, #620]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80126e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126ea:	f003 0301 	and.w	r3, r3, #1
 80126ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80126f0:	4b98      	ldr	r3, [pc, #608]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80126f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126f4:	08db      	lsrs	r3, r3, #3
 80126f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126fa:	693a      	ldr	r2, [r7, #16]
 80126fc:	fb02 f303 	mul.w	r3, r2, r3
 8012700:	ee07 3a90 	vmov	s15, r3
 8012704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012708:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	2b00      	cmp	r3, #0
 8012710:	f000 8111 	beq.w	8012936 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	2b02      	cmp	r3, #2
 8012718:	f000 8083 	beq.w	8012822 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801271c:	69bb      	ldr	r3, [r7, #24]
 801271e:	2b02      	cmp	r3, #2
 8012720:	f200 80a1 	bhi.w	8012866 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d003      	beq.n	8012732 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801272a:	69bb      	ldr	r3, [r7, #24]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d056      	beq.n	80127de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8012730:	e099      	b.n	8012866 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012732:	4b88      	ldr	r3, [pc, #544]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f003 0320 	and.w	r3, r3, #32
 801273a:	2b00      	cmp	r3, #0
 801273c:	d02d      	beq.n	801279a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801273e:	4b85      	ldr	r3, [pc, #532]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	08db      	lsrs	r3, r3, #3
 8012744:	f003 0303 	and.w	r3, r3, #3
 8012748:	4a83      	ldr	r2, [pc, #524]	@ (8012958 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801274a:	fa22 f303 	lsr.w	r3, r2, r3
 801274e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	ee07 3a90 	vmov	s15, r3
 8012756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	ee07 3a90 	vmov	s15, r3
 8012760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012768:	4b7a      	ldr	r3, [pc, #488]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801276c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012770:	ee07 3a90 	vmov	s15, r3
 8012774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012778:	ed97 6a03 	vldr	s12, [r7, #12]
 801277c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801295c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801278c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012794:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012798:	e087      	b.n	80128aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	ee07 3a90 	vmov	s15, r3
 80127a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127a4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8012960 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80127a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80127ac:	4b69      	ldr	r3, [pc, #420]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80127ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127b4:	ee07 3a90 	vmov	s15, r3
 80127b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80127bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80127c0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801295c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80127c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80127c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80127cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80127d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80127dc:	e065      	b.n	80128aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	ee07 3a90 	vmov	s15, r3
 80127e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127e8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8012964 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80127ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80127f0:	4b58      	ldr	r3, [pc, #352]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80127f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127f8:	ee07 3a90 	vmov	s15, r3
 80127fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012800:	ed97 6a03 	vldr	s12, [r7, #12]
 8012804:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801295c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801280c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012810:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012818:	ee67 7a27 	vmul.f32	s15, s14, s15
 801281c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012820:	e043      	b.n	80128aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	ee07 3a90 	vmov	s15, r3
 8012828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801282c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8012968 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8012830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012834:	4b47      	ldr	r3, [pc, #284]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801283c:	ee07 3a90 	vmov	s15, r3
 8012840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012844:	ed97 6a03 	vldr	s12, [r7, #12]
 8012848:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801295c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801284c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012854:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801285c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012860:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012864:	e021      	b.n	80128aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	ee07 3a90 	vmov	s15, r3
 801286c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012870:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8012960 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8012874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012878:	4b36      	ldr	r3, [pc, #216]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801287c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012880:	ee07 3a90 	vmov	s15, r3
 8012884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012888:	ed97 6a03 	vldr	s12, [r7, #12]
 801288c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801295c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012898:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801289c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80128a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80128a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80128aa:	4b2a      	ldr	r3, [pc, #168]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80128ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128ae:	0a5b      	lsrs	r3, r3, #9
 80128b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80128b4:	ee07 3a90 	vmov	s15, r3
 80128b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80128c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80128c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80128c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80128cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80128d0:	ee17 2a90 	vmov	r2, s15
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80128d8:	4b1e      	ldr	r3, [pc, #120]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80128da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128dc:	0c1b      	lsrs	r3, r3, #16
 80128de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80128e2:	ee07 3a90 	vmov	s15, r3
 80128e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80128ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80128f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80128f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80128fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80128fe:	ee17 2a90 	vmov	r2, s15
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8012906:	4b13      	ldr	r3, [pc, #76]	@ (8012954 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801290a:	0e1b      	lsrs	r3, r3, #24
 801290c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012910:	ee07 3a90 	vmov	s15, r3
 8012914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012918:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801291c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012920:	edd7 6a07 	vldr	s13, [r7, #28]
 8012924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801292c:	ee17 2a90 	vmov	r2, s15
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8012934:	e008      	b.n	8012948 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2200      	movs	r2, #0
 801293a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2200      	movs	r2, #0
 8012940:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	609a      	str	r2, [r3, #8]
}
 8012948:	bf00      	nop
 801294a:	3724      	adds	r7, #36	@ 0x24
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr
 8012954:	58024400 	.word	0x58024400
 8012958:	03d09000 	.word	0x03d09000
 801295c:	46000000 	.word	0x46000000
 8012960:	4c742400 	.word	0x4c742400
 8012964:	4a742400 	.word	0x4a742400
 8012968:	4bbebc20 	.word	0x4bbebc20

0801296c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
 8012974:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012976:	2300      	movs	r3, #0
 8012978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801297a:	4b53      	ldr	r3, [pc, #332]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 801297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801297e:	f003 0303 	and.w	r3, r3, #3
 8012982:	2b03      	cmp	r3, #3
 8012984:	d101      	bne.n	801298a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8012986:	2301      	movs	r3, #1
 8012988:	e099      	b.n	8012abe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801298a:	4b4f      	ldr	r3, [pc, #316]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	4a4e      	ldr	r2, [pc, #312]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012990:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012996:	f7f5 ffe5 	bl	8008964 <HAL_GetTick>
 801299a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801299c:	e008      	b.n	80129b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801299e:	f7f5 ffe1 	bl	8008964 <HAL_GetTick>
 80129a2:	4602      	mov	r2, r0
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	1ad3      	subs	r3, r2, r3
 80129a8:	2b02      	cmp	r3, #2
 80129aa:	d901      	bls.n	80129b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80129ac:	2303      	movs	r3, #3
 80129ae:	e086      	b.n	8012abe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80129b0:	4b45      	ldr	r3, [pc, #276]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d1f0      	bne.n	801299e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80129bc:	4b42      	ldr	r3, [pc, #264]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 80129be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	031b      	lsls	r3, r3, #12
 80129ca:	493f      	ldr	r1, [pc, #252]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 80129cc:	4313      	orrs	r3, r2
 80129ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	3b01      	subs	r3, #1
 80129d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	689b      	ldr	r3, [r3, #8]
 80129de:	3b01      	subs	r3, #1
 80129e0:	025b      	lsls	r3, r3, #9
 80129e2:	b29b      	uxth	r3, r3
 80129e4:	431a      	orrs	r2, r3
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	3b01      	subs	r3, #1
 80129ec:	041b      	lsls	r3, r3, #16
 80129ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80129f2:	431a      	orrs	r2, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	691b      	ldr	r3, [r3, #16]
 80129f8:	3b01      	subs	r3, #1
 80129fa:	061b      	lsls	r3, r3, #24
 80129fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8012a00:	4931      	ldr	r1, [pc, #196]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a02:	4313      	orrs	r3, r2
 8012a04:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012a06:	4b30      	ldr	r3, [pc, #192]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	695b      	ldr	r3, [r3, #20]
 8012a12:	492d      	ldr	r1, [pc, #180]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a14:	4313      	orrs	r3, r2
 8012a16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012a18:	4b2b      	ldr	r3, [pc, #172]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a1c:	f023 0220 	bic.w	r2, r3, #32
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	699b      	ldr	r3, [r3, #24]
 8012a24:	4928      	ldr	r1, [pc, #160]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a26:	4313      	orrs	r3, r2
 8012a28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012a2a:	4b27      	ldr	r3, [pc, #156]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a2e:	4a26      	ldr	r2, [pc, #152]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a30:	f023 0310 	bic.w	r3, r3, #16
 8012a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012a36:	4b24      	ldr	r3, [pc, #144]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012a3a:	4b24      	ldr	r3, [pc, #144]	@ (8012acc <RCCEx_PLL2_Config+0x160>)
 8012a3c:	4013      	ands	r3, r2
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	69d2      	ldr	r2, [r2, #28]
 8012a42:	00d2      	lsls	r2, r2, #3
 8012a44:	4920      	ldr	r1, [pc, #128]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a46:	4313      	orrs	r3, r2
 8012a48:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a50:	f043 0310 	orr.w	r3, r3, #16
 8012a54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d106      	bne.n	8012a6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a60:	4a19      	ldr	r2, [pc, #100]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012a66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012a68:	e00f      	b.n	8012a8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	2b01      	cmp	r3, #1
 8012a6e:	d106      	bne.n	8012a7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012a70:	4b15      	ldr	r3, [pc, #84]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a74:	4a14      	ldr	r2, [pc, #80]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012a7c:	e005      	b.n	8012a8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012a7e:	4b12      	ldr	r3, [pc, #72]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a82:	4a11      	ldr	r2, [pc, #68]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012a88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012a90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012a96:	f7f5 ff65 	bl	8008964 <HAL_GetTick>
 8012a9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012a9c:	e008      	b.n	8012ab0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8012a9e:	f7f5 ff61 	bl	8008964 <HAL_GetTick>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	1ad3      	subs	r3, r2, r3
 8012aa8:	2b02      	cmp	r3, #2
 8012aaa:	d901      	bls.n	8012ab0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012aac:	2303      	movs	r3, #3
 8012aae:	e006      	b.n	8012abe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012ab0:	4b05      	ldr	r3, [pc, #20]	@ (8012ac8 <RCCEx_PLL2_Config+0x15c>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d0f0      	beq.n	8012a9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	58024400 	.word	0x58024400
 8012acc:	ffff0007 	.word	0xffff0007

08012ad0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b084      	sub	sp, #16
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012ada:	2300      	movs	r3, #0
 8012adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012ade:	4b53      	ldr	r3, [pc, #332]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ae2:	f003 0303 	and.w	r3, r3, #3
 8012ae6:	2b03      	cmp	r3, #3
 8012ae8:	d101      	bne.n	8012aee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012aea:	2301      	movs	r3, #1
 8012aec:	e099      	b.n	8012c22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012aee:	4b4f      	ldr	r3, [pc, #316]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	4a4e      	ldr	r2, [pc, #312]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012afa:	f7f5 ff33 	bl	8008964 <HAL_GetTick>
 8012afe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012b00:	e008      	b.n	8012b14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8012b02:	f7f5 ff2f 	bl	8008964 <HAL_GetTick>
 8012b06:	4602      	mov	r2, r0
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	1ad3      	subs	r3, r2, r3
 8012b0c:	2b02      	cmp	r3, #2
 8012b0e:	d901      	bls.n	8012b14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012b10:	2303      	movs	r3, #3
 8012b12:	e086      	b.n	8012c22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012b14:	4b45      	ldr	r3, [pc, #276]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d1f0      	bne.n	8012b02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012b20:	4b42      	ldr	r3, [pc, #264]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b24:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	051b      	lsls	r3, r3, #20
 8012b2e:	493f      	ldr	r1, [pc, #252]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b30:	4313      	orrs	r3, r2
 8012b32:	628b      	str	r3, [r1, #40]	@ 0x28
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	3b01      	subs	r3, #1
 8012b3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	689b      	ldr	r3, [r3, #8]
 8012b42:	3b01      	subs	r3, #1
 8012b44:	025b      	lsls	r3, r3, #9
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	431a      	orrs	r2, r3
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	68db      	ldr	r3, [r3, #12]
 8012b4e:	3b01      	subs	r3, #1
 8012b50:	041b      	lsls	r3, r3, #16
 8012b52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8012b56:	431a      	orrs	r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	691b      	ldr	r3, [r3, #16]
 8012b5c:	3b01      	subs	r3, #1
 8012b5e:	061b      	lsls	r3, r3, #24
 8012b60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8012b64:	4931      	ldr	r1, [pc, #196]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b66:	4313      	orrs	r3, r2
 8012b68:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012b6a:	4b30      	ldr	r3, [pc, #192]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	695b      	ldr	r3, [r3, #20]
 8012b76:	492d      	ldr	r1, [pc, #180]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b78:	4313      	orrs	r3, r2
 8012b7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b80:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	699b      	ldr	r3, [r3, #24]
 8012b88:	4928      	ldr	r1, [pc, #160]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b8a:	4313      	orrs	r3, r2
 8012b8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012b8e:	4b27      	ldr	r3, [pc, #156]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b92:	4a26      	ldr	r2, [pc, #152]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012b9a:	4b24      	ldr	r3, [pc, #144]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012b9e:	4b24      	ldr	r3, [pc, #144]	@ (8012c30 <RCCEx_PLL3_Config+0x160>)
 8012ba0:	4013      	ands	r3, r2
 8012ba2:	687a      	ldr	r2, [r7, #4]
 8012ba4:	69d2      	ldr	r2, [r2, #28]
 8012ba6:	00d2      	lsls	r2, r2, #3
 8012ba8:	4920      	ldr	r1, [pc, #128]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012baa:	4313      	orrs	r3, r2
 8012bac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012bae:	4b1f      	ldr	r3, [pc, #124]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d106      	bne.n	8012bce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bc4:	4a19      	ldr	r2, [pc, #100]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012bc6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8012bca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012bcc:	e00f      	b.n	8012bee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	2b01      	cmp	r3, #1
 8012bd2:	d106      	bne.n	8012be2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012bd4:	4b15      	ldr	r3, [pc, #84]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bd8:	4a14      	ldr	r2, [pc, #80]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012bda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012bde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012be0:	e005      	b.n	8012bee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012be2:	4b12      	ldr	r3, [pc, #72]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012be6:	4a11      	ldr	r2, [pc, #68]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012be8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012bec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8012bee:	4b0f      	ldr	r3, [pc, #60]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012bfa:	f7f5 feb3 	bl	8008964 <HAL_GetTick>
 8012bfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012c00:	e008      	b.n	8012c14 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8012c02:	f7f5 feaf 	bl	8008964 <HAL_GetTick>
 8012c06:	4602      	mov	r2, r0
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	1ad3      	subs	r3, r2, r3
 8012c0c:	2b02      	cmp	r3, #2
 8012c0e:	d901      	bls.n	8012c14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012c10:	2303      	movs	r3, #3
 8012c12:	e006      	b.n	8012c22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012c14:	4b05      	ldr	r3, [pc, #20]	@ (8012c2c <RCCEx_PLL3_Config+0x15c>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d0f0      	beq.n	8012c02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8012c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3710      	adds	r7, #16
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}
 8012c2a:	bf00      	nop
 8012c2c:	58024400 	.word	0x58024400
 8012c30:	ffff0007 	.word	0xffff0007

08012c34 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b08a      	sub	sp, #40	@ 0x28
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d101      	bne.n	8012c46 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8012c42:	2301      	movs	r3, #1
 8012c44:	e28e      	b.n	8013164 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8012c46:	f7f5 febd 	bl	80089c4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012c50:	2b01      	cmp	r3, #1
 8012c52:	d113      	bne.n	8012c7c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	4a96      	ldr	r2, [pc, #600]	@ (8012eb4 <HAL_SAI_Init+0x280>)
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d004      	beq.n	8012c68 <HAL_SAI_Init+0x34>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	4a95      	ldr	r2, [pc, #596]	@ (8012eb8 <HAL_SAI_Init+0x284>)
 8012c64:	4293      	cmp	r3, r2
 8012c66:	d107      	bne.n	8012c78 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8012c6c:	2b01      	cmp	r3, #1
 8012c6e:	d103      	bne.n	8012c78 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d001      	beq.n	8012c7c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8012c78:	2301      	movs	r3, #1
 8012c7a:	e273      	b.n	8013164 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4a8c      	ldr	r2, [pc, #560]	@ (8012eb4 <HAL_SAI_Init+0x280>)
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d004      	beq.n	8012c90 <HAL_SAI_Init+0x5c>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4a8c      	ldr	r2, [pc, #560]	@ (8012ebc <HAL_SAI_Init+0x288>)
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	d102      	bne.n	8012c96 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8012c90:	4b8b      	ldr	r3, [pc, #556]	@ (8012ec0 <HAL_SAI_Init+0x28c>)
 8012c92:	61bb      	str	r3, [r7, #24]
 8012c94:	e028      	b.n	8012ce8 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	4a8a      	ldr	r2, [pc, #552]	@ (8012ec4 <HAL_SAI_Init+0x290>)
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	d004      	beq.n	8012caa <HAL_SAI_Init+0x76>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	4a88      	ldr	r2, [pc, #544]	@ (8012ec8 <HAL_SAI_Init+0x294>)
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	d102      	bne.n	8012cb0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8012caa:	4b88      	ldr	r3, [pc, #544]	@ (8012ecc <HAL_SAI_Init+0x298>)
 8012cac:	61bb      	str	r3, [r7, #24]
 8012cae:	e01b      	b.n	8012ce8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4a86      	ldr	r2, [pc, #536]	@ (8012ed0 <HAL_SAI_Init+0x29c>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d004      	beq.n	8012cc4 <HAL_SAI_Init+0x90>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4a85      	ldr	r2, [pc, #532]	@ (8012ed4 <HAL_SAI_Init+0x2a0>)
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d102      	bne.n	8012cca <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8012cc4:	4b84      	ldr	r3, [pc, #528]	@ (8012ed8 <HAL_SAI_Init+0x2a4>)
 8012cc6:	61bb      	str	r3, [r7, #24]
 8012cc8:	e00e      	b.n	8012ce8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	4a7a      	ldr	r2, [pc, #488]	@ (8012eb8 <HAL_SAI_Init+0x284>)
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	d004      	beq.n	8012cde <HAL_SAI_Init+0xaa>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	4a80      	ldr	r2, [pc, #512]	@ (8012edc <HAL_SAI_Init+0x2a8>)
 8012cda:	4293      	cmp	r3, r2
 8012cdc:	d102      	bne.n	8012ce4 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8012cde:	4b80      	ldr	r3, [pc, #512]	@ (8012ee0 <HAL_SAI_Init+0x2ac>)
 8012ce0:	61bb      	str	r3, [r7, #24]
 8012ce2:	e001      	b.n	8012ce8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	e23d      	b.n	8013164 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d106      	bne.n	8012d02 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f000 faa9 	bl	8013254 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f000 fcba 	bl	801367c <SAI_Disable>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d001      	beq.n	8012d12 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e228      	b.n	8013164 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2202      	movs	r2, #2
 8012d16:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	2b02      	cmp	r3, #2
 8012d20:	d00c      	beq.n	8012d3c <HAL_SAI_Init+0x108>
 8012d22:	2b02      	cmp	r3, #2
 8012d24:	d80d      	bhi.n	8012d42 <HAL_SAI_Init+0x10e>
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d002      	beq.n	8012d30 <HAL_SAI_Init+0xfc>
 8012d2a:	2b01      	cmp	r3, #1
 8012d2c:	d003      	beq.n	8012d36 <HAL_SAI_Init+0x102>
 8012d2e:	e008      	b.n	8012d42 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8012d30:	2300      	movs	r3, #0
 8012d32:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012d34:	e008      	b.n	8012d48 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8012d36:	2310      	movs	r3, #16
 8012d38:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012d3a:	e005      	b.n	8012d48 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8012d3c:	2320      	movs	r3, #32
 8012d3e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012d40:	e002      	b.n	8012d48 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8012d42:	2300      	movs	r3, #0
 8012d44:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012d46:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	689b      	ldr	r3, [r3, #8]
 8012d4c:	2b05      	cmp	r3, #5
 8012d4e:	d832      	bhi.n	8012db6 <HAL_SAI_Init+0x182>
 8012d50:	a201      	add	r2, pc, #4	@ (adr r2, 8012d58 <HAL_SAI_Init+0x124>)
 8012d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d56:	bf00      	nop
 8012d58:	08012d71 	.word	0x08012d71
 8012d5c:	08012d77 	.word	0x08012d77
 8012d60:	08012d7f 	.word	0x08012d7f
 8012d64:	08012d87 	.word	0x08012d87
 8012d68:	08012d97 	.word	0x08012d97
 8012d6c:	08012da7 	.word	0x08012da7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8012d70:	2300      	movs	r3, #0
 8012d72:	61fb      	str	r3, [r7, #28]
      break;
 8012d74:	e022      	b.n	8012dbc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8012d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012d7a:	61fb      	str	r3, [r7, #28]
      break;
 8012d7c:	e01e      	b.n	8012dbc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012d7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012d82:	61fb      	str	r3, [r7, #28]
      break;
 8012d84:	e01a      	b.n	8012dbc <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012d86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012d8a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8012d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d8e:	f043 0301 	orr.w	r3, r3, #1
 8012d92:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012d94:	e012      	b.n	8012dbc <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012d96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012d9a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8012d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d9e:	f043 0302 	orr.w	r3, r3, #2
 8012da2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012da4:	e00a      	b.n	8012dbc <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012da6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012daa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8012dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dae:	f043 0303 	orr.w	r3, r3, #3
 8012db2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012db4:	e002      	b.n	8012dbc <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8012db6:	2300      	movs	r3, #0
 8012db8:	61fb      	str	r3, [r7, #28]
      break;
 8012dba:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012dc0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6a1b      	ldr	r3, [r3, #32]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f000 80c5 	beq.w	8012f56 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4a37      	ldr	r2, [pc, #220]	@ (8012eb4 <HAL_SAI_Init+0x280>)
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	d004      	beq.n	8012de4 <HAL_SAI_Init+0x1b0>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4a37      	ldr	r2, [pc, #220]	@ (8012ebc <HAL_SAI_Init+0x288>)
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d106      	bne.n	8012df2 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8012de4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8012de8:	f04f 0100 	mov.w	r1, #0
 8012dec:	f7fe fc2e 	bl	801164c <HAL_RCCEx_GetPeriphCLKFreq>
 8012df0:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4a33      	ldr	r2, [pc, #204]	@ (8012ec4 <HAL_SAI_Init+0x290>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d004      	beq.n	8012e06 <HAL_SAI_Init+0x1d2>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4a31      	ldr	r2, [pc, #196]	@ (8012ec8 <HAL_SAI_Init+0x294>)
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d106      	bne.n	8012e14 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8012e06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8012e0a:	f04f 0100 	mov.w	r1, #0
 8012e0e:	f7fe fc1d 	bl	801164c <HAL_RCCEx_GetPeriphCLKFreq>
 8012e12:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	4a2d      	ldr	r2, [pc, #180]	@ (8012ed0 <HAL_SAI_Init+0x29c>)
 8012e1a:	4293      	cmp	r3, r2
 8012e1c:	d004      	beq.n	8012e28 <HAL_SAI_Init+0x1f4>
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	4a2c      	ldr	r2, [pc, #176]	@ (8012ed4 <HAL_SAI_Init+0x2a0>)
 8012e24:	4293      	cmp	r3, r2
 8012e26:	d106      	bne.n	8012e36 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8012e28:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8012e2c:	f04f 0100 	mov.w	r1, #0
 8012e30:	f7fe fc0c 	bl	801164c <HAL_RCCEx_GetPeriphCLKFreq>
 8012e34:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8012eb8 <HAL_SAI_Init+0x284>)
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	d106      	bne.n	8012e4e <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8012e40:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8012e44:	f04f 0100 	mov.w	r1, #0
 8012e48:	f7fe fc00 	bl	801164c <HAL_RCCEx_GetPeriphCLKFreq>
 8012e4c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	4a22      	ldr	r2, [pc, #136]	@ (8012edc <HAL_SAI_Init+0x2a8>)
 8012e54:	4293      	cmp	r3, r2
 8012e56:	d106      	bne.n	8012e66 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8012e58:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8012e5c:	f04f 0100 	mov.w	r1, #0
 8012e60:	f7fe fbf4 	bl	801164c <HAL_RCCEx_GetPeriphCLKFreq>
 8012e64:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	699b      	ldr	r3, [r3, #24]
 8012e6a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8012e6e:	d139      	bne.n	8012ee4 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e74:	2b04      	cmp	r3, #4
 8012e76:	d102      	bne.n	8012e7e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8012e78:	2340      	movs	r3, #64	@ 0x40
 8012e7a:	60fb      	str	r3, [r7, #12]
 8012e7c:	e00a      	b.n	8012e94 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e82:	2b08      	cmp	r3, #8
 8012e84:	d103      	bne.n	8012e8e <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8012e86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e8a:	60fb      	str	r3, [r7, #12]
 8012e8c:	e002      	b.n	8012e94 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e92:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8012e94:	697a      	ldr	r2, [r7, #20]
 8012e96:	4613      	mov	r3, r2
 8012e98:	009b      	lsls	r3, r3, #2
 8012e9a:	4413      	add	r3, r2
 8012e9c:	005b      	lsls	r3, r3, #1
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6a1b      	ldr	r3, [r3, #32]
 8012ea4:	68fa      	ldr	r2, [r7, #12]
 8012ea6:	fb02 f303 	mul.w	r3, r2, r3
 8012eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8012eae:	613b      	str	r3, [r7, #16]
 8012eb0:	e030      	b.n	8012f14 <HAL_SAI_Init+0x2e0>
 8012eb2:	bf00      	nop
 8012eb4:	40015804 	.word	0x40015804
 8012eb8:	58005404 	.word	0x58005404
 8012ebc:	40015824 	.word	0x40015824
 8012ec0:	40015800 	.word	0x40015800
 8012ec4:	40015c04 	.word	0x40015c04
 8012ec8:	40015c24 	.word	0x40015c24
 8012ecc:	40015c00 	.word	0x40015c00
 8012ed0:	40016004 	.word	0x40016004
 8012ed4:	40016024 	.word	0x40016024
 8012ed8:	40016000 	.word	0x40016000
 8012edc:	58005424 	.word	0x58005424
 8012ee0:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ee8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012eec:	d101      	bne.n	8012ef2 <HAL_SAI_Init+0x2be>
 8012eee:	2302      	movs	r3, #2
 8012ef0:	e000      	b.n	8012ef4 <HAL_SAI_Init+0x2c0>
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8012ef6:	697a      	ldr	r2, [r7, #20]
 8012ef8:	4613      	mov	r3, r2
 8012efa:	009b      	lsls	r3, r3, #2
 8012efc:	4413      	add	r3, r2
 8012efe:	005b      	lsls	r3, r3, #1
 8012f00:	4619      	mov	r1, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6a1b      	ldr	r3, [r3, #32]
 8012f06:	68ba      	ldr	r2, [r7, #8]
 8012f08:	fb02 f303 	mul.w	r3, r2, r3
 8012f0c:	021b      	lsls	r3, r3, #8
 8012f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8012f12:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	4a95      	ldr	r2, [pc, #596]	@ (801316c <HAL_SAI_Init+0x538>)
 8012f18:	fba2 2303 	umull	r2, r3, r2, r3
 8012f1c:	08da      	lsrs	r2, r3, #3
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8012f22:	6939      	ldr	r1, [r7, #16]
 8012f24:	4b91      	ldr	r3, [pc, #580]	@ (801316c <HAL_SAI_Init+0x538>)
 8012f26:	fba3 2301 	umull	r2, r3, r3, r1
 8012f2a:	08da      	lsrs	r2, r3, #3
 8012f2c:	4613      	mov	r3, r2
 8012f2e:	009b      	lsls	r3, r3, #2
 8012f30:	4413      	add	r3, r2
 8012f32:	005b      	lsls	r3, r3, #1
 8012f34:	1aca      	subs	r2, r1, r3
 8012f36:	2a08      	cmp	r2, #8
 8012f38:	d904      	bls.n	8012f44 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f3e:	1c5a      	adds	r2, r3, #1
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f48:	2b04      	cmp	r3, #4
 8012f4a:	d104      	bne.n	8012f56 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f50:	085a      	lsrs	r2, r3, #1
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d003      	beq.n	8012f66 <HAL_SAI_Init+0x332>
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	2b02      	cmp	r3, #2
 8012f64:	d109      	bne.n	8012f7a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	d101      	bne.n	8012f72 <HAL_SAI_Init+0x33e>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	e001      	b.n	8012f76 <HAL_SAI_Init+0x342>
 8012f72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012f76:	623b      	str	r3, [r7, #32]
 8012f78:	e008      	b.n	8012f8c <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d102      	bne.n	8012f88 <HAL_SAI_Init+0x354>
 8012f82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012f86:	e000      	b.n	8012f8a <HAL_SAI_Init+0x356>
 8012f88:	2300      	movs	r3, #0
 8012f8a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8012f8c:	f7f5 fd1a 	bl	80089c4 <HAL_GetREVID>
 8012f90:	4603      	mov	r3, r0
 8012f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012f96:	d331      	bcc.n	8012ffc <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	6819      	ldr	r1, [r3, #0]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	4b73      	ldr	r3, [pc, #460]	@ (8013170 <HAL_SAI_Init+0x53c>)
 8012fa4:	400b      	ands	r3, r1
 8012fa6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	6819      	ldr	r1, [r3, #0]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	685a      	ldr	r2, [r3, #4]
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fb6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012fbc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012fc2:	431a      	orrs	r2, r3
 8012fc4:	6a3b      	ldr	r3, [r7, #32]
 8012fc6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8012fd0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	695b      	ldr	r3, [r3, #20]
 8012fd6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012fdc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fe2:	051b      	lsls	r3, r3, #20
 8012fe4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012fea:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	691b      	ldr	r3, [r3, #16]
 8012ff0:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	430a      	orrs	r2, r1
 8012ff8:	601a      	str	r2, [r3, #0]
 8012ffa:	e02d      	b.n	8013058 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	6819      	ldr	r1, [r3, #0]
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681a      	ldr	r2, [r3, #0]
 8013006:	4b5b      	ldr	r3, [pc, #364]	@ (8013174 <HAL_SAI_Init+0x540>)
 8013008:	400b      	ands	r3, r1
 801300a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	6819      	ldr	r1, [r3, #0]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	685a      	ldr	r2, [r3, #4]
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801301a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8013020:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013026:	431a      	orrs	r2, r3
 8013028:	6a3b      	ldr	r3, [r7, #32]
 801302a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 801302c:	69fb      	ldr	r3, [r7, #28]
 801302e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8013034:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	695b      	ldr	r3, [r3, #20]
 801303a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8013040:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013046:	051b      	lsls	r3, r3, #20
 8013048:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801304e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	430a      	orrs	r2, r1
 8013056:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	6859      	ldr	r1, [r3, #4]
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	4b45      	ldr	r3, [pc, #276]	@ (8013178 <HAL_SAI_Init+0x544>)
 8013064:	400b      	ands	r3, r1
 8013066:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	6859      	ldr	r1, [r3, #4]
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	69da      	ldr	r2, [r3, #28]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013076:	431a      	orrs	r2, r3
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801307c:	431a      	orrs	r2, r3
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	430a      	orrs	r2, r1
 8013084:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	6899      	ldr	r1, [r3, #8]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681a      	ldr	r2, [r3, #0]
 8013090:	4b3a      	ldr	r3, [pc, #232]	@ (801317c <HAL_SAI_Init+0x548>)
 8013092:	400b      	ands	r3, r1
 8013094:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	6899      	ldr	r1, [r3, #8]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130a0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80130a6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 80130ac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 80130b2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80130b8:	3b01      	subs	r3, #1
 80130ba:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80130bc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	430a      	orrs	r2, r1
 80130c4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	68d9      	ldr	r1, [r3, #12]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681a      	ldr	r2, [r3, #0]
 80130d0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80130d4:	400b      	ands	r3, r1
 80130d6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	68d9      	ldr	r1, [r3, #12]
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80130e6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80130ec:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80130ee:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130f4:	3b01      	subs	r3, #1
 80130f6:	021b      	lsls	r3, r3, #8
 80130f8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	430a      	orrs	r2, r1
 8013100:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4a1e      	ldr	r2, [pc, #120]	@ (8013180 <HAL_SAI_Init+0x54c>)
 8013108:	4293      	cmp	r3, r2
 801310a:	d004      	beq.n	8013116 <HAL_SAI_Init+0x4e2>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	4a1c      	ldr	r2, [pc, #112]	@ (8013184 <HAL_SAI_Init+0x550>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d119      	bne.n	801314a <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8013116:	69bb      	ldr	r3, [r7, #24]
 8013118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801311a:	f023 0201 	bic.w	r2, r3, #1
 801311e:	69bb      	ldr	r3, [r7, #24]
 8013120:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013128:	2b01      	cmp	r3, #1
 801312a:	d10e      	bne.n	801314a <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013134:	3b01      	subs	r3, #1
 8013136:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8013138:	431a      	orrs	r2, r3
 801313a:	69bb      	ldr	r3, [r7, #24]
 801313c:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013142:	f043 0201 	orr.w	r2, r3, #1
 8013146:	69bb      	ldr	r3, [r7, #24]
 8013148:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2200      	movs	r2, #0
 801314e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2201      	movs	r2, #1
 8013156:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2200      	movs	r2, #0
 801315e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8013162:	2300      	movs	r3, #0
}
 8013164:	4618      	mov	r0, r3
 8013166:	3728      	adds	r7, #40	@ 0x28
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	cccccccd 	.word	0xcccccccd
 8013170:	f005c010 	.word	0xf005c010
 8013174:	f805c010 	.word	0xf805c010
 8013178:	ffff1ff0 	.word	0xffff1ff0
 801317c:	fff88000 	.word	0xfff88000
 8013180:	40015804 	.word	0x40015804
 8013184:	58005404 	.word	0x58005404

08013188 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b084      	sub	sp, #16
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d101      	bne.n	801319a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8013196:	2301      	movs	r3, #1
 8013198:	e050      	b.n	801323c <HAL_SAI_DeInit+0xb4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2202      	movs	r2, #2
 801319e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	2200      	movs	r2, #0
 80131a8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80131b2:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  if (SAI_Disable(hsai) != HAL_OK)
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f000 fa61 	bl	801367c <SAI_Disable>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d009      	beq.n	80131d4 <HAL_SAI_DeInit+0x4c>
  {
    /* Reset SAI state to ready */
    hsai->State = HAL_SAI_STATE_READY;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2201      	movs	r2, #1
 80131c4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Release Lock */
    __HAL_UNLOCK(hsai);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2200      	movs	r2, #0
 80131cc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80131d0:	2301      	movs	r3, #1
 80131d2:	e033      	b.n	801323c <HAL_SAI_DeInit+0xb4>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	685a      	ldr	r2, [r3, #4]
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	f042 0208 	orr.w	r2, r2, #8
 80131e2:	605a      	str	r2, [r3, #4]

  /* Disable SAI PDM interface */
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	4a16      	ldr	r2, [pc, #88]	@ (8013244 <HAL_SAI_DeInit+0xbc>)
 80131ea:	4293      	cmp	r3, r2
 80131ec:	d004      	beq.n	80131f8 <HAL_SAI_DeInit+0x70>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	4a15      	ldr	r2, [pc, #84]	@ (8013248 <HAL_SAI_DeInit+0xc0>)
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d111      	bne.n	801321c <HAL_SAI_DeInit+0x94>
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Get the SAI base address according to the SAI handle */
#if defined(SAI4)
    SaiBaseAddress = (hsai->Instance == SAI1_Block_A) ? SAI1 : SAI4;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4a11      	ldr	r2, [pc, #68]	@ (8013244 <HAL_SAI_DeInit+0xbc>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	d101      	bne.n	8013206 <HAL_SAI_DeInit+0x7e>
 8013202:	4b12      	ldr	r3, [pc, #72]	@ (801324c <HAL_SAI_DeInit+0xc4>)
 8013204:	e000      	b.n	8013208 <HAL_SAI_DeInit+0x80>
 8013206:	4b12      	ldr	r3, [pc, #72]	@ (8013250 <HAL_SAI_DeInit+0xc8>)
 8013208:	60fb      	str	r3, [r7, #12]
#else
    SaiBaseAddress = SAI1;
#endif /* SAI4 */

    /* Reset PDM delays */
    SaiBaseAddress->PDMDLY = 0U;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	2200      	movs	r2, #0
 801320e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013214:	f023 0201 	bic.w	r2, r3, #1
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	645a      	str	r2, [r3, #68]	@ 0x44
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f000 f823 	bl	8013268 <HAL_SAI_MspDeInit>
#endif

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2200      	movs	r2, #0
 8013226:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2200      	movs	r2, #0
 801322e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2200      	movs	r2, #0
 8013236:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 801323a:	2300      	movs	r3, #0
}
 801323c:	4618      	mov	r0, r3
 801323e:	3710      	adds	r7, #16
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}
 8013244:	40015804 	.word	0x40015804
 8013248:	58005404 	.word	0x58005404
 801324c:	40015800 	.word	0x40015800
 8013250:	58005400 	.word	0x58005400

08013254 <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8013254:	b480      	push	{r7}
 8013256:	b083      	sub	sp, #12
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 801325c:	bf00      	nop
 801325e:	370c      	adds	r7, #12
 8013260:	46bd      	mov	sp, r7
 8013262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013266:	4770      	bx	lr

08013268 <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 8013268:	b480      	push	{r7}
 801326a:	b083      	sub	sp, #12
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 8013270:	bf00      	nop
 8013272:	370c      	adds	r7, #12
 8013274:	46bd      	mov	sp, r7
 8013276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327a:	4770      	bx	lr

0801327c <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b084      	sub	sp, #16
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013284:	2300      	movs	r3, #0
 8013286:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 801328e:	2b01      	cmp	r3, #1
 8013290:	d101      	bne.n	8013296 <HAL_SAI_DMAStop+0x1a>
 8013292:	2302      	movs	r3, #2
 8013294:	e06c      	b.n	8013370 <HAL_SAI_DMAStop+0xf4>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2201      	movs	r2, #1
 801329a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f000 f9ec 	bl	801367c <SAI_Disable>
 80132a4:	4603      	mov	r3, r0
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d001      	beq.n	80132ae <HAL_SAI_DMAStop+0x32>
  {
    status = HAL_ERROR;
 80132aa:	2301      	movs	r3, #1
 80132ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	681a      	ldr	r2, [r3, #0]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80132bc:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80132c4:	b2db      	uxtb	r3, r3
 80132c6:	2b12      	cmp	r3, #18
 80132c8:	d11d      	bne.n	8013306 <HAL_SAI_DMAStop+0x8a>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d018      	beq.n	8013306 <HAL_SAI_DMAStop+0x8a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132da:	4618      	mov	r0, r3
 80132dc:	f7f6 fdca 	bl	8009e74 <HAL_DMA_Abort>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d00f      	beq.n	8013306 <HAL_SAI_DMAStop+0x8a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80132ee:	2b80      	cmp	r3, #128	@ 0x80
 80132f0:	d009      	beq.n	8013306 <HAL_SAI_DMAStop+0x8a>
      {
        status = HAL_ERROR;
 80132f2:	2301      	movs	r3, #1
 80132f4:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80132fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 801330c:	b2db      	uxtb	r3, r3
 801330e:	2b22      	cmp	r3, #34	@ 0x22
 8013310:	d11d      	bne.n	801334e <HAL_SAI_DMAStop+0xd2>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013318:	2b00      	cmp	r3, #0
 801331a:	d018      	beq.n	801334e <HAL_SAI_DMAStop+0xd2>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013322:	4618      	mov	r0, r3
 8013324:	f7f6 fda6 	bl	8009e74 <HAL_DMA_Abort>
 8013328:	4603      	mov	r3, r0
 801332a:	2b00      	cmp	r3, #0
 801332c:	d00f      	beq.n	801334e <HAL_SAI_DMAStop+0xd2>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013336:	2b80      	cmp	r3, #128	@ 0x80
 8013338:	d009      	beq.n	801334e <HAL_SAI_DMAStop+0xd2>
      {
        status = HAL_ERROR;
 801333a:	2301      	movs	r3, #1
 801333c:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013344:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	685a      	ldr	r2, [r3, #4]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	f042 0208 	orr.w	r2, r2, #8
 801335c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2201      	movs	r2, #1
 8013362:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2200      	movs	r2, #0
 801336a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 801336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3710      	adds	r7, #16
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}

08013378 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b086      	sub	sp, #24
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	4613      	mov	r3, r2
 8013384:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8013386:	f7f5 faed 	bl	8008964 <HAL_GetTick>
 801338a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d002      	beq.n	8013398 <HAL_SAI_Transmit_DMA+0x20>
 8013392:	88fb      	ldrh	r3, [r7, #6]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d101      	bne.n	801339c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8013398:	2301      	movs	r3, #1
 801339a:	e098      	b.n	80134ce <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	f040 8091 	bne.w	80134cc <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80133b0:	2b01      	cmp	r3, #1
 80133b2:	d101      	bne.n	80133b8 <HAL_SAI_Transmit_DMA+0x40>
 80133b4:	2302      	movs	r3, #2
 80133b6:	e08a      	b.n	80134ce <HAL_SAI_Transmit_DMA+0x156>
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2201      	movs	r2, #1
 80133bc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	68ba      	ldr	r2, [r7, #8]
 80133c4:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	88fa      	ldrh	r2, [r7, #6]
 80133ca:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	88fa      	ldrh	r2, [r7, #6]
 80133d2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2200      	movs	r2, #0
 80133da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	2212      	movs	r2, #18
 80133e2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80133ec:	4a3a      	ldr	r2, [pc, #232]	@ (80134d8 <HAL_SAI_Transmit_DMA+0x160>)
 80133ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80133f6:	4a39      	ldr	r2, [pc, #228]	@ (80134dc <HAL_SAI_Transmit_DMA+0x164>)
 80133f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013400:	4a37      	ldr	r2, [pc, #220]	@ (80134e0 <HAL_SAI_Transmit_DMA+0x168>)
 8013402:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801340a:	2200      	movs	r2, #0
 801340c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013418:	4619      	mov	r1, r3
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	331c      	adds	r3, #28
 8013420:	461a      	mov	r2, r3
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8013428:	f7f6 faba 	bl	80099a0 <HAL_DMA_Start_IT>
 801342c:	4603      	mov	r3, r0
 801342e:	2b00      	cmp	r3, #0
 8013430:	d005      	beq.n	801343e <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2200      	movs	r2, #0
 8013436:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 801343a:	2301      	movs	r3, #1
 801343c:	e047      	b.n	80134ce <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801343e:	2100      	movs	r1, #0
 8013440:	68f8      	ldr	r0, [r7, #12]
 8013442:	f000 f8e3 	bl	801360c <SAI_InterruptFlag>
 8013446:	4601      	mov	r1, r0
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	691a      	ldr	r2, [r3, #16]
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	430a      	orrs	r2, r1
 8013454:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	681a      	ldr	r2, [r3, #0]
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8013464:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8013466:	e015      	b.n	8013494 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8013468:	f7f5 fa7c 	bl	8008964 <HAL_GetTick>
 801346c:	4602      	mov	r2, r0
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013476:	d90d      	bls.n	8013494 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801347e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2200      	movs	r2, #0
 801348c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 8013490:	2303      	movs	r3, #3
 8013492:	e01c      	b.n	80134ce <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	695b      	ldr	r3, [r3, #20]
 801349a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d0e2      	beq.n	8013468 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d107      	bne.n	80134c0 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	681a      	ldr	r2, [r3, #0]
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80134be:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	2200      	movs	r2, #0
 80134c4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 80134c8:	2300      	movs	r3, #0
 80134ca:	e000      	b.n	80134ce <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 80134cc:	2302      	movs	r3, #2
  }
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3718      	adds	r7, #24
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	08013751 	.word	0x08013751
 80134dc:	080136f1 	.word	0x080136f1
 80134e0:	080137e9 	.word	0x080137e9

080134e4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	4613      	mov	r3, r2
 80134f0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d002      	beq.n	80134fe <HAL_SAI_Receive_DMA+0x1a>
 80134f8:	88fb      	ldrh	r3, [r7, #6]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d101      	bne.n	8013502 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80134fe:	2301      	movs	r3, #1
 8013500:	e079      	b.n	80135f6 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8013508:	b2db      	uxtb	r3, r3
 801350a:	2b01      	cmp	r3, #1
 801350c:	d172      	bne.n	80135f4 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8013514:	2b01      	cmp	r3, #1
 8013516:	d101      	bne.n	801351c <HAL_SAI_Receive_DMA+0x38>
 8013518:	2302      	movs	r3, #2
 801351a:	e06c      	b.n	80135f6 <HAL_SAI_Receive_DMA+0x112>
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	2201      	movs	r2, #1
 8013520:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	68ba      	ldr	r2, [r7, #8]
 8013528:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	88fa      	ldrh	r2, [r7, #6]
 801352e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	88fa      	ldrh	r2, [r7, #6]
 8013536:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2200      	movs	r2, #0
 801353e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	2222      	movs	r2, #34	@ 0x22
 8013546:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013550:	4a2b      	ldr	r2, [pc, #172]	@ (8013600 <HAL_SAI_Receive_DMA+0x11c>)
 8013552:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801355a:	4a2a      	ldr	r2, [pc, #168]	@ (8013604 <HAL_SAI_Receive_DMA+0x120>)
 801355c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013564:	4a28      	ldr	r2, [pc, #160]	@ (8013608 <HAL_SAI_Receive_DMA+0x124>)
 8013566:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801356e:	2200      	movs	r2, #0
 8013570:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	331c      	adds	r3, #28
 801357e:	4619      	mov	r1, r3
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013584:	461a      	mov	r2, r3
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 801358c:	f7f6 fa08 	bl	80099a0 <HAL_DMA_Start_IT>
 8013590:	4603      	mov	r3, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	d005      	beq.n	80135a2 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2200      	movs	r2, #0
 801359a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 801359e:	2301      	movs	r3, #1
 80135a0:	e029      	b.n	80135f6 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80135a2:	2100      	movs	r1, #0
 80135a4:	68f8      	ldr	r0, [r7, #12]
 80135a6:	f000 f831 	bl	801360c <SAI_InterruptFlag>
 80135aa:	4601      	mov	r1, r0
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	691a      	ldr	r2, [r3, #16]
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	430a      	orrs	r2, r1
 80135b8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	681a      	ldr	r2, [r3, #0]
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80135c8:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d107      	bne.n	80135e8 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	681a      	ldr	r2, [r3, #0]
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80135e6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	2200      	movs	r2, #0
 80135ec:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 80135f0:	2300      	movs	r3, #0
 80135f2:	e000      	b.n	80135f6 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80135f4:	2302      	movs	r3, #2
  }
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3710      	adds	r7, #16
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	080137cd 	.word	0x080137cd
 8013604:	0801376d 	.word	0x0801376d
 8013608:	080137e9 	.word	0x080137e9

0801360c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 801360c:	b480      	push	{r7}
 801360e:	b085      	sub	sp, #20
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	460b      	mov	r3, r1
 8013616:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8013618:	2301      	movs	r3, #1
 801361a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 801361c:	78fb      	ldrb	r3, [r7, #3]
 801361e:	2b01      	cmp	r3, #1
 8013620:	d103      	bne.n	801362a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	f043 0308 	orr.w	r3, r3, #8
 8013628:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801362e:	2b08      	cmp	r3, #8
 8013630:	d10b      	bne.n	801364a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8013636:	2b03      	cmp	r3, #3
 8013638:	d003      	beq.n	8013642 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	685b      	ldr	r3, [r3, #4]
 801363e:	2b01      	cmp	r3, #1
 8013640:	d103      	bne.n	801364a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	f043 0310 	orr.w	r3, r3, #16
 8013648:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	685b      	ldr	r3, [r3, #4]
 801364e:	2b03      	cmp	r3, #3
 8013650:	d003      	beq.n	801365a <SAI_InterruptFlag+0x4e>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	2b02      	cmp	r3, #2
 8013658:	d104      	bne.n	8013664 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8013660:	60fb      	str	r3, [r7, #12]
 8013662:	e003      	b.n	801366c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	f043 0304 	orr.w	r3, r3, #4
 801366a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 801366c:	68fb      	ldr	r3, [r7, #12]
}
 801366e:	4618      	mov	r0, r3
 8013670:	3714      	adds	r7, #20
 8013672:	46bd      	mov	sp, r7
 8013674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013678:	4770      	bx	lr
	...

0801367c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 801367c:	b480      	push	{r7}
 801367e:	b085      	sub	sp, #20
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8013684:	4b18      	ldr	r3, [pc, #96]	@ (80136e8 <SAI_Disable+0x6c>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	4a18      	ldr	r2, [pc, #96]	@ (80136ec <SAI_Disable+0x70>)
 801368a:	fba2 2303 	umull	r2, r3, r2, r3
 801368e:	0b1b      	lsrs	r3, r3, #12
 8013690:	009b      	lsls	r3, r3, #2
 8013692:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8013694:	2300      	movs	r3, #0
 8013696:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	681a      	ldr	r2, [r3, #0]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80136a6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d10a      	bne.n	80136c4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80136b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 80136be:	2303      	movs	r3, #3
 80136c0:	72fb      	strb	r3, [r7, #11]
      break;
 80136c2:	e009      	b.n	80136d8 <SAI_Disable+0x5c>
    }
    count--;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	3b01      	subs	r3, #1
 80136c8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d1e7      	bne.n	80136a8 <SAI_Disable+0x2c>

  return status;
 80136d8:	7afb      	ldrb	r3, [r7, #11]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3714      	adds	r7, #20
 80136de:	46bd      	mov	sp, r7
 80136e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e4:	4770      	bx	lr
 80136e6:	bf00      	nop
 80136e8:	24000400 	.word	0x24000400
 80136ec:	95cbec1b 	.word	0x95cbec1b

080136f0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b084      	sub	sp, #16
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136fc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	69db      	ldr	r3, [r3, #28]
 8013702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013706:	d01c      	beq.n	8013742 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2200      	movs	r2, #0
 801370c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801371e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8013720:	2100      	movs	r1, #0
 8013722:	68f8      	ldr	r0, [r7, #12]
 8013724:	f7ff ff72 	bl	801360c <SAI_InterruptFlag>
 8013728:	4603      	mov	r3, r0
 801372a:	43d9      	mvns	r1, r3
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	691a      	ldr	r2, [r3, #16]
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	400a      	ands	r2, r1
 8013738:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	2201      	movs	r2, #1
 801373e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8013742:	68f8      	ldr	r0, [r7, #12]
 8013744:	f7f2 f81a 	bl	800577c <HAL_SAI_TxCpltCallback>
#endif
}
 8013748:	bf00      	nop
 801374a:	3710      	adds	r7, #16
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}

08013750 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801375c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 801375e:	68f8      	ldr	r0, [r7, #12]
 8013760:	f7f2 f817 	bl	8005792 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8013764:	bf00      	nop
 8013766:	3710      	adds	r7, #16
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}

0801376c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b084      	sub	sp, #16
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013778:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	69db      	ldr	r3, [r3, #28]
 801377e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013782:	d01c      	beq.n	80137be <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	681a      	ldr	r2, [r3, #0]
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8013792:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	2200      	movs	r2, #0
 8013798:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801379c:	2100      	movs	r1, #0
 801379e:	68f8      	ldr	r0, [r7, #12]
 80137a0:	f7ff ff34 	bl	801360c <SAI_InterruptFlag>
 80137a4:	4603      	mov	r3, r0
 80137a6:	43d9      	mvns	r1, r3
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	691a      	ldr	r2, [r3, #16]
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	400a      	ands	r2, r1
 80137b4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	2201      	movs	r2, #1
 80137ba:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80137be:	68f8      	ldr	r0, [r7, #12]
 80137c0:	f7f2 fcae 	bl	8006120 <HAL_SAI_RxCpltCallback>
#endif
}
 80137c4:	bf00      	nop
 80137c6:	3710      	adds	r7, #16
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}

080137cc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b084      	sub	sp, #16
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137d8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80137da:	68f8      	ldr	r0, [r7, #12]
 80137dc:	f7f2 fc8a 	bl	80060f4 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80137e0:	bf00      	nop
 80137e2:	3710      	adds	r7, #16
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b084      	sub	sp, #16
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137f4:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f7f7 ffca 	bl	800b790 <HAL_DMA_GetError>
 80137fc:	4603      	mov	r3, r0
 80137fe:	2b02      	cmp	r3, #2
 8013800:	d01d      	beq.n	801383e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013808:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	681a      	ldr	r2, [r3, #0]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8013820:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8013822:	68f8      	ldr	r0, [r7, #12]
 8013824:	f7ff ff2a 	bl	801367c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	2201      	movs	r2, #1
 801382c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	2200      	movs	r2, #0
 8013834:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8013838:	68f8      	ldr	r0, [r7, #12]
 801383a:	f7f1 ffb5 	bl	80057a8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 801383e:	bf00      	nop
 8013840:	3710      	adds	r7, #16
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
	...

08013848 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013854:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801385c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013860:	2b00      	cmp	r3, #0
 8013862:	d008      	beq.n	8013876 <HAL_SD_IRQHandler+0x2e>
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	f003 0308 	and.w	r3, r3, #8
 801386a:	2b00      	cmp	r3, #0
 801386c:	d003      	beq.n	8013876 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f000 f9ac 	bl	8013bcc <SD_Read_IT>
 8013874:	e19a      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013880:	2b00      	cmp	r3, #0
 8013882:	f000 80ac 	beq.w	80139de <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801388e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	4b59      	ldr	r3, [pc, #356]	@ (8013a00 <HAL_SD_IRQHandler+0x1b8>)
 801389c:	400b      	ands	r3, r1
 801389e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80138ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	68da      	ldr	r2, [r3, #12]
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80138be:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	f003 0308 	and.w	r3, r3, #8
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d038      	beq.n	801393c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	f003 0302 	and.w	r3, r3, #2
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d104      	bne.n	80138de <HAL_SD_IRQHandler+0x96>
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	f003 0320 	and.w	r3, r3, #32
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d011      	beq.n	8013902 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	4618      	mov	r0, r3
 80138e4:	f000 ff88 	bl	80147f8 <SDMMC_CmdStopTransfer>
 80138e8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d008      	beq.n	8013902 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	431a      	orrs	r2, r3
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f000 f95b 	bl	8013bb8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	4a3f      	ldr	r2, [pc, #252]	@ (8013a04 <HAL_SD_IRQHandler+0x1bc>)
 8013908:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2201      	movs	r2, #1
 801390e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2200      	movs	r2, #0
 8013916:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	f003 0301 	and.w	r3, r3, #1
 801391e:	2b00      	cmp	r3, #0
 8013920:	d104      	bne.n	801392c <HAL_SD_IRQHandler+0xe4>
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	f003 0302 	and.w	r3, r3, #2
 8013928:	2b00      	cmp	r3, #0
 801392a:	d003      	beq.n	8013934 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f7f4 fde3 	bl	80084f8 <HAL_SD_RxCpltCallback>
 8013932:	e13b      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8013934:	6878      	ldr	r0, [r7, #4]
 8013936:	f7f4 fdcb 	bl	80084d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801393a:	e137      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013942:	2b00      	cmp	r3, #0
 8013944:	f000 8132 	beq.w	8013bac <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	2200      	movs	r2, #0
 801394e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2200      	movs	r2, #0
 8013956:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	2200      	movs	r2, #0
 801395e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	f003 0302 	and.w	r3, r3, #2
 8013966:	2b00      	cmp	r3, #0
 8013968:	d104      	bne.n	8013974 <HAL_SD_IRQHandler+0x12c>
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	f003 0320 	and.w	r3, r3, #32
 8013970:	2b00      	cmp	r3, #0
 8013972:	d011      	beq.n	8013998 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	4618      	mov	r0, r3
 801397a:	f000 ff3d 	bl	80147f8 <SDMMC_CmdStopTransfer>
 801397e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d008      	beq.n	8013998 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	431a      	orrs	r2, r3
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f000 f910 	bl	8013bb8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2201      	movs	r2, #1
 801399c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2200      	movs	r2, #0
 80139a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	f003 0310 	and.w	r3, r3, #16
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d104      	bne.n	80139ba <HAL_SD_IRQHandler+0x172>
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	f003 0320 	and.w	r3, r3, #32
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d002      	beq.n	80139c0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f7f4 fd88 	bl	80084d0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	f003 0301 	and.w	r3, r3, #1
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d105      	bne.n	80139d6 <HAL_SD_IRQHandler+0x18e>
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	f003 0302 	and.w	r3, r3, #2
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	f000 80eb 	beq.w	8013bac <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f7f4 fd8e 	bl	80084f8 <HAL_SD_RxCpltCallback>
}
 80139dc:	e0e6      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80139e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d00d      	beq.n	8013a08 <HAL_SD_IRQHandler+0x1c0>
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	f003 0308 	and.w	r3, r3, #8
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d008      	beq.n	8013a08 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f000 f92e 	bl	8013c58 <SD_Write_IT>
 80139fc:	e0d6      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
 80139fe:	bf00      	nop
 8013a00:	ffff3ec5 	.word	0xffff3ec5
 8013a04:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a0e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	f000 809d 	beq.w	8013b52 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a1e:	f003 0302 	and.w	r3, r3, #2
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d005      	beq.n	8013a32 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a2a:	f043 0202 	orr.w	r2, r3, #2
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a38:	f003 0308 	and.w	r3, r3, #8
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d005      	beq.n	8013a4c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a44:	f043 0208 	orr.w	r2, r3, #8
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a52:	f003 0320 	and.w	r3, r3, #32
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d005      	beq.n	8013a66 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a5e:	f043 0220 	orr.w	r2, r3, #32
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a6c:	f003 0310 	and.w	r3, r3, #16
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d005      	beq.n	8013a80 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a78:	f043 0210 	orr.w	r2, r3, #16
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	4a4b      	ldr	r2, [pc, #300]	@ (8013bb4 <HAL_SD_IRQHandler+0x36c>)
 8013a86:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8013a96:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	68da      	ldr	r2, [r3, #12]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013aa6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	68da      	ldr	r2, [r3, #12]
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8013ac6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	4618      	mov	r0, r3
 8013ace:	f000 fe93 	bl	80147f8 <SDMMC_CmdStopTransfer>
 8013ad2:	4602      	mov	r2, r0
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ad8:	431a      	orrs	r2, r3
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	68da      	ldr	r2, [r3, #12]
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013aec:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013af6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	f003 0308 	and.w	r3, r3, #8
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00a      	beq.n	8013b18 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2201      	movs	r2, #1
 8013b06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f000 f851 	bl	8013bb8 <HAL_SD_ErrorCallback>
}
 8013b16:	e049      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d044      	beq.n	8013bac <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d040      	beq.n	8013bac <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8013b38:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2201      	movs	r2, #1
 8013b46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f000 f834 	bl	8013bb8 <HAL_SD_ErrorCallback>
}
 8013b50:	e02c      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d025      	beq.n	8013bac <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b68:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013b70:	f003 0304 	and.w	r3, r3, #4
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d10c      	bne.n	8013b92 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	f003 0320 	and.w	r3, r3, #32
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d003      	beq.n	8013b8a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f000 f8d0 	bl	8013d28 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8013b88:	e010      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f000 f8b8 	bl	8013d00 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8013b90:	e00c      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	f003 0320 	and.w	r3, r3, #32
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d003      	beq.n	8013ba4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f000 f8b9 	bl	8013d14 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8013ba2:	e003      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 f8a1 	bl	8013cec <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8013baa:	e7ff      	b.n	8013bac <HAL_SD_IRQHandler+0x364>
 8013bac:	bf00      	nop
 8013bae:	3710      	adds	r7, #16
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	18000f3a 	.word	0x18000f3a

08013bb8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8013bb8:	b480      	push	{r7}
 8013bba:	b083      	sub	sp, #12
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8013bc0:	bf00      	nop
 8013bc2:	370c      	adds	r7, #12
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bca:	4770      	bx	lr

08013bcc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b086      	sub	sp, #24
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bd8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bde:	2b1f      	cmp	r3, #31
 8013be0:	d936      	bls.n	8013c50 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8013be2:	2300      	movs	r3, #0
 8013be4:	617b      	str	r3, [r7, #20]
 8013be6:	e027      	b.n	8013c38 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	4618      	mov	r0, r3
 8013bee:	f000 fd9b 	bl	8014728 <SDMMC_ReadFIFO>
 8013bf2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	b2da      	uxtb	r2, r3
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	3301      	adds	r3, #1
 8013c00:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	0a1b      	lsrs	r3, r3, #8
 8013c06:	b2da      	uxtb	r2, r3
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	3301      	adds	r3, #1
 8013c10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	0c1b      	lsrs	r3, r3, #16
 8013c16:	b2da      	uxtb	r2, r3
 8013c18:	693b      	ldr	r3, [r7, #16]
 8013c1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	3301      	adds	r3, #1
 8013c20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	0e1b      	lsrs	r3, r3, #24
 8013c26:	b2da      	uxtb	r2, r3
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	3301      	adds	r3, #1
 8013c30:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	3301      	adds	r3, #1
 8013c36:	617b      	str	r3, [r7, #20]
 8013c38:	697b      	ldr	r3, [r7, #20]
 8013c3a:	2b07      	cmp	r3, #7
 8013c3c:	d9d4      	bls.n	8013be8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	693a      	ldr	r2, [r7, #16]
 8013c42:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c48:	f1a3 0220 	sub.w	r2, r3, #32
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8013c50:	bf00      	nop
 8013c52:	3718      	adds	r7, #24
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b086      	sub	sp, #24
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	69db      	ldr	r3, [r3, #28]
 8013c64:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6a1b      	ldr	r3, [r3, #32]
 8013c6a:	2b1f      	cmp	r3, #31
 8013c6c:	d93a      	bls.n	8013ce4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8013c6e:	2300      	movs	r3, #0
 8013c70:	617b      	str	r3, [r7, #20]
 8013c72:	e02b      	b.n	8013ccc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	60fb      	str	r3, [r7, #12]
      tmp++;
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	3301      	adds	r3, #1
 8013c7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8013c80:	693b      	ldr	r3, [r7, #16]
 8013c82:	781b      	ldrb	r3, [r3, #0]
 8013c84:	021a      	lsls	r2, r3, #8
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	4313      	orrs	r3, r2
 8013c8a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8013c8c:	693b      	ldr	r3, [r7, #16]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	041a      	lsls	r2, r3, #16
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	4313      	orrs	r3, r2
 8013c9c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	3301      	adds	r3, #1
 8013ca2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8013ca4:	693b      	ldr	r3, [r7, #16]
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	061a      	lsls	r2, r3, #24
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	4313      	orrs	r3, r2
 8013cae:	60fb      	str	r3, [r7, #12]
      tmp++;
 8013cb0:	693b      	ldr	r3, [r7, #16]
 8013cb2:	3301      	adds	r3, #1
 8013cb4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	f107 020c 	add.w	r2, r7, #12
 8013cbe:	4611      	mov	r1, r2
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f000 fd3e 	bl	8014742 <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	3301      	adds	r3, #1
 8013cca:	617b      	str	r3, [r7, #20]
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	2b07      	cmp	r3, #7
 8013cd0:	d9d0      	bls.n	8013c74 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	693a      	ldr	r2, [r7, #16]
 8013cd6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	6a1b      	ldr	r3, [r3, #32]
 8013cdc:	f1a3 0220 	sub.w	r2, r3, #32
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	621a      	str	r2, [r3, #32]
  }
}
 8013ce4:	bf00      	nop
 8013ce6:	3718      	adds	r7, #24
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}

08013cec <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8013cf4:	bf00      	nop
 8013cf6:	370c      	adds	r7, #12
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfe:	4770      	bx	lr

08013d00 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8013d08:	bf00      	nop
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d12:	4770      	bx	lr

08013d14 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8013d14:	b480      	push	{r7}
 8013d16:	b083      	sub	sp, #12
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8013d1c:	bf00      	nop
 8013d1e:	370c      	adds	r7, #12
 8013d20:	46bd      	mov	sp, r7
 8013d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d26:	4770      	bx	lr

08013d28 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8013d30:	bf00      	nop
 8013d32:	370c      	adds	r7, #12
 8013d34:	46bd      	mov	sp, r7
 8013d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3a:	4770      	bx	lr

08013d3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d101      	bne.n	8013d50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	e02b      	b.n	8013da8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013d56:	b2db      	uxtb	r3, r3
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d106      	bne.n	8013d6a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f000 f825 	bl	8013db4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2202      	movs	r2, #2
 8013d6e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	3304      	adds	r3, #4
 8013d7a:	4619      	mov	r1, r3
 8013d7c:	4610      	mov	r0, r2
 8013d7e:	f000 fbd1 	bl	8014524 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	6818      	ldr	r0, [r3, #0]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	6839      	ldr	r1, [r7, #0]
 8013d8e:	f000 fc25 	bl	80145dc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8013d92:	4b07      	ldr	r3, [pc, #28]	@ (8013db0 <HAL_SDRAM_Init+0x74>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	4a06      	ldr	r2, [pc, #24]	@ (8013db0 <HAL_SDRAM_Init+0x74>)
 8013d98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8013d9c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2201      	movs	r2, #1
 8013da2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8013da6:	2300      	movs	r3, #0
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3708      	adds	r7, #8
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	52004000 	.word	0x52004000

08013db4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8013db4:	b480      	push	{r7}
 8013db6:	b083      	sub	sp, #12
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8013dbc:	bf00      	nop
 8013dbe:	370c      	adds	r7, #12
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc6:	4770      	bx	lr

08013dc8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b086      	sub	sp, #24
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	60f8      	str	r0, [r7, #12]
 8013dd0:	60b9      	str	r1, [r7, #8]
 8013dd2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013dda:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8013ddc:	7dfb      	ldrb	r3, [r7, #23]
 8013dde:	2b02      	cmp	r3, #2
 8013de0:	d101      	bne.n	8013de6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8013de2:	2302      	movs	r3, #2
 8013de4:	e021      	b.n	8013e2a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8013de6:	7dfb      	ldrb	r3, [r7, #23]
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	d002      	beq.n	8013df2 <HAL_SDRAM_SendCommand+0x2a>
 8013dec:	7dfb      	ldrb	r3, [r7, #23]
 8013dee:	2b05      	cmp	r3, #5
 8013df0:	d118      	bne.n	8013e24 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	2202      	movs	r2, #2
 8013df6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	68b9      	ldr	r1, [r7, #8]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f000 fc54 	bl	80146b0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	2b02      	cmp	r3, #2
 8013e0e:	d104      	bne.n	8013e1a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	2205      	movs	r2, #5
 8013e14:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013e18:	e006      	b.n	8013e28 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	2201      	movs	r2, #1
 8013e1e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013e22:	e001      	b.n	8013e28 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8013e24:	2301      	movs	r3, #1
 8013e26:	e000      	b.n	8013e2a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8013e28:	2300      	movs	r3, #0
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3718      	adds	r7, #24
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}

08013e32 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8013e32:	b580      	push	{r7, lr}
 8013e34:	b082      	sub	sp, #8
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	6078      	str	r0, [r7, #4]
 8013e3a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013e42:	b2db      	uxtb	r3, r3
 8013e44:	2b02      	cmp	r3, #2
 8013e46:	d101      	bne.n	8013e4c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8013e48:	2302      	movs	r3, #2
 8013e4a:	e016      	b.n	8013e7a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	d10f      	bne.n	8013e78 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2202      	movs	r2, #2
 8013e5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	6839      	ldr	r1, [r7, #0]
 8013e66:	4618      	mov	r0, r3
 8013e68:	f000 fc46 	bl	80146f8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2201      	movs	r2, #1
 8013e70:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8013e74:	2300      	movs	r3, #0
 8013e76:	e000      	b.n	8013e7a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8013e78:	2301      	movs	r3, #1
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3708      	adds	r7, #8
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}

08013e82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013e82:	b580      	push	{r7, lr}
 8013e84:	b082      	sub	sp, #8
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d101      	bne.n	8013e94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013e90:	2301      	movs	r3, #1
 8013e92:	e049      	b.n	8013f28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013e9a:	b2db      	uxtb	r3, r3
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d106      	bne.n	8013eae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f000 f841 	bl	8013f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2202      	movs	r2, #2
 8013eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	681a      	ldr	r2, [r3, #0]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	3304      	adds	r3, #4
 8013ebe:	4619      	mov	r1, r3
 8013ec0:	4610      	mov	r0, r2
 8013ec2:	f000 f9e7 	bl	8014294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2201      	movs	r2, #1
 8013eca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2201      	movs	r2, #1
 8013ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2201      	movs	r2, #1
 8013eda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2201      	movs	r2, #1
 8013ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2201      	movs	r2, #1
 8013eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2201      	movs	r2, #1
 8013ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2201      	movs	r2, #1
 8013efa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2201      	movs	r2, #1
 8013f02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2201      	movs	r2, #1
 8013f0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	2201      	movs	r2, #1
 8013f12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2201      	movs	r2, #1
 8013f1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2201      	movs	r2, #1
 8013f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013f26:	2300      	movs	r3, #0
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3708      	adds	r7, #8
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013f38:	bf00      	nop
 8013f3a:	370c      	adds	r7, #12
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr

08013f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013f44:	b480      	push	{r7}
 8013f46:	b085      	sub	sp, #20
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013f52:	b2db      	uxtb	r3, r3
 8013f54:	2b01      	cmp	r3, #1
 8013f56:	d001      	beq.n	8013f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013f58:	2301      	movs	r3, #1
 8013f5a:	e054      	b.n	8014006 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2202      	movs	r2, #2
 8013f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	68da      	ldr	r2, [r3, #12]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	f042 0201 	orr.w	r2, r2, #1
 8013f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	4a26      	ldr	r2, [pc, #152]	@ (8014014 <HAL_TIM_Base_Start_IT+0xd0>)
 8013f7a:	4293      	cmp	r3, r2
 8013f7c:	d022      	beq.n	8013fc4 <HAL_TIM_Base_Start_IT+0x80>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013f86:	d01d      	beq.n	8013fc4 <HAL_TIM_Base_Start_IT+0x80>
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	4a22      	ldr	r2, [pc, #136]	@ (8014018 <HAL_TIM_Base_Start_IT+0xd4>)
 8013f8e:	4293      	cmp	r3, r2
 8013f90:	d018      	beq.n	8013fc4 <HAL_TIM_Base_Start_IT+0x80>
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	4a21      	ldr	r2, [pc, #132]	@ (801401c <HAL_TIM_Base_Start_IT+0xd8>)
 8013f98:	4293      	cmp	r3, r2
 8013f9a:	d013      	beq.n	8013fc4 <HAL_TIM_Base_Start_IT+0x80>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8014020 <HAL_TIM_Base_Start_IT+0xdc>)
 8013fa2:	4293      	cmp	r3, r2
 8013fa4:	d00e      	beq.n	8013fc4 <HAL_TIM_Base_Start_IT+0x80>
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	4a1e      	ldr	r2, [pc, #120]	@ (8014024 <HAL_TIM_Base_Start_IT+0xe0>)
 8013fac:	4293      	cmp	r3, r2
 8013fae:	d009      	beq.n	8013fc4 <HAL_TIM_Base_Start_IT+0x80>
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8014028 <HAL_TIM_Base_Start_IT+0xe4>)
 8013fb6:	4293      	cmp	r3, r2
 8013fb8:	d004      	beq.n	8013fc4 <HAL_TIM_Base_Start_IT+0x80>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	4a1b      	ldr	r2, [pc, #108]	@ (801402c <HAL_TIM_Base_Start_IT+0xe8>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d115      	bne.n	8013ff0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	689a      	ldr	r2, [r3, #8]
 8013fca:	4b19      	ldr	r3, [pc, #100]	@ (8014030 <HAL_TIM_Base_Start_IT+0xec>)
 8013fcc:	4013      	ands	r3, r2
 8013fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2b06      	cmp	r3, #6
 8013fd4:	d015      	beq.n	8014002 <HAL_TIM_Base_Start_IT+0xbe>
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013fdc:	d011      	beq.n	8014002 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	681a      	ldr	r2, [r3, #0]
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	f042 0201 	orr.w	r2, r2, #1
 8013fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013fee:	e008      	b.n	8014002 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	681a      	ldr	r2, [r3, #0]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	f042 0201 	orr.w	r2, r2, #1
 8013ffe:	601a      	str	r2, [r3, #0]
 8014000:	e000      	b.n	8014004 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014002:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014004:	2300      	movs	r3, #0
}
 8014006:	4618      	mov	r0, r3
 8014008:	3714      	adds	r7, #20
 801400a:	46bd      	mov	sp, r7
 801400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014010:	4770      	bx	lr
 8014012:	bf00      	nop
 8014014:	40010000 	.word	0x40010000
 8014018:	40000400 	.word	0x40000400
 801401c:	40000800 	.word	0x40000800
 8014020:	40000c00 	.word	0x40000c00
 8014024:	40010400 	.word	0x40010400
 8014028:	40001800 	.word	0x40001800
 801402c:	40014000 	.word	0x40014000
 8014030:	00010007 	.word	0x00010007

08014034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b084      	sub	sp, #16
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	691b      	ldr	r3, [r3, #16]
 801404a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	f003 0302 	and.w	r3, r3, #2
 8014052:	2b00      	cmp	r3, #0
 8014054:	d020      	beq.n	8014098 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	f003 0302 	and.w	r3, r3, #2
 801405c:	2b00      	cmp	r3, #0
 801405e:	d01b      	beq.n	8014098 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	f06f 0202 	mvn.w	r2, #2
 8014068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2201      	movs	r2, #1
 801406e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	699b      	ldr	r3, [r3, #24]
 8014076:	f003 0303 	and.w	r3, r3, #3
 801407a:	2b00      	cmp	r3, #0
 801407c:	d003      	beq.n	8014086 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f000 f8e9 	bl	8014256 <HAL_TIM_IC_CaptureCallback>
 8014084:	e005      	b.n	8014092 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014086:	6878      	ldr	r0, [r7, #4]
 8014088:	f000 f8db 	bl	8014242 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f000 f8ec 	bl	801426a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2200      	movs	r2, #0
 8014096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	f003 0304 	and.w	r3, r3, #4
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d020      	beq.n	80140e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	f003 0304 	and.w	r3, r3, #4
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d01b      	beq.n	80140e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f06f 0204 	mvn.w	r2, #4
 80140b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2202      	movs	r2, #2
 80140ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	699b      	ldr	r3, [r3, #24]
 80140c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d003      	beq.n	80140d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f000 f8c3 	bl	8014256 <HAL_TIM_IC_CaptureCallback>
 80140d0:	e005      	b.n	80140de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f000 f8b5 	bl	8014242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f000 f8c6 	bl	801426a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2200      	movs	r2, #0
 80140e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	f003 0308 	and.w	r3, r3, #8
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d020      	beq.n	8014130 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	f003 0308 	and.w	r3, r3, #8
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d01b      	beq.n	8014130 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	f06f 0208 	mvn.w	r2, #8
 8014100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2204      	movs	r2, #4
 8014106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	69db      	ldr	r3, [r3, #28]
 801410e:	f003 0303 	and.w	r3, r3, #3
 8014112:	2b00      	cmp	r3, #0
 8014114:	d003      	beq.n	801411e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f000 f89d 	bl	8014256 <HAL_TIM_IC_CaptureCallback>
 801411c:	e005      	b.n	801412a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f000 f88f 	bl	8014242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f000 f8a0 	bl	801426a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	2200      	movs	r2, #0
 801412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	f003 0310 	and.w	r3, r3, #16
 8014136:	2b00      	cmp	r3, #0
 8014138:	d020      	beq.n	801417c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	f003 0310 	and.w	r3, r3, #16
 8014140:	2b00      	cmp	r3, #0
 8014142:	d01b      	beq.n	801417c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	f06f 0210 	mvn.w	r2, #16
 801414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2208      	movs	r2, #8
 8014152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	69db      	ldr	r3, [r3, #28]
 801415a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801415e:	2b00      	cmp	r3, #0
 8014160:	d003      	beq.n	801416a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f000 f877 	bl	8014256 <HAL_TIM_IC_CaptureCallback>
 8014168:	e005      	b.n	8014176 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f000 f869 	bl	8014242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f000 f87a 	bl	801426a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	2200      	movs	r2, #0
 801417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	f003 0301 	and.w	r3, r3, #1
 8014182:	2b00      	cmp	r3, #0
 8014184:	d00c      	beq.n	80141a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	f003 0301 	and.w	r3, r3, #1
 801418c:	2b00      	cmp	r3, #0
 801418e:	d007      	beq.n	80141a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	f06f 0201 	mvn.w	r2, #1
 8014198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f000 f9ae 	bl	80144fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80141a0:	68bb      	ldr	r3, [r7, #8]
 80141a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d104      	bne.n	80141b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d00c      	beq.n	80141ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d007      	beq.n	80141ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80141c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f000 f90d 	bl	80143e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d00c      	beq.n	80141f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d007      	beq.n	80141f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80141ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f000 f905 	bl	80143fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d00c      	beq.n	8014216 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014202:	2b00      	cmp	r3, #0
 8014204:	d007      	beq.n	8014216 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801420e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f000 f834 	bl	801427e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	f003 0320 	and.w	r3, r3, #32
 801421c:	2b00      	cmp	r3, #0
 801421e:	d00c      	beq.n	801423a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f003 0320 	and.w	r3, r3, #32
 8014226:	2b00      	cmp	r3, #0
 8014228:	d007      	beq.n	801423a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	f06f 0220 	mvn.w	r2, #32
 8014232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	f000 f8cd 	bl	80143d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801423a:	bf00      	nop
 801423c:	3710      	adds	r7, #16
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}

08014242 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014242:	b480      	push	{r7}
 8014244:	b083      	sub	sp, #12
 8014246:	af00      	add	r7, sp, #0
 8014248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801424a:	bf00      	nop
 801424c:	370c      	adds	r7, #12
 801424e:	46bd      	mov	sp, r7
 8014250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014254:	4770      	bx	lr

08014256 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014256:	b480      	push	{r7}
 8014258:	b083      	sub	sp, #12
 801425a:	af00      	add	r7, sp, #0
 801425c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801425e:	bf00      	nop
 8014260:	370c      	adds	r7, #12
 8014262:	46bd      	mov	sp, r7
 8014264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014268:	4770      	bx	lr

0801426a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801426a:	b480      	push	{r7}
 801426c:	b083      	sub	sp, #12
 801426e:	af00      	add	r7, sp, #0
 8014270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014272:	bf00      	nop
 8014274:	370c      	adds	r7, #12
 8014276:	46bd      	mov	sp, r7
 8014278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427c:	4770      	bx	lr

0801427e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801427e:	b480      	push	{r7}
 8014280:	b083      	sub	sp, #12
 8014282:	af00      	add	r7, sp, #0
 8014284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014286:	bf00      	nop
 8014288:	370c      	adds	r7, #12
 801428a:	46bd      	mov	sp, r7
 801428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014290:	4770      	bx	lr
	...

08014294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014294:	b480      	push	{r7}
 8014296:	b085      	sub	sp, #20
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	4a43      	ldr	r2, [pc, #268]	@ (80143b4 <TIM_Base_SetConfig+0x120>)
 80142a8:	4293      	cmp	r3, r2
 80142aa:	d013      	beq.n	80142d4 <TIM_Base_SetConfig+0x40>
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80142b2:	d00f      	beq.n	80142d4 <TIM_Base_SetConfig+0x40>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	4a40      	ldr	r2, [pc, #256]	@ (80143b8 <TIM_Base_SetConfig+0x124>)
 80142b8:	4293      	cmp	r3, r2
 80142ba:	d00b      	beq.n	80142d4 <TIM_Base_SetConfig+0x40>
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	4a3f      	ldr	r2, [pc, #252]	@ (80143bc <TIM_Base_SetConfig+0x128>)
 80142c0:	4293      	cmp	r3, r2
 80142c2:	d007      	beq.n	80142d4 <TIM_Base_SetConfig+0x40>
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	4a3e      	ldr	r2, [pc, #248]	@ (80143c0 <TIM_Base_SetConfig+0x12c>)
 80142c8:	4293      	cmp	r3, r2
 80142ca:	d003      	beq.n	80142d4 <TIM_Base_SetConfig+0x40>
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	4a3d      	ldr	r2, [pc, #244]	@ (80143c4 <TIM_Base_SetConfig+0x130>)
 80142d0:	4293      	cmp	r3, r2
 80142d2:	d108      	bne.n	80142e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80142da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	685b      	ldr	r3, [r3, #4]
 80142e0:	68fa      	ldr	r2, [r7, #12]
 80142e2:	4313      	orrs	r3, r2
 80142e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	4a32      	ldr	r2, [pc, #200]	@ (80143b4 <TIM_Base_SetConfig+0x120>)
 80142ea:	4293      	cmp	r3, r2
 80142ec:	d01f      	beq.n	801432e <TIM_Base_SetConfig+0x9a>
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80142f4:	d01b      	beq.n	801432e <TIM_Base_SetConfig+0x9a>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	4a2f      	ldr	r2, [pc, #188]	@ (80143b8 <TIM_Base_SetConfig+0x124>)
 80142fa:	4293      	cmp	r3, r2
 80142fc:	d017      	beq.n	801432e <TIM_Base_SetConfig+0x9a>
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	4a2e      	ldr	r2, [pc, #184]	@ (80143bc <TIM_Base_SetConfig+0x128>)
 8014302:	4293      	cmp	r3, r2
 8014304:	d013      	beq.n	801432e <TIM_Base_SetConfig+0x9a>
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	4a2d      	ldr	r2, [pc, #180]	@ (80143c0 <TIM_Base_SetConfig+0x12c>)
 801430a:	4293      	cmp	r3, r2
 801430c:	d00f      	beq.n	801432e <TIM_Base_SetConfig+0x9a>
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	4a2c      	ldr	r2, [pc, #176]	@ (80143c4 <TIM_Base_SetConfig+0x130>)
 8014312:	4293      	cmp	r3, r2
 8014314:	d00b      	beq.n	801432e <TIM_Base_SetConfig+0x9a>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	4a2b      	ldr	r2, [pc, #172]	@ (80143c8 <TIM_Base_SetConfig+0x134>)
 801431a:	4293      	cmp	r3, r2
 801431c:	d007      	beq.n	801432e <TIM_Base_SetConfig+0x9a>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	4a2a      	ldr	r2, [pc, #168]	@ (80143cc <TIM_Base_SetConfig+0x138>)
 8014322:	4293      	cmp	r3, r2
 8014324:	d003      	beq.n	801432e <TIM_Base_SetConfig+0x9a>
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	4a29      	ldr	r2, [pc, #164]	@ (80143d0 <TIM_Base_SetConfig+0x13c>)
 801432a:	4293      	cmp	r3, r2
 801432c:	d108      	bne.n	8014340 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	68db      	ldr	r3, [r3, #12]
 801433a:	68fa      	ldr	r2, [r7, #12]
 801433c:	4313      	orrs	r3, r2
 801433e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	695b      	ldr	r3, [r3, #20]
 801434a:	4313      	orrs	r3, r2
 801434c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	689a      	ldr	r2, [r3, #8]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	681a      	ldr	r2, [r3, #0]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	4a14      	ldr	r2, [pc, #80]	@ (80143b4 <TIM_Base_SetConfig+0x120>)
 8014362:	4293      	cmp	r3, r2
 8014364:	d00f      	beq.n	8014386 <TIM_Base_SetConfig+0xf2>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	4a16      	ldr	r2, [pc, #88]	@ (80143c4 <TIM_Base_SetConfig+0x130>)
 801436a:	4293      	cmp	r3, r2
 801436c:	d00b      	beq.n	8014386 <TIM_Base_SetConfig+0xf2>
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4a15      	ldr	r2, [pc, #84]	@ (80143c8 <TIM_Base_SetConfig+0x134>)
 8014372:	4293      	cmp	r3, r2
 8014374:	d007      	beq.n	8014386 <TIM_Base_SetConfig+0xf2>
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	4a14      	ldr	r2, [pc, #80]	@ (80143cc <TIM_Base_SetConfig+0x138>)
 801437a:	4293      	cmp	r3, r2
 801437c:	d003      	beq.n	8014386 <TIM_Base_SetConfig+0xf2>
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	4a13      	ldr	r2, [pc, #76]	@ (80143d0 <TIM_Base_SetConfig+0x13c>)
 8014382:	4293      	cmp	r3, r2
 8014384:	d103      	bne.n	801438e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	691a      	ldr	r2, [r3, #16]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f043 0204 	orr.w	r2, r3, #4
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	2201      	movs	r2, #1
 801439e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	68fa      	ldr	r2, [r7, #12]
 80143a4:	601a      	str	r2, [r3, #0]
}
 80143a6:	bf00      	nop
 80143a8:	3714      	adds	r7, #20
 80143aa:	46bd      	mov	sp, r7
 80143ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b0:	4770      	bx	lr
 80143b2:	bf00      	nop
 80143b4:	40010000 	.word	0x40010000
 80143b8:	40000400 	.word	0x40000400
 80143bc:	40000800 	.word	0x40000800
 80143c0:	40000c00 	.word	0x40000c00
 80143c4:	40010400 	.word	0x40010400
 80143c8:	40014000 	.word	0x40014000
 80143cc:	40014400 	.word	0x40014400
 80143d0:	40014800 	.word	0x40014800

080143d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80143d4:	b480      	push	{r7}
 80143d6:	b083      	sub	sp, #12
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80143dc:	bf00      	nop
 80143de:	370c      	adds	r7, #12
 80143e0:	46bd      	mov	sp, r7
 80143e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e6:	4770      	bx	lr

080143e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80143e8:	b480      	push	{r7}
 80143ea:	b083      	sub	sp, #12
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80143f0:	bf00      	nop
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fa:	4770      	bx	lr

080143fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80143fc:	b480      	push	{r7}
 80143fe:	b083      	sub	sp, #12
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014404:	bf00      	nop
 8014406:	370c      	adds	r7, #12
 8014408:	46bd      	mov	sp, r7
 801440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440e:	4770      	bx	lr

08014410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b090      	sub	sp, #64	@ 0x40
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8014418:	4b33      	ldr	r3, [pc, #204]	@ (80144e8 <HAL_InitTick+0xd8>)
 801441a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801441e:	4a32      	ldr	r2, [pc, #200]	@ (80144e8 <HAL_InitTick+0xd8>)
 8014420:	f043 0310 	orr.w	r3, r3, #16
 8014424:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014428:	4b2f      	ldr	r3, [pc, #188]	@ (80144e8 <HAL_InitTick+0xd8>)
 801442a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801442e:	f003 0310 	and.w	r3, r3, #16
 8014432:	60bb      	str	r3, [r7, #8]
 8014434:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8014436:	f107 020c 	add.w	r2, r7, #12
 801443a:	f107 0310 	add.w	r3, r7, #16
 801443e:	4611      	mov	r1, r2
 8014440:	4618      	mov	r0, r3
 8014442:	f7fb fcd1 	bl	800fde8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8014446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014448:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801444a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801444c:	2b00      	cmp	r3, #0
 801444e:	d103      	bne.n	8014458 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8014450:	f7fb fc9e 	bl	800fd90 <HAL_RCC_GetPCLK1Freq>
 8014454:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014456:	e004      	b.n	8014462 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8014458:	f7fb fc9a 	bl	800fd90 <HAL_RCC_GetPCLK1Freq>
 801445c:	4603      	mov	r3, r0
 801445e:	005b      	lsls	r3, r3, #1
 8014460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8014462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014464:	4a21      	ldr	r2, [pc, #132]	@ (80144ec <HAL_InitTick+0xdc>)
 8014466:	fba2 2303 	umull	r2, r3, r2, r3
 801446a:	0c9b      	lsrs	r3, r3, #18
 801446c:	3b01      	subs	r3, #1
 801446e:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8014470:	4b1f      	ldr	r3, [pc, #124]	@ (80144f0 <HAL_InitTick+0xe0>)
 8014472:	4a20      	ldr	r2, [pc, #128]	@ (80144f4 <HAL_InitTick+0xe4>)
 8014474:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8014476:	4b1e      	ldr	r3, [pc, #120]	@ (80144f0 <HAL_InitTick+0xe0>)
 8014478:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801447c:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 801447e:	4a1c      	ldr	r2, [pc, #112]	@ (80144f0 <HAL_InitTick+0xe0>)
 8014480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014482:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0U;
 8014484:	4b1a      	ldr	r3, [pc, #104]	@ (80144f0 <HAL_InitTick+0xe0>)
 8014486:	2200      	movs	r2, #0
 8014488:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 801448a:	4b19      	ldr	r3, [pc, #100]	@ (80144f0 <HAL_InitTick+0xe0>)
 801448c:	2200      	movs	r2, #0
 801448e:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&TimHandle);
 8014490:	4817      	ldr	r0, [pc, #92]	@ (80144f0 <HAL_InitTick+0xe0>)
 8014492:	f7ff fcf6 	bl	8013e82 <HAL_TIM_Base_Init>
 8014496:	4603      	mov	r3, r0
 8014498:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (status == HAL_OK)
 801449c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d11b      	bne.n	80144dc <HAL_InitTick+0xcc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&TimHandle);
 80144a4:	4812      	ldr	r0, [pc, #72]	@ (80144f0 <HAL_InitTick+0xe0>)
 80144a6:	f7ff fd4d 	bl	8013f44 <HAL_TIM_Base_Start_IT>
 80144aa:	4603      	mov	r3, r0
 80144ac:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (status == HAL_OK)
 80144b0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d111      	bne.n	80144dc <HAL_InitTick+0xcc>
    {
	  /* Enable the TIM6 global Interrupt */
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80144b8:	2036      	movs	r0, #54	@ 0x36
 80144ba:	f7f4 fb95 	bl	8008be8 <HAL_NVIC_EnableIRQ>
   
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2b0f      	cmp	r3, #15
 80144c2:	d808      	bhi.n	80144d6 <HAL_InitTick+0xc6>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 80144c4:	2200      	movs	r2, #0
 80144c6:	6879      	ldr	r1, [r7, #4]
 80144c8:	2036      	movs	r0, #54	@ 0x36
 80144ca:	f7f4 fb73 	bl	8008bb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80144ce:	4a0a      	ldr	r2, [pc, #40]	@ (80144f8 <HAL_InitTick+0xe8>)
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	6013      	str	r3, [r2, #0]
 80144d4:	e002      	b.n	80144dc <HAL_InitTick+0xcc>
      }
      else
      {
        status = HAL_ERROR;
 80144d6:	2301      	movs	r3, #1
 80144d8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }
   }
}

  /* Return function status */
  return status;
 80144dc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3740      	adds	r7, #64	@ 0x40
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	58024400 	.word	0x58024400
 80144ec:	431bde83 	.word	0x431bde83
 80144f0:	24006084 	.word	0x24006084
 80144f4:	40001000 	.word	0x40001000
 80144f8:	240005d4 	.word	0x240005d4

080144fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8014504:	f7f4 fa1a 	bl	800893c <HAL_IncTick>
}
 8014508:	bf00      	nop
 801450a:	3708      	adds	r7, #8
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}

08014510 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8014514:	4802      	ldr	r0, [pc, #8]	@ (8014520 <TIM6_DAC_IRQHandler+0x10>)
 8014516:	f7ff fd8d 	bl	8014034 <HAL_TIM_IRQHandler>
}
 801451a:	bf00      	nop
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	24006084 	.word	0x24006084

08014524 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8014524:	b480      	push	{r7}
 8014526:	b083      	sub	sp, #12
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d121      	bne.n	801457a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681a      	ldr	r2, [r3, #0]
 801453a:	4b27      	ldr	r3, [pc, #156]	@ (80145d8 <FMC_SDRAM_Init+0xb4>)
 801453c:	4013      	ands	r3, r2
 801453e:	683a      	ldr	r2, [r7, #0]
 8014540:	6851      	ldr	r1, [r2, #4]
 8014542:	683a      	ldr	r2, [r7, #0]
 8014544:	6892      	ldr	r2, [r2, #8]
 8014546:	4311      	orrs	r1, r2
 8014548:	683a      	ldr	r2, [r7, #0]
 801454a:	68d2      	ldr	r2, [r2, #12]
 801454c:	4311      	orrs	r1, r2
 801454e:	683a      	ldr	r2, [r7, #0]
 8014550:	6912      	ldr	r2, [r2, #16]
 8014552:	4311      	orrs	r1, r2
 8014554:	683a      	ldr	r2, [r7, #0]
 8014556:	6952      	ldr	r2, [r2, #20]
 8014558:	4311      	orrs	r1, r2
 801455a:	683a      	ldr	r2, [r7, #0]
 801455c:	6992      	ldr	r2, [r2, #24]
 801455e:	4311      	orrs	r1, r2
 8014560:	683a      	ldr	r2, [r7, #0]
 8014562:	69d2      	ldr	r2, [r2, #28]
 8014564:	4311      	orrs	r1, r2
 8014566:	683a      	ldr	r2, [r7, #0]
 8014568:	6a12      	ldr	r2, [r2, #32]
 801456a:	4311      	orrs	r1, r2
 801456c:	683a      	ldr	r2, [r7, #0]
 801456e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8014570:	430a      	orrs	r2, r1
 8014572:	431a      	orrs	r2, r3
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	601a      	str	r2, [r3, #0]
 8014578:	e026      	b.n	80145c8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	69d9      	ldr	r1, [r3, #28]
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	6a1b      	ldr	r3, [r3, #32]
 801458a:	4319      	orrs	r1, r3
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014590:	430b      	orrs	r3, r1
 8014592:	431a      	orrs	r2, r3
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	685a      	ldr	r2, [r3, #4]
 801459c:	4b0e      	ldr	r3, [pc, #56]	@ (80145d8 <FMC_SDRAM_Init+0xb4>)
 801459e:	4013      	ands	r3, r2
 80145a0:	683a      	ldr	r2, [r7, #0]
 80145a2:	6851      	ldr	r1, [r2, #4]
 80145a4:	683a      	ldr	r2, [r7, #0]
 80145a6:	6892      	ldr	r2, [r2, #8]
 80145a8:	4311      	orrs	r1, r2
 80145aa:	683a      	ldr	r2, [r7, #0]
 80145ac:	68d2      	ldr	r2, [r2, #12]
 80145ae:	4311      	orrs	r1, r2
 80145b0:	683a      	ldr	r2, [r7, #0]
 80145b2:	6912      	ldr	r2, [r2, #16]
 80145b4:	4311      	orrs	r1, r2
 80145b6:	683a      	ldr	r2, [r7, #0]
 80145b8:	6952      	ldr	r2, [r2, #20]
 80145ba:	4311      	orrs	r1, r2
 80145bc:	683a      	ldr	r2, [r7, #0]
 80145be:	6992      	ldr	r2, [r2, #24]
 80145c0:	430a      	orrs	r2, r1
 80145c2:	431a      	orrs	r2, r3
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80145c8:	2300      	movs	r3, #0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	370c      	adds	r7, #12
 80145ce:	46bd      	mov	sp, r7
 80145d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d4:	4770      	bx	lr
 80145d6:	bf00      	nop
 80145d8:	ffff8000 	.word	0xffff8000

080145dc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80145dc:	b480      	push	{r7}
 80145de:	b085      	sub	sp, #20
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	60f8      	str	r0, [r7, #12]
 80145e4:	60b9      	str	r1, [r7, #8]
 80145e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d128      	bne.n	8014640 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	689b      	ldr	r3, [r3, #8]
 80145f2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	1e59      	subs	r1, r3, #1
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	685b      	ldr	r3, [r3, #4]
 8014600:	3b01      	subs	r3, #1
 8014602:	011b      	lsls	r3, r3, #4
 8014604:	4319      	orrs	r1, r3
 8014606:	68bb      	ldr	r3, [r7, #8]
 8014608:	689b      	ldr	r3, [r3, #8]
 801460a:	3b01      	subs	r3, #1
 801460c:	021b      	lsls	r3, r3, #8
 801460e:	4319      	orrs	r1, r3
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	68db      	ldr	r3, [r3, #12]
 8014614:	3b01      	subs	r3, #1
 8014616:	031b      	lsls	r3, r3, #12
 8014618:	4319      	orrs	r1, r3
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	691b      	ldr	r3, [r3, #16]
 801461e:	3b01      	subs	r3, #1
 8014620:	041b      	lsls	r3, r3, #16
 8014622:	4319      	orrs	r1, r3
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	695b      	ldr	r3, [r3, #20]
 8014628:	3b01      	subs	r3, #1
 801462a:	051b      	lsls	r3, r3, #20
 801462c:	4319      	orrs	r1, r3
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	699b      	ldr	r3, [r3, #24]
 8014632:	3b01      	subs	r3, #1
 8014634:	061b      	lsls	r3, r3, #24
 8014636:	430b      	orrs	r3, r1
 8014638:	431a      	orrs	r2, r3
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	609a      	str	r2, [r3, #8]
 801463e:	e02d      	b.n	801469c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	689a      	ldr	r2, [r3, #8]
 8014644:	4b19      	ldr	r3, [pc, #100]	@ (80146ac <FMC_SDRAM_Timing_Init+0xd0>)
 8014646:	4013      	ands	r3, r2
 8014648:	68ba      	ldr	r2, [r7, #8]
 801464a:	68d2      	ldr	r2, [r2, #12]
 801464c:	3a01      	subs	r2, #1
 801464e:	0311      	lsls	r1, r2, #12
 8014650:	68ba      	ldr	r2, [r7, #8]
 8014652:	6952      	ldr	r2, [r2, #20]
 8014654:	3a01      	subs	r2, #1
 8014656:	0512      	lsls	r2, r2, #20
 8014658:	430a      	orrs	r2, r1
 801465a:	431a      	orrs	r2, r3
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	68db      	ldr	r3, [r3, #12]
 8014664:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	1e59      	subs	r1, r3, #1
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	3b01      	subs	r3, #1
 8014674:	011b      	lsls	r3, r3, #4
 8014676:	4319      	orrs	r1, r3
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	689b      	ldr	r3, [r3, #8]
 801467c:	3b01      	subs	r3, #1
 801467e:	021b      	lsls	r3, r3, #8
 8014680:	4319      	orrs	r1, r3
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	691b      	ldr	r3, [r3, #16]
 8014686:	3b01      	subs	r3, #1
 8014688:	041b      	lsls	r3, r3, #16
 801468a:	4319      	orrs	r1, r3
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	699b      	ldr	r3, [r3, #24]
 8014690:	3b01      	subs	r3, #1
 8014692:	061b      	lsls	r3, r3, #24
 8014694:	430b      	orrs	r3, r1
 8014696:	431a      	orrs	r2, r3
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 801469c:	2300      	movs	r3, #0
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3714      	adds	r7, #20
 80146a2:	46bd      	mov	sp, r7
 80146a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a8:	4770      	bx	lr
 80146aa:	bf00      	nop
 80146ac:	ff0f0fff 	.word	0xff0f0fff

080146b0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80146b0:	b480      	push	{r7}
 80146b2:	b085      	sub	sp, #20
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	60f8      	str	r0, [r7, #12]
 80146b8:	60b9      	str	r1, [r7, #8]
 80146ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	691a      	ldr	r2, [r3, #16]
 80146c0:	4b0c      	ldr	r3, [pc, #48]	@ (80146f4 <FMC_SDRAM_SendCommand+0x44>)
 80146c2:	4013      	ands	r3, r2
 80146c4:	68ba      	ldr	r2, [r7, #8]
 80146c6:	6811      	ldr	r1, [r2, #0]
 80146c8:	68ba      	ldr	r2, [r7, #8]
 80146ca:	6852      	ldr	r2, [r2, #4]
 80146cc:	4311      	orrs	r1, r2
 80146ce:	68ba      	ldr	r2, [r7, #8]
 80146d0:	6892      	ldr	r2, [r2, #8]
 80146d2:	3a01      	subs	r2, #1
 80146d4:	0152      	lsls	r2, r2, #5
 80146d6:	4311      	orrs	r1, r2
 80146d8:	68ba      	ldr	r2, [r7, #8]
 80146da:	68d2      	ldr	r2, [r2, #12]
 80146dc:	0252      	lsls	r2, r2, #9
 80146de:	430a      	orrs	r2, r1
 80146e0:	431a      	orrs	r2, r3
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80146e6:	2300      	movs	r3, #0
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3714      	adds	r7, #20
 80146ec:	46bd      	mov	sp, r7
 80146ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f2:	4770      	bx	lr
 80146f4:	ffc00000 	.word	0xffc00000

080146f8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	695a      	ldr	r2, [r3, #20]
 8014706:	4b07      	ldr	r3, [pc, #28]	@ (8014724 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8014708:	4013      	ands	r3, r2
 801470a:	683a      	ldr	r2, [r7, #0]
 801470c:	0052      	lsls	r2, r2, #1
 801470e:	431a      	orrs	r2, r3
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8014714:	2300      	movs	r3, #0
}
 8014716:	4618      	mov	r0, r3
 8014718:	370c      	adds	r7, #12
 801471a:	46bd      	mov	sp, r7
 801471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014720:	4770      	bx	lr
 8014722:	bf00      	nop
 8014724:	ffffc001 	.word	0xffffc001

08014728 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8014728:	b480      	push	{r7}
 801472a:	b083      	sub	sp, #12
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8014736:	4618      	mov	r0, r3
 8014738:	370c      	adds	r7, #12
 801473a:	46bd      	mov	sp, r7
 801473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014740:	4770      	bx	lr

08014742 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8014742:	b480      	push	{r7}
 8014744:	b083      	sub	sp, #12
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
 801474a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8014756:	2300      	movs	r3, #0
}
 8014758:	4618      	mov	r0, r3
 801475a:	370c      	adds	r7, #12
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr

08014764 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8014764:	b480      	push	{r7}
 8014766:	b085      	sub	sp, #20
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
 801476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801476e:	2300      	movs	r3, #0
 8014770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	681a      	ldr	r2, [r3, #0]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014782:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8014788:	431a      	orrs	r2, r3
                       Command->CPSM);
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801478e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014790:	68fa      	ldr	r2, [r7, #12]
 8014792:	4313      	orrs	r3, r2
 8014794:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	68da      	ldr	r2, [r3, #12]
 801479a:	4b06      	ldr	r3, [pc, #24]	@ (80147b4 <SDMMC_SendCommand+0x50>)
 801479c:	4013      	ands	r3, r2
 801479e:	68fa      	ldr	r2, [r7, #12]
 80147a0:	431a      	orrs	r2, r3
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80147a6:	2300      	movs	r3, #0
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3714      	adds	r7, #20
 80147ac:	46bd      	mov	sp, r7
 80147ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b2:	4770      	bx	lr
 80147b4:	fffee0c0 	.word	0xfffee0c0

080147b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	691b      	ldr	r3, [r3, #16]
 80147c4:	b2db      	uxtb	r3, r3
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	370c      	adds	r7, #12
 80147ca:	46bd      	mov	sp, r7
 80147cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d0:	4770      	bx	lr

080147d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80147d2:	b480      	push	{r7}
 80147d4:	b085      	sub	sp, #20
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	6078      	str	r0, [r7, #4]
 80147da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	3314      	adds	r3, #20
 80147e0:	461a      	mov	r2, r3
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	4413      	add	r3, r2
 80147e6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	681b      	ldr	r3, [r3, #0]
}
 80147ec:	4618      	mov	r0, r3
 80147ee:	3714      	adds	r7, #20
 80147f0:	46bd      	mov	sp, r7
 80147f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f6:	4770      	bx	lr

080147f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b088      	sub	sp, #32
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8014800:	2300      	movs	r3, #0
 8014802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8014804:	230c      	movs	r3, #12
 8014806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014808:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801480c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801480e:	2300      	movs	r3, #0
 8014810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014816:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	68db      	ldr	r3, [r3, #12]
 8014828:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014830:	f107 0308 	add.w	r3, r7, #8
 8014834:	4619      	mov	r1, r3
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f7ff ff94 	bl	8014764 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801483c:	4a0b      	ldr	r2, [pc, #44]	@ (801486c <SDMMC_CmdStopTransfer+0x74>)
 801483e:	210c      	movs	r1, #12
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f000 f815 	bl	8014870 <SDMMC_GetCmdResp1>
 8014846:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	68db      	ldr	r3, [r3, #12]
 801484c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8014854:	69fb      	ldr	r3, [r7, #28]
 8014856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801485a:	d101      	bne.n	8014860 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801485c:	2300      	movs	r3, #0
 801485e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8014860:	69fb      	ldr	r3, [r7, #28]
}
 8014862:	4618      	mov	r0, r3
 8014864:	3720      	adds	r7, #32
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
 801486a:	bf00      	nop
 801486c:	05f5e100 	.word	0x05f5e100

08014870 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b088      	sub	sp, #32
 8014874:	af00      	add	r7, sp, #0
 8014876:	60f8      	str	r0, [r7, #12]
 8014878:	460b      	mov	r3, r1
 801487a:	607a      	str	r2, [r7, #4]
 801487c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801487e:	4b70      	ldr	r3, [pc, #448]	@ (8014a40 <SDMMC_GetCmdResp1+0x1d0>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	4a70      	ldr	r2, [pc, #448]	@ (8014a44 <SDMMC_GetCmdResp1+0x1d4>)
 8014884:	fba2 2303 	umull	r2, r3, r2, r3
 8014888:	0a5a      	lsrs	r2, r3, #9
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	fb02 f303 	mul.w	r3, r2, r3
 8014890:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014892:	69fb      	ldr	r3, [r7, #28]
 8014894:	1e5a      	subs	r2, r3, #1
 8014896:	61fa      	str	r2, [r7, #28]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d102      	bne.n	80148a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801489c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80148a0:	e0c9      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148a6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80148a8:	69ba      	ldr	r2, [r7, #24]
 80148aa:	4b67      	ldr	r3, [pc, #412]	@ (8014a48 <SDMMC_GetCmdResp1+0x1d8>)
 80148ac:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d0ef      	beq.n	8014892 <SDMMC_GetCmdResp1+0x22>
 80148b2:	69bb      	ldr	r3, [r7, #24]
 80148b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d1ea      	bne.n	8014892 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148c0:	f003 0304 	and.w	r3, r3, #4
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d004      	beq.n	80148d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2204      	movs	r2, #4
 80148cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80148ce:	2304      	movs	r3, #4
 80148d0:	e0b1      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148d6:	f003 0301 	and.w	r3, r3, #1
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d004      	beq.n	80148e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	2201      	movs	r2, #1
 80148e2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80148e4:	2301      	movs	r3, #1
 80148e6:	e0a6      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	4a58      	ldr	r2, [pc, #352]	@ (8014a4c <SDMMC_GetCmdResp1+0x1dc>)
 80148ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80148ee:	68f8      	ldr	r0, [r7, #12]
 80148f0:	f7ff ff62 	bl	80147b8 <SDMMC_GetCommandResponse>
 80148f4:	4603      	mov	r3, r0
 80148f6:	461a      	mov	r2, r3
 80148f8:	7afb      	ldrb	r3, [r7, #11]
 80148fa:	4293      	cmp	r3, r2
 80148fc:	d001      	beq.n	8014902 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80148fe:	2301      	movs	r3, #1
 8014900:	e099      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014902:	2100      	movs	r1, #0
 8014904:	68f8      	ldr	r0, [r7, #12]
 8014906:	f7ff ff64 	bl	80147d2 <SDMMC_GetResponse>
 801490a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801490c:	697a      	ldr	r2, [r7, #20]
 801490e:	4b50      	ldr	r3, [pc, #320]	@ (8014a50 <SDMMC_GetCmdResp1+0x1e0>)
 8014910:	4013      	ands	r3, r2
 8014912:	2b00      	cmp	r3, #0
 8014914:	d101      	bne.n	801491a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8014916:	2300      	movs	r3, #0
 8014918:	e08d      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	2b00      	cmp	r3, #0
 801491e:	da02      	bge.n	8014926 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014920:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014924:	e087      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014926:	697b      	ldr	r3, [r7, #20]
 8014928:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801492c:	2b00      	cmp	r3, #0
 801492e:	d001      	beq.n	8014934 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014930:	2340      	movs	r3, #64	@ 0x40
 8014932:	e080      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801493a:	2b00      	cmp	r3, #0
 801493c:	d001      	beq.n	8014942 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801493e:	2380      	movs	r3, #128	@ 0x80
 8014940:	e079      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014942:	697b      	ldr	r3, [r7, #20]
 8014944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014948:	2b00      	cmp	r3, #0
 801494a:	d002      	beq.n	8014952 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801494c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014950:	e071      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014952:	697b      	ldr	r3, [r7, #20]
 8014954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014958:	2b00      	cmp	r3, #0
 801495a:	d002      	beq.n	8014962 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801495c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014960:	e069      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014962:	697b      	ldr	r3, [r7, #20]
 8014964:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014968:	2b00      	cmp	r3, #0
 801496a:	d002      	beq.n	8014972 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801496c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014970:	e061      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014972:	697b      	ldr	r3, [r7, #20]
 8014974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014978:	2b00      	cmp	r3, #0
 801497a:	d002      	beq.n	8014982 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801497c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014980:	e059      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014988:	2b00      	cmp	r3, #0
 801498a:	d002      	beq.n	8014992 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801498c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014990:	e051      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014992:	697b      	ldr	r3, [r7, #20]
 8014994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014998:	2b00      	cmp	r3, #0
 801499a:	d002      	beq.n	80149a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801499c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80149a0:	e049      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d002      	beq.n	80149b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80149ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80149b0:	e041      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d002      	beq.n	80149c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80149bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80149c0:	e039      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80149c2:	697b      	ldr	r3, [r7, #20]
 80149c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d002      	beq.n	80149d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80149cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80149d0:	e031      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80149d2:	697b      	ldr	r3, [r7, #20]
 80149d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d002      	beq.n	80149e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80149dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80149e0:	e029      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d002      	beq.n	80149f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80149ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80149f0:	e021      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d002      	beq.n	8014a02 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80149fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014a00:	e019      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d002      	beq.n	8014a12 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014a0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8014a10:	e011      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d002      	beq.n	8014a22 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014a1c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8014a20:	e009      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	f003 0308 	and.w	r3, r3, #8
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d002      	beq.n	8014a32 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014a2c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8014a30:	e001      	b.n	8014a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014a32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3720      	adds	r7, #32
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
 8014a3e:	bf00      	nop
 8014a40:	24000400 	.word	0x24000400
 8014a44:	10624dd3 	.word	0x10624dd3
 8014a48:	00200045 	.word	0x00200045
 8014a4c:	002000c5 	.word	0x002000c5
 8014a50:	fdffe008 	.word	0xfdffe008

08014a54 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	4a22      	ldr	r2, [pc, #136]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014a62:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	685b      	ldr	r3, [r3, #4]
 8014a68:	4a20      	ldr	r2, [pc, #128]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014a6a:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	689b      	ldr	r3, [r3, #8]
 8014a70:	4a1e      	ldr	r2, [pc, #120]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014a72:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	68db      	ldr	r3, [r3, #12]
 8014a78:	4a1c      	ldr	r2, [pc, #112]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014a7a:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	691b      	ldr	r3, [r3, #16]
 8014a80:	4a1a      	ldr	r2, [pc, #104]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014a82:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	695b      	ldr	r3, [r3, #20]
 8014a88:	4a18      	ldr	r2, [pc, #96]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014a8a:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	699b      	ldr	r3, [r3, #24]
 8014a90:	4a16      	ldr	r2, [pc, #88]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014a92:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	69db      	ldr	r3, [r3, #28]
 8014a98:	4a14      	ldr	r2, [pc, #80]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014a9a:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	6a1b      	ldr	r3, [r3, #32]
 8014aa0:	4a12      	ldr	r2, [pc, #72]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014aa2:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014aa8:	4a10      	ldr	r2, [pc, #64]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014aaa:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014ab2:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8014ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8014af0 <UTIL_LCD_SetFuncDriver+0x9c>)
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8014aba:	4b0d      	ldr	r3, [pc, #52]	@ (8014af0 <UTIL_LCD_SetFuncDriver+0x9c>)
 8014abc:	2200      	movs	r2, #0
 8014abe:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8014ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014ac2:	69db      	ldr	r3, [r3, #28]
 8014ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8014af4 <UTIL_LCD_SetFuncDriver+0xa0>)
 8014ac6:	4611      	mov	r1, r2
 8014ac8:	2000      	movs	r0, #0
 8014aca:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8014acc:	4b07      	ldr	r3, [pc, #28]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014ace:	6a1b      	ldr	r3, [r3, #32]
 8014ad0:	4a09      	ldr	r2, [pc, #36]	@ (8014af8 <UTIL_LCD_SetFuncDriver+0xa4>)
 8014ad2:	4611      	mov	r1, r2
 8014ad4:	2000      	movs	r0, #0
 8014ad6:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8014ad8:	4b04      	ldr	r3, [pc, #16]	@ (8014aec <UTIL_LCD_SetFuncDriver+0x98>)
 8014ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014adc:	4a07      	ldr	r2, [pc, #28]	@ (8014afc <UTIL_LCD_SetFuncDriver+0xa8>)
 8014ade:	4611      	mov	r1, r2
 8014ae0:	2000      	movs	r0, #0
 8014ae2:	4798      	blx	r3
}
 8014ae4:	bf00      	nop
 8014ae6:	3708      	adds	r7, #8
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	24006110 	.word	0x24006110
 8014af0:	240060d0 	.word	0x240060d0
 8014af4:	240060e4 	.word	0x240060e4
 8014af8:	240060e8 	.word	0x240060e8
 8014afc:	240060ec 	.word	0x240060ec

08014b00 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8014b00:	b480      	push	{r7}
 8014b02:	b083      	sub	sp, #12
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8014b08:	4b06      	ldr	r3, [pc, #24]	@ (8014b24 <UTIL_LCD_SetTextColor+0x24>)
 8014b0a:	68db      	ldr	r3, [r3, #12]
 8014b0c:	4a05      	ldr	r2, [pc, #20]	@ (8014b24 <UTIL_LCD_SetTextColor+0x24>)
 8014b0e:	015b      	lsls	r3, r3, #5
 8014b10:	4413      	add	r3, r2
 8014b12:	687a      	ldr	r2, [r7, #4]
 8014b14:	601a      	str	r2, [r3, #0]
}
 8014b16:	bf00      	nop
 8014b18:	370c      	adds	r7, #12
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b20:	4770      	bx	lr
 8014b22:	bf00      	nop
 8014b24:	240060d0 	.word	0x240060d0

08014b28 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b083      	sub	sp, #12
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8014b30:	4b06      	ldr	r3, [pc, #24]	@ (8014b4c <UTIL_LCD_SetBackColor+0x24>)
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	4a05      	ldr	r2, [pc, #20]	@ (8014b4c <UTIL_LCD_SetBackColor+0x24>)
 8014b36:	015b      	lsls	r3, r3, #5
 8014b38:	4413      	add	r3, r2
 8014b3a:	3304      	adds	r3, #4
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	601a      	str	r2, [r3, #0]
}
 8014b40:	bf00      	nop
 8014b42:	370c      	adds	r7, #12
 8014b44:	46bd      	mov	sp, r7
 8014b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4a:	4770      	bx	lr
 8014b4c:	240060d0 	.word	0x240060d0

08014b50 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8014b50:	b480      	push	{r7}
 8014b52:	b083      	sub	sp, #12
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8014b58:	4b06      	ldr	r3, [pc, #24]	@ (8014b74 <UTIL_LCD_SetFont+0x24>)
 8014b5a:	68db      	ldr	r3, [r3, #12]
 8014b5c:	4a05      	ldr	r2, [pc, #20]	@ (8014b74 <UTIL_LCD_SetFont+0x24>)
 8014b5e:	015b      	lsls	r3, r3, #5
 8014b60:	4413      	add	r3, r2
 8014b62:	3308      	adds	r3, #8
 8014b64:	687a      	ldr	r2, [r7, #4]
 8014b66:	601a      	str	r2, [r3, #0]
}
 8014b68:	bf00      	nop
 8014b6a:	370c      	adds	r7, #12
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr
 8014b74:	240060d0 	.word	0x240060d0

08014b78 <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 8014b78:	b480      	push	{r7}
 8014b7a:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 8014b7c:	4b05      	ldr	r3, [pc, #20]	@ (8014b94 <UTIL_LCD_GetFont+0x1c>)
 8014b7e:	68db      	ldr	r3, [r3, #12]
 8014b80:	4a04      	ldr	r2, [pc, #16]	@ (8014b94 <UTIL_LCD_GetFont+0x1c>)
 8014b82:	015b      	lsls	r3, r3, #5
 8014b84:	4413      	add	r3, r2
 8014b86:	3308      	adds	r3, #8
 8014b88:	681b      	ldr	r3, [r3, #0]
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b92:	4770      	bx	lr
 8014b94:	240060d0 	.word	0x240060d0

08014b98 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8014b98:	b590      	push	{r4, r7, lr}
 8014b9a:	b087      	sub	sp, #28
 8014b9c:	af02      	add	r7, sp, #8
 8014b9e:	60f8      	str	r0, [r7, #12]
 8014ba0:	60b9      	str	r1, [r7, #8]
 8014ba2:	607a      	str	r2, [r7, #4]
 8014ba4:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8014ba6:	4b08      	ldr	r3, [pc, #32]	@ (8014bc8 <UTIL_LCD_FillRGBRect+0x30>)
 8014ba8:	685c      	ldr	r4, [r3, #4]
 8014baa:	4b08      	ldr	r3, [pc, #32]	@ (8014bcc <UTIL_LCD_FillRGBRect+0x34>)
 8014bac:	6918      	ldr	r0, [r3, #16]
 8014bae:	6a3b      	ldr	r3, [r7, #32]
 8014bb0:	9301      	str	r3, [sp, #4]
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	9300      	str	r3, [sp, #0]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	68ba      	ldr	r2, [r7, #8]
 8014bba:	68f9      	ldr	r1, [r7, #12]
 8014bbc:	47a0      	blx	r4
}
 8014bbe:	bf00      	nop
 8014bc0:	3714      	adds	r7, #20
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd90      	pop	{r4, r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	24006110 	.word	0x24006110
 8014bcc:	240060d0 	.word	0x240060d0

08014bd0 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8014bd0:	b590      	push	{r4, r7, lr}
 8014bd2:	b087      	sub	sp, #28
 8014bd4:	af02      	add	r7, sp, #8
 8014bd6:	60f8      	str	r0, [r7, #12]
 8014bd8:	60b9      	str	r1, [r7, #8]
 8014bda:	607a      	str	r2, [r7, #4]
 8014bdc:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8014bde:	4b15      	ldr	r3, [pc, #84]	@ (8014c34 <UTIL_LCD_DrawHLine+0x64>)
 8014be0:	69db      	ldr	r3, [r3, #28]
 8014be2:	2b02      	cmp	r3, #2
 8014be4:	d118      	bne.n	8014c18 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8014be6:	4b14      	ldr	r3, [pc, #80]	@ (8014c38 <UTIL_LCD_DrawHLine+0x68>)
 8014be8:	689c      	ldr	r4, [r3, #8]
 8014bea:	4b12      	ldr	r3, [pc, #72]	@ (8014c34 <UTIL_LCD_DrawHLine+0x64>)
 8014bec:	6918      	ldr	r0, [r3, #16]
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	08db      	lsrs	r3, r3, #3
 8014bf2:	f003 021f 	and.w	r2, r3, #31
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	0a9b      	lsrs	r3, r3, #10
 8014bfa:	015b      	lsls	r3, r3, #5
 8014bfc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8014c00:	431a      	orrs	r2, r3
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	0cdb      	lsrs	r3, r3, #19
 8014c06:	02db      	lsls	r3, r3, #11
 8014c08:	b29b      	uxth	r3, r3
 8014c0a:	4313      	orrs	r3, r2
 8014c0c:	9300      	str	r3, [sp, #0]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	68ba      	ldr	r2, [r7, #8]
 8014c12:	68f9      	ldr	r1, [r7, #12]
 8014c14:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8014c16:	e009      	b.n	8014c2c <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8014c18:	4b07      	ldr	r3, [pc, #28]	@ (8014c38 <UTIL_LCD_DrawHLine+0x68>)
 8014c1a:	689c      	ldr	r4, [r3, #8]
 8014c1c:	4b05      	ldr	r3, [pc, #20]	@ (8014c34 <UTIL_LCD_DrawHLine+0x64>)
 8014c1e:	6918      	ldr	r0, [r3, #16]
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	9300      	str	r3, [sp, #0]
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	68ba      	ldr	r2, [r7, #8]
 8014c28:	68f9      	ldr	r1, [r7, #12]
 8014c2a:	47a0      	blx	r4
}
 8014c2c:	bf00      	nop
 8014c2e:	3714      	adds	r7, #20
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd90      	pop	{r4, r7, pc}
 8014c34:	240060d0 	.word	0x240060d0
 8014c38:	24006110 	.word	0x24006110

08014c3c <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8014c3c:	b590      	push	{r4, r7, lr}
 8014c3e:	b087      	sub	sp, #28
 8014c40:	af02      	add	r7, sp, #8
 8014c42:	60f8      	str	r0, [r7, #12]
 8014c44:	60b9      	str	r1, [r7, #8]
 8014c46:	607a      	str	r2, [r7, #4]
 8014c48:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8014c4a:	4b15      	ldr	r3, [pc, #84]	@ (8014ca0 <UTIL_LCD_DrawVLine+0x64>)
 8014c4c:	69db      	ldr	r3, [r3, #28]
 8014c4e:	2b02      	cmp	r3, #2
 8014c50:	d118      	bne.n	8014c84 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8014c52:	4b14      	ldr	r3, [pc, #80]	@ (8014ca4 <UTIL_LCD_DrawVLine+0x68>)
 8014c54:	68dc      	ldr	r4, [r3, #12]
 8014c56:	4b12      	ldr	r3, [pc, #72]	@ (8014ca0 <UTIL_LCD_DrawVLine+0x64>)
 8014c58:	6918      	ldr	r0, [r3, #16]
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	08db      	lsrs	r3, r3, #3
 8014c5e:	f003 021f 	and.w	r2, r3, #31
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	0a9b      	lsrs	r3, r3, #10
 8014c66:	015b      	lsls	r3, r3, #5
 8014c68:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8014c6c:	431a      	orrs	r2, r3
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	0cdb      	lsrs	r3, r3, #19
 8014c72:	02db      	lsls	r3, r3, #11
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	4313      	orrs	r3, r2
 8014c78:	9300      	str	r3, [sp, #0]
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	68ba      	ldr	r2, [r7, #8]
 8014c7e:	68f9      	ldr	r1, [r7, #12]
 8014c80:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8014c82:	e009      	b.n	8014c98 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8014c84:	4b07      	ldr	r3, [pc, #28]	@ (8014ca4 <UTIL_LCD_DrawVLine+0x68>)
 8014c86:	68dc      	ldr	r4, [r3, #12]
 8014c88:	4b05      	ldr	r3, [pc, #20]	@ (8014ca0 <UTIL_LCD_DrawVLine+0x64>)
 8014c8a:	6918      	ldr	r0, [r3, #16]
 8014c8c:	683b      	ldr	r3, [r7, #0]
 8014c8e:	9300      	str	r3, [sp, #0]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	68ba      	ldr	r2, [r7, #8]
 8014c94:	68f9      	ldr	r1, [r7, #12]
 8014c96:	47a0      	blx	r4
}
 8014c98:	bf00      	nop
 8014c9a:	3714      	adds	r7, #20
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd90      	pop	{r4, r7, pc}
 8014ca0:	240060d0 	.word	0x240060d0
 8014ca4:	24006110 	.word	0x24006110

08014ca8 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b084      	sub	sp, #16
 8014cac:	af02      	add	r7, sp, #8
 8014cae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8014cb0:	4b07      	ldr	r3, [pc, #28]	@ (8014cd0 <UTIL_LCD_Clear+0x28>)
 8014cb2:	695a      	ldr	r2, [r3, #20]
 8014cb4:	4b06      	ldr	r3, [pc, #24]	@ (8014cd0 <UTIL_LCD_Clear+0x28>)
 8014cb6:	6999      	ldr	r1, [r3, #24]
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	9300      	str	r3, [sp, #0]
 8014cbc:	460b      	mov	r3, r1
 8014cbe:	2100      	movs	r1, #0
 8014cc0:	2000      	movs	r0, #0
 8014cc2:	f000 f92b 	bl	8014f1c <UTIL_LCD_FillRect>
}
 8014cc6:	bf00      	nop
 8014cc8:	3708      	adds	r7, #8
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	240060d0 	.word	0x240060d0

08014cd4 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b084      	sub	sp, #16
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	60f8      	str	r0, [r7, #12]
 8014cdc:	60b9      	str	r1, [r7, #8]
 8014cde:	4613      	mov	r3, r2
 8014ce0:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8014ce2:	4b16      	ldr	r3, [pc, #88]	@ (8014d3c <UTIL_LCD_DisplayChar+0x68>)
 8014ce4:	68db      	ldr	r3, [r3, #12]
 8014ce6:	4a15      	ldr	r2, [pc, #84]	@ (8014d3c <UTIL_LCD_DisplayChar+0x68>)
 8014ce8:	015b      	lsls	r3, r3, #5
 8014cea:	4413      	add	r3, r2
 8014cec:	3308      	adds	r3, #8
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	681a      	ldr	r2, [r3, #0]
 8014cf2:	79fb      	ldrb	r3, [r7, #7]
 8014cf4:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8014cf6:	4911      	ldr	r1, [pc, #68]	@ (8014d3c <UTIL_LCD_DisplayChar+0x68>)
 8014cf8:	68c9      	ldr	r1, [r1, #12]
 8014cfa:	4810      	ldr	r0, [pc, #64]	@ (8014d3c <UTIL_LCD_DisplayChar+0x68>)
 8014cfc:	0149      	lsls	r1, r1, #5
 8014cfe:	4401      	add	r1, r0
 8014d00:	3108      	adds	r1, #8
 8014d02:	6809      	ldr	r1, [r1, #0]
 8014d04:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8014d06:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8014d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8014d3c <UTIL_LCD_DisplayChar+0x68>)
 8014d0c:	68db      	ldr	r3, [r3, #12]
 8014d0e:	480b      	ldr	r0, [pc, #44]	@ (8014d3c <UTIL_LCD_DisplayChar+0x68>)
 8014d10:	015b      	lsls	r3, r3, #5
 8014d12:	4403      	add	r3, r0
 8014d14:	3308      	adds	r3, #8
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	889b      	ldrh	r3, [r3, #4]
 8014d1a:	3307      	adds	r3, #7
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	da00      	bge.n	8014d22 <UTIL_LCD_DisplayChar+0x4e>
 8014d20:	3307      	adds	r3, #7
 8014d22:	10db      	asrs	r3, r3, #3
 8014d24:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8014d28:	4413      	add	r3, r2
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	68b9      	ldr	r1, [r7, #8]
 8014d2e:	68f8      	ldr	r0, [r7, #12]
 8014d30:	f000 f92e 	bl	8014f90 <DrawChar>
}
 8014d34:	bf00      	nop
 8014d36:	3710      	adds	r7, #16
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}
 8014d3c:	240060d0 	.word	0x240060d0

08014d40 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b08a      	sub	sp, #40	@ 0x28
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	60f8      	str	r0, [r7, #12]
 8014d48:	60b9      	str	r1, [r7, #8]
 8014d4a:	607a      	str	r2, [r7, #4]
 8014d4c:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8014d4e:	2301      	movs	r3, #1
 8014d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8014d52:	2300      	movs	r3, #0
 8014d54:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8014d56:	2300      	movs	r3, #0
 8014d58:	61fb      	str	r3, [r7, #28]
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8014d62:	e002      	b.n	8014d6a <UTIL_LCD_DisplayStringAt+0x2a>
 8014d64:	69fb      	ldr	r3, [r7, #28]
 8014d66:	3301      	adds	r3, #1
 8014d68:	61fb      	str	r3, [r7, #28]
 8014d6a:	69bb      	ldr	r3, [r7, #24]
 8014d6c:	1c5a      	adds	r2, r3, #1
 8014d6e:	61ba      	str	r2, [r7, #24]
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d1f6      	bne.n	8014d64 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8014d76:	4b48      	ldr	r3, [pc, #288]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014d78:	695b      	ldr	r3, [r3, #20]
 8014d7a:	4a47      	ldr	r2, [pc, #284]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014d7c:	68d2      	ldr	r2, [r2, #12]
 8014d7e:	4946      	ldr	r1, [pc, #280]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014d80:	0152      	lsls	r2, r2, #5
 8014d82:	440a      	add	r2, r1
 8014d84:	3208      	adds	r2, #8
 8014d86:	6812      	ldr	r2, [r2, #0]
 8014d88:	8892      	ldrh	r2, [r2, #4]
 8014d8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014d8e:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8014d90:	78fb      	ldrb	r3, [r7, #3]
 8014d92:	2b03      	cmp	r3, #3
 8014d94:	d018      	beq.n	8014dc8 <UTIL_LCD_DisplayStringAt+0x88>
 8014d96:	2b03      	cmp	r3, #3
 8014d98:	dc2a      	bgt.n	8014df0 <UTIL_LCD_DisplayStringAt+0xb0>
 8014d9a:	2b01      	cmp	r3, #1
 8014d9c:	d002      	beq.n	8014da4 <UTIL_LCD_DisplayStringAt+0x64>
 8014d9e:	2b02      	cmp	r3, #2
 8014da0:	d015      	beq.n	8014dce <UTIL_LCD_DisplayStringAt+0x8e>
 8014da2:	e025      	b.n	8014df0 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8014da4:	697a      	ldr	r2, [r7, #20]
 8014da6:	69fb      	ldr	r3, [r7, #28]
 8014da8:	1ad3      	subs	r3, r2, r3
 8014daa:	4a3b      	ldr	r2, [pc, #236]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014dac:	68d2      	ldr	r2, [r2, #12]
 8014dae:	493a      	ldr	r1, [pc, #232]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014db0:	0152      	lsls	r2, r2, #5
 8014db2:	440a      	add	r2, r1
 8014db4:	3208      	adds	r2, #8
 8014db6:	6812      	ldr	r2, [r2, #0]
 8014db8:	8892      	ldrh	r2, [r2, #4]
 8014dba:	fb02 f303 	mul.w	r3, r2, r3
 8014dbe:	085b      	lsrs	r3, r3, #1
 8014dc0:	68fa      	ldr	r2, [r7, #12]
 8014dc2:	4413      	add	r3, r2
 8014dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8014dc6:	e016      	b.n	8014df6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8014dcc:	e013      	b.n	8014df6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8014dce:	697a      	ldr	r2, [r7, #20]
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	1ad3      	subs	r3, r2, r3
 8014dd4:	4a30      	ldr	r2, [pc, #192]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014dd6:	68d2      	ldr	r2, [r2, #12]
 8014dd8:	492f      	ldr	r1, [pc, #188]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014dda:	0152      	lsls	r2, r2, #5
 8014ddc:	440a      	add	r2, r1
 8014dde:	3208      	adds	r2, #8
 8014de0:	6812      	ldr	r2, [r2, #0]
 8014de2:	8892      	ldrh	r2, [r2, #4]
 8014de4:	fb03 f202 	mul.w	r2, r3, r2
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	1ad3      	subs	r3, r2, r3
 8014dec:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8014dee:	e002      	b.n	8014df6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8014df4:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8014df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d003      	beq.n	8014e04 <UTIL_LCD_DisplayStringAt+0xc4>
 8014dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014e02:	d31b      	bcc.n	8014e3c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8014e04:	2301      	movs	r3, #1
 8014e06:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8014e08:	e018      	b.n	8014e3c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	461a      	mov	r2, r3
 8014e10:	68b9      	ldr	r1, [r7, #8]
 8014e12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014e14:	f7ff ff5e 	bl	8014cd4 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8014e18:	4b1f      	ldr	r3, [pc, #124]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014e1a:	68db      	ldr	r3, [r3, #12]
 8014e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014e1e:	015b      	lsls	r3, r3, #5
 8014e20:	4413      	add	r3, r2
 8014e22:	3308      	adds	r3, #8
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	889b      	ldrh	r3, [r3, #4]
 8014e28:	461a      	mov	r2, r3
 8014e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e2c:	4413      	add	r3, r2
 8014e2e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	3301      	adds	r3, #1
 8014e34:	607b      	str	r3, [r7, #4]
    i++;
 8014e36:	6a3b      	ldr	r3, [r7, #32]
 8014e38:	3301      	adds	r3, #1
 8014e3a:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	781b      	ldrb	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	bf14      	ite	ne
 8014e44:	2301      	movne	r3, #1
 8014e46:	2300      	moveq	r3, #0
 8014e48:	b2da      	uxtb	r2, r3
 8014e4a:	4b13      	ldr	r3, [pc, #76]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014e4c:	6959      	ldr	r1, [r3, #20]
 8014e4e:	4b12      	ldr	r3, [pc, #72]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014e50:	68db      	ldr	r3, [r3, #12]
 8014e52:	4811      	ldr	r0, [pc, #68]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014e54:	015b      	lsls	r3, r3, #5
 8014e56:	4403      	add	r3, r0
 8014e58:	3308      	adds	r3, #8
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	889b      	ldrh	r3, [r3, #4]
 8014e5e:	4618      	mov	r0, r3
 8014e60:	6a3b      	ldr	r3, [r7, #32]
 8014e62:	fb00 f303 	mul.w	r3, r0, r3
 8014e66:	1acb      	subs	r3, r1, r3
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	490b      	ldr	r1, [pc, #44]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014e6c:	68c9      	ldr	r1, [r1, #12]
 8014e6e:	480a      	ldr	r0, [pc, #40]	@ (8014e98 <UTIL_LCD_DisplayStringAt+0x158>)
 8014e70:	0149      	lsls	r1, r1, #5
 8014e72:	4401      	add	r1, r0
 8014e74:	3108      	adds	r1, #8
 8014e76:	6809      	ldr	r1, [r1, #0]
 8014e78:	8889      	ldrh	r1, [r1, #4]
 8014e7a:	428b      	cmp	r3, r1
 8014e7c:	bf2c      	ite	cs
 8014e7e:	2301      	movcs	r3, #1
 8014e80:	2300      	movcc	r3, #0
 8014e82:	b2db      	uxtb	r3, r3
 8014e84:	4013      	ands	r3, r2
 8014e86:	b2db      	uxtb	r3, r3
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d1be      	bne.n	8014e0a <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8014e8c:	bf00      	nop
 8014e8e:	bf00      	nop
 8014e90:	3728      	adds	r7, #40	@ 0x28
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	240060d0 	.word	0x240060d0

08014e9c <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b084      	sub	sp, #16
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	60b9      	str	r1, [r7, #8]
 8014ea6:	607a      	str	r2, [r7, #4]
 8014ea8:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	687a      	ldr	r2, [r7, #4]
 8014eae:	68b9      	ldr	r1, [r7, #8]
 8014eb0:	68f8      	ldr	r0, [r7, #12]
 8014eb2:	f7ff fe8d 	bl	8014bd0 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8014eb6:	68ba      	ldr	r2, [r7, #8]
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	4413      	add	r3, r2
 8014ebc:	1e59      	subs	r1, r3, #1
 8014ebe:	69bb      	ldr	r3, [r7, #24]
 8014ec0:	687a      	ldr	r2, [r7, #4]
 8014ec2:	68f8      	ldr	r0, [r7, #12]
 8014ec4:	f7ff fe84 	bl	8014bd0 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8014ec8:	69bb      	ldr	r3, [r7, #24]
 8014eca:	683a      	ldr	r2, [r7, #0]
 8014ecc:	68b9      	ldr	r1, [r7, #8]
 8014ece:	68f8      	ldr	r0, [r7, #12]
 8014ed0:	f7ff feb4 	bl	8014c3c <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8014ed4:	68fa      	ldr	r2, [r7, #12]
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	4413      	add	r3, r2
 8014eda:	1e58      	subs	r0, r3, #1
 8014edc:	69bb      	ldr	r3, [r7, #24]
 8014ede:	683a      	ldr	r2, [r7, #0]
 8014ee0:	68b9      	ldr	r1, [r7, #8]
 8014ee2:	f7ff feab 	bl	8014c3c <UTIL_LCD_DrawVLine>
}
 8014ee6:	bf00      	nop
 8014ee8:	3710      	adds	r7, #16
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
	...

08014ef0 <UTIL_LCD_DrawBitmap>:
  * @param  Xpos  Bmp X position in the LCD
  * @param  Ypos  Bmp Y position in the LCD
  * @param  pData Pointer to Bmp picture address in the internal Flash
  */
void UTIL_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pData)
{
 8014ef0:	b590      	push	{r4, r7, lr}
 8014ef2:	b085      	sub	sp, #20
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	60f8      	str	r0, [r7, #12]
 8014ef8:	60b9      	str	r1, [r7, #8]
 8014efa:	607a      	str	r2, [r7, #4]
  FuncDriver.DrawBitmap(DrawProp->LcdDevice, Xpos, Ypos, pData);
 8014efc:	4b05      	ldr	r3, [pc, #20]	@ (8014f14 <UTIL_LCD_DrawBitmap+0x24>)
 8014efe:	681c      	ldr	r4, [r3, #0]
 8014f00:	4b05      	ldr	r3, [pc, #20]	@ (8014f18 <UTIL_LCD_DrawBitmap+0x28>)
 8014f02:	6918      	ldr	r0, [r3, #16]
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	68ba      	ldr	r2, [r7, #8]
 8014f08:	68f9      	ldr	r1, [r7, #12]
 8014f0a:	47a0      	blx	r4
}
 8014f0c:	bf00      	nop
 8014f0e:	3714      	adds	r7, #20
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd90      	pop	{r4, r7, pc}
 8014f14:	24006110 	.word	0x24006110
 8014f18:	240060d0 	.word	0x240060d0

08014f1c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8014f1c:	b590      	push	{r4, r7, lr}
 8014f1e:	b087      	sub	sp, #28
 8014f20:	af02      	add	r7, sp, #8
 8014f22:	60f8      	str	r0, [r7, #12]
 8014f24:	60b9      	str	r1, [r7, #8]
 8014f26:	607a      	str	r2, [r7, #4]
 8014f28:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8014f2a:	4b17      	ldr	r3, [pc, #92]	@ (8014f88 <UTIL_LCD_FillRect+0x6c>)
 8014f2c:	69db      	ldr	r3, [r3, #28]
 8014f2e:	2b02      	cmp	r3, #2
 8014f30:	d11a      	bne.n	8014f68 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8014f32:	4b16      	ldr	r3, [pc, #88]	@ (8014f8c <UTIL_LCD_FillRect+0x70>)
 8014f34:	691c      	ldr	r4, [r3, #16]
 8014f36:	4b14      	ldr	r3, [pc, #80]	@ (8014f88 <UTIL_LCD_FillRect+0x6c>)
 8014f38:	6918      	ldr	r0, [r3, #16]
 8014f3a:	6a3b      	ldr	r3, [r7, #32]
 8014f3c:	08db      	lsrs	r3, r3, #3
 8014f3e:	f003 021f 	and.w	r2, r3, #31
 8014f42:	6a3b      	ldr	r3, [r7, #32]
 8014f44:	0a9b      	lsrs	r3, r3, #10
 8014f46:	015b      	lsls	r3, r3, #5
 8014f48:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8014f4c:	431a      	orrs	r2, r3
 8014f4e:	6a3b      	ldr	r3, [r7, #32]
 8014f50:	0cdb      	lsrs	r3, r3, #19
 8014f52:	02db      	lsls	r3, r3, #11
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	4313      	orrs	r3, r2
 8014f58:	9301      	str	r3, [sp, #4]
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	9300      	str	r3, [sp, #0]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	68ba      	ldr	r2, [r7, #8]
 8014f62:	68f9      	ldr	r1, [r7, #12]
 8014f64:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8014f66:	e00b      	b.n	8014f80 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8014f68:	4b08      	ldr	r3, [pc, #32]	@ (8014f8c <UTIL_LCD_FillRect+0x70>)
 8014f6a:	691c      	ldr	r4, [r3, #16]
 8014f6c:	4b06      	ldr	r3, [pc, #24]	@ (8014f88 <UTIL_LCD_FillRect+0x6c>)
 8014f6e:	6918      	ldr	r0, [r3, #16]
 8014f70:	6a3b      	ldr	r3, [r7, #32]
 8014f72:	9301      	str	r3, [sp, #4]
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	9300      	str	r3, [sp, #0]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	68ba      	ldr	r2, [r7, #8]
 8014f7c:	68f9      	ldr	r1, [r7, #12]
 8014f7e:	47a0      	blx	r4
}
 8014f80:	bf00      	nop
 8014f82:	3714      	adds	r7, #20
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bd90      	pop	{r4, r7, pc}
 8014f88:	240060d0 	.word	0x240060d0
 8014f8c:	24006110 	.word	0x24006110

08014f90 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b0b2      	sub	sp, #200	@ 0xc8
 8014f94:	af02      	add	r7, sp, #8
 8014f96:	60f8      	str	r0, [r7, #12]
 8014f98:	60b9      	str	r1, [r7, #8]
 8014f9a:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8014fa8:	4ba5      	ldr	r3, [pc, #660]	@ (8015240 <DrawChar+0x2b0>)
 8014faa:	68db      	ldr	r3, [r3, #12]
 8014fac:	4aa4      	ldr	r2, [pc, #656]	@ (8015240 <DrawChar+0x2b0>)
 8014fae:	015b      	lsls	r3, r3, #5
 8014fb0:	4413      	add	r3, r2
 8014fb2:	3308      	adds	r3, #8
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	88db      	ldrh	r3, [r3, #6]
 8014fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8014fbc:	4ba0      	ldr	r3, [pc, #640]	@ (8015240 <DrawChar+0x2b0>)
 8014fbe:	68db      	ldr	r3, [r3, #12]
 8014fc0:	4a9f      	ldr	r2, [pc, #636]	@ (8015240 <DrawChar+0x2b0>)
 8014fc2:	015b      	lsls	r3, r3, #5
 8014fc4:	4413      	add	r3, r2
 8014fc6:	3308      	adds	r3, #8
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	889b      	ldrh	r3, [r3, #4]
 8014fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8014fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014fd4:	3307      	adds	r3, #7
 8014fd6:	f023 0207 	bic.w	r2, r3, #7
 8014fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014fde:	1ad3      	subs	r3, r2, r3
 8014fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8014fea:	e11c      	b.n	8015226 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8014fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014ff0:	3307      	adds	r3, #7
 8014ff2:	08db      	lsrs	r3, r3, #3
 8014ff4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8014ff8:	fb02 f303 	mul.w	r3, r2, r3
 8014ffc:	687a      	ldr	r2, [r7, #4]
 8014ffe:	4413      	add	r3, r2
 8015000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 8015004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015008:	3307      	adds	r3, #7
 801500a:	08db      	lsrs	r3, r3, #3
 801500c:	2b01      	cmp	r3, #1
 801500e:	d002      	beq.n	8015016 <DrawChar+0x86>
 8015010:	2b02      	cmp	r3, #2
 8015012:	d006      	beq.n	8015022 <DrawChar+0x92>
 8015014:	e011      	b.n	801503a <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8015016:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801501a:	781b      	ldrb	r3, [r3, #0]
 801501c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8015020:	e01d      	b.n	801505e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8015022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015026:	781b      	ldrb	r3, [r3, #0]
 8015028:	021b      	lsls	r3, r3, #8
 801502a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801502e:	3201      	adds	r2, #1
 8015030:	7812      	ldrb	r2, [r2, #0]
 8015032:	4313      	orrs	r3, r2
 8015034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8015038:	e011      	b.n	801505e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801503a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801503e:	781b      	ldrb	r3, [r3, #0]
 8015040:	041a      	lsls	r2, r3, #16
 8015042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015046:	3301      	adds	r3, #1
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	021b      	lsls	r3, r3, #8
 801504c:	4313      	orrs	r3, r2
 801504e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8015052:	3202      	adds	r2, #2
 8015054:	7812      	ldrb	r2, [r2, #0]
 8015056:	4313      	orrs	r3, r2
 8015058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 801505c:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801505e:	4b78      	ldr	r3, [pc, #480]	@ (8015240 <DrawChar+0x2b0>)
 8015060:	68db      	ldr	r3, [r3, #12]
 8015062:	4a77      	ldr	r2, [pc, #476]	@ (8015240 <DrawChar+0x2b0>)
 8015064:	015b      	lsls	r3, r3, #5
 8015066:	4413      	add	r3, r2
 8015068:	331c      	adds	r3, #28
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	2b02      	cmp	r3, #2
 801506e:	f040 808c 	bne.w	801518a <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8015072:	2300      	movs	r3, #0
 8015074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015078:	e074      	b.n	8015164 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 801507a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801507e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8015082:	1ad2      	subs	r2, r2, r3
 8015084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8015088:	4413      	add	r3, r2
 801508a:	3b01      	subs	r3, #1
 801508c:	2201      	movs	r2, #1
 801508e:	fa02 f303 	lsl.w	r3, r2, r3
 8015092:	461a      	mov	r2, r3
 8015094:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8015098:	4013      	ands	r3, r2
 801509a:	2b00      	cmp	r3, #0
 801509c:	d02d      	beq.n	80150fa <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801509e:	4b68      	ldr	r3, [pc, #416]	@ (8015240 <DrawChar+0x2b0>)
 80150a0:	68db      	ldr	r3, [r3, #12]
 80150a2:	4a67      	ldr	r2, [pc, #412]	@ (8015240 <DrawChar+0x2b0>)
 80150a4:	015b      	lsls	r3, r3, #5
 80150a6:	4413      	add	r3, r2
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	08db      	lsrs	r3, r3, #3
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	f003 031f 	and.w	r3, r3, #31
 80150b2:	b29a      	uxth	r2, r3
 80150b4:	4b62      	ldr	r3, [pc, #392]	@ (8015240 <DrawChar+0x2b0>)
 80150b6:	68db      	ldr	r3, [r3, #12]
 80150b8:	4961      	ldr	r1, [pc, #388]	@ (8015240 <DrawChar+0x2b0>)
 80150ba:	015b      	lsls	r3, r3, #5
 80150bc:	440b      	add	r3, r1
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	0a9b      	lsrs	r3, r3, #10
 80150c2:	b29b      	uxth	r3, r3
 80150c4:	015b      	lsls	r3, r3, #5
 80150c6:	b29b      	uxth	r3, r3
 80150c8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	4313      	orrs	r3, r2
 80150d0:	b29a      	uxth	r2, r3
 80150d2:	4b5b      	ldr	r3, [pc, #364]	@ (8015240 <DrawChar+0x2b0>)
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	495a      	ldr	r1, [pc, #360]	@ (8015240 <DrawChar+0x2b0>)
 80150d8:	015b      	lsls	r3, r3, #5
 80150da:	440b      	add	r3, r1
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	0cdb      	lsrs	r3, r3, #19
 80150e0:	b29b      	uxth	r3, r3
 80150e2:	02db      	lsls	r3, r3, #11
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	4313      	orrs	r3, r2
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80150ee:	005b      	lsls	r3, r3, #1
 80150f0:	33c0      	adds	r3, #192	@ 0xc0
 80150f2:	443b      	add	r3, r7
 80150f4:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80150f8:	e02f      	b.n	801515a <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80150fa:	4b51      	ldr	r3, [pc, #324]	@ (8015240 <DrawChar+0x2b0>)
 80150fc:	68db      	ldr	r3, [r3, #12]
 80150fe:	4a50      	ldr	r2, [pc, #320]	@ (8015240 <DrawChar+0x2b0>)
 8015100:	015b      	lsls	r3, r3, #5
 8015102:	4413      	add	r3, r2
 8015104:	3304      	adds	r3, #4
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	08db      	lsrs	r3, r3, #3
 801510a:	b29b      	uxth	r3, r3
 801510c:	f003 031f 	and.w	r3, r3, #31
 8015110:	b29a      	uxth	r2, r3
 8015112:	4b4b      	ldr	r3, [pc, #300]	@ (8015240 <DrawChar+0x2b0>)
 8015114:	68db      	ldr	r3, [r3, #12]
 8015116:	494a      	ldr	r1, [pc, #296]	@ (8015240 <DrawChar+0x2b0>)
 8015118:	015b      	lsls	r3, r3, #5
 801511a:	440b      	add	r3, r1
 801511c:	3304      	adds	r3, #4
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	0a9b      	lsrs	r3, r3, #10
 8015122:	b29b      	uxth	r3, r3
 8015124:	015b      	lsls	r3, r3, #5
 8015126:	b29b      	uxth	r3, r3
 8015128:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801512c:	b29b      	uxth	r3, r3
 801512e:	4313      	orrs	r3, r2
 8015130:	b29a      	uxth	r2, r3
 8015132:	4b43      	ldr	r3, [pc, #268]	@ (8015240 <DrawChar+0x2b0>)
 8015134:	68db      	ldr	r3, [r3, #12]
 8015136:	4942      	ldr	r1, [pc, #264]	@ (8015240 <DrawChar+0x2b0>)
 8015138:	015b      	lsls	r3, r3, #5
 801513a:	440b      	add	r3, r1
 801513c:	3304      	adds	r3, #4
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	0cdb      	lsrs	r3, r3, #19
 8015142:	b29b      	uxth	r3, r3
 8015144:	02db      	lsls	r3, r3, #11
 8015146:	b29b      	uxth	r3, r3
 8015148:	4313      	orrs	r3, r2
 801514a:	b29a      	uxth	r2, r3
 801514c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8015150:	005b      	lsls	r3, r3, #1
 8015152:	33c0      	adds	r3, #192	@ 0xc0
 8015154:	443b      	add	r3, r7
 8015156:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 801515a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801515e:	3301      	adds	r3, #1
 8015160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015164:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8015168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801516c:	429a      	cmp	r2, r3
 801516e:	d384      	bcc.n	801507a <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8015170:	68b9      	ldr	r1, [r7, #8]
 8015172:	1c4b      	adds	r3, r1, #1
 8015174:	60bb      	str	r3, [r7, #8]
 8015176:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801517a:	2301      	movs	r3, #1
 801517c:	9300      	str	r3, [sp, #0]
 801517e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015182:	68f8      	ldr	r0, [r7, #12]
 8015184:	f7ff fd08 	bl	8014b98 <UTIL_LCD_FillRGBRect>
 8015188:	e048      	b.n	801521c <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 801518a:	2300      	movs	r3, #0
 801518c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015190:	e032      	b.n	80151f8 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8015192:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8015196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801519a:	1ad2      	subs	r2, r2, r3
 801519c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80151a0:	4413      	add	r3, r2
 80151a2:	3b01      	subs	r3, #1
 80151a4:	2201      	movs	r2, #1
 80151a6:	fa02 f303 	lsl.w	r3, r2, r3
 80151aa:	461a      	mov	r2, r3
 80151ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80151b0:	4013      	ands	r3, r2
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d00d      	beq.n	80151d2 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80151b6:	4b22      	ldr	r3, [pc, #136]	@ (8015240 <DrawChar+0x2b0>)
 80151b8:	68db      	ldr	r3, [r3, #12]
 80151ba:	4a21      	ldr	r2, [pc, #132]	@ (8015240 <DrawChar+0x2b0>)
 80151bc:	015b      	lsls	r3, r3, #5
 80151be:	4413      	add	r3, r2
 80151c0:	681a      	ldr	r2, [r3, #0]
 80151c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80151c6:	009b      	lsls	r3, r3, #2
 80151c8:	33c0      	adds	r3, #192	@ 0xc0
 80151ca:	443b      	add	r3, r7
 80151cc:	f843 2cac 	str.w	r2, [r3, #-172]
 80151d0:	e00d      	b.n	80151ee <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80151d2:	4b1b      	ldr	r3, [pc, #108]	@ (8015240 <DrawChar+0x2b0>)
 80151d4:	68db      	ldr	r3, [r3, #12]
 80151d6:	4a1a      	ldr	r2, [pc, #104]	@ (8015240 <DrawChar+0x2b0>)
 80151d8:	015b      	lsls	r3, r3, #5
 80151da:	4413      	add	r3, r2
 80151dc:	3304      	adds	r3, #4
 80151de:	681a      	ldr	r2, [r3, #0]
 80151e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80151e4:	009b      	lsls	r3, r3, #2
 80151e6:	33c0      	adds	r3, #192	@ 0xc0
 80151e8:	443b      	add	r3, r7
 80151ea:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 80151ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80151f2:	3301      	adds	r3, #1
 80151f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80151f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80151fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015200:	429a      	cmp	r2, r3
 8015202:	d3c6      	bcc.n	8015192 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8015204:	68b9      	ldr	r1, [r7, #8]
 8015206:	1c4b      	adds	r3, r1, #1
 8015208:	60bb      	str	r3, [r7, #8]
 801520a:	f107 0214 	add.w	r2, r7, #20
 801520e:	2301      	movs	r3, #1
 8015210:	9300      	str	r3, [sp, #0]
 8015212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015216:	68f8      	ldr	r0, [r7, #12]
 8015218:	f7ff fcbe 	bl	8014b98 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 801521c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015220:	3301      	adds	r3, #1
 8015222:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8015226:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801522a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801522e:	429a      	cmp	r2, r3
 8015230:	f4ff aedc 	bcc.w	8014fec <DrawChar+0x5c>
    }
  }
}
 8015234:	bf00      	nop
 8015236:	bf00      	nop
 8015238:	37c0      	adds	r7, #192	@ 0xc0
 801523a:	46bd      	mov	sp, r7
 801523c:	bd80      	pop	{r7, pc}
 801523e:	bf00      	nop
 8015240:	240060d0 	.word	0x240060d0

08015244 <D16_GENERIC>:
 8015244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015248:	b087      	sub	sp, #28
 801524a:	6993      	ldr	r3, [r2, #24]
 801524c:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 801524e:	9101      	str	r1, [sp, #4]
 8015250:	68d1      	ldr	r1, [r2, #12]
 8015252:	9304      	str	r3, [sp, #16]
 8015254:	9105      	str	r1, [sp, #20]
 8015256:	6914      	ldr	r4, [r2, #16]
 8015258:	f8d2 a014 	ldr.w	sl, [r2, #20]
 801525c:	69d3      	ldr	r3, [r2, #28]
 801525e:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8015262:	f8d2 8030 	ldr.w	r8, [r2, #48]	@ 0x30
 8015266:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8015268:	2d00      	cmp	r5, #0
 801526a:	d05e      	beq.n	801532a <D16_GENERIC+0xe6>
 801526c:	f001 0510 	and.w	r5, r1, #16
 8015270:	f001 0120 	and.w	r1, r1, #32
 8015274:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8015350 <D16_GENERIC+0x10c>
 8015278:	46c1      	mov	r9, r8
 801527a:	9103      	str	r1, [sp, #12]
 801527c:	2100      	movs	r1, #0
 801527e:	9502      	str	r5, [sp, #8]
 8015280:	e048      	b.n	8015314 <D16_GENERIC+0xd0>
 8015282:	5d87      	ldrb	r7, [r0, r6]
 8015284:	7805      	ldrb	r5, [r0, #0]
 8015286:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 801528a:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 801528e:	b2fe      	uxtb	r6, r7
 8015290:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8015294:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
 8015298:	f85c 6027 	ldr.w	r6, [ip, r7, lsl #2]
 801529c:	441d      	add	r5, r3
 801529e:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 80152a2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80152a6:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80152aa:	0a9b      	lsrs	r3, r3, #10
 80152ac:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80152b0:	4d25      	ldr	r5, [pc, #148]	@ (8015348 <D16_GENERIC+0x104>)
 80152b2:	fb26 e505 	smlad	r5, r6, r5, lr
 80152b6:	4f25      	ldr	r7, [pc, #148]	@ (801534c <D16_GENERIC+0x108>)
 80152b8:	fb26 fe07 	smuad	lr, r6, r7
 80152bc:	9e02      	ldr	r6, [sp, #8]
 80152be:	f101 0801 	add.w	r8, r1, #1
 80152c2:	f5a5 6500 	sub.w	r5, r5, #2048	@ 0x800
 80152c6:	b186      	cbz	r6, 80152ea <D16_GENERIC+0xa6>
 80152c8:	442c      	add	r4, r5
 80152ca:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80152ce:	eba4 040a 	sub.w	r4, r4, sl
 80152d2:	46aa      	mov	sl, r5
 80152d4:	17e7      	asrs	r7, r4, #31
 80152d6:	fba4 450b 	umull	r4, r5, r4, fp
 80152da:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 80152de:	fb0b 5507 	mla	r5, fp, r7, r5
 80152e2:	f145 0500 	adc.w	r5, r5, #0
 80152e6:	006c      	lsls	r4, r5, #1
 80152e8:	4625      	mov	r5, r4
 80152ea:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 80152ee:	042d      	lsls	r5, r5, #16
 80152f0:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 80152f4:	2700      	movs	r7, #0
 80152f6:	fb01 fb0b 	mul.w	fp, r1, fp
 80152fa:	fa1f f188 	uxth.w	r1, r8
 80152fe:	fbc9 6705 	smlal	r6, r7, r9, r5
 8015302:	9e01      	ldr	r6, [sp, #4]
 8015304:	10bd      	asrs	r5, r7, #2
 8015306:	f305 050f 	ssat	r5, #16, r5
 801530a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801530e:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8015310:	428d      	cmp	r5, r1
 8015312:	d90a      	bls.n	801532a <D16_GENERIC+0xe6>
 8015314:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8015316:	2d01      	cmp	r5, #1
 8015318:	b2ee      	uxtb	r6, r5
 801531a:	d1b2      	bne.n	8015282 <D16_GENERIC+0x3e>
 801531c:	9d03      	ldr	r5, [sp, #12]
 801531e:	f850 7b02 	ldr.w	r7, [r0], #2
 8015322:	2d00      	cmp	r5, #0
 8015324:	d0b3      	beq.n	801528e <D16_GENERIC+0x4a>
 8015326:	ba7f      	rev16	r7, r7
 8015328:	e7b1      	b.n	801528e <D16_GENERIC+0x4a>
 801532a:	2000      	movs	r0, #0
 801532c:	9905      	ldr	r1, [sp, #20]
 801532e:	61d3      	str	r3, [r2, #28]
 8015330:	9b04      	ldr	r3, [sp, #16]
 8015332:	f8c2 e008 	str.w	lr, [r2, #8]
 8015336:	60d1      	str	r1, [r2, #12]
 8015338:	6114      	str	r4, [r2, #16]
 801533a:	f8c2 a014 	str.w	sl, [r2, #20]
 801533e:	6193      	str	r3, [r2, #24]
 8015340:	b007      	add	sp, #28
 8015342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015346:	bf00      	nop
 8015348:	00030001 	.word	0x00030001
 801534c:	00010003 	.word	0x00010003
 8015350:	24000000 	.word	0x24000000

08015354 <D24_GENERIC>:
 8015354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015358:	6953      	ldr	r3, [r2, #20]
 801535a:	b087      	sub	sp, #28
 801535c:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 801535e:	9301      	str	r3, [sp, #4]
 8015360:	6993      	ldr	r3, [r2, #24]
 8015362:	9102      	str	r1, [sp, #8]
 8015364:	9305      	str	r3, [sp, #20]
 8015366:	6914      	ldr	r4, [r2, #16]
 8015368:	69d1      	ldr	r1, [r2, #28]
 801536a:	6893      	ldr	r3, [r2, #8]
 801536c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8015370:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 8015374:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8015376:	2e00      	cmp	r6, #0
 8015378:	f000 808c 	beq.w	8015494 <D24_GENERIC+0x140>
 801537c:	f005 0610 	and.w	r6, r5, #16
 8015380:	f005 0520 	and.w	r5, r5, #32
 8015384:	f04f 0e00 	mov.w	lr, #0
 8015388:	f8df c140 	ldr.w	ip, [pc, #320]	@ 80154cc <D24_GENERIC+0x178>
 801538c:	9603      	str	r6, [sp, #12]
 801538e:	9504      	str	r5, [sp, #16]
 8015390:	e061      	b.n	8015456 <D24_GENERIC+0x102>
 8015392:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8015396:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801539a:	f810 b007 	ldrb.w	fp, [r0, r7]
 801539e:	042d      	lsls	r5, r5, #16
 80153a0:	f890 9000 	ldrb.w	r9, [r0]
 80153a4:	19f0      	adds	r0, r6, r7
 80153a6:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 80153aa:	44a9      	add	r9, r5
 80153ac:	fa5f f689 	uxtb.w	r6, r9
 80153b0:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80153b4:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80153b8:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80153bc:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80153c0:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80153c4:	f85c 1029 	ldr.w	r1, [ip, r9, lsl #2]
 80153c8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80153cc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80153d0:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80153d4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80153d8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80153dc:	4d39      	ldr	r5, [pc, #228]	@ (80154c4 <D24_GENERIC+0x170>)
 80153de:	fb26 8705 	smlad	r7, r6, r5, r8
 80153e2:	4d39      	ldr	r5, [pc, #228]	@ (80154c8 <D24_GENERIC+0x174>)
 80153e4:	fb26 3805 	smlad	r8, r6, r5, r3
 80153e8:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80153ec:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 80153f0:	2301      	movs	r3, #1
 80153f2:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 80153f6:	fb26 f603 	smuad	r6, r6, r3
 80153fa:	eb0e 0903 	add.w	r9, lr, r3
 80153fe:	eb0b 0306 	add.w	r3, fp, r6
 8015402:	9e03      	ldr	r6, [sp, #12]
 8015404:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8015408:	b186      	cbz	r6, 801542c <D24_GENERIC+0xd8>
 801540a:	442c      	add	r4, r5
 801540c:	9e01      	ldr	r6, [sp, #4]
 801540e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8015412:	1ba4      	subs	r4, r4, r6
 8015414:	9501      	str	r5, [sp, #4]
 8015416:	17e7      	asrs	r7, r4, #31
 8015418:	fba4 450b 	umull	r4, r5, r4, fp
 801541c:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8015420:	fb0b 5507 	mla	r5, fp, r7, r5
 8015424:	f145 0500 	adc.w	r5, r5, #0
 8015428:	006c      	lsls	r4, r5, #1
 801542a:	4625      	mov	r5, r4
 801542c:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 8015430:	03ad      	lsls	r5, r5, #14
 8015432:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8015436:	2700      	movs	r7, #0
 8015438:	fb0e fb0b 	mul.w	fp, lr, fp
 801543c:	fa1f fe89 	uxth.w	lr, r9
 8015440:	fbca 6705 	smlal	r6, r7, sl, r5
 8015444:	9e02      	ldr	r6, [sp, #8]
 8015446:	10bd      	asrs	r5, r7, #2
 8015448:	f305 050f 	ssat	r5, #16, r5
 801544c:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8015450:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8015452:	4575      	cmp	r5, lr
 8015454:	d91e      	bls.n	8015494 <D24_GENERIC+0x140>
 8015456:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8015458:	b2ef      	uxtb	r7, r5
 801545a:	2d01      	cmp	r5, #1
 801545c:	b23e      	sxth	r6, r7
 801545e:	d198      	bne.n	8015392 <D24_GENERIC+0x3e>
 8015460:	9d04      	ldr	r5, [sp, #16]
 8015462:	b16d      	cbz	r5, 8015480 <D24_GENERIC+0x12c>
 8015464:	f01e 0f01 	tst.w	lr, #1
 8015468:	d121      	bne.n	80154ae <D24_GENERIC+0x15a>
 801546a:	7805      	ldrb	r5, [r0, #0]
 801546c:	3002      	adds	r0, #2
 801546e:	f890 9001 	ldrb.w	r9, [r0, #1]
 8015472:	022d      	lsls	r5, r5, #8
 8015474:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8015478:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 801547c:	44b1      	add	r9, r6
 801547e:	e795      	b.n	80153ac <D24_GENERIC+0x58>
 8015480:	7846      	ldrb	r6, [r0, #1]
 8015482:	f890 9002 	ldrb.w	r9, [r0, #2]
 8015486:	0236      	lsls	r6, r6, #8
 8015488:	f810 5b03 	ldrb.w	r5, [r0], #3
 801548c:	eb06 4909 	add.w	r9, r6, r9, lsl #16
 8015490:	44a9      	add	r9, r5
 8015492:	e78b      	b.n	80153ac <D24_GENERIC+0x58>
 8015494:	6093      	str	r3, [r2, #8]
 8015496:	2000      	movs	r0, #0
 8015498:	9b01      	ldr	r3, [sp, #4]
 801549a:	f8c2 800c 	str.w	r8, [r2, #12]
 801549e:	6153      	str	r3, [r2, #20]
 80154a0:	9b05      	ldr	r3, [sp, #20]
 80154a2:	61d1      	str	r1, [r2, #28]
 80154a4:	6114      	str	r4, [r2, #16]
 80154a6:	6193      	str	r3, [r2, #24]
 80154a8:	b007      	add	sp, #28
 80154aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ae:	78c5      	ldrb	r5, [r0, #3]
 80154b0:	f890 9002 	ldrb.w	r9, [r0, #2]
 80154b4:	022d      	lsls	r5, r5, #8
 80154b6:	f810 6b04 	ldrb.w	r6, [r0], #4
 80154ba:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 80154be:	44b1      	add	r9, r6
 80154c0:	e774      	b.n	80153ac <D24_GENERIC+0x58>
 80154c2:	bf00      	nop
 80154c4:	00030001 	.word	0x00030001
 80154c8:	00060007 	.word	0x00060007
 80154cc:	24000000 	.word	0x24000000

080154d0 <D32_GENERIC>:
 80154d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d4:	6953      	ldr	r3, [r2, #20]
 80154d6:	b087      	sub	sp, #28
 80154d8:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80154da:	9300      	str	r3, [sp, #0]
 80154dc:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 80154de:	6993      	ldr	r3, [r2, #24]
 80154e0:	9102      	str	r1, [sp, #8]
 80154e2:	9305      	str	r3, [sp, #20]
 80154e4:	9501      	str	r5, [sp, #4]
 80154e6:	6914      	ldr	r4, [r2, #16]
 80154e8:	69d1      	ldr	r1, [r2, #28]
 80154ea:	6893      	ldr	r3, [r2, #8]
 80154ec:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80154f0:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80154f2:	2e00      	cmp	r6, #0
 80154f4:	f000 8098 	beq.w	8015628 <D32_GENERIC+0x158>
 80154f8:	f005 0610 	and.w	r6, r5, #16
 80154fc:	f005 0520 	and.w	r5, r5, #32
 8015500:	f04f 0c00 	mov.w	ip, #0
 8015504:	f8df e14c 	ldr.w	lr, [pc, #332]	@ 8015654 <D32_GENERIC+0x184>
 8015508:	9603      	str	r6, [sp, #12]
 801550a:	9504      	str	r5, [sp, #16]
 801550c:	e078      	b.n	8015600 <D32_GENERIC+0x130>
 801550e:	eb00 0905 	add.w	r9, r0, r5
 8015512:	f810 b005 	ldrb.w	fp, [r0, r5]
 8015516:	f810 a006 	ldrb.w	sl, [r0, r6]
 801551a:	f819 5007 	ldrb.w	r5, [r9, r7]
 801551e:	444f      	add	r7, r9
 8015520:	f890 9000 	ldrb.w	r9, [r0]
 8015524:	042d      	lsls	r5, r5, #16
 8015526:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 801552a:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 801552e:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8015532:	44a9      	add	r9, r5
 8015534:	fa5f f789 	uxtb.w	r7, r9
 8015538:	f3c9 2507 	ubfx	r5, r9, #8, #8
 801553c:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8015540:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8015544:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8015548:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 801554c:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8015550:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8015554:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
 8015558:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801555c:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8015560:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8015564:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8015568:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 801556c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8015570:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8015574:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8015578:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801557c:	4d31      	ldr	r5, [pc, #196]	@ (8015644 <D32_GENERIC+0x174>)
 801557e:	fb29 8805 	smlad	r8, r9, r5, r8
 8015582:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 8015586:	fb26 8705 	smlad	r7, r6, r5, r8
 801558a:	4d2f      	ldr	r5, [pc, #188]	@ (8015648 <D32_GENERIC+0x178>)
 801558c:	fb29 3305 	smlad	r3, r9, r5, r3
 8015590:	4d2e      	ldr	r5, [pc, #184]	@ (801564c <D32_GENERIC+0x17c>)
 8015592:	fb26 3805 	smlad	r8, r6, r5, r3
 8015596:	2301      	movs	r3, #1
 8015598:	fb29 f903 	smuad	r9, r9, r3
 801559c:	4b2c      	ldr	r3, [pc, #176]	@ (8015650 <D32_GENERIC+0x180>)
 801559e:	fb26 9303 	smlad	r3, r6, r3, r9
 80155a2:	9e03      	ldr	r6, [sp, #12]
 80155a4:	f10c 0901 	add.w	r9, ip, #1
 80155a8:	f5a7 4580 	sub.w	r5, r7, #16384	@ 0x4000
 80155ac:	b186      	cbz	r6, 80155d0 <D32_GENERIC+0x100>
 80155ae:	442c      	add	r4, r5
 80155b0:	9e00      	ldr	r6, [sp, #0]
 80155b2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80155b6:	1ba4      	subs	r4, r4, r6
 80155b8:	9500      	str	r5, [sp, #0]
 80155ba:	17e7      	asrs	r7, r4, #31
 80155bc:	fba4 450a 	umull	r4, r5, r4, sl
 80155c0:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 80155c4:	fb0a 5507 	mla	r5, sl, r7, r5
 80155c8:	f145 0500 	adc.w	r5, r5, #0
 80155cc:	006c      	lsls	r4, r5, #1
 80155ce:	4625      	mov	r5, r4
 80155d0:	f8b2 a028 	ldrh.w	sl, [r2, #40]	@ 0x28
 80155d4:	036d      	lsls	r5, r5, #13
 80155d6:	9f01      	ldr	r7, [sp, #4]
 80155d8:	fb0c fb0a 	mul.w	fp, ip, sl
 80155dc:	fa1f fc89 	uxth.w	ip, r9
 80155e0:	f04f 0a00 	mov.w	sl, #0
 80155e4:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 80155e8:	9e02      	ldr	r6, [sp, #8]
 80155ea:	fbc7 9a05 	smlal	r9, sl, r7, r5
 80155ee:	4657      	mov	r7, sl
 80155f0:	10bd      	asrs	r5, r7, #2
 80155f2:	f305 050f 	ssat	r5, #16, r5
 80155f6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80155fa:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80155fc:	4565      	cmp	r5, ip
 80155fe:	d913      	bls.n	8015628 <D32_GENERIC+0x158>
 8015600:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8015602:	b2ee      	uxtb	r6, r5
 8015604:	2d01      	cmp	r5, #1
 8015606:	f1c6 0700 	rsb	r7, r6, #0
 801560a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801560e:	f47f af7e 	bne.w	801550e <D32_GENERIC+0x3e>
 8015612:	1d05      	adds	r5, r0, #4
 8015614:	f8d0 9000 	ldr.w	r9, [r0]
 8015618:	9804      	ldr	r0, [sp, #16]
 801561a:	b118      	cbz	r0, 8015624 <D32_GENERIC+0x154>
 801561c:	fa99 f999 	rev16.w	r9, r9
 8015620:	4628      	mov	r0, r5
 8015622:	e787      	b.n	8015534 <D32_GENERIC+0x64>
 8015624:	4628      	mov	r0, r5
 8015626:	e785      	b.n	8015534 <D32_GENERIC+0x64>
 8015628:	6093      	str	r3, [r2, #8]
 801562a:	2000      	movs	r0, #0
 801562c:	9b00      	ldr	r3, [sp, #0]
 801562e:	f8c2 800c 	str.w	r8, [r2, #12]
 8015632:	6153      	str	r3, [r2, #20]
 8015634:	9b05      	ldr	r3, [sp, #20]
 8015636:	61d1      	str	r1, [r2, #28]
 8015638:	6114      	str	r4, [r2, #16]
 801563a:	6193      	str	r3, [r2, #24]
 801563c:	b007      	add	sp, #28
 801563e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015642:	bf00      	nop
 8015644:	00060003 	.word	0x00060003
 8015648:	000a000c 	.word	0x000a000c
 801564c:	000c000a 	.word	0x000c000a
 8015650:	00030006 	.word	0x00030006
 8015654:	24000000 	.word	0x24000000

08015658 <D48_GENERIC>:
 8015658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801565c:	6913      	ldr	r3, [r2, #16]
 801565e:	b08b      	sub	sp, #44	@ 0x2c
 8015660:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8015662:	9106      	str	r1, [sp, #24]
 8015664:	9303      	str	r3, [sp, #12]
 8015666:	68d1      	ldr	r1, [r2, #12]
 8015668:	6953      	ldr	r3, [r2, #20]
 801566a:	9101      	str	r1, [sp, #4]
 801566c:	9304      	str	r3, [sp, #16]
 801566e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8015670:	6993      	ldr	r3, [r2, #24]
 8015672:	9105      	str	r1, [sp, #20]
 8015674:	9309      	str	r3, [sp, #36]	@ 0x24
 8015676:	69d6      	ldr	r6, [r2, #28]
 8015678:	6893      	ldr	r3, [r2, #8]
 801567a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 801567c:	2c00      	cmp	r4, #0
 801567e:	f000 80c6 	beq.w	801580e <D48_GENERIC+0x1b6>
 8015682:	f001 0410 	and.w	r4, r1, #16
 8015686:	f001 0120 	and.w	r1, r1, #32
 801568a:	2700      	movs	r7, #0
 801568c:	9302      	str	r3, [sp, #8]
 801568e:	9108      	str	r1, [sp, #32]
 8015690:	9407      	str	r4, [sp, #28]
 8015692:	4966      	ldr	r1, [pc, #408]	@ (801582c <D48_GENERIC+0x1d4>)
 8015694:	e0a6      	b.n	80157e4 <D48_GENERIC+0x18c>
 8015696:	eb00 0e08 	add.w	lr, r0, r8
 801569a:	f810 a008 	ldrb.w	sl, [r0, r8]
 801569e:	f810 9005 	ldrb.w	r9, [r0, r5]
 80156a2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80156a6:	44e6      	add	lr, ip
 80156a8:	f890 b000 	ldrb.w	fp, [r0]
 80156ac:	0420      	lsls	r0, r4, #16
 80156ae:	eb0e 0408 	add.w	r4, lr, r8
 80156b2:	f81e e008 	ldrb.w	lr, [lr, r8]
 80156b6:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 80156ba:	f814 800c 	ldrb.w	r8, [r4, ip]
 80156be:	44a4      	add	ip, r4
 80156c0:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 80156c4:	eb08 2e0e 	add.w	lr, r8, lr, lsl #8
 80156c8:	eb0a 040b 	add.w	r4, sl, fp
 80156cc:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 80156d0:	fa5f f884 	uxtb.w	r8, r4
 80156d4:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80156d8:	f3c4 4907 	ubfx	r9, r4, #16, #8
 80156dc:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 80156e0:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 80156e4:	fa5f fc8e 	uxtb.w	ip, lr
 80156e8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 80156ec:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80156f0:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 80156f4:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 80156f8:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 80156fc:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8015700:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8015704:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8015708:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801570c:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8015710:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8015714:	9b01      	ldr	r3, [sp, #4]
 8015716:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 801571a:	f3c6 0909 	ubfx	r9, r6, #0, #10
 801571e:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8015722:	eb0c 2c94 	add.w	ip, ip, r4, lsr #10
 8015726:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801572a:	eb0e 269c 	add.w	r6, lr, ip, lsr #10
 801572e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8015732:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8015736:	f3c6 0509 	ubfx	r5, r6, #0, #10
 801573a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 801573e:	4d3c      	ldr	r5, [pc, #240]	@ (8015830 <D48_GENERIC+0x1d8>)
 8015740:	fb28 3a05 	smlad	sl, r8, r5, r3
 8015744:	4b3b      	ldr	r3, [pc, #236]	@ (8015834 <D48_GENERIC+0x1dc>)
 8015746:	fb24 aa03 	smlad	sl, r4, r3, sl
 801574a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801574e:	fb2c aa03 	smlad	sl, ip, r3, sl
 8015752:	4b39      	ldr	r3, [pc, #228]	@ (8015838 <D48_GENERIC+0x1e0>)
 8015754:	9d02      	ldr	r5, [sp, #8]
 8015756:	fb28 5303 	smlad	r3, r8, r3, r5
 801575a:	f04f 151b 	mov.w	r5, #1769499	@ 0x1b001b
 801575e:	fb24 3305 	smlad	r3, r4, r5, r3
 8015762:	4d36      	ldr	r5, [pc, #216]	@ (801583c <D48_GENERIC+0x1e4>)
 8015764:	fb2c 3305 	smlad	r3, ip, r5, r3
 8015768:	2501      	movs	r5, #1
 801576a:	9301      	str	r3, [sp, #4]
 801576c:	fb28 f805 	smuad	r8, r8, r5
 8015770:	4b33      	ldr	r3, [pc, #204]	@ (8015840 <D48_GENERIC+0x1e8>)
 8015772:	fb24 8403 	smlad	r4, r4, r3, r8
 8015776:	4b33      	ldr	r3, [pc, #204]	@ (8015844 <D48_GENERIC+0x1ec>)
 8015778:	fb2c 4303 	smlad	r3, ip, r3, r4
 801577c:	9302      	str	r3, [sp, #8]
 801577e:	eb07 0e05 	add.w	lr, r7, r5
 8015782:	9b07      	ldr	r3, [sp, #28]
 8015784:	f5aa 4a58 	sub.w	sl, sl, #55296	@ 0xd800
 8015788:	b1ab      	cbz	r3, 80157b6 <D48_GENERIC+0x15e>
 801578a:	9b03      	ldr	r3, [sp, #12]
 801578c:	f8d2 c020 	ldr.w	ip, [r2, #32]
 8015790:	4453      	add	r3, sl
 8015792:	461c      	mov	r4, r3
 8015794:	9b04      	ldr	r3, [sp, #16]
 8015796:	f8cd a010 	str.w	sl, [sp, #16]
 801579a:	1ae4      	subs	r4, r4, r3
 801579c:	ea4f 79e4 	mov.w	r9, r4, asr #31
 80157a0:	fba4 450c 	umull	r4, r5, r4, ip
 80157a4:	fb0c 5509 	mla	r5, ip, r9, r5
 80157a8:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 80157ac:	f145 0500 	adc.w	r5, r5, #0
 80157b0:	006b      	lsls	r3, r5, #1
 80157b2:	469a      	mov	sl, r3
 80157b4:	9303      	str	r3, [sp, #12]
 80157b6:	f8b2 c028 	ldrh.w	ip, [r2, #40]	@ 0x28
 80157ba:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 80157be:	9b05      	ldr	r3, [sp, #20]
 80157c0:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80157c4:	2500      	movs	r5, #0
 80157c6:	fb07 fc0c 	mul.w	ip, r7, ip
 80157ca:	fa1f f78e 	uxth.w	r7, lr
 80157ce:	fbc3 450a 	smlal	r4, r5, r3, sl
 80157d2:	9b06      	ldr	r3, [sp, #24]
 80157d4:	10ac      	asrs	r4, r5, #2
 80157d6:	f304 040f 	ssat	r4, #16, r4
 80157da:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80157de:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80157e0:	42bc      	cmp	r4, r7
 80157e2:	d913      	bls.n	801580c <D48_GENERIC+0x1b4>
 80157e4:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80157e6:	b2e5      	uxtb	r5, r4
 80157e8:	2c01      	cmp	r4, #1
 80157ea:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80157ee:	f1c5 0c00 	rsb	ip, r5, #0
 80157f2:	f47f af50 	bne.w	8015696 <D48_GENERIC+0x3e>
 80157f6:	9b08      	ldr	r3, [sp, #32]
 80157f8:	e890 4010 	ldmia.w	r0, {r4, lr}
 80157fc:	3006      	adds	r0, #6
 80157fe:	2b00      	cmp	r3, #0
 8015800:	f43f af66 	beq.w	80156d0 <D48_GENERIC+0x78>
 8015804:	ba64      	rev16	r4, r4
 8015806:	fa9e fe9e 	rev16.w	lr, lr
 801580a:	e761      	b.n	80156d0 <D48_GENERIC+0x78>
 801580c:	9b02      	ldr	r3, [sp, #8]
 801580e:	6093      	str	r3, [r2, #8]
 8015810:	2000      	movs	r0, #0
 8015812:	9b01      	ldr	r3, [sp, #4]
 8015814:	61d6      	str	r6, [r2, #28]
 8015816:	60d3      	str	r3, [r2, #12]
 8015818:	9b03      	ldr	r3, [sp, #12]
 801581a:	6113      	str	r3, [r2, #16]
 801581c:	9b04      	ldr	r3, [sp, #16]
 801581e:	6153      	str	r3, [r2, #20]
 8015820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015822:	6193      	str	r3, [r2, #24]
 8015824:	b00b      	add	sp, #44	@ 0x2c
 8015826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801582a:	bf00      	nop
 801582c:	24000000 	.word	0x24000000
 8015830:	000f000a 	.word	0x000f000a
 8015834:	00060003 	.word	0x00060003
 8015838:	00150019 	.word	0x00150019
 801583c:	00190015 	.word	0x00190015
 8015840:	00030006 	.word	0x00030006
 8015844:	000a000f 	.word	0x000a000f

08015848 <D64_GENERIC>:
 8015848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801584c:	6913      	ldr	r3, [r2, #16]
 801584e:	b089      	sub	sp, #36	@ 0x24
 8015850:	68d5      	ldr	r5, [r2, #12]
 8015852:	9302      	str	r3, [sp, #8]
 8015854:	6953      	ldr	r3, [r2, #20]
 8015856:	462e      	mov	r6, r5
 8015858:	9105      	str	r1, [sp, #20]
 801585a:	9303      	str	r3, [sp, #12]
 801585c:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801585e:	6993      	ldr	r3, [r2, #24]
 8015860:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8015862:	9307      	str	r3, [sp, #28]
 8015864:	69d4      	ldr	r4, [r2, #28]
 8015866:	6893      	ldr	r3, [r2, #8]
 8015868:	9504      	str	r5, [sp, #16]
 801586a:	2900      	cmp	r1, #0
 801586c:	f000 80e5 	beq.w	8015a3a <D64_GENERIC+0x1f2>
 8015870:	6a11      	ldr	r1, [r2, #32]
 8015872:	2500      	movs	r5, #0
 8015874:	46b3      	mov	fp, r6
 8015876:	9301      	str	r3, [sp, #4]
 8015878:	9106      	str	r1, [sp, #24]
 801587a:	4976      	ldr	r1, [pc, #472]	@ (8015a54 <D64_GENERIC+0x20c>)
 801587c:	e0c7      	b.n	8015a0e <D64_GENERIC+0x1c6>
 801587e:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8015882:	f1cc 0e00 	rsb	lr, ip, #0
 8015886:	f890 9000 	ldrb.w	r9, [r0]
 801588a:	eb00 0708 	add.w	r7, r0, r8
 801588e:	f810 6008 	ldrb.w	r6, [r0, r8]
 8015892:	eb07 0a4e 	add.w	sl, r7, lr, lsl #1
 8015896:	f817 000e 	ldrb.w	r0, [r7, lr]
 801589a:	f817 301e 	ldrb.w	r3, [r7, lr, lsl #1]
 801589e:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 80158a2:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 80158a6:	ea4f 4800 	mov.w	r8, r0, lsl #16
 80158aa:	f817 000e 	ldrb.w	r0, [r7, lr]
 80158ae:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 80158b2:	f817 801e 	ldrb.w	r8, [r7, lr, lsl #1]
 80158b6:	0400      	lsls	r0, r0, #16
 80158b8:	4477      	add	r7, lr
 80158ba:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 80158be:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80158c2:	f817 a01e 	ldrb.w	sl, [r7, lr, lsl #1]
 80158c6:	eb07 074e 	add.w	r7, r7, lr, lsl #1
 80158ca:	444e      	add	r6, r9
 80158cc:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 80158d0:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 80158d4:	44c2      	add	sl, r8
 80158d6:	b2f7      	uxtb	r7, r6
 80158d8:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80158dc:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80158e0:	0e36      	lsrs	r6, r6, #24
 80158e2:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80158e6:	fa5f fe8a 	uxtb.w	lr, sl
 80158ea:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 80158ee:	f3ca 2907 	ubfx	r9, sl, #8, #8
 80158f2:	443c      	add	r4, r7
 80158f4:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 80158f8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80158fc:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8015900:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8015904:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8015908:	4b53      	ldr	r3, [pc, #332]	@ (8015a58 <D64_GENERIC+0x210>)
 801590a:	eb07 2c98 	add.w	ip, r7, r8, lsr #10
 801590e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8015912:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8015916:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 801591a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801591e:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8015922:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8015926:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 801592a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801592e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8015932:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8015936:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 801593a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801593e:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8015942:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8015946:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 801594a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801594e:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8015952:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8015956:	ea47 4e0e 	orr.w	lr, r7, lr, lsl #16
 801595a:	f3c9 0709 	ubfx	r7, r9, #0, #10
 801595e:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8015962:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8015966:	fb28 b903 	smlad	r9, r8, r3, fp
 801596a:	4b3c      	ldr	r3, [pc, #240]	@ (8015a5c <D64_GENERIC+0x214>)
 801596c:	fb26 9903 	smlad	r9, r6, r3, r9
 8015970:	4b3b      	ldr	r3, [pc, #236]	@ (8015a60 <D64_GENERIC+0x218>)
 8015972:	fb2e 9703 	smlad	r7, lr, r3, r9
 8015976:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
 801597a:	fb2a 7909 	smlad	r9, sl, r9, r7
 801597e:	4b39      	ldr	r3, [pc, #228]	@ (8015a64 <D64_GENERIC+0x21c>)
 8015980:	9f01      	ldr	r7, [sp, #4]
 8015982:	fb28 7303 	smlad	r3, r8, r3, r7
 8015986:	4f37      	ldr	r7, [pc, #220]	@ (8015a64 <D64_GENERIC+0x21c>)
 8015988:	fb2a 3317 	smladx	r3, sl, r7, r3
 801598c:	4f36      	ldr	r7, [pc, #216]	@ (8015a68 <D64_GENERIC+0x220>)
 801598e:	fb26 3307 	smlad	r3, r6, r7, r3
 8015992:	fb2e 3b17 	smladx	fp, lr, r7, r3
 8015996:	f04f 0c01 	mov.w	ip, #1
 801599a:	fb28 f80c 	smuad	r8, r8, ip
 801599e:	4b33      	ldr	r3, [pc, #204]	@ (8015a6c <D64_GENERIC+0x224>)
 80159a0:	fb26 8603 	smlad	r6, r6, r3, r8
 80159a4:	4b32      	ldr	r3, [pc, #200]	@ (8015a70 <D64_GENERIC+0x228>)
 80159a6:	fb2e 6e03 	smlad	lr, lr, r3, r6
 80159aa:	4b32      	ldr	r3, [pc, #200]	@ (8015a74 <D64_GENERIC+0x22c>)
 80159ac:	fb2a e303 	smlad	r3, sl, r3, lr
 80159b0:	9301      	str	r3, [sp, #4]
 80159b2:	f5a9 3900 	sub.w	r9, r9, #131072	@ 0x20000
 80159b6:	9b06      	ldr	r3, [sp, #24]
 80159b8:	b19b      	cbz	r3, 80159e2 <D64_GENERIC+0x19a>
 80159ba:	9e02      	ldr	r6, [sp, #8]
 80159bc:	9f03      	ldr	r7, [sp, #12]
 80159be:	444e      	add	r6, r9
 80159c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80159c4:	1bf6      	subs	r6, r6, r7
 80159c6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 80159ca:	fba6 6703 	umull	r6, r7, r6, r3
 80159ce:	fb03 7709 	mla	r7, r3, r9, r7
 80159d2:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 80159d6:	f147 0700 	adc.w	r7, r7, #0
 80159da:	fa07 f30c 	lsl.w	r3, r7, ip
 80159de:	4699      	mov	r9, r3
 80159e0:	9302      	str	r3, [sp, #8]
 80159e2:	f8b2 e028 	ldrh.w	lr, [r2, #40]	@ 0x28
 80159e6:	ea4f 2989 	mov.w	r9, r9, lsl #10
 80159ea:	9b04      	ldr	r3, [sp, #16]
 80159ec:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 80159f0:	2700      	movs	r7, #0
 80159f2:	fb05 fe0e 	mul.w	lr, r5, lr
 80159f6:	3501      	adds	r5, #1
 80159f8:	fbc3 6709 	smlal	r6, r7, r3, r9
 80159fc:	9b05      	ldr	r3, [sp, #20]
 80159fe:	10be      	asrs	r6, r7, #2
 8015a00:	f306 060f 	ssat	r6, #16, r6
 8015a04:	f823 601e 	strh.w	r6, [r3, lr, lsl #1]
 8015a08:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8015a0a:	42ae      	cmp	r6, r5
 8015a0c:	dd13      	ble.n	8015a36 <D64_GENERIC+0x1ee>
 8015a0e:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	@ 0x2a
 8015a12:	f1bc 0f01 	cmp.w	ip, #1
 8015a16:	f47f af32 	bne.w	801587e <D64_GENERIC+0x36>
 8015a1a:	6b57      	ldr	r7, [r2, #52]	@ 0x34
 8015a1c:	f100 0e08 	add.w	lr, r0, #8
 8015a20:	06bb      	lsls	r3, r7, #26
 8015a22:	e890 0440 	ldmia.w	r0, {r6, sl}
 8015a26:	d504      	bpl.n	8015a32 <D64_GENERIC+0x1ea>
 8015a28:	ba76      	rev16	r6, r6
 8015a2a:	fa9a fa9a 	rev16.w	sl, sl
 8015a2e:	4670      	mov	r0, lr
 8015a30:	e751      	b.n	80158d6 <D64_GENERIC+0x8e>
 8015a32:	4670      	mov	r0, lr
 8015a34:	e74f      	b.n	80158d6 <D64_GENERIC+0x8e>
 8015a36:	465e      	mov	r6, fp
 8015a38:	9b01      	ldr	r3, [sp, #4]
 8015a3a:	6093      	str	r3, [r2, #8]
 8015a3c:	2000      	movs	r0, #0
 8015a3e:	9b02      	ldr	r3, [sp, #8]
 8015a40:	60d6      	str	r6, [r2, #12]
 8015a42:	6113      	str	r3, [r2, #16]
 8015a44:	9b03      	ldr	r3, [sp, #12]
 8015a46:	61d4      	str	r4, [r2, #28]
 8015a48:	6153      	str	r3, [r2, #20]
 8015a4a:	9b07      	ldr	r3, [sp, #28]
 8015a4c:	6193      	str	r3, [r2, #24]
 8015a4e:	b009      	add	sp, #36	@ 0x24
 8015a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a54:	24000000 	.word	0x24000000
 8015a58:	001c0015 	.word	0x001c0015
 8015a5c:	000f000a 	.word	0x000f000a
 8015a60:	00060003 	.word	0x00060003
 8015a64:	0024002a 	.word	0x0024002a
 8015a68:	002e0030 	.word	0x002e0030
 8015a6c:	00030006 	.word	0x00030006
 8015a70:	000a000f 	.word	0x000a000f
 8015a74:	0015001c 	.word	0x0015001c

08015a78 <D80_GENERIC>:
 8015a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a7c:	b08b      	sub	sp, #44	@ 0x2c
 8015a7e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8015a80:	9107      	str	r1, [sp, #28]
 8015a82:	6911      	ldr	r1, [r2, #16]
 8015a84:	9104      	str	r1, [sp, #16]
 8015a86:	6951      	ldr	r1, [r2, #20]
 8015a88:	9105      	str	r1, [sp, #20]
 8015a8a:	6991      	ldr	r1, [r2, #24]
 8015a8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8015a8e:	69d1      	ldr	r1, [r2, #28]
 8015a90:	9101      	str	r1, [sp, #4]
 8015a92:	6891      	ldr	r1, [r2, #8]
 8015a94:	9103      	str	r1, [sp, #12]
 8015a96:	68d1      	ldr	r1, [r2, #12]
 8015a98:	9102      	str	r1, [sp, #8]
 8015a9a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8015a9c:	9106      	str	r1, [sp, #24]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	f000 810d 	beq.w	8015cbe <D80_GENERIC+0x246>
 8015aa4:	6a13      	ldr	r3, [r2, #32]
 8015aa6:	f04f 0800 	mov.w	r8, #0
 8015aaa:	f8df e264 	ldr.w	lr, [pc, #612]	@ 8015d10 <D80_GENERIC+0x298>
 8015aae:	9308      	str	r3, [sp, #32]
 8015ab0:	9200      	str	r2, [sp, #0]
 8015ab2:	e0ee      	b.n	8015c92 <D80_GENERIC+0x21a>
 8015ab4:	b2db      	uxtb	r3, r3
 8015ab6:	f890 c000 	ldrb.w	ip, [r0]
 8015aba:	b219      	sxth	r1, r3
 8015abc:	425c      	negs	r4, r3
 8015abe:	f810 9003 	ldrb.w	r9, [r0, r3]
 8015ac2:	004e      	lsls	r6, r1, #1
 8015ac4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8015ac8:	4431      	add	r1, r6
 8015aca:	1843      	adds	r3, r0, r1
 8015acc:	f810 b001 	ldrb.w	fp, [r0, r1]
 8015ad0:	1919      	adds	r1, r3, r4
 8015ad2:	5d1b      	ldrb	r3, [r3, r4]
 8015ad4:	1948      	adds	r0, r1, r5
 8015ad6:	f811 a005 	ldrb.w	sl, [r1, r5]
 8015ada:	041b      	lsls	r3, r3, #16
 8015adc:	1907      	adds	r7, r0, r4
 8015ade:	5d01      	ldrb	r1, [r0, r4]
 8015ae0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8015ae4:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8015ae8:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8015aec:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8015af0:	0409      	lsls	r1, r1, #16
 8015af2:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8015af6:	eb0b 0905 	add.w	r9, fp, r5
 8015afa:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8015afe:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8015b02:	eb09 0b04 	add.w	fp, r9, r4
 8015b06:	f819 4004 	ldrb.w	r4, [r9, r4]
 8015b0a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8015b0e:	4463      	add	r3, ip
 8015b10:	eb0b 0006 	add.w	r0, fp, r6
 8015b14:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8015b18:	4439      	add	r1, r7
 8015b1a:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8015b1e:	b2df      	uxtb	r7, r3
 8015b20:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8015b24:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8015b28:	f85e 3027 	ldr.w	r3, [lr, r7, lsl #2]
 8015b2c:	fa5f fa81 	uxtb.w	sl, r1
 8015b30:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8015b34:	9c01      	ldr	r4, [sp, #4]
 8015b36:	f85e 9026 	ldr.w	r9, [lr, r6, lsl #2]
 8015b3a:	441c      	add	r4, r3
 8015b3c:	f85e 602c 	ldr.w	r6, [lr, ip, lsl #2]
 8015b40:	f85e c02a 	ldr.w	ip, [lr, sl, lsl #2]
 8015b44:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8015b48:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8015b4c:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8015b50:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8015b54:	b2ed      	uxtb	r5, r5
 8015b56:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8015b5a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8015b5e:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8015b62:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8015b66:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 8015b6a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8015b6e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8015b72:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8015b76:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 8015b7a:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8015b7e:	0e09      	lsrs	r1, r1, #24
 8015b80:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8015b84:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8015b88:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8015b8c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8015b90:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8015b94:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8015b98:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8015b9c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8015ba0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8015ba4:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8015ba8:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8015bac:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8015bb0:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8015bb4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8015bb8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8015bbc:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8015bc0:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8015bc4:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8015bc8:	9201      	str	r2, [sp, #4]
 8015bca:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8015bce:	4a44      	ldr	r2, [pc, #272]	@ (8015ce0 <D80_GENERIC+0x268>)
 8015bd0:	9f02      	ldr	r7, [sp, #8]
 8015bd2:	fb23 7a02 	smlad	sl, r3, r2, r7
 8015bd6:	4a43      	ldr	r2, [pc, #268]	@ (8015ce4 <D80_GENERIC+0x26c>)
 8015bd8:	fb26 aa02 	smlad	sl, r6, r2, sl
 8015bdc:	4a42      	ldr	r2, [pc, #264]	@ (8015ce8 <D80_GENERIC+0x270>)
 8015bde:	fb24 aa02 	smlad	sl, r4, r2, sl
 8015be2:	4a42      	ldr	r2, [pc, #264]	@ (8015cec <D80_GENERIC+0x274>)
 8015be4:	fb21 a702 	smlad	r7, r1, r2, sl
 8015be8:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8015bec:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8015bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8015cf0 <D80_GENERIC+0x278>)
 8015bf2:	9f03      	ldr	r7, [sp, #12]
 8015bf4:	fb23 7c02 	smlad	ip, r3, r2, r7
 8015bf8:	4a3e      	ldr	r2, [pc, #248]	@ (8015cf4 <D80_GENERIC+0x27c>)
 8015bfa:	fb26 cc02 	smlad	ip, r6, r2, ip
 8015bfe:	f04f 174b 	mov.w	r7, #4915275	@ 0x4b004b
 8015c02:	fb24 c707 	smlad	r7, r4, r7, ip
 8015c06:	4a3c      	ldr	r2, [pc, #240]	@ (8015cf8 <D80_GENERIC+0x280>)
 8015c08:	fb21 7702 	smlad	r7, r1, r2, r7
 8015c0c:	4a3b      	ldr	r2, [pc, #236]	@ (8015cfc <D80_GENERIC+0x284>)
 8015c0e:	fb25 7202 	smlad	r2, r5, r2, r7
 8015c12:	f04f 0901 	mov.w	r9, #1
 8015c16:	9202      	str	r2, [sp, #8]
 8015c18:	fb23 f909 	smuad	r9, r3, r9
 8015c1c:	4b38      	ldr	r3, [pc, #224]	@ (8015d00 <D80_GENERIC+0x288>)
 8015c1e:	fb26 9603 	smlad	r6, r6, r3, r9
 8015c22:	4f38      	ldr	r7, [pc, #224]	@ (8015d04 <D80_GENERIC+0x28c>)
 8015c24:	fb24 6407 	smlad	r4, r4, r7, r6
 8015c28:	4f37      	ldr	r7, [pc, #220]	@ (8015d08 <D80_GENERIC+0x290>)
 8015c2a:	fb21 4707 	smlad	r7, r1, r7, r4
 8015c2e:	4937      	ldr	r1, [pc, #220]	@ (8015d0c <D80_GENERIC+0x294>)
 8015c30:	fb25 7301 	smlad	r3, r5, r1, r7
 8015c34:	9303      	str	r3, [sp, #12]
 8015c36:	f5aa 3a7a 	sub.w	sl, sl, #256000	@ 0x3e800
 8015c3a:	9b08      	ldr	r3, [sp, #32]
 8015c3c:	b193      	cbz	r3, 8015c64 <D80_GENERIC+0x1ec>
 8015c3e:	9a04      	ldr	r2, [sp, #16]
 8015c40:	4452      	add	r2, sl
 8015c42:	4614      	mov	r4, r2
 8015c44:	9a05      	ldr	r2, [sp, #20]
 8015c46:	f8cd a014 	str.w	sl, [sp, #20]
 8015c4a:	1aa4      	subs	r4, r4, r2
 8015c4c:	17e7      	asrs	r7, r4, #31
 8015c4e:	fba4 4503 	umull	r4, r5, r4, r3
 8015c52:	fb03 5507 	mla	r5, r3, r7, r5
 8015c56:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8015c5a:	f145 0500 	adc.w	r5, r5, #0
 8015c5e:	006b      	lsls	r3, r5, #1
 8015c60:	469a      	mov	sl, r3
 8015c62:	9304      	str	r3, [sp, #16]
 8015c64:	9e00      	ldr	r6, [sp, #0]
 8015c66:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8015c6a:	9a06      	ldr	r2, [sp, #24]
 8015c6c:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8015c70:	8d33      	ldrh	r3, [r6, #40]	@ 0x28
 8015c72:	2500      	movs	r5, #0
 8015c74:	fb08 f303 	mul.w	r3, r8, r3
 8015c78:	fbc2 450a 	smlal	r4, r5, r2, sl
 8015c7c:	9a07      	ldr	r2, [sp, #28]
 8015c7e:	f108 0801 	add.w	r8, r8, #1
 8015c82:	10a9      	asrs	r1, r5, #2
 8015c84:	f301 010f 	ssat	r1, #16, r1
 8015c88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8015c8c:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 8015c8e:	4543      	cmp	r3, r8
 8015c90:	dd14      	ble.n	8015cbc <D80_GENERIC+0x244>
 8015c92:	9b00      	ldr	r3, [sp, #0]
 8015c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	f47f af0c 	bne.w	8015ab4 <D80_GENERIC+0x3c>
 8015c9c:	9b00      	ldr	r3, [sp, #0]
 8015c9e:	300a      	adds	r0, #10
 8015ca0:	f850 1c06 	ldr.w	r1, [r0, #-6]
 8015ca4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8015ca6:	f850 5c02 	ldr.w	r5, [r0, #-2]
 8015caa:	06b2      	lsls	r2, r6, #26
 8015cac:	f850 3c0a 	ldr.w	r3, [r0, #-10]
 8015cb0:	f57f af33 	bpl.w	8015b1a <D80_GENERIC+0xa2>
 8015cb4:	ba5b      	rev16	r3, r3
 8015cb6:	ba49      	rev16	r1, r1
 8015cb8:	ba6d      	rev16	r5, r5
 8015cba:	e72e      	b.n	8015b1a <D80_GENERIC+0xa2>
 8015cbc:	4632      	mov	r2, r6
 8015cbe:	9b03      	ldr	r3, [sp, #12]
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	6093      	str	r3, [r2, #8]
 8015cc4:	9b02      	ldr	r3, [sp, #8]
 8015cc6:	60d3      	str	r3, [r2, #12]
 8015cc8:	9b01      	ldr	r3, [sp, #4]
 8015cca:	61d3      	str	r3, [r2, #28]
 8015ccc:	9b04      	ldr	r3, [sp, #16]
 8015cce:	6113      	str	r3, [r2, #16]
 8015cd0:	9b05      	ldr	r3, [sp, #20]
 8015cd2:	6153      	str	r3, [r2, #20]
 8015cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cd6:	6193      	str	r3, [r2, #24]
 8015cd8:	b00b      	add	sp, #44	@ 0x2c
 8015cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cde:	bf00      	nop
 8015ce0:	002d0024 	.word	0x002d0024
 8015ce4:	001c0015 	.word	0x001c0015
 8015ce8:	000f000a 	.word	0x000f000a
 8015cec:	00060003 	.word	0x00060003
 8015cf0:	0037003f 	.word	0x0037003f
 8015cf4:	00450049 	.word	0x00450049
 8015cf8:	00490045 	.word	0x00490045
 8015cfc:	003f0037 	.word	0x003f0037
 8015d00:	00030006 	.word	0x00030006
 8015d04:	000a000f 	.word	0x000a000f
 8015d08:	0015001c 	.word	0x0015001c
 8015d0c:	0024002d 	.word	0x0024002d
 8015d10:	24000000 	.word	0x24000000

08015d14 <D128_GENERIC>:
 8015d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d18:	b08d      	sub	sp, #52	@ 0x34
 8015d1a:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8015d1c:	9201      	str	r2, [sp, #4]
 8015d1e:	9109      	str	r1, [sp, #36]	@ 0x24
 8015d20:	4611      	mov	r1, r2
 8015d22:	6912      	ldr	r2, [r2, #16]
 8015d24:	9206      	str	r2, [sp, #24]
 8015d26:	460a      	mov	r2, r1
 8015d28:	6949      	ldr	r1, [r1, #20]
 8015d2a:	4614      	mov	r4, r2
 8015d2c:	9107      	str	r1, [sp, #28]
 8015d2e:	4611      	mov	r1, r2
 8015d30:	6992      	ldr	r2, [r2, #24]
 8015d32:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8015d36:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015d38:	68e2      	ldr	r2, [r4, #12]
 8015d3a:	6889      	ldr	r1, [r1, #8]
 8015d3c:	9202      	str	r2, [sp, #8]
 8015d3e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015d40:	9103      	str	r1, [sp, #12]
 8015d42:	9208      	str	r2, [sp, #32]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	f000 8180 	beq.w	801604a <D128_GENERIC+0x336>
 8015d4a:	6a23      	ldr	r3, [r4, #32]
 8015d4c:	4681      	mov	r9, r0
 8015d4e:	49c8      	ldr	r1, [pc, #800]	@ (8016070 <D128_GENERIC+0x35c>)
 8015d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8015d52:	2300      	movs	r3, #0
 8015d54:	f8cd a010 	str.w	sl, [sp, #16]
 8015d58:	9305      	str	r3, [sp, #20]
 8015d5a:	e15d      	b.n	8016018 <D128_GENERIC+0x304>
 8015d5c:	b2d2      	uxtb	r2, r2
 8015d5e:	f899 b000 	ldrb.w	fp, [r9]
 8015d62:	b213      	sxth	r3, r2
 8015d64:	4255      	negs	r5, r2
 8015d66:	f819 0002 	ldrb.w	r0, [r9, r2]
 8015d6a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015d6e:	009f      	lsls	r7, r3, #2
 8015d70:	eb09 0402 	add.w	r4, r9, r2
 8015d74:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8015d78:	f819 8002 	ldrb.w	r8, [r9, r2]
 8015d7c:	443b      	add	r3, r7
 8015d7e:	1962      	adds	r2, r4, r5
 8015d80:	5d64      	ldrb	r4, [r4, r5]
 8015d82:	eb02 0e03 	add.w	lr, r2, r3
 8015d86:	0424      	lsls	r4, r4, #16
 8015d88:	5cd3      	ldrb	r3, [r2, r3]
 8015d8a:	eb0e 0c05 	add.w	ip, lr, r5
 8015d8e:	f81e 9015 	ldrb.w	r9, [lr, r5, lsl #1]
 8015d92:	f81e 2005 	ldrb.w	r2, [lr, r5]
 8015d96:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8015d9a:	eb0c 0e45 	add.w	lr, ip, r5, lsl #1
 8015d9e:	f81c 8015 	ldrb.w	r8, [ip, r5, lsl #1]
 8015da2:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8015da6:	eb0e 0c06 	add.w	ip, lr, r6
 8015daa:	f81e a006 	ldrb.w	sl, [lr, r6]
 8015dae:	0412      	lsls	r2, r2, #16
 8015db0:	445c      	add	r4, fp
 8015db2:	eb0c 0e05 	add.w	lr, ip, r5
 8015db6:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8015dba:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8015dbe:	eb0e 0045 	add.w	r0, lr, r5, lsl #1
 8015dc2:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8015dc6:	041b      	lsls	r3, r3, #16
 8015dc8:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8015dcc:	eb00 0b06 	add.w	fp, r0, r6
 8015dd0:	5d80      	ldrb	r0, [r0, r6]
 8015dd2:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8015dd6:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8015dda:	eb0b 0a05 	add.w	sl, fp, r5
 8015dde:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8015de2:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8015de6:	0436      	lsls	r6, r6, #16
 8015de8:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8015dec:	f81a 5015 	ldrb.w	r5, [sl, r5, lsl #1]
 8015df0:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8015df4:	4442      	add	r2, r8
 8015df6:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8015dfa:	44b9      	add	r9, r7
 8015dfc:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8015e00:	4473      	add	r3, lr
 8015e02:	442e      	add	r6, r5
 8015e04:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015e08:	b2e7      	uxtb	r7, r4
 8015e0a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8015e0e:	0e24      	lsrs	r4, r4, #24
 8015e10:	f851 b020 	ldr.w	fp, [r1, r0, lsl #2]
 8015e14:	fa5f fe82 	uxtb.w	lr, r2
 8015e18:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8015e1c:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 8015e20:	9804      	ldr	r0, [sp, #16]
 8015e22:	f851 c025 	ldr.w	ip, [r1, r5, lsl #2]
 8015e26:	4438      	add	r0, r7
 8015e28:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8015e2c:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8015e30:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8015e34:	4680      	mov	r8, r0
 8015e36:	eb0b 2090 	add.w	r0, fp, r0, lsr #10
 8015e3a:	f851 402a 	ldr.w	r4, [r1, sl, lsl #2]
 8015e3e:	0e12      	lsrs	r2, r2, #24
 8015e40:	eb0c 2c90 	add.w	ip, ip, r0, lsr #10
 8015e44:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8015e48:	fa5f fa83 	uxtb.w	sl, r3
 8015e4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8015e50:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8015e54:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8015e58:	f851 b02a 	ldr.w	fp, [r1, sl, lsl #2]
 8015e5c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8015e60:	eb0e 2e95 	add.w	lr, lr, r5, lsr #10
 8015e64:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8015e68:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8015e6c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8015e70:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8015e74:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8015e78:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8015e7c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8015e80:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8015e84:	f3c4 0809 	ubfx	r8, r4, #0, #10
 8015e88:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8015e8c:	f851 402c 	ldr.w	r4, [r1, ip, lsl #2]
 8015e90:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8015e94:	0e1b      	lsrs	r3, r3, #24
 8015e96:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8015e9a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8015e9e:	f851 a02c 	ldr.w	sl, [r1, ip, lsl #2]
 8015ea2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8015ea6:	eb04 2c9b 	add.w	ip, r4, fp, lsr #10
 8015eaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015eae:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 8015eb2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8015eb6:	eb0a 2a9c 	add.w	sl, sl, ip, lsr #10
 8015eba:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8015ebe:	fa5f f886 	uxtb.w	r8, r6
 8015ec2:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8015ec6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8015eca:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8015ece:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8015ed2:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8015ed6:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 8015eda:	eb08 2893 	add.w	r8, r8, r3, lsr #10
 8015ede:	f3c6 4407 	ubfx	r4, r6, #16, #8
 8015ee2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8015ee6:	0e36      	lsrs	r6, r6, #24
 8015ee8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8015eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015ef0:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8015ef4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8015ef8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8015efc:	ea43 4a0a 	orr.w	sl, r3, sl, lsl #16
 8015f00:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8015f04:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8015f08:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8015f0c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8015f10:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8015f14:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8015f18:	0ab2      	lsrs	r2, r6, #10
 8015f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015f1e:	9204      	str	r2, [sp, #16]
 8015f20:	9c02      	ldr	r4, [sp, #8]
 8015f22:	4a54      	ldr	r2, [pc, #336]	@ (8016074 <D128_GENERIC+0x360>)
 8015f24:	fb20 4602 	smlad	r6, r0, r2, r4
 8015f28:	4a53      	ldr	r2, [pc, #332]	@ (8016078 <D128_GENERIC+0x364>)
 8015f2a:	fb25 6602 	smlad	r6, r5, r2, r6
 8015f2e:	4a53      	ldr	r2, [pc, #332]	@ (801607c <D128_GENERIC+0x368>)
 8015f30:	fb2e 6602 	smlad	r6, lr, r2, r6
 8015f34:	4a52      	ldr	r2, [pc, #328]	@ (8016080 <D128_GENERIC+0x36c>)
 8015f36:	fb27 6602 	smlad	r6, r7, r2, r6
 8015f3a:	4a52      	ldr	r2, [pc, #328]	@ (8016084 <D128_GENERIC+0x370>)
 8015f3c:	fb2b 6602 	smlad	r6, fp, r2, r6
 8015f40:	4a51      	ldr	r2, [pc, #324]	@ (8016088 <D128_GENERIC+0x374>)
 8015f42:	fb2a 6602 	smlad	r6, sl, r2, r6
 8015f46:	4a51      	ldr	r2, [pc, #324]	@ (801608c <D128_GENERIC+0x378>)
 8015f48:	fb28 6202 	smlad	r2, r8, r2, r6
 8015f4c:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8015f50:	fb23 2606 	smlad	r6, r3, r6, r2
 8015f54:	4a4e      	ldr	r2, [pc, #312]	@ (8016090 <D128_GENERIC+0x37c>)
 8015f56:	9c03      	ldr	r4, [sp, #12]
 8015f58:	fb20 4202 	smlad	r2, r0, r2, r4
 8015f5c:	4c4d      	ldr	r4, [pc, #308]	@ (8016094 <D128_GENERIC+0x380>)
 8015f5e:	fb25 2404 	smlad	r4, r5, r4, r2
 8015f62:	4a4d      	ldr	r2, [pc, #308]	@ (8016098 <D128_GENERIC+0x384>)
 8015f64:	fb2e 4202 	smlad	r2, lr, r2, r4
 8015f68:	4c4c      	ldr	r4, [pc, #304]	@ (801609c <D128_GENERIC+0x388>)
 8015f6a:	fb27 2204 	smlad	r2, r7, r4, r2
 8015f6e:	4c4c      	ldr	r4, [pc, #304]	@ (80160a0 <D128_GENERIC+0x38c>)
 8015f70:	fb2b 2404 	smlad	r4, fp, r4, r2
 8015f74:	4a4b      	ldr	r2, [pc, #300]	@ (80160a4 <D128_GENERIC+0x390>)
 8015f76:	fb2a 4402 	smlad	r4, sl, r2, r4
 8015f7a:	4a4b      	ldr	r2, [pc, #300]	@ (80160a8 <D128_GENERIC+0x394>)
 8015f7c:	fb28 4202 	smlad	r2, r8, r2, r4
 8015f80:	4c4a      	ldr	r4, [pc, #296]	@ (80160ac <D128_GENERIC+0x398>)
 8015f82:	fb23 2204 	smlad	r2, r3, r4, r2
 8015f86:	f04f 0c01 	mov.w	ip, #1
 8015f8a:	9202      	str	r2, [sp, #8]
 8015f8c:	fb20 f00c 	smuad	r0, r0, ip
 8015f90:	4a47      	ldr	r2, [pc, #284]	@ (80160b0 <D128_GENERIC+0x39c>)
 8015f92:	fb25 0502 	smlad	r5, r5, r2, r0
 8015f96:	4a47      	ldr	r2, [pc, #284]	@ (80160b4 <D128_GENERIC+0x3a0>)
 8015f98:	fb2e 5e02 	smlad	lr, lr, r2, r5
 8015f9c:	4a46      	ldr	r2, [pc, #280]	@ (80160b8 <D128_GENERIC+0x3a4>)
 8015f9e:	fb27 e202 	smlad	r2, r7, r2, lr
 8015fa2:	4c46      	ldr	r4, [pc, #280]	@ (80160bc <D128_GENERIC+0x3a8>)
 8015fa4:	fb2b 2204 	smlad	r2, fp, r4, r2
 8015fa8:	4c45      	ldr	r4, [pc, #276]	@ (80160c0 <D128_GENERIC+0x3ac>)
 8015faa:	fb2a 2204 	smlad	r2, sl, r4, r2
 8015fae:	4c45      	ldr	r4, [pc, #276]	@ (80160c4 <D128_GENERIC+0x3b0>)
 8015fb0:	fb28 2204 	smlad	r2, r8, r4, r2
 8015fb4:	4c44      	ldr	r4, [pc, #272]	@ (80160c8 <D128_GENERIC+0x3b4>)
 8015fb6:	fb23 2304 	smlad	r3, r3, r4, r2
 8015fba:	9303      	str	r3, [sp, #12]
 8015fbc:	f5a6 1680 	sub.w	r6, r6, #1048576	@ 0x100000
 8015fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015fc2:	b193      	cbz	r3, 8015fea <D128_GENERIC+0x2d6>
 8015fc4:	9a06      	ldr	r2, [sp, #24]
 8015fc6:	9807      	ldr	r0, [sp, #28]
 8015fc8:	4432      	add	r2, r6
 8015fca:	9607      	str	r6, [sp, #28]
 8015fcc:	461e      	mov	r6, r3
 8015fce:	1a12      	subs	r2, r2, r0
 8015fd0:	17d5      	asrs	r5, r2, #31
 8015fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8015fd6:	fb06 3305 	mla	r3, r6, r5, r3
 8015fda:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8015fde:	f143 0300 	adc.w	r3, r3, #0
 8015fe2:	fa03 f30c 	lsl.w	r3, r3, ip
 8015fe6:	461e      	mov	r6, r3
 8015fe8:	9306      	str	r3, [sp, #24]
 8015fea:	9c01      	ldr	r4, [sp, #4]
 8015fec:	01f6      	lsls	r6, r6, #7
 8015fee:	9d05      	ldr	r5, [sp, #20]
 8015ff0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015ff4:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	9f08      	ldr	r7, [sp, #32]
 8015ffa:	fb05 f000 	mul.w	r0, r5, r0
 8015ffe:	3501      	adds	r5, #1
 8016000:	fbc7 2306 	smlal	r2, r3, r7, r6
 8016004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016006:	109b      	asrs	r3, r3, #2
 8016008:	9505      	str	r5, [sp, #20]
 801600a:	f303 030f 	ssat	r3, #16, r3
 801600e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8016012:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8016014:	42ab      	cmp	r3, r5
 8016016:	dd16      	ble.n	8016046 <D128_GENERIC+0x332>
 8016018:	9b01      	ldr	r3, [sp, #4]
 801601a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801601c:	2a01      	cmp	r2, #1
 801601e:	f47f ae9d 	bne.w	8015d5c <D128_GENERIC+0x48>
 8016022:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8016024:	f109 0204 	add.w	r2, r9, #4
 8016028:	f109 0510 	add.w	r5, r9, #16
 801602c:	f8d9 4000 	ldr.w	r4, [r9]
 8016030:	0680      	lsls	r0, r0, #26
 8016032:	ca4c      	ldmia	r2, {r2, r3, r6}
 8016034:	d505      	bpl.n	8016042 <D128_GENERIC+0x32e>
 8016036:	ba64      	rev16	r4, r4
 8016038:	ba52      	rev16	r2, r2
 801603a:	ba5b      	rev16	r3, r3
 801603c:	ba76      	rev16	r6, r6
 801603e:	46a9      	mov	r9, r5
 8016040:	e6e0      	b.n	8015e04 <D128_GENERIC+0xf0>
 8016042:	46a9      	mov	r9, r5
 8016044:	e6de      	b.n	8015e04 <D128_GENERIC+0xf0>
 8016046:	f8dd a010 	ldr.w	sl, [sp, #16]
 801604a:	9a01      	ldr	r2, [sp, #4]
 801604c:	2000      	movs	r0, #0
 801604e:	9903      	ldr	r1, [sp, #12]
 8016050:	4613      	mov	r3, r2
 8016052:	f8c2 a01c 	str.w	sl, [r2, #28]
 8016056:	6091      	str	r1, [r2, #8]
 8016058:	9902      	ldr	r1, [sp, #8]
 801605a:	60d1      	str	r1, [r2, #12]
 801605c:	9907      	ldr	r1, [sp, #28]
 801605e:	9a06      	ldr	r2, [sp, #24]
 8016060:	6159      	str	r1, [r3, #20]
 8016062:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016064:	611a      	str	r2, [r3, #16]
 8016066:	6199      	str	r1, [r3, #24]
 8016068:	b00d      	add	sp, #52	@ 0x34
 801606a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801606e:	bf00      	nop
 8016070:	24000000 	.word	0x24000000
 8016074:	00780069 	.word	0x00780069
 8016078:	005b004e 	.word	0x005b004e
 801607c:	00420037 	.word	0x00420037
 8016080:	002d0024 	.word	0x002d0024
 8016084:	001c0015 	.word	0x001c0015
 8016088:	000f000a 	.word	0x000f000a
 801608c:	00060003 	.word	0x00060003
 8016090:	00880096 	.word	0x00880096
 8016094:	00a200ac 	.word	0x00a200ac
 8016098:	00b400ba 	.word	0x00b400ba
 801609c:	00be00c0 	.word	0x00be00c0
 80160a0:	00c000be 	.word	0x00c000be
 80160a4:	00ba00b4 	.word	0x00ba00b4
 80160a8:	00ac00a2 	.word	0x00ac00a2
 80160ac:	00960088 	.word	0x00960088
 80160b0:	00030006 	.word	0x00030006
 80160b4:	000a000f 	.word	0x000a000f
 80160b8:	0015001c 	.word	0x0015001c
 80160bc:	0024002d 	.word	0x0024002d
 80160c0:	00370042 	.word	0x00370042
 80160c4:	004e005b 	.word	0x004e005b
 80160c8:	00690078 	.word	0x00690078

080160cc <D16_1CH_HTONS_VOL_HP>:
 80160cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160d0:	4692      	mov	sl, r2
 80160d2:	b087      	sub	sp, #28
 80160d4:	4681      	mov	r9, r0
 80160d6:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80160d8:	f8da 3018 	ldr.w	r3, [sl, #24]
 80160dc:	f8da 000c 	ldr.w	r0, [sl, #12]
 80160e0:	9303      	str	r3, [sp, #12]
 80160e2:	f8da 6010 	ldr.w	r6, [sl, #16]
 80160e6:	f8da 5014 	ldr.w	r5, [sl, #20]
 80160ea:	f8da 301c 	ldr.w	r3, [sl, #28]
 80160ee:	f8da 4008 	ldr.w	r4, [sl, #8]
 80160f2:	9004      	str	r0, [sp, #16]
 80160f4:	f8da b030 	ldr.w	fp, [sl, #48]	@ 0x30
 80160f8:	f8da e020 	ldr.w	lr, [sl, #32]
 80160fc:	2a00      	cmp	r2, #0
 80160fe:	d05a      	beq.n	80161b6 <D16_1CH_HTONS_VOL_HP+0xea>
 8016100:	f1a1 0802 	sub.w	r8, r1, #2
 8016104:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 8016108:	f8cd b008 	str.w	fp, [sp, #8]
 801610c:	46cb      	mov	fp, r9
 801610e:	f8cd a014 	str.w	sl, [sp, #20]
 8016112:	46c2      	mov	sl, r8
 8016114:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 80161c4 <D16_1CH_HTONS_VOL_HP+0xf8>
 8016118:	9201      	str	r2, [sp, #4]
 801611a:	f85b 2b02 	ldr.w	r2, [fp], #2
 801611e:	ba52      	rev16	r2, r2
 8016120:	b2d0      	uxtb	r0, r2
 8016122:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8016126:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 801612a:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 801612e:	4413      	add	r3, r2
 8016130:	eb00 2093 	add.w	r0, r0, r3, lsr #10
 8016134:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8016138:	f3c0 0109 	ubfx	r1, r0, #0, #10
 801613c:	0a83      	lsrs	r3, r0, #10
 801613e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8016142:	491e      	ldr	r1, [pc, #120]	@ (80161bc <D16_1CH_HTONS_VOL_HP+0xf0>)
 8016144:	fb22 4101 	smlad	r1, r2, r1, r4
 8016148:	481d      	ldr	r0, [pc, #116]	@ (80161c0 <D16_1CH_HTONS_VOL_HP+0xf4>)
 801614a:	fb22 f400 	smuad	r4, r2, r0
 801614e:	f5a1 6200 	sub.w	r2, r1, #2048	@ 0x800
 8016152:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8016156:	f04f 0900 	mov.w	r9, #0
 801615a:	1990      	adds	r0, r2, r6
 801615c:	1b40      	subs	r0, r0, r5
 801615e:	4615      	mov	r5, r2
 8016160:	17c7      	asrs	r7, r0, #31
 8016162:	fba0 010e 	umull	r0, r1, r0, lr
 8016166:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 801616a:	fb0e 1107 	mla	r1, lr, r7, r1
 801616e:	f141 0100 	adc.w	r1, r1, #0
 8016172:	0448      	lsls	r0, r1, #17
 8016174:	004e      	lsls	r6, r1, #1
 8016176:	9902      	ldr	r1, [sp, #8]
 8016178:	fbc0 8901 	smlal	r8, r9, r0, r1
 801617c:	ea4f 01a9 	mov.w	r1, r9, asr #2
 8016180:	f301 010f 	ssat	r1, #16, r1
 8016184:	f82a 1f02 	strh.w	r1, [sl, #2]!
 8016188:	9901      	ldr	r1, [sp, #4]
 801618a:	458b      	cmp	fp, r1
 801618c:	d1c5      	bne.n	801611a <D16_1CH_HTONS_VOL_HP+0x4e>
 801618e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8016192:	9904      	ldr	r1, [sp, #16]
 8016194:	2000      	movs	r0, #0
 8016196:	f8ca 301c 	str.w	r3, [sl, #28]
 801619a:	9b03      	ldr	r3, [sp, #12]
 801619c:	f8ca 4008 	str.w	r4, [sl, #8]
 80161a0:	f8ca 100c 	str.w	r1, [sl, #12]
 80161a4:	f8ca 6010 	str.w	r6, [sl, #16]
 80161a8:	f8ca 2014 	str.w	r2, [sl, #20]
 80161ac:	f8ca 3018 	str.w	r3, [sl, #24]
 80161b0:	b007      	add	sp, #28
 80161b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161b6:	462a      	mov	r2, r5
 80161b8:	4601      	mov	r1, r0
 80161ba:	e7eb      	b.n	8016194 <D16_1CH_HTONS_VOL_HP+0xc8>
 80161bc:	00030001 	.word	0x00030001
 80161c0:	00010003 	.word	0x00010003
 80161c4:	24000000 	.word	0x24000000

080161c8 <D24_1CH_HTONS_VOL_HP>:
 80161c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161cc:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80161ce:	b087      	sub	sp, #28
 80161d0:	4616      	mov	r6, r2
 80161d2:	6914      	ldr	r4, [r2, #16]
 80161d4:	9302      	str	r3, [sp, #8]
 80161d6:	9205      	str	r2, [sp, #20]
 80161d8:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80161dc:	6b37      	ldr	r7, [r6, #48]	@ 0x30
 80161de:	6992      	ldr	r2, [r2, #24]
 80161e0:	9d02      	ldr	r5, [sp, #8]
 80161e2:	9204      	str	r2, [sp, #16]
 80161e4:	68b3      	ldr	r3, [r6, #8]
 80161e6:	69f2      	ldr	r2, [r6, #28]
 80161e8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80161ec:	9703      	str	r7, [sp, #12]
 80161ee:	f8d6 a020 	ldr.w	sl, [r6, #32]
 80161f2:	2d00      	cmp	r5, #0
 80161f4:	d076      	beq.n	80162e4 <D24_1CH_HTONS_VOL_HP+0x11c>
 80161f6:	f04f 0e00 	mov.w	lr, #0
 80161fa:	f1a1 0b02 	sub.w	fp, r1, #2
 80161fe:	f8df c0f4 	ldr.w	ip, [pc, #244]	@ 80162f4 <D24_1CH_HTONS_VOL_HP+0x12c>
 8016202:	f8cd 8004 	str.w	r8, [sp, #4]
 8016206:	e052      	b.n	80162ae <D24_1CH_HTONS_VOL_HP+0xe6>
 8016208:	7801      	ldrb	r1, [r0, #0]
 801620a:	3002      	adds	r0, #2
 801620c:	7847      	ldrb	r7, [r0, #1]
 801620e:	0209      	lsls	r1, r1, #8
 8016210:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8016214:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 8016218:	442f      	add	r7, r5
 801621a:	b2fd      	uxtb	r5, r7
 801621c:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8016220:	0c3f      	lsrs	r7, r7, #16
 8016222:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8016226:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
 801622a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 801622e:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 8016232:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8016236:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801623a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 801623e:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8016242:	9e01      	ldr	r6, [sp, #4]
 8016244:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8016248:	4928      	ldr	r1, [pc, #160]	@ (80162ec <D24_1CH_HTONS_VOL_HP+0x124>)
 801624a:	fb25 6701 	smlad	r7, r5, r1, r6
 801624e:	4928      	ldr	r1, [pc, #160]	@ (80162f0 <D24_1CH_HTONS_VOL_HP+0x128>)
 8016250:	fb25 3801 	smlad	r8, r5, r1, r3
 8016254:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8016258:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801625c:	eb08 0346 	add.w	r3, r8, r6, lsl #1
 8016260:	9301      	str	r3, [sp, #4]
 8016262:	2301      	movs	r3, #1
 8016264:	fb25 f503 	smuad	r5, r5, r3
 8016268:	f5a7 51d8 	sub.w	r1, r7, #6912	@ 0x1b00
 801626c:	449e      	add	lr, r3
 801626e:	1973      	adds	r3, r6, r5
 8016270:	f04f 0800 	mov.w	r8, #0
 8016274:	440c      	add	r4, r1
 8016276:	eba4 0409 	sub.w	r4, r4, r9
 801627a:	4689      	mov	r9, r1
 801627c:	17e7      	asrs	r7, r4, #31
 801627e:	fba4 450a 	umull	r4, r5, r4, sl
 8016282:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8016286:	fb0a 5507 	mla	r5, sl, r7, r5
 801628a:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 801628e:	f145 0500 	adc.w	r5, r5, #0
 8016292:	03ee      	lsls	r6, r5, #15
 8016294:	006c      	lsls	r4, r5, #1
 8016296:	9d03      	ldr	r5, [sp, #12]
 8016298:	fbc5 7806 	smlal	r7, r8, r5, r6
 801629c:	4647      	mov	r7, r8
 801629e:	10bd      	asrs	r5, r7, #2
 80162a0:	f305 050f 	ssat	r5, #16, r5
 80162a4:	f82b 5f02 	strh.w	r5, [fp, #2]!
 80162a8:	9d02      	ldr	r5, [sp, #8]
 80162aa:	45ae      	cmp	lr, r5
 80162ac:	d00b      	beq.n	80162c6 <D24_1CH_HTONS_VOL_HP+0xfe>
 80162ae:	f01e 0f01 	tst.w	lr, #1
 80162b2:	d0a9      	beq.n	8016208 <D24_1CH_HTONS_VOL_HP+0x40>
 80162b4:	78c1      	ldrb	r1, [r0, #3]
 80162b6:	7887      	ldrb	r7, [r0, #2]
 80162b8:	0209      	lsls	r1, r1, #8
 80162ba:	f810 5b04 	ldrb.w	r5, [r0], #4
 80162be:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 80162c2:	442f      	add	r7, r5
 80162c4:	e7a9      	b.n	801621a <D24_1CH_HTONS_VOL_HP+0x52>
 80162c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80162ca:	9d05      	ldr	r5, [sp, #20]
 80162cc:	2000      	movs	r0, #0
 80162ce:	6169      	str	r1, [r5, #20]
 80162d0:	9904      	ldr	r1, [sp, #16]
 80162d2:	60ab      	str	r3, [r5, #8]
 80162d4:	f8c5 800c 	str.w	r8, [r5, #12]
 80162d8:	61ea      	str	r2, [r5, #28]
 80162da:	612c      	str	r4, [r5, #16]
 80162dc:	61a9      	str	r1, [r5, #24]
 80162de:	b007      	add	sp, #28
 80162e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162e4:	4649      	mov	r1, r9
 80162e6:	4635      	mov	r5, r6
 80162e8:	e7f0      	b.n	80162cc <D24_1CH_HTONS_VOL_HP+0x104>
 80162ea:	bf00      	nop
 80162ec:	00030001 	.word	0x00030001
 80162f0:	00060007 	.word	0x00060007
 80162f4:	24000000 	.word	0x24000000

080162f8 <D32_1CH_HTONS_VOL_HP>:
 80162f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162fc:	4693      	mov	fp, r2
 80162fe:	b087      	sub	sp, #28
 8016300:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8016302:	f8db 3018 	ldr.w	r3, [fp, #24]
 8016306:	f8db 5030 	ldr.w	r5, [fp, #48]	@ 0x30
 801630a:	9304      	str	r3, [sp, #16]
 801630c:	f8db 4010 	ldr.w	r4, [fp, #16]
 8016310:	f8db c014 	ldr.w	ip, [fp, #20]
 8016314:	f8db 601c 	ldr.w	r6, [fp, #28]
 8016318:	f8db 3008 	ldr.w	r3, [fp, #8]
 801631c:	f8db e00c 	ldr.w	lr, [fp, #12]
 8016320:	9502      	str	r5, [sp, #8]
 8016322:	f8db a020 	ldr.w	sl, [fp, #32]
 8016326:	2a00      	cmp	r2, #0
 8016328:	d07d      	beq.n	8016426 <D32_1CH_HTONS_VOL_HP+0x12e>
 801632a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801632e:	9101      	str	r1, [sp, #4]
 8016330:	f8cd b014 	str.w	fp, [sp, #20]
 8016334:	4621      	mov	r1, r4
 8016336:	4f3d      	ldr	r7, [pc, #244]	@ (801642c <D32_1CH_HTONS_VOL_HP+0x134>)
 8016338:	4693      	mov	fp, r2
 801633a:	f8cd a00c 	str.w	sl, [sp, #12]
 801633e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016342:	fa92 f992 	rev16.w	r9, r2
 8016346:	fa5f f889 	uxtb.w	r8, r9
 801634a:	f3c9 2207 	ubfx	r2, r9, #8, #8
 801634e:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8016352:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8016356:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 801635a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801635e:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 8016362:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8016366:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 801636a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 801636e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8016372:	4c2f      	ldr	r4, [pc, #188]	@ (8016430 <D32_1CH_HTONS_VOL_HP+0x138>)
 8016374:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8016378:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801637c:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8016380:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8016384:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 8016388:	f3c6 0809 	ubfx	r8, r6, #0, #10
 801638c:	ea48 4505 	orr.w	r5, r8, r5, lsl #16
 8016390:	fb22 ee04 	smlad	lr, r2, r4, lr
 8016394:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8016398:	fb25 e904 	smlad	r9, r5, r4, lr
 801639c:	4c25      	ldr	r4, [pc, #148]	@ (8016434 <D32_1CH_HTONS_VOL_HP+0x13c>)
 801639e:	fb22 3e04 	smlad	lr, r2, r4, r3
 80163a2:	4b25      	ldr	r3, [pc, #148]	@ (8016438 <D32_1CH_HTONS_VOL_HP+0x140>)
 80163a4:	fb25 ee03 	smlad	lr, r5, r3, lr
 80163a8:	2301      	movs	r3, #1
 80163aa:	fb22 f203 	smuad	r2, r2, r3
 80163ae:	4b23      	ldr	r3, [pc, #140]	@ (801643c <D32_1CH_HTONS_VOL_HP+0x144>)
 80163b0:	fb25 2303 	smlad	r3, r5, r3, r2
 80163b4:	f5a9 4280 	sub.w	r2, r9, #16384	@ 0x4000
 80163b8:	f04f 0a00 	mov.w	sl, #0
 80163bc:	4411      	add	r1, r2
 80163be:	eba1 040c 	sub.w	r4, r1, ip
 80163c2:	9903      	ldr	r1, [sp, #12]
 80163c4:	4694      	mov	ip, r2
 80163c6:	ea4f 79e4 	mov.w	r9, r4, asr #31
 80163ca:	fba4 4501 	umull	r4, r5, r4, r1
 80163ce:	fb01 5509 	mla	r5, r1, r9, r5
 80163d2:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 80163d6:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 80163da:	9c02      	ldr	r4, [sp, #8]
 80163dc:	f145 0500 	adc.w	r5, r5, #0
 80163e0:	ea4f 3885 	mov.w	r8, r5, lsl #14
 80163e4:	0069      	lsls	r1, r5, #1
 80163e6:	fbc8 9a04 	smlal	r9, sl, r8, r4
 80163ea:	9c01      	ldr	r4, [sp, #4]
 80163ec:	ea4f 05aa 	mov.w	r5, sl, asr #2
 80163f0:	f305 050f 	ssat	r5, #16, r5
 80163f4:	f824 5b02 	strh.w	r5, [r4], #2
 80163f8:	455c      	cmp	r4, fp
 80163fa:	9401      	str	r4, [sp, #4]
 80163fc:	d19f      	bne.n	801633e <D32_1CH_HTONS_VOL_HP+0x46>
 80163fe:	460c      	mov	r4, r1
 8016400:	f8dd b014 	ldr.w	fp, [sp, #20]
 8016404:	f8cb 3008 	str.w	r3, [fp, #8]
 8016408:	2000      	movs	r0, #0
 801640a:	9b04      	ldr	r3, [sp, #16]
 801640c:	f8cb e00c 	str.w	lr, [fp, #12]
 8016410:	f8cb 601c 	str.w	r6, [fp, #28]
 8016414:	f8cb 4010 	str.w	r4, [fp, #16]
 8016418:	f8cb 2014 	str.w	r2, [fp, #20]
 801641c:	f8cb 3018 	str.w	r3, [fp, #24]
 8016420:	b007      	add	sp, #28
 8016422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016426:	4662      	mov	r2, ip
 8016428:	e7ec      	b.n	8016404 <D32_1CH_HTONS_VOL_HP+0x10c>
 801642a:	bf00      	nop
 801642c:	24000000 	.word	0x24000000
 8016430:	00060003 	.word	0x00060003
 8016434:	000a000c 	.word	0x000a000c
 8016438:	000c000a 	.word	0x000c000a
 801643c:	00030006 	.word	0x00030006

08016440 <D48_1CH_HTONS_VOL_HP>:
 8016440:	4613      	mov	r3, r2
 8016442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016446:	461c      	mov	r4, r3
 8016448:	b087      	sub	sp, #28
 801644a:	4680      	mov	r8, r0
 801644c:	691e      	ldr	r6, [r3, #16]
 801644e:	4610      	mov	r0, r2
 8016450:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8016454:	699b      	ldr	r3, [r3, #24]
 8016456:	9205      	str	r2, [sp, #20]
 8016458:	9304      	str	r3, [sp, #16]
 801645a:	69c5      	ldr	r5, [r0, #28]
 801645c:	6883      	ldr	r3, [r0, #8]
 801645e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8016462:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8016464:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016466:	f8d4 b020 	ldr.w	fp, [r4, #32]
 801646a:	9002      	str	r0, [sp, #8]
 801646c:	2a00      	cmp	r2, #0
 801646e:	f000 8097 	beq.w	80165a0 <D48_1CH_HTONS_VOL_HP+0x160>
 8016472:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8016476:	468c      	mov	ip, r1
 8016478:	4c4a      	ldr	r4, [pc, #296]	@ (80165a4 <D48_1CH_HTONS_VOL_HP+0x164>)
 801647a:	4619      	mov	r1, r3
 801647c:	4640      	mov	r0, r8
 801647e:	9203      	str	r2, [sp, #12]
 8016480:	f8cd 9004 	str.w	r9, [sp, #4]
 8016484:	6803      	ldr	r3, [r0, #0]
 8016486:	3006      	adds	r0, #6
 8016488:	f850 2c02 	ldr.w	r2, [r0, #-2]
 801648c:	ba5b      	rev16	r3, r3
 801648e:	fa92 fa92 	rev16.w	sl, r2
 8016492:	fa5f f883 	uxtb.w	r8, r3
 8016496:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801649a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801649e:	0e1b      	lsrs	r3, r3, #24
 80164a0:	f854 9028 	ldr.w	r9, [r4, r8, lsl #2]
 80164a4:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 80164a8:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80164ac:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 80164b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80164b4:	fa5f f28a 	uxtb.w	r2, sl
 80164b8:	eb07 2799 	add.w	r7, r7, r9, lsr #10
 80164bc:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80164c0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80164c4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80164c8:	eb05 2897 	add.w	r8, r5, r7, lsr #10
 80164cc:	f854 502a 	ldr.w	r5, [r4, sl, lsl #2]
 80164d0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80164d4:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 80164d8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80164dc:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 80164e0:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 80164e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80164e8:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 80164ec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80164f0:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 80164f4:	f3c5 0309 	ubfx	r3, r5, #0, #10
 80164f8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80164fc:	4b2a      	ldr	r3, [pc, #168]	@ (80165a8 <D48_1CH_HTONS_VOL_HP+0x168>)
 80164fe:	fb27 ea03 	smlad	sl, r7, r3, lr
 8016502:	4b2a      	ldr	r3, [pc, #168]	@ (80165ac <D48_1CH_HTONS_VOL_HP+0x16c>)
 8016504:	fb28 aa03 	smlad	sl, r8, r3, sl
 8016508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801650c:	fb22 aa03 	smlad	sl, r2, r3, sl
 8016510:	4b27      	ldr	r3, [pc, #156]	@ (80165b0 <D48_1CH_HTONS_VOL_HP+0x170>)
 8016512:	fb27 1e03 	smlad	lr, r7, r3, r1
 8016516:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 801651a:	fb28 ee03 	smlad	lr, r8, r3, lr
 801651e:	4b25      	ldr	r3, [pc, #148]	@ (80165b4 <D48_1CH_HTONS_VOL_HP+0x174>)
 8016520:	fb22 ee03 	smlad	lr, r2, r3, lr
 8016524:	f04f 0901 	mov.w	r9, #1
 8016528:	fb27 f709 	smuad	r7, r7, r9
 801652c:	4b22      	ldr	r3, [pc, #136]	@ (80165b8 <D48_1CH_HTONS_VOL_HP+0x178>)
 801652e:	fb28 7803 	smlad	r8, r8, r3, r7
 8016532:	4b22      	ldr	r3, [pc, #136]	@ (80165bc <D48_1CH_HTONS_VOL_HP+0x17c>)
 8016534:	fb22 8103 	smlad	r1, r2, r3, r8
 8016538:	f5aa 4a58 	sub.w	sl, sl, #55296	@ 0xd800
 801653c:	9b01      	ldr	r3, [sp, #4]
 801653e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8016542:	eb0a 0206 	add.w	r2, sl, r6
 8016546:	f8cd a004 	str.w	sl, [sp, #4]
 801654a:	1ad2      	subs	r2, r2, r3
 801654c:	17d7      	asrs	r7, r2, #31
 801654e:	fba2 230b 	umull	r2, r3, r2, fp
 8016552:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8016556:	fb0b 3307 	mla	r3, fp, r7, r3
 801655a:	f143 0300 	adc.w	r3, r3, #0
 801655e:	031a      	lsls	r2, r3, #12
 8016560:	fa03 f609 	lsl.w	r6, r3, r9
 8016564:	9b02      	ldr	r3, [sp, #8]
 8016566:	f04f 0900 	mov.w	r9, #0
 801656a:	fbc2 8903 	smlal	r8, r9, r2, r3
 801656e:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8016572:	f303 030f 	ssat	r3, #16, r3
 8016576:	f82c 3b02 	strh.w	r3, [ip], #2
 801657a:	9b03      	ldr	r3, [sp, #12]
 801657c:	459c      	cmp	ip, r3
 801657e:	d181      	bne.n	8016484 <D48_1CH_HTONS_VOL_HP+0x44>
 8016580:	460b      	mov	r3, r1
 8016582:	9905      	ldr	r1, [sp, #20]
 8016584:	2000      	movs	r0, #0
 8016586:	460a      	mov	r2, r1
 8016588:	608b      	str	r3, [r1, #8]
 801658a:	f8c1 e00c 	str.w	lr, [r1, #12]
 801658e:	61cd      	str	r5, [r1, #28]
 8016590:	610e      	str	r6, [r1, #16]
 8016592:	f8c1 a014 	str.w	sl, [r1, #20]
 8016596:	9904      	ldr	r1, [sp, #16]
 8016598:	6191      	str	r1, [r2, #24]
 801659a:	b007      	add	sp, #28
 801659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165a0:	46ca      	mov	sl, r9
 80165a2:	e7ee      	b.n	8016582 <D48_1CH_HTONS_VOL_HP+0x142>
 80165a4:	24000000 	.word	0x24000000
 80165a8:	000f000a 	.word	0x000f000a
 80165ac:	00060003 	.word	0x00060003
 80165b0:	00150019 	.word	0x00150019
 80165b4:	00190015 	.word	0x00190015
 80165b8:	00030006 	.word	0x00030006
 80165bc:	000a000f 	.word	0x000a000f

080165c0 <D64_1CH_HTONS_VOL_HP>:
 80165c0:	4613      	mov	r3, r2
 80165c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165c6:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80165ca:	461d      	mov	r5, r3
 80165cc:	b087      	sub	sp, #28
 80165ce:	699b      	ldr	r3, [r3, #24]
 80165d0:	462e      	mov	r6, r5
 80165d2:	69ef      	ldr	r7, [r5, #28]
 80165d4:	9304      	str	r3, [sp, #16]
 80165d6:	4614      	mov	r4, r2
 80165d8:	68ab      	ldr	r3, [r5, #8]
 80165da:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80165de:	6b2d      	ldr	r5, [r5, #48]	@ 0x30
 80165e0:	9205      	str	r2, [sp, #20]
 80165e2:	9501      	str	r5, [sp, #4]
 80165e4:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80165e6:	6a35      	ldr	r5, [r6, #32]
 80165e8:	6924      	ldr	r4, [r4, #16]
 80165ea:	9502      	str	r5, [sp, #8]
 80165ec:	2a00      	cmp	r2, #0
 80165ee:	f000 80ae 	beq.w	801674e <D64_1CH_HTONS_VOL_HP+0x18e>
 80165f2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80165f6:	4e57      	ldr	r6, [pc, #348]	@ (8016754 <D64_1CH_HTONS_VOL_HP+0x194>)
 80165f8:	461d      	mov	r5, r3
 80165fa:	9203      	str	r2, [sp, #12]
 80165fc:	f850 2b08 	ldr.w	r2, [r0], #8
 8016600:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016604:	fa92 f892 	rev16.w	r8, r2
 8016608:	fa93 fb93 	rev16.w	fp, r3
 801660c:	fa5f f288 	uxtb.w	r2, r8
 8016610:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8016614:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8016618:	ea4f 6818 	mov.w	r8, r8, lsr #24
 801661c:	f856 a022 	ldr.w	sl, [r6, r2, lsl #2]
 8016620:	fa5f f28b 	uxtb.w	r2, fp
 8016624:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 8016628:	4457      	add	r7, sl
 801662a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801662e:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8016632:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8016636:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801663a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801663e:	eb03 2a99 	add.w	sl, r3, r9, lsr #10
 8016642:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8016646:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801664a:	eb08 289a 	add.w	r8, r8, sl, lsr #10
 801664e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8016652:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 8016656:	f3cb 4707 	ubfx	r7, fp, #16, #8
 801665a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 801665e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8016662:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8016666:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 801666a:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 801666e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8016672:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8016676:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801667a:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 801667e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016682:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
 8016686:	eb0b 2b97 	add.w	fp, fp, r7, lsr #10
 801668a:	f3c7 0a09 	ubfx	sl, r7, #0, #10
 801668e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016692:	f3cb 0209 	ubfx	r2, fp, #0, #10
 8016696:	ea4f 279b 	mov.w	r7, fp, lsr #10
 801669a:	ea42 4b0a 	orr.w	fp, r2, sl, lsl #16
 801669e:	4a2e      	ldr	r2, [pc, #184]	@ (8016758 <D64_1CH_HTONS_VOL_HP+0x198>)
 80166a0:	fb29 ee02 	smlad	lr, r9, r2, lr
 80166a4:	4a2d      	ldr	r2, [pc, #180]	@ (801675c <D64_1CH_HTONS_VOL_HP+0x19c>)
 80166a6:	fb28 ee02 	smlad	lr, r8, r2, lr
 80166aa:	4a2d      	ldr	r2, [pc, #180]	@ (8016760 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80166ac:	fb23 ee02 	smlad	lr, r3, r2, lr
 80166b0:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 80166b4:	fb2b ea0a 	smlad	sl, fp, sl, lr
 80166b8:	4a2a      	ldr	r2, [pc, #168]	@ (8016764 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80166ba:	fb29 5e02 	smlad	lr, r9, r2, r5
 80166be:	fb2b ee12 	smladx	lr, fp, r2, lr
 80166c2:	4a29      	ldr	r2, [pc, #164]	@ (8016768 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80166c4:	fb28 ee02 	smlad	lr, r8, r2, lr
 80166c8:	fb23 ee12 	smladx	lr, r3, r2, lr
 80166cc:	2501      	movs	r5, #1
 80166ce:	fb29 f905 	smuad	r9, r9, r5
 80166d2:	4a26      	ldr	r2, [pc, #152]	@ (801676c <D64_1CH_HTONS_VOL_HP+0x1ac>)
 80166d4:	fb28 9802 	smlad	r8, r8, r2, r9
 80166d8:	4a25      	ldr	r2, [pc, #148]	@ (8016770 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 80166da:	fb23 8302 	smlad	r3, r3, r2, r8
 80166de:	4a25      	ldr	r2, [pc, #148]	@ (8016774 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 80166e0:	fb2b 3502 	smlad	r5, fp, r2, r3
 80166e4:	f5aa 3a00 	sub.w	sl, sl, #131072	@ 0x20000
 80166e8:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80166ec:	eb0a 0204 	add.w	r2, sl, r4
 80166f0:	9c02      	ldr	r4, [sp, #8]
 80166f2:	eba2 020c 	sub.w	r2, r2, ip
 80166f6:	46d4      	mov	ip, sl
 80166f8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80166fc:	fba2 2304 	umull	r2, r3, r2, r4
 8016700:	fb04 3309 	mla	r3, r4, r9, r3
 8016704:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8016708:	f04f 0900 	mov.w	r9, #0
 801670c:	f143 0300 	adc.w	r3, r3, #0
 8016710:	02da      	lsls	r2, r3, #11
 8016712:	005c      	lsls	r4, r3, #1
 8016714:	9b01      	ldr	r3, [sp, #4]
 8016716:	fbc3 8902 	smlal	r8, r9, r3, r2
 801671a:	ea4f 03a9 	mov.w	r3, r9, asr #2
 801671e:	f303 030f 	ssat	r3, #16, r3
 8016722:	f821 3b02 	strh.w	r3, [r1], #2
 8016726:	9b03      	ldr	r3, [sp, #12]
 8016728:	4299      	cmp	r1, r3
 801672a:	f47f af67 	bne.w	80165fc <D64_1CH_HTONS_VOL_HP+0x3c>
 801672e:	462b      	mov	r3, r5
 8016730:	9905      	ldr	r1, [sp, #20]
 8016732:	2000      	movs	r0, #0
 8016734:	460a      	mov	r2, r1
 8016736:	608b      	str	r3, [r1, #8]
 8016738:	f8c1 e00c 	str.w	lr, [r1, #12]
 801673c:	61cf      	str	r7, [r1, #28]
 801673e:	610c      	str	r4, [r1, #16]
 8016740:	f8c1 a014 	str.w	sl, [r1, #20]
 8016744:	9904      	ldr	r1, [sp, #16]
 8016746:	6191      	str	r1, [r2, #24]
 8016748:	b007      	add	sp, #28
 801674a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801674e:	46e2      	mov	sl, ip
 8016750:	e7ee      	b.n	8016730 <D64_1CH_HTONS_VOL_HP+0x170>
 8016752:	bf00      	nop
 8016754:	24000000 	.word	0x24000000
 8016758:	001c0015 	.word	0x001c0015
 801675c:	000f000a 	.word	0x000f000a
 8016760:	00060003 	.word	0x00060003
 8016764:	0024002a 	.word	0x0024002a
 8016768:	002e0030 	.word	0x002e0030
 801676c:	00030006 	.word	0x00030006
 8016770:	000a000f 	.word	0x000a000f
 8016774:	0015001c 	.word	0x0015001c

08016778 <D80_1CH_HTONS_VOL_HP>:
 8016778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801677c:	4614      	mov	r4, r2
 801677e:	b089      	sub	sp, #36	@ 0x24
 8016780:	4613      	mov	r3, r2
 8016782:	6924      	ldr	r4, [r4, #16]
 8016784:	461d      	mov	r5, r3
 8016786:	9207      	str	r2, [sp, #28]
 8016788:	9401      	str	r4, [sp, #4]
 801678a:	461c      	mov	r4, r3
 801678c:	695b      	ldr	r3, [r3, #20]
 801678e:	68a7      	ldr	r7, [r4, #8]
 8016790:	9302      	str	r3, [sp, #8]
 8016792:	69a3      	ldr	r3, [r4, #24]
 8016794:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8016798:	9306      	str	r3, [sp, #24]
 801679a:	69e3      	ldr	r3, [r4, #28]
 801679c:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 801679e:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80167a0:	9403      	str	r4, [sp, #12]
 80167a2:	6a2c      	ldr	r4, [r5, #32]
 80167a4:	9404      	str	r4, [sp, #16]
 80167a6:	2a00      	cmp	r2, #0
 80167a8:	f000 80ca 	beq.w	8016940 <D80_1CH_HTONS_VOL_HP+0x1c8>
 80167ac:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80167b0:	4e64      	ldr	r6, [pc, #400]	@ (8016944 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 80167b2:	468c      	mov	ip, r1
 80167b4:	4682      	mov	sl, r0
 80167b6:	9205      	str	r2, [sp, #20]
 80167b8:	f8da 2008 	ldr.w	r2, [sl, #8]
 80167bc:	e89a 0011 	ldmia.w	sl, {r0, r4}
 80167c0:	f10a 0a0a 	add.w	sl, sl, #10
 80167c4:	ba40      	rev16	r0, r0
 80167c6:	ba64      	rev16	r4, r4
 80167c8:	fa92 f992 	rev16.w	r9, r2
 80167cc:	b2c5      	uxtb	r5, r0
 80167ce:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80167d2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80167d6:	0e00      	lsrs	r0, r0, #24
 80167d8:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 80167dc:	b2e5      	uxtb	r5, r4
 80167de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80167e2:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 80167e6:	4443      	add	r3, r8
 80167e8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80167ec:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80167f0:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 80167f4:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 80167f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80167fc:	eb02 2891 	add.w	r8, r2, r1, lsr #10
 8016800:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8016804:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8016808:	eb00 2098 	add.w	r0, r0, r8, lsr #10
 801680c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8016810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8016814:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8016818:	eb05 2590 	add.w	r5, r5, r0, lsr #10
 801681c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8016820:	0e23      	lsrs	r3, r4, #24
 8016822:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 8016826:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 801682a:	f3c9 2b07 	ubfx	fp, r9, #8, #8
 801682e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8016832:	fa5f f989 	uxtb.w	r9, r9
 8016836:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 801683a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 801683e:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 8016842:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8016846:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 801684a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801684e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8016852:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8016856:	eb09 2993 	add.w	r9, r9, r3, lsr #10
 801685a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801685e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8016862:	eb0b 2b99 	add.w	fp, fp, r9, lsr #10
 8016866:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801686a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 801686e:	f3cb 0209 	ubfx	r2, fp, #0, #10
 8016872:	ea4f 239b 	mov.w	r3, fp, lsr #10
 8016876:	ea42 4909 	orr.w	r9, r2, r9, lsl #16
 801687a:	4a33      	ldr	r2, [pc, #204]	@ (8016948 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 801687c:	fb21 ee02 	smlad	lr, r1, r2, lr
 8016880:	4a32      	ldr	r2, [pc, #200]	@ (801694c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8016882:	fb20 ee02 	smlad	lr, r0, r2, lr
 8016886:	4a32      	ldr	r2, [pc, #200]	@ (8016950 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8016888:	fb25 ee02 	smlad	lr, r5, r2, lr
 801688c:	4a31      	ldr	r2, [pc, #196]	@ (8016954 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 801688e:	fb24 ee02 	smlad	lr, r4, r2, lr
 8016892:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8016896:	fb29 eb02 	smlad	fp, r9, r2, lr
 801689a:	4a2f      	ldr	r2, [pc, #188]	@ (8016958 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 801689c:	fb21 7702 	smlad	r7, r1, r2, r7
 80168a0:	4a2e      	ldr	r2, [pc, #184]	@ (801695c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80168a2:	fb20 7702 	smlad	r7, r0, r2, r7
 80168a6:	f04f 1e4b 	mov.w	lr, #4915275	@ 0x4b004b
 80168aa:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80168ae:	4a2c      	ldr	r2, [pc, #176]	@ (8016960 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80168b0:	fb24 ee02 	smlad	lr, r4, r2, lr
 80168b4:	4a2b      	ldr	r2, [pc, #172]	@ (8016964 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80168b6:	fb29 ee02 	smlad	lr, r9, r2, lr
 80168ba:	f04f 0801 	mov.w	r8, #1
 80168be:	fb21 f808 	smuad	r8, r1, r8
 80168c2:	4a29      	ldr	r2, [pc, #164]	@ (8016968 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80168c4:	fb20 8002 	smlad	r0, r0, r2, r8
 80168c8:	4a28      	ldr	r2, [pc, #160]	@ (801696c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80168ca:	fb25 0002 	smlad	r0, r5, r2, r0
 80168ce:	4a28      	ldr	r2, [pc, #160]	@ (8016970 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80168d0:	fb24 0402 	smlad	r4, r4, r2, r0
 80168d4:	4f27      	ldr	r7, [pc, #156]	@ (8016974 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80168d6:	fb29 4707 	smlad	r7, r9, r7, r4
 80168da:	f5ab 327a 	sub.w	r2, fp, #256000	@ 0x3e800
 80168de:	9901      	ldr	r1, [sp, #4]
 80168e0:	9c04      	ldr	r4, [sp, #16]
 80168e2:	2500      	movs	r5, #0
 80168e4:	4411      	add	r1, r2
 80168e6:	4608      	mov	r0, r1
 80168e8:	9902      	ldr	r1, [sp, #8]
 80168ea:	9202      	str	r2, [sp, #8]
 80168ec:	1a40      	subs	r0, r0, r1
 80168ee:	ea4f 79e0 	mov.w	r9, r0, asr #31
 80168f2:	fba0 0104 	umull	r0, r1, r0, r4
 80168f6:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 80168fa:	fb04 1109 	mla	r1, r4, r9, r1
 80168fe:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8016902:	f141 0100 	adc.w	r1, r1, #0
 8016906:	0288      	lsls	r0, r1, #10
 8016908:	0049      	lsls	r1, r1, #1
 801690a:	9101      	str	r1, [sp, #4]
 801690c:	9903      	ldr	r1, [sp, #12]
 801690e:	fbc1 4500 	smlal	r4, r5, r1, r0
 8016912:	10a9      	asrs	r1, r5, #2
 8016914:	f301 010f 	ssat	r1, #16, r1
 8016918:	f82c 1b02 	strh.w	r1, [ip], #2
 801691c:	9905      	ldr	r1, [sp, #20]
 801691e:	458c      	cmp	ip, r1
 8016920:	f47f af4a 	bne.w	80167b8 <D80_1CH_HTONS_VOL_HP+0x40>
 8016924:	9c07      	ldr	r4, [sp, #28]
 8016926:	2000      	movs	r0, #0
 8016928:	9901      	ldr	r1, [sp, #4]
 801692a:	6162      	str	r2, [r4, #20]
 801692c:	9a06      	ldr	r2, [sp, #24]
 801692e:	60a7      	str	r7, [r4, #8]
 8016930:	f8c4 e00c 	str.w	lr, [r4, #12]
 8016934:	61e3      	str	r3, [r4, #28]
 8016936:	6121      	str	r1, [r4, #16]
 8016938:	61a2      	str	r2, [r4, #24]
 801693a:	b009      	add	sp, #36	@ 0x24
 801693c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016940:	9a02      	ldr	r2, [sp, #8]
 8016942:	e7ef      	b.n	8016924 <D80_1CH_HTONS_VOL_HP+0x1ac>
 8016944:	24000000 	.word	0x24000000
 8016948:	002d0024 	.word	0x002d0024
 801694c:	001c0015 	.word	0x001c0015
 8016950:	000f000a 	.word	0x000f000a
 8016954:	00060003 	.word	0x00060003
 8016958:	0037003f 	.word	0x0037003f
 801695c:	00450049 	.word	0x00450049
 8016960:	00490045 	.word	0x00490045
 8016964:	003f0037 	.word	0x003f0037
 8016968:	00030006 	.word	0x00030006
 801696c:	000a000f 	.word	0x000a000f
 8016970:	0015001c 	.word	0x0015001c
 8016974:	0024002d 	.word	0x0024002d

08016978 <D128_1CH_HTONS_VOL_HP>:
 8016978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801697c:	b08d      	sub	sp, #52	@ 0x34
 801697e:	4614      	mov	r4, r2
 8016980:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8016982:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016984:	6912      	ldr	r2, [r2, #16]
 8016986:	9202      	str	r2, [sp, #8]
 8016988:	4622      	mov	r2, r4
 801698a:	6964      	ldr	r4, [r4, #20]
 801698c:	4615      	mov	r5, r2
 801698e:	9405      	str	r4, [sp, #20]
 8016990:	4614      	mov	r4, r2
 8016992:	6992      	ldr	r2, [r2, #24]
 8016994:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8016998:	920a      	str	r2, [sp, #40]	@ 0x28
 801699a:	68ea      	ldr	r2, [r5, #12]
 801699c:	68a4      	ldr	r4, [r4, #8]
 801699e:	9203      	str	r2, [sp, #12]
 80169a0:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80169a2:	9404      	str	r4, [sp, #16]
 80169a4:	9207      	str	r2, [sp, #28]
 80169a6:	6a2a      	ldr	r2, [r5, #32]
 80169a8:	9208      	str	r2, [sp, #32]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	f000 8129 	beq.w	8016c02 <D128_1CH_HTONS_VOL_HP+0x28a>
 80169b0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80169b4:	f100 0b10 	add.w	fp, r0, #16
 80169b8:	f8df 92a0 	ldr.w	r9, [pc, #672]	@ 8016c5c <D128_1CH_HTONS_VOL_HP+0x2e4>
 80169bc:	9106      	str	r1, [sp, #24]
 80169be:	9309      	str	r3, [sp, #36]	@ 0x24
 80169c0:	f1ab 0010 	sub.w	r0, fp, #16
 80169c4:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 80169c8:	c80d      	ldmia	r0, {r0, r2, r3}
 80169ca:	ba40      	rev16	r0, r0
 80169cc:	ba52      	rev16	r2, r2
 80169ce:	ba5b      	rev16	r3, r3
 80169d0:	fa91 fc91 	rev16.w	ip, r1
 80169d4:	b2c5      	uxtb	r5, r0
 80169d6:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80169da:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80169de:	0e00      	lsrs	r0, r0, #24
 80169e0:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 80169e4:	b2d5      	uxtb	r5, r2
 80169e6:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 80169ea:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80169ee:	44b6      	add	lr, r6
 80169f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80169f4:	f859 6020 	ldr.w	r6, [r9, r0, lsl #2]
 80169f8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80169fc:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8016a00:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8016a04:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8016a08:	0e12      	lsrs	r2, r2, #24
 8016a0a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8016a0e:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8016a12:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8016a16:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8016a1a:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8016a1e:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8016a22:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8016a26:	b2da      	uxtb	r2, r3
 8016a28:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8016a2c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8016a30:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8016a34:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8016a38:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8016a3c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8016a40:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 8016a44:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016a48:	eb00 2e95 	add.w	lr, r0, r5, lsr #10
 8016a4c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8016a50:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8016a54:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8016a58:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8016a5c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8016a60:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8016a64:	0e1b      	lsrs	r3, r3, #24
 8016a66:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8016a6a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8016a6e:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8016a72:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8016a76:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8016a7a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8016a7e:	fa5f f38c 	uxtb.w	r3, ip
 8016a82:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8016a86:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8016a8a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016a8e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8016a92:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8016a96:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8016a9a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8016a9e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8016aa2:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8016aa6:	f859 202e 	ldr.w	r2, [r9, lr, lsl #2]
 8016aaa:	f3cc 4307 	ubfx	r3, ip, #16, #8
 8016aae:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 8016ab2:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8016ab6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8016aba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016abe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8016ac2:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8016ac6:	eb03 2c92 	add.w	ip, r3, r2, lsr #10
 8016aca:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8016ace:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016ad2:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8016ad6:	9b03      	ldr	r3, [sp, #12]
 8016ad8:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8016adc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8016ae0:	9201      	str	r2, [sp, #4]
 8016ae2:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8016ae6:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8016aea:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8016aee:	4a46      	ldr	r2, [pc, #280]	@ (8016c08 <D128_1CH_HTONS_VOL_HP+0x290>)
 8016af0:	fb27 3802 	smlad	r8, r7, r2, r3
 8016af4:	4b45      	ldr	r3, [pc, #276]	@ (8016c0c <D128_1CH_HTONS_VOL_HP+0x294>)
 8016af6:	fb26 8803 	smlad	r8, r6, r3, r8
 8016afa:	4b45      	ldr	r3, [pc, #276]	@ (8016c10 <D128_1CH_HTONS_VOL_HP+0x298>)
 8016afc:	fb25 8803 	smlad	r8, r5, r3, r8
 8016b00:	4b44      	ldr	r3, [pc, #272]	@ (8016c14 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8016b02:	fb24 8803 	smlad	r8, r4, r3, r8
 8016b06:	4b44      	ldr	r3, [pc, #272]	@ (8016c18 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8016b08:	fb20 8803 	smlad	r8, r0, r3, r8
 8016b0c:	4b43      	ldr	r3, [pc, #268]	@ (8016c1c <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8016b0e:	fb21 8803 	smlad	r8, r1, r3, r8
 8016b12:	4b43      	ldr	r3, [pc, #268]	@ (8016c20 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8016b14:	9a01      	ldr	r2, [sp, #4]
 8016b16:	fb22 8203 	smlad	r2, r2, r3, r8
 8016b1a:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
 8016b1e:	fb2c 2808 	smlad	r8, ip, r8, r2
 8016b22:	4b40      	ldr	r3, [pc, #256]	@ (8016c24 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8016b24:	9a04      	ldr	r2, [sp, #16]
 8016b26:	fb27 2a03 	smlad	sl, r7, r3, r2
 8016b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8016c28 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8016b2c:	fb26 aa03 	smlad	sl, r6, r3, sl
 8016b30:	4a3e      	ldr	r2, [pc, #248]	@ (8016c2c <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8016b32:	fb25 aa02 	smlad	sl, r5, r2, sl
 8016b36:	4a3e      	ldr	r2, [pc, #248]	@ (8016c30 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8016b38:	fb24 aa02 	smlad	sl, r4, r2, sl
 8016b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8016c34 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8016b3e:	fb20 aa02 	smlad	sl, r0, r2, sl
 8016b42:	4a3d      	ldr	r2, [pc, #244]	@ (8016c38 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8016b44:	fb21 aa02 	smlad	sl, r1, r2, sl
 8016b48:	4a3c      	ldr	r2, [pc, #240]	@ (8016c3c <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8016b4a:	9b01      	ldr	r3, [sp, #4]
 8016b4c:	fb23 a202 	smlad	r2, r3, r2, sl
 8016b50:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 8016c60 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8016b54:	fb2c 230a 	smlad	r3, ip, sl, r2
 8016b58:	2201      	movs	r2, #1
 8016b5a:	9303      	str	r3, [sp, #12]
 8016b5c:	fb27 f702 	smuad	r7, r7, r2
 8016b60:	4a37      	ldr	r2, [pc, #220]	@ (8016c40 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8016b62:	fb26 7702 	smlad	r7, r6, r2, r7
 8016b66:	4a37      	ldr	r2, [pc, #220]	@ (8016c44 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8016b68:	fb25 7702 	smlad	r7, r5, r2, r7
 8016b6c:	4a36      	ldr	r2, [pc, #216]	@ (8016c48 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8016b6e:	fb24 7702 	smlad	r7, r4, r2, r7
 8016b72:	4a36      	ldr	r2, [pc, #216]	@ (8016c4c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8016b74:	fb20 7702 	smlad	r7, r0, r2, r7
 8016b78:	4a35      	ldr	r2, [pc, #212]	@ (8016c50 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8016b7a:	fb21 7702 	smlad	r7, r1, r2, r7
 8016b7e:	4a35      	ldr	r2, [pc, #212]	@ (8016c54 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8016b80:	9b01      	ldr	r3, [sp, #4]
 8016b82:	fb23 7202 	smlad	r2, r3, r2, r7
 8016b86:	4b34      	ldr	r3, [pc, #208]	@ (8016c58 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8016b88:	fb2c 2303 	smlad	r3, ip, r3, r2
 8016b8c:	f5a8 1880 	sub.w	r8, r8, #1048576	@ 0x100000
 8016b90:	9304      	str	r3, [sp, #16]
 8016b92:	9b02      	ldr	r3, [sp, #8]
 8016b94:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8016b98:	9e08      	ldr	r6, [sp, #32]
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	4443      	add	r3, r8
 8016b9e:	f10b 0b10 	add.w	fp, fp, #16
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	9b05      	ldr	r3, [sp, #20]
 8016ba6:	f8cd 8014 	str.w	r8, [sp, #20]
 8016baa:	1ad2      	subs	r2, r2, r3
 8016bac:	17d5      	asrs	r5, r2, #31
 8016bae:	fba2 2306 	umull	r2, r3, r2, r6
 8016bb2:	1812      	adds	r2, r2, r0
 8016bb4:	fb06 3305 	mla	r3, r6, r5, r3
 8016bb8:	414b      	adcs	r3, r1
 8016bba:	021a      	lsls	r2, r3, #8
 8016bbc:	005b      	lsls	r3, r3, #1
 8016bbe:	9302      	str	r3, [sp, #8]
 8016bc0:	9b07      	ldr	r3, [sp, #28]
 8016bc2:	fbc3 0102 	smlal	r0, r1, r3, r2
 8016bc6:	9a06      	ldr	r2, [sp, #24]
 8016bc8:	108b      	asrs	r3, r1, #2
 8016bca:	f303 030f 	ssat	r3, #16, r3
 8016bce:	f822 3b02 	strh.w	r3, [r2], #2
 8016bd2:	4613      	mov	r3, r2
 8016bd4:	9206      	str	r2, [sp, #24]
 8016bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016bd8:	4293      	cmp	r3, r2
 8016bda:	f47f aef1 	bne.w	80169c0 <D128_1CH_HTONS_VOL_HP+0x48>
 8016bde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016be0:	2000      	movs	r0, #0
 8016be2:	9904      	ldr	r1, [sp, #16]
 8016be4:	4613      	mov	r3, r2
 8016be6:	f8c2 e01c 	str.w	lr, [r2, #28]
 8016bea:	6091      	str	r1, [r2, #8]
 8016bec:	9903      	ldr	r1, [sp, #12]
 8016bee:	60d1      	str	r1, [r2, #12]
 8016bf0:	9a02      	ldr	r2, [sp, #8]
 8016bf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016bf4:	611a      	str	r2, [r3, #16]
 8016bf6:	f8c3 8014 	str.w	r8, [r3, #20]
 8016bfa:	6199      	str	r1, [r3, #24]
 8016bfc:	b00d      	add	sp, #52	@ 0x34
 8016bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c02:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016c06:	e7ea      	b.n	8016bde <D128_1CH_HTONS_VOL_HP+0x266>
 8016c08:	00780069 	.word	0x00780069
 8016c0c:	005b004e 	.word	0x005b004e
 8016c10:	00420037 	.word	0x00420037
 8016c14:	002d0024 	.word	0x002d0024
 8016c18:	001c0015 	.word	0x001c0015
 8016c1c:	000f000a 	.word	0x000f000a
 8016c20:	00060003 	.word	0x00060003
 8016c24:	00880096 	.word	0x00880096
 8016c28:	00a200ac 	.word	0x00a200ac
 8016c2c:	00b400ba 	.word	0x00b400ba
 8016c30:	00be00c0 	.word	0x00be00c0
 8016c34:	00c000be 	.word	0x00c000be
 8016c38:	00ba00b4 	.word	0x00ba00b4
 8016c3c:	00ac00a2 	.word	0x00ac00a2
 8016c40:	00030006 	.word	0x00030006
 8016c44:	000a000f 	.word	0x000a000f
 8016c48:	0015001c 	.word	0x0015001c
 8016c4c:	0024002d 	.word	0x0024002d
 8016c50:	00370042 	.word	0x00370042
 8016c54:	004e005b 	.word	0x004e005b
 8016c58:	00690078 	.word	0x00690078
 8016c5c:	24000000 	.word	0x24000000
 8016c60:	00960088 	.word	0x00960088

08016c64 <PDM_Filter_Init>:
 8016c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c66:	2240      	movs	r2, #64	@ 0x40
 8016c68:	4604      	mov	r4, r0
 8016c6a:	2100      	movs	r1, #0
 8016c6c:	300c      	adds	r0, #12
 8016c6e:	f000 f9dd 	bl	801702c <memset>
 8016c72:	4939      	ldr	r1, [pc, #228]	@ (8016d58 <PDM_Filter_Init+0xf4>)
 8016c74:	4839      	ldr	r0, [pc, #228]	@ (8016d5c <PDM_Filter_Init+0xf8>)
 8016c76:	f000 f977 	bl	8016f68 <CRC_Lock>
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	2801      	cmp	r0, #1
 8016c7e:	8820      	ldrh	r0, [r4, #0]
 8016c80:	4a35      	ldr	r2, [pc, #212]	@ (8016d58 <PDM_Filter_Init+0xf4>)
 8016c82:	8965      	ldrh	r5, [r4, #10]
 8016c84:	bf18      	it	ne
 8016c86:	461a      	movne	r2, r3
 8016c88:	8921      	ldrh	r1, [r4, #8]
 8016c8a:	2801      	cmp	r0, #1
 8016c8c:	86a5      	strh	r5, [r4, #52]	@ 0x34
 8016c8e:	6462      	str	r2, [r4, #68]	@ 0x44
 8016c90:	86e1      	strh	r1, [r4, #54]	@ 0x36
 8016c92:	61a3      	str	r3, [r4, #24]
 8016c94:	6123      	str	r3, [r4, #16]
 8016c96:	6163      	str	r3, [r4, #20]
 8016c98:	60e3      	str	r3, [r4, #12]
 8016c9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8016c9c:	61e3      	str	r3, [r4, #28]
 8016c9e:	6223      	str	r3, [r4, #32]
 8016ca0:	6423      	str	r3, [r4, #64]	@ 0x40
 8016ca2:	d91c      	bls.n	8016cde <PDM_Filter_Init+0x7a>
 8016ca4:	2003      	movs	r0, #3
 8016ca6:	2302      	movs	r3, #2
 8016ca8:	8862      	ldrh	r2, [r4, #2]
 8016caa:	2a01      	cmp	r2, #1
 8016cac:	d914      	bls.n	8016cd8 <PDM_Filter_Init+0x74>
 8016cae:	2140      	movs	r1, #64	@ 0x40
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8016cb4:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8016cb8:	d00b      	beq.n	8016cd2 <PDM_Filter_Init+0x6e>
 8016cba:	6862      	ldr	r2, [r4, #4]
 8016cbc:	b11a      	cbz	r2, 8016cc6 <PDM_Filter_Init+0x62>
 8016cbe:	f043 0310 	orr.w	r3, r3, #16
 8016cc2:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8016cc4:	6423      	str	r3, [r4, #64]	@ 0x40
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016cca:	b908      	cbnz	r0, 8016cd0 <PDM_Filter_Init+0x6c>
 8016ccc:	3380      	adds	r3, #128	@ 0x80
 8016cce:	6423      	str	r3, [r4, #64]	@ 0x40
 8016cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cd2:	460b      	mov	r3, r1
 8016cd4:	6421      	str	r1, [r4, #64]	@ 0x40
 8016cd6:	e7f0      	b.n	8016cba <PDM_Filter_Init+0x56>
 8016cd8:	d008      	beq.n	8016cec <PDM_Filter_Init+0x88>
 8016cda:	4618      	mov	r0, r3
 8016cdc:	e7e7      	b.n	8016cae <PDM_Filter_Init+0x4a>
 8016cde:	4d20      	ldr	r5, [pc, #128]	@ (8016d60 <PDM_Filter_Init+0xfc>)
 8016ce0:	782a      	ldrb	r2, [r5, #0]
 8016ce2:	d009      	beq.n	8016cf8 <PDM_Filter_Init+0x94>
 8016ce4:	2a01      	cmp	r2, #1
 8016ce6:	d020      	beq.n	8016d2a <PDM_Filter_Init+0xc6>
 8016ce8:	2001      	movs	r0, #1
 8016cea:	e7dd      	b.n	8016ca8 <PDM_Filter_Init+0x44>
 8016cec:	2220      	movs	r2, #32
 8016cee:	4618      	mov	r0, r3
 8016cf0:	2160      	movs	r1, #96	@ 0x60
 8016cf2:	6422      	str	r2, [r4, #64]	@ 0x40
 8016cf4:	4613      	mov	r3, r2
 8016cf6:	e7dc      	b.n	8016cb2 <PDM_Filter_Init+0x4e>
 8016cf8:	2a00      	cmp	r2, #0
 8016cfa:	d1d5      	bne.n	8016ca8 <PDM_Filter_Init+0x44>
 8016cfc:	4919      	ldr	r1, [pc, #100]	@ (8016d64 <PDM_Filter_Init+0x100>)
 8016cfe:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8016d6c <PDM_Filter_Init+0x108>
 8016d02:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 8016d06:	4e18      	ldr	r6, [pc, #96]	@ (8016d68 <PDM_Filter_Init+0x104>)
 8016d08:	684a      	ldr	r2, [r1, #4]
 8016d0a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8016d0e:	ea02 0006 	and.w	r0, r2, r6
 8016d12:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8016d16:	4303      	orrs	r3, r0
 8016d18:	4413      	add	r3, r2
 8016d1a:	f841 3f04 	str.w	r3, [r1, #4]!
 8016d1e:	428f      	cmp	r7, r1
 8016d20:	d1f2      	bne.n	8016d08 <PDM_Filter_Init+0xa4>
 8016d22:	2001      	movs	r0, #1
 8016d24:	2300      	movs	r3, #0
 8016d26:	7028      	strb	r0, [r5, #0]
 8016d28:	e7be      	b.n	8016ca8 <PDM_Filter_Init+0x44>
 8016d2a:	490e      	ldr	r1, [pc, #56]	@ (8016d64 <PDM_Filter_Init+0x100>)
 8016d2c:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8016d6c <PDM_Filter_Init+0x108>
 8016d30:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 8016d34:	4e0c      	ldr	r6, [pc, #48]	@ (8016d68 <PDM_Filter_Init+0x104>)
 8016d36:	684a      	ldr	r2, [r1, #4]
 8016d38:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8016d3c:	ea02 0006 	and.w	r0, r2, r6
 8016d40:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8016d44:	4303      	orrs	r3, r0
 8016d46:	4413      	add	r3, r2
 8016d48:	f841 3f04 	str.w	r3, [r1, #4]!
 8016d4c:	428f      	cmp	r7, r1
 8016d4e:	d1f2      	bne.n	8016d36 <PDM_Filter_Init+0xd2>
 8016d50:	2300      	movs	r3, #0
 8016d52:	2001      	movs	r0, #1
 8016d54:	702b      	strb	r3, [r5, #0]
 8016d56:	e7a7      	b.n	8016ca8 <PDM_Filter_Init+0x44>
 8016d58:	b5e8b5cd 	.word	0xb5e8b5cd
 8016d5c:	f407a5c2 	.word	0xf407a5c2
 8016d60:	2400067c 	.word	0x2400067c
 8016d64:	23fffffc 	.word	0x23fffffc
 8016d68:	000ffc00 	.word	0x000ffc00
 8016d6c:	3ff00000 	.word	0x3ff00000

08016d70 <PDM_Filter_setConfig>:
 8016d70:	b570      	push	{r4, r5, r6, lr}
 8016d72:	460e      	mov	r6, r1
 8016d74:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8016d76:	4604      	mov	r4, r0
 8016d78:	8832      	ldrh	r2, [r6, #0]
 8016d7a:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8016d7e:	1e53      	subs	r3, r2, #1
 8016d80:	2b06      	cmp	r3, #6
 8016d82:	ed2d 8b04 	vpush	{d8-d9}
 8016d86:	6420      	str	r0, [r4, #64]	@ 0x40
 8016d88:	d91b      	bls.n	8016dc2 <PDM_Filter_setConfig+0x52>
 8016d8a:	2508      	movs	r5, #8
 8016d8c:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 8016d90:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016d94:	4299      	cmp	r1, r3
 8016d96:	d07b      	beq.n	8016e90 <PDM_Filter_setConfig+0x120>
 8016d98:	f113 0f0c 	cmn.w	r3, #12
 8016d9c:	db29      	blt.n	8016df2 <PDM_Filter_setConfig+0x82>
 8016d9e:	2b33      	cmp	r3, #51	@ 0x33
 8016da0:	dd2c      	ble.n	8016dfc <PDM_Filter_setConfig+0x8c>
 8016da2:	2333      	movs	r3, #51	@ 0x33
 8016da4:	3540      	adds	r5, #64	@ 0x40
 8016da6:	80b3      	strh	r3, [r6, #4]
 8016da8:	8622      	strh	r2, [r4, #48]	@ 0x30
 8016daa:	8873      	ldrh	r3, [r6, #2]
 8016dac:	8663      	strh	r3, [r4, #50]	@ 0x32
 8016dae:	b925      	cbnz	r5, 8016dba <PDM_Filter_setConfig+0x4a>
 8016db0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016db2:	2500      	movs	r5, #0
 8016db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016db8:	6423      	str	r3, [r4, #64]	@ 0x40
 8016dba:	4628      	mov	r0, r5
 8016dbc:	ecbd 8b04 	vpop	{d8-d9}
 8016dc0:	bd70      	pop	{r4, r5, r6, pc}
 8016dc2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016dc4:	4293      	cmp	r3, r2
 8016dc6:	d04a      	beq.n	8016e5e <PDM_Filter_setConfig+0xee>
 8016dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8016f04 <PDM_Filter_setConfig+0x194>)
 8016dca:	400b      	ands	r3, r1
 8016dcc:	4313      	orrs	r3, r2
 8016dce:	f003 0170 	and.w	r1, r3, #112	@ 0x70
 8016dd2:	6423      	str	r3, [r4, #64]	@ 0x40
 8016dd4:	f003 030f 	and.w	r3, r3, #15
 8016dd8:	2970      	cmp	r1, #112	@ 0x70
 8016dda:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8016dde:	d04a      	beq.n	8016e76 <PDM_Filter_setConfig+0x106>
 8016de0:	2b06      	cmp	r3, #6
 8016de2:	f200 808d 	bhi.w	8016f00 <PDM_Filter_setConfig+0x190>
 8016de6:	e8df f003 	tbb	[pc, r3]
 8016dea:	6467      	.short	0x6467
 8016dec:	6a6d7073 	.word	0x6a6d7073
 8016df0:	5a          	.byte	0x5a
 8016df1:	00          	.byte	0x00
 8016df2:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 8016df6:	3540      	adds	r5, #64	@ 0x40
 8016df8:	80b3      	strh	r3, [r6, #4]
 8016dfa:	e7d5      	b.n	8016da8 <PDM_Filter_setConfig+0x38>
 8016dfc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8016dfe:	f002 020f 	and.w	r2, r2, #15
 8016e02:	3a01      	subs	r2, #1
 8016e04:	2a06      	cmp	r2, #6
 8016e06:	d83e      	bhi.n	8016e86 <PDM_Filter_setConfig+0x116>
 8016e08:	493f      	ldr	r1, [pc, #252]	@ (8016f08 <PDM_Filter_setConfig+0x198>)
 8016e0a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016e0e:	ed92 9a00 	vldr	s18, [r2]
 8016e12:	ed92 8a07 	vldr	s16, [r2, #28]
 8016e16:	ee07 3a90 	vmov	s15, r3
 8016e1a:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8016e1e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8016e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e26:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8016e2a:	f000 fd95 	bl	8017958 <powf>
 8016e2e:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8016f0c <PDM_Filter_setConfig+0x19c>
 8016e32:	eef0 8a40 	vmov.f32	s17, s0
 8016e36:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8016e3a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8016e3e:	f000 fd8b 	bl	8017958 <powf>
 8016e42:	ee28 8a28 	vmul.f32	s16, s16, s17
 8016e46:	88b3      	ldrh	r3, [r6, #4]
 8016e48:	8832      	ldrh	r2, [r6, #0]
 8016e4a:	ee28 8a00 	vmul.f32	s16, s16, s0
 8016e4e:	8723      	strh	r3, [r4, #56]	@ 0x38
 8016e50:	feb8 8a48 	vrinta.f32	s16, s16
 8016e54:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8016e58:	ed84 8a0f 	vstr	s16, [r4, #60]	@ 0x3c
 8016e5c:	e7a4      	b.n	8016da8 <PDM_Filter_setConfig+0x38>
 8016e5e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016e62:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 8016e66:	4299      	cmp	r1, r3
 8016e68:	d016      	beq.n	8016e98 <PDM_Filter_setConfig+0x128>
 8016e6a:	f113 0f0c 	cmn.w	r3, #12
 8016e6e:	f04f 0500 	mov.w	r5, #0
 8016e72:	da94      	bge.n	8016d9e <PDM_Filter_setConfig+0x2e>
 8016e74:	e7bd      	b.n	8016df2 <PDM_Filter_setConfig+0x82>
 8016e76:	2b06      	cmp	r3, #6
 8016e78:	d842      	bhi.n	8016f00 <PDM_Filter_setConfig+0x190>
 8016e7a:	e8df f003 	tbb	[pc, r3]
 8016e7e:	3b3e      	.short	0x3b3e
 8016e80:	2f323538 	.word	0x2f323538
 8016e84:	2c          	.byte	0x2c
 8016e85:	00          	.byte	0x00
 8016e86:	ed9f 8a22 	vldr	s16, [pc, #136]	@ 8016f10 <PDM_Filter_setConfig+0x1a0>
 8016e8a:	eeb0 9a48 	vmov.f32	s18, s16
 8016e8e:	e7c2      	b.n	8016e16 <PDM_Filter_setConfig+0xa6>
 8016e90:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 8016e92:	4291      	cmp	r1, r2
 8016e94:	d180      	bne.n	8016d98 <PDM_Filter_setConfig+0x28>
 8016e96:	e788      	b.n	8016daa <PDM_Filter_setConfig+0x3a>
 8016e98:	8873      	ldrh	r3, [r6, #2]
 8016e9a:	8663      	strh	r3, [r4, #50]	@ 0x32
 8016e9c:	e788      	b.n	8016db0 <PDM_Filter_setConfig+0x40>
 8016e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8016f14 <PDM_Filter_setConfig+0x1a4>)
 8016ea0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016ea2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016ea6:	2500      	movs	r5, #0
 8016ea8:	f113 0f0c 	cmn.w	r3, #12
 8016eac:	f6bf af77 	bge.w	8016d9e <PDM_Filter_setConfig+0x2e>
 8016eb0:	e79f      	b.n	8016df2 <PDM_Filter_setConfig+0x82>
 8016eb2:	4b19      	ldr	r3, [pc, #100]	@ (8016f18 <PDM_Filter_setConfig+0x1a8>)
 8016eb4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016eb6:	e7f4      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016eb8:	4b18      	ldr	r3, [pc, #96]	@ (8016f1c <PDM_Filter_setConfig+0x1ac>)
 8016eba:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016ebc:	e7f1      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016ebe:	4b18      	ldr	r3, [pc, #96]	@ (8016f20 <PDM_Filter_setConfig+0x1b0>)
 8016ec0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016ec2:	e7ee      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016ec4:	4b17      	ldr	r3, [pc, #92]	@ (8016f24 <PDM_Filter_setConfig+0x1b4>)
 8016ec6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016ec8:	e7eb      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016eca:	4b17      	ldr	r3, [pc, #92]	@ (8016f28 <PDM_Filter_setConfig+0x1b8>)
 8016ecc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016ece:	e7e8      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016ed0:	4b16      	ldr	r3, [pc, #88]	@ (8016f2c <PDM_Filter_setConfig+0x1bc>)
 8016ed2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016ed4:	e7e5      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016ed6:	4b16      	ldr	r3, [pc, #88]	@ (8016f30 <PDM_Filter_setConfig+0x1c0>)
 8016ed8:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016eda:	e7e2      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016edc:	4b15      	ldr	r3, [pc, #84]	@ (8016f34 <PDM_Filter_setConfig+0x1c4>)
 8016ede:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016ee0:	e7df      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016ee2:	4b15      	ldr	r3, [pc, #84]	@ (8016f38 <PDM_Filter_setConfig+0x1c8>)
 8016ee4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016ee6:	e7dc      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016ee8:	4b14      	ldr	r3, [pc, #80]	@ (8016f3c <PDM_Filter_setConfig+0x1cc>)
 8016eea:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016eec:	e7d9      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016eee:	4b14      	ldr	r3, [pc, #80]	@ (8016f40 <PDM_Filter_setConfig+0x1d0>)
 8016ef0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016ef2:	e7d6      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016ef4:	4b13      	ldr	r3, [pc, #76]	@ (8016f44 <PDM_Filter_setConfig+0x1d4>)
 8016ef6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016ef8:	e7d3      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016efa:	4b13      	ldr	r3, [pc, #76]	@ (8016f48 <PDM_Filter_setConfig+0x1d8>)
 8016efc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016efe:	e7d0      	b.n	8016ea2 <PDM_Filter_setConfig+0x132>
 8016f00:	2500      	movs	r5, #0
 8016f02:	e743      	b.n	8016d8c <PDM_Filter_setConfig+0x1c>
 8016f04:	fffffef0 	.word	0xfffffef0
 8016f08:	08017fc8 	.word	0x08017fc8
 8016f0c:	42000000 	.word	0x42000000
 8016f10:	00000000 	.word	0x00000000
 8016f14:	080154d1 	.word	0x080154d1
 8016f18:	08015849 	.word	0x08015849
 8016f1c:	08015659 	.word	0x08015659
 8016f20:	08015355 	.word	0x08015355
 8016f24:	08015245 	.word	0x08015245
 8016f28:	08015d15 	.word	0x08015d15
 8016f2c:	08015a79 	.word	0x08015a79
 8016f30:	080162f9 	.word	0x080162f9
 8016f34:	080161c9 	.word	0x080161c9
 8016f38:	080160cd 	.word	0x080160cd
 8016f3c:	08016979 	.word	0x08016979
 8016f40:	08016779 	.word	0x08016779
 8016f44:	080165c1 	.word	0x080165c1
 8016f48:	08016441 	.word	0x08016441

08016f4c <PDM_Filter>:
 8016f4c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016f4e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016f52:	d105      	bne.n	8016f60 <PDM_Filter+0x14>
 8016f54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016f58:	bf14      	ite	ne
 8016f5a:	2020      	movne	r0, #32
 8016f5c:	2030      	moveq	r0, #48	@ 0x30
 8016f5e:	4770      	bx	lr
 8016f60:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8016f62:	320c      	adds	r2, #12
 8016f64:	4718      	bx	r3
 8016f66:	bf00      	nop

08016f68 <CRC_Lock>:
 8016f68:	4a18      	ldr	r2, [pc, #96]	@ (8016fcc <CRC_Lock+0x64>)
 8016f6a:	6813      	ldr	r3, [r2, #0]
 8016f6c:	b410      	push	{r4}
 8016f6e:	f023 0301 	bic.w	r3, r3, #1
 8016f72:	4c17      	ldr	r4, [pc, #92]	@ (8016fd0 <CRC_Lock+0x68>)
 8016f74:	6013      	str	r3, [r2, #0]
 8016f76:	6823      	ldr	r3, [r4, #0]
 8016f78:	b933      	cbnz	r3, 8016f88 <CRC_Lock+0x20>
 8016f7a:	4b16      	ldr	r3, [pc, #88]	@ (8016fd4 <CRC_Lock+0x6c>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016f82:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8016f86:	d010      	beq.n	8016faa <CRC_Lock+0x42>
 8016f88:	4b13      	ldr	r3, [pc, #76]	@ (8016fd8 <CRC_Lock+0x70>)
 8016f8a:	2401      	movs	r4, #1
 8016f8c:	461a      	mov	r2, r3
 8016f8e:	601c      	str	r4, [r3, #0]
 8016f90:	6813      	ldr	r3, [r2, #0]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d1fc      	bne.n	8016f90 <CRC_Lock+0x28>
 8016f96:	4b11      	ldr	r3, [pc, #68]	@ (8016fdc <CRC_Lock+0x74>)
 8016f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f9c:	6018      	str	r0, [r3, #0]
 8016f9e:	6818      	ldr	r0, [r3, #0]
 8016fa0:	1a08      	subs	r0, r1, r0
 8016fa2:	fab0 f080 	clz	r0, r0
 8016fa6:	0940      	lsrs	r0, r0, #5
 8016fa8:	4770      	bx	lr
 8016faa:	4b0d      	ldr	r3, [pc, #52]	@ (8016fe0 <CRC_Lock+0x78>)
 8016fac:	2401      	movs	r4, #1
 8016fae:	461a      	mov	r2, r3
 8016fb0:	601c      	str	r4, [r3, #0]
 8016fb2:	6813      	ldr	r3, [r2, #0]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d1fc      	bne.n	8016fb2 <CRC_Lock+0x4a>
 8016fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8016fe4 <CRC_Lock+0x7c>)
 8016fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fbe:	6018      	str	r0, [r3, #0]
 8016fc0:	6818      	ldr	r0, [r3, #0]
 8016fc2:	1a40      	subs	r0, r0, r1
 8016fc4:	fab0 f080 	clz	r0, r0
 8016fc8:	0940      	lsrs	r0, r0, #5
 8016fca:	4770      	bx	lr
 8016fcc:	e0002000 	.word	0xe0002000
 8016fd0:	e0042000 	.word	0xe0042000
 8016fd4:	5c001000 	.word	0x5c001000
 8016fd8:	40023008 	.word	0x40023008
 8016fdc:	40023000 	.word	0x40023000
 8016fe0:	58024c08 	.word	0x58024c08
 8016fe4:	58024c00 	.word	0x58024c00

08016fe8 <siprintf>:
 8016fe8:	b40e      	push	{r1, r2, r3}
 8016fea:	b510      	push	{r4, lr}
 8016fec:	b09d      	sub	sp, #116	@ 0x74
 8016fee:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016ff0:	9002      	str	r0, [sp, #8]
 8016ff2:	9006      	str	r0, [sp, #24]
 8016ff4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016ff8:	480a      	ldr	r0, [pc, #40]	@ (8017024 <siprintf+0x3c>)
 8016ffa:	9107      	str	r1, [sp, #28]
 8016ffc:	9104      	str	r1, [sp, #16]
 8016ffe:	490a      	ldr	r1, [pc, #40]	@ (8017028 <siprintf+0x40>)
 8017000:	f853 2b04 	ldr.w	r2, [r3], #4
 8017004:	9105      	str	r1, [sp, #20]
 8017006:	2400      	movs	r4, #0
 8017008:	a902      	add	r1, sp, #8
 801700a:	6800      	ldr	r0, [r0, #0]
 801700c:	9301      	str	r3, [sp, #4]
 801700e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8017010:	f000 f8aa 	bl	8017168 <_svfiprintf_r>
 8017014:	9b02      	ldr	r3, [sp, #8]
 8017016:	701c      	strb	r4, [r3, #0]
 8017018:	b01d      	add	sp, #116	@ 0x74
 801701a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801701e:	b003      	add	sp, #12
 8017020:	4770      	bx	lr
 8017022:	bf00      	nop
 8017024:	240005f4 	.word	0x240005f4
 8017028:	ffff0208 	.word	0xffff0208

0801702c <memset>:
 801702c:	4402      	add	r2, r0
 801702e:	4603      	mov	r3, r0
 8017030:	4293      	cmp	r3, r2
 8017032:	d100      	bne.n	8017036 <memset+0xa>
 8017034:	4770      	bx	lr
 8017036:	f803 1b01 	strb.w	r1, [r3], #1
 801703a:	e7f9      	b.n	8017030 <memset+0x4>

0801703c <__errno>:
 801703c:	4b01      	ldr	r3, [pc, #4]	@ (8017044 <__errno+0x8>)
 801703e:	6818      	ldr	r0, [r3, #0]
 8017040:	4770      	bx	lr
 8017042:	bf00      	nop
 8017044:	240005f4 	.word	0x240005f4

08017048 <__libc_init_array>:
 8017048:	b570      	push	{r4, r5, r6, lr}
 801704a:	4d0d      	ldr	r5, [pc, #52]	@ (8017080 <__libc_init_array+0x38>)
 801704c:	4c0d      	ldr	r4, [pc, #52]	@ (8017084 <__libc_init_array+0x3c>)
 801704e:	1b64      	subs	r4, r4, r5
 8017050:	10a4      	asrs	r4, r4, #2
 8017052:	2600      	movs	r6, #0
 8017054:	42a6      	cmp	r6, r4
 8017056:	d109      	bne.n	801706c <__libc_init_array+0x24>
 8017058:	4d0b      	ldr	r5, [pc, #44]	@ (8017088 <__libc_init_array+0x40>)
 801705a:	4c0c      	ldr	r4, [pc, #48]	@ (801708c <__libc_init_array+0x44>)
 801705c:	f000 fe2a 	bl	8017cb4 <_init>
 8017060:	1b64      	subs	r4, r4, r5
 8017062:	10a4      	asrs	r4, r4, #2
 8017064:	2600      	movs	r6, #0
 8017066:	42a6      	cmp	r6, r4
 8017068:	d105      	bne.n	8017076 <__libc_init_array+0x2e>
 801706a:	bd70      	pop	{r4, r5, r6, pc}
 801706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017070:	4798      	blx	r3
 8017072:	3601      	adds	r6, #1
 8017074:	e7ee      	b.n	8017054 <__libc_init_array+0xc>
 8017076:	f855 3b04 	ldr.w	r3, [r5], #4
 801707a:	4798      	blx	r3
 801707c:	3601      	adds	r6, #1
 801707e:	e7f2      	b.n	8017066 <__libc_init_array+0x1e>
 8017080:	0801d4b8 	.word	0x0801d4b8
 8017084:	0801d4b8 	.word	0x0801d4b8
 8017088:	0801d4b8 	.word	0x0801d4b8
 801708c:	0801d4bc 	.word	0x0801d4bc

08017090 <__retarget_lock_acquire_recursive>:
 8017090:	4770      	bx	lr

08017092 <__retarget_lock_release_recursive>:
 8017092:	4770      	bx	lr

08017094 <memcpy>:
 8017094:	440a      	add	r2, r1
 8017096:	4291      	cmp	r1, r2
 8017098:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801709c:	d100      	bne.n	80170a0 <memcpy+0xc>
 801709e:	4770      	bx	lr
 80170a0:	b510      	push	{r4, lr}
 80170a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80170a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80170aa:	4291      	cmp	r1, r2
 80170ac:	d1f9      	bne.n	80170a2 <memcpy+0xe>
 80170ae:	bd10      	pop	{r4, pc}

080170b0 <__ssputs_r>:
 80170b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170b4:	688e      	ldr	r6, [r1, #8]
 80170b6:	461f      	mov	r7, r3
 80170b8:	42be      	cmp	r6, r7
 80170ba:	680b      	ldr	r3, [r1, #0]
 80170bc:	4682      	mov	sl, r0
 80170be:	460c      	mov	r4, r1
 80170c0:	4690      	mov	r8, r2
 80170c2:	d82d      	bhi.n	8017120 <__ssputs_r+0x70>
 80170c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80170c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80170cc:	d026      	beq.n	801711c <__ssputs_r+0x6c>
 80170ce:	6965      	ldr	r5, [r4, #20]
 80170d0:	6909      	ldr	r1, [r1, #16]
 80170d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80170d6:	eba3 0901 	sub.w	r9, r3, r1
 80170da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80170de:	1c7b      	adds	r3, r7, #1
 80170e0:	444b      	add	r3, r9
 80170e2:	106d      	asrs	r5, r5, #1
 80170e4:	429d      	cmp	r5, r3
 80170e6:	bf38      	it	cc
 80170e8:	461d      	movcc	r5, r3
 80170ea:	0553      	lsls	r3, r2, #21
 80170ec:	d527      	bpl.n	801713e <__ssputs_r+0x8e>
 80170ee:	4629      	mov	r1, r5
 80170f0:	f000 f958 	bl	80173a4 <_malloc_r>
 80170f4:	4606      	mov	r6, r0
 80170f6:	b360      	cbz	r0, 8017152 <__ssputs_r+0xa2>
 80170f8:	6921      	ldr	r1, [r4, #16]
 80170fa:	464a      	mov	r2, r9
 80170fc:	f7ff ffca 	bl	8017094 <memcpy>
 8017100:	89a3      	ldrh	r3, [r4, #12]
 8017102:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801710a:	81a3      	strh	r3, [r4, #12]
 801710c:	6126      	str	r6, [r4, #16]
 801710e:	6165      	str	r5, [r4, #20]
 8017110:	444e      	add	r6, r9
 8017112:	eba5 0509 	sub.w	r5, r5, r9
 8017116:	6026      	str	r6, [r4, #0]
 8017118:	60a5      	str	r5, [r4, #8]
 801711a:	463e      	mov	r6, r7
 801711c:	42be      	cmp	r6, r7
 801711e:	d900      	bls.n	8017122 <__ssputs_r+0x72>
 8017120:	463e      	mov	r6, r7
 8017122:	6820      	ldr	r0, [r4, #0]
 8017124:	4632      	mov	r2, r6
 8017126:	4641      	mov	r1, r8
 8017128:	f000 fb82 	bl	8017830 <memmove>
 801712c:	68a3      	ldr	r3, [r4, #8]
 801712e:	1b9b      	subs	r3, r3, r6
 8017130:	60a3      	str	r3, [r4, #8]
 8017132:	6823      	ldr	r3, [r4, #0]
 8017134:	4433      	add	r3, r6
 8017136:	6023      	str	r3, [r4, #0]
 8017138:	2000      	movs	r0, #0
 801713a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801713e:	462a      	mov	r2, r5
 8017140:	f000 fb48 	bl	80177d4 <_realloc_r>
 8017144:	4606      	mov	r6, r0
 8017146:	2800      	cmp	r0, #0
 8017148:	d1e0      	bne.n	801710c <__ssputs_r+0x5c>
 801714a:	6921      	ldr	r1, [r4, #16]
 801714c:	4650      	mov	r0, sl
 801714e:	f000 fb99 	bl	8017884 <_free_r>
 8017152:	230c      	movs	r3, #12
 8017154:	f8ca 3000 	str.w	r3, [sl]
 8017158:	89a3      	ldrh	r3, [r4, #12]
 801715a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801715e:	81a3      	strh	r3, [r4, #12]
 8017160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017164:	e7e9      	b.n	801713a <__ssputs_r+0x8a>
	...

08017168 <_svfiprintf_r>:
 8017168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801716c:	4698      	mov	r8, r3
 801716e:	898b      	ldrh	r3, [r1, #12]
 8017170:	061b      	lsls	r3, r3, #24
 8017172:	b09d      	sub	sp, #116	@ 0x74
 8017174:	4607      	mov	r7, r0
 8017176:	460d      	mov	r5, r1
 8017178:	4614      	mov	r4, r2
 801717a:	d510      	bpl.n	801719e <_svfiprintf_r+0x36>
 801717c:	690b      	ldr	r3, [r1, #16]
 801717e:	b973      	cbnz	r3, 801719e <_svfiprintf_r+0x36>
 8017180:	2140      	movs	r1, #64	@ 0x40
 8017182:	f000 f90f 	bl	80173a4 <_malloc_r>
 8017186:	6028      	str	r0, [r5, #0]
 8017188:	6128      	str	r0, [r5, #16]
 801718a:	b930      	cbnz	r0, 801719a <_svfiprintf_r+0x32>
 801718c:	230c      	movs	r3, #12
 801718e:	603b      	str	r3, [r7, #0]
 8017190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017194:	b01d      	add	sp, #116	@ 0x74
 8017196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801719a:	2340      	movs	r3, #64	@ 0x40
 801719c:	616b      	str	r3, [r5, #20]
 801719e:	2300      	movs	r3, #0
 80171a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80171a2:	2320      	movs	r3, #32
 80171a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80171a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80171ac:	2330      	movs	r3, #48	@ 0x30
 80171ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801734c <_svfiprintf_r+0x1e4>
 80171b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80171b6:	f04f 0901 	mov.w	r9, #1
 80171ba:	4623      	mov	r3, r4
 80171bc:	469a      	mov	sl, r3
 80171be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171c2:	b10a      	cbz	r2, 80171c8 <_svfiprintf_r+0x60>
 80171c4:	2a25      	cmp	r2, #37	@ 0x25
 80171c6:	d1f9      	bne.n	80171bc <_svfiprintf_r+0x54>
 80171c8:	ebba 0b04 	subs.w	fp, sl, r4
 80171cc:	d00b      	beq.n	80171e6 <_svfiprintf_r+0x7e>
 80171ce:	465b      	mov	r3, fp
 80171d0:	4622      	mov	r2, r4
 80171d2:	4629      	mov	r1, r5
 80171d4:	4638      	mov	r0, r7
 80171d6:	f7ff ff6b 	bl	80170b0 <__ssputs_r>
 80171da:	3001      	adds	r0, #1
 80171dc:	f000 80a7 	beq.w	801732e <_svfiprintf_r+0x1c6>
 80171e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171e2:	445a      	add	r2, fp
 80171e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80171e6:	f89a 3000 	ldrb.w	r3, [sl]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	f000 809f 	beq.w	801732e <_svfiprintf_r+0x1c6>
 80171f0:	2300      	movs	r3, #0
 80171f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80171f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171fa:	f10a 0a01 	add.w	sl, sl, #1
 80171fe:	9304      	str	r3, [sp, #16]
 8017200:	9307      	str	r3, [sp, #28]
 8017202:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017206:	931a      	str	r3, [sp, #104]	@ 0x68
 8017208:	4654      	mov	r4, sl
 801720a:	2205      	movs	r2, #5
 801720c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017210:	484e      	ldr	r0, [pc, #312]	@ (801734c <_svfiprintf_r+0x1e4>)
 8017212:	f7e9 f865 	bl	80002e0 <memchr>
 8017216:	9a04      	ldr	r2, [sp, #16]
 8017218:	b9d8      	cbnz	r0, 8017252 <_svfiprintf_r+0xea>
 801721a:	06d0      	lsls	r0, r2, #27
 801721c:	bf44      	itt	mi
 801721e:	2320      	movmi	r3, #32
 8017220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017224:	0711      	lsls	r1, r2, #28
 8017226:	bf44      	itt	mi
 8017228:	232b      	movmi	r3, #43	@ 0x2b
 801722a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801722e:	f89a 3000 	ldrb.w	r3, [sl]
 8017232:	2b2a      	cmp	r3, #42	@ 0x2a
 8017234:	d015      	beq.n	8017262 <_svfiprintf_r+0xfa>
 8017236:	9a07      	ldr	r2, [sp, #28]
 8017238:	4654      	mov	r4, sl
 801723a:	2000      	movs	r0, #0
 801723c:	f04f 0c0a 	mov.w	ip, #10
 8017240:	4621      	mov	r1, r4
 8017242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017246:	3b30      	subs	r3, #48	@ 0x30
 8017248:	2b09      	cmp	r3, #9
 801724a:	d94b      	bls.n	80172e4 <_svfiprintf_r+0x17c>
 801724c:	b1b0      	cbz	r0, 801727c <_svfiprintf_r+0x114>
 801724e:	9207      	str	r2, [sp, #28]
 8017250:	e014      	b.n	801727c <_svfiprintf_r+0x114>
 8017252:	eba0 0308 	sub.w	r3, r0, r8
 8017256:	fa09 f303 	lsl.w	r3, r9, r3
 801725a:	4313      	orrs	r3, r2
 801725c:	9304      	str	r3, [sp, #16]
 801725e:	46a2      	mov	sl, r4
 8017260:	e7d2      	b.n	8017208 <_svfiprintf_r+0xa0>
 8017262:	9b03      	ldr	r3, [sp, #12]
 8017264:	1d19      	adds	r1, r3, #4
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	9103      	str	r1, [sp, #12]
 801726a:	2b00      	cmp	r3, #0
 801726c:	bfbb      	ittet	lt
 801726e:	425b      	neglt	r3, r3
 8017270:	f042 0202 	orrlt.w	r2, r2, #2
 8017274:	9307      	strge	r3, [sp, #28]
 8017276:	9307      	strlt	r3, [sp, #28]
 8017278:	bfb8      	it	lt
 801727a:	9204      	strlt	r2, [sp, #16]
 801727c:	7823      	ldrb	r3, [r4, #0]
 801727e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017280:	d10a      	bne.n	8017298 <_svfiprintf_r+0x130>
 8017282:	7863      	ldrb	r3, [r4, #1]
 8017284:	2b2a      	cmp	r3, #42	@ 0x2a
 8017286:	d132      	bne.n	80172ee <_svfiprintf_r+0x186>
 8017288:	9b03      	ldr	r3, [sp, #12]
 801728a:	1d1a      	adds	r2, r3, #4
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	9203      	str	r2, [sp, #12]
 8017290:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017294:	3402      	adds	r4, #2
 8017296:	9305      	str	r3, [sp, #20]
 8017298:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801735c <_svfiprintf_r+0x1f4>
 801729c:	7821      	ldrb	r1, [r4, #0]
 801729e:	2203      	movs	r2, #3
 80172a0:	4650      	mov	r0, sl
 80172a2:	f7e9 f81d 	bl	80002e0 <memchr>
 80172a6:	b138      	cbz	r0, 80172b8 <_svfiprintf_r+0x150>
 80172a8:	9b04      	ldr	r3, [sp, #16]
 80172aa:	eba0 000a 	sub.w	r0, r0, sl
 80172ae:	2240      	movs	r2, #64	@ 0x40
 80172b0:	4082      	lsls	r2, r0
 80172b2:	4313      	orrs	r3, r2
 80172b4:	3401      	adds	r4, #1
 80172b6:	9304      	str	r3, [sp, #16]
 80172b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172bc:	4824      	ldr	r0, [pc, #144]	@ (8017350 <_svfiprintf_r+0x1e8>)
 80172be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80172c2:	2206      	movs	r2, #6
 80172c4:	f7e9 f80c 	bl	80002e0 <memchr>
 80172c8:	2800      	cmp	r0, #0
 80172ca:	d036      	beq.n	801733a <_svfiprintf_r+0x1d2>
 80172cc:	4b21      	ldr	r3, [pc, #132]	@ (8017354 <_svfiprintf_r+0x1ec>)
 80172ce:	bb1b      	cbnz	r3, 8017318 <_svfiprintf_r+0x1b0>
 80172d0:	9b03      	ldr	r3, [sp, #12]
 80172d2:	3307      	adds	r3, #7
 80172d4:	f023 0307 	bic.w	r3, r3, #7
 80172d8:	3308      	adds	r3, #8
 80172da:	9303      	str	r3, [sp, #12]
 80172dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172de:	4433      	add	r3, r6
 80172e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80172e2:	e76a      	b.n	80171ba <_svfiprintf_r+0x52>
 80172e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80172e8:	460c      	mov	r4, r1
 80172ea:	2001      	movs	r0, #1
 80172ec:	e7a8      	b.n	8017240 <_svfiprintf_r+0xd8>
 80172ee:	2300      	movs	r3, #0
 80172f0:	3401      	adds	r4, #1
 80172f2:	9305      	str	r3, [sp, #20]
 80172f4:	4619      	mov	r1, r3
 80172f6:	f04f 0c0a 	mov.w	ip, #10
 80172fa:	4620      	mov	r0, r4
 80172fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017300:	3a30      	subs	r2, #48	@ 0x30
 8017302:	2a09      	cmp	r2, #9
 8017304:	d903      	bls.n	801730e <_svfiprintf_r+0x1a6>
 8017306:	2b00      	cmp	r3, #0
 8017308:	d0c6      	beq.n	8017298 <_svfiprintf_r+0x130>
 801730a:	9105      	str	r1, [sp, #20]
 801730c:	e7c4      	b.n	8017298 <_svfiprintf_r+0x130>
 801730e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017312:	4604      	mov	r4, r0
 8017314:	2301      	movs	r3, #1
 8017316:	e7f0      	b.n	80172fa <_svfiprintf_r+0x192>
 8017318:	ab03      	add	r3, sp, #12
 801731a:	9300      	str	r3, [sp, #0]
 801731c:	462a      	mov	r2, r5
 801731e:	4b0e      	ldr	r3, [pc, #56]	@ (8017358 <_svfiprintf_r+0x1f0>)
 8017320:	a904      	add	r1, sp, #16
 8017322:	4638      	mov	r0, r7
 8017324:	f3af 8000 	nop.w
 8017328:	1c42      	adds	r2, r0, #1
 801732a:	4606      	mov	r6, r0
 801732c:	d1d6      	bne.n	80172dc <_svfiprintf_r+0x174>
 801732e:	89ab      	ldrh	r3, [r5, #12]
 8017330:	065b      	lsls	r3, r3, #25
 8017332:	f53f af2d 	bmi.w	8017190 <_svfiprintf_r+0x28>
 8017336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017338:	e72c      	b.n	8017194 <_svfiprintf_r+0x2c>
 801733a:	ab03      	add	r3, sp, #12
 801733c:	9300      	str	r3, [sp, #0]
 801733e:	462a      	mov	r2, r5
 8017340:	4b05      	ldr	r3, [pc, #20]	@ (8017358 <_svfiprintf_r+0x1f0>)
 8017342:	a904      	add	r1, sp, #16
 8017344:	4638      	mov	r0, r7
 8017346:	f000 f91b 	bl	8017580 <_printf_i>
 801734a:	e7ed      	b.n	8017328 <_svfiprintf_r+0x1c0>
 801734c:	0801d20c 	.word	0x0801d20c
 8017350:	0801d216 	.word	0x0801d216
 8017354:	00000000 	.word	0x00000000
 8017358:	080170b1 	.word	0x080170b1
 801735c:	0801d212 	.word	0x0801d212

08017360 <sbrk_aligned>:
 8017360:	b570      	push	{r4, r5, r6, lr}
 8017362:	4e0f      	ldr	r6, [pc, #60]	@ (80173a0 <sbrk_aligned+0x40>)
 8017364:	460c      	mov	r4, r1
 8017366:	6831      	ldr	r1, [r6, #0]
 8017368:	4605      	mov	r5, r0
 801736a:	b911      	cbnz	r1, 8017372 <sbrk_aligned+0x12>
 801736c:	f000 fa7a 	bl	8017864 <_sbrk_r>
 8017370:	6030      	str	r0, [r6, #0]
 8017372:	4621      	mov	r1, r4
 8017374:	4628      	mov	r0, r5
 8017376:	f000 fa75 	bl	8017864 <_sbrk_r>
 801737a:	1c43      	adds	r3, r0, #1
 801737c:	d103      	bne.n	8017386 <sbrk_aligned+0x26>
 801737e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017382:	4620      	mov	r0, r4
 8017384:	bd70      	pop	{r4, r5, r6, pc}
 8017386:	1cc4      	adds	r4, r0, #3
 8017388:	f024 0403 	bic.w	r4, r4, #3
 801738c:	42a0      	cmp	r0, r4
 801738e:	d0f8      	beq.n	8017382 <sbrk_aligned+0x22>
 8017390:	1a21      	subs	r1, r4, r0
 8017392:	4628      	mov	r0, r5
 8017394:	f000 fa66 	bl	8017864 <_sbrk_r>
 8017398:	3001      	adds	r0, #1
 801739a:	d1f2      	bne.n	8017382 <sbrk_aligned+0x22>
 801739c:	e7ef      	b.n	801737e <sbrk_aligned+0x1e>
 801739e:	bf00      	nop
 80173a0:	24006278 	.word	0x24006278

080173a4 <_malloc_r>:
 80173a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173a8:	1ccd      	adds	r5, r1, #3
 80173aa:	f025 0503 	bic.w	r5, r5, #3
 80173ae:	3508      	adds	r5, #8
 80173b0:	2d0c      	cmp	r5, #12
 80173b2:	bf38      	it	cc
 80173b4:	250c      	movcc	r5, #12
 80173b6:	2d00      	cmp	r5, #0
 80173b8:	4606      	mov	r6, r0
 80173ba:	db01      	blt.n	80173c0 <_malloc_r+0x1c>
 80173bc:	42a9      	cmp	r1, r5
 80173be:	d904      	bls.n	80173ca <_malloc_r+0x26>
 80173c0:	230c      	movs	r3, #12
 80173c2:	6033      	str	r3, [r6, #0]
 80173c4:	2000      	movs	r0, #0
 80173c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80174a0 <_malloc_r+0xfc>
 80173ce:	f000 f9f5 	bl	80177bc <__malloc_lock>
 80173d2:	f8d8 3000 	ldr.w	r3, [r8]
 80173d6:	461c      	mov	r4, r3
 80173d8:	bb44      	cbnz	r4, 801742c <_malloc_r+0x88>
 80173da:	4629      	mov	r1, r5
 80173dc:	4630      	mov	r0, r6
 80173de:	f7ff ffbf 	bl	8017360 <sbrk_aligned>
 80173e2:	1c43      	adds	r3, r0, #1
 80173e4:	4604      	mov	r4, r0
 80173e6:	d158      	bne.n	801749a <_malloc_r+0xf6>
 80173e8:	f8d8 4000 	ldr.w	r4, [r8]
 80173ec:	4627      	mov	r7, r4
 80173ee:	2f00      	cmp	r7, #0
 80173f0:	d143      	bne.n	801747a <_malloc_r+0xd6>
 80173f2:	2c00      	cmp	r4, #0
 80173f4:	d04b      	beq.n	801748e <_malloc_r+0xea>
 80173f6:	6823      	ldr	r3, [r4, #0]
 80173f8:	4639      	mov	r1, r7
 80173fa:	4630      	mov	r0, r6
 80173fc:	eb04 0903 	add.w	r9, r4, r3
 8017400:	f000 fa30 	bl	8017864 <_sbrk_r>
 8017404:	4581      	cmp	r9, r0
 8017406:	d142      	bne.n	801748e <_malloc_r+0xea>
 8017408:	6821      	ldr	r1, [r4, #0]
 801740a:	1a6d      	subs	r5, r5, r1
 801740c:	4629      	mov	r1, r5
 801740e:	4630      	mov	r0, r6
 8017410:	f7ff ffa6 	bl	8017360 <sbrk_aligned>
 8017414:	3001      	adds	r0, #1
 8017416:	d03a      	beq.n	801748e <_malloc_r+0xea>
 8017418:	6823      	ldr	r3, [r4, #0]
 801741a:	442b      	add	r3, r5
 801741c:	6023      	str	r3, [r4, #0]
 801741e:	f8d8 3000 	ldr.w	r3, [r8]
 8017422:	685a      	ldr	r2, [r3, #4]
 8017424:	bb62      	cbnz	r2, 8017480 <_malloc_r+0xdc>
 8017426:	f8c8 7000 	str.w	r7, [r8]
 801742a:	e00f      	b.n	801744c <_malloc_r+0xa8>
 801742c:	6822      	ldr	r2, [r4, #0]
 801742e:	1b52      	subs	r2, r2, r5
 8017430:	d420      	bmi.n	8017474 <_malloc_r+0xd0>
 8017432:	2a0b      	cmp	r2, #11
 8017434:	d917      	bls.n	8017466 <_malloc_r+0xc2>
 8017436:	1961      	adds	r1, r4, r5
 8017438:	42a3      	cmp	r3, r4
 801743a:	6025      	str	r5, [r4, #0]
 801743c:	bf18      	it	ne
 801743e:	6059      	strne	r1, [r3, #4]
 8017440:	6863      	ldr	r3, [r4, #4]
 8017442:	bf08      	it	eq
 8017444:	f8c8 1000 	streq.w	r1, [r8]
 8017448:	5162      	str	r2, [r4, r5]
 801744a:	604b      	str	r3, [r1, #4]
 801744c:	4630      	mov	r0, r6
 801744e:	f000 f9bb 	bl	80177c8 <__malloc_unlock>
 8017452:	f104 000b 	add.w	r0, r4, #11
 8017456:	1d23      	adds	r3, r4, #4
 8017458:	f020 0007 	bic.w	r0, r0, #7
 801745c:	1ac2      	subs	r2, r0, r3
 801745e:	bf1c      	itt	ne
 8017460:	1a1b      	subne	r3, r3, r0
 8017462:	50a3      	strne	r3, [r4, r2]
 8017464:	e7af      	b.n	80173c6 <_malloc_r+0x22>
 8017466:	6862      	ldr	r2, [r4, #4]
 8017468:	42a3      	cmp	r3, r4
 801746a:	bf0c      	ite	eq
 801746c:	f8c8 2000 	streq.w	r2, [r8]
 8017470:	605a      	strne	r2, [r3, #4]
 8017472:	e7eb      	b.n	801744c <_malloc_r+0xa8>
 8017474:	4623      	mov	r3, r4
 8017476:	6864      	ldr	r4, [r4, #4]
 8017478:	e7ae      	b.n	80173d8 <_malloc_r+0x34>
 801747a:	463c      	mov	r4, r7
 801747c:	687f      	ldr	r7, [r7, #4]
 801747e:	e7b6      	b.n	80173ee <_malloc_r+0x4a>
 8017480:	461a      	mov	r2, r3
 8017482:	685b      	ldr	r3, [r3, #4]
 8017484:	42a3      	cmp	r3, r4
 8017486:	d1fb      	bne.n	8017480 <_malloc_r+0xdc>
 8017488:	2300      	movs	r3, #0
 801748a:	6053      	str	r3, [r2, #4]
 801748c:	e7de      	b.n	801744c <_malloc_r+0xa8>
 801748e:	230c      	movs	r3, #12
 8017490:	6033      	str	r3, [r6, #0]
 8017492:	4630      	mov	r0, r6
 8017494:	f000 f998 	bl	80177c8 <__malloc_unlock>
 8017498:	e794      	b.n	80173c4 <_malloc_r+0x20>
 801749a:	6005      	str	r5, [r0, #0]
 801749c:	e7d6      	b.n	801744c <_malloc_r+0xa8>
 801749e:	bf00      	nop
 80174a0:	2400627c 	.word	0x2400627c

080174a4 <_printf_common>:
 80174a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174a8:	4616      	mov	r6, r2
 80174aa:	4698      	mov	r8, r3
 80174ac:	688a      	ldr	r2, [r1, #8]
 80174ae:	690b      	ldr	r3, [r1, #16]
 80174b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80174b4:	4293      	cmp	r3, r2
 80174b6:	bfb8      	it	lt
 80174b8:	4613      	movlt	r3, r2
 80174ba:	6033      	str	r3, [r6, #0]
 80174bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80174c0:	4607      	mov	r7, r0
 80174c2:	460c      	mov	r4, r1
 80174c4:	b10a      	cbz	r2, 80174ca <_printf_common+0x26>
 80174c6:	3301      	adds	r3, #1
 80174c8:	6033      	str	r3, [r6, #0]
 80174ca:	6823      	ldr	r3, [r4, #0]
 80174cc:	0699      	lsls	r1, r3, #26
 80174ce:	bf42      	ittt	mi
 80174d0:	6833      	ldrmi	r3, [r6, #0]
 80174d2:	3302      	addmi	r3, #2
 80174d4:	6033      	strmi	r3, [r6, #0]
 80174d6:	6825      	ldr	r5, [r4, #0]
 80174d8:	f015 0506 	ands.w	r5, r5, #6
 80174dc:	d106      	bne.n	80174ec <_printf_common+0x48>
 80174de:	f104 0a19 	add.w	sl, r4, #25
 80174e2:	68e3      	ldr	r3, [r4, #12]
 80174e4:	6832      	ldr	r2, [r6, #0]
 80174e6:	1a9b      	subs	r3, r3, r2
 80174e8:	42ab      	cmp	r3, r5
 80174ea:	dc26      	bgt.n	801753a <_printf_common+0x96>
 80174ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80174f0:	6822      	ldr	r2, [r4, #0]
 80174f2:	3b00      	subs	r3, #0
 80174f4:	bf18      	it	ne
 80174f6:	2301      	movne	r3, #1
 80174f8:	0692      	lsls	r2, r2, #26
 80174fa:	d42b      	bmi.n	8017554 <_printf_common+0xb0>
 80174fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017500:	4641      	mov	r1, r8
 8017502:	4638      	mov	r0, r7
 8017504:	47c8      	blx	r9
 8017506:	3001      	adds	r0, #1
 8017508:	d01e      	beq.n	8017548 <_printf_common+0xa4>
 801750a:	6823      	ldr	r3, [r4, #0]
 801750c:	6922      	ldr	r2, [r4, #16]
 801750e:	f003 0306 	and.w	r3, r3, #6
 8017512:	2b04      	cmp	r3, #4
 8017514:	bf02      	ittt	eq
 8017516:	68e5      	ldreq	r5, [r4, #12]
 8017518:	6833      	ldreq	r3, [r6, #0]
 801751a:	1aed      	subeq	r5, r5, r3
 801751c:	68a3      	ldr	r3, [r4, #8]
 801751e:	bf0c      	ite	eq
 8017520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017524:	2500      	movne	r5, #0
 8017526:	4293      	cmp	r3, r2
 8017528:	bfc4      	itt	gt
 801752a:	1a9b      	subgt	r3, r3, r2
 801752c:	18ed      	addgt	r5, r5, r3
 801752e:	2600      	movs	r6, #0
 8017530:	341a      	adds	r4, #26
 8017532:	42b5      	cmp	r5, r6
 8017534:	d11a      	bne.n	801756c <_printf_common+0xc8>
 8017536:	2000      	movs	r0, #0
 8017538:	e008      	b.n	801754c <_printf_common+0xa8>
 801753a:	2301      	movs	r3, #1
 801753c:	4652      	mov	r2, sl
 801753e:	4641      	mov	r1, r8
 8017540:	4638      	mov	r0, r7
 8017542:	47c8      	blx	r9
 8017544:	3001      	adds	r0, #1
 8017546:	d103      	bne.n	8017550 <_printf_common+0xac>
 8017548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801754c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017550:	3501      	adds	r5, #1
 8017552:	e7c6      	b.n	80174e2 <_printf_common+0x3e>
 8017554:	18e1      	adds	r1, r4, r3
 8017556:	1c5a      	adds	r2, r3, #1
 8017558:	2030      	movs	r0, #48	@ 0x30
 801755a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801755e:	4422      	add	r2, r4
 8017560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017568:	3302      	adds	r3, #2
 801756a:	e7c7      	b.n	80174fc <_printf_common+0x58>
 801756c:	2301      	movs	r3, #1
 801756e:	4622      	mov	r2, r4
 8017570:	4641      	mov	r1, r8
 8017572:	4638      	mov	r0, r7
 8017574:	47c8      	blx	r9
 8017576:	3001      	adds	r0, #1
 8017578:	d0e6      	beq.n	8017548 <_printf_common+0xa4>
 801757a:	3601      	adds	r6, #1
 801757c:	e7d9      	b.n	8017532 <_printf_common+0x8e>
	...

08017580 <_printf_i>:
 8017580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017584:	7e0f      	ldrb	r7, [r1, #24]
 8017586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017588:	2f78      	cmp	r7, #120	@ 0x78
 801758a:	4691      	mov	r9, r2
 801758c:	4680      	mov	r8, r0
 801758e:	460c      	mov	r4, r1
 8017590:	469a      	mov	sl, r3
 8017592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017596:	d807      	bhi.n	80175a8 <_printf_i+0x28>
 8017598:	2f62      	cmp	r7, #98	@ 0x62
 801759a:	d80a      	bhi.n	80175b2 <_printf_i+0x32>
 801759c:	2f00      	cmp	r7, #0
 801759e:	f000 80d1 	beq.w	8017744 <_printf_i+0x1c4>
 80175a2:	2f58      	cmp	r7, #88	@ 0x58
 80175a4:	f000 80b8 	beq.w	8017718 <_printf_i+0x198>
 80175a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80175ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80175b0:	e03a      	b.n	8017628 <_printf_i+0xa8>
 80175b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80175b6:	2b15      	cmp	r3, #21
 80175b8:	d8f6      	bhi.n	80175a8 <_printf_i+0x28>
 80175ba:	a101      	add	r1, pc, #4	@ (adr r1, 80175c0 <_printf_i+0x40>)
 80175bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80175c0:	08017619 	.word	0x08017619
 80175c4:	0801762d 	.word	0x0801762d
 80175c8:	080175a9 	.word	0x080175a9
 80175cc:	080175a9 	.word	0x080175a9
 80175d0:	080175a9 	.word	0x080175a9
 80175d4:	080175a9 	.word	0x080175a9
 80175d8:	0801762d 	.word	0x0801762d
 80175dc:	080175a9 	.word	0x080175a9
 80175e0:	080175a9 	.word	0x080175a9
 80175e4:	080175a9 	.word	0x080175a9
 80175e8:	080175a9 	.word	0x080175a9
 80175ec:	0801772b 	.word	0x0801772b
 80175f0:	08017657 	.word	0x08017657
 80175f4:	080176e5 	.word	0x080176e5
 80175f8:	080175a9 	.word	0x080175a9
 80175fc:	080175a9 	.word	0x080175a9
 8017600:	0801774d 	.word	0x0801774d
 8017604:	080175a9 	.word	0x080175a9
 8017608:	08017657 	.word	0x08017657
 801760c:	080175a9 	.word	0x080175a9
 8017610:	080175a9 	.word	0x080175a9
 8017614:	080176ed 	.word	0x080176ed
 8017618:	6833      	ldr	r3, [r6, #0]
 801761a:	1d1a      	adds	r2, r3, #4
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	6032      	str	r2, [r6, #0]
 8017620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017628:	2301      	movs	r3, #1
 801762a:	e09c      	b.n	8017766 <_printf_i+0x1e6>
 801762c:	6833      	ldr	r3, [r6, #0]
 801762e:	6820      	ldr	r0, [r4, #0]
 8017630:	1d19      	adds	r1, r3, #4
 8017632:	6031      	str	r1, [r6, #0]
 8017634:	0606      	lsls	r6, r0, #24
 8017636:	d501      	bpl.n	801763c <_printf_i+0xbc>
 8017638:	681d      	ldr	r5, [r3, #0]
 801763a:	e003      	b.n	8017644 <_printf_i+0xc4>
 801763c:	0645      	lsls	r5, r0, #25
 801763e:	d5fb      	bpl.n	8017638 <_printf_i+0xb8>
 8017640:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017644:	2d00      	cmp	r5, #0
 8017646:	da03      	bge.n	8017650 <_printf_i+0xd0>
 8017648:	232d      	movs	r3, #45	@ 0x2d
 801764a:	426d      	negs	r5, r5
 801764c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017650:	4858      	ldr	r0, [pc, #352]	@ (80177b4 <_printf_i+0x234>)
 8017652:	230a      	movs	r3, #10
 8017654:	e011      	b.n	801767a <_printf_i+0xfa>
 8017656:	6821      	ldr	r1, [r4, #0]
 8017658:	6833      	ldr	r3, [r6, #0]
 801765a:	0608      	lsls	r0, r1, #24
 801765c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017660:	d402      	bmi.n	8017668 <_printf_i+0xe8>
 8017662:	0649      	lsls	r1, r1, #25
 8017664:	bf48      	it	mi
 8017666:	b2ad      	uxthmi	r5, r5
 8017668:	2f6f      	cmp	r7, #111	@ 0x6f
 801766a:	4852      	ldr	r0, [pc, #328]	@ (80177b4 <_printf_i+0x234>)
 801766c:	6033      	str	r3, [r6, #0]
 801766e:	bf14      	ite	ne
 8017670:	230a      	movne	r3, #10
 8017672:	2308      	moveq	r3, #8
 8017674:	2100      	movs	r1, #0
 8017676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801767a:	6866      	ldr	r6, [r4, #4]
 801767c:	60a6      	str	r6, [r4, #8]
 801767e:	2e00      	cmp	r6, #0
 8017680:	db05      	blt.n	801768e <_printf_i+0x10e>
 8017682:	6821      	ldr	r1, [r4, #0]
 8017684:	432e      	orrs	r6, r5
 8017686:	f021 0104 	bic.w	r1, r1, #4
 801768a:	6021      	str	r1, [r4, #0]
 801768c:	d04b      	beq.n	8017726 <_printf_i+0x1a6>
 801768e:	4616      	mov	r6, r2
 8017690:	fbb5 f1f3 	udiv	r1, r5, r3
 8017694:	fb03 5711 	mls	r7, r3, r1, r5
 8017698:	5dc7      	ldrb	r7, [r0, r7]
 801769a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801769e:	462f      	mov	r7, r5
 80176a0:	42bb      	cmp	r3, r7
 80176a2:	460d      	mov	r5, r1
 80176a4:	d9f4      	bls.n	8017690 <_printf_i+0x110>
 80176a6:	2b08      	cmp	r3, #8
 80176a8:	d10b      	bne.n	80176c2 <_printf_i+0x142>
 80176aa:	6823      	ldr	r3, [r4, #0]
 80176ac:	07df      	lsls	r7, r3, #31
 80176ae:	d508      	bpl.n	80176c2 <_printf_i+0x142>
 80176b0:	6923      	ldr	r3, [r4, #16]
 80176b2:	6861      	ldr	r1, [r4, #4]
 80176b4:	4299      	cmp	r1, r3
 80176b6:	bfde      	ittt	le
 80176b8:	2330      	movle	r3, #48	@ 0x30
 80176ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80176be:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80176c2:	1b92      	subs	r2, r2, r6
 80176c4:	6122      	str	r2, [r4, #16]
 80176c6:	f8cd a000 	str.w	sl, [sp]
 80176ca:	464b      	mov	r3, r9
 80176cc:	aa03      	add	r2, sp, #12
 80176ce:	4621      	mov	r1, r4
 80176d0:	4640      	mov	r0, r8
 80176d2:	f7ff fee7 	bl	80174a4 <_printf_common>
 80176d6:	3001      	adds	r0, #1
 80176d8:	d14a      	bne.n	8017770 <_printf_i+0x1f0>
 80176da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80176de:	b004      	add	sp, #16
 80176e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176e4:	6823      	ldr	r3, [r4, #0]
 80176e6:	f043 0320 	orr.w	r3, r3, #32
 80176ea:	6023      	str	r3, [r4, #0]
 80176ec:	4832      	ldr	r0, [pc, #200]	@ (80177b8 <_printf_i+0x238>)
 80176ee:	2778      	movs	r7, #120	@ 0x78
 80176f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80176f4:	6823      	ldr	r3, [r4, #0]
 80176f6:	6831      	ldr	r1, [r6, #0]
 80176f8:	061f      	lsls	r7, r3, #24
 80176fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80176fe:	d402      	bmi.n	8017706 <_printf_i+0x186>
 8017700:	065f      	lsls	r7, r3, #25
 8017702:	bf48      	it	mi
 8017704:	b2ad      	uxthmi	r5, r5
 8017706:	6031      	str	r1, [r6, #0]
 8017708:	07d9      	lsls	r1, r3, #31
 801770a:	bf44      	itt	mi
 801770c:	f043 0320 	orrmi.w	r3, r3, #32
 8017710:	6023      	strmi	r3, [r4, #0]
 8017712:	b11d      	cbz	r5, 801771c <_printf_i+0x19c>
 8017714:	2310      	movs	r3, #16
 8017716:	e7ad      	b.n	8017674 <_printf_i+0xf4>
 8017718:	4826      	ldr	r0, [pc, #152]	@ (80177b4 <_printf_i+0x234>)
 801771a:	e7e9      	b.n	80176f0 <_printf_i+0x170>
 801771c:	6823      	ldr	r3, [r4, #0]
 801771e:	f023 0320 	bic.w	r3, r3, #32
 8017722:	6023      	str	r3, [r4, #0]
 8017724:	e7f6      	b.n	8017714 <_printf_i+0x194>
 8017726:	4616      	mov	r6, r2
 8017728:	e7bd      	b.n	80176a6 <_printf_i+0x126>
 801772a:	6833      	ldr	r3, [r6, #0]
 801772c:	6825      	ldr	r5, [r4, #0]
 801772e:	6961      	ldr	r1, [r4, #20]
 8017730:	1d18      	adds	r0, r3, #4
 8017732:	6030      	str	r0, [r6, #0]
 8017734:	062e      	lsls	r6, r5, #24
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	d501      	bpl.n	801773e <_printf_i+0x1be>
 801773a:	6019      	str	r1, [r3, #0]
 801773c:	e002      	b.n	8017744 <_printf_i+0x1c4>
 801773e:	0668      	lsls	r0, r5, #25
 8017740:	d5fb      	bpl.n	801773a <_printf_i+0x1ba>
 8017742:	8019      	strh	r1, [r3, #0]
 8017744:	2300      	movs	r3, #0
 8017746:	6123      	str	r3, [r4, #16]
 8017748:	4616      	mov	r6, r2
 801774a:	e7bc      	b.n	80176c6 <_printf_i+0x146>
 801774c:	6833      	ldr	r3, [r6, #0]
 801774e:	1d1a      	adds	r2, r3, #4
 8017750:	6032      	str	r2, [r6, #0]
 8017752:	681e      	ldr	r6, [r3, #0]
 8017754:	6862      	ldr	r2, [r4, #4]
 8017756:	2100      	movs	r1, #0
 8017758:	4630      	mov	r0, r6
 801775a:	f7e8 fdc1 	bl	80002e0 <memchr>
 801775e:	b108      	cbz	r0, 8017764 <_printf_i+0x1e4>
 8017760:	1b80      	subs	r0, r0, r6
 8017762:	6060      	str	r0, [r4, #4]
 8017764:	6863      	ldr	r3, [r4, #4]
 8017766:	6123      	str	r3, [r4, #16]
 8017768:	2300      	movs	r3, #0
 801776a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801776e:	e7aa      	b.n	80176c6 <_printf_i+0x146>
 8017770:	6923      	ldr	r3, [r4, #16]
 8017772:	4632      	mov	r2, r6
 8017774:	4649      	mov	r1, r9
 8017776:	4640      	mov	r0, r8
 8017778:	47d0      	blx	sl
 801777a:	3001      	adds	r0, #1
 801777c:	d0ad      	beq.n	80176da <_printf_i+0x15a>
 801777e:	6823      	ldr	r3, [r4, #0]
 8017780:	079b      	lsls	r3, r3, #30
 8017782:	d413      	bmi.n	80177ac <_printf_i+0x22c>
 8017784:	68e0      	ldr	r0, [r4, #12]
 8017786:	9b03      	ldr	r3, [sp, #12]
 8017788:	4298      	cmp	r0, r3
 801778a:	bfb8      	it	lt
 801778c:	4618      	movlt	r0, r3
 801778e:	e7a6      	b.n	80176de <_printf_i+0x15e>
 8017790:	2301      	movs	r3, #1
 8017792:	4632      	mov	r2, r6
 8017794:	4649      	mov	r1, r9
 8017796:	4640      	mov	r0, r8
 8017798:	47d0      	blx	sl
 801779a:	3001      	adds	r0, #1
 801779c:	d09d      	beq.n	80176da <_printf_i+0x15a>
 801779e:	3501      	adds	r5, #1
 80177a0:	68e3      	ldr	r3, [r4, #12]
 80177a2:	9903      	ldr	r1, [sp, #12]
 80177a4:	1a5b      	subs	r3, r3, r1
 80177a6:	42ab      	cmp	r3, r5
 80177a8:	dcf2      	bgt.n	8017790 <_printf_i+0x210>
 80177aa:	e7eb      	b.n	8017784 <_printf_i+0x204>
 80177ac:	2500      	movs	r5, #0
 80177ae:	f104 0619 	add.w	r6, r4, #25
 80177b2:	e7f5      	b.n	80177a0 <_printf_i+0x220>
 80177b4:	0801d21d 	.word	0x0801d21d
 80177b8:	0801d22e 	.word	0x0801d22e

080177bc <__malloc_lock>:
 80177bc:	4801      	ldr	r0, [pc, #4]	@ (80177c4 <__malloc_lock+0x8>)
 80177be:	f7ff bc67 	b.w	8017090 <__retarget_lock_acquire_recursive>
 80177c2:	bf00      	nop
 80177c4:	24006274 	.word	0x24006274

080177c8 <__malloc_unlock>:
 80177c8:	4801      	ldr	r0, [pc, #4]	@ (80177d0 <__malloc_unlock+0x8>)
 80177ca:	f7ff bc62 	b.w	8017092 <__retarget_lock_release_recursive>
 80177ce:	bf00      	nop
 80177d0:	24006274 	.word	0x24006274

080177d4 <_realloc_r>:
 80177d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d8:	4607      	mov	r7, r0
 80177da:	4614      	mov	r4, r2
 80177dc:	460d      	mov	r5, r1
 80177de:	b921      	cbnz	r1, 80177ea <_realloc_r+0x16>
 80177e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177e4:	4611      	mov	r1, r2
 80177e6:	f7ff bddd 	b.w	80173a4 <_malloc_r>
 80177ea:	b92a      	cbnz	r2, 80177f8 <_realloc_r+0x24>
 80177ec:	f000 f84a 	bl	8017884 <_free_r>
 80177f0:	4625      	mov	r5, r4
 80177f2:	4628      	mov	r0, r5
 80177f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177f8:	f000 f88e 	bl	8017918 <_malloc_usable_size_r>
 80177fc:	4284      	cmp	r4, r0
 80177fe:	4606      	mov	r6, r0
 8017800:	d802      	bhi.n	8017808 <_realloc_r+0x34>
 8017802:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017806:	d8f4      	bhi.n	80177f2 <_realloc_r+0x1e>
 8017808:	4621      	mov	r1, r4
 801780a:	4638      	mov	r0, r7
 801780c:	f7ff fdca 	bl	80173a4 <_malloc_r>
 8017810:	4680      	mov	r8, r0
 8017812:	b908      	cbnz	r0, 8017818 <_realloc_r+0x44>
 8017814:	4645      	mov	r5, r8
 8017816:	e7ec      	b.n	80177f2 <_realloc_r+0x1e>
 8017818:	42b4      	cmp	r4, r6
 801781a:	4622      	mov	r2, r4
 801781c:	4629      	mov	r1, r5
 801781e:	bf28      	it	cs
 8017820:	4632      	movcs	r2, r6
 8017822:	f7ff fc37 	bl	8017094 <memcpy>
 8017826:	4629      	mov	r1, r5
 8017828:	4638      	mov	r0, r7
 801782a:	f000 f82b 	bl	8017884 <_free_r>
 801782e:	e7f1      	b.n	8017814 <_realloc_r+0x40>

08017830 <memmove>:
 8017830:	4288      	cmp	r0, r1
 8017832:	b510      	push	{r4, lr}
 8017834:	eb01 0402 	add.w	r4, r1, r2
 8017838:	d902      	bls.n	8017840 <memmove+0x10>
 801783a:	4284      	cmp	r4, r0
 801783c:	4623      	mov	r3, r4
 801783e:	d807      	bhi.n	8017850 <memmove+0x20>
 8017840:	1e43      	subs	r3, r0, #1
 8017842:	42a1      	cmp	r1, r4
 8017844:	d008      	beq.n	8017858 <memmove+0x28>
 8017846:	f811 2b01 	ldrb.w	r2, [r1], #1
 801784a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801784e:	e7f8      	b.n	8017842 <memmove+0x12>
 8017850:	4402      	add	r2, r0
 8017852:	4601      	mov	r1, r0
 8017854:	428a      	cmp	r2, r1
 8017856:	d100      	bne.n	801785a <memmove+0x2a>
 8017858:	bd10      	pop	{r4, pc}
 801785a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801785e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017862:	e7f7      	b.n	8017854 <memmove+0x24>

08017864 <_sbrk_r>:
 8017864:	b538      	push	{r3, r4, r5, lr}
 8017866:	4d06      	ldr	r5, [pc, #24]	@ (8017880 <_sbrk_r+0x1c>)
 8017868:	2300      	movs	r3, #0
 801786a:	4604      	mov	r4, r0
 801786c:	4608      	mov	r0, r1
 801786e:	602b      	str	r3, [r5, #0]
 8017870:	f7ed f986 	bl	8004b80 <_sbrk>
 8017874:	1c43      	adds	r3, r0, #1
 8017876:	d102      	bne.n	801787e <_sbrk_r+0x1a>
 8017878:	682b      	ldr	r3, [r5, #0]
 801787a:	b103      	cbz	r3, 801787e <_sbrk_r+0x1a>
 801787c:	6023      	str	r3, [r4, #0]
 801787e:	bd38      	pop	{r3, r4, r5, pc}
 8017880:	24006280 	.word	0x24006280

08017884 <_free_r>:
 8017884:	b538      	push	{r3, r4, r5, lr}
 8017886:	4605      	mov	r5, r0
 8017888:	2900      	cmp	r1, #0
 801788a:	d041      	beq.n	8017910 <_free_r+0x8c>
 801788c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017890:	1f0c      	subs	r4, r1, #4
 8017892:	2b00      	cmp	r3, #0
 8017894:	bfb8      	it	lt
 8017896:	18e4      	addlt	r4, r4, r3
 8017898:	f7ff ff90 	bl	80177bc <__malloc_lock>
 801789c:	4a1d      	ldr	r2, [pc, #116]	@ (8017914 <_free_r+0x90>)
 801789e:	6813      	ldr	r3, [r2, #0]
 80178a0:	b933      	cbnz	r3, 80178b0 <_free_r+0x2c>
 80178a2:	6063      	str	r3, [r4, #4]
 80178a4:	6014      	str	r4, [r2, #0]
 80178a6:	4628      	mov	r0, r5
 80178a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80178ac:	f7ff bf8c 	b.w	80177c8 <__malloc_unlock>
 80178b0:	42a3      	cmp	r3, r4
 80178b2:	d908      	bls.n	80178c6 <_free_r+0x42>
 80178b4:	6820      	ldr	r0, [r4, #0]
 80178b6:	1821      	adds	r1, r4, r0
 80178b8:	428b      	cmp	r3, r1
 80178ba:	bf01      	itttt	eq
 80178bc:	6819      	ldreq	r1, [r3, #0]
 80178be:	685b      	ldreq	r3, [r3, #4]
 80178c0:	1809      	addeq	r1, r1, r0
 80178c2:	6021      	streq	r1, [r4, #0]
 80178c4:	e7ed      	b.n	80178a2 <_free_r+0x1e>
 80178c6:	461a      	mov	r2, r3
 80178c8:	685b      	ldr	r3, [r3, #4]
 80178ca:	b10b      	cbz	r3, 80178d0 <_free_r+0x4c>
 80178cc:	42a3      	cmp	r3, r4
 80178ce:	d9fa      	bls.n	80178c6 <_free_r+0x42>
 80178d0:	6811      	ldr	r1, [r2, #0]
 80178d2:	1850      	adds	r0, r2, r1
 80178d4:	42a0      	cmp	r0, r4
 80178d6:	d10b      	bne.n	80178f0 <_free_r+0x6c>
 80178d8:	6820      	ldr	r0, [r4, #0]
 80178da:	4401      	add	r1, r0
 80178dc:	1850      	adds	r0, r2, r1
 80178de:	4283      	cmp	r3, r0
 80178e0:	6011      	str	r1, [r2, #0]
 80178e2:	d1e0      	bne.n	80178a6 <_free_r+0x22>
 80178e4:	6818      	ldr	r0, [r3, #0]
 80178e6:	685b      	ldr	r3, [r3, #4]
 80178e8:	6053      	str	r3, [r2, #4]
 80178ea:	4408      	add	r0, r1
 80178ec:	6010      	str	r0, [r2, #0]
 80178ee:	e7da      	b.n	80178a6 <_free_r+0x22>
 80178f0:	d902      	bls.n	80178f8 <_free_r+0x74>
 80178f2:	230c      	movs	r3, #12
 80178f4:	602b      	str	r3, [r5, #0]
 80178f6:	e7d6      	b.n	80178a6 <_free_r+0x22>
 80178f8:	6820      	ldr	r0, [r4, #0]
 80178fa:	1821      	adds	r1, r4, r0
 80178fc:	428b      	cmp	r3, r1
 80178fe:	bf04      	itt	eq
 8017900:	6819      	ldreq	r1, [r3, #0]
 8017902:	685b      	ldreq	r3, [r3, #4]
 8017904:	6063      	str	r3, [r4, #4]
 8017906:	bf04      	itt	eq
 8017908:	1809      	addeq	r1, r1, r0
 801790a:	6021      	streq	r1, [r4, #0]
 801790c:	6054      	str	r4, [r2, #4]
 801790e:	e7ca      	b.n	80178a6 <_free_r+0x22>
 8017910:	bd38      	pop	{r3, r4, r5, pc}
 8017912:	bf00      	nop
 8017914:	2400627c 	.word	0x2400627c

08017918 <_malloc_usable_size_r>:
 8017918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801791c:	1f18      	subs	r0, r3, #4
 801791e:	2b00      	cmp	r3, #0
 8017920:	bfbc      	itt	lt
 8017922:	580b      	ldrlt	r3, [r1, r0]
 8017924:	18c0      	addlt	r0, r0, r3
 8017926:	4770      	bx	lr

08017928 <checkint>:
 8017928:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801792c:	2b7e      	cmp	r3, #126	@ 0x7e
 801792e:	d910      	bls.n	8017952 <checkint+0x2a>
 8017930:	2b96      	cmp	r3, #150	@ 0x96
 8017932:	d80c      	bhi.n	801794e <checkint+0x26>
 8017934:	2201      	movs	r2, #1
 8017936:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801793a:	fa02 f303 	lsl.w	r3, r2, r3
 801793e:	1e5a      	subs	r2, r3, #1
 8017940:	4202      	tst	r2, r0
 8017942:	d106      	bne.n	8017952 <checkint+0x2a>
 8017944:	4203      	tst	r3, r0
 8017946:	bf14      	ite	ne
 8017948:	2001      	movne	r0, #1
 801794a:	2002      	moveq	r0, #2
 801794c:	4770      	bx	lr
 801794e:	2002      	movs	r0, #2
 8017950:	4770      	bx	lr
 8017952:	2000      	movs	r0, #0
 8017954:	4770      	bx	lr
	...

08017958 <powf>:
 8017958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801795a:	ee10 1a10 	vmov	r1, s0
 801795e:	ee10 4a90 	vmov	r4, s1
 8017962:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 8017966:	0063      	lsls	r3, r4, #1
 8017968:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 801796c:	eef0 7a40 	vmov.f32	s15, s0
 8017970:	eeb0 7a60 	vmov.f32	s14, s1
 8017974:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8017978:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 801797c:	d252      	bcs.n	8017a24 <powf+0xcc>
 801797e:	4290      	cmp	r0, r2
 8017980:	d258      	bcs.n	8017a34 <powf+0xdc>
 8017982:	2000      	movs	r0, #0
 8017984:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8017988:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 801798c:	4a9e      	ldr	r2, [pc, #632]	@ (8017c08 <powf+0x2b0>)
 801798e:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8017992:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8017996:	f36f 0316 	bfc	r3, #0, #23
 801799a:	1ac9      	subs	r1, r1, r3
 801799c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80179a0:	ee07 1a90 	vmov	s15, r1
 80179a4:	ed94 5b02 	vldr	d5, [r4, #8]
 80179a8:	ed94 4b00 	vldr	d4, [r4]
 80179ac:	15db      	asrs	r3, r3, #23
 80179ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80179b2:	ee07 3a90 	vmov	s15, r3
 80179b6:	eea4 2b06 	vfma.f64	d2, d4, d6
 80179ba:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 80179be:	ee22 4b02 	vmul.f64	d4, d2, d2
 80179c2:	ee24 0b04 	vmul.f64	d0, d4, d4
 80179c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80179ca:	ee36 6b05 	vadd.f64	d6, d6, d5
 80179ce:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 80179d2:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 80179d6:	eea2 1b05 	vfma.f64	d1, d2, d5
 80179da:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 80179de:	eea2 5b03 	vfma.f64	d5, d2, d3
 80179e2:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 80179e6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80179ea:	eea2 6b03 	vfma.f64	d6, d2, d3
 80179ee:	eea4 6b05 	vfma.f64	d6, d4, d5
 80179f2:	eea1 6b00 	vfma.f64	d6, d1, d0
 80179f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80179fa:	ee17 3a90 	vmov	r3, s15
 80179fe:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8017a02:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 8017a06:	429a      	cmp	r2, r3
 8017a08:	f0c0 8098 	bcc.w	8017b3c <powf+0x1e4>
 8017a0c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8017be8 <powf+0x290>
 8017a10:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a18:	dd79      	ble.n	8017b0e <powf+0x1b6>
 8017a1a:	b003      	add	sp, #12
 8017a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a20:	f000 b920 	b.w	8017c64 <__math_oflowf>
 8017a24:	4290      	cmp	r0, r2
 8017a26:	d330      	bcc.n	8017a8a <powf+0x132>
 8017a28:	b12b      	cbz	r3, 8017a36 <powf+0xde>
 8017a2a:	0049      	lsls	r1, r1, #1
 8017a2c:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8017a30:	d808      	bhi.n	8017a44 <powf+0xec>
 8017a32:	e015      	b.n	8017a60 <powf+0x108>
 8017a34:	b953      	cbnz	r3, 8017a4c <powf+0xf4>
 8017a36:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 8017a3a:	0049      	lsls	r1, r1, #1
 8017a3c:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 8017a40:	f240 80ca 	bls.w	8017bd8 <powf+0x280>
 8017a44:	ee37 0a87 	vadd.f32	s0, s15, s14
 8017a48:	b003      	add	sp, #12
 8017a4a:	bd30      	pop	{r4, r5, pc}
 8017a4c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8017a50:	d105      	bne.n	8017a5e <powf+0x106>
 8017a52:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8017a56:	0064      	lsls	r4, r4, #1
 8017a58:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8017a5c:	e7f0      	b.n	8017a40 <powf+0xe8>
 8017a5e:	0049      	lsls	r1, r1, #1
 8017a60:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 8017a64:	d1ee      	bne.n	8017a44 <powf+0xec>
 8017a66:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8017a6a:	f000 80b5 	beq.w	8017bd8 <powf+0x280>
 8017a6e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8017a72:	ea6f 0404 	mvn.w	r4, r4
 8017a76:	bf34      	ite	cc
 8017a78:	2100      	movcc	r1, #0
 8017a7a:	2101      	movcs	r1, #1
 8017a7c:	0fe4      	lsrs	r4, r4, #31
 8017a7e:	42a1      	cmp	r1, r4
 8017a80:	f040 80ad 	bne.w	8017bde <powf+0x286>
 8017a84:	ee27 0a07 	vmul.f32	s0, s14, s14
 8017a88:	e7de      	b.n	8017a48 <powf+0xf0>
 8017a8a:	004d      	lsls	r5, r1, #1
 8017a8c:	1e6b      	subs	r3, r5, #1
 8017a8e:	4293      	cmp	r3, r2
 8017a90:	d31b      	bcc.n	8017aca <powf+0x172>
 8017a92:	2900      	cmp	r1, #0
 8017a94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017a98:	da0e      	bge.n	8017ab8 <powf+0x160>
 8017a9a:	4620      	mov	r0, r4
 8017a9c:	f7ff ff44 	bl	8017928 <checkint>
 8017aa0:	2801      	cmp	r0, #1
 8017aa2:	d109      	bne.n	8017ab8 <powf+0x160>
 8017aa4:	eeb1 0a40 	vneg.f32	s0, s0
 8017aa8:	b945      	cbnz	r5, 8017abc <powf+0x164>
 8017aaa:	2c00      	cmp	r4, #0
 8017aac:	dacc      	bge.n	8017a48 <powf+0xf0>
 8017aae:	b003      	add	sp, #12
 8017ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ab4:	f000 b8dc 	b.w	8017c70 <__math_divzerof>
 8017ab8:	2000      	movs	r0, #0
 8017aba:	e7f5      	b.n	8017aa8 <powf+0x150>
 8017abc:	2c00      	cmp	r4, #0
 8017abe:	dac3      	bge.n	8017a48 <powf+0xf0>
 8017ac0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017ac4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017ac8:	e7be      	b.n	8017a48 <powf+0xf0>
 8017aca:	2900      	cmp	r1, #0
 8017acc:	da1d      	bge.n	8017b0a <powf+0x1b2>
 8017ace:	4620      	mov	r0, r4
 8017ad0:	f7ff ff2a 	bl	8017928 <checkint>
 8017ad4:	b920      	cbnz	r0, 8017ae0 <powf+0x188>
 8017ad6:	b003      	add	sp, #12
 8017ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017adc:	f000 b8da 	b.w	8017c94 <__math_invalidf>
 8017ae0:	1e43      	subs	r3, r0, #1
 8017ae2:	4258      	negs	r0, r3
 8017ae4:	4158      	adcs	r0, r3
 8017ae6:	0400      	lsls	r0, r0, #16
 8017ae8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8017aec:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8017af0:	f4bf af48 	bcs.w	8017984 <powf+0x2c>
 8017af4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8017c0c <powf+0x2b4>
 8017af8:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8017afc:	ee10 3a10 	vmov	r3, s0
 8017b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017b04:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8017b08:	e73c      	b.n	8017984 <powf+0x2c>
 8017b0a:	2000      	movs	r0, #0
 8017b0c:	e7ee      	b.n	8017aec <powf+0x194>
 8017b0e:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8017bf0 <powf+0x298>
 8017b12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b1a:	dd45      	ble.n	8017ba8 <powf+0x250>
 8017b1c:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8017b20:	b3d0      	cbz	r0, 8017b98 <powf+0x240>
 8017b22:	9301      	str	r3, [sp, #4]
 8017b24:	eddd 6a01 	vldr	s13, [sp, #4]
 8017b28:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8017b2c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8017b30:	eef4 6a46 	vcmp.f32	s13, s12
 8017b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b38:	f47f af6f 	bne.w	8017a1a <powf+0xc2>
 8017b3c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8017b40:	4b33      	ldr	r3, [pc, #204]	@ (8017c10 <powf+0x2b8>)
 8017b42:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 8017b46:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017b4a:	ee16 2a10 	vmov	r2, s12
 8017b4e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017b52:	f002 011f 	and.w	r1, r2, #31
 8017b56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017b5a:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8017b5e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8017b62:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8017b66:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8017b6a:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8017b6e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017b72:	686d      	ldr	r5, [r5, #4]
 8017b74:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8017b78:	1880      	adds	r0, r0, r2
 8017b7a:	2100      	movs	r1, #0
 8017b7c:	190a      	adds	r2, r1, r4
 8017b7e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8017b82:	eea7 0b05 	vfma.f64	d0, d7, d5
 8017b86:	ec43 2b17 	vmov	d7, r2, r3
 8017b8a:	eea6 0b04 	vfma.f64	d0, d6, d4
 8017b8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017b92:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017b96:	e757      	b.n	8017a48 <powf+0xf0>
 8017b98:	9300      	str	r3, [sp, #0]
 8017b9a:	eddd 6a00 	vldr	s13, [sp]
 8017b9e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8017ba2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017ba6:	e7c3      	b.n	8017b30 <powf+0x1d8>
 8017ba8:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8017bf8 <powf+0x2a0>
 8017bac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bb4:	d804      	bhi.n	8017bc0 <powf+0x268>
 8017bb6:	b003      	add	sp, #12
 8017bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bbc:	f000 b846 	b.w	8017c4c <__math_uflowf>
 8017bc0:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8017c00 <powf+0x2a8>
 8017bc4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bcc:	d5b6      	bpl.n	8017b3c <powf+0x1e4>
 8017bce:	b003      	add	sp, #12
 8017bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bd4:	f000 b840 	b.w	8017c58 <__math_may_uflowf>
 8017bd8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017bdc:	e734      	b.n	8017a48 <powf+0xf0>
 8017bde:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8017c14 <powf+0x2bc>
 8017be2:	e731      	b.n	8017a48 <powf+0xf0>
 8017be4:	f3af 8000 	nop.w
 8017be8:	ffd1d571 	.word	0xffd1d571
 8017bec:	405fffff 	.word	0x405fffff
 8017bf0:	ffa3aae2 	.word	0xffa3aae2
 8017bf4:	405fffff 	.word	0x405fffff
 8017bf8:	00000000 	.word	0x00000000
 8017bfc:	c062c000 	.word	0xc062c000
 8017c00:	00000000 	.word	0x00000000
 8017c04:	c062a000 	.word	0xc062a000
 8017c08:	0801d388 	.word	0x0801d388
 8017c0c:	4b000000 	.word	0x4b000000
 8017c10:	0801d240 	.word	0x0801d240
 8017c14:	00000000 	.word	0x00000000

08017c18 <with_errnof>:
 8017c18:	b510      	push	{r4, lr}
 8017c1a:	ed2d 8b02 	vpush	{d8}
 8017c1e:	eeb0 8a40 	vmov.f32	s16, s0
 8017c22:	4604      	mov	r4, r0
 8017c24:	f7ff fa0a 	bl	801703c <__errno>
 8017c28:	eeb0 0a48 	vmov.f32	s0, s16
 8017c2c:	ecbd 8b02 	vpop	{d8}
 8017c30:	6004      	str	r4, [r0, #0]
 8017c32:	bd10      	pop	{r4, pc}

08017c34 <xflowf>:
 8017c34:	b130      	cbz	r0, 8017c44 <xflowf+0x10>
 8017c36:	eef1 7a40 	vneg.f32	s15, s0
 8017c3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017c3e:	2022      	movs	r0, #34	@ 0x22
 8017c40:	f7ff bfea 	b.w	8017c18 <with_errnof>
 8017c44:	eef0 7a40 	vmov.f32	s15, s0
 8017c48:	e7f7      	b.n	8017c3a <xflowf+0x6>
	...

08017c4c <__math_uflowf>:
 8017c4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017c54 <__math_uflowf+0x8>
 8017c50:	f7ff bff0 	b.w	8017c34 <xflowf>
 8017c54:	10000000 	.word	0x10000000

08017c58 <__math_may_uflowf>:
 8017c58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017c60 <__math_may_uflowf+0x8>
 8017c5c:	f7ff bfea 	b.w	8017c34 <xflowf>
 8017c60:	1a200000 	.word	0x1a200000

08017c64 <__math_oflowf>:
 8017c64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017c6c <__math_oflowf+0x8>
 8017c68:	f7ff bfe4 	b.w	8017c34 <xflowf>
 8017c6c:	70000000 	.word	0x70000000

08017c70 <__math_divzerof>:
 8017c70:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8017c90 <__math_divzerof+0x20>
 8017c74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017c78:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017c7c:	2800      	cmp	r0, #0
 8017c7e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8017c82:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8017c86:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017c8a:	f7ff bfc5 	b.w	8017c18 <with_errnof>
 8017c8e:	bf00      	nop
 8017c90:	00000000 	.word	0x00000000

08017c94 <__math_invalidf>:
 8017c94:	eef0 7a40 	vmov.f32	s15, s0
 8017c98:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017c9c:	eef4 7a67 	vcmp.f32	s15, s15
 8017ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ca4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017ca8:	d602      	bvs.n	8017cb0 <__math_invalidf+0x1c>
 8017caa:	2021      	movs	r0, #33	@ 0x21
 8017cac:	f7ff bfb4 	b.w	8017c18 <with_errnof>
 8017cb0:	4770      	bx	lr
	...

08017cb4 <_init>:
 8017cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cb6:	bf00      	nop
 8017cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cba:	bc08      	pop	{r3}
 8017cbc:	469e      	mov	lr, r3
 8017cbe:	4770      	bx	lr

08017cc0 <_fini>:
 8017cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cc2:	bf00      	nop
 8017cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cc6:	bc08      	pop	{r3}
 8017cc8:	469e      	mov	lr, r3
 8017cca:	4770      	bx	lr
