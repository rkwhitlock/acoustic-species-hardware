
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae38  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800b0d8  0800b0d8  0000c0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b464  0800b464  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b464  0800b464  0000c464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b46c  0800b46c  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b46c  0800b46c  0000c46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b470  0800b470  0000c470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800b474  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  240001d8  0800b64c  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240006f4  0800b64c  0000d6f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db89  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b9  00000000  00000000  0001ad8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0001ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089a  00000000  00000000  0001d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fc31  00000000  00000000  0001e24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a1f  00000000  00000000  0005de7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00199d2f  00000000  00000000  0006e89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002085c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b38  00000000  00000000  0020860c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0020c144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b0c0 	.word	0x0800b0c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800b0c0 	.word	0x0800b0c0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	@ (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	@ (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	@ (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	@ (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	@ (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	@ (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	@ (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	@ (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	@ (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	@ (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	@ (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	@ (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	@ (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	@ (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	@ (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	@ (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	@ (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000464:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <main>:
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai);
void Error_Handler(void);

// Main function
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 80004c0:	f000 fc4a 	bl	8000d58 <HAL_Init>

    // Initialize system
    SystemClock_Config();
 80004c4:	f000 f834 	bl	8000530 <SystemClock_Config>
    MX_GPIO_Init();
 80004c8:	f000 f93c 	bl	8000744 <MX_GPIO_Init>
    MX_DMA_Init();
 80004cc:	f000 f9f2 	bl	80008b4 <MX_DMA_Init>
    MX_SAI1_Init();
 80004d0:	f000 f980 	bl	80007d4 <MX_SAI1_Init>

    // Start SAI reception using DMA in circular mode
    if (HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)audio_buffer, BUFFER_LEN) != HAL_OK)
 80004d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <main+0x60>)
 80004da:	4811      	ldr	r0, [pc, #68]	@ (8000520 <main+0x64>)
 80004dc:	f007 fe94 	bl	8008208 <HAL_SAI_Receive_DMA>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <main+0x2e>
    {
        // Reception error
        Error_Handler();
 80004e6:	f000 fa99 	bl	8000a1c <Error_Handler>

    // Main processing loop
    while (1)
    {
        // Process first half of buffer
        if (buffer_half_ready)
 80004ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <main+0x68>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d006      	beq.n	8000502 <main+0x46>
        {
            ProcessAudioData(&audio_buffer[0], BUFFER_LEN / 2);
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	4809      	ldr	r0, [pc, #36]	@ (800051c <main+0x60>)
 80004f8:	f000 fa5e 	bl	80009b8 <ProcessAudioData>
            buffer_half_ready = 0;
 80004fc:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <main+0x68>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
        }

        // Process second half of buffer
        if (buffer_full_ready)
 8000502:	4b09      	ldr	r3, [pc, #36]	@ (8000528 <main+0x6c>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0ee      	beq.n	80004ea <main+0x2e>
        {
            ProcessAudioData(&audio_buffer[BUFFER_LEN / 2], BUFFER_LEN / 2);
 800050c:	2180      	movs	r1, #128	@ 0x80
 800050e:	4807      	ldr	r0, [pc, #28]	@ (800052c <main+0x70>)
 8000510:	f000 fa52 	bl	80009b8 <ProcessAudioData>
            buffer_full_ready = 0;
 8000514:	4b04      	ldr	r3, [pc, #16]	@ (8000528 <main+0x6c>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
        if (buffer_half_ready)
 800051a:	e7e6      	b.n	80004ea <main+0x2e>
 800051c:	240001f4 	.word	0x240001f4
 8000520:	24000508 	.word	0x24000508
 8000524:	240003f4 	.word	0x240003f4
 8000528:	240003f5 	.word	0x240003f5
 800052c:	240002f4 	.word	0x240002f4

08000530 <SystemClock_Config>:
    }
}

// System clock configuration - optimized for audio applications
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0d0      	sub	sp, #320	@ 0x140
 8000534:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800053a:	224c      	movs	r2, #76	@ 0x4c
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f008 fec6 	bl	80092d0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000548:	2220      	movs	r2, #32
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f008 febf 	bl	80092d0 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000552:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000556:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800055a:	4618      	mov	r0, r3
 800055c:	23c8      	movs	r3, #200	@ 0xc8
 800055e:	461a      	mov	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f008 feb5 	bl	80092d0 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000566:	2004      	movs	r0, #4
 8000568:	f003 fdac 	bl	80040c4 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000570:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	4b6f      	ldr	r3, [pc, #444]	@ (8000738 <SystemClock_Config+0x208>)
 800057a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800057c:	4a6e      	ldr	r2, [pc, #440]	@ (8000738 <SystemClock_Config+0x208>)
 800057e:	f023 0301 	bic.w	r3, r3, #1
 8000582:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000584:	4b6c      	ldr	r3, [pc, #432]	@ (8000738 <SystemClock_Config+0x208>)
 8000586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000588:	f003 0201 	and.w	r2, r3, #1
 800058c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000590:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	4b69      	ldr	r3, [pc, #420]	@ (800073c <SystemClock_Config+0x20c>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a68      	ldr	r2, [pc, #416]	@ (800073c <SystemClock_Config+0x20c>)
 800059c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b66      	ldr	r3, [pc, #408]	@ (800073c <SystemClock_Config+0x20c>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80005aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80005ae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80005b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80005bc:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 80005be:	bf00      	nop
 80005c0:	4b5e      	ldr	r3, [pc, #376]	@ (800073c <SystemClock_Config+0x20c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005cc:	d1f8      	bne.n	80005c0 <SystemClock_Config+0x90>
    {
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 80005ce:	f003 fd69 	bl	80040a4 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005d2:	f000 fc53 	bl	8000e7c <HAL_GetREVID>
 80005d6:	4b5a      	ldr	r3, [pc, #360]	@ (8000740 <SystemClock_Config+0x210>)
 80005d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80005da:	4a59      	ldr	r2, [pc, #356]	@ (8000740 <SystemClock_Config+0x210>)
 80005dc:	f023 0318 	bic.w	r3, r3, #24
 80005e0:	6713      	str	r3, [r2, #112]	@ 0x70

    /** Macro to configure the PLL clock source
     */
    __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005e2:	4b57      	ldr	r3, [pc, #348]	@ (8000740 <SystemClock_Config+0x210>)
 80005e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005e6:	f023 0303 	bic.w	r3, r3, #3
 80005ea:	4a55      	ldr	r2, [pc, #340]	@ (8000740 <SystemClock_Config+0x210>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6293      	str	r3, [r2, #40]	@ 0x28

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	2302      	movs	r3, #2
 8000608:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    RCC_OscInitStruct.PLL.PLLM = 5;
 800060c:	2305      	movs	r3, #5
 800060e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    RCC_OscInitStruct.PLL.PLLN = 160;
 8000612:	23a0      	movs	r3, #160	@ 0xa0
 8000614:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    RCC_OscInitStruct.PLL.PLLP = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800062a:	2308      	movs	r3, #8
 800062c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fd99 	bl	8004178 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x120>
    {
        Error_Handler();
 800064c:	f000 f9e6 	bl	8000a1c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 8000650:	233f      	movs	r3, #63	@ 0x3f
 8000652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 |
                                  RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2303      	movs	r3, #3
 8000658:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000662:	2308      	movs	r3, #8
 8000664:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000668:	2340      	movs	r3, #64	@ 0x40
 800066a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800066e:	2340      	movs	r3, #64	@ 0x40
 8000670:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000674:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000678:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800067c:	2340      	movs	r3, #64	@ 0x40
 800067e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000686:	2102      	movs	r1, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f004 f9cf 	bl	8004a2c <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x168>
    {
        Error_Handler();
 8000694:	f000 f9c2 	bl	8000a1c <Error_Handler>
    }

    /** Configure the SAI PLL for audio clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000698:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800069c:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 80006a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006a4:	f04f 0300 	mov.w	r3, #0
 80006a8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80006ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006b0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80006b4:	2219      	movs	r2, #25
 80006b6:	609a      	str	r2, [r3, #8]
    PeriphClkInitStruct.PLL2.PLL2N = 344;
 80006b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006bc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80006c0:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80006c4:	60da      	str	r2, [r3, #12]
    PeriphClkInitStruct.PLL2.PLL2P = 7; // PLL2P = 344/7 = 49.142MHz for 16kHz * 256 = ~12.58MHz
 80006c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80006ce:	2207      	movs	r2, #7
 80006d0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80006da:	2202      	movs	r2, #2
 80006dc:	615a      	str	r2, [r3, #20]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80006e6:	2202      	movs	r2, #2
 80006e8:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80006ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006ee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000702:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000706:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	@ 0x24
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800070e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000712:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000716:	2201      	movs	r2, #1
 8000718:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fcfa 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x1fe>
    {
        Error_Handler();
 800072a:	f000 f977 	bl	8000a1c <Error_Handler>
    }
}
 800072e:	bf00      	nop
 8000730:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	58000400 	.word	0x58000400
 800073c:	58024800 	.word	0x58024800
 8000740:	58024400 	.word	0x58024400

08000744 <MX_GPIO_Init>:

// GPIO initialization
static void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000760:	f003 0310 	and.w	r3, r3, #16
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	4a09      	ldr	r2, [pc, #36]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_GPIO_Init+0x8c>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

    // Add any specific GPIO pin configurations here if needed
    // for example, LEDs or debug pins
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	58024400 	.word	0x58024400

080007d4 <MX_SAI1_Init>:

// SAI1 initialization with proper audio configuration
static void MX_SAI1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0
    SAI_FrameInitTypeDef FrameInit = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
    SAI_SlotInitTypeDef SlotInit = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]

    /* SAI peripheral configuration */
    hsai_BlockA1.Instance = SAI1_Block_A;
 80007f6:	4b2d      	ldr	r3, [pc, #180]	@ (80008ac <MX_SAI1_Init+0xd8>)
 80007f8:	4a2d      	ldr	r2, [pc, #180]	@ (80008b0 <MX_SAI1_Init+0xdc>)
 80007fa:	601a      	str	r2, [r3, #0]
    hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <MX_SAI1_Init+0xd8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	645a      	str	r2, [r3, #68]	@ 0x44
    hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000802:	4b2a      	ldr	r3, [pc, #168]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000804:	2201      	movs	r2, #1
 8000806:	605a      	str	r2, [r3, #4]
    hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <MX_SAI1_Init+0xd8>)
 800080a:	2280      	movs	r2, #128	@ 0x80
 800080c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800080e:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000810:	2200      	movs	r2, #0
 8000812:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000816:	2200      	movs	r2, #0
 8000818:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800081a:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <MX_SAI1_Init+0xd8>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
    hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
    hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000826:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
    hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_SAI1_Init+0xd8>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
    hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000832:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
    hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8000838:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_SAI1_Init+0xd8>)
 800083a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800083e:	621a      	str	r2, [r3, #32]
    hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000840:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
    hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000846:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000848:	2200      	movs	r2, #0
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_SAI1_Init+0xd8>)
 800084e:	2200      	movs	r2, #0
 8000850:	631a      	str	r2, [r3, #48]	@ 0x30
    hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000854:	2200      	movs	r2, #0
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34
    hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_SAI1_Init+0xd8>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000862:	2200      	movs	r2, #0
 8000864:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsai_BlockA1.Init.PdmInit.ClockEnable = 0;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_SAI1_Init+0xd8>)
 8000868:	2200      	movs	r2, #0
 800086a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800086c:	480f      	ldr	r0, [pc, #60]	@ (80008ac <MX_SAI1_Init+0xd8>)
 800086e:	f007 f991 	bl	8007b94 <HAL_SAI_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_SAI1_Init+0xa8>
    {
        Error_Handler();
 8000878:	f000 f8d0 	bl	8000a1c <Error_Handler>
    }

    /* SAI frame configuration */
    FrameInit.FrameLength = 32;
 800087c:	2320      	movs	r3, #32
 800087e:	617b      	str	r3, [r7, #20]
    FrameInit.ActiveFrameLength = 16;
 8000880:	2310      	movs	r3, #16
 8000882:	61bb      	str	r3, [r7, #24]
    FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
    FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
    FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
    // {
    //     Error_Handler();
    // }

    /* SAI slot configuration */
    SlotInit.FirstBitOffset = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
    SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
    SlotInit.SlotNumber = 2;
 8000898:	2302      	movs	r3, #2
 800089a:	60fb      	str	r3, [r7, #12]
    SlotInit.SlotActive = SAI_SLOTACTIVE_ALL;
 800089c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008a0:	613b      	str	r3, [r7, #16]
    // if (HAL_SAI_SlotInit(&hsai_BlockA1, &SlotInit) != HAL_OK)
    // {
    //     Error_Handler();
    // }
}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	@ 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	24000508 	.word	0x24000508
 80008b0:	40015804 	.word	0x40015804

080008b4 <MX_DMA_Init>:

// DMA initialization for SAI
static void MX_DMA_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80008ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <MX_DMA_Init+0xb4>)
 80008bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008c0:	4a29      	ldr	r2, [pc, #164]	@ (8000968 <MX_DMA_Init+0xb4>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008ca:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <MX_DMA_Init+0xb4>)
 80008cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]

    /* Configure DMA request for SAI1 RX */
    hdma_sai1_a_rx.Instance = DMA1_Stream1;
 80008d8:	4b24      	ldr	r3, [pc, #144]	@ (800096c <MX_DMA_Init+0xb8>)
 80008da:	4a25      	ldr	r2, [pc, #148]	@ (8000970 <MX_DMA_Init+0xbc>)
 80008dc:	601a      	str	r2, [r3, #0]
    hdma_sai1_a_rx.Init.Request = DMA_REQUEST_SAI1_A;
 80008de:	4b23      	ldr	r3, [pc, #140]	@ (800096c <MX_DMA_Init+0xb8>)
 80008e0:	2257      	movs	r2, #87	@ 0x57
 80008e2:	605a      	str	r2, [r3, #4]
    hdma_sai1_a_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e4:	4b21      	ldr	r3, [pc, #132]	@ (800096c <MX_DMA_Init+0xb8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
    hdma_sai1_a_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ea:	4b20      	ldr	r3, [pc, #128]	@ (800096c <MX_DMA_Init+0xb8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
    hdma_sai1_a_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <MX_DMA_Init+0xb8>)
 80008f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f6:	611a      	str	r2, [r3, #16]
    hdma_sai1_a_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <MX_DMA_Init+0xb8>)
 80008fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008fe:	615a      	str	r2, [r3, #20]
    hdma_sai1_a_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_DMA_Init+0xb8>)
 8000902:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000906:	619a      	str	r2, [r3, #24]
    hdma_sai1_a_rx.Init.Mode = DMA_CIRCULAR;
 8000908:	4b18      	ldr	r3, [pc, #96]	@ (800096c <MX_DMA_Init+0xb8>)
 800090a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800090e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000910:	4b16      	ldr	r3, [pc, #88]	@ (800096c <MX_DMA_Init+0xb8>)
 8000912:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000916:	621a      	str	r2, [r3, #32]
    hdma_sai1_a_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_DMA_Init+0xb8>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai1_a_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <MX_DMA_Init+0xb8>)
 8000920:	2203      	movs	r2, #3
 8000922:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai1_a_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_DMA_Init+0xb8>)
 8000926:	2200      	movs	r2, #0
 8000928:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai1_a_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <MX_DMA_Init+0xb8>)
 800092c:	2200      	movs	r2, #0
 800092e:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_DMA_Init(&hdma_sai1_a_rx) != HAL_OK)
 8000930:	480e      	ldr	r0, [pc, #56]	@ (800096c <MX_DMA_Init+0xb8>)
 8000932:	f000 fbbf 	bl	80010b4 <HAL_DMA_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_DMA_Init+0x8c>
    {
        Error_Handler();
 800093c:	f000 f86e 	bl	8000a1c <Error_Handler>
    }

    /* Associate the DMA handle with the SAI handle */
    __HAL_LINKDMA(&hsai_BlockA1, hdmarx, hdma_sai1_a_rx);
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_DMA_Init+0xc0>)
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <MX_DMA_Init+0xb8>)
 8000944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_DMA_Init+0xb8>)
 800094a:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <MX_DMA_Init+0xc0>)
 800094c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Configure NVIC for DMA interrupt */
    HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2105      	movs	r1, #5
 8000952:	200c      	movs	r0, #12
 8000954:	f000 fb79 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000958:	200c      	movs	r0, #12
 800095a:	f000 fb90 	bl	800107e <HAL_NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	58024400 	.word	0x58024400
 800096c:	240003f8 	.word	0x240003f8
 8000970:	40020028 	.word	0x40020028
 8000974:	24000508 	.word	0x24000508

08000978 <HAL_SAI_RxHalfCpltCallback>:
 * @brief  Half completed reception callback
 * @param  hsai: pointer to a SAI_HandleTypeDef structure
 * @retval None
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    /* Set flag to process first half of buffer */
    buffer_half_ready = 1;
 8000980:	4b04      	ldr	r3, [pc, #16]	@ (8000994 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	240003f4 	.word	0x240003f4

08000998 <HAL_SAI_RxCpltCallback>:
 * @brief  Completed reception callback
 * @param  hsai: pointer to a SAI_HandleTypeDef structure
 * @retval None
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    /* Set flag to process second half of buffer */
    buffer_full_ready = 1;
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <HAL_SAI_RxCpltCallback+0x1c>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	240003f5 	.word	0x240003f5

080009b8 <ProcessAudioData>:
 * @param  buffer: pointer to buffer containing audio data
 * @param  length: length of the buffer to process
 * @retval None
 */
void ProcessAudioData(uint16_t *buffer, uint16_t length)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
     *  - Feature extraction
     *  - Data transmission
     */

    // Example: Simple peak detection
    uint16_t max_value = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	81bb      	strh	r3, [r7, #12]
 80009cc:	e010      	b.n	80009f0 <ProcessAudioData+0x38>
    {
        if (buffer[i] > max_value)
 80009ce:	89bb      	ldrh	r3, [r7, #12]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	89fa      	ldrh	r2, [r7, #14]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d205      	bcs.n	80009ea <ProcessAudioData+0x32>
        {
            max_value = buffer[i];
 80009de:	89bb      	ldrh	r3, [r7, #12]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++)
 80009ea:	89bb      	ldrh	r3, [r7, #12]
 80009ec:	3301      	adds	r3, #1
 80009ee:	81bb      	strh	r3, [r7, #12]
 80009f0:	89ba      	ldrh	r2, [r7, #12]
 80009f2:	887b      	ldrh	r3, [r7, #2]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d3ea      	bcc.n	80009ce <ProcessAudioData+0x16>
        // Add your processing code here
    }

    // Example: Use max_value for level detection or other purposes
    // This is just a placeholder
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <DMA1_Stream1_IRQHandler>:

/**
 * @brief  DMA1 Stream1 IRQ handler (for SAI RX)
 * @retval None
 */
void DMA1_Stream1_IRQHandler(void) { HAL_DMA_IRQHandler(&hdma_sai1_a_rx); }
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <DMA1_Stream1_IRQHandler+0x10>)
 8000a0e:	f001 fe7b 	bl	8002708 <HAL_DMA_IRQHandler>
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	240003f8 	.word	0x240003f8

08000a1c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
    /* User can add his own implementation to report the HAL error */
    __disable_irq();
    while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_SAI_MspInit>:
 * @brief  SAI MSP Initialization
 * @param  hsai: pointer to a SAI_HandleTypeDef structure
 * @retval None
 */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

    if (hsai->Instance == SAI1_Block_A)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab0 <HAL_SAI_MspInit+0x88>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d12d      	bne.n	8000aa6 <HAL_SAI_MspInit+0x7e>
    {
        /* SAI1 clock enable */
        __HAL_RCC_SAI1_CLK_ENABLE();
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <HAL_SAI_MspInit+0x8c>)
 8000a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a50:	4a18      	ldr	r2, [pc, #96]	@ (8000ab4 <HAL_SAI_MspInit+0x8c>)
 8000a52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000a5a:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <HAL_SAI_MspInit+0x8c>)
 8000a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]

        /* SAI1 pins configuration */
        /* Peripheral clock enable */
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_SAI_MspInit+0x8c>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <HAL_SAI_MspInit+0x8c>)
 8000a70:	f043 0310 	orr.w	r3, r3, #16
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a78:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_SAI_MspInit+0x8c>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	f003 0310 	and.w	r3, r3, #16
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]

        /* Configure pins for SAI1 - Adjust based on your specific hardware */
        /* E.g., SAI1_SD_A, SAI1_SCK_A, SAI1_FS_A, SAI1_MCLK_A */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000a86:	233c      	movs	r3, #60	@ 0x3c
 8000a88:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a92:	2302      	movs	r3, #2
 8000a94:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000a96:	2306      	movs	r3, #6
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <HAL_SAI_MspInit+0x90>)
 8000aa2:	f003 f94f 	bl	8003d44 <HAL_GPIO_Init>
    }
}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40015804 	.word	0x40015804
 8000ab4:	58024400 	.word	0x58024400
 8000ab8:	58021000 	.word	0x58021000

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <HAL_MspInit+0x30>)
 8000ac4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ac8:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_MspInit+0x30>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_MspInit+0x30>)
 8000ad4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	58024400 	.word	0x58024400

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b18 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8000b46:	f000 f979 	bl	8000e3c <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <BDMA_Channel0_IRQHandler>:

/**
 * @brief This function handles BDMA channel0 global interrupt.
 */
void BDMA_Channel0_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

    /* USER CODE END BDMA_Channel0_IRQn 0 */
    // HAL_DMA_IRQHandler(&hdma_sai4_a);
    HAL_DMA_IRQHandler(&hsai_BlockA4);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <BDMA_Channel0_IRQHandler+0x10>)
 8000b56:	f001 fdd7 	bl	8002708 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

    /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	24000470 	.word	0x24000470

08000b64 <SAI4_IRQHandler>:

/**
 * @brief This function handles SAI4 global interrupt.
 */
void SAI4_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SAI4_IRQn 0 */
    HAL_SAI_IRQHandler(&hsai_BlockA4);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <SAI4_IRQHandler+0x10>)
 8000b6a:	f007 fbe1 	bl	8008330 <HAL_SAI_IRQHandler>
    /* USER CODE END SAI4_IRQn 0 */

    /* USER CODE BEGIN SAI4_IRQn 1 */

    /* USER CODE END SAI4_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	24000470 	.word	0x24000470

08000b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return 1;
 8000b7c:	2301      	movs	r3, #1
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_kill>:

int _kill(int pid, int sig)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b92:	f008 fba5 	bl	80092e0 <__errno>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2216      	movs	r2, #22
 8000b9a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_exit>:

void _exit (int status)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ffe7 	bl	8000b88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bba:	bf00      	nop
 8000bbc:	e7fd      	b.n	8000bba <_exit+0x12>

08000bbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	e00a      	b.n	8000be6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd0:	f3af 8000 	nop.w
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	60ba      	str	r2, [r7, #8]
 8000bdc:	b2ca      	uxtb	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3301      	adds	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	dbf0      	blt.n	8000bd0 <_read+0x12>
  }

  return len;
 8000bee:	687b      	ldr	r3, [r7, #4]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e009      	b.n	8000c1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1c5a      	adds	r2, r3, #1
 8000c0e:	60ba      	str	r2, [r7, #8]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dbf1      	blt.n	8000c0a <_write+0x12>
  }
  return len;
 8000c26:	687b      	ldr	r3, [r7, #4]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_close>:

int _close(int file)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c58:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <_isatty>:

int _isatty(int file)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b085      	sub	sp, #20
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	@ (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f008 fb0a 	bl	80092e0 <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	24080000 	.word	0x24080000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	240005a0 	.word	0x240005a0
 8000d00:	240006f8 	.word	0x240006f8

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d08:	f7ff fb42 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	@ (8000d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d32:	f008 fadb 	bl	80092ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fbc1 	bl	80004bc <main>
  bx  lr
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d40:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d44:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000d48:	0800b474 	.word	0x0800b474
  ldr r2, =_sbss
 8000d4c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000d50:	240006f4 	.word	0x240006f4

08000d54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC3_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f000 f968 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d64:	f004 f818 	bl	8004d98 <HAL_RCC_GetSysClockFreq>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <HAL_Init+0x68>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	4913      	ldr	r1, [pc, #76]	@ (8000dc4 <HAL_Init+0x6c>)
 8000d76:	5ccb      	ldrb	r3, [r1, r3]
 8000d78:	f003 031f 	and.w	r3, r3, #31
 8000d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_Init+0x68>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc4 <HAL_Init+0x6c>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	f003 031f 	and.w	r3, r3, #31
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	fa22 f303 	lsr.w	r3, r2, r3
 8000d98:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc8 <HAL_Init+0x70>)
 8000d9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <HAL_Init+0x74>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da2:	200f      	movs	r0, #15
 8000da4:	f000 f814 	bl	8000dd0 <HAL_InitTick>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e002      	b.n	8000db8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000db2:	f7ff fe83 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	0800b0d8 	.word	0x0800b0d8
 8000dc8:	24000004 	.word	0x24000004
 8000dcc:	24000000 	.word	0x24000000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <HAL_InitTick+0x60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e021      	b.n	8000e28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <HAL_InitTick+0x64>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <HAL_InitTick+0x60>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f94d 	bl	800109a <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e18:	f000 f917 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	@ (8000e38 <HAL_InitTick+0x68>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2400000c 	.word	0x2400000c
 8000e34:	24000000 	.word	0x24000000
 8000e38:	24000008 	.word	0x24000008

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2400000c 	.word	0x2400000c
 8000e60:	240005a4 	.word	0x240005a4

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	240005a4 	.word	0x240005a4

08000e7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_GetREVID+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	0c1b      	lsrs	r3, r3, #16
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	5c001000 	.word	0x5c001000

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00
 8000ed8:	05fa0000 	.word	0x05fa0000

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	@ (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	@ (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	@ (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	@ 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	@ 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff29 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff40 	bl	8000edc <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff90 	bl	8000f88 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5f 	bl	8000f34 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff33 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffa4 	bl	8000ff0 <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff fed2 	bl	8000e64 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e316      	b.n	80016fa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a66      	ldr	r2, [pc, #408]	@ (800126c <HAL_DMA_Init+0x1b8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d04a      	beq.n	800116c <HAL_DMA_Init+0xb8>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a65      	ldr	r2, [pc, #404]	@ (8001270 <HAL_DMA_Init+0x1bc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d045      	beq.n	800116c <HAL_DMA_Init+0xb8>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a63      	ldr	r2, [pc, #396]	@ (8001274 <HAL_DMA_Init+0x1c0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d040      	beq.n	800116c <HAL_DMA_Init+0xb8>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a62      	ldr	r2, [pc, #392]	@ (8001278 <HAL_DMA_Init+0x1c4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d03b      	beq.n	800116c <HAL_DMA_Init+0xb8>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a60      	ldr	r2, [pc, #384]	@ (800127c <HAL_DMA_Init+0x1c8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d036      	beq.n	800116c <HAL_DMA_Init+0xb8>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a5f      	ldr	r2, [pc, #380]	@ (8001280 <HAL_DMA_Init+0x1cc>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d031      	beq.n	800116c <HAL_DMA_Init+0xb8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a5d      	ldr	r2, [pc, #372]	@ (8001284 <HAL_DMA_Init+0x1d0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d02c      	beq.n	800116c <HAL_DMA_Init+0xb8>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a5c      	ldr	r2, [pc, #368]	@ (8001288 <HAL_DMA_Init+0x1d4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d027      	beq.n	800116c <HAL_DMA_Init+0xb8>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a5a      	ldr	r2, [pc, #360]	@ (800128c <HAL_DMA_Init+0x1d8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d022      	beq.n	800116c <HAL_DMA_Init+0xb8>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a59      	ldr	r2, [pc, #356]	@ (8001290 <HAL_DMA_Init+0x1dc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d01d      	beq.n	800116c <HAL_DMA_Init+0xb8>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a57      	ldr	r2, [pc, #348]	@ (8001294 <HAL_DMA_Init+0x1e0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d018      	beq.n	800116c <HAL_DMA_Init+0xb8>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a56      	ldr	r2, [pc, #344]	@ (8001298 <HAL_DMA_Init+0x1e4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d013      	beq.n	800116c <HAL_DMA_Init+0xb8>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a54      	ldr	r2, [pc, #336]	@ (800129c <HAL_DMA_Init+0x1e8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00e      	beq.n	800116c <HAL_DMA_Init+0xb8>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a53      	ldr	r2, [pc, #332]	@ (80012a0 <HAL_DMA_Init+0x1ec>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d009      	beq.n	800116c <HAL_DMA_Init+0xb8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a51      	ldr	r2, [pc, #324]	@ (80012a4 <HAL_DMA_Init+0x1f0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d004      	beq.n	800116c <HAL_DMA_Init+0xb8>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a50      	ldr	r2, [pc, #320]	@ (80012a8 <HAL_DMA_Init+0x1f4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_DMA_Init+0xbc>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_DMA_Init+0xbe>
 8001170:	2300      	movs	r3, #0
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 813b 	beq.w	80013ee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2202      	movs	r2, #2
 800117c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a37      	ldr	r2, [pc, #220]	@ (800126c <HAL_DMA_Init+0x1b8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d04a      	beq.n	8001228 <HAL_DMA_Init+0x174>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a36      	ldr	r2, [pc, #216]	@ (8001270 <HAL_DMA_Init+0x1bc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d045      	beq.n	8001228 <HAL_DMA_Init+0x174>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a34      	ldr	r2, [pc, #208]	@ (8001274 <HAL_DMA_Init+0x1c0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d040      	beq.n	8001228 <HAL_DMA_Init+0x174>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a33      	ldr	r2, [pc, #204]	@ (8001278 <HAL_DMA_Init+0x1c4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d03b      	beq.n	8001228 <HAL_DMA_Init+0x174>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a31      	ldr	r2, [pc, #196]	@ (800127c <HAL_DMA_Init+0x1c8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d036      	beq.n	8001228 <HAL_DMA_Init+0x174>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a30      	ldr	r2, [pc, #192]	@ (8001280 <HAL_DMA_Init+0x1cc>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d031      	beq.n	8001228 <HAL_DMA_Init+0x174>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001284 <HAL_DMA_Init+0x1d0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d02c      	beq.n	8001228 <HAL_DMA_Init+0x174>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001288 <HAL_DMA_Init+0x1d4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d027      	beq.n	8001228 <HAL_DMA_Init+0x174>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a2b      	ldr	r2, [pc, #172]	@ (800128c <HAL_DMA_Init+0x1d8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d022      	beq.n	8001228 <HAL_DMA_Init+0x174>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001290 <HAL_DMA_Init+0x1dc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d01d      	beq.n	8001228 <HAL_DMA_Init+0x174>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a28      	ldr	r2, [pc, #160]	@ (8001294 <HAL_DMA_Init+0x1e0>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d018      	beq.n	8001228 <HAL_DMA_Init+0x174>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a27      	ldr	r2, [pc, #156]	@ (8001298 <HAL_DMA_Init+0x1e4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d013      	beq.n	8001228 <HAL_DMA_Init+0x174>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a25      	ldr	r2, [pc, #148]	@ (800129c <HAL_DMA_Init+0x1e8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00e      	beq.n	8001228 <HAL_DMA_Init+0x174>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a24      	ldr	r2, [pc, #144]	@ (80012a0 <HAL_DMA_Init+0x1ec>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d009      	beq.n	8001228 <HAL_DMA_Init+0x174>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a22      	ldr	r2, [pc, #136]	@ (80012a4 <HAL_DMA_Init+0x1f0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d004      	beq.n	8001228 <HAL_DMA_Init+0x174>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a21      	ldr	r2, [pc, #132]	@ (80012a8 <HAL_DMA_Init+0x1f4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d108      	bne.n	800123a <HAL_DMA_Init+0x186>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e007      	b.n	800124a <HAL_DMA_Init+0x196>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0201 	bic.w	r2, r2, #1
 8001248:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800124a:	e02f      	b.n	80012ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800124c:	f7ff fe0a 	bl	8000e64 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b05      	cmp	r3, #5
 8001258:	d928      	bls.n	80012ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2220      	movs	r2, #32
 800125e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2203      	movs	r2, #3
 8001264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e246      	b.n	80016fa <HAL_DMA_Init+0x646>
 800126c:	40020010 	.word	0x40020010
 8001270:	40020028 	.word	0x40020028
 8001274:	40020040 	.word	0x40020040
 8001278:	40020058 	.word	0x40020058
 800127c:	40020070 	.word	0x40020070
 8001280:	40020088 	.word	0x40020088
 8001284:	400200a0 	.word	0x400200a0
 8001288:	400200b8 	.word	0x400200b8
 800128c:	40020410 	.word	0x40020410
 8001290:	40020428 	.word	0x40020428
 8001294:	40020440 	.word	0x40020440
 8001298:	40020458 	.word	0x40020458
 800129c:	40020470 	.word	0x40020470
 80012a0:	40020488 	.word	0x40020488
 80012a4:	400204a0 	.word	0x400204a0
 80012a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1c8      	bne.n	800124c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4b83      	ldr	r3, [pc, #524]	@ (80014d4 <HAL_DMA_Init+0x420>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80012d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d107      	bne.n	8001310 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	4313      	orrs	r3, r2
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4313      	orrs	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001310:	4b71      	ldr	r3, [pc, #452]	@ (80014d8 <HAL_DMA_Init+0x424>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b71      	ldr	r3, [pc, #452]	@ (80014dc <HAL_DMA_Init+0x428>)
 8001316:	4013      	ands	r3, r2
 8001318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800131c:	d328      	bcc.n	8001370 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b28      	cmp	r3, #40	@ 0x28
 8001324:	d903      	bls.n	800132e <HAL_DMA_Init+0x27a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b2e      	cmp	r3, #46	@ 0x2e
 800132c:	d917      	bls.n	800135e <HAL_DMA_Init+0x2aa>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b3e      	cmp	r3, #62	@ 0x3e
 8001334:	d903      	bls.n	800133e <HAL_DMA_Init+0x28a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b42      	cmp	r3, #66	@ 0x42
 800133c:	d90f      	bls.n	800135e <HAL_DMA_Init+0x2aa>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b46      	cmp	r3, #70	@ 0x46
 8001344:	d903      	bls.n	800134e <HAL_DMA_Init+0x29a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b48      	cmp	r3, #72	@ 0x48
 800134c:	d907      	bls.n	800135e <HAL_DMA_Init+0x2aa>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b4e      	cmp	r3, #78	@ 0x4e
 8001354:	d905      	bls.n	8001362 <HAL_DMA_Init+0x2ae>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b52      	cmp	r3, #82	@ 0x52
 800135c:	d801      	bhi.n	8001362 <HAL_DMA_Init+0x2ae>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_DMA_Init+0x2b0>
 8001362:	2300      	movs	r3, #0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800136e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f023 0307 	bic.w	r3, r3, #7
 8001386:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	4313      	orrs	r3, r2
 8001390:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	2b04      	cmp	r3, #4
 8001398:	d117      	bne.n	80013ca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00e      	beq.n	80013ca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f002 fb3f 	bl	8003a30 <DMA_CheckFifoParam>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d008      	beq.n	80013ca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2240      	movs	r2, #64	@ 0x40
 80013bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e197      	b.n	80016fa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f002 fa7a 	bl	80038cc <DMA_CalcBaseAndBitshift>
 80013d8:	4603      	mov	r3, r0
 80013da:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	223f      	movs	r2, #63	@ 0x3f
 80013e6:	409a      	lsls	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	e0cd      	b.n	800158a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a3b      	ldr	r2, [pc, #236]	@ (80014e0 <HAL_DMA_Init+0x42c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d022      	beq.n	800143e <HAL_DMA_Init+0x38a>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a39      	ldr	r2, [pc, #228]	@ (80014e4 <HAL_DMA_Init+0x430>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d01d      	beq.n	800143e <HAL_DMA_Init+0x38a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a38      	ldr	r2, [pc, #224]	@ (80014e8 <HAL_DMA_Init+0x434>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d018      	beq.n	800143e <HAL_DMA_Init+0x38a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a36      	ldr	r2, [pc, #216]	@ (80014ec <HAL_DMA_Init+0x438>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_DMA_Init+0x38a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a35      	ldr	r2, [pc, #212]	@ (80014f0 <HAL_DMA_Init+0x43c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00e      	beq.n	800143e <HAL_DMA_Init+0x38a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a33      	ldr	r2, [pc, #204]	@ (80014f4 <HAL_DMA_Init+0x440>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d009      	beq.n	800143e <HAL_DMA_Init+0x38a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a32      	ldr	r2, [pc, #200]	@ (80014f8 <HAL_DMA_Init+0x444>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d004      	beq.n	800143e <HAL_DMA_Init+0x38a>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a30      	ldr	r2, [pc, #192]	@ (80014fc <HAL_DMA_Init+0x448>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_DMA_Init+0x38e>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_DMA_Init+0x390>
 8001442:	2300      	movs	r3, #0
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 8097 	beq.w	8001578 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a24      	ldr	r2, [pc, #144]	@ (80014e0 <HAL_DMA_Init+0x42c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d021      	beq.n	8001498 <HAL_DMA_Init+0x3e4>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a22      	ldr	r2, [pc, #136]	@ (80014e4 <HAL_DMA_Init+0x430>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01c      	beq.n	8001498 <HAL_DMA_Init+0x3e4>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a21      	ldr	r2, [pc, #132]	@ (80014e8 <HAL_DMA_Init+0x434>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d017      	beq.n	8001498 <HAL_DMA_Init+0x3e4>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <HAL_DMA_Init+0x438>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d012      	beq.n	8001498 <HAL_DMA_Init+0x3e4>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1e      	ldr	r2, [pc, #120]	@ (80014f0 <HAL_DMA_Init+0x43c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d00d      	beq.n	8001498 <HAL_DMA_Init+0x3e4>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <HAL_DMA_Init+0x440>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d008      	beq.n	8001498 <HAL_DMA_Init+0x3e4>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1b      	ldr	r2, [pc, #108]	@ (80014f8 <HAL_DMA_Init+0x444>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d003      	beq.n	8001498 <HAL_DMA_Init+0x3e4>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	@ (80014fc <HAL_DMA_Init+0x448>)
 8001496:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <HAL_DMA_Init+0x44c>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b40      	cmp	r3, #64	@ 0x40
 80014be:	d021      	beq.n	8001504 <HAL_DMA_Init+0x450>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b80      	cmp	r3, #128	@ 0x80
 80014c6:	d102      	bne.n	80014ce <HAL_DMA_Init+0x41a>
 80014c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014cc:	e01b      	b.n	8001506 <HAL_DMA_Init+0x452>
 80014ce:	2300      	movs	r3, #0
 80014d0:	e019      	b.n	8001506 <HAL_DMA_Init+0x452>
 80014d2:	bf00      	nop
 80014d4:	fe10803f 	.word	0xfe10803f
 80014d8:	5c001000 	.word	0x5c001000
 80014dc:	ffff0000 	.word	0xffff0000
 80014e0:	58025408 	.word	0x58025408
 80014e4:	5802541c 	.word	0x5802541c
 80014e8:	58025430 	.word	0x58025430
 80014ec:	58025444 	.word	0x58025444
 80014f0:	58025458 	.word	0x58025458
 80014f4:	5802546c 	.word	0x5802546c
 80014f8:	58025480 	.word	0x58025480
 80014fc:	58025494 	.word	0x58025494
 8001500:	fffe000f 	.word	0xfffe000f
 8001504:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68d2      	ldr	r2, [r2, #12]
 800150a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800150c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001514:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800151c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001524:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800152c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001534:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b6e      	ldr	r3, [pc, #440]	@ (8001704 <HAL_DMA_Init+0x650>)
 800154c:	4413      	add	r3, r2
 800154e:	4a6e      	ldr	r2, [pc, #440]	@ (8001708 <HAL_DMA_Init+0x654>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	009a      	lsls	r2, r3, #2
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f002 f9b5 	bl	80038cc <DMA_CalcBaseAndBitshift>
 8001562:	4603      	mov	r3, r0
 8001564:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	2201      	movs	r2, #1
 8001570:	409a      	lsls	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	e008      	b.n	800158a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2240      	movs	r2, #64	@ 0x40
 800157c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0b7      	b.n	80016fa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a5f      	ldr	r2, [pc, #380]	@ (800170c <HAL_DMA_Init+0x658>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d072      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a5d      	ldr	r2, [pc, #372]	@ (8001710 <HAL_DMA_Init+0x65c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d06d      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001714 <HAL_DMA_Init+0x660>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d068      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a5a      	ldr	r2, [pc, #360]	@ (8001718 <HAL_DMA_Init+0x664>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d063      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a59      	ldr	r2, [pc, #356]	@ (800171c <HAL_DMA_Init+0x668>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d05e      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a57      	ldr	r2, [pc, #348]	@ (8001720 <HAL_DMA_Init+0x66c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d059      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a56      	ldr	r2, [pc, #344]	@ (8001724 <HAL_DMA_Init+0x670>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d054      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a54      	ldr	r2, [pc, #336]	@ (8001728 <HAL_DMA_Init+0x674>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d04f      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a53      	ldr	r2, [pc, #332]	@ (800172c <HAL_DMA_Init+0x678>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d04a      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a51      	ldr	r2, [pc, #324]	@ (8001730 <HAL_DMA_Init+0x67c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d045      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a50      	ldr	r2, [pc, #320]	@ (8001734 <HAL_DMA_Init+0x680>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d040      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001738 <HAL_DMA_Init+0x684>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d03b      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a4d      	ldr	r2, [pc, #308]	@ (800173c <HAL_DMA_Init+0x688>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d036      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a4b      	ldr	r2, [pc, #300]	@ (8001740 <HAL_DMA_Init+0x68c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d031      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a4a      	ldr	r2, [pc, #296]	@ (8001744 <HAL_DMA_Init+0x690>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d02c      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a48      	ldr	r2, [pc, #288]	@ (8001748 <HAL_DMA_Init+0x694>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d027      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a47      	ldr	r2, [pc, #284]	@ (800174c <HAL_DMA_Init+0x698>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d022      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a45      	ldr	r2, [pc, #276]	@ (8001750 <HAL_DMA_Init+0x69c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01d      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a44      	ldr	r2, [pc, #272]	@ (8001754 <HAL_DMA_Init+0x6a0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d018      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a42      	ldr	r2, [pc, #264]	@ (8001758 <HAL_DMA_Init+0x6a4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a41      	ldr	r2, [pc, #260]	@ (800175c <HAL_DMA_Init+0x6a8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d00e      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a3f      	ldr	r2, [pc, #252]	@ (8001760 <HAL_DMA_Init+0x6ac>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d009      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a3e      	ldr	r2, [pc, #248]	@ (8001764 <HAL_DMA_Init+0x6b0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d004      	beq.n	800167a <HAL_DMA_Init+0x5c6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a3c      	ldr	r2, [pc, #240]	@ (8001768 <HAL_DMA_Init+0x6b4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_DMA_Init+0x5ca>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_DMA_Init+0x5cc>
 800167e:	2300      	movs	r3, #0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d032      	beq.n	80016ea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f002 fa4f 	bl	8003b28 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b80      	cmp	r3, #128	@ 0x80
 8001690:	d102      	bne.n	8001698 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80016ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d010      	beq.n	80016d8 <HAL_DMA_Init+0x624>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d80c      	bhi.n	80016d8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f002 facc 	bl	8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	e008      	b.n	80016ea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	a7fdabf8 	.word	0xa7fdabf8
 8001708:	cccccccd 	.word	0xcccccccd
 800170c:	40020010 	.word	0x40020010
 8001710:	40020028 	.word	0x40020028
 8001714:	40020040 	.word	0x40020040
 8001718:	40020058 	.word	0x40020058
 800171c:	40020070 	.word	0x40020070
 8001720:	40020088 	.word	0x40020088
 8001724:	400200a0 	.word	0x400200a0
 8001728:	400200b8 	.word	0x400200b8
 800172c:	40020410 	.word	0x40020410
 8001730:	40020428 	.word	0x40020428
 8001734:	40020440 	.word	0x40020440
 8001738:	40020458 	.word	0x40020458
 800173c:	40020470 	.word	0x40020470
 8001740:	40020488 	.word	0x40020488
 8001744:	400204a0 	.word	0x400204a0
 8001748:	400204b8 	.word	0x400204b8
 800174c:	58025408 	.word	0x58025408
 8001750:	5802541c 	.word	0x5802541c
 8001754:	58025430 	.word	0x58025430
 8001758:	58025444 	.word	0x58025444
 800175c:	58025458 	.word	0x58025458
 8001760:	5802546c 	.word	0x5802546c
 8001764:	58025480 	.word	0x58025480
 8001768:	58025494 	.word	0x58025494

0800176c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e226      	b.n	8001bd6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_DMA_Start_IT+0x2a>
 8001792:	2302      	movs	r3, #2
 8001794:	e21f      	b.n	8001bd6 <HAL_DMA_Start_IT+0x46a>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	f040 820a 	bne.w	8001bc0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a68      	ldr	r2, [pc, #416]	@ (8001960 <HAL_DMA_Start_IT+0x1f4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d04a      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a66      	ldr	r2, [pc, #408]	@ (8001964 <HAL_DMA_Start_IT+0x1f8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d045      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a65      	ldr	r2, [pc, #404]	@ (8001968 <HAL_DMA_Start_IT+0x1fc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d040      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a63      	ldr	r2, [pc, #396]	@ (800196c <HAL_DMA_Start_IT+0x200>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d03b      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a62      	ldr	r2, [pc, #392]	@ (8001970 <HAL_DMA_Start_IT+0x204>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d036      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a60      	ldr	r2, [pc, #384]	@ (8001974 <HAL_DMA_Start_IT+0x208>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d031      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001978 <HAL_DMA_Start_IT+0x20c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d02c      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5d      	ldr	r2, [pc, #372]	@ (800197c <HAL_DMA_Start_IT+0x210>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d027      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a5c      	ldr	r2, [pc, #368]	@ (8001980 <HAL_DMA_Start_IT+0x214>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d022      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a5a      	ldr	r2, [pc, #360]	@ (8001984 <HAL_DMA_Start_IT+0x218>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01d      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a59      	ldr	r2, [pc, #356]	@ (8001988 <HAL_DMA_Start_IT+0x21c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d018      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a57      	ldr	r2, [pc, #348]	@ (800198c <HAL_DMA_Start_IT+0x220>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a56      	ldr	r2, [pc, #344]	@ (8001990 <HAL_DMA_Start_IT+0x224>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00e      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a54      	ldr	r2, [pc, #336]	@ (8001994 <HAL_DMA_Start_IT+0x228>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d009      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a53      	ldr	r2, [pc, #332]	@ (8001998 <HAL_DMA_Start_IT+0x22c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d004      	beq.n	800185a <HAL_DMA_Start_IT+0xee>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a51      	ldr	r2, [pc, #324]	@ (800199c <HAL_DMA_Start_IT+0x230>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d108      	bne.n	800186c <HAL_DMA_Start_IT+0x100>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e007      	b.n	800187c <HAL_DMA_Start_IT+0x110>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f001 fe76 	bl	8003574 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a34      	ldr	r2, [pc, #208]	@ (8001960 <HAL_DMA_Start_IT+0x1f4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d04a      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a33      	ldr	r2, [pc, #204]	@ (8001964 <HAL_DMA_Start_IT+0x1f8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d045      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a31      	ldr	r2, [pc, #196]	@ (8001968 <HAL_DMA_Start_IT+0x1fc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d040      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a30      	ldr	r2, [pc, #192]	@ (800196c <HAL_DMA_Start_IT+0x200>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d03b      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001970 <HAL_DMA_Start_IT+0x204>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d036      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2d      	ldr	r2, [pc, #180]	@ (8001974 <HAL_DMA_Start_IT+0x208>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d031      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001978 <HAL_DMA_Start_IT+0x20c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d02c      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a2a      	ldr	r2, [pc, #168]	@ (800197c <HAL_DMA_Start_IT+0x210>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d027      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a28      	ldr	r2, [pc, #160]	@ (8001980 <HAL_DMA_Start_IT+0x214>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d022      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a27      	ldr	r2, [pc, #156]	@ (8001984 <HAL_DMA_Start_IT+0x218>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d01d      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a25      	ldr	r2, [pc, #148]	@ (8001988 <HAL_DMA_Start_IT+0x21c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d018      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a24      	ldr	r2, [pc, #144]	@ (800198c <HAL_DMA_Start_IT+0x220>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d013      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a22      	ldr	r2, [pc, #136]	@ (8001990 <HAL_DMA_Start_IT+0x224>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00e      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a21      	ldr	r2, [pc, #132]	@ (8001994 <HAL_DMA_Start_IT+0x228>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d009      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1f      	ldr	r2, [pc, #124]	@ (8001998 <HAL_DMA_Start_IT+0x22c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d004      	beq.n	8001928 <HAL_DMA_Start_IT+0x1bc>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1e      	ldr	r2, [pc, #120]	@ (800199c <HAL_DMA_Start_IT+0x230>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_DMA_Start_IT+0x1c0>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_DMA_Start_IT+0x1c2>
 800192c:	2300      	movs	r3, #0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d036      	beq.n	80019a0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 021e 	bic.w	r2, r3, #30
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0216 	orr.w	r2, r2, #22
 8001944:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d03e      	beq.n	80019cc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0208 	orr.w	r2, r2, #8
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e035      	b.n	80019cc <HAL_DMA_Start_IT+0x260>
 8001960:	40020010 	.word	0x40020010
 8001964:	40020028 	.word	0x40020028
 8001968:	40020040 	.word	0x40020040
 800196c:	40020058 	.word	0x40020058
 8001970:	40020070 	.word	0x40020070
 8001974:	40020088 	.word	0x40020088
 8001978:	400200a0 	.word	0x400200a0
 800197c:	400200b8 	.word	0x400200b8
 8001980:	40020410 	.word	0x40020410
 8001984:	40020428 	.word	0x40020428
 8001988:	40020440 	.word	0x40020440
 800198c:	40020458 	.word	0x40020458
 8001990:	40020470 	.word	0x40020470
 8001994:	40020488 	.word	0x40020488
 8001998:	400204a0 	.word	0x400204a0
 800199c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 020e 	bic.w	r2, r3, #14
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 020a 	orr.w	r2, r2, #10
 80019b2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0204 	orr.w	r2, r2, #4
 80019ca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a83      	ldr	r2, [pc, #524]	@ (8001be0 <HAL_DMA_Start_IT+0x474>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d072      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a82      	ldr	r2, [pc, #520]	@ (8001be4 <HAL_DMA_Start_IT+0x478>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d06d      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a80      	ldr	r2, [pc, #512]	@ (8001be8 <HAL_DMA_Start_IT+0x47c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d068      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7f      	ldr	r2, [pc, #508]	@ (8001bec <HAL_DMA_Start_IT+0x480>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d063      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a7d      	ldr	r2, [pc, #500]	@ (8001bf0 <HAL_DMA_Start_IT+0x484>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d05e      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7c      	ldr	r2, [pc, #496]	@ (8001bf4 <HAL_DMA_Start_IT+0x488>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d059      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a7a      	ldr	r2, [pc, #488]	@ (8001bf8 <HAL_DMA_Start_IT+0x48c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d054      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a79      	ldr	r2, [pc, #484]	@ (8001bfc <HAL_DMA_Start_IT+0x490>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d04f      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a77      	ldr	r2, [pc, #476]	@ (8001c00 <HAL_DMA_Start_IT+0x494>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d04a      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a76      	ldr	r2, [pc, #472]	@ (8001c04 <HAL_DMA_Start_IT+0x498>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d045      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a74      	ldr	r2, [pc, #464]	@ (8001c08 <HAL_DMA_Start_IT+0x49c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d040      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a73      	ldr	r2, [pc, #460]	@ (8001c0c <HAL_DMA_Start_IT+0x4a0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d03b      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a71      	ldr	r2, [pc, #452]	@ (8001c10 <HAL_DMA_Start_IT+0x4a4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d036      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a70      	ldr	r2, [pc, #448]	@ (8001c14 <HAL_DMA_Start_IT+0x4a8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d031      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c18 <HAL_DMA_Start_IT+0x4ac>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d02c      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6d      	ldr	r2, [pc, #436]	@ (8001c1c <HAL_DMA_Start_IT+0x4b0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d027      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6b      	ldr	r2, [pc, #428]	@ (8001c20 <HAL_DMA_Start_IT+0x4b4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d022      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6a      	ldr	r2, [pc, #424]	@ (8001c24 <HAL_DMA_Start_IT+0x4b8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d01d      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a68      	ldr	r2, [pc, #416]	@ (8001c28 <HAL_DMA_Start_IT+0x4bc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d018      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a67      	ldr	r2, [pc, #412]	@ (8001c2c <HAL_DMA_Start_IT+0x4c0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d013      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a65      	ldr	r2, [pc, #404]	@ (8001c30 <HAL_DMA_Start_IT+0x4c4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00e      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a64      	ldr	r2, [pc, #400]	@ (8001c34 <HAL_DMA_Start_IT+0x4c8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d009      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a62      	ldr	r2, [pc, #392]	@ (8001c38 <HAL_DMA_Start_IT+0x4cc>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d004      	beq.n	8001abc <HAL_DMA_Start_IT+0x350>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a61      	ldr	r2, [pc, #388]	@ (8001c3c <HAL_DMA_Start_IT+0x4d0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d101      	bne.n	8001ac0 <HAL_DMA_Start_IT+0x354>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_DMA_Start_IT+0x356>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d01a      	beq.n	8001afc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ae2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001af6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001afa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a37      	ldr	r2, [pc, #220]	@ (8001be0 <HAL_DMA_Start_IT+0x474>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d04a      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a36      	ldr	r2, [pc, #216]	@ (8001be4 <HAL_DMA_Start_IT+0x478>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d045      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a34      	ldr	r2, [pc, #208]	@ (8001be8 <HAL_DMA_Start_IT+0x47c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d040      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a33      	ldr	r2, [pc, #204]	@ (8001bec <HAL_DMA_Start_IT+0x480>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d03b      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a31      	ldr	r2, [pc, #196]	@ (8001bf0 <HAL_DMA_Start_IT+0x484>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d036      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a30      	ldr	r2, [pc, #192]	@ (8001bf4 <HAL_DMA_Start_IT+0x488>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d031      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf8 <HAL_DMA_Start_IT+0x48c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d02c      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a2d      	ldr	r2, [pc, #180]	@ (8001bfc <HAL_DMA_Start_IT+0x490>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d027      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2b      	ldr	r2, [pc, #172]	@ (8001c00 <HAL_DMA_Start_IT+0x494>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d022      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c04 <HAL_DMA_Start_IT+0x498>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d01d      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a28      	ldr	r2, [pc, #160]	@ (8001c08 <HAL_DMA_Start_IT+0x49c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d018      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a27      	ldr	r2, [pc, #156]	@ (8001c0c <HAL_DMA_Start_IT+0x4a0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a25      	ldr	r2, [pc, #148]	@ (8001c10 <HAL_DMA_Start_IT+0x4a4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00e      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a24      	ldr	r2, [pc, #144]	@ (8001c14 <HAL_DMA_Start_IT+0x4a8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a22      	ldr	r2, [pc, #136]	@ (8001c18 <HAL_DMA_Start_IT+0x4ac>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_DMA_Start_IT+0x430>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <HAL_DMA_Start_IT+0x4b0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <HAL_DMA_Start_IT+0x442>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e012      	b.n	8001bd4 <HAL_DMA_Start_IT+0x468>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e009      	b.n	8001bd4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40020010 	.word	0x40020010
 8001be4:	40020028 	.word	0x40020028
 8001be8:	40020040 	.word	0x40020040
 8001bec:	40020058 	.word	0x40020058
 8001bf0:	40020070 	.word	0x40020070
 8001bf4:	40020088 	.word	0x40020088
 8001bf8:	400200a0 	.word	0x400200a0
 8001bfc:	400200b8 	.word	0x400200b8
 8001c00:	40020410 	.word	0x40020410
 8001c04:	40020428 	.word	0x40020428
 8001c08:	40020440 	.word	0x40020440
 8001c0c:	40020458 	.word	0x40020458
 8001c10:	40020470 	.word	0x40020470
 8001c14:	40020488 	.word	0x40020488
 8001c18:	400204a0 	.word	0x400204a0
 8001c1c:	400204b8 	.word	0x400204b8
 8001c20:	58025408 	.word	0x58025408
 8001c24:	5802541c 	.word	0x5802541c
 8001c28:	58025430 	.word	0x58025430
 8001c2c:	58025444 	.word	0x58025444
 8001c30:	58025458 	.word	0x58025458
 8001c34:	5802546c 	.word	0x5802546c
 8001c38:	58025480 	.word	0x58025480
 8001c3c:	58025494 	.word	0x58025494

08001c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff f90c 	bl	8000e64 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e2dc      	b.n	8002212 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d008      	beq.n	8001c76 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2280      	movs	r2, #128	@ 0x80
 8001c68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e2cd      	b.n	8002212 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a76      	ldr	r2, [pc, #472]	@ (8001e54 <HAL_DMA_Abort+0x214>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d04a      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a74      	ldr	r2, [pc, #464]	@ (8001e58 <HAL_DMA_Abort+0x218>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d045      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a73      	ldr	r2, [pc, #460]	@ (8001e5c <HAL_DMA_Abort+0x21c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d040      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a71      	ldr	r2, [pc, #452]	@ (8001e60 <HAL_DMA_Abort+0x220>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d03b      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a70      	ldr	r2, [pc, #448]	@ (8001e64 <HAL_DMA_Abort+0x224>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d036      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6e      	ldr	r2, [pc, #440]	@ (8001e68 <HAL_DMA_Abort+0x228>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d031      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6d      	ldr	r2, [pc, #436]	@ (8001e6c <HAL_DMA_Abort+0x22c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d02c      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e70 <HAL_DMA_Abort+0x230>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d027      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6a      	ldr	r2, [pc, #424]	@ (8001e74 <HAL_DMA_Abort+0x234>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d022      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a68      	ldr	r2, [pc, #416]	@ (8001e78 <HAL_DMA_Abort+0x238>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01d      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a67      	ldr	r2, [pc, #412]	@ (8001e7c <HAL_DMA_Abort+0x23c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d018      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a65      	ldr	r2, [pc, #404]	@ (8001e80 <HAL_DMA_Abort+0x240>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a64      	ldr	r2, [pc, #400]	@ (8001e84 <HAL_DMA_Abort+0x244>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00e      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a62      	ldr	r2, [pc, #392]	@ (8001e88 <HAL_DMA_Abort+0x248>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d009      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a61      	ldr	r2, [pc, #388]	@ (8001e8c <HAL_DMA_Abort+0x24c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d004      	beq.n	8001d16 <HAL_DMA_Abort+0xd6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5f      	ldr	r2, [pc, #380]	@ (8001e90 <HAL_DMA_Abort+0x250>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_DMA_Abort+0xda>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_DMA_Abort+0xdc>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d013      	beq.n	8001d48 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 021e 	bic.w	r2, r2, #30
 8001d2e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d3e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e00a      	b.n	8001d5e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020e 	bic.w	r2, r2, #14
 8001d56:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a3c      	ldr	r2, [pc, #240]	@ (8001e54 <HAL_DMA_Abort+0x214>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d072      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e58 <HAL_DMA_Abort+0x218>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d06d      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a39      	ldr	r2, [pc, #228]	@ (8001e5c <HAL_DMA_Abort+0x21c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d068      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a37      	ldr	r2, [pc, #220]	@ (8001e60 <HAL_DMA_Abort+0x220>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d063      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a36      	ldr	r2, [pc, #216]	@ (8001e64 <HAL_DMA_Abort+0x224>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d05e      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a34      	ldr	r2, [pc, #208]	@ (8001e68 <HAL_DMA_Abort+0x228>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d059      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a33      	ldr	r2, [pc, #204]	@ (8001e6c <HAL_DMA_Abort+0x22c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d054      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a31      	ldr	r2, [pc, #196]	@ (8001e70 <HAL_DMA_Abort+0x230>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d04f      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a30      	ldr	r2, [pc, #192]	@ (8001e74 <HAL_DMA_Abort+0x234>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d04a      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8001e78 <HAL_DMA_Abort+0x238>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d045      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001e7c <HAL_DMA_Abort+0x23c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d040      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e80 <HAL_DMA_Abort+0x240>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d03b      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a2a      	ldr	r2, [pc, #168]	@ (8001e84 <HAL_DMA_Abort+0x244>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d036      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a28      	ldr	r2, [pc, #160]	@ (8001e88 <HAL_DMA_Abort+0x248>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d031      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a27      	ldr	r2, [pc, #156]	@ (8001e8c <HAL_DMA_Abort+0x24c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d02c      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a25      	ldr	r2, [pc, #148]	@ (8001e90 <HAL_DMA_Abort+0x250>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d027      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a24      	ldr	r2, [pc, #144]	@ (8001e94 <HAL_DMA_Abort+0x254>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a22      	ldr	r2, [pc, #136]	@ (8001e98 <HAL_DMA_Abort+0x258>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01d      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a21      	ldr	r2, [pc, #132]	@ (8001e9c <HAL_DMA_Abort+0x25c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d018      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea0 <HAL_DMA_Abort+0x260>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea4 <HAL_DMA_Abort+0x264>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00e      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea8 <HAL_DMA_Abort+0x268>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001eac <HAL_DMA_Abort+0x26c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_DMA_Abort+0x20e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <HAL_DMA_Abort+0x270>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d132      	bne.n	8001eb4 <HAL_DMA_Abort+0x274>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e031      	b.n	8001eb6 <HAL_DMA_Abort+0x276>
 8001e52:	bf00      	nop
 8001e54:	40020010 	.word	0x40020010
 8001e58:	40020028 	.word	0x40020028
 8001e5c:	40020040 	.word	0x40020040
 8001e60:	40020058 	.word	0x40020058
 8001e64:	40020070 	.word	0x40020070
 8001e68:	40020088 	.word	0x40020088
 8001e6c:	400200a0 	.word	0x400200a0
 8001e70:	400200b8 	.word	0x400200b8
 8001e74:	40020410 	.word	0x40020410
 8001e78:	40020428 	.word	0x40020428
 8001e7c:	40020440 	.word	0x40020440
 8001e80:	40020458 	.word	0x40020458
 8001e84:	40020470 	.word	0x40020470
 8001e88:	40020488 	.word	0x40020488
 8001e8c:	400204a0 	.word	0x400204a0
 8001e90:	400204b8 	.word	0x400204b8
 8001e94:	58025408 	.word	0x58025408
 8001e98:	5802541c 	.word	0x5802541c
 8001e9c:	58025430 	.word	0x58025430
 8001ea0:	58025444 	.word	0x58025444
 8001ea4:	58025458 	.word	0x58025458
 8001ea8:	5802546c 	.word	0x5802546c
 8001eac:	58025480 	.word	0x58025480
 8001eb0:	58025494 	.word	0x58025494
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6d      	ldr	r2, [pc, #436]	@ (8002084 <HAL_DMA_Abort+0x444>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d04a      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6b      	ldr	r2, [pc, #428]	@ (8002088 <HAL_DMA_Abort+0x448>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d045      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6a      	ldr	r2, [pc, #424]	@ (800208c <HAL_DMA_Abort+0x44c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d040      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a68      	ldr	r2, [pc, #416]	@ (8002090 <HAL_DMA_Abort+0x450>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d03b      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a67      	ldr	r2, [pc, #412]	@ (8002094 <HAL_DMA_Abort+0x454>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d036      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a65      	ldr	r2, [pc, #404]	@ (8002098 <HAL_DMA_Abort+0x458>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d031      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a64      	ldr	r2, [pc, #400]	@ (800209c <HAL_DMA_Abort+0x45c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d02c      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a62      	ldr	r2, [pc, #392]	@ (80020a0 <HAL_DMA_Abort+0x460>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d027      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a61      	ldr	r2, [pc, #388]	@ (80020a4 <HAL_DMA_Abort+0x464>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d022      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a5f      	ldr	r2, [pc, #380]	@ (80020a8 <HAL_DMA_Abort+0x468>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01d      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a5e      	ldr	r2, [pc, #376]	@ (80020ac <HAL_DMA_Abort+0x46c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d018      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80020b0 <HAL_DMA_Abort+0x470>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a5b      	ldr	r2, [pc, #364]	@ (80020b4 <HAL_DMA_Abort+0x474>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00e      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a59      	ldr	r2, [pc, #356]	@ (80020b8 <HAL_DMA_Abort+0x478>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d009      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a58      	ldr	r2, [pc, #352]	@ (80020bc <HAL_DMA_Abort+0x47c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d004      	beq.n	8001f6a <HAL_DMA_Abort+0x32a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a56      	ldr	r2, [pc, #344]	@ (80020c0 <HAL_DMA_Abort+0x480>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d108      	bne.n	8001f7c <HAL_DMA_Abort+0x33c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0201 	bic.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e007      	b.n	8001f8c <HAL_DMA_Abort+0x34c>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f8c:	e013      	b.n	8001fb6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f8e:	f7fe ff69 	bl	8000e64 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d90c      	bls.n	8001fb6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e12d      	b.n	8002212 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e5      	bne.n	8001f8e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8002084 <HAL_DMA_Abort+0x444>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d04a      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8002088 <HAL_DMA_Abort+0x448>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d045      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2c      	ldr	r2, [pc, #176]	@ (800208c <HAL_DMA_Abort+0x44c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d040      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8002090 <HAL_DMA_Abort+0x450>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d03b      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a29      	ldr	r2, [pc, #164]	@ (8002094 <HAL_DMA_Abort+0x454>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d036      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a27      	ldr	r2, [pc, #156]	@ (8002098 <HAL_DMA_Abort+0x458>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d031      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a26      	ldr	r2, [pc, #152]	@ (800209c <HAL_DMA_Abort+0x45c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d02c      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a24      	ldr	r2, [pc, #144]	@ (80020a0 <HAL_DMA_Abort+0x460>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d027      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a23      	ldr	r2, [pc, #140]	@ (80020a4 <HAL_DMA_Abort+0x464>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d022      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a21      	ldr	r2, [pc, #132]	@ (80020a8 <HAL_DMA_Abort+0x468>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01d      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a20      	ldr	r2, [pc, #128]	@ (80020ac <HAL_DMA_Abort+0x46c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d018      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1e      	ldr	r2, [pc, #120]	@ (80020b0 <HAL_DMA_Abort+0x470>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1d      	ldr	r2, [pc, #116]	@ (80020b4 <HAL_DMA_Abort+0x474>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00e      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <HAL_DMA_Abort+0x478>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1a      	ldr	r2, [pc, #104]	@ (80020bc <HAL_DMA_Abort+0x47c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d004      	beq.n	8002062 <HAL_DMA_Abort+0x422>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a18      	ldr	r2, [pc, #96]	@ (80020c0 <HAL_DMA_Abort+0x480>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_DMA_Abort+0x426>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_DMA_Abort+0x428>
 8002066:	2300      	movs	r3, #0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d02b      	beq.n	80020c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002070:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	223f      	movs	r2, #63	@ 0x3f
 800207c:	409a      	lsls	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	e02a      	b.n	80020da <HAL_DMA_Abort+0x49a>
 8002084:	40020010 	.word	0x40020010
 8002088:	40020028 	.word	0x40020028
 800208c:	40020040 	.word	0x40020040
 8002090:	40020058 	.word	0x40020058
 8002094:	40020070 	.word	0x40020070
 8002098:	40020088 	.word	0x40020088
 800209c:	400200a0 	.word	0x400200a0
 80020a0:	400200b8 	.word	0x400200b8
 80020a4:	40020410 	.word	0x40020410
 80020a8:	40020428 	.word	0x40020428
 80020ac:	40020440 	.word	0x40020440
 80020b0:	40020458 	.word	0x40020458
 80020b4:	40020470 	.word	0x40020470
 80020b8:	40020488 	.word	0x40020488
 80020bc:	400204a0 	.word	0x400204a0
 80020c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2201      	movs	r2, #1
 80020d4:	409a      	lsls	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a4f      	ldr	r2, [pc, #316]	@ (800221c <HAL_DMA_Abort+0x5dc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d072      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002220 <HAL_DMA_Abort+0x5e0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d06d      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002224 <HAL_DMA_Abort+0x5e4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d068      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002228 <HAL_DMA_Abort+0x5e8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d063      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a49      	ldr	r2, [pc, #292]	@ (800222c <HAL_DMA_Abort+0x5ec>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d05e      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a47      	ldr	r2, [pc, #284]	@ (8002230 <HAL_DMA_Abort+0x5f0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d059      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a46      	ldr	r2, [pc, #280]	@ (8002234 <HAL_DMA_Abort+0x5f4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d054      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a44      	ldr	r2, [pc, #272]	@ (8002238 <HAL_DMA_Abort+0x5f8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d04f      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a43      	ldr	r2, [pc, #268]	@ (800223c <HAL_DMA_Abort+0x5fc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d04a      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a41      	ldr	r2, [pc, #260]	@ (8002240 <HAL_DMA_Abort+0x600>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d045      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a40      	ldr	r2, [pc, #256]	@ (8002244 <HAL_DMA_Abort+0x604>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d040      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a3e      	ldr	r2, [pc, #248]	@ (8002248 <HAL_DMA_Abort+0x608>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d03b      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3d      	ldr	r2, [pc, #244]	@ (800224c <HAL_DMA_Abort+0x60c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d036      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3b      	ldr	r2, [pc, #236]	@ (8002250 <HAL_DMA_Abort+0x610>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d031      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a3a      	ldr	r2, [pc, #232]	@ (8002254 <HAL_DMA_Abort+0x614>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d02c      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a38      	ldr	r2, [pc, #224]	@ (8002258 <HAL_DMA_Abort+0x618>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d027      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a37      	ldr	r2, [pc, #220]	@ (800225c <HAL_DMA_Abort+0x61c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d022      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a35      	ldr	r2, [pc, #212]	@ (8002260 <HAL_DMA_Abort+0x620>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01d      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a34      	ldr	r2, [pc, #208]	@ (8002264 <HAL_DMA_Abort+0x624>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d018      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a32      	ldr	r2, [pc, #200]	@ (8002268 <HAL_DMA_Abort+0x628>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a31      	ldr	r2, [pc, #196]	@ (800226c <HAL_DMA_Abort+0x62c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00e      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002270 <HAL_DMA_Abort+0x630>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002274 <HAL_DMA_Abort+0x634>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d004      	beq.n	80021ca <HAL_DMA_Abort+0x58a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002278 <HAL_DMA_Abort+0x638>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_DMA_Abort+0x58e>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_DMA_Abort+0x590>
 80021ce:	2300      	movs	r3, #0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00c      	beq.n	8002200 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40020010 	.word	0x40020010
 8002220:	40020028 	.word	0x40020028
 8002224:	40020040 	.word	0x40020040
 8002228:	40020058 	.word	0x40020058
 800222c:	40020070 	.word	0x40020070
 8002230:	40020088 	.word	0x40020088
 8002234:	400200a0 	.word	0x400200a0
 8002238:	400200b8 	.word	0x400200b8
 800223c:	40020410 	.word	0x40020410
 8002240:	40020428 	.word	0x40020428
 8002244:	40020440 	.word	0x40020440
 8002248:	40020458 	.word	0x40020458
 800224c:	40020470 	.word	0x40020470
 8002250:	40020488 	.word	0x40020488
 8002254:	400204a0 	.word	0x400204a0
 8002258:	400204b8 	.word	0x400204b8
 800225c:	58025408 	.word	0x58025408
 8002260:	5802541c 	.word	0x5802541c
 8002264:	58025430 	.word	0x58025430
 8002268:	58025444 	.word	0x58025444
 800226c:	58025458 	.word	0x58025458
 8002270:	5802546c 	.word	0x5802546c
 8002274:	58025480 	.word	0x58025480
 8002278:	58025494 	.word	0x58025494

0800227c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e237      	b.n	80026fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d004      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2280      	movs	r2, #128	@ 0x80
 800229e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e22c      	b.n	80026fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a5c      	ldr	r2, [pc, #368]	@ (800241c <HAL_DMA_Abort_IT+0x1a0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d04a      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002420 <HAL_DMA_Abort_IT+0x1a4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d045      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a59      	ldr	r2, [pc, #356]	@ (8002424 <HAL_DMA_Abort_IT+0x1a8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d040      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a58      	ldr	r2, [pc, #352]	@ (8002428 <HAL_DMA_Abort_IT+0x1ac>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d03b      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a56      	ldr	r2, [pc, #344]	@ (800242c <HAL_DMA_Abort_IT+0x1b0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d036      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a55      	ldr	r2, [pc, #340]	@ (8002430 <HAL_DMA_Abort_IT+0x1b4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d031      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a53      	ldr	r2, [pc, #332]	@ (8002434 <HAL_DMA_Abort_IT+0x1b8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02c      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a52      	ldr	r2, [pc, #328]	@ (8002438 <HAL_DMA_Abort_IT+0x1bc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d027      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a50      	ldr	r2, [pc, #320]	@ (800243c <HAL_DMA_Abort_IT+0x1c0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d022      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a4f      	ldr	r2, [pc, #316]	@ (8002440 <HAL_DMA_Abort_IT+0x1c4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d01d      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a4d      	ldr	r2, [pc, #308]	@ (8002444 <HAL_DMA_Abort_IT+0x1c8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d018      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a4c      	ldr	r2, [pc, #304]	@ (8002448 <HAL_DMA_Abort_IT+0x1cc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a4a      	ldr	r2, [pc, #296]	@ (800244c <HAL_DMA_Abort_IT+0x1d0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00e      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a49      	ldr	r2, [pc, #292]	@ (8002450 <HAL_DMA_Abort_IT+0x1d4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a47      	ldr	r2, [pc, #284]	@ (8002454 <HAL_DMA_Abort_IT+0x1d8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Abort_IT+0xc8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a46      	ldr	r2, [pc, #280]	@ (8002458 <HAL_DMA_Abort_IT+0x1dc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <HAL_DMA_Abort_IT+0xcc>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_DMA_Abort_IT+0xce>
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8086 	beq.w	800245c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2204      	movs	r2, #4
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2f      	ldr	r2, [pc, #188]	@ (800241c <HAL_DMA_Abort_IT+0x1a0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d04a      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2e      	ldr	r2, [pc, #184]	@ (8002420 <HAL_DMA_Abort_IT+0x1a4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d045      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a2c      	ldr	r2, [pc, #176]	@ (8002424 <HAL_DMA_Abort_IT+0x1a8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d040      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2b      	ldr	r2, [pc, #172]	@ (8002428 <HAL_DMA_Abort_IT+0x1ac>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d03b      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a29      	ldr	r2, [pc, #164]	@ (800242c <HAL_DMA_Abort_IT+0x1b0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d036      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a28      	ldr	r2, [pc, #160]	@ (8002430 <HAL_DMA_Abort_IT+0x1b4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d031      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a26      	ldr	r2, [pc, #152]	@ (8002434 <HAL_DMA_Abort_IT+0x1b8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02c      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a25      	ldr	r2, [pc, #148]	@ (8002438 <HAL_DMA_Abort_IT+0x1bc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d027      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a23      	ldr	r2, [pc, #140]	@ (800243c <HAL_DMA_Abort_IT+0x1c0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d022      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a22      	ldr	r2, [pc, #136]	@ (8002440 <HAL_DMA_Abort_IT+0x1c4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d01d      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a20      	ldr	r2, [pc, #128]	@ (8002444 <HAL_DMA_Abort_IT+0x1c8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d018      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002448 <HAL_DMA_Abort_IT+0x1cc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d013      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1d      	ldr	r2, [pc, #116]	@ (800244c <HAL_DMA_Abort_IT+0x1d0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00e      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1c      	ldr	r2, [pc, #112]	@ (8002450 <HAL_DMA_Abort_IT+0x1d4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d009      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002454 <HAL_DMA_Abort_IT+0x1d8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d004      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x17c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a19      	ldr	r2, [pc, #100]	@ (8002458 <HAL_DMA_Abort_IT+0x1dc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d108      	bne.n	800240a <HAL_DMA_Abort_IT+0x18e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e178      	b.n	80026fc <HAL_DMA_Abort_IT+0x480>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0201 	bic.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	e16f      	b.n	80026fc <HAL_DMA_Abort_IT+0x480>
 800241c:	40020010 	.word	0x40020010
 8002420:	40020028 	.word	0x40020028
 8002424:	40020040 	.word	0x40020040
 8002428:	40020058 	.word	0x40020058
 800242c:	40020070 	.word	0x40020070
 8002430:	40020088 	.word	0x40020088
 8002434:	400200a0 	.word	0x400200a0
 8002438:	400200b8 	.word	0x400200b8
 800243c:	40020410 	.word	0x40020410
 8002440:	40020428 	.word	0x40020428
 8002444:	40020440 	.word	0x40020440
 8002448:	40020458 	.word	0x40020458
 800244c:	40020470 	.word	0x40020470
 8002450:	40020488 	.word	0x40020488
 8002454:	400204a0 	.word	0x400204a0
 8002458:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 020e 	bic.w	r2, r2, #14
 800246a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6c      	ldr	r2, [pc, #432]	@ (8002624 <HAL_DMA_Abort_IT+0x3a8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d04a      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6b      	ldr	r2, [pc, #428]	@ (8002628 <HAL_DMA_Abort_IT+0x3ac>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d045      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a69      	ldr	r2, [pc, #420]	@ (800262c <HAL_DMA_Abort_IT+0x3b0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d040      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a68      	ldr	r2, [pc, #416]	@ (8002630 <HAL_DMA_Abort_IT+0x3b4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d03b      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a66      	ldr	r2, [pc, #408]	@ (8002634 <HAL_DMA_Abort_IT+0x3b8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d036      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a65      	ldr	r2, [pc, #404]	@ (8002638 <HAL_DMA_Abort_IT+0x3bc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d031      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a63      	ldr	r2, [pc, #396]	@ (800263c <HAL_DMA_Abort_IT+0x3c0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d02c      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a62      	ldr	r2, [pc, #392]	@ (8002640 <HAL_DMA_Abort_IT+0x3c4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d027      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a60      	ldr	r2, [pc, #384]	@ (8002644 <HAL_DMA_Abort_IT+0x3c8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d022      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002648 <HAL_DMA_Abort_IT+0x3cc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d01d      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a5d      	ldr	r2, [pc, #372]	@ (800264c <HAL_DMA_Abort_IT+0x3d0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d018      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a5c      	ldr	r2, [pc, #368]	@ (8002650 <HAL_DMA_Abort_IT+0x3d4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d013      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002654 <HAL_DMA_Abort_IT+0x3d8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00e      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a59      	ldr	r2, [pc, #356]	@ (8002658 <HAL_DMA_Abort_IT+0x3dc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d009      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a57      	ldr	r2, [pc, #348]	@ (800265c <HAL_DMA_Abort_IT+0x3e0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_DMA_Abort_IT+0x290>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a56      	ldr	r2, [pc, #344]	@ (8002660 <HAL_DMA_Abort_IT+0x3e4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d108      	bne.n	800251e <HAL_DMA_Abort_IT+0x2a2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e007      	b.n	800252e <HAL_DMA_Abort_IT+0x2b2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0201 	bic.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a3c      	ldr	r2, [pc, #240]	@ (8002624 <HAL_DMA_Abort_IT+0x3a8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d072      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a3a      	ldr	r2, [pc, #232]	@ (8002628 <HAL_DMA_Abort_IT+0x3ac>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d06d      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a39      	ldr	r2, [pc, #228]	@ (800262c <HAL_DMA_Abort_IT+0x3b0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d068      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a37      	ldr	r2, [pc, #220]	@ (8002630 <HAL_DMA_Abort_IT+0x3b4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d063      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a36      	ldr	r2, [pc, #216]	@ (8002634 <HAL_DMA_Abort_IT+0x3b8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d05e      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a34      	ldr	r2, [pc, #208]	@ (8002638 <HAL_DMA_Abort_IT+0x3bc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d059      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a33      	ldr	r2, [pc, #204]	@ (800263c <HAL_DMA_Abort_IT+0x3c0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d054      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a31      	ldr	r2, [pc, #196]	@ (8002640 <HAL_DMA_Abort_IT+0x3c4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d04f      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a30      	ldr	r2, [pc, #192]	@ (8002644 <HAL_DMA_Abort_IT+0x3c8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d04a      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2e      	ldr	r2, [pc, #184]	@ (8002648 <HAL_DMA_Abort_IT+0x3cc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d045      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2d      	ldr	r2, [pc, #180]	@ (800264c <HAL_DMA_Abort_IT+0x3d0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d040      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002650 <HAL_DMA_Abort_IT+0x3d4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d03b      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002654 <HAL_DMA_Abort_IT+0x3d8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d036      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a28      	ldr	r2, [pc, #160]	@ (8002658 <HAL_DMA_Abort_IT+0x3dc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d031      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a27      	ldr	r2, [pc, #156]	@ (800265c <HAL_DMA_Abort_IT+0x3e0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d02c      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a25      	ldr	r2, [pc, #148]	@ (8002660 <HAL_DMA_Abort_IT+0x3e4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d027      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a24      	ldr	r2, [pc, #144]	@ (8002664 <HAL_DMA_Abort_IT+0x3e8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d022      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a22      	ldr	r2, [pc, #136]	@ (8002668 <HAL_DMA_Abort_IT+0x3ec>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01d      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a21      	ldr	r2, [pc, #132]	@ (800266c <HAL_DMA_Abort_IT+0x3f0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d018      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <HAL_DMA_Abort_IT+0x3f4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002674 <HAL_DMA_Abort_IT+0x3f8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00e      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <HAL_DMA_Abort_IT+0x3fc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d009      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <HAL_DMA_Abort_IT+0x400>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d004      	beq.n	800261e <HAL_DMA_Abort_IT+0x3a2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_DMA_Abort_IT+0x404>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d132      	bne.n	8002684 <HAL_DMA_Abort_IT+0x408>
 800261e:	2301      	movs	r3, #1
 8002620:	e031      	b.n	8002686 <HAL_DMA_Abort_IT+0x40a>
 8002622:	bf00      	nop
 8002624:	40020010 	.word	0x40020010
 8002628:	40020028 	.word	0x40020028
 800262c:	40020040 	.word	0x40020040
 8002630:	40020058 	.word	0x40020058
 8002634:	40020070 	.word	0x40020070
 8002638:	40020088 	.word	0x40020088
 800263c:	400200a0 	.word	0x400200a0
 8002640:	400200b8 	.word	0x400200b8
 8002644:	40020410 	.word	0x40020410
 8002648:	40020428 	.word	0x40020428
 800264c:	40020440 	.word	0x40020440
 8002650:	40020458 	.word	0x40020458
 8002654:	40020470 	.word	0x40020470
 8002658:	40020488 	.word	0x40020488
 800265c:	400204a0 	.word	0x400204a0
 8002660:	400204b8 	.word	0x400204b8
 8002664:	58025408 	.word	0x58025408
 8002668:	5802541c 	.word	0x5802541c
 800266c:	58025430 	.word	0x58025430
 8002670:	58025444 	.word	0x58025444
 8002674:	58025458 	.word	0x58025458
 8002678:	5802546c 	.word	0x5802546c
 800267c:	58025480 	.word	0x58025480
 8002680:	58025494 	.word	0x58025494
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d028      	beq.n	80026dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002698:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2201      	movs	r2, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80026b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop

08002708 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	@ 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002714:	4b67      	ldr	r3, [pc, #412]	@ (80028b4 <HAL_DMA_IRQHandler+0x1ac>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a67      	ldr	r2, [pc, #412]	@ (80028b8 <HAL_DMA_IRQHandler+0x1b0>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002726:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a5f      	ldr	r2, [pc, #380]	@ (80028bc <HAL_DMA_IRQHandler+0x1b4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d04a      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5d      	ldr	r2, [pc, #372]	@ (80028c0 <HAL_DMA_IRQHandler+0x1b8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d045      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a5c      	ldr	r2, [pc, #368]	@ (80028c4 <HAL_DMA_IRQHandler+0x1bc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d040      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5a      	ldr	r2, [pc, #360]	@ (80028c8 <HAL_DMA_IRQHandler+0x1c0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d03b      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a59      	ldr	r2, [pc, #356]	@ (80028cc <HAL_DMA_IRQHandler+0x1c4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d036      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a57      	ldr	r2, [pc, #348]	@ (80028d0 <HAL_DMA_IRQHandler+0x1c8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d031      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a56      	ldr	r2, [pc, #344]	@ (80028d4 <HAL_DMA_IRQHandler+0x1cc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d02c      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a54      	ldr	r2, [pc, #336]	@ (80028d8 <HAL_DMA_IRQHandler+0x1d0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d027      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a53      	ldr	r2, [pc, #332]	@ (80028dc <HAL_DMA_IRQHandler+0x1d4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d022      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a51      	ldr	r2, [pc, #324]	@ (80028e0 <HAL_DMA_IRQHandler+0x1d8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01d      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a50      	ldr	r2, [pc, #320]	@ (80028e4 <HAL_DMA_IRQHandler+0x1dc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d018      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a4e      	ldr	r2, [pc, #312]	@ (80028e8 <HAL_DMA_IRQHandler+0x1e0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a4d      	ldr	r2, [pc, #308]	@ (80028ec <HAL_DMA_IRQHandler+0x1e4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00e      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a4b      	ldr	r2, [pc, #300]	@ (80028f0 <HAL_DMA_IRQHandler+0x1e8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d009      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a4a      	ldr	r2, [pc, #296]	@ (80028f4 <HAL_DMA_IRQHandler+0x1ec>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_DMA_IRQHandler+0xd2>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a48      	ldr	r2, [pc, #288]	@ (80028f8 <HAL_DMA_IRQHandler+0x1f0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_DMA_IRQHandler+0xd6>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_IRQHandler+0xd8>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 842b 	beq.w	800303c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2208      	movs	r2, #8
 80027f0:	409a      	lsls	r2, r3
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80a2 	beq.w	8002940 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2e      	ldr	r2, [pc, #184]	@ (80028bc <HAL_DMA_IRQHandler+0x1b4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d04a      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2d      	ldr	r2, [pc, #180]	@ (80028c0 <HAL_DMA_IRQHandler+0x1b8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d045      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2b      	ldr	r2, [pc, #172]	@ (80028c4 <HAL_DMA_IRQHandler+0x1bc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d040      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2a      	ldr	r2, [pc, #168]	@ (80028c8 <HAL_DMA_IRQHandler+0x1c0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d03b      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a28      	ldr	r2, [pc, #160]	@ (80028cc <HAL_DMA_IRQHandler+0x1c4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d036      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a27      	ldr	r2, [pc, #156]	@ (80028d0 <HAL_DMA_IRQHandler+0x1c8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d031      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a25      	ldr	r2, [pc, #148]	@ (80028d4 <HAL_DMA_IRQHandler+0x1cc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02c      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a24      	ldr	r2, [pc, #144]	@ (80028d8 <HAL_DMA_IRQHandler+0x1d0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d027      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a22      	ldr	r2, [pc, #136]	@ (80028dc <HAL_DMA_IRQHandler+0x1d4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d022      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a21      	ldr	r2, [pc, #132]	@ (80028e0 <HAL_DMA_IRQHandler+0x1d8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d01d      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1f      	ldr	r2, [pc, #124]	@ (80028e4 <HAL_DMA_IRQHandler+0x1dc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1e      	ldr	r2, [pc, #120]	@ (80028e8 <HAL_DMA_IRQHandler+0x1e0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1c      	ldr	r2, [pc, #112]	@ (80028ec <HAL_DMA_IRQHandler+0x1e4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1b      	ldr	r2, [pc, #108]	@ (80028f0 <HAL_DMA_IRQHandler+0x1e8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a19      	ldr	r2, [pc, #100]	@ (80028f4 <HAL_DMA_IRQHandler+0x1ec>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_DMA_IRQHandler+0x194>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a18      	ldr	r2, [pc, #96]	@ (80028f8 <HAL_DMA_IRQHandler+0x1f0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d12f      	bne.n	80028fc <HAL_DMA_IRQHandler+0x1f4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bf14      	ite	ne
 80028aa:	2301      	movne	r3, #1
 80028ac:	2300      	moveq	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	e02e      	b.n	8002910 <HAL_DMA_IRQHandler+0x208>
 80028b2:	bf00      	nop
 80028b4:	24000000 	.word	0x24000000
 80028b8:	1b4e81b5 	.word	0x1b4e81b5
 80028bc:	40020010 	.word	0x40020010
 80028c0:	40020028 	.word	0x40020028
 80028c4:	40020040 	.word	0x40020040
 80028c8:	40020058 	.word	0x40020058
 80028cc:	40020070 	.word	0x40020070
 80028d0:	40020088 	.word	0x40020088
 80028d4:	400200a0 	.word	0x400200a0
 80028d8:	400200b8 	.word	0x400200b8
 80028dc:	40020410 	.word	0x40020410
 80028e0:	40020428 	.word	0x40020428
 80028e4:	40020440 	.word	0x40020440
 80028e8:	40020458 	.word	0x40020458
 80028ec:	40020470 	.word	0x40020470
 80028f0:	40020488 	.word	0x40020488
 80028f4:	400204a0 	.word	0x400204a0
 80028f8:	400204b8 	.word	0x400204b8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0204 	bic.w	r2, r2, #4
 8002922:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2208      	movs	r2, #8
 800292e:	409a      	lsls	r2, r3
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d06e      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a69      	ldr	r2, [pc, #420]	@ (8002b00 <HAL_DMA_IRQHandler+0x3f8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d04a      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a67      	ldr	r2, [pc, #412]	@ (8002b04 <HAL_DMA_IRQHandler+0x3fc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d045      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a66      	ldr	r2, [pc, #408]	@ (8002b08 <HAL_DMA_IRQHandler+0x400>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d040      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a64      	ldr	r2, [pc, #400]	@ (8002b0c <HAL_DMA_IRQHandler+0x404>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d03b      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a63      	ldr	r2, [pc, #396]	@ (8002b10 <HAL_DMA_IRQHandler+0x408>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d036      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a61      	ldr	r2, [pc, #388]	@ (8002b14 <HAL_DMA_IRQHandler+0x40c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d031      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a60      	ldr	r2, [pc, #384]	@ (8002b18 <HAL_DMA_IRQHandler+0x410>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d02c      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5e      	ldr	r2, [pc, #376]	@ (8002b1c <HAL_DMA_IRQHandler+0x414>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d027      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002b20 <HAL_DMA_IRQHandler+0x418>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d022      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5b      	ldr	r2, [pc, #364]	@ (8002b24 <HAL_DMA_IRQHandler+0x41c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01d      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5a      	ldr	r2, [pc, #360]	@ (8002b28 <HAL_DMA_IRQHandler+0x420>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d018      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a58      	ldr	r2, [pc, #352]	@ (8002b2c <HAL_DMA_IRQHandler+0x424>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a57      	ldr	r2, [pc, #348]	@ (8002b30 <HAL_DMA_IRQHandler+0x428>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00e      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a55      	ldr	r2, [pc, #340]	@ (8002b34 <HAL_DMA_IRQHandler+0x42c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d009      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a54      	ldr	r2, [pc, #336]	@ (8002b38 <HAL_DMA_IRQHandler+0x430>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d004      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2ee>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a52      	ldr	r2, [pc, #328]	@ (8002b3c <HAL_DMA_IRQHandler+0x434>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d10a      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x304>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf14      	ite	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2300      	moveq	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e003      	b.n	8002a14 <HAL_DMA_IRQHandler+0x30c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2300      	movs	r3, #0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2201      	movs	r2, #1
 8002a22:	409a      	lsls	r2, r3
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2c:	f043 0202 	orr.w	r2, r3, #2
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 808f 	beq.w	8002b68 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b00 <HAL_DMA_IRQHandler+0x3f8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04a      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2a      	ldr	r2, [pc, #168]	@ (8002b04 <HAL_DMA_IRQHandler+0x3fc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a29      	ldr	r2, [pc, #164]	@ (8002b08 <HAL_DMA_IRQHandler+0x400>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d040      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a27      	ldr	r2, [pc, #156]	@ (8002b0c <HAL_DMA_IRQHandler+0x404>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d03b      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a26      	ldr	r2, [pc, #152]	@ (8002b10 <HAL_DMA_IRQHandler+0x408>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d036      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a24      	ldr	r2, [pc, #144]	@ (8002b14 <HAL_DMA_IRQHandler+0x40c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a23      	ldr	r2, [pc, #140]	@ (8002b18 <HAL_DMA_IRQHandler+0x410>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d02c      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a21      	ldr	r2, [pc, #132]	@ (8002b1c <HAL_DMA_IRQHandler+0x414>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a20      	ldr	r2, [pc, #128]	@ (8002b20 <HAL_DMA_IRQHandler+0x418>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b24 <HAL_DMA_IRQHandler+0x41c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01d      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b28 <HAL_DMA_IRQHandler+0x420>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <HAL_DMA_IRQHandler+0x424>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b30 <HAL_DMA_IRQHandler+0x428>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	@ (8002b34 <HAL_DMA_IRQHandler+0x42c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a17      	ldr	r2, [pc, #92]	@ (8002b38 <HAL_DMA_IRQHandler+0x430>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_IRQHandler+0x3e2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a15      	ldr	r2, [pc, #84]	@ (8002b3c <HAL_DMA_IRQHandler+0x434>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d12a      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x438>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e023      	b.n	8002b48 <HAL_DMA_IRQHandler+0x440>
 8002b00:	40020010 	.word	0x40020010
 8002b04:	40020028 	.word	0x40020028
 8002b08:	40020040 	.word	0x40020040
 8002b0c:	40020058 	.word	0x40020058
 8002b10:	40020070 	.word	0x40020070
 8002b14:	40020088 	.word	0x40020088
 8002b18:	400200a0 	.word	0x400200a0
 8002b1c:	400200b8 	.word	0x400200b8
 8002b20:	40020410 	.word	0x40020410
 8002b24:	40020428 	.word	0x40020428
 8002b28:	40020440 	.word	0x40020440
 8002b2c:	40020458 	.word	0x40020458
 8002b30:	40020470 	.word	0x40020470
 8002b34:	40020488 	.word	0x40020488
 8002b38:	400204a0 	.word	0x400204a0
 8002b3c:	400204b8 	.word	0x400204b8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2204      	movs	r2, #4
 8002b56:	409a      	lsls	r2, r3
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b60:	f043 0204 	orr.w	r2, r3, #4
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2210      	movs	r2, #16
 8002b72:	409a      	lsls	r2, r3
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a6 	beq.w	8002cca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a85      	ldr	r2, [pc, #532]	@ (8002d98 <HAL_DMA_IRQHandler+0x690>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d04a      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a83      	ldr	r2, [pc, #524]	@ (8002d9c <HAL_DMA_IRQHandler+0x694>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d045      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a82      	ldr	r2, [pc, #520]	@ (8002da0 <HAL_DMA_IRQHandler+0x698>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d040      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a80      	ldr	r2, [pc, #512]	@ (8002da4 <HAL_DMA_IRQHandler+0x69c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d03b      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7f      	ldr	r2, [pc, #508]	@ (8002da8 <HAL_DMA_IRQHandler+0x6a0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d036      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a7d      	ldr	r2, [pc, #500]	@ (8002dac <HAL_DMA_IRQHandler+0x6a4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d031      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8002db0 <HAL_DMA_IRQHandler+0x6a8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d02c      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a7a      	ldr	r2, [pc, #488]	@ (8002db4 <HAL_DMA_IRQHandler+0x6ac>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d027      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a79      	ldr	r2, [pc, #484]	@ (8002db8 <HAL_DMA_IRQHandler+0x6b0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d022      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a77      	ldr	r2, [pc, #476]	@ (8002dbc <HAL_DMA_IRQHandler+0x6b4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01d      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a76      	ldr	r2, [pc, #472]	@ (8002dc0 <HAL_DMA_IRQHandler+0x6b8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d018      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a74      	ldr	r2, [pc, #464]	@ (8002dc4 <HAL_DMA_IRQHandler+0x6bc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a73      	ldr	r2, [pc, #460]	@ (8002dc8 <HAL_DMA_IRQHandler+0x6c0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00e      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a71      	ldr	r2, [pc, #452]	@ (8002dcc <HAL_DMA_IRQHandler+0x6c4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a70      	ldr	r2, [pc, #448]	@ (8002dd0 <HAL_DMA_IRQHandler+0x6c8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x516>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6e      	ldr	r2, [pc, #440]	@ (8002dd4 <HAL_DMA_IRQHandler+0x6cc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10a      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x52c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e009      	b.n	8002c48 <HAL_DMA_IRQHandler+0x540>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d03e      	beq.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2210      	movs	r2, #16
 8002c56:	409a      	lsls	r2, r3
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d018      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d108      	bne.n	8002c8a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d024      	beq.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
 8002c88:	e01f      	b.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01b      	beq.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
 8002c9a:	e016      	b.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0208 	bic.w	r2, r2, #8
 8002cb8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8110 	beq.w	8002f00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d98 <HAL_DMA_IRQHandler+0x690>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04a      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2b      	ldr	r2, [pc, #172]	@ (8002d9c <HAL_DMA_IRQHandler+0x694>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d045      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	@ (8002da0 <HAL_DMA_IRQHandler+0x698>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d040      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a28      	ldr	r2, [pc, #160]	@ (8002da4 <HAL_DMA_IRQHandler+0x69c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d03b      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a26      	ldr	r2, [pc, #152]	@ (8002da8 <HAL_DMA_IRQHandler+0x6a0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d036      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a25      	ldr	r2, [pc, #148]	@ (8002dac <HAL_DMA_IRQHandler+0x6a4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d031      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a23      	ldr	r2, [pc, #140]	@ (8002db0 <HAL_DMA_IRQHandler+0x6a8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02c      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a22      	ldr	r2, [pc, #136]	@ (8002db4 <HAL_DMA_IRQHandler+0x6ac>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d027      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a20      	ldr	r2, [pc, #128]	@ (8002db8 <HAL_DMA_IRQHandler+0x6b0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d022      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <HAL_DMA_IRQHandler+0x6b4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01d      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc0 <HAL_DMA_IRQHandler+0x6b8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc4 <HAL_DMA_IRQHandler+0x6bc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc8 <HAL_DMA_IRQHandler+0x6c0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a19      	ldr	r2, [pc, #100]	@ (8002dcc <HAL_DMA_IRQHandler+0x6c4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a17      	ldr	r2, [pc, #92]	@ (8002dd0 <HAL_DMA_IRQHandler+0x6c8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x678>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a16      	ldr	r2, [pc, #88]	@ (8002dd4 <HAL_DMA_IRQHandler+0x6cc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d12b      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0x6d0>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	e02a      	b.n	8002dec <HAL_DMA_IRQHandler+0x6e4>
 8002d96:	bf00      	nop
 8002d98:	40020010 	.word	0x40020010
 8002d9c:	40020028 	.word	0x40020028
 8002da0:	40020040 	.word	0x40020040
 8002da4:	40020058 	.word	0x40020058
 8002da8:	40020070 	.word	0x40020070
 8002dac:	40020088 	.word	0x40020088
 8002db0:	400200a0 	.word	0x400200a0
 8002db4:	400200b8 	.word	0x400200b8
 8002db8:	40020410 	.word	0x40020410
 8002dbc:	40020428 	.word	0x40020428
 8002dc0:	40020440 	.word	0x40020440
 8002dc4:	40020458 	.word	0x40020458
 8002dc8:	40020470 	.word	0x40020470
 8002dcc:	40020488 	.word	0x40020488
 8002dd0:	400204a0 	.word	0x400204a0
 8002dd4:	400204b8 	.word	0x400204b8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf14      	ite	ne
 8002de6:	2301      	movne	r3, #1
 8002de8:	2300      	moveq	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8087 	beq.w	8002f00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d139      	bne.n	8002e82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0216 	bic.w	r2, r2, #22
 8002e1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x736>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0208 	bic.w	r2, r2, #8
 8002e4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	223f      	movs	r2, #63	@ 0x3f
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 834a 	beq.w	800350c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
          }
          return;
 8002e80:	e344      	b.n	800350c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d018      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d108      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d02c      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
 8002eae:	e027      	b.n	8002f00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d023      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
 8002ec0:	e01e      	b.n	8002f00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10f      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0210 	bic.w	r2, r2, #16
 8002ede:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8306 	beq.w	8003516 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8088 	beq.w	8003028 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a7a      	ldr	r2, [pc, #488]	@ (8003110 <HAL_DMA_IRQHandler+0xa08>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d04a      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a79      	ldr	r2, [pc, #484]	@ (8003114 <HAL_DMA_IRQHandler+0xa0c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d045      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a77      	ldr	r2, [pc, #476]	@ (8003118 <HAL_DMA_IRQHandler+0xa10>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d040      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a76      	ldr	r2, [pc, #472]	@ (800311c <HAL_DMA_IRQHandler+0xa14>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d03b      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a74      	ldr	r2, [pc, #464]	@ (8003120 <HAL_DMA_IRQHandler+0xa18>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d036      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a73      	ldr	r2, [pc, #460]	@ (8003124 <HAL_DMA_IRQHandler+0xa1c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d031      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a71      	ldr	r2, [pc, #452]	@ (8003128 <HAL_DMA_IRQHandler+0xa20>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02c      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a70      	ldr	r2, [pc, #448]	@ (800312c <HAL_DMA_IRQHandler+0xa24>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d027      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6e      	ldr	r2, [pc, #440]	@ (8003130 <HAL_DMA_IRQHandler+0xa28>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d022      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6d      	ldr	r2, [pc, #436]	@ (8003134 <HAL_DMA_IRQHandler+0xa2c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01d      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a6b      	ldr	r2, [pc, #428]	@ (8003138 <HAL_DMA_IRQHandler+0xa30>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d018      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a6a      	ldr	r2, [pc, #424]	@ (800313c <HAL_DMA_IRQHandler+0xa34>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a68      	ldr	r2, [pc, #416]	@ (8003140 <HAL_DMA_IRQHandler+0xa38>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a67      	ldr	r2, [pc, #412]	@ (8003144 <HAL_DMA_IRQHandler+0xa3c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a65      	ldr	r2, [pc, #404]	@ (8003148 <HAL_DMA_IRQHandler+0xa40>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x8b8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a64      	ldr	r2, [pc, #400]	@ (800314c <HAL_DMA_IRQHandler+0xa44>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d108      	bne.n	8002fd2 <HAL_DMA_IRQHandler+0x8ca>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e007      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x8da>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d307      	bcc.n	8002ffe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f2      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x8da>
 8002ffc:	e000      	b.n	8003000 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002ffe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2203      	movs	r2, #3
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003016:	e003      	b.n	8003020 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8272 	beq.w	8003516 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
 800303a:	e26c      	b.n	8003516 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a43      	ldr	r2, [pc, #268]	@ (8003150 <HAL_DMA_IRQHandler+0xa48>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d022      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a42      	ldr	r2, [pc, #264]	@ (8003154 <HAL_DMA_IRQHandler+0xa4c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d01d      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a40      	ldr	r2, [pc, #256]	@ (8003158 <HAL_DMA_IRQHandler+0xa50>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d018      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a3f      	ldr	r2, [pc, #252]	@ (800315c <HAL_DMA_IRQHandler+0xa54>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a3d      	ldr	r2, [pc, #244]	@ (8003160 <HAL_DMA_IRQHandler+0xa58>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a3c      	ldr	r2, [pc, #240]	@ (8003164 <HAL_DMA_IRQHandler+0xa5c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a3a      	ldr	r2, [pc, #232]	@ (8003168 <HAL_DMA_IRQHandler+0xa60>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_DMA_IRQHandler+0x984>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a39      	ldr	r2, [pc, #228]	@ (800316c <HAL_DMA_IRQHandler+0xa64>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_DMA_IRQHandler+0x988>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_DMA_IRQHandler+0x98a>
 8003090:	2300      	movs	r3, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 823f 	beq.w	8003516 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2204      	movs	r2, #4
 80030aa:	409a      	lsls	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80cd 	beq.w	8003250 <HAL_DMA_IRQHandler+0xb48>
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80c7 	beq.w	8003250 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2204      	movs	r2, #4
 80030cc:	409a      	lsls	r2, r3
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d049      	beq.n	8003170 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8210 	beq.w	8003510 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030f8:	e20a      	b.n	8003510 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8206 	beq.w	8003510 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800310c:	e200      	b.n	8003510 <HAL_DMA_IRQHandler+0xe08>
 800310e:	bf00      	nop
 8003110:	40020010 	.word	0x40020010
 8003114:	40020028 	.word	0x40020028
 8003118:	40020040 	.word	0x40020040
 800311c:	40020058 	.word	0x40020058
 8003120:	40020070 	.word	0x40020070
 8003124:	40020088 	.word	0x40020088
 8003128:	400200a0 	.word	0x400200a0
 800312c:	400200b8 	.word	0x400200b8
 8003130:	40020410 	.word	0x40020410
 8003134:	40020428 	.word	0x40020428
 8003138:	40020440 	.word	0x40020440
 800313c:	40020458 	.word	0x40020458
 8003140:	40020470 	.word	0x40020470
 8003144:	40020488 	.word	0x40020488
 8003148:	400204a0 	.word	0x400204a0
 800314c:	400204b8 	.word	0x400204b8
 8003150:	58025408 	.word	0x58025408
 8003154:	5802541c 	.word	0x5802541c
 8003158:	58025430 	.word	0x58025430
 800315c:	58025444 	.word	0x58025444
 8003160:	58025458 	.word	0x58025458
 8003164:	5802546c 	.word	0x5802546c
 8003168:	58025480 	.word	0x58025480
 800316c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d160      	bne.n	800323c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7f      	ldr	r2, [pc, #508]	@ (800337c <HAL_DMA_IRQHandler+0xc74>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d04a      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a7d      	ldr	r2, [pc, #500]	@ (8003380 <HAL_DMA_IRQHandler+0xc78>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d045      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7c      	ldr	r2, [pc, #496]	@ (8003384 <HAL_DMA_IRQHandler+0xc7c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d040      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a7a      	ldr	r2, [pc, #488]	@ (8003388 <HAL_DMA_IRQHandler+0xc80>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d03b      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a79      	ldr	r2, [pc, #484]	@ (800338c <HAL_DMA_IRQHandler+0xc84>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d036      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a77      	ldr	r2, [pc, #476]	@ (8003390 <HAL_DMA_IRQHandler+0xc88>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a76      	ldr	r2, [pc, #472]	@ (8003394 <HAL_DMA_IRQHandler+0xc8c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d02c      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a74      	ldr	r2, [pc, #464]	@ (8003398 <HAL_DMA_IRQHandler+0xc90>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d027      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a73      	ldr	r2, [pc, #460]	@ (800339c <HAL_DMA_IRQHandler+0xc94>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a71      	ldr	r2, [pc, #452]	@ (80033a0 <HAL_DMA_IRQHandler+0xc98>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a70      	ldr	r2, [pc, #448]	@ (80033a4 <HAL_DMA_IRQHandler+0xc9c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6e      	ldr	r2, [pc, #440]	@ (80033a8 <HAL_DMA_IRQHandler+0xca0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6d      	ldr	r2, [pc, #436]	@ (80033ac <HAL_DMA_IRQHandler+0xca4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a6b      	ldr	r2, [pc, #428]	@ (80033b0 <HAL_DMA_IRQHandler+0xca8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a6a      	ldr	r2, [pc, #424]	@ (80033b4 <HAL_DMA_IRQHandler+0xcac>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_DMA_IRQHandler+0xb12>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a68      	ldr	r2, [pc, #416]	@ (80033b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d108      	bne.n	800322c <HAL_DMA_IRQHandler+0xb24>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0208 	bic.w	r2, r2, #8
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e007      	b.n	800323c <HAL_DMA_IRQHandler+0xb34>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0204 	bic.w	r2, r2, #4
 800323a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8165 	beq.w	8003510 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800324e:	e15f      	b.n	8003510 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2202      	movs	r2, #2
 800325a:	409a      	lsls	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80c5 	beq.w	80033f0 <HAL_DMA_IRQHandler+0xce8>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80bf 	beq.w	80033f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2202      	movs	r2, #2
 800327c:	409a      	lsls	r2, r3
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d018      	beq.n	80032be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 813a 	beq.w	8003514 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032a8:	e134      	b.n	8003514 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8130 	beq.w	8003514 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032bc:	e12a      	b.n	8003514 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 8089 	bne.w	80033dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2b      	ldr	r2, [pc, #172]	@ (800337c <HAL_DMA_IRQHandler+0xc74>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d04a      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a29      	ldr	r2, [pc, #164]	@ (8003380 <HAL_DMA_IRQHandler+0xc78>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d045      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a28      	ldr	r2, [pc, #160]	@ (8003384 <HAL_DMA_IRQHandler+0xc7c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d040      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a26      	ldr	r2, [pc, #152]	@ (8003388 <HAL_DMA_IRQHandler+0xc80>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d03b      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a25      	ldr	r2, [pc, #148]	@ (800338c <HAL_DMA_IRQHandler+0xc84>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d036      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a23      	ldr	r2, [pc, #140]	@ (8003390 <HAL_DMA_IRQHandler+0xc88>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d031      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a22      	ldr	r2, [pc, #136]	@ (8003394 <HAL_DMA_IRQHandler+0xc8c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d02c      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a20      	ldr	r2, [pc, #128]	@ (8003398 <HAL_DMA_IRQHandler+0xc90>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d027      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1f      	ldr	r2, [pc, #124]	@ (800339c <HAL_DMA_IRQHandler+0xc94>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1d      	ldr	r2, [pc, #116]	@ (80033a0 <HAL_DMA_IRQHandler+0xc98>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01d      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1c      	ldr	r2, [pc, #112]	@ (80033a4 <HAL_DMA_IRQHandler+0xc9c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d018      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1a      	ldr	r2, [pc, #104]	@ (80033a8 <HAL_DMA_IRQHandler+0xca0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a19      	ldr	r2, [pc, #100]	@ (80033ac <HAL_DMA_IRQHandler+0xca4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00e      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a17      	ldr	r2, [pc, #92]	@ (80033b0 <HAL_DMA_IRQHandler+0xca8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a16      	ldr	r2, [pc, #88]	@ (80033b4 <HAL_DMA_IRQHandler+0xcac>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d004      	beq.n	800336a <HAL_DMA_IRQHandler+0xc62>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a14      	ldr	r2, [pc, #80]	@ (80033b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d128      	bne.n	80033bc <HAL_DMA_IRQHandler+0xcb4>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0214 	bic.w	r2, r2, #20
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e027      	b.n	80033cc <HAL_DMA_IRQHandler+0xcc4>
 800337c:	40020010 	.word	0x40020010
 8003380:	40020028 	.word	0x40020028
 8003384:	40020040 	.word	0x40020040
 8003388:	40020058 	.word	0x40020058
 800338c:	40020070 	.word	0x40020070
 8003390:	40020088 	.word	0x40020088
 8003394:	400200a0 	.word	0x400200a0
 8003398:	400200b8 	.word	0x400200b8
 800339c:	40020410 	.word	0x40020410
 80033a0:	40020428 	.word	0x40020428
 80033a4:	40020440 	.word	0x40020440
 80033a8:	40020458 	.word	0x40020458
 80033ac:	40020470 	.word	0x40020470
 80033b0:	40020488 	.word	0x40020488
 80033b4:	400204a0 	.word	0x400204a0
 80033b8:	400204b8 	.word	0x400204b8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 020a 	bic.w	r2, r2, #10
 80033ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8097 	beq.w	8003514 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ee:	e091      	b.n	8003514 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2208      	movs	r2, #8
 80033fa:	409a      	lsls	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8088 	beq.w	8003516 <HAL_DMA_IRQHandler+0xe0e>
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8082 	beq.w	8003516 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a41      	ldr	r2, [pc, #260]	@ (800351c <HAL_DMA_IRQHandler+0xe14>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d04a      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a3f      	ldr	r2, [pc, #252]	@ (8003520 <HAL_DMA_IRQHandler+0xe18>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d045      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a3e      	ldr	r2, [pc, #248]	@ (8003524 <HAL_DMA_IRQHandler+0xe1c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d040      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a3c      	ldr	r2, [pc, #240]	@ (8003528 <HAL_DMA_IRQHandler+0xe20>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d03b      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a3b      	ldr	r2, [pc, #236]	@ (800352c <HAL_DMA_IRQHandler+0xe24>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d036      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a39      	ldr	r2, [pc, #228]	@ (8003530 <HAL_DMA_IRQHandler+0xe28>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d031      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a38      	ldr	r2, [pc, #224]	@ (8003534 <HAL_DMA_IRQHandler+0xe2c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d02c      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a36      	ldr	r2, [pc, #216]	@ (8003538 <HAL_DMA_IRQHandler+0xe30>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d027      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a35      	ldr	r2, [pc, #212]	@ (800353c <HAL_DMA_IRQHandler+0xe34>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d022      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a33      	ldr	r2, [pc, #204]	@ (8003540 <HAL_DMA_IRQHandler+0xe38>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01d      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a32      	ldr	r2, [pc, #200]	@ (8003544 <HAL_DMA_IRQHandler+0xe3c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d018      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a30      	ldr	r2, [pc, #192]	@ (8003548 <HAL_DMA_IRQHandler+0xe40>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2f      	ldr	r2, [pc, #188]	@ (800354c <HAL_DMA_IRQHandler+0xe44>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00e      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2d      	ldr	r2, [pc, #180]	@ (8003550 <HAL_DMA_IRQHandler+0xe48>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d009      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003554 <HAL_DMA_IRQHandler+0xe4c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xdaa>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003558 <HAL_DMA_IRQHandler+0xe50>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <HAL_DMA_IRQHandler+0xdbc>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 021c 	bic.w	r2, r2, #28
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e007      	b.n	80034d4 <HAL_DMA_IRQHandler+0xdcc>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020e 	bic.w	r2, r2, #14
 80034d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2201      	movs	r2, #1
 80034de:	409a      	lsls	r2, r3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
 800350a:	e004      	b.n	8003516 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800350c:	bf00      	nop
 800350e:	e002      	b.n	8003516 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003514:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003516:	3728      	adds	r7, #40	@ 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40020010 	.word	0x40020010
 8003520:	40020028 	.word	0x40020028
 8003524:	40020040 	.word	0x40020040
 8003528:	40020058 	.word	0x40020058
 800352c:	40020070 	.word	0x40020070
 8003530:	40020088 	.word	0x40020088
 8003534:	400200a0 	.word	0x400200a0
 8003538:	400200b8 	.word	0x400200b8
 800353c:	40020410 	.word	0x40020410
 8003540:	40020428 	.word	0x40020428
 8003544:	40020440 	.word	0x40020440
 8003548:	40020458 	.word	0x40020458
 800354c:	40020470 	.word	0x40020470
 8003550:	40020488 	.word	0x40020488
 8003554:	400204a0 	.word	0x400204a0
 8003558:	400204b8 	.word	0x400204b8

0800355c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7f      	ldr	r2, [pc, #508]	@ (8003790 <DMA_SetConfig+0x21c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d072      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7d      	ldr	r2, [pc, #500]	@ (8003794 <DMA_SetConfig+0x220>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d06d      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003798 <DMA_SetConfig+0x224>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d068      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a7a      	ldr	r2, [pc, #488]	@ (800379c <DMA_SetConfig+0x228>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d063      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a79      	ldr	r2, [pc, #484]	@ (80037a0 <DMA_SetConfig+0x22c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d05e      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a77      	ldr	r2, [pc, #476]	@ (80037a4 <DMA_SetConfig+0x230>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d059      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a76      	ldr	r2, [pc, #472]	@ (80037a8 <DMA_SetConfig+0x234>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d054      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a74      	ldr	r2, [pc, #464]	@ (80037ac <DMA_SetConfig+0x238>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d04f      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a73      	ldr	r2, [pc, #460]	@ (80037b0 <DMA_SetConfig+0x23c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d04a      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a71      	ldr	r2, [pc, #452]	@ (80037b4 <DMA_SetConfig+0x240>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d045      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a70      	ldr	r2, [pc, #448]	@ (80037b8 <DMA_SetConfig+0x244>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d040      	beq.n	800367e <DMA_SetConfig+0x10a>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a6e      	ldr	r2, [pc, #440]	@ (80037bc <DMA_SetConfig+0x248>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d03b      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6d      	ldr	r2, [pc, #436]	@ (80037c0 <DMA_SetConfig+0x24c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d036      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a6b      	ldr	r2, [pc, #428]	@ (80037c4 <DMA_SetConfig+0x250>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d031      	beq.n	800367e <DMA_SetConfig+0x10a>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a6a      	ldr	r2, [pc, #424]	@ (80037c8 <DMA_SetConfig+0x254>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d02c      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a68      	ldr	r2, [pc, #416]	@ (80037cc <DMA_SetConfig+0x258>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d027      	beq.n	800367e <DMA_SetConfig+0x10a>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a67      	ldr	r2, [pc, #412]	@ (80037d0 <DMA_SetConfig+0x25c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d022      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <DMA_SetConfig+0x260>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01d      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a64      	ldr	r2, [pc, #400]	@ (80037d8 <DMA_SetConfig+0x264>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d018      	beq.n	800367e <DMA_SetConfig+0x10a>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a62      	ldr	r2, [pc, #392]	@ (80037dc <DMA_SetConfig+0x268>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a61      	ldr	r2, [pc, #388]	@ (80037e0 <DMA_SetConfig+0x26c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a5f      	ldr	r2, [pc, #380]	@ (80037e4 <DMA_SetConfig+0x270>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d009      	beq.n	800367e <DMA_SetConfig+0x10a>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5e      	ldr	r2, [pc, #376]	@ (80037e8 <DMA_SetConfig+0x274>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <DMA_SetConfig+0x10a>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5c      	ldr	r2, [pc, #368]	@ (80037ec <DMA_SetConfig+0x278>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <DMA_SetConfig+0x10e>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <DMA_SetConfig+0x110>
 8003682:	2300      	movs	r3, #0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00d      	beq.n	80036a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003690:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a39      	ldr	r2, [pc, #228]	@ (8003790 <DMA_SetConfig+0x21c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d04a      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a38      	ldr	r2, [pc, #224]	@ (8003794 <DMA_SetConfig+0x220>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d045      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a36      	ldr	r2, [pc, #216]	@ (8003798 <DMA_SetConfig+0x224>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d040      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a35      	ldr	r2, [pc, #212]	@ (800379c <DMA_SetConfig+0x228>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d03b      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a33      	ldr	r2, [pc, #204]	@ (80037a0 <DMA_SetConfig+0x22c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d036      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a32      	ldr	r2, [pc, #200]	@ (80037a4 <DMA_SetConfig+0x230>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d031      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a30      	ldr	r2, [pc, #192]	@ (80037a8 <DMA_SetConfig+0x234>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d02c      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a2f      	ldr	r2, [pc, #188]	@ (80037ac <DMA_SetConfig+0x238>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d027      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a2d      	ldr	r2, [pc, #180]	@ (80037b0 <DMA_SetConfig+0x23c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d022      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2c      	ldr	r2, [pc, #176]	@ (80037b4 <DMA_SetConfig+0x240>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d01d      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2a      	ldr	r2, [pc, #168]	@ (80037b8 <DMA_SetConfig+0x244>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d018      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a29      	ldr	r2, [pc, #164]	@ (80037bc <DMA_SetConfig+0x248>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d013      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a27      	ldr	r2, [pc, #156]	@ (80037c0 <DMA_SetConfig+0x24c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00e      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a26      	ldr	r2, [pc, #152]	@ (80037c4 <DMA_SetConfig+0x250>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d009      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a24      	ldr	r2, [pc, #144]	@ (80037c8 <DMA_SetConfig+0x254>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d004      	beq.n	8003744 <DMA_SetConfig+0x1d0>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a23      	ldr	r2, [pc, #140]	@ (80037cc <DMA_SetConfig+0x258>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <DMA_SetConfig+0x1d4>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <DMA_SetConfig+0x1d6>
 8003748:	2300      	movs	r3, #0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d059      	beq.n	8003802 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	223f      	movs	r2, #63	@ 0x3f
 8003758:	409a      	lsls	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800376c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b40      	cmp	r3, #64	@ 0x40
 800377c:	d138      	bne.n	80037f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800378e:	e086      	b.n	800389e <DMA_SetConfig+0x32a>
 8003790:	40020010 	.word	0x40020010
 8003794:	40020028 	.word	0x40020028
 8003798:	40020040 	.word	0x40020040
 800379c:	40020058 	.word	0x40020058
 80037a0:	40020070 	.word	0x40020070
 80037a4:	40020088 	.word	0x40020088
 80037a8:	400200a0 	.word	0x400200a0
 80037ac:	400200b8 	.word	0x400200b8
 80037b0:	40020410 	.word	0x40020410
 80037b4:	40020428 	.word	0x40020428
 80037b8:	40020440 	.word	0x40020440
 80037bc:	40020458 	.word	0x40020458
 80037c0:	40020470 	.word	0x40020470
 80037c4:	40020488 	.word	0x40020488
 80037c8:	400204a0 	.word	0x400204a0
 80037cc:	400204b8 	.word	0x400204b8
 80037d0:	58025408 	.word	0x58025408
 80037d4:	5802541c 	.word	0x5802541c
 80037d8:	58025430 	.word	0x58025430
 80037dc:	58025444 	.word	0x58025444
 80037e0:	58025458 	.word	0x58025458
 80037e4:	5802546c 	.word	0x5802546c
 80037e8:	58025480 	.word	0x58025480
 80037ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
}
 8003800:	e04d      	b.n	800389e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a29      	ldr	r2, [pc, #164]	@ (80038ac <DMA_SetConfig+0x338>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d022      	beq.n	8003852 <DMA_SetConfig+0x2de>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a27      	ldr	r2, [pc, #156]	@ (80038b0 <DMA_SetConfig+0x33c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01d      	beq.n	8003852 <DMA_SetConfig+0x2de>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a26      	ldr	r2, [pc, #152]	@ (80038b4 <DMA_SetConfig+0x340>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d018      	beq.n	8003852 <DMA_SetConfig+0x2de>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a24      	ldr	r2, [pc, #144]	@ (80038b8 <DMA_SetConfig+0x344>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <DMA_SetConfig+0x2de>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a23      	ldr	r2, [pc, #140]	@ (80038bc <DMA_SetConfig+0x348>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <DMA_SetConfig+0x2de>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a21      	ldr	r2, [pc, #132]	@ (80038c0 <DMA_SetConfig+0x34c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <DMA_SetConfig+0x2de>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a20      	ldr	r2, [pc, #128]	@ (80038c4 <DMA_SetConfig+0x350>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <DMA_SetConfig+0x2de>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1e      	ldr	r2, [pc, #120]	@ (80038c8 <DMA_SetConfig+0x354>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <DMA_SetConfig+0x2e2>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <DMA_SetConfig+0x2e4>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	2201      	movs	r2, #1
 8003866:	409a      	lsls	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	d108      	bne.n	800388e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	60da      	str	r2, [r3, #12]
}
 800388c:	e007      	b.n	800389e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	60da      	str	r2, [r3, #12]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	58025408 	.word	0x58025408
 80038b0:	5802541c 	.word	0x5802541c
 80038b4:	58025430 	.word	0x58025430
 80038b8:	58025444 	.word	0x58025444
 80038bc:	58025458 	.word	0x58025458
 80038c0:	5802546c 	.word	0x5802546c
 80038c4:	58025480 	.word	0x58025480
 80038c8:	58025494 	.word	0x58025494

080038cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a42      	ldr	r2, [pc, #264]	@ (80039e4 <DMA_CalcBaseAndBitshift+0x118>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d04a      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a41      	ldr	r2, [pc, #260]	@ (80039e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d045      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3f      	ldr	r2, [pc, #252]	@ (80039ec <DMA_CalcBaseAndBitshift+0x120>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d040      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a3e      	ldr	r2, [pc, #248]	@ (80039f0 <DMA_CalcBaseAndBitshift+0x124>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d03b      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a3c      	ldr	r2, [pc, #240]	@ (80039f4 <DMA_CalcBaseAndBitshift+0x128>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d036      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a3b      	ldr	r2, [pc, #236]	@ (80039f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d031      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a39      	ldr	r2, [pc, #228]	@ (80039fc <DMA_CalcBaseAndBitshift+0x130>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02c      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a38      	ldr	r2, [pc, #224]	@ (8003a00 <DMA_CalcBaseAndBitshift+0x134>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d027      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a36      	ldr	r2, [pc, #216]	@ (8003a04 <DMA_CalcBaseAndBitshift+0x138>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a35      	ldr	r2, [pc, #212]	@ (8003a08 <DMA_CalcBaseAndBitshift+0x13c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d01d      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a33      	ldr	r2, [pc, #204]	@ (8003a0c <DMA_CalcBaseAndBitshift+0x140>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a32      	ldr	r2, [pc, #200]	@ (8003a10 <DMA_CalcBaseAndBitshift+0x144>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a30      	ldr	r2, [pc, #192]	@ (8003a14 <DMA_CalcBaseAndBitshift+0x148>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a18 <DMA_CalcBaseAndBitshift+0x14c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2d      	ldr	r2, [pc, #180]	@ (8003a1c <DMA_CalcBaseAndBitshift+0x150>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xa8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2c      	ldr	r2, [pc, #176]	@ (8003a20 <DMA_CalcBaseAndBitshift+0x154>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <DMA_CalcBaseAndBitshift+0xac>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <DMA_CalcBaseAndBitshift+0xae>
 8003978:	2300      	movs	r3, #0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d024      	beq.n	80039c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	3b10      	subs	r3, #16
 8003986:	4a27      	ldr	r2, [pc, #156]	@ (8003a24 <DMA_CalcBaseAndBitshift+0x158>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	4a24      	ldr	r2, [pc, #144]	@ (8003a28 <DMA_CalcBaseAndBitshift+0x15c>)
 8003998:	5cd3      	ldrb	r3, [r2, r3]
 800399a:	461a      	mov	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d908      	bls.n	80039b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b1f      	ldr	r3, [pc, #124]	@ (8003a2c <DMA_CalcBaseAndBitshift+0x160>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	1d1a      	adds	r2, r3, #4
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80039b6:	e00d      	b.n	80039d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <DMA_CalcBaseAndBitshift+0x160>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039c6:	e005      	b.n	80039d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
 8003a24:	aaaaaaab 	.word	0xaaaaaaab
 8003a28:	0800b0e8 	.word	0x0800b0e8
 8003a2c:	fffffc00 	.word	0xfffffc00

08003a30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d120      	bne.n	8003a86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d858      	bhi.n	8003afe <DMA_CheckFifoParam+0xce>
 8003a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <DMA_CheckFifoParam+0x24>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a77 	.word	0x08003a77
 8003a5c:	08003a65 	.word	0x08003a65
 8003a60:	08003aff 	.word	0x08003aff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d048      	beq.n	8003b02 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a74:	e045      	b.n	8003b02 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a7e:	d142      	bne.n	8003b06 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a84:	e03f      	b.n	8003b06 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8e:	d123      	bne.n	8003ad8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d838      	bhi.n	8003b0a <DMA_CheckFifoParam+0xda>
 8003a98:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa0 <DMA_CheckFifoParam+0x70>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ab1 	.word	0x08003ab1
 8003aa4:	08003ab7 	.word	0x08003ab7
 8003aa8:	08003ab1 	.word	0x08003ab1
 8003aac:	08003ac9 	.word	0x08003ac9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab4:	e030      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d025      	beq.n	8003b0e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ac6:	e022      	b.n	8003b0e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ad0:	d11f      	bne.n	8003b12 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ad6:	e01c      	b.n	8003b12 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d902      	bls.n	8003ae6 <DMA_CheckFifoParam+0xb6>
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d003      	beq.n	8003aec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ae4:	e018      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aea:	e015      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00e      	beq.n	8003b16 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
    break;
 8003afc:	e00b      	b.n	8003b16 <DMA_CheckFifoParam+0xe6>
        break;
 8003afe:	bf00      	nop
 8003b00:	e00a      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        break;
 8003b02:	bf00      	nop
 8003b04:	e008      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        break;
 8003b06:	bf00      	nop
 8003b08:	e006      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        break;
 8003b0a:	bf00      	nop
 8003b0c:	e004      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
        break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <DMA_CheckFifoParam+0xe8>
    break;
 8003b16:	bf00      	nop
    }
  }

  return status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop

08003b28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a38      	ldr	r2, [pc, #224]	@ (8003c1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a36      	ldr	r2, [pc, #216]	@ (8003c20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01d      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a35      	ldr	r2, [pc, #212]	@ (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a33      	ldr	r2, [pc, #204]	@ (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a32      	ldr	r2, [pc, #200]	@ (8003c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a30      	ldr	r2, [pc, #192]	@ (8003c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2f      	ldr	r2, [pc, #188]	@ (8003c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2d      	ldr	r2, [pc, #180]	@ (8003c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01a      	beq.n	8003bc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	3b08      	subs	r3, #8
 8003b98:	4a28      	ldr	r2, [pc, #160]	@ (8003c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4b26      	ldr	r3, [pc, #152]	@ (8003c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a24      	ldr	r2, [pc, #144]	@ (8003c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003bb4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003bc4:	e024      	b.n	8003c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	3b10      	subs	r3, #16
 8003bce:	4a1e      	ldr	r2, [pc, #120]	@ (8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d806      	bhi.n	8003bee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d902      	bls.n	8003bee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3308      	adds	r3, #8
 8003bec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4b18      	ldr	r3, [pc, #96]	@ (8003c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a16      	ldr	r2, [pc, #88]	@ (8003c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003c00:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2201      	movs	r2, #1
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	58025408 	.word	0x58025408
 8003c20:	5802541c 	.word	0x5802541c
 8003c24:	58025430 	.word	0x58025430
 8003c28:	58025444 	.word	0x58025444
 8003c2c:	58025458 	.word	0x58025458
 8003c30:	5802546c 	.word	0x5802546c
 8003c34:	58025480 	.word	0x58025480
 8003c38:	58025494 	.word	0x58025494
 8003c3c:	cccccccd 	.word	0xcccccccd
 8003c40:	16009600 	.word	0x16009600
 8003c44:	58025880 	.word	0x58025880
 8003c48:	aaaaaaab 	.word	0xaaaaaaab
 8003c4c:	400204b8 	.word	0x400204b8
 8003c50:	4002040f 	.word	0x4002040f
 8003c54:	10008200 	.word	0x10008200
 8003c58:	40020880 	.word	0x40020880

08003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d04a      	beq.n	8003d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d847      	bhi.n	8003d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	@ (8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d022      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a24      	ldr	r2, [pc, #144]	@ (8003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d01d      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a22      	ldr	r2, [pc, #136]	@ (8003d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d018      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a21      	ldr	r2, [pc, #132]	@ (8003d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00e      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1e      	ldr	r2, [pc, #120]	@ (8003d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d009      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d101      	bne.n	8003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4b17      	ldr	r3, [pc, #92]	@ (8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a15      	ldr	r2, [pc, #84]	@ (8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ce4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003ce6:	e009      	b.n	8003cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4b14      	ldr	r3, [pc, #80]	@ (8003d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a11      	ldr	r2, [pc, #68]	@ (8003d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003cfa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	2201      	movs	r2, #1
 8003d02:	409a      	lsls	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	58025408 	.word	0x58025408
 8003d18:	5802541c 	.word	0x5802541c
 8003d1c:	58025430 	.word	0x58025430
 8003d20:	58025444 	.word	0x58025444
 8003d24:	58025458 	.word	0x58025458
 8003d28:	5802546c 	.word	0x5802546c
 8003d2c:	58025480 	.word	0x58025480
 8003d30:	58025494 	.word	0x58025494
 8003d34:	1600963f 	.word	0x1600963f
 8003d38:	58025940 	.word	0x58025940
 8003d3c:	1000823f 	.word	0x1000823f
 8003d40:	40020940 	.word	0x40020940

08003d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	@ 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d52:	4b89      	ldr	r3, [pc, #548]	@ (8003f78 <HAL_GPIO_Init+0x234>)
 8003d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d56:	e194      	b.n	8004082 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8186 	beq.w	800407c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d005      	beq.n	8003d88 <HAL_GPIO_Init+0x44>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d130      	bne.n	8003dea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	2203      	movs	r2, #3
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 0201 	and.w	r2, r3, #1
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d017      	beq.n	8003e26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	2203      	movs	r2, #3
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d123      	bne.n	8003e7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	08da      	lsrs	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3208      	adds	r2, #8
 8003e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	08da      	lsrs	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3208      	adds	r2, #8
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	2203      	movs	r2, #3
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0203 	and.w	r2, r3, #3
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80e0 	beq.w	800407c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8003f7c <HAL_GPIO_Init+0x238>)
 8003ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8003f7c <HAL_GPIO_Init+0x238>)
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f7c <HAL_GPIO_Init+0x238>)
 8003ece:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eda:	4a29      	ldr	r2, [pc, #164]	@ (8003f80 <HAL_GPIO_Init+0x23c>)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a20      	ldr	r2, [pc, #128]	@ (8003f84 <HAL_GPIO_Init+0x240>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d052      	beq.n	8003fac <HAL_GPIO_Init+0x268>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1f      	ldr	r2, [pc, #124]	@ (8003f88 <HAL_GPIO_Init+0x244>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d031      	beq.n	8003f72 <HAL_GPIO_Init+0x22e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1e      	ldr	r2, [pc, #120]	@ (8003f8c <HAL_GPIO_Init+0x248>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d02b      	beq.n	8003f6e <HAL_GPIO_Init+0x22a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	@ (8003f90 <HAL_GPIO_Init+0x24c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d025      	beq.n	8003f6a <HAL_GPIO_Init+0x226>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a1c      	ldr	r2, [pc, #112]	@ (8003f94 <HAL_GPIO_Init+0x250>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01f      	beq.n	8003f66 <HAL_GPIO_Init+0x222>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1b      	ldr	r2, [pc, #108]	@ (8003f98 <HAL_GPIO_Init+0x254>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d019      	beq.n	8003f62 <HAL_GPIO_Init+0x21e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1a      	ldr	r2, [pc, #104]	@ (8003f9c <HAL_GPIO_Init+0x258>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_GPIO_Init+0x21a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a19      	ldr	r2, [pc, #100]	@ (8003fa0 <HAL_GPIO_Init+0x25c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00d      	beq.n	8003f5a <HAL_GPIO_Init+0x216>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <HAL_GPIO_Init+0x260>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d007      	beq.n	8003f56 <HAL_GPIO_Init+0x212>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a17      	ldr	r2, [pc, #92]	@ (8003fa8 <HAL_GPIO_Init+0x264>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_GPIO_Init+0x20e>
 8003f4e:	2309      	movs	r3, #9
 8003f50:	e02d      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f52:	230a      	movs	r3, #10
 8003f54:	e02b      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f56:	2308      	movs	r3, #8
 8003f58:	e029      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f5a:	2307      	movs	r3, #7
 8003f5c:	e027      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f5e:	2306      	movs	r3, #6
 8003f60:	e025      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f62:	2305      	movs	r3, #5
 8003f64:	e023      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f66:	2304      	movs	r3, #4
 8003f68:	e021      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e01f      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e01d      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e01b      	b.n	8003fae <HAL_GPIO_Init+0x26a>
 8003f76:	bf00      	nop
 8003f78:	58000080 	.word	0x58000080
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	58000400 	.word	0x58000400
 8003f84:	58020000 	.word	0x58020000
 8003f88:	58020400 	.word	0x58020400
 8003f8c:	58020800 	.word	0x58020800
 8003f90:	58020c00 	.word	0x58020c00
 8003f94:	58021000 	.word	0x58021000
 8003f98:	58021400 	.word	0x58021400
 8003f9c:	58021800 	.word	0x58021800
 8003fa0:	58021c00 	.word	0x58021c00
 8003fa4:	58022000 	.word	0x58022000
 8003fa8:	58022400 	.word	0x58022400
 8003fac:	2300      	movs	r3, #0
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	f002 0203 	and.w	r2, r2, #3
 8003fb4:	0092      	lsls	r2, r2, #2
 8003fb6:	4093      	lsls	r3, r2
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fbe:	4938      	ldr	r1, [pc, #224]	@ (80040a0 <HAL_GPIO_Init+0x35c>)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004020:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	3301      	adds	r3, #1
 8004080:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	f47f ae63 	bne.w	8003d58 <HAL_GPIO_Init+0x14>
  }
}
 8004092:	bf00      	nop
 8004094:	bf00      	nop
 8004096:	3724      	adds	r7, #36	@ 0x24
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	58000400 	.word	0x58000400

080040a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80040a8:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a04      	ldr	r2, [pc, #16]	@ (80040c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b2:	6013      	str	r3, [r2, #0]
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	58024800 	.word	0x58024800

080040c4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80040cc:	4b29      	ldr	r3, [pc, #164]	@ (8004174 <HAL_PWREx_ConfigSupply+0xb0>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d00a      	beq.n	80040ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040d8:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <HAL_PWREx_ConfigSupply+0xb0>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d001      	beq.n	80040ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e040      	b.n	800416c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e03e      	b.n	800416c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80040ee:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <HAL_PWREx_ConfigSupply+0xb0>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80040f6:	491f      	ldr	r1, [pc, #124]	@ (8004174 <HAL_PWREx_ConfigSupply+0xb0>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80040fe:	f7fc feb1 	bl	8000e64 <HAL_GetTick>
 8004102:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004104:	e009      	b.n	800411a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004106:	f7fc fead 	bl	8000e64 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004114:	d901      	bls.n	800411a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e028      	b.n	800416c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800411a:	4b16      	ldr	r3, [pc, #88]	@ (8004174 <HAL_PWREx_ConfigSupply+0xb0>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004126:	d1ee      	bne.n	8004106 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b1e      	cmp	r3, #30
 800412c:	d008      	beq.n	8004140 <HAL_PWREx_ConfigSupply+0x7c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b2e      	cmp	r3, #46	@ 0x2e
 8004132:	d005      	beq.n	8004140 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b1d      	cmp	r3, #29
 8004138:	d002      	beq.n	8004140 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b2d      	cmp	r3, #45	@ 0x2d
 800413e:	d114      	bne.n	800416a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004140:	f7fc fe90 	bl	8000e64 <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004146:	e009      	b.n	800415c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004148:	f7fc fe8c 	bl	8000e64 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004156:	d901      	bls.n	800415c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e007      	b.n	800416c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_PWREx_ConfigSupply+0xb0>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004168:	d1ee      	bne.n	8004148 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	58024800 	.word	0x58024800

08004178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08c      	sub	sp, #48	@ 0x30
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	f000 bc48 	b.w	8004a1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8088 	beq.w	80042aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419a:	4b99      	ldr	r3, [pc, #612]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041a4:	4b96      	ldr	r3, [pc, #600]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ac:	2b10      	cmp	r3, #16
 80041ae:	d007      	beq.n	80041c0 <HAL_RCC_OscConfig+0x48>
 80041b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b2:	2b18      	cmp	r3, #24
 80041b4:	d111      	bne.n	80041da <HAL_RCC_OscConfig+0x62>
 80041b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d10c      	bne.n	80041da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c0:	4b8f      	ldr	r3, [pc, #572]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d06d      	beq.n	80042a8 <HAL_RCC_OscConfig+0x130>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d169      	bne.n	80042a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f000 bc21 	b.w	8004a1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x7a>
 80041e4:	4b86      	ldr	r3, [pc, #536]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a85      	ldr	r2, [pc, #532]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80041ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e02e      	b.n	8004250 <HAL_RCC_OscConfig+0xd8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x9c>
 80041fa:	4b81      	ldr	r3, [pc, #516]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a80      	ldr	r2, [pc, #512]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	4b7e      	ldr	r3, [pc, #504]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7d      	ldr	r2, [pc, #500]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800420c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e01d      	b.n	8004250 <HAL_RCC_OscConfig+0xd8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0xc0>
 800421e:	4b78      	ldr	r3, [pc, #480]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a77      	ldr	r2, [pc, #476]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b75      	ldr	r3, [pc, #468]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a74      	ldr	r2, [pc, #464]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0xd8>
 8004238:	4b71      	ldr	r3, [pc, #452]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a70      	ldr	r2, [pc, #448]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800423e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b6e      	ldr	r3, [pc, #440]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6d      	ldr	r2, [pc, #436]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800424a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800424e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fc fe04 	bl	8000e64 <HAL_GetTick>
 800425c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004260:	f7fc fe00 	bl	8000e64 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	@ 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e3d4      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004272:	4b63      	ldr	r3, [pc, #396]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0xe8>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fc fdf0 	bl	8000e64 <HAL_GetTick>
 8004284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004288:	f7fc fdec 	bl	8000e64 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	@ 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e3c0      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800429a:	4b59      	ldr	r3, [pc, #356]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x110>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80ca 	beq.w	800444c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b8:	4b51      	ldr	r3, [pc, #324]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_RCC_OscConfig+0x166>
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	2b18      	cmp	r3, #24
 80042d2:	d156      	bne.n	8004382 <HAL_RCC_OscConfig+0x20a>
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d151      	bne.n	8004382 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042de:	4b48      	ldr	r3, [pc, #288]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_RCC_OscConfig+0x17e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e392      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042f6:	4b42      	ldr	r3, [pc, #264]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 0219 	bic.w	r2, r3, #25
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	493f      	ldr	r1, [pc, #252]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fc fdac 	bl	8000e64 <HAL_GetTick>
 800430c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004310:	f7fc fda8 	bl	8000e64 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e37c      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004322:	4b37      	ldr	r3, [pc, #220]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432e:	f7fc fda5 	bl	8000e7c <HAL_GetREVID>
 8004332:	4603      	mov	r3, r0
 8004334:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004338:	4293      	cmp	r3, r2
 800433a:	d817      	bhi.n	800436c <HAL_RCC_OscConfig+0x1f4>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	2b40      	cmp	r3, #64	@ 0x40
 8004342:	d108      	bne.n	8004356 <HAL_RCC_OscConfig+0x1de>
 8004344:	4b2e      	ldr	r3, [pc, #184]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800434c:	4a2c      	ldr	r2, [pc, #176]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800434e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004352:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004354:	e07a      	b.n	800444c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004356:	4b2a      	ldr	r3, [pc, #168]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	031b      	lsls	r3, r3, #12
 8004364:	4926      	ldr	r1, [pc, #152]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800436a:	e06f      	b.n	800444c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436c:	4b24      	ldr	r3, [pc, #144]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	4921      	ldr	r1, [pc, #132]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004380:	e064      	b.n	800444c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d047      	beq.n	800441a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800438a:	4b1d      	ldr	r3, [pc, #116]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 0219 	bic.w	r2, r3, #25
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	491a      	ldr	r1, [pc, #104]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fc fd62 	bl	8000e64 <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a4:	f7fc fd5e 	bl	8000e64 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e332      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043b6:	4b12      	ldr	r3, [pc, #72]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c2:	f7fc fd5b 	bl	8000e7c <HAL_GetREVID>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d819      	bhi.n	8004404 <HAL_RCC_OscConfig+0x28c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b40      	cmp	r3, #64	@ 0x40
 80043d6:	d108      	bne.n	80043ea <HAL_RCC_OscConfig+0x272>
 80043d8:	4b09      	ldr	r3, [pc, #36]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80043e0:	4a07      	ldr	r2, [pc, #28]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80043e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043e6:	6053      	str	r3, [r2, #4]
 80043e8:	e030      	b.n	800444c <HAL_RCC_OscConfig+0x2d4>
 80043ea:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	031b      	lsls	r3, r3, #12
 80043f8:	4901      	ldr	r1, [pc, #4]	@ (8004400 <HAL_RCC_OscConfig+0x288>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
 80043fe:	e025      	b.n	800444c <HAL_RCC_OscConfig+0x2d4>
 8004400:	58024400 	.word	0x58024400
 8004404:	4b9a      	ldr	r3, [pc, #616]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	061b      	lsls	r3, r3, #24
 8004412:	4997      	ldr	r1, [pc, #604]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004414:	4313      	orrs	r3, r2
 8004416:	604b      	str	r3, [r1, #4]
 8004418:	e018      	b.n	800444c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800441a:	4b95      	ldr	r3, [pc, #596]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a94      	ldr	r2, [pc, #592]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004426:	f7fc fd1d 	bl	8000e64 <HAL_GetTick>
 800442a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442e:	f7fc fd19 	bl	8000e64 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e2ed      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004440:	4b8b      	ldr	r3, [pc, #556]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80a9 	beq.w	80045ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445a:	4b85      	ldr	r3, [pc, #532]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004462:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004464:	4b82      	ldr	r3, [pc, #520]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d007      	beq.n	8004480 <HAL_RCC_OscConfig+0x308>
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b18      	cmp	r3, #24
 8004474:	d13a      	bne.n	80044ec <HAL_RCC_OscConfig+0x374>
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d135      	bne.n	80044ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004480:	4b7b      	ldr	r3, [pc, #492]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x320>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	2b80      	cmp	r3, #128	@ 0x80
 8004492:	d001      	beq.n	8004498 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e2c1      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004498:	f7fc fcf0 	bl	8000e7c <HAL_GetREVID>
 800449c:	4603      	mov	r3, r0
 800449e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d817      	bhi.n	80044d6 <HAL_RCC_OscConfig+0x35e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d108      	bne.n	80044c0 <HAL_RCC_OscConfig+0x348>
 80044ae:	4b70      	ldr	r3, [pc, #448]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80044b6:	4a6e      	ldr	r2, [pc, #440]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80044b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044be:	e075      	b.n	80045ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	069b      	lsls	r3, r3, #26
 80044ce:	4968      	ldr	r1, [pc, #416]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044d4:	e06a      	b.n	80045ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044d6:	4b66      	ldr	r3, [pc, #408]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	4962      	ldr	r1, [pc, #392]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044ea:	e05f      	b.n	80045ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d042      	beq.n	800457a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80044fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fc fcb0 	bl	8000e64 <HAL_GetTick>
 8004504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004508:	f7fc fcac 	bl	8000e64 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e280      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800451a:	4b55      	ldr	r3, [pc, #340]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004526:	f7fc fca9 	bl	8000e7c <HAL_GetREVID>
 800452a:	4603      	mov	r3, r0
 800452c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004530:	4293      	cmp	r3, r2
 8004532:	d817      	bhi.n	8004564 <HAL_RCC_OscConfig+0x3ec>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	2b20      	cmp	r3, #32
 800453a:	d108      	bne.n	800454e <HAL_RCC_OscConfig+0x3d6>
 800453c:	4b4c      	ldr	r3, [pc, #304]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004544:	4a4a      	ldr	r2, [pc, #296]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004546:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800454a:	6053      	str	r3, [r2, #4]
 800454c:	e02e      	b.n	80045ac <HAL_RCC_OscConfig+0x434>
 800454e:	4b48      	ldr	r3, [pc, #288]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	069b      	lsls	r3, r3, #26
 800455c:	4944      	ldr	r1, [pc, #272]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
 8004562:	e023      	b.n	80045ac <HAL_RCC_OscConfig+0x434>
 8004564:	4b42      	ldr	r3, [pc, #264]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	493f      	ldr	r1, [pc, #252]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004574:	4313      	orrs	r3, r2
 8004576:	60cb      	str	r3, [r1, #12]
 8004578:	e018      	b.n	80045ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800457a:	4b3d      	ldr	r3, [pc, #244]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a3c      	ldr	r2, [pc, #240]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7fc fc6d 	bl	8000e64 <HAL_GetTick>
 800458a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800458e:	f7fc fc69 	bl	8000e64 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e23d      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045a0:	4b33      	ldr	r3, [pc, #204]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d036      	beq.n	8004626 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d019      	beq.n	80045f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80045c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fc fc4a 	bl	8000e64 <HAL_GetTick>
 80045d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d4:	f7fc fc46 	bl	8000e64 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e21a      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045e6:	4b22      	ldr	r3, [pc, #136]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80045e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x45c>
 80045f2:	e018      	b.n	8004626 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 80045fa:	f023 0301 	bic.w	r3, r3, #1
 80045fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004600:	f7fc fc30 	bl	8000e64 <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004608:	f7fc fc2c 	bl	8000e64 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e200      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800461a:	4b15      	ldr	r3, [pc, #84]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 800461c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d039      	beq.n	80046a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01c      	beq.n	8004674 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a0c      	ldr	r2, [pc, #48]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004640:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004644:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004646:	f7fc fc0d 	bl	8000e64 <HAL_GetTick>
 800464a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800464e:	f7fc fc09 	bl	8000e64 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e1dd      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004660:	4b03      	ldr	r3, [pc, #12]	@ (8004670 <HAL_RCC_OscConfig+0x4f8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x4d6>
 800466c:	e01b      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
 800466e:	bf00      	nop
 8004670:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004674:	4b9b      	ldr	r3, [pc, #620]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a9a      	ldr	r2, [pc, #616]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 800467a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800467e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004680:	f7fc fbf0 	bl	8000e64 <HAL_GetTick>
 8004684:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004688:	f7fc fbec 	bl	8000e64 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e1c0      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800469a:	4b92      	ldr	r3, [pc, #584]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8081 	beq.w	80047b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046b4:	4b8c      	ldr	r3, [pc, #560]	@ (80048e8 <HAL_RCC_OscConfig+0x770>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a8b      	ldr	r2, [pc, #556]	@ (80048e8 <HAL_RCC_OscConfig+0x770>)
 80046ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046c0:	f7fc fbd0 	bl	8000e64 <HAL_GetTick>
 80046c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c8:	f7fc fbcc 	bl	8000e64 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	@ 0x64
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e1a0      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046da:	4b83      	ldr	r3, [pc, #524]	@ (80048e8 <HAL_RCC_OscConfig+0x770>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d106      	bne.n	80046fc <HAL_RCC_OscConfig+0x584>
 80046ee:	4b7d      	ldr	r3, [pc, #500]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f2:	4a7c      	ldr	r2, [pc, #496]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046fa:	e02d      	b.n	8004758 <HAL_RCC_OscConfig+0x5e0>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10c      	bne.n	800471e <HAL_RCC_OscConfig+0x5a6>
 8004704:	4b77      	ldr	r3, [pc, #476]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004708:	4a76      	ldr	r2, [pc, #472]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004710:	4b74      	ldr	r3, [pc, #464]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004714:	4a73      	ldr	r2, [pc, #460]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004716:	f023 0304 	bic.w	r3, r3, #4
 800471a:	6713      	str	r3, [r2, #112]	@ 0x70
 800471c:	e01c      	b.n	8004758 <HAL_RCC_OscConfig+0x5e0>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b05      	cmp	r3, #5
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x5c8>
 8004726:	4b6f      	ldr	r3, [pc, #444]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472a:	4a6e      	ldr	r2, [pc, #440]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 800472c:	f043 0304 	orr.w	r3, r3, #4
 8004730:	6713      	str	r3, [r2, #112]	@ 0x70
 8004732:	4b6c      	ldr	r3, [pc, #432]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004736:	4a6b      	ldr	r2, [pc, #428]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	6713      	str	r3, [r2, #112]	@ 0x70
 800473e:	e00b      	b.n	8004758 <HAL_RCC_OscConfig+0x5e0>
 8004740:	4b68      	ldr	r3, [pc, #416]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004744:	4a67      	ldr	r2, [pc, #412]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	6713      	str	r3, [r2, #112]	@ 0x70
 800474c:	4b65      	ldr	r3, [pc, #404]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004750:	4a64      	ldr	r2, [pc, #400]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004752:	f023 0304 	bic.w	r3, r3, #4
 8004756:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d015      	beq.n	800478c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004760:	f7fc fb80 	bl	8000e64 <HAL_GetTick>
 8004764:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004766:	e00a      	b.n	800477e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004768:	f7fc fb7c 	bl	8000e64 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e14e      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800477e:	4b59      	ldr	r3, [pc, #356]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0ee      	beq.n	8004768 <HAL_RCC_OscConfig+0x5f0>
 800478a:	e014      	b.n	80047b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fc fb6a 	bl	8000e64 <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004792:	e00a      	b.n	80047aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fc fb66 	bl	8000e64 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e138      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047aa:	4b4e      	ldr	r3, [pc, #312]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ee      	bne.n	8004794 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 812d 	beq.w	8004a1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047c0:	4b48      	ldr	r3, [pc, #288]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047c8:	2b18      	cmp	r3, #24
 80047ca:	f000 80bd 	beq.w	8004948 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	f040 809e 	bne.w	8004914 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d8:	4b42      	ldr	r3, [pc, #264]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a41      	ldr	r2, [pc, #260]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80047de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fc fb3e 	bl	8000e64 <HAL_GetTick>
 80047e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fc fb3a 	bl	8000e64 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e10e      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047fe:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800480a:	4b36      	ldr	r3, [pc, #216]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 800480c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800480e:	4b37      	ldr	r3, [pc, #220]	@ (80048ec <HAL_RCC_OscConfig+0x774>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800481a:	0112      	lsls	r2, r2, #4
 800481c:	430a      	orrs	r2, r1
 800481e:	4931      	ldr	r1, [pc, #196]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	628b      	str	r3, [r1, #40]	@ 0x28
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	3b01      	subs	r3, #1
 800482a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004832:	3b01      	subs	r3, #1
 8004834:	025b      	lsls	r3, r3, #9
 8004836:	b29b      	uxth	r3, r3
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	3b01      	subs	r3, #1
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484c:	3b01      	subs	r3, #1
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004854:	4923      	ldr	r1, [pc, #140]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800485a:	4b22      	ldr	r3, [pc, #136]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	4a21      	ldr	r2, [pc, #132]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004866:	4b1f      	ldr	r3, [pc, #124]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486a:	4b21      	ldr	r3, [pc, #132]	@ (80048f0 <HAL_RCC_OscConfig+0x778>)
 800486c:	4013      	ands	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004872:	00d2      	lsls	r2, r2, #3
 8004874:	491b      	ldr	r1, [pc, #108]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800487a:	4b1a      	ldr	r3, [pc, #104]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 800487c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487e:	f023 020c 	bic.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	4917      	ldr	r1, [pc, #92]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 8004888:	4313      	orrs	r3, r2
 800488a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800488c:	4b15      	ldr	r3, [pc, #84]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	f023 0202 	bic.w	r2, r3, #2
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004898:	4912      	ldr	r1, [pc, #72]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 800489a:	4313      	orrs	r3, r2
 800489c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800489e:	4b11      	ldr	r3, [pc, #68]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	4a10      	ldr	r2, [pc, #64]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048aa:	4b0e      	ldr	r3, [pc, #56]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80048ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ae:	4a0d      	ldr	r2, [pc, #52]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80048b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048b6:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	4a0a      	ldr	r2, [pc, #40]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80048bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80048c2:	4b08      	ldr	r3, [pc, #32]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	4a07      	ldr	r2, [pc, #28]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ce:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a04      	ldr	r2, [pc, #16]	@ (80048e4 <HAL_RCC_OscConfig+0x76c>)
 80048d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048da:	f7fc fac3 	bl	8000e64 <HAL_GetTick>
 80048de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048e0:	e011      	b.n	8004906 <HAL_RCC_OscConfig+0x78e>
 80048e2:	bf00      	nop
 80048e4:	58024400 	.word	0x58024400
 80048e8:	58024800 	.word	0x58024800
 80048ec:	fffffc0c 	.word	0xfffffc0c
 80048f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f4:	f7fc fab6 	bl	8000e64 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e08a      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004906:	4b47      	ldr	r3, [pc, #284]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x77c>
 8004912:	e082      	b.n	8004a1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004914:	4b43      	ldr	r3, [pc, #268]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a42      	ldr	r2, [pc, #264]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 800491a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800491e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7fc faa0 	bl	8000e64 <HAL_GetTick>
 8004924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004928:	f7fc fa9c 	bl	8000e64 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e070      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800493a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0x7b0>
 8004946:	e068      	b.n	8004a1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004948:	4b36      	ldr	r3, [pc, #216]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800494e:	4b35      	ldr	r3, [pc, #212]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004952:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004958:	2b01      	cmp	r3, #1
 800495a:	d031      	beq.n	80049c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f003 0203 	and.w	r2, r3, #3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004966:	429a      	cmp	r2, r3
 8004968:	d12a      	bne.n	80049c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d122      	bne.n	80049c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d11a      	bne.n	80049c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	0a5b      	lsrs	r3, r3, #9
 800498e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004996:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d111      	bne.n	80049c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	0c1b      	lsrs	r3, r3, #16
 80049a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d108      	bne.n	80049c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	0e1b      	lsrs	r3, r3, #24
 80049b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e02b      	b.n	8004a1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80049c4:	4b17      	ldr	r3, [pc, #92]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 80049c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c8:	08db      	lsrs	r3, r3, #3
 80049ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d01f      	beq.n	8004a1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80049da:	4b12      	ldr	r3, [pc, #72]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	4a11      	ldr	r2, [pc, #68]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049e6:	f7fc fa3d 	bl	8000e64 <HAL_GetTick>
 80049ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80049ec:	bf00      	nop
 80049ee:	f7fc fa39 	bl	8000e64 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d0f9      	beq.n	80049ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 80049fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004a28 <HAL_RCC_OscConfig+0x8b0>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a06:	00d2      	lsls	r2, r2, #3
 8004a08:	4906      	ldr	r1, [pc, #24]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004a0e:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a12:	4a04      	ldr	r2, [pc, #16]	@ (8004a24 <HAL_RCC_OscConfig+0x8ac>)
 8004a14:	f043 0301 	orr.w	r3, r3, #1
 8004a18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3730      	adds	r7, #48	@ 0x30
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	58024400 	.word	0x58024400
 8004a28:	ffff0007 	.word	0xffff0007

08004a2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e19c      	b.n	8004d7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a40:	4b8a      	ldr	r3, [pc, #552]	@ (8004c6c <HAL_RCC_ClockConfig+0x240>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d910      	bls.n	8004a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b87      	ldr	r3, [pc, #540]	@ (8004c6c <HAL_RCC_ClockConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 020f 	bic.w	r2, r3, #15
 8004a56:	4985      	ldr	r1, [pc, #532]	@ (8004c6c <HAL_RCC_ClockConfig+0x240>)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b83      	ldr	r3, [pc, #524]	@ (8004c6c <HAL_RCC_ClockConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e184      	b.n	8004d7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d010      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	4b7b      	ldr	r3, [pc, #492]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d908      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a8c:	4b78      	ldr	r3, [pc, #480]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	4975      	ldr	r1, [pc, #468]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d010      	beq.n	8004acc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695a      	ldr	r2, [r3, #20]
 8004aae:	4b70      	ldr	r3, [pc, #448]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d908      	bls.n	8004acc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004aba:	4b6d      	ldr	r3, [pc, #436]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	496a      	ldr	r1, [pc, #424]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d010      	beq.n	8004afa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699a      	ldr	r2, [r3, #24]
 8004adc:	4b64      	ldr	r3, [pc, #400]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d908      	bls.n	8004afa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ae8:	4b61      	ldr	r3, [pc, #388]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	495e      	ldr	r1, [pc, #376]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d010      	beq.n	8004b28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	4b59      	ldr	r3, [pc, #356]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d908      	bls.n	8004b28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b16:	4b56      	ldr	r3, [pc, #344]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	4953      	ldr	r1, [pc, #332]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d010      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	4b4d      	ldr	r3, [pc, #308]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d908      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b44:	4b4a      	ldr	r3, [pc, #296]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f023 020f 	bic.w	r2, r3, #15
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4947      	ldr	r1, [pc, #284]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d055      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b62:	4b43      	ldr	r3, [pc, #268]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	4940      	ldr	r1, [pc, #256]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d107      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d121      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0f6      	b.n	8004d7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d107      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b94:	4b36      	ldr	r3, [pc, #216]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d115      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0ea      	b.n	8004d7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d107      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bac:	4b30      	ldr	r3, [pc, #192]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0de      	b.n	8004d7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0d6      	b.n	8004d7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bcc:	4b28      	ldr	r3, [pc, #160]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f023 0207 	bic.w	r2, r3, #7
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4925      	ldr	r1, [pc, #148]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bde:	f7fc f941 	bl	8000e64 <HAL_GetTick>
 8004be2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be4:	e00a      	b.n	8004bfc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be6:	f7fc f93d 	bl	8000e64 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e0be      	b.n	8004d7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d1eb      	bne.n	8004be6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d010      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	4b14      	ldr	r3, [pc, #80]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d208      	bcs.n	8004c3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2a:	4b11      	ldr	r3, [pc, #68]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f023 020f 	bic.w	r2, r3, #15
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	490e      	ldr	r1, [pc, #56]	@ (8004c70 <HAL_RCC_ClockConfig+0x244>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <HAL_RCC_ClockConfig+0x240>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d214      	bcs.n	8004c74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b08      	ldr	r3, [pc, #32]	@ (8004c6c <HAL_RCC_ClockConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 020f 	bic.w	r2, r3, #15
 8004c52:	4906      	ldr	r1, [pc, #24]	@ (8004c6c <HAL_RCC_ClockConfig+0x240>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <HAL_RCC_ClockConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e086      	b.n	8004d7a <HAL_RCC_ClockConfig+0x34e>
 8004c6c:	52002000 	.word	0x52002000
 8004c70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d010      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	4b3f      	ldr	r3, [pc, #252]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d208      	bcs.n	8004ca2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c90:	4b3c      	ldr	r3, [pc, #240]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	4939      	ldr	r1, [pc, #228]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d010      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695a      	ldr	r2, [r3, #20]
 8004cb2:	4b34      	ldr	r3, [pc, #208]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d208      	bcs.n	8004cd0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cbe:	4b31      	ldr	r3, [pc, #196]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	492e      	ldr	r1, [pc, #184]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d010      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	4b28      	ldr	r3, [pc, #160]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d208      	bcs.n	8004cfe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cec:	4b25      	ldr	r3, [pc, #148]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	4922      	ldr	r1, [pc, #136]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d010      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69da      	ldr	r2, [r3, #28]
 8004d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d208      	bcs.n	8004d2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	4917      	ldr	r1, [pc, #92]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d2c:	f000 f834 	bl	8004d98 <HAL_RCC_GetSysClockFreq>
 8004d30:	4602      	mov	r2, r0
 8004d32:	4b14      	ldr	r3, [pc, #80]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	4912      	ldr	r1, [pc, #72]	@ (8004d88 <HAL_RCC_ClockConfig+0x35c>)
 8004d3e:	5ccb      	ldrb	r3, [r1, r3]
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
 8004d48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d84 <HAL_RCC_ClockConfig+0x358>)
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	4a0d      	ldr	r2, [pc, #52]	@ (8004d88 <HAL_RCC_ClockConfig+0x35c>)
 8004d54:	5cd3      	ldrb	r3, [r2, r3]
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	4a0a      	ldr	r2, [pc, #40]	@ (8004d8c <HAL_RCC_ClockConfig+0x360>)
 8004d62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d64:	4a0a      	ldr	r2, [pc, #40]	@ (8004d90 <HAL_RCC_ClockConfig+0x364>)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <HAL_RCC_ClockConfig+0x368>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fc f82e 	bl	8000dd0 <HAL_InitTick>
 8004d74:	4603      	mov	r3, r0
 8004d76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	58024400 	.word	0x58024400
 8004d88:	0800b0d8 	.word	0x0800b0d8
 8004d8c:	24000004 	.word	0x24000004
 8004d90:	24000000 	.word	0x24000000
 8004d94:	24000008 	.word	0x24000008

08004d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b089      	sub	sp, #36	@ 0x24
 8004d9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d9e:	4bb3      	ldr	r3, [pc, #716]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004da6:	2b18      	cmp	r3, #24
 8004da8:	f200 8155 	bhi.w	8005056 <HAL_RCC_GetSysClockFreq+0x2be>
 8004dac:	a201      	add	r2, pc, #4	@ (adr r2, 8004db4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004e19 	.word	0x08004e19
 8004db8:	08005057 	.word	0x08005057
 8004dbc:	08005057 	.word	0x08005057
 8004dc0:	08005057 	.word	0x08005057
 8004dc4:	08005057 	.word	0x08005057
 8004dc8:	08005057 	.word	0x08005057
 8004dcc:	08005057 	.word	0x08005057
 8004dd0:	08005057 	.word	0x08005057
 8004dd4:	08004e3f 	.word	0x08004e3f
 8004dd8:	08005057 	.word	0x08005057
 8004ddc:	08005057 	.word	0x08005057
 8004de0:	08005057 	.word	0x08005057
 8004de4:	08005057 	.word	0x08005057
 8004de8:	08005057 	.word	0x08005057
 8004dec:	08005057 	.word	0x08005057
 8004df0:	08005057 	.word	0x08005057
 8004df4:	08004e45 	.word	0x08004e45
 8004df8:	08005057 	.word	0x08005057
 8004dfc:	08005057 	.word	0x08005057
 8004e00:	08005057 	.word	0x08005057
 8004e04:	08005057 	.word	0x08005057
 8004e08:	08005057 	.word	0x08005057
 8004e0c:	08005057 	.word	0x08005057
 8004e10:	08005057 	.word	0x08005057
 8004e14:	08004e4b 	.word	0x08004e4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e18:	4b94      	ldr	r3, [pc, #592]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e24:	4b91      	ldr	r3, [pc, #580]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	08db      	lsrs	r3, r3, #3
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	4a90      	ldr	r2, [pc, #576]	@ (8005070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004e36:	e111      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e38:	4b8d      	ldr	r3, [pc, #564]	@ (8005070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e3a:	61bb      	str	r3, [r7, #24]
      break;
 8004e3c:	e10e      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004e3e:	4b8d      	ldr	r3, [pc, #564]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e40:	61bb      	str	r3, [r7, #24]
      break;
 8004e42:	e10b      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004e44:	4b8c      	ldr	r3, [pc, #560]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e46:	61bb      	str	r3, [r7, #24]
      break;
 8004e48:	e108      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e4a:	4b88      	ldr	r3, [pc, #544]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e54:	4b85      	ldr	r3, [pc, #532]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	091b      	lsrs	r3, r3, #4
 8004e5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e60:	4b82      	ldr	r3, [pc, #520]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e6a:	4b80      	ldr	r3, [pc, #512]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6e:	08db      	lsrs	r3, r3, #3
 8004e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80e1 	beq.w	8005050 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	f000 8083 	beq.w	8004f9c <HAL_RCC_GetSysClockFreq+0x204>
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	f200 80a1 	bhi.w	8004fe0 <HAL_RCC_GetSysClockFreq+0x248>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x114>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d056      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004eaa:	e099      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eac:	4b6f      	ldr	r3, [pc, #444]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02d      	beq.n	8004f14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	4a6b      	ldr	r2, [pc, #428]	@ (8005070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee2:	4b62      	ldr	r3, [pc, #392]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800507c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f12:	e087      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005080 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f26:	4b51      	ldr	r3, [pc, #324]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800507c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f56:	e065      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005084 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6a:	4b40      	ldr	r3, [pc, #256]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800507c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f9a:	e043      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005088 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fae:	4b2f      	ldr	r3, [pc, #188]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800507c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fde:	e021      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005084 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005002:	ed97 6a02 	vldr	s12, [r7, #8]
 8005006:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800507c <HAL_RCC_GetSysClockFreq+0x2e4>
 800500a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005022:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005024:	4b11      	ldr	r3, [pc, #68]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	0a5b      	lsrs	r3, r3, #9
 800502a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800502e:	3301      	adds	r3, #1
 8005030:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	ee07 3a90 	vmov	s15, r3
 8005038:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800503c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005048:	ee17 3a90 	vmov	r3, s15
 800504c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800504e:	e005      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
      break;
 8005054:	e002      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005056:	4b07      	ldr	r3, [pc, #28]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005058:	61bb      	str	r3, [r7, #24]
      break;
 800505a:	bf00      	nop
  }

  return sysclockfreq;
 800505c:	69bb      	ldr	r3, [r7, #24]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3724      	adds	r7, #36	@ 0x24
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	58024400 	.word	0x58024400
 8005070:	03d09000 	.word	0x03d09000
 8005074:	003d0900 	.word	0x003d0900
 8005078:	017d7840 	.word	0x017d7840
 800507c:	46000000 	.word	0x46000000
 8005080:	4c742400 	.word	0x4c742400
 8005084:	4a742400 	.word	0x4a742400
 8005088:	4bbebc20 	.word	0x4bbebc20

0800508c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005092:	f7ff fe81 	bl	8004d98 <HAL_RCC_GetSysClockFreq>
 8005096:	4602      	mov	r2, r0
 8005098:	4b10      	ldr	r3, [pc, #64]	@ (80050dc <HAL_RCC_GetHCLKFreq+0x50>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	0a1b      	lsrs	r3, r3, #8
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	490f      	ldr	r1, [pc, #60]	@ (80050e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80050a4:	5ccb      	ldrb	r3, [r1, r3]
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	fa22 f303 	lsr.w	r3, r2, r3
 80050ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050b0:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <HAL_RCC_GetHCLKFreq+0x50>)
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	4a09      	ldr	r2, [pc, #36]	@ (80050e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80050ba:	5cd3      	ldrb	r3, [r2, r3]
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	4a07      	ldr	r2, [pc, #28]	@ (80050e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80050c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050ca:	4a07      	ldr	r2, [pc, #28]	@ (80050e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80050d0:	4b04      	ldr	r3, [pc, #16]	@ (80050e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	58024400 	.word	0x58024400
 80050e0:	0800b0d8 	.word	0x0800b0d8
 80050e4:	24000004 	.word	0x24000004
 80050e8:	24000000 	.word	0x24000000

080050ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80050f0:	f7ff ffcc 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050f4:	4602      	mov	r2, r0
 80050f6:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	4904      	ldr	r1, [pc, #16]	@ (8005114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005102:	5ccb      	ldrb	r3, [r1, r3]
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800510c:	4618      	mov	r0, r3
 800510e:	bd80      	pop	{r7, pc}
 8005110:	58024400 	.word	0x58024400
 8005114:	0800b0d8 	.word	0x0800b0d8

08005118 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800511c:	b0cc      	sub	sp, #304	@ 0x130
 800511e:	af00      	add	r7, sp, #0
 8005120:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005124:	2300      	movs	r3, #0
 8005126:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800512a:	2300      	movs	r3, #0
 800512c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800513c:	2500      	movs	r5, #0
 800513e:	ea54 0305 	orrs.w	r3, r4, r5
 8005142:	d049      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005144:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800514a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800514e:	d02f      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005150:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005154:	d828      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005156:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800515a:	d01a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800515c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005160:	d822      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516a:	d007      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800516c:	e01c      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516e:	4bb8      	ldr	r3, [pc, #736]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	4ab7      	ldr	r2, [pc, #732]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005178:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800517a:	e01a      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800517c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005180:	3308      	adds	r3, #8
 8005182:	2102      	movs	r1, #2
 8005184:	4618      	mov	r0, r3
 8005186:	f002 fba1 	bl	80078cc <RCCEx_PLL2_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005190:	e00f      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005192:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005196:	3328      	adds	r3, #40	@ 0x28
 8005198:	2102      	movs	r1, #2
 800519a:	4618      	mov	r0, r3
 800519c:	f002 fc48 	bl	8007a30 <RCCEx_PLL3_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051a6:	e004      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80051ae:	e000      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80051b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051ba:	4ba5      	ldr	r3, [pc, #660]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80051c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c8:	4aa1      	ldr	r2, [pc, #644]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80051ce:	e003      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80051e4:	f04f 0900 	mov.w	r9, #0
 80051e8:	ea58 0309 	orrs.w	r3, r8, r9
 80051ec:	d047      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80051ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d82a      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80051f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005200 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80051fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fe:	bf00      	nop
 8005200:	08005215 	.word	0x08005215
 8005204:	08005223 	.word	0x08005223
 8005208:	08005239 	.word	0x08005239
 800520c:	08005257 	.word	0x08005257
 8005210:	08005257 	.word	0x08005257
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005214:	4b8e      	ldr	r3, [pc, #568]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	4a8d      	ldr	r2, [pc, #564]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800521a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800521e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005220:	e01a      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005226:	3308      	adds	r3, #8
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f002 fb4e 	bl	80078cc <RCCEx_PLL2_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005236:	e00f      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800523c:	3328      	adds	r3, #40	@ 0x28
 800523e:	2100      	movs	r1, #0
 8005240:	4618      	mov	r0, r3
 8005242:	f002 fbf5 	bl	8007a30 <RCCEx_PLL3_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800524c:	e004      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005254:	e000      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005258:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005260:	4b7b      	ldr	r3, [pc, #492]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005264:	f023 0107 	bic.w	r1, r3, #7
 8005268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800526c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526e:	4a78      	ldr	r2, [pc, #480]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005270:	430b      	orrs	r3, r1
 8005272:	6513      	str	r3, [r2, #80]	@ 0x50
 8005274:	e003      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005276:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800527a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800527e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800528a:	f04f 0b00 	mov.w	fp, #0
 800528e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005292:	d04c      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800529a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800529e:	d030      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80052a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052a4:	d829      	bhi.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80052a8:	d02d      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80052aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80052ac:	d825      	bhi.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052ae:	2b80      	cmp	r3, #128	@ 0x80
 80052b0:	d018      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80052b2:	2b80      	cmp	r3, #128	@ 0x80
 80052b4:	d821      	bhi.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80052ba:	2b40      	cmp	r3, #64	@ 0x40
 80052bc:	d007      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80052be:	e01c      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c0:	4b63      	ldr	r3, [pc, #396]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	4a62      	ldr	r2, [pc, #392]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80052cc:	e01c      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052d2:	3308      	adds	r3, #8
 80052d4:	2100      	movs	r1, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f002 faf8 	bl	80078cc <RCCEx_PLL2_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80052e2:	e011      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052e8:	3328      	adds	r3, #40	@ 0x28
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f002 fb9f 	bl	8007a30 <RCCEx_PLL3_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80052f8:	e006      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005300:	e002      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005302:	bf00      	nop
 8005304:	e000      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005308:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005310:	4b4f      	ldr	r3, [pc, #316]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005314:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531e:	4a4c      	ldr	r2, [pc, #304]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005320:	430b      	orrs	r3, r1
 8005322:	6513      	str	r3, [r2, #80]	@ 0x50
 8005324:	e003      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005326:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800532a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800532e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800533a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800533e:	2300      	movs	r3, #0
 8005340:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005344:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005348:	460b      	mov	r3, r1
 800534a:	4313      	orrs	r3, r2
 800534c:	d053      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800534e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005352:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005356:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800535a:	d035      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800535c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005360:	d82e      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005362:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005366:	d031      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005368:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800536c:	d828      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800536e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005372:	d01a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005378:	d822      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800537e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005382:	d007      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005384:	e01c      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005386:	4b32      	ldr	r3, [pc, #200]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	4a31      	ldr	r2, [pc, #196]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800538c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005392:	e01c      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005398:	3308      	adds	r3, #8
 800539a:	2100      	movs	r1, #0
 800539c:	4618      	mov	r0, r3
 800539e:	f002 fa95 	bl	80078cc <RCCEx_PLL2_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053a8:	e011      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053ae:	3328      	adds	r3, #40	@ 0x28
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f002 fb3c 	bl	8007a30 <RCCEx_PLL3_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053be:	e006      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80053c6:	e002      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80053c8:	bf00      	nop
 80053ca:	e000      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80053cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80053d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053da:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80053de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80053e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ec:	e003      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80053f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005402:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005406:	2300      	movs	r3, #0
 8005408:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800540c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005410:	460b      	mov	r3, r1
 8005412:	4313      	orrs	r3, r2
 8005414:	d056      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800541a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800541e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005422:	d038      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005428:	d831      	bhi.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800542a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800542e:	d034      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005430:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005434:	d82b      	bhi.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005436:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800543a:	d01d      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800543c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005440:	d825      	bhi.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d006      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005446:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800544c:	e01f      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800544e:	bf00      	nop
 8005450:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005454:	4ba2      	ldr	r3, [pc, #648]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005458:	4aa1      	ldr	r2, [pc, #644]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800545a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005460:	e01c      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005466:	3308      	adds	r3, #8
 8005468:	2100      	movs	r1, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f002 fa2e 	bl	80078cc <RCCEx_PLL2_Config>
 8005470:	4603      	mov	r3, r0
 8005472:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005476:	e011      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005478:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800547c:	3328      	adds	r3, #40	@ 0x28
 800547e:	2100      	movs	r1, #0
 8005480:	4618      	mov	r0, r3
 8005482:	f002 fad5 	bl	8007a30 <RCCEx_PLL3_Config>
 8005486:	4603      	mov	r3, r0
 8005488:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800548c:	e006      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005494:	e002      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005496:	bf00      	nop
 8005498:	e000      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800549a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800549c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054a4:	4b8e      	ldr	r3, [pc, #568]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80054ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054b4:	4a8a      	ldr	r2, [pc, #552]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ba:	e003      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80054c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80054d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80054da:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d03a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80054e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ea:	2b30      	cmp	r3, #48	@ 0x30
 80054ec:	d01f      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80054ee:	2b30      	cmp	r3, #48	@ 0x30
 80054f0:	d819      	bhi.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d00c      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d815      	bhi.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d019      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d111      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005502:	4b77      	ldr	r3, [pc, #476]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005506:	4a76      	ldr	r2, [pc, #472]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800550c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800550e:	e011      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005514:	3308      	adds	r3, #8
 8005516:	2102      	movs	r1, #2
 8005518:	4618      	mov	r0, r3
 800551a:	f002 f9d7 	bl	80078cc <RCCEx_PLL2_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005524:	e006      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800552c:	e002      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005534:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800553c:	4b68      	ldr	r3, [pc, #416]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800553e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005540:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005544:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554a:	4a65      	ldr	r2, [pc, #404]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800554c:	430b      	orrs	r3, r1
 800554e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005550:	e003      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005552:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005556:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800555a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005566:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800556a:	2300      	movs	r3, #0
 800556c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005570:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005574:	460b      	mov	r3, r1
 8005576:	4313      	orrs	r3, r2
 8005578:	d051      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800557a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800557e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005580:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005584:	d035      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005586:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800558a:	d82e      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800558c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005590:	d031      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005592:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005596:	d828      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800559c:	d01a      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800559e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055a2:	d822      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80055a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ac:	d007      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80055ae:	e01c      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b0:	4b4b      	ldr	r3, [pc, #300]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	4a4a      	ldr	r2, [pc, #296]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055bc:	e01c      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055c2:	3308      	adds	r3, #8
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f002 f980 	bl	80078cc <RCCEx_PLL2_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055d2:	e011      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055d8:	3328      	adds	r3, #40	@ 0x28
 80055da:	2100      	movs	r1, #0
 80055dc:	4618      	mov	r0, r3
 80055de:	f002 fa27 	bl	8007a30 <RCCEx_PLL3_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055e8:	e006      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055f0:	e002      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80055f2:	bf00      	nop
 80055f4:	e000      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80055f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005600:	4b37      	ldr	r3, [pc, #220]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005604:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800560c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800560e:	4a34      	ldr	r2, [pc, #208]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005610:	430b      	orrs	r3, r1
 8005612:	6513      	str	r3, [r2, #80]	@ 0x50
 8005614:	e003      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005616:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800561a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800561e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800562a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800562e:	2300      	movs	r3, #0
 8005630:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005634:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005638:	460b      	mov	r3, r1
 800563a:	4313      	orrs	r3, r2
 800563c:	d056      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800563e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005648:	d033      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800564a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800564e:	d82c      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005650:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005654:	d02f      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005656:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800565a:	d826      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800565c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005660:	d02b      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005662:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005666:	d820      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800566c:	d012      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800566e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005672:	d81a      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d022      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800567c:	d115      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800567e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005682:	3308      	adds	r3, #8
 8005684:	2101      	movs	r1, #1
 8005686:	4618      	mov	r0, r3
 8005688:	f002 f920 	bl	80078cc <RCCEx_PLL2_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005692:	e015      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005698:	3328      	adds	r3, #40	@ 0x28
 800569a:	2101      	movs	r1, #1
 800569c:	4618      	mov	r0, r3
 800569e:	f002 f9c7 	bl	8007a30 <RCCEx_PLL3_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056a8:	e00a      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80056b0:	e006      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056b2:	bf00      	nop
 80056b4:	e004      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056b6:	bf00      	nop
 80056b8:	e002      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056ba:	bf00      	nop
 80056bc:	e000      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10d      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80056c8:	4b05      	ldr	r3, [pc, #20]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80056d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056d6:	4a02      	ldr	r2, [pc, #8]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056d8:	430b      	orrs	r3, r1
 80056da:	6513      	str	r3, [r2, #80]	@ 0x50
 80056dc:	e006      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80056de:	bf00      	nop
 80056e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80056ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80056f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005702:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005706:	460b      	mov	r3, r1
 8005708:	4313      	orrs	r3, r2
 800570a:	d055      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800570c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005714:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005718:	d033      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800571a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800571e:	d82c      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005724:	d02f      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572a:	d826      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800572c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005730:	d02b      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005732:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005736:	d820      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800573c:	d012      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800573e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005742:	d81a      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d022      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800574c:	d115      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800574e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005752:	3308      	adds	r3, #8
 8005754:	2101      	movs	r1, #1
 8005756:	4618      	mov	r0, r3
 8005758:	f002 f8b8 	bl	80078cc <RCCEx_PLL2_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005762:	e015      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005764:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005768:	3328      	adds	r3, #40	@ 0x28
 800576a:	2101      	movs	r1, #1
 800576c:	4618      	mov	r0, r3
 800576e:	f002 f95f 	bl	8007a30 <RCCEx_PLL3_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005778:	e00a      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005780:	e006      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005782:	bf00      	nop
 8005784:	e004      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005786:	bf00      	nop
 8005788:	e002      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800578a:	bf00      	nop
 800578c:	e000      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800578e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005790:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005798:	4bb6      	ldr	r3, [pc, #728]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800579a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800579c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80057a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057a8:	4ab2      	ldr	r2, [pc, #712]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057aa:	430b      	orrs	r3, r1
 80057ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ae:	e003      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057b4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80057b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80057c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057c8:	2300      	movs	r3, #0
 80057ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4313      	orrs	r3, r2
 80057d6:	d02a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80057d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d011      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80057e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057e6:	d10a      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057ec:	3308      	adds	r3, #8
 80057ee:	2101      	movs	r1, #1
 80057f0:	4618      	mov	r0, r3
 80057f2:	f002 f86b 	bl	80078cc <RCCEx_PLL2_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80057fc:	e004      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005804:	e000      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005808:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005810:	4b98      	ldr	r3, [pc, #608]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005814:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800581c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581e:	4a95      	ldr	r2, [pc, #596]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005820:	430b      	orrs	r3, r1
 8005822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005824:	e003      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005826:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800582a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800582e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800583a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800583e:	2300      	movs	r3, #0
 8005840:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005844:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005848:	460b      	mov	r3, r1
 800584a:	4313      	orrs	r3, r2
 800584c:	d037      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800584e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005858:	d00e      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800585a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800585e:	d816      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d018      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005868:	d111      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586a:	4b82      	ldr	r3, [pc, #520]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586e:	4a81      	ldr	r2, [pc, #516]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005876:	e00f      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800587c:	3308      	adds	r3, #8
 800587e:	2101      	movs	r1, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f002 f823 	bl	80078cc <RCCEx_PLL2_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800588c:	e004      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005894:	e000      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005898:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058a0:	4b74      	ldr	r3, [pc, #464]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80058a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ae:	4a71      	ldr	r2, [pc, #452]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058b0:	430b      	orrs	r3, r1
 80058b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80058b4:	e003      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80058be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80058ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058ce:	2300      	movs	r3, #0
 80058d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80058d4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d03a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80058de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d81d      	bhi.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80058e8:	a201      	add	r2, pc, #4	@ (adr r2, 80058f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	0800592d 	.word	0x0800592d
 80058f4:	08005901 	.word	0x08005901
 80058f8:	0800590f 	.word	0x0800590f
 80058fc:	0800592d 	.word	0x0800592d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005900:	4b5c      	ldr	r3, [pc, #368]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	4a5b      	ldr	r2, [pc, #364]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800590a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800590c:	e00f      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800590e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005912:	3308      	adds	r3, #8
 8005914:	2102      	movs	r1, #2
 8005916:	4618      	mov	r0, r3
 8005918:	f001 ffd8 	bl	80078cc <RCCEx_PLL2_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005922:	e004      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800592a:	e000      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800592c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800592e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005936:	4b4f      	ldr	r3, [pc, #316]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800593a:	f023 0103 	bic.w	r1, r3, #3
 800593e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005944:	4a4b      	ldr	r2, [pc, #300]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005946:	430b      	orrs	r3, r1
 8005948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800594a:	e003      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005950:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005954:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005960:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005964:	2300      	movs	r3, #0
 8005966:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800596a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800596e:	460b      	mov	r3, r1
 8005970:	4313      	orrs	r3, r2
 8005972:	f000 80a0 	beq.w	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005976:	4b40      	ldr	r3, [pc, #256]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a3f      	ldr	r2, [pc, #252]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800597c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005982:	f7fb fa6f 	bl	8000e64 <HAL_GetTick>
 8005986:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800598a:	e00b      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598c:	f7fb fa6a 	bl	8000e64 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b64      	cmp	r3, #100	@ 0x64
 800599a:	d903      	bls.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059a2:	e005      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059a4:	4b34      	ldr	r3, [pc, #208]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0ed      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80059b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d17a      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059c4:	4053      	eors	r3, r2
 80059c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d015      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059ce:	4b29      	ldr	r3, [pc, #164]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059da:	4b26      	ldr	r3, [pc, #152]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059de:	4a25      	ldr	r2, [pc, #148]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059e6:	4b23      	ldr	r3, [pc, #140]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ea:	4a22      	ldr	r2, [pc, #136]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059f2:	4a20      	ldr	r2, [pc, #128]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80059f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a06:	d118      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fb fa2c 	bl	8000e64 <HAL_GetTick>
 8005a0c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a10:	e00d      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a12:	f7fb fa27 	bl	8000e64 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a1c:	1ad2      	subs	r2, r2, r3
 8005a1e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d903      	bls.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005a2c:	e005      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a2e:	4b11      	ldr	r3, [pc, #68]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0eb      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d130      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a52:	d115      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005a54:	4b07      	ldr	r3, [pc, #28]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a64:	091a      	lsrs	r2, r3, #4
 8005a66:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	4a02      	ldr	r2, [pc, #8]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6113      	str	r3, [r2, #16]
 8005a70:	e00c      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005a72:	bf00      	nop
 8005a74:	58024400 	.word	0x58024400
 8005a78:	58024800 	.word	0x58024800
 8005a7c:	00ffffcf 	.word	0x00ffffcf
 8005a80:	4bd4      	ldr	r3, [pc, #848]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	4ad3      	ldr	r2, [pc, #844]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a86:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a8a:	6113      	str	r3, [r2, #16]
 8005a8c:	4bd1      	ldr	r3, [pc, #836]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a8e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9c:	4acd      	ldr	r2, [pc, #820]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005aa4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005aa8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8005aac:	e003      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ab2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f002 0301 	and.w	r3, r2, #1
 8005ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f000 808b 	beq.w	8005bee <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae0:	2b28      	cmp	r3, #40	@ 0x28
 8005ae2:	d86b      	bhi.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005bc5 	.word	0x08005bc5
 8005af0:	08005bbd 	.word	0x08005bbd
 8005af4:	08005bbd 	.word	0x08005bbd
 8005af8:	08005bbd 	.word	0x08005bbd
 8005afc:	08005bbd 	.word	0x08005bbd
 8005b00:	08005bbd 	.word	0x08005bbd
 8005b04:	08005bbd 	.word	0x08005bbd
 8005b08:	08005bbd 	.word	0x08005bbd
 8005b0c:	08005b91 	.word	0x08005b91
 8005b10:	08005bbd 	.word	0x08005bbd
 8005b14:	08005bbd 	.word	0x08005bbd
 8005b18:	08005bbd 	.word	0x08005bbd
 8005b1c:	08005bbd 	.word	0x08005bbd
 8005b20:	08005bbd 	.word	0x08005bbd
 8005b24:	08005bbd 	.word	0x08005bbd
 8005b28:	08005bbd 	.word	0x08005bbd
 8005b2c:	08005ba7 	.word	0x08005ba7
 8005b30:	08005bbd 	.word	0x08005bbd
 8005b34:	08005bbd 	.word	0x08005bbd
 8005b38:	08005bbd 	.word	0x08005bbd
 8005b3c:	08005bbd 	.word	0x08005bbd
 8005b40:	08005bbd 	.word	0x08005bbd
 8005b44:	08005bbd 	.word	0x08005bbd
 8005b48:	08005bbd 	.word	0x08005bbd
 8005b4c:	08005bc5 	.word	0x08005bc5
 8005b50:	08005bbd 	.word	0x08005bbd
 8005b54:	08005bbd 	.word	0x08005bbd
 8005b58:	08005bbd 	.word	0x08005bbd
 8005b5c:	08005bbd 	.word	0x08005bbd
 8005b60:	08005bbd 	.word	0x08005bbd
 8005b64:	08005bbd 	.word	0x08005bbd
 8005b68:	08005bbd 	.word	0x08005bbd
 8005b6c:	08005bc5 	.word	0x08005bc5
 8005b70:	08005bbd 	.word	0x08005bbd
 8005b74:	08005bbd 	.word	0x08005bbd
 8005b78:	08005bbd 	.word	0x08005bbd
 8005b7c:	08005bbd 	.word	0x08005bbd
 8005b80:	08005bbd 	.word	0x08005bbd
 8005b84:	08005bbd 	.word	0x08005bbd
 8005b88:	08005bbd 	.word	0x08005bbd
 8005b8c:	08005bc5 	.word	0x08005bc5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b94:	3308      	adds	r3, #8
 8005b96:	2101      	movs	r1, #1
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 fe97 	bl	80078cc <RCCEx_PLL2_Config>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ba4:	e00f      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005baa:	3328      	adds	r3, #40	@ 0x28
 8005bac:	2101      	movs	r1, #1
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f001 ff3e 	bl	8007a30 <RCCEx_PLL3_Config>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005bba:	e004      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005bce:	4b81      	ldr	r3, [pc, #516]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bde:	4a7d      	ldr	r2, [pc, #500]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005be0:	430b      	orrs	r3, r1
 8005be2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005be4:	e003      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f002 0302 	and.w	r3, r2, #2
 8005bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c04:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	d042      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c14:	2b05      	cmp	r3, #5
 8005c16:	d825      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005c18:	a201      	add	r2, pc, #4	@ (adr r2, 8005c20 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c6d 	.word	0x08005c6d
 8005c24:	08005c39 	.word	0x08005c39
 8005c28:	08005c4f 	.word	0x08005c4f
 8005c2c:	08005c6d 	.word	0x08005c6d
 8005c30:	08005c6d 	.word	0x08005c6d
 8005c34:	08005c6d 	.word	0x08005c6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	2101      	movs	r1, #1
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 fe43 	bl	80078cc <RCCEx_PLL2_Config>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c4c:	e00f      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c52:	3328      	adds	r3, #40	@ 0x28
 8005c54:	2101      	movs	r1, #1
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 feea 	bl	8007a30 <RCCEx_PLL3_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c62:	e004      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c6a:	e000      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c76:	4b57      	ldr	r3, [pc, #348]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7a:	f023 0107 	bic.w	r1, r3, #7
 8005c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c84:	4a53      	ldr	r2, [pc, #332]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c86:	430b      	orrs	r3, r1
 8005c88:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c8a:	e003      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c90:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f002 0304 	and.w	r3, r2, #4
 8005ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005caa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	d044      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cbc:	2b05      	cmp	r3, #5
 8005cbe:	d825      	bhi.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005d15 	.word	0x08005d15
 8005ccc:	08005ce1 	.word	0x08005ce1
 8005cd0:	08005cf7 	.word	0x08005cf7
 8005cd4:	08005d15 	.word	0x08005d15
 8005cd8:	08005d15 	.word	0x08005d15
 8005cdc:	08005d15 	.word	0x08005d15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 fdef 	bl	80078cc <RCCEx_PLL2_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cf4:	e00f      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cfa:	3328      	adds	r3, #40	@ 0x28
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 fe96 	bl	8007a30 <RCCEx_PLL3_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d0a:	e004      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d12:	e000      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d22:	f023 0107 	bic.w	r1, r3, #7
 8005d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d2e:	4a29      	ldr	r2, [pc, #164]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d30:	430b      	orrs	r3, r1
 8005d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d34:	e003      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	f002 0320 	and.w	r3, r2, #32
 8005d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	d057      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d6a:	d035      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d70:	d82c      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d76:	d031      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7c:	d826      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005d7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d82:	d02d      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005d84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d88:	d820      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d8e:	d012      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d94:	d81a      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d024      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005d9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d9e:	d115      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005da4:	3308      	adds	r3, #8
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 fd8f 	bl	80078cc <RCCEx_PLL2_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005db4:	e017      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dba:	3328      	adds	r3, #40	@ 0x28
 8005dbc:	2102      	movs	r1, #2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 fe36 	bl	8007a30 <RCCEx_PLL3_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005dca:	e00c      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005dd2:	e008      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005dd4:	58024400 	.word	0x58024400
        break;
 8005dd8:	bf00      	nop
 8005dda:	e004      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ddc:	bf00      	nop
 8005dde:	e002      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005de0:	bf00      	nop
 8005de2:	e000      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dee:	4bc2      	ldr	r3, [pc, #776]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dfe:	4abe      	ldr	r2, [pc, #760]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e04:	e003      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e0a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	d055      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005e2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005e3a:	d033      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005e3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005e40:	d82c      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e46:	d02f      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e4c:	d826      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005e4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e52:	d02b      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005e54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e58:	d820      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e5e:	d012      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005e60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e64:	d81a      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d022      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e6e:	d115      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e74:	3308      	adds	r3, #8
 8005e76:	2100      	movs	r1, #0
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 fd27 	bl	80078cc <RCCEx_PLL2_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e84:	e015      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e8a:	3328      	adds	r3, #40	@ 0x28
 8005e8c:	2102      	movs	r1, #2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fdce 	bl	8007a30 <RCCEx_PLL3_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e9a:	e00a      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ea2:	e006      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005ea4:	bf00      	nop
 8005ea6:	e004      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005ea8:	bf00      	nop
 8005eaa:	e002      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005eac:	bf00      	nop
 8005eae:	e000      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005eba:	4b8f      	ldr	r3, [pc, #572]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ebe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ec6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005eca:	4a8b      	ldr	r2, [pc, #556]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ed0:	e003      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ed6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ee6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005eea:	2300      	movs	r3, #0
 8005eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ef0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d055      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f02:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005f06:	d033      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005f08:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005f0c:	d82c      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f12:	d02f      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f18:	d826      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005f1a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005f1e:	d02b      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005f20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005f24:	d820      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005f26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f2a:	d012      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f30:	d81a      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d022      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f3a:	d115      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f40:	3308      	adds	r3, #8
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fcc1 	bl	80078cc <RCCEx_PLL2_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f50:	e015      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f56:	3328      	adds	r3, #40	@ 0x28
 8005f58:	2102      	movs	r1, #2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 fd68 	bl	8007a30 <RCCEx_PLL3_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f66:	e00a      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f6e:	e006      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005f70:	bf00      	nop
 8005f72:	e004      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005f74:	bf00      	nop
 8005f76:	e002      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005f78:	bf00      	nop
 8005f7a:	e000      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f86:	4b5c      	ldr	r3, [pc, #368]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f96:	4a58      	ldr	r2, [pc, #352]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f9c:	e003      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fa2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f002 0308 	and.w	r3, r2, #8
 8005fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005fbc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	d01e      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd2:	d10c      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fd8:	3328      	adds	r3, #40	@ 0x28
 8005fda:	2102      	movs	r1, #2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 fd27 	bl	8007a30 <RCCEx_PLL3_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fee:	4b42      	ldr	r3, [pc, #264]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ffe:	4a3e      	ldr	r2, [pc, #248]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006000:	430b      	orrs	r3, r1
 8006002:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f002 0310 	and.w	r3, r2, #16
 8006010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006014:	2300      	movs	r3, #0
 8006016:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800601a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800601e:	460b      	mov	r3, r1
 8006020:	4313      	orrs	r3, r2
 8006022:	d01e      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006028:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800602c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006030:	d10c      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006036:	3328      	adds	r3, #40	@ 0x28
 8006038:	2102      	movs	r1, #2
 800603a:	4618      	mov	r0, r3
 800603c:	f001 fcf8 	bl	8007a30 <RCCEx_PLL3_Config>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800604c:	4b2a      	ldr	r3, [pc, #168]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800604e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006050:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006054:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006058:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800605c:	4a26      	ldr	r2, [pc, #152]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800605e:	430b      	orrs	r3, r1
 8006060:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006062:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800606e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006072:	2300      	movs	r3, #0
 8006074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006078:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800607c:	460b      	mov	r3, r1
 800607e:	4313      	orrs	r3, r2
 8006080:	d040      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006082:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800608a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800608e:	d022      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006094:	d81b      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800609a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800609e:	d00b      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80060a0:	e015      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060a6:	3308      	adds	r3, #8
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 fc0e 	bl	80078cc <RCCEx_PLL2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80060b6:	e00f      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060bc:	3328      	adds	r3, #40	@ 0x28
 80060be:	2102      	movs	r1, #2
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 fcb5 	bl	8007a30 <RCCEx_PLL3_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80060cc:	e004      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060d4:	e000      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80060d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10d      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060e0:	4b05      	ldr	r3, [pc, #20]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80060e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060f0:	4a01      	ldr	r2, [pc, #4]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060f2:	430b      	orrs	r3, r1
 80060f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80060f6:	e005      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80060f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006100:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006104:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006110:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006112:	2300      	movs	r3, #0
 8006114:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006116:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800611a:	460b      	mov	r3, r1
 800611c:	4313      	orrs	r3, r2
 800611e:	d03b      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006128:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800612c:	d01f      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800612e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006132:	d818      	bhi.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006134:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006138:	d003      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800613a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800613e:	d007      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006140:	e011      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006142:	4b64      	ldr	r3, [pc, #400]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	4a63      	ldr	r2, [pc, #396]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800614c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800614e:	e00f      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006154:	3328      	adds	r3, #40	@ 0x28
 8006156:	2101      	movs	r1, #1
 8006158:	4618      	mov	r0, r3
 800615a:	f001 fc69 	bl	8007a30 <RCCEx_PLL3_Config>
 800615e:	4603      	mov	r3, r0
 8006160:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006164:	e004      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800616c:	e000      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800616e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006170:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006178:	4b56      	ldr	r3, [pc, #344]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800617a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006188:	4a52      	ldr	r2, [pc, #328]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800618a:	430b      	orrs	r3, r1
 800618c:	6553      	str	r3, [r2, #84]	@ 0x54
 800618e:	e003      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006194:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80061a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80061a6:	2300      	movs	r3, #0
 80061a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80061aa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80061ae:	460b      	mov	r3, r1
 80061b0:	4313      	orrs	r3, r2
 80061b2:	d031      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80061b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80061be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c2:	d007      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80061c4:	e011      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c6:	4b43      	ldr	r3, [pc, #268]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ca:	4a42      	ldr	r2, [pc, #264]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061d2:	e00e      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061d8:	3308      	adds	r3, #8
 80061da:	2102      	movs	r1, #2
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 fb75 	bl	80078cc <RCCEx_PLL2_Config>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061fa:	4b36      	ldr	r3, [pc, #216]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006202:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006208:	4a32      	ldr	r2, [pc, #200]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800620a:	430b      	orrs	r3, r1
 800620c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800620e:	e003      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006210:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006214:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006226:	2300      	movs	r3, #0
 8006228:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800622a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800622e:	460b      	mov	r3, r1
 8006230:	4313      	orrs	r3, r2
 8006232:	d00c      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006234:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006238:	3328      	adds	r3, #40	@ 0x28
 800623a:	2102      	movs	r1, #2
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fbf7 	bl	8007a30 <RCCEx_PLL3_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800624e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800625a:	663b      	str	r3, [r7, #96]	@ 0x60
 800625c:	2300      	movs	r3, #0
 800625e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006260:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006264:	460b      	mov	r3, r1
 8006266:	4313      	orrs	r3, r2
 8006268:	d03a      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800626a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800626e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006276:	d018      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006278:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800627c:	d811      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800627e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006282:	d014      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006288:	d80b      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d011      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800628e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006292:	d106      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006294:	4b0f      	ldr	r3, [pc, #60]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	4a0e      	ldr	r2, [pc, #56]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800629a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800629e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80062a0:	e008      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062a8:	e004      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80062aa:	bf00      	nop
 80062ac:	e002      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80062ae:	bf00      	nop
 80062b0:	e000      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80062b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10d      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062bc:	4b05      	ldr	r3, [pc, #20]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062cc:	4a01      	ldr	r2, [pc, #4]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062ce:	430b      	orrs	r3, r1
 80062d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80062d2:	e005      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80062d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80062ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062ee:	2300      	movs	r3, #0
 80062f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80062f6:	460b      	mov	r3, r1
 80062f8:	4313      	orrs	r3, r2
 80062fa:	d009      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062fc:	4baa      	ldr	r3, [pc, #680]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006300:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800630a:	4aa7      	ldr	r2, [pc, #668]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800630c:	430b      	orrs	r3, r1
 800630e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800631c:	653b      	str	r3, [r7, #80]	@ 0x50
 800631e:	2300      	movs	r3, #0
 8006320:	657b      	str	r3, [r7, #84]	@ 0x54
 8006322:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006326:	460b      	mov	r3, r1
 8006328:	4313      	orrs	r3, r2
 800632a:	d00a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800632c:	4b9e      	ldr	r3, [pc, #632]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006338:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800633c:	4a9a      	ldr	r2, [pc, #616]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800633e:	430b      	orrs	r3, r1
 8006340:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800634e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006350:	2300      	movs	r3, #0
 8006352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006354:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006358:	460b      	mov	r3, r1
 800635a:	4313      	orrs	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800635e:	4b92      	ldr	r3, [pc, #584]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006362:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800636a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636c:	4a8e      	ldr	r2, [pc, #568]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800636e:	430b      	orrs	r3, r1
 8006370:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800637e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006380:	2300      	movs	r3, #0
 8006382:	647b      	str	r3, [r7, #68]	@ 0x44
 8006384:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006388:	460b      	mov	r3, r1
 800638a:	4313      	orrs	r3, r2
 800638c:	d00e      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800638e:	4b86      	ldr	r3, [pc, #536]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	4a85      	ldr	r2, [pc, #532]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006394:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006398:	6113      	str	r3, [r2, #16]
 800639a:	4b83      	ldr	r3, [pc, #524]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800639c:	6919      	ldr	r1, [r3, #16]
 800639e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80063a6:	4a80      	ldr	r2, [pc, #512]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80063ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80063b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063ba:	2300      	movs	r3, #0
 80063bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80063c2:	460b      	mov	r3, r1
 80063c4:	4313      	orrs	r3, r2
 80063c6:	d009      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80063c8:	4b77      	ldr	r3, [pc, #476]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063cc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80063d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d6:	4a74      	ldr	r2, [pc, #464]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063d8:	430b      	orrs	r3, r1
 80063da:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80063e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ea:	2300      	movs	r3, #0
 80063ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80063f2:	460b      	mov	r3, r1
 80063f4:	4313      	orrs	r3, r2
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063f8:	4b6b      	ldr	r3, [pc, #428]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006400:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006408:	4a67      	ldr	r2, [pc, #412]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800640a:	430b      	orrs	r3, r1
 800640c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800640e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	2100      	movs	r1, #0
 8006418:	62b9      	str	r1, [r7, #40]	@ 0x28
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006420:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006424:	460b      	mov	r3, r1
 8006426:	4313      	orrs	r3, r2
 8006428:	d011      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800642a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800642e:	3308      	adds	r3, #8
 8006430:	2100      	movs	r1, #0
 8006432:	4618      	mov	r0, r3
 8006434:	f001 fa4a 	bl	80078cc <RCCEx_PLL2_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800643e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006446:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800644a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800644e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	2100      	movs	r1, #0
 8006458:	6239      	str	r1, [r7, #32]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006460:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006464:	460b      	mov	r3, r1
 8006466:	4313      	orrs	r3, r2
 8006468:	d011      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800646a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800646e:	3308      	adds	r3, #8
 8006470:	2101      	movs	r1, #1
 8006472:	4618      	mov	r0, r3
 8006474:	f001 fa2a 	bl	80078cc <RCCEx_PLL2_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800647e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006486:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800648a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800648e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	2100      	movs	r1, #0
 8006498:	61b9      	str	r1, [r7, #24]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80064a4:	460b      	mov	r3, r1
 80064a6:	4313      	orrs	r3, r2
 80064a8:	d011      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064ae:	3308      	adds	r3, #8
 80064b0:	2102      	movs	r1, #2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 fa0a 	bl	80078cc <RCCEx_PLL2_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80064be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80064ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	2100      	movs	r1, #0
 80064d8:	6139      	str	r1, [r7, #16]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80064e4:	460b      	mov	r3, r1
 80064e6:	4313      	orrs	r3, r2
 80064e8:	d011      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064ee:	3328      	adds	r3, #40	@ 0x28
 80064f0:	2100      	movs	r1, #0
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 fa9c 	bl	8007a30 <RCCEx_PLL3_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80064fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006506:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800650a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800650e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	2100      	movs	r1, #0
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006524:	460b      	mov	r3, r1
 8006526:	4313      	orrs	r3, r2
 8006528:	d011      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800652a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800652e:	3328      	adds	r3, #40	@ 0x28
 8006530:	2101      	movs	r1, #1
 8006532:	4618      	mov	r0, r3
 8006534:	f001 fa7c 	bl	8007a30 <RCCEx_PLL3_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800653e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006546:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800654a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800654e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	2100      	movs	r1, #0
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	607b      	str	r3, [r7, #4]
 8006560:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006564:	460b      	mov	r3, r1
 8006566:	4313      	orrs	r3, r2
 8006568:	d011      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800656a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800656e:	3328      	adds	r3, #40	@ 0x28
 8006570:	2102      	movs	r1, #2
 8006572:	4618      	mov	r0, r3
 8006574:	f001 fa5c 	bl	8007a30 <RCCEx_PLL3_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800657e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006586:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800658a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800658e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	e000      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
}
 800659c:	4618      	mov	r0, r3
 800659e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80065a2:	46bd      	mov	sp, r7
 80065a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065a8:	58024400 	.word	0x58024400

080065ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b090      	sub	sp, #64	@ 0x40
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80065b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ba:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80065be:	430b      	orrs	r3, r1
 80065c0:	f040 8094 	bne.w	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80065c4:	4b9e      	ldr	r3, [pc, #632]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80065ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	f200 8087 	bhi.w	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080065f1 	.word	0x080065f1
 80065e0:	08006619 	.word	0x08006619
 80065e4:	08006641 	.word	0x08006641
 80065e8:	080066dd 	.word	0x080066dd
 80065ec:	08006669 	.word	0x08006669
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065f0:	4b93      	ldr	r3, [pc, #588]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065fc:	d108      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006602:	4618      	mov	r0, r3
 8006604:	f001 f810 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800660c:	f000 bd45 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006614:	f000 bd41 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006618:	4b89      	ldr	r3, [pc, #548]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006620:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006624:	d108      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006626:	f107 0318 	add.w	r3, r7, #24
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fd54 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006634:	f000 bd31 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800663c:	f000 bd2d 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006640:	4b7f      	ldr	r3, [pc, #508]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664c:	d108      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800664e:	f107 030c 	add.w	r3, r7, #12
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fe94 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800665c:	f000 bd1d 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006664:	f000 bd19 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006668:	4b75      	ldr	r3, [pc, #468]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800666a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800666c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006670:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006672:	4b73      	ldr	r3, [pc, #460]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b04      	cmp	r3, #4
 800667c:	d10c      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800667e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006680:	2b00      	cmp	r3, #0
 8006682:	d109      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006684:	4b6e      	ldr	r3, [pc, #440]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	08db      	lsrs	r3, r3, #3
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	4a6d      	ldr	r2, [pc, #436]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
 8006694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006696:	e01f      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006698:	4b69      	ldr	r3, [pc, #420]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066a4:	d106      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80066a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ac:	d102      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066ae:	4b66      	ldr	r3, [pc, #408]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80066b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066b2:	e011      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066b4:	4b62      	ldr	r3, [pc, #392]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c0:	d106      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80066c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066c8:	d102      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066ca:	4b60      	ldr	r3, [pc, #384]	@ (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80066cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ce:	e003      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80066d4:	f000 bce1 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066d8:	f000 bcdf 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80066de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066e0:	f000 bcdb 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066e8:	f000 bcd7 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80066ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80066f4:	430b      	orrs	r3, r1
 80066f6:	f040 80ad 	bne.w	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80066fa:	4b51      	ldr	r3, [pc, #324]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066fe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006702:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670a:	d056      	beq.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006712:	f200 8090 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	2bc0      	cmp	r3, #192	@ 0xc0
 800671a:	f000 8088 	beq.w	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800671e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006720:	2bc0      	cmp	r3, #192	@ 0xc0
 8006722:	f200 8088 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	2b80      	cmp	r3, #128	@ 0x80
 800672a:	d032      	beq.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800672c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672e:	2b80      	cmp	r3, #128	@ 0x80
 8006730:	f200 8081 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800673a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673c:	2b40      	cmp	r3, #64	@ 0x40
 800673e:	d014      	beq.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006740:	e079      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006742:	4b3f      	ldr	r3, [pc, #252]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800674a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800674e:	d108      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006754:	4618      	mov	r0, r3
 8006756:	f000 ff67 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800675e:	f000 bc9c 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006766:	f000 bc98 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800676a:	4b35      	ldr	r3, [pc, #212]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006776:	d108      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006778:	f107 0318 	add.w	r3, r7, #24
 800677c:	4618      	mov	r0, r3
 800677e:	f000 fcab 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006786:	f000 bc88 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800678e:	f000 bc84 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006792:	4b2b      	ldr	r3, [pc, #172]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800679a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800679e:	d108      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a0:	f107 030c 	add.w	r3, r7, #12
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fdeb 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ae:	f000 bc74 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b6:	f000 bc70 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067ba:	4b21      	ldr	r3, [pc, #132]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d10c      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80067d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	08db      	lsrs	r3, r3, #3
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	4a18      	ldr	r2, [pc, #96]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067e2:	fa22 f303 	lsr.w	r3, r2, r3
 80067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e8:	e01f      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067ea:	4b15      	ldr	r3, [pc, #84]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067f6:	d106      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80067f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067fe:	d102      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006800:	4b11      	ldr	r3, [pc, #68]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006804:	e011      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006806:	4b0e      	ldr	r3, [pc, #56]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006812:	d106      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800681a:	d102      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800681c:	4b0b      	ldr	r3, [pc, #44]	@ (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006820:	e003      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006826:	f000 bc38 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800682a:	f000 bc36 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800682e:	4b08      	ldr	r3, [pc, #32]	@ (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006832:	f000 bc32 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800683a:	f000 bc2e 	b.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800683e:	bf00      	nop
 8006840:	58024400 	.word	0x58024400
 8006844:	03d09000 	.word	0x03d09000
 8006848:	003d0900 	.word	0x003d0900
 800684c:	017d7840 	.word	0x017d7840
 8006850:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006858:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800685c:	430b      	orrs	r3, r1
 800685e:	f040 809c 	bne.w	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006862:	4b9e      	ldr	r3, [pc, #632]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006866:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800686a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006872:	d054      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800687a:	f200 808b 	bhi.w	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006884:	f000 8083 	beq.w	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800688e:	f200 8081 	bhi.w	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006898:	d02f      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068a0:	d878      	bhi.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068ae:	d012      	beq.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80068b0:	e070      	b.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068b2:	4b8a      	ldr	r3, [pc, #552]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068be:	d107      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 feaf 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ce:	e3e4      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068d4:	e3e1      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068d6:	4b81      	ldr	r3, [pc, #516]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068e2:	d107      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e4:	f107 0318 	add.w	r3, r7, #24
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fbf5 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f2:	e3d2      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f8:	e3cf      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068fa:	4b78      	ldr	r3, [pc, #480]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006906:	d107      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006908:	f107 030c 	add.w	r3, r7, #12
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fd37 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006916:	e3c0      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800691c:	e3bd      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800691e:	4b6f      	ldr	r3, [pc, #444]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006922:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006928:	4b6c      	ldr	r3, [pc, #432]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b04      	cmp	r3, #4
 8006932:	d10c      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006936:	2b00      	cmp	r3, #0
 8006938:	d109      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800693a:	4b68      	ldr	r3, [pc, #416]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	08db      	lsrs	r3, r3, #3
 8006940:	f003 0303 	and.w	r3, r3, #3
 8006944:	4a66      	ldr	r2, [pc, #408]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006946:	fa22 f303 	lsr.w	r3, r2, r3
 800694a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800694c:	e01e      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800694e:	4b63      	ldr	r3, [pc, #396]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800695a:	d106      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800695c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006962:	d102      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006964:	4b5f      	ldr	r3, [pc, #380]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006968:	e010      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800696a:	4b5c      	ldr	r3, [pc, #368]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006972:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006976:	d106      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800697e:	d102      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006980:	4b59      	ldr	r3, [pc, #356]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006984:	e002      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800698a:	e386      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800698c:	e385      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800698e:	4b57      	ldr	r3, [pc, #348]	@ (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006992:	e382      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006998:	e37f      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800699a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800699e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80069a2:	430b      	orrs	r3, r1
 80069a4:	f040 80a7 	bne.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80069a8:	4b4c      	ldr	r3, [pc, #304]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ac:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80069b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069b8:	d055      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069c0:	f200 8096 	bhi.w	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80069c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069ca:	f000 8084 	beq.w	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069d4:	f200 808c 	bhi.w	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069de:	d030      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069e6:	f200 8083 	bhi.w	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d004      	beq.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069f6:	d012      	beq.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80069f8:	e07a      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069fa:	4b38      	ldr	r3, [pc, #224]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a06:	d107      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fe0b 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a16:	e340      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a1c:	e33d      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a2a:	d107      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a2c:	f107 0318 	add.w	r3, r7, #24
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fb51 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a3a:	e32e      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a40:	e32b      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a42:	4b26      	ldr	r3, [pc, #152]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a4e:	d107      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a50:	f107 030c 	add.w	r3, r7, #12
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fc93 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a5e:	e31c      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a64:	e319      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a66:	4b1d      	ldr	r3, [pc, #116]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a6e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a70:	4b1a      	ldr	r3, [pc, #104]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d10c      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d109      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a82:	4b16      	ldr	r3, [pc, #88]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	08db      	lsrs	r3, r3, #3
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	4a14      	ldr	r2, [pc, #80]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a94:	e01e      	b.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a96:	4b11      	ldr	r3, [pc, #68]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aa2:	d106      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aaa:	d102      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006aac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ab0:	e010      	b.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006abe:	d106      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ac6:	d102      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ac8:	4b07      	ldr	r3, [pc, #28]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006acc:	e002      	b.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ad2:	e2e2      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ad4:	e2e1      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ad6:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ada:	e2de      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006adc:	58024400 	.word	0x58024400
 8006ae0:	03d09000 	.word	0x03d09000
 8006ae4:	003d0900 	.word	0x003d0900
 8006ae8:	017d7840 	.word	0x017d7840
 8006aec:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006af4:	e2d1      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006afa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006afe:	430b      	orrs	r3, r1
 8006b00:	f040 809c 	bne.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006b04:	4b93      	ldr	r3, [pc, #588]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b08:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006b0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b14:	d054      	beq.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b1c:	f200 808b 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b26:	f000 8083 	beq.w	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b30:	f200 8081 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b3a:	d02f      	beq.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b42:	d878      	bhi.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b50:	d012      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006b52:	e070      	b.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b54:	4b7f      	ldr	r3, [pc, #508]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b60:	d107      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fd5e 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b70:	e293      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b76:	e290      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b78:	4b76      	ldr	r3, [pc, #472]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b84:	d107      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b86:	f107 0318 	add.w	r3, r7, #24
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 faa4 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b94:	e281      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b9a:	e27e      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b9c:	4b6d      	ldr	r3, [pc, #436]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ba8:	d107      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006baa:	f107 030c 	add.w	r3, r7, #12
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fbe6 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bb8:	e26f      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bbe:	e26c      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bc0:	4b64      	ldr	r3, [pc, #400]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bca:	4b62      	ldr	r3, [pc, #392]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d10c      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d109      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bdc:	4b5d      	ldr	r3, [pc, #372]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	08db      	lsrs	r3, r3, #3
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	4a5c      	ldr	r2, [pc, #368]	@ (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006be8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bee:	e01e      	b.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bf0:	4b58      	ldr	r3, [pc, #352]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bfc:	d106      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c04:	d102      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c06:	4b55      	ldr	r3, [pc, #340]	@ (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c0a:	e010      	b.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c0c:	4b51      	ldr	r3, [pc, #324]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c18:	d106      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c20:	d102      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c22:	4b4f      	ldr	r3, [pc, #316]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c26:	e002      	b.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c2c:	e235      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c2e:	e234      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c30:	4b4c      	ldr	r3, [pc, #304]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c34:	e231      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c3a:	e22e      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c40:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006c44:	430b      	orrs	r3, r1
 8006c46:	f040 808f 	bne.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006c4a:	4b42      	ldr	r3, [pc, #264]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c4e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006c52:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c5a:	d06b      	beq.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c62:	d874      	bhi.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c6a:	d056      	beq.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c72:	d86c      	bhi.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c7a:	d03b      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c82:	d864      	bhi.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c8a:	d021      	beq.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c92:	d85c      	bhi.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca0:	d004      	beq.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006ca2:	e054      	b.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ca4:	f7fe fa22 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8006ca8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006caa:	e1f6      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cac:	4b29      	ldr	r3, [pc, #164]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb8:	d107      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cba:	f107 0318 	add.w	r3, r7, #24
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fa0a 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cc8:	e1e7      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cce:	e1e4      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cd0:	4b20      	ldr	r3, [pc, #128]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cdc:	d107      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cde:	f107 030c 	add.w	r3, r7, #12
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fb4c 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cec:	e1d5      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf2:	e1d2      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cf4:	4b17      	ldr	r3, [pc, #92]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d109      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d00:	4b14      	ldr	r3, [pc, #80]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	08db      	lsrs	r3, r3, #3
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	4a13      	ldr	r2, [pc, #76]	@ (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d12:	e1c2      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d14:	2300      	movs	r3, #0
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d18:	e1bf      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d26:	d102      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006d28:	4b0c      	ldr	r3, [pc, #48]	@ (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d2c:	e1b5      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d32:	e1b2      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d34:	4b07      	ldr	r3, [pc, #28]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d40:	d102      	bne.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006d42:	4b07      	ldr	r3, [pc, #28]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d46:	e1a8      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d4c:	e1a5      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d52:	e1a2      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d54:	58024400 	.word	0x58024400
 8006d58:	03d09000 	.word	0x03d09000
 8006d5c:	003d0900 	.word	0x003d0900
 8006d60:	017d7840 	.word	0x017d7840
 8006d64:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d6c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006d70:	430b      	orrs	r3, r1
 8006d72:	d173      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006d74:	4b9c      	ldr	r3, [pc, #624]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d84:	d02f      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d8c:	d863      	bhi.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d004      	beq.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d9a:	d012      	beq.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006d9c:	e05b      	b.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d9e:	4b92      	ldr	r3, [pc, #584]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006daa:	d107      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dac:	f107 0318 	add.w	r3, r7, #24
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 f991 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dba:	e16e      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc0:	e16b      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dc2:	4b89      	ldr	r3, [pc, #548]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dce:	d107      	bne.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dd0:	f107 030c 	add.w	r3, r7, #12
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fad3 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dde:	e15c      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de4:	e159      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006de6:	4b80      	ldr	r3, [pc, #512]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006dee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006df0:	4b7d      	ldr	r3, [pc, #500]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d10c      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e02:	4b79      	ldr	r3, [pc, #484]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	08db      	lsrs	r3, r3, #3
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	4a77      	ldr	r2, [pc, #476]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e14:	e01e      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e16:	4b74      	ldr	r3, [pc, #464]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e22:	d106      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e2a:	d102      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e2c:	4b70      	ldr	r3, [pc, #448]	@ (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e30:	e010      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e32:	4b6d      	ldr	r3, [pc, #436]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e3e:	d106      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e46:	d102      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e48:	4b6a      	ldr	r3, [pc, #424]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e4c:	e002      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e52:	e122      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e54:	e121      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e5a:	e11e      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e60:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006e64:	430b      	orrs	r3, r1
 8006e66:	d133      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006e68:	4b5f      	ldr	r3, [pc, #380]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e70:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e7e:	d012      	beq.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006e80:	e023      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e82:	4b59      	ldr	r3, [pc, #356]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e8e:	d107      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fbc7 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e9e:	e0fc      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea4:	e0f9      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ea6:	4b50      	ldr	r3, [pc, #320]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eb2:	d107      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eb4:	f107 0318 	add.w	r3, r7, #24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 f90d 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ec2:	e0ea      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec8:	e0e7      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ece:	e0e4      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006ed8:	430b      	orrs	r3, r1
 8006eda:	f040 808d 	bne.w	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006ede:	4b42      	ldr	r3, [pc, #264]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006ee6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006eee:	d06b      	beq.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ef6:	d874      	bhi.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006efe:	d056      	beq.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f06:	d86c      	bhi.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f0e:	d03b      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f16:	d864      	bhi.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f1e:	d021      	beq.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f26:	d85c      	bhi.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d004      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f34:	d004      	beq.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006f36:	e054      	b.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f38:	f000 f8b8 	bl	80070ac <HAL_RCCEx_GetD3PCLK1Freq>
 8006f3c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f3e:	e0ac      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f40:	4b29      	ldr	r3, [pc, #164]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f4c:	d107      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f4e:	f107 0318 	add.w	r3, r7, #24
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f8c0 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f5c:	e09d      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f62:	e09a      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f64:	4b20      	ldr	r3, [pc, #128]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f70:	d107      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f72:	f107 030c 	add.w	r3, r7, #12
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fa02 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f80:	e08b      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f86:	e088      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f88:	4b17      	ldr	r3, [pc, #92]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d109      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f94:	4b14      	ldr	r3, [pc, #80]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	08db      	lsrs	r3, r3, #3
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	4a13      	ldr	r2, [pc, #76]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa6:	e078      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fac:	e075      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006fae:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fba:	d102      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc0:	e06b      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc6:	e068      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fc8:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fd4:	d102      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006fd6:	4b07      	ldr	r3, [pc, #28]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fda:	e05e      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe0:	e05b      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe6:	e058      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fe8:	58024400 	.word	0x58024400
 8006fec:	03d09000 	.word	0x03d09000
 8006ff0:	003d0900 	.word	0x003d0900
 8006ff4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007000:	430b      	orrs	r3, r1
 8007002:	d148      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007004:	4b27      	ldr	r3, [pc, #156]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007008:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800700c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800700e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007014:	d02a      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800701c:	d838      	bhi.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800701e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800702a:	d00d      	beq.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800702c:	e030      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800702e:	4b1d      	ldr	r3, [pc, #116]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800703a:	d102      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800703c:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800703e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007040:	e02b      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007046:	e028      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007048:	4b16      	ldr	r3, [pc, #88]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007054:	d107      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fae4 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007064:	e019      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800706a:	e016      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800706c:	4b0d      	ldr	r3, [pc, #52]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007078:	d107      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800707a:	f107 0318 	add.w	r3, r7, #24
 800707e:	4618      	mov	r0, r3
 8007080:	f000 f82a 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007088:	e007      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800708e:	e004      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007094:	e001      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800709a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800709c:	4618      	mov	r0, r3
 800709e:	3740      	adds	r7, #64	@ 0x40
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	58024400 	.word	0x58024400
 80070a8:	017d7840 	.word	0x017d7840

080070ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070b0:	f7fd ffec 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80070b4:	4602      	mov	r2, r0
 80070b6:	4b06      	ldr	r3, [pc, #24]	@ (80070d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	091b      	lsrs	r3, r3, #4
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	4904      	ldr	r1, [pc, #16]	@ (80070d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070c2:	5ccb      	ldrb	r3, [r1, r3]
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	58024400 	.word	0x58024400
 80070d4:	0800b0d8 	.word	0x0800b0d8

080070d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80070d8:	b480      	push	{r7}
 80070da:	b089      	sub	sp, #36	@ 0x24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80070ea:	4b9f      	ldr	r3, [pc, #636]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ee:	0b1b      	lsrs	r3, r3, #12
 80070f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070f6:	4b9c      	ldr	r3, [pc, #624]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fa:	091b      	lsrs	r3, r3, #4
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007102:	4b99      	ldr	r3, [pc, #612]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007106:	08db      	lsrs	r3, r3, #3
 8007108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	fb02 f303 	mul.w	r3, r2, r3
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 8111 	beq.w	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b02      	cmp	r3, #2
 800712a:	f000 8083 	beq.w	8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b02      	cmp	r3, #2
 8007132:	f200 80a1 	bhi.w	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d056      	beq.n	80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007142:	e099      	b.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007144:	4b88      	ldr	r3, [pc, #544]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d02d      	beq.n	80071ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007150:	4b85      	ldr	r3, [pc, #532]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	08db      	lsrs	r3, r3, #3
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	4a84      	ldr	r2, [pc, #528]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
 8007160:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	4b7b      	ldr	r3, [pc, #492]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a03 	vldr	s12, [r7, #12]
 800718e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071aa:	e087      	b.n	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b6a      	ldr	r3, [pc, #424]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ee:	e065      	b.n	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b59      	ldr	r3, [pc, #356]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a03 	vldr	s12, [r7, #12]
 8007216:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007232:	e043      	b.n	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800737c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b48      	ldr	r3, [pc, #288]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a03 	vldr	s12, [r7, #12]
 800725a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007276:	e021      	b.n	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728a:	4b37      	ldr	r3, [pc, #220]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800728c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729a:	ed97 6a03 	vldr	s12, [r7, #12]
 800729e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80072bc:	4b2a      	ldr	r3, [pc, #168]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c0:	0a5b      	lsrs	r3, r3, #9
 80072c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e2:	ee17 2a90 	vmov	r2, s15
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80072ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072f4:	ee07 3a90 	vmov	s15, r3
 80072f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007300:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007304:	edd7 6a07 	vldr	s13, [r7, #28]
 8007308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800730c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007310:	ee17 2a90 	vmov	r2, s15
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007318:	4b13      	ldr	r3, [pc, #76]	@ (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800731a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731c:	0e1b      	lsrs	r3, r3, #24
 800731e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800732e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007332:	edd7 6a07 	vldr	s13, [r7, #28]
 8007336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800733a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733e:	ee17 2a90 	vmov	r2, s15
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007346:	e008      	b.n	800735a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	609a      	str	r2, [r3, #8]
}
 800735a:	bf00      	nop
 800735c:	3724      	adds	r7, #36	@ 0x24
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	58024400 	.word	0x58024400
 800736c:	03d09000 	.word	0x03d09000
 8007370:	46000000 	.word	0x46000000
 8007374:	4c742400 	.word	0x4c742400
 8007378:	4a742400 	.word	0x4a742400
 800737c:	4bbebc20 	.word	0x4bbebc20

08007380 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	@ 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007388:	4ba1      	ldr	r3, [pc, #644]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007392:	4b9f      	ldr	r3, [pc, #636]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007396:	0d1b      	lsrs	r3, r3, #20
 8007398:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800739c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800739e:	4b9c      	ldr	r3, [pc, #624]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80073aa:	4b99      	ldr	r3, [pc, #612]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ae:	08db      	lsrs	r3, r3, #3
 80073b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	fb02 f303 	mul.w	r3, r2, r3
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 8111 	beq.w	80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	f000 8083 	beq.w	80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	f200 80a1 	bhi.w	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d056      	beq.n	8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073ea:	e099      	b.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ec:	4b88      	ldr	r3, [pc, #544]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d02d      	beq.n	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073f8:	4b85      	ldr	r3, [pc, #532]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	08db      	lsrs	r3, r3, #3
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	4a84      	ldr	r2, [pc, #528]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
 8007408:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007422:	4b7b      	ldr	r3, [pc, #492]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	ed97 6a03 	vldr	s12, [r7, #12]
 8007436:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007452:	e087      	b.n	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800761c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007466:	4b6a      	ldr	r3, [pc, #424]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007476:	ed97 6a03 	vldr	s12, [r7, #12]
 800747a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800747e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800748a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007496:	e065      	b.n	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074aa:	4b59      	ldr	r3, [pc, #356]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80074be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074da:	e043      	b.n	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ee:	4b48      	ldr	r3, [pc, #288]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007502:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800751e:	e021      	b.n	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800752e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007532:	4b37      	ldr	r3, [pc, #220]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007542:	ed97 6a03 	vldr	s12, [r7, #12]
 8007546:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800754a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007562:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007564:	4b2a      	ldr	r3, [pc, #168]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007568:	0a5b      	lsrs	r3, r3, #9
 800756a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800757a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800757e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758a:	ee17 2a90 	vmov	r2, s15
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007592:	4b1f      	ldr	r3, [pc, #124]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007596:	0c1b      	lsrs	r3, r3, #16
 8007598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80075b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b8:	ee17 2a90 	vmov	r2, s15
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80075c0:	4b13      	ldr	r3, [pc, #76]	@ (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c4:	0e1b      	lsrs	r3, r3, #24
 80075c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075da:	edd7 6a07 	vldr	s13, [r7, #28]
 80075de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e6:	ee17 2a90 	vmov	r2, s15
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075ee:	e008      	b.n	8007602 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	609a      	str	r2, [r3, #8]
}
 8007602:	bf00      	nop
 8007604:	3724      	adds	r7, #36	@ 0x24
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	58024400 	.word	0x58024400
 8007614:	03d09000 	.word	0x03d09000
 8007618:	46000000 	.word	0x46000000
 800761c:	4c742400 	.word	0x4c742400
 8007620:	4a742400 	.word	0x4a742400
 8007624:	4bbebc20 	.word	0x4bbebc20

08007628 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007628:	b480      	push	{r7}
 800762a:	b089      	sub	sp, #36	@ 0x24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007630:	4ba0      	ldr	r3, [pc, #640]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800763a:	4b9e      	ldr	r3, [pc, #632]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800763c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763e:	091b      	lsrs	r3, r3, #4
 8007640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007644:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007646:	4b9b      	ldr	r3, [pc, #620]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007650:	4b98      	ldr	r3, [pc, #608]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	fb02 f303 	mul.w	r3, r2, r3
 8007660:	ee07 3a90 	vmov	s15, r3
 8007664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007668:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 8111 	beq.w	8007896 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	2b02      	cmp	r3, #2
 8007678:	f000 8083 	beq.w	8007782 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b02      	cmp	r3, #2
 8007680:	f200 80a1 	bhi.w	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d056      	beq.n	800773e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007690:	e099      	b.n	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007692:	4b88      	ldr	r3, [pc, #544]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d02d      	beq.n	80076fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800769e:	4b85      	ldr	r3, [pc, #532]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	08db      	lsrs	r3, r3, #3
 80076a4:	f003 0303 	and.w	r3, r3, #3
 80076a8:	4a83      	ldr	r2, [pc, #524]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80076aa:	fa22 f303 	lsr.w	r3, r2, r3
 80076ae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c8:	4b7a      	ldr	r3, [pc, #488]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d0:	ee07 3a90 	vmov	s15, r3
 80076d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076dc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076f8:	e087      	b.n	800780a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	ee07 3a90 	vmov	s15, r3
 8007700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007704:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770c:	4b69      	ldr	r3, [pc, #420]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800770e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007720:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007738:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800773c:	e065      	b.n	800780a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	ee07 3a90 	vmov	s15, r3
 8007744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007748:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80078c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800774c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007750:	4b58      	ldr	r3, [pc, #352]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007758:	ee07 3a90 	vmov	s15, r3
 800775c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007760:	ed97 6a03 	vldr	s12, [r7, #12]
 8007764:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007780:	e043      	b.n	800780a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80078c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007794:	4b47      	ldr	r3, [pc, #284]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c4:	e021      	b.n	800780a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	ee07 3a90 	vmov	s15, r3
 80077cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80077d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d8:	4b36      	ldr	r3, [pc, #216]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e0:	ee07 3a90 	vmov	s15, r3
 80077e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007804:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007808:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800780a:	4b2a      	ldr	r3, [pc, #168]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800780c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780e:	0a5b      	lsrs	r3, r3, #9
 8007810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007814:	ee07 3a90 	vmov	s15, r3
 8007818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007820:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007824:	edd7 6a07 	vldr	s13, [r7, #28]
 8007828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007830:	ee17 2a90 	vmov	r2, s15
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007838:	4b1e      	ldr	r3, [pc, #120]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800783a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783c:	0c1b      	lsrs	r3, r3, #16
 800783e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800784e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007852:	edd7 6a07 	vldr	s13, [r7, #28]
 8007856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800785a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800785e:	ee17 2a90 	vmov	r2, s15
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007866:	4b13      	ldr	r3, [pc, #76]	@ (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786a:	0e1b      	lsrs	r3, r3, #24
 800786c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007870:	ee07 3a90 	vmov	s15, r3
 8007874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007878:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800787c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007880:	edd7 6a07 	vldr	s13, [r7, #28]
 8007884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800788c:	ee17 2a90 	vmov	r2, s15
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007894:	e008      	b.n	80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	609a      	str	r2, [r3, #8]
}
 80078a8:	bf00      	nop
 80078aa:	3724      	adds	r7, #36	@ 0x24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	58024400 	.word	0x58024400
 80078b8:	03d09000 	.word	0x03d09000
 80078bc:	46000000 	.word	0x46000000
 80078c0:	4c742400 	.word	0x4c742400
 80078c4:	4a742400 	.word	0x4a742400
 80078c8:	4bbebc20 	.word	0x4bbebc20

080078cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078da:	4b53      	ldr	r3, [pc, #332]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80078dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d101      	bne.n	80078ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e099      	b.n	8007a1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a4e      	ldr	r2, [pc, #312]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80078f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f6:	f7f9 fab5 	bl	8000e64 <HAL_GetTick>
 80078fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078fc:	e008      	b.n	8007910 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078fe:	f7f9 fab1 	bl	8000e64 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e086      	b.n	8007a1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007910:	4b45      	ldr	r3, [pc, #276]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f0      	bne.n	80078fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800791c:	4b42      	ldr	r3, [pc, #264]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 800791e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007920:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	031b      	lsls	r3, r3, #12
 800792a:	493f      	ldr	r1, [pc, #252]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 800792c:	4313      	orrs	r3, r2
 800792e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	3b01      	subs	r3, #1
 8007936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	3b01      	subs	r3, #1
 8007940:	025b      	lsls	r3, r3, #9
 8007942:	b29b      	uxth	r3, r3
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	3b01      	subs	r3, #1
 800794c:	041b      	lsls	r3, r3, #16
 800794e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	3b01      	subs	r3, #1
 800795a:	061b      	lsls	r3, r3, #24
 800795c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007960:	4931      	ldr	r1, [pc, #196]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007962:	4313      	orrs	r3, r2
 8007964:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007966:	4b30      	ldr	r3, [pc, #192]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	492d      	ldr	r1, [pc, #180]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007974:	4313      	orrs	r3, r2
 8007976:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007978:	4b2b      	ldr	r3, [pc, #172]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 800797a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797c:	f023 0220 	bic.w	r2, r3, #32
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	4928      	ldr	r1, [pc, #160]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007986:	4313      	orrs	r3, r2
 8007988:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800798a:	4b27      	ldr	r3, [pc, #156]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	4a26      	ldr	r2, [pc, #152]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007990:	f023 0310 	bic.w	r3, r3, #16
 8007994:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007996:	4b24      	ldr	r3, [pc, #144]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007998:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800799a:	4b24      	ldr	r3, [pc, #144]	@ (8007a2c <RCCEx_PLL2_Config+0x160>)
 800799c:	4013      	ands	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	69d2      	ldr	r2, [r2, #28]
 80079a2:	00d2      	lsls	r2, r2, #3
 80079a4:	4920      	ldr	r1, [pc, #128]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80079aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079b0:	f043 0310 	orr.w	r3, r3, #16
 80079b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d106      	bne.n	80079ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c0:	4a19      	ldr	r2, [pc, #100]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079c8:	e00f      	b.n	80079ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d106      	bne.n	80079de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079d0:	4b15      	ldr	r3, [pc, #84]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d4:	4a14      	ldr	r2, [pc, #80]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079dc:	e005      	b.n	80079ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079de:	4b12      	ldr	r3, [pc, #72]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e2:	4a11      	ldr	r2, [pc, #68]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f6:	f7f9 fa35 	bl	8000e64 <HAL_GetTick>
 80079fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079fc:	e008      	b.n	8007a10 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079fe:	f7f9 fa31 	bl	8000e64 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e006      	b.n	8007a1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a10:	4b05      	ldr	r3, [pc, #20]	@ (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0f0      	beq.n	80079fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	ffff0007 	.word	0xffff0007

08007a30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a3e:	4b53      	ldr	r3, [pc, #332]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d101      	bne.n	8007a4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e099      	b.n	8007b82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a4e      	ldr	r2, [pc, #312]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5a:	f7f9 fa03 	bl	8000e64 <HAL_GetTick>
 8007a5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a60:	e008      	b.n	8007a74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a62:	f7f9 f9ff 	bl	8000e64 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d901      	bls.n	8007a74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e086      	b.n	8007b82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a74:	4b45      	ldr	r3, [pc, #276]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f0      	bne.n	8007a62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a80:	4b42      	ldr	r3, [pc, #264]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a84:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	051b      	lsls	r3, r3, #20
 8007a8e:	493f      	ldr	r1, [pc, #252]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	025b      	lsls	r3, r3, #9
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	041b      	lsls	r3, r3, #16
 8007ab2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	061b      	lsls	r3, r3, #24
 8007ac0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ac4:	4931      	ldr	r1, [pc, #196]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007aca:	4b30      	ldr	r3, [pc, #192]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ace:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	492d      	ldr	r1, [pc, #180]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007adc:	4b2b      	ldr	r3, [pc, #172]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	4928      	ldr	r1, [pc, #160]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007aee:	4b27      	ldr	r3, [pc, #156]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af2:	4a26      	ldr	r2, [pc, #152]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007afa:	4b24      	ldr	r3, [pc, #144]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007afe:	4b24      	ldr	r3, [pc, #144]	@ (8007b90 <RCCEx_PLL3_Config+0x160>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	69d2      	ldr	r2, [r2, #28]
 8007b06:	00d2      	lsls	r2, r2, #3
 8007b08:	4920      	ldr	r1, [pc, #128]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b12:	4a1e      	ldr	r2, [pc, #120]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b20:	4b1a      	ldr	r3, [pc, #104]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b24:	4a19      	ldr	r2, [pc, #100]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b2c:	e00f      	b.n	8007b4e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d106      	bne.n	8007b42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b34:	4b15      	ldr	r3, [pc, #84]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b38:	4a14      	ldr	r2, [pc, #80]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b40:	e005      	b.n	8007b4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b42:	4b12      	ldr	r3, [pc, #72]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b46:	4a11      	ldr	r2, [pc, #68]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a0e      	ldr	r2, [pc, #56]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5a:	f7f9 f983 	bl	8000e64 <HAL_GetTick>
 8007b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b60:	e008      	b.n	8007b74 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b62:	f7f9 f97f 	bl	8000e64 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d901      	bls.n	8007b74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e006      	b.n	8007b82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b74:	4b05      	ldr	r3, [pc, #20]	@ (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0f0      	beq.n	8007b62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	58024400 	.word	0x58024400
 8007b90:	ffff0007 	.word	0xffff0007

08007b94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08a      	sub	sp, #40	@ 0x28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e28e      	b.n	80080c4 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007ba6:	f7f9 f969 	bl	8000e7c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d113      	bne.n	8007bdc <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a96      	ldr	r2, [pc, #600]	@ (8007e14 <HAL_SAI_Init+0x280>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d004      	beq.n	8007bc8 <HAL_SAI_Init+0x34>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a95      	ldr	r2, [pc, #596]	@ (8007e18 <HAL_SAI_Init+0x284>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d107      	bne.n	8007bd8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d103      	bne.n	8007bd8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e273      	b.n	80080c4 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a8c      	ldr	r2, [pc, #560]	@ (8007e14 <HAL_SAI_Init+0x280>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <HAL_SAI_Init+0x5c>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a8c      	ldr	r2, [pc, #560]	@ (8007e1c <HAL_SAI_Init+0x288>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d102      	bne.n	8007bf6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007bf0:	4b8b      	ldr	r3, [pc, #556]	@ (8007e20 <HAL_SAI_Init+0x28c>)
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	e028      	b.n	8007c48 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a8a      	ldr	r2, [pc, #552]	@ (8007e24 <HAL_SAI_Init+0x290>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d004      	beq.n	8007c0a <HAL_SAI_Init+0x76>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a88      	ldr	r2, [pc, #544]	@ (8007e28 <HAL_SAI_Init+0x294>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d102      	bne.n	8007c10 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007c0a:	4b88      	ldr	r3, [pc, #544]	@ (8007e2c <HAL_SAI_Init+0x298>)
 8007c0c:	61bb      	str	r3, [r7, #24]
 8007c0e:	e01b      	b.n	8007c48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a86      	ldr	r2, [pc, #536]	@ (8007e30 <HAL_SAI_Init+0x29c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d004      	beq.n	8007c24 <HAL_SAI_Init+0x90>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a85      	ldr	r2, [pc, #532]	@ (8007e34 <HAL_SAI_Init+0x2a0>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d102      	bne.n	8007c2a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007c24:	4b84      	ldr	r3, [pc, #528]	@ (8007e38 <HAL_SAI_Init+0x2a4>)
 8007c26:	61bb      	str	r3, [r7, #24]
 8007c28:	e00e      	b.n	8007c48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a7a      	ldr	r2, [pc, #488]	@ (8007e18 <HAL_SAI_Init+0x284>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d004      	beq.n	8007c3e <HAL_SAI_Init+0xaa>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a80      	ldr	r2, [pc, #512]	@ (8007e3c <HAL_SAI_Init+0x2a8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d102      	bne.n	8007c44 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007c3e:	4b80      	ldr	r3, [pc, #512]	@ (8007e40 <HAL_SAI_Init+0x2ac>)
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	e001      	b.n	8007c48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e23d      	b.n	80080c4 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d106      	bne.n	8007c62 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7f8 fee3 	bl	8000a28 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fd5e 	bl	8008724 <SAI_Disable>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e228      	b.n	80080c4 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d00c      	beq.n	8007c9c <HAL_SAI_Init+0x108>
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d80d      	bhi.n	8007ca2 <HAL_SAI_Init+0x10e>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <HAL_SAI_Init+0xfc>
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d003      	beq.n	8007c96 <HAL_SAI_Init+0x102>
 8007c8e:	e008      	b.n	8007ca2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007c90:	2300      	movs	r3, #0
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007c94:	e008      	b.n	8007ca8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007c96:	2310      	movs	r3, #16
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007c9a:	e005      	b.n	8007ca8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007c9c:	2320      	movs	r3, #32
 8007c9e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007ca0:	e002      	b.n	8007ca8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007ca6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	2b05      	cmp	r3, #5
 8007cae:	d832      	bhi.n	8007d16 <HAL_SAI_Init+0x182>
 8007cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb8 <HAL_SAI_Init+0x124>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007cd1 	.word	0x08007cd1
 8007cbc:	08007cd7 	.word	0x08007cd7
 8007cc0:	08007cdf 	.word	0x08007cdf
 8007cc4:	08007ce7 	.word	0x08007ce7
 8007cc8:	08007cf7 	.word	0x08007cf7
 8007ccc:	08007d07 	.word	0x08007d07
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]
      break;
 8007cd4:	e022      	b.n	8007d1c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cda:	61fb      	str	r3, [r7, #28]
      break;
 8007cdc:	e01e      	b.n	8007d1c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007cde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ce2:	61fb      	str	r3, [r7, #28]
      break;
 8007ce4:	e01a      	b.n	8007d1c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007ce6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007cea:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	f043 0301 	orr.w	r3, r3, #1
 8007cf2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007cf4:	e012      	b.n	8007d1c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007cf6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007cfa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	f043 0302 	orr.w	r3, r3, #2
 8007d02:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007d04:	e00a      	b.n	8007d1c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d0a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0e:	f043 0303 	orr.w	r3, r3, #3
 8007d12:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007d14:	e002      	b.n	8007d1c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
      break;
 8007d1a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d20:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 80c5 	beq.w	8007eb6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a37      	ldr	r2, [pc, #220]	@ (8007e14 <HAL_SAI_Init+0x280>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d004      	beq.n	8007d44 <HAL_SAI_Init+0x1b0>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a37      	ldr	r2, [pc, #220]	@ (8007e1c <HAL_SAI_Init+0x288>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d106      	bne.n	8007d52 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007d44:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007d48:	f04f 0100 	mov.w	r1, #0
 8007d4c:	f7fe fc2e 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007d50:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a33      	ldr	r2, [pc, #204]	@ (8007e24 <HAL_SAI_Init+0x290>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d004      	beq.n	8007d66 <HAL_SAI_Init+0x1d2>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a31      	ldr	r2, [pc, #196]	@ (8007e28 <HAL_SAI_Init+0x294>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d106      	bne.n	8007d74 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007d66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007d6a:	f04f 0100 	mov.w	r1, #0
 8007d6e:	f7fe fc1d 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007d72:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a2d      	ldr	r2, [pc, #180]	@ (8007e30 <HAL_SAI_Init+0x29c>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d004      	beq.n	8007d88 <HAL_SAI_Init+0x1f4>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a2c      	ldr	r2, [pc, #176]	@ (8007e34 <HAL_SAI_Init+0x2a0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d106      	bne.n	8007d96 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007d88:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007d8c:	f04f 0100 	mov.w	r1, #0
 8007d90:	f7fe fc0c 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007d94:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8007e18 <HAL_SAI_Init+0x284>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d106      	bne.n	8007dae <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007da0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007da4:	f04f 0100 	mov.w	r1, #0
 8007da8:	f7fe fc00 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007dac:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a22      	ldr	r2, [pc, #136]	@ (8007e3c <HAL_SAI_Init+0x2a8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d106      	bne.n	8007dc6 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007db8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007dbc:	f04f 0100 	mov.w	r1, #0
 8007dc0:	f7fe fbf4 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007dc4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007dce:	d139      	bne.n	8007e44 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d102      	bne.n	8007dde <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007dd8:	2340      	movs	r3, #64	@ 0x40
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e00a      	b.n	8007df4 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d103      	bne.n	8007dee <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007de6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e002      	b.n	8007df4 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	4619      	mov	r1, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	e030      	b.n	8007e74 <HAL_SAI_Init+0x2e0>
 8007e12:	bf00      	nop
 8007e14:	40015804 	.word	0x40015804
 8007e18:	58005404 	.word	0x58005404
 8007e1c:	40015824 	.word	0x40015824
 8007e20:	40015800 	.word	0x40015800
 8007e24:	40015c04 	.word	0x40015c04
 8007e28:	40015c24 	.word	0x40015c24
 8007e2c:	40015c00 	.word	0x40015c00
 8007e30:	40016004 	.word	0x40016004
 8007e34:	40016024 	.word	0x40016024
 8007e38:	40016000 	.word	0x40016000
 8007e3c:	58005424 	.word	0x58005424
 8007e40:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e4c:	d101      	bne.n	8007e52 <HAL_SAI_Init+0x2be>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e000      	b.n	8007e54 <HAL_SAI_Init+0x2c0>
 8007e52:	2301      	movs	r3, #1
 8007e54:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	4619      	mov	r1, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	fb02 f303 	mul.w	r3, r2, r3
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e72:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	4a95      	ldr	r2, [pc, #596]	@ (80080cc <HAL_SAI_Init+0x538>)
 8007e78:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7c:	08da      	lsrs	r2, r3, #3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007e82:	6939      	ldr	r1, [r7, #16]
 8007e84:	4b91      	ldr	r3, [pc, #580]	@ (80080cc <HAL_SAI_Init+0x538>)
 8007e86:	fba3 2301 	umull	r2, r3, r3, r1
 8007e8a:	08da      	lsrs	r2, r3, #3
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	1aca      	subs	r2, r1, r3
 8007e96:	2a08      	cmp	r2, #8
 8007e98:	d904      	bls.n	8007ea4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d104      	bne.n	8007eb6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb0:	085a      	lsrs	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_SAI_Init+0x332>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d109      	bne.n	8007eda <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <HAL_SAI_Init+0x33e>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e001      	b.n	8007ed6 <HAL_SAI_Init+0x342>
 8007ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ed6:	623b      	str	r3, [r7, #32]
 8007ed8:	e008      	b.n	8007eec <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d102      	bne.n	8007ee8 <HAL_SAI_Init+0x354>
 8007ee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ee6:	e000      	b.n	8007eea <HAL_SAI_Init+0x356>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007eec:	f7f8 ffc6 	bl	8000e7c <HAL_GetREVID>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ef6:	d331      	bcc.n	8007f5c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6819      	ldr	r1, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b73      	ldr	r3, [pc, #460]	@ (80080d0 <HAL_SAI_Init+0x53c>)
 8007f04:	400b      	ands	r3, r1
 8007f06:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6819      	ldr	r1, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f16:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f1c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f22:	431a      	orrs	r2, r3
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007f30:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f3c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	051b      	lsls	r3, r3, #20
 8007f44:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007f4a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	e02d      	b.n	8007fb8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6819      	ldr	r1, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	4b5b      	ldr	r3, [pc, #364]	@ (80080d4 <HAL_SAI_Init+0x540>)
 8007f68:	400b      	ands	r3, r1
 8007f6a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6819      	ldr	r1, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f80:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f86:	431a      	orrs	r2, r3
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007f94:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007fa0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa6:	051b      	lsls	r3, r3, #20
 8007fa8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007fae:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6859      	ldr	r1, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	4b45      	ldr	r3, [pc, #276]	@ (80080d8 <HAL_SAI_Init+0x544>)
 8007fc4:	400b      	ands	r3, r1
 8007fc6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6859      	ldr	r1, [r3, #4]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69da      	ldr	r2, [r3, #28]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6899      	ldr	r1, [r3, #8]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80080dc <HAL_SAI_Init+0x548>)
 8007ff2:	400b      	ands	r3, r1
 8007ff4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6899      	ldr	r1, [r3, #8]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008000:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008006:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800800c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8008012:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008018:	3b01      	subs	r3, #1
 800801a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800801c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68d9      	ldr	r1, [r3, #12]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008034:	400b      	ands	r3, r1
 8008036:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68d9      	ldr	r1, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008046:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800804c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800804e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008054:	3b01      	subs	r3, #1
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1e      	ldr	r2, [pc, #120]	@ (80080e0 <HAL_SAI_Init+0x54c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d004      	beq.n	8008076 <HAL_SAI_Init+0x4e2>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a1c      	ldr	r2, [pc, #112]	@ (80080e4 <HAL_SAI_Init+0x550>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d119      	bne.n	80080aa <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807a:	f023 0201 	bic.w	r2, r3, #1
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008088:	2b01      	cmp	r3, #1
 800808a:	d10e      	bne.n	80080aa <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008094:	3b01      	subs	r3, #1
 8008096:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008098:	431a      	orrs	r2, r3
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a2:	f043 0201 	orr.w	r2, r3, #1
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3728      	adds	r7, #40	@ 0x28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	cccccccd 	.word	0xcccccccd
 80080d0:	f005c010 	.word	0xf005c010
 80080d4:	f805c010 	.word	0xf805c010
 80080d8:	ffff1ff0 	.word	0xffff1ff0
 80080dc:	fff88000 	.word	0xfff88000
 80080e0:	40015804 	.word	0x40015804
 80080e4:	58005404 	.word	0x58005404

080080e8 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_SAI_Abort+0x1a>
 80080fe:	2302      	movs	r3, #2
 8008100:	e07d      	b.n	80081fe <HAL_SAI_Abort+0x116>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fb0a 	bl	8008724 <SAI_Disable>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008128:	d14f      	bne.n	80081ca <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008138:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b12      	cmp	r3, #18
 8008144:	d11d      	bne.n	8008182 <HAL_SAI_Abort+0x9a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800814c:	2b00      	cmp	r3, #0
 800814e:	d018      	beq.n	8008182 <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008156:	4618      	mov	r0, r3
 8008158:	f7f9 fd72 	bl	8001c40 <HAL_DMA_Abort>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00f      	beq.n	8008182 <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800816a:	2b80      	cmp	r3, #128	@ 0x80
 800816c:	d009      	beq.n	8008182 <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008178:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b22      	cmp	r3, #34	@ 0x22
 800818c:	d11d      	bne.n	80081ca <HAL_SAI_Abort+0xe2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008194:	2b00      	cmp	r3, #0
 8008196:	d018      	beq.n	80081ca <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800819e:	4618      	mov	r0, r3
 80081a0:	f7f9 fd4e 	bl	8001c40 <HAL_DMA_Abort>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00f      	beq.n	80081ca <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b2:	2b80      	cmp	r3, #128	@ 0x80
 80081b4:	d009      	beq.n	80081ca <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2200      	movs	r2, #0
 80081d0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081da:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0208 	orr.w	r2, r2, #8
 80081ea:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <HAL_SAI_Receive_DMA+0x1a>
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e079      	b.n	800831a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b01      	cmp	r3, #1
 8008230:	d172      	bne.n	8008318 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_SAI_Receive_DMA+0x38>
 800823c:	2302      	movs	r3, #2
 800823e:	e06c      	b.n	800831a <HAL_SAI_Receive_DMA+0x112>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	88fa      	ldrh	r2, [r7, #6]
 8008252:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	88fa      	ldrh	r2, [r7, #6]
 800825a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2222      	movs	r2, #34	@ 0x22
 800826a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008274:	4a2b      	ldr	r2, [pc, #172]	@ (8008324 <HAL_SAI_Receive_DMA+0x11c>)
 8008276:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800827e:	4a2a      	ldr	r2, [pc, #168]	@ (8008328 <HAL_SAI_Receive_DMA+0x120>)
 8008280:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008288:	4a28      	ldr	r2, [pc, #160]	@ (800832c <HAL_SAI_Receive_DMA+0x124>)
 800828a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008292:	2200      	movs	r2, #0
 8008294:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	331c      	adds	r3, #28
 80082a2:	4619      	mov	r1, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082a8:	461a      	mov	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 80082b0:	f7f9 fa5c 	bl	800176c <HAL_DMA_Start_IT>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e029      	b.n	800831a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80082c6:	2100      	movs	r1, #0
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f9f3 	bl	80086b4 <SAI_InterruptFlag>
 80082ce:	4601      	mov	r1, r0
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691a      	ldr	r2, [r3, #16]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80082ec:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d107      	bne.n	800830c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800830a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	e000      	b.n	800831a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008318:	2302      	movs	r3, #2
  }
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	080087f9 	.word	0x080087f9
 8008328:	08008799 	.word	0x08008799
 800832c:	08008815 	.word	0x08008815

08008330 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 81a7 	beq.w	8008694 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <HAL_SAI_IRQHandler+0x4e>
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f003 0308 	and.w	r3, r3, #8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d005      	beq.n	800837e <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	4798      	blx	r3
 800837c:	e18a      	b.n	8008694 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01e      	beq.n	80083c6 <HAL_SAI_IRQHandler+0x96>
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	d019      	beq.n	80083c6 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2201      	movs	r2, #1
 8008398:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b22      	cmp	r3, #34	@ 0x22
 80083a4:	d101      	bne.n	80083aa <HAL_SAI_IRQHandler+0x7a>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e000      	b.n	80083ac <HAL_SAI_IRQHandler+0x7c>
 80083aa:	2302      	movs	r3, #2
 80083ac:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f96e 	bl	80086a0 <HAL_SAI_ErrorCallback>
 80083c4:	e166      	b.n	8008694 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d013      	beq.n	80083f8 <HAL_SAI_IRQHandler+0xc8>
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2202      	movs	r2, #2
 80083e0:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8153 	beq.w	8008694 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f4:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80083f6:	e14d      	b.n	8008694 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d05b      	beq.n	80084ba <HAL_SAI_IRQHandler+0x18a>
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d056      	beq.n	80084ba <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2220      	movs	r2, #32
 8008412:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800841a:	f043 0204 	orr.w	r2, r3, #4
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d03e      	beq.n	80084ac <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008434:	2b00      	cmp	r3, #0
 8008436:	d018      	beq.n	800846a <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800843e:	4a97      	ldr	r2, [pc, #604]	@ (800869c <HAL_SAI_IRQHandler+0x36c>)
 8008440:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008448:	4618      	mov	r0, r3
 800844a:	f7f9 ff17 	bl	800227c <HAL_DMA_Abort_IT>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00a      	beq.n	800846a <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800845a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f91b 	bl	80086a0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 810a 	beq.w	800868a <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800847c:	4a87      	ldr	r2, [pc, #540]	@ (800869c <HAL_SAI_IRQHandler+0x36c>)
 800847e:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008486:	4618      	mov	r0, r3
 8008488:	f7f9 fef8 	bl	800227c <HAL_DMA_Abort_IT>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 80fb 	beq.w	800868a <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800849a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f8fb 	bl	80086a0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80084aa:	e0ee      	b.n	800868a <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff fe1b 	bl	80080e8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f8f4 	bl	80086a0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80084b8:	e0e7      	b.n	800868a <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d05b      	beq.n	800857c <HAL_SAI_IRQHandler+0x24c>
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d056      	beq.n	800857c <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2240      	movs	r2, #64	@ 0x40
 80084d4:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084dc:	f043 0208 	orr.w	r2, r3, #8
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d03e      	beq.n	800856e <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d018      	beq.n	800852c <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008500:	4a66      	ldr	r2, [pc, #408]	@ (800869c <HAL_SAI_IRQHandler+0x36c>)
 8008502:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800850a:	4618      	mov	r0, r3
 800850c:	f7f9 feb6 	bl	800227c <HAL_DMA_Abort_IT>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800851c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f8ba 	bl	80086a0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80ab 	beq.w	800868e <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800853e:	4a57      	ldr	r2, [pc, #348]	@ (800869c <HAL_SAI_IRQHandler+0x36c>)
 8008540:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008548:	4618      	mov	r0, r3
 800854a:	f7f9 fe97 	bl	800227c <HAL_DMA_Abort_IT>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 809c 	beq.w	800868e <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800855c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f89a 	bl	80086a0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800856c:	e08f      	b.n	800868e <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7ff fdba 	bl	80080e8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f893 	bl	80086a0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800857a:	e088      	b.n	800868e <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d067      	beq.n	8008656 <HAL_SAI_IRQHandler+0x326>
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d062      	beq.n	8008656 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2204      	movs	r2, #4
 8008596:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800859e:	f043 0220 	orr.w	r2, r3, #32
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d03c      	beq.n	800862c <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d018      	beq.n	80085ee <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085c2:	4a36      	ldr	r2, [pc, #216]	@ (800869c <HAL_SAI_IRQHandler+0x36c>)
 80085c4:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7f9 fe55 	bl	800227c <HAL_DMA_Abort_IT>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00a      	beq.n	80085ee <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f859 	bl	80086a0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d04c      	beq.n	8008692 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085fe:	4a27      	ldr	r2, [pc, #156]	@ (800869c <HAL_SAI_IRQHandler+0x36c>)
 8008600:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008608:	4618      	mov	r0, r3
 800860a:	f7f9 fe37 	bl	800227c <HAL_DMA_Abort_IT>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d03e      	beq.n	8008692 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800861a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f83b 	bl	80086a0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800862a:	e032      	b.n	8008692 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2200      	movs	r2, #0
 8008632:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800863c:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f826 	bl	80086a0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008654:	e01d      	b.n	8008692 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f003 0310 	and.w	r3, r3, #16
 800865c:	2b00      	cmp	r3, #0
 800865e:	d019      	beq.n	8008694 <HAL_SAI_IRQHandler+0x364>
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f003 0310 	and.w	r3, r3, #16
 8008666:	2b00      	cmp	r3, #0
 8008668:	d014      	beq.n	8008694 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2210      	movs	r2, #16
 8008670:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008678:	f043 0210 	orr.w	r2, r3, #16
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f80c 	bl	80086a0 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8008688:	e004      	b.n	8008694 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800868a:	bf00      	nop
 800868c:	e002      	b.n	8008694 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800868e:	bf00      	nop
 8008690:	e000      	b.n	8008694 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008692:	bf00      	nop
}
 8008694:	bf00      	nop
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	08008873 	.word	0x08008873

080086a0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d103      	bne.n	80086d2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f043 0308 	orr.w	r3, r3, #8
 80086d0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d6:	2b08      	cmp	r3, #8
 80086d8:	d10b      	bne.n	80086f2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d003      	beq.n	80086ea <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d103      	bne.n	80086f2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f043 0310 	orr.w	r3, r3, #16
 80086f0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d003      	beq.n	8008702 <SAI_InterruptFlag+0x4e>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d104      	bne.n	800870c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	e003      	b.n	8008714 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f043 0304 	orr.w	r3, r3, #4
 8008712:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008714:	68fb      	ldr	r3, [r7, #12]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
	...

08008724 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800872c:	4b18      	ldr	r3, [pc, #96]	@ (8008790 <SAI_Disable+0x6c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a18      	ldr	r2, [pc, #96]	@ (8008794 <SAI_Disable+0x70>)
 8008732:	fba2 2303 	umull	r2, r3, r2, r3
 8008736:	0b1b      	lsrs	r3, r3, #12
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800874e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800875c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	72fb      	strb	r3, [r7, #11]
      break;
 800876a:	e009      	b.n	8008780 <SAI_Disable+0x5c>
    }
    count--;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3b01      	subs	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e7      	bne.n	8008750 <SAI_Disable+0x2c>

  return status;
 8008780:	7afb      	ldrb	r3, [r7, #11]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	24000000 	.word	0x24000000
 8008794:	95cbec1b 	.word	0x95cbec1b

08008798 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ae:	d01c      	beq.n	80087ea <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80087be:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80087c8:	2100      	movs	r1, #0
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f7ff ff72 	bl	80086b4 <SAI_InterruptFlag>
 80087d0:	4603      	mov	r3, r0
 80087d2:	43d9      	mvns	r1, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691a      	ldr	r2, [r3, #16]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	400a      	ands	r2, r1
 80087e0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7f8 f8d4 	bl	8000998 <HAL_SAI_RxCpltCallback>
#endif
}
 80087f0:	bf00      	nop
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008804:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7f8 f8b6 	bl	8000978 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008820:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7fa fe9a 	bl	800355c <HAL_DMA_GetError>
 8008828:	4603      	mov	r3, r0
 800882a:	2b02      	cmp	r3, #2
 800882c:	d01d      	beq.n	800886a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008834:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800884c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f7ff ff68 	bl	8008724 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f7ff ff1b 	bl	80086a0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800886a:	bf00      	nop
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800888e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2200      	movs	r2, #0
 8008896:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088a0:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088a8:	2b20      	cmp	r3, #32
 80088aa:	d00a      	beq.n	80088c2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f7ff ff39 	bl	8008724 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0208 	orr.w	r2, r2, #8
 80088c0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7ff fee4 	bl	80086a0 <HAL_SAI_ErrorCallback>
#endif
}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <__cvt>:
 80088e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e2:	ed2d 8b02 	vpush	{d8}
 80088e6:	eeb0 8b40 	vmov.f64	d8, d0
 80088ea:	b085      	sub	sp, #20
 80088ec:	4617      	mov	r7, r2
 80088ee:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80088f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088f2:	ee18 2a90 	vmov	r2, s17
 80088f6:	f025 0520 	bic.w	r5, r5, #32
 80088fa:	2a00      	cmp	r2, #0
 80088fc:	bfb6      	itet	lt
 80088fe:	222d      	movlt	r2, #45	@ 0x2d
 8008900:	2200      	movge	r2, #0
 8008902:	eeb1 8b40 	vneglt.f64	d8, d0
 8008906:	2d46      	cmp	r5, #70	@ 0x46
 8008908:	460c      	mov	r4, r1
 800890a:	701a      	strb	r2, [r3, #0]
 800890c:	d004      	beq.n	8008918 <__cvt+0x38>
 800890e:	2d45      	cmp	r5, #69	@ 0x45
 8008910:	d100      	bne.n	8008914 <__cvt+0x34>
 8008912:	3401      	adds	r4, #1
 8008914:	2102      	movs	r1, #2
 8008916:	e000      	b.n	800891a <__cvt+0x3a>
 8008918:	2103      	movs	r1, #3
 800891a:	ab03      	add	r3, sp, #12
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	ab02      	add	r3, sp, #8
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	4622      	mov	r2, r4
 8008924:	4633      	mov	r3, r6
 8008926:	eeb0 0b48 	vmov.f64	d0, d8
 800892a:	f000 fd95 	bl	8009458 <_dtoa_r>
 800892e:	2d47      	cmp	r5, #71	@ 0x47
 8008930:	d114      	bne.n	800895c <__cvt+0x7c>
 8008932:	07fb      	lsls	r3, r7, #31
 8008934:	d50a      	bpl.n	800894c <__cvt+0x6c>
 8008936:	1902      	adds	r2, r0, r4
 8008938:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800893c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008940:	bf08      	it	eq
 8008942:	9203      	streq	r2, [sp, #12]
 8008944:	2130      	movs	r1, #48	@ 0x30
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	4293      	cmp	r3, r2
 800894a:	d319      	bcc.n	8008980 <__cvt+0xa0>
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008950:	1a1b      	subs	r3, r3, r0
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	b005      	add	sp, #20
 8008956:	ecbd 8b02 	vpop	{d8}
 800895a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800895c:	2d46      	cmp	r5, #70	@ 0x46
 800895e:	eb00 0204 	add.w	r2, r0, r4
 8008962:	d1e9      	bne.n	8008938 <__cvt+0x58>
 8008964:	7803      	ldrb	r3, [r0, #0]
 8008966:	2b30      	cmp	r3, #48	@ 0x30
 8008968:	d107      	bne.n	800897a <__cvt+0x9a>
 800896a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800896e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008972:	bf1c      	itt	ne
 8008974:	f1c4 0401 	rsbne	r4, r4, #1
 8008978:	6034      	strne	r4, [r6, #0]
 800897a:	6833      	ldr	r3, [r6, #0]
 800897c:	441a      	add	r2, r3
 800897e:	e7db      	b.n	8008938 <__cvt+0x58>
 8008980:	1c5c      	adds	r4, r3, #1
 8008982:	9403      	str	r4, [sp, #12]
 8008984:	7019      	strb	r1, [r3, #0]
 8008986:	e7de      	b.n	8008946 <__cvt+0x66>

08008988 <__exponent>:
 8008988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800898a:	2900      	cmp	r1, #0
 800898c:	bfba      	itte	lt
 800898e:	4249      	neglt	r1, r1
 8008990:	232d      	movlt	r3, #45	@ 0x2d
 8008992:	232b      	movge	r3, #43	@ 0x2b
 8008994:	2909      	cmp	r1, #9
 8008996:	7002      	strb	r2, [r0, #0]
 8008998:	7043      	strb	r3, [r0, #1]
 800899a:	dd29      	ble.n	80089f0 <__exponent+0x68>
 800899c:	f10d 0307 	add.w	r3, sp, #7
 80089a0:	461d      	mov	r5, r3
 80089a2:	270a      	movs	r7, #10
 80089a4:	461a      	mov	r2, r3
 80089a6:	fbb1 f6f7 	udiv	r6, r1, r7
 80089aa:	fb07 1416 	mls	r4, r7, r6, r1
 80089ae:	3430      	adds	r4, #48	@ 0x30
 80089b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80089b4:	460c      	mov	r4, r1
 80089b6:	2c63      	cmp	r4, #99	@ 0x63
 80089b8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80089bc:	4631      	mov	r1, r6
 80089be:	dcf1      	bgt.n	80089a4 <__exponent+0x1c>
 80089c0:	3130      	adds	r1, #48	@ 0x30
 80089c2:	1e94      	subs	r4, r2, #2
 80089c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80089c8:	1c41      	adds	r1, r0, #1
 80089ca:	4623      	mov	r3, r4
 80089cc:	42ab      	cmp	r3, r5
 80089ce:	d30a      	bcc.n	80089e6 <__exponent+0x5e>
 80089d0:	f10d 0309 	add.w	r3, sp, #9
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	42ac      	cmp	r4, r5
 80089d8:	bf88      	it	hi
 80089da:	2300      	movhi	r3, #0
 80089dc:	3302      	adds	r3, #2
 80089de:	4403      	add	r3, r0
 80089e0:	1a18      	subs	r0, r3, r0
 80089e2:	b003      	add	sp, #12
 80089e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80089ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 80089ee:	e7ed      	b.n	80089cc <__exponent+0x44>
 80089f0:	2330      	movs	r3, #48	@ 0x30
 80089f2:	3130      	adds	r1, #48	@ 0x30
 80089f4:	7083      	strb	r3, [r0, #2]
 80089f6:	70c1      	strb	r1, [r0, #3]
 80089f8:	1d03      	adds	r3, r0, #4
 80089fa:	e7f1      	b.n	80089e0 <__exponent+0x58>
 80089fc:	0000      	movs	r0, r0
	...

08008a00 <_printf_float>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	b08d      	sub	sp, #52	@ 0x34
 8008a06:	460c      	mov	r4, r1
 8008a08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008a0c:	4616      	mov	r6, r2
 8008a0e:	461f      	mov	r7, r3
 8008a10:	4605      	mov	r5, r0
 8008a12:	f000 fc93 	bl	800933c <_localeconv_r>
 8008a16:	f8d0 b000 	ldr.w	fp, [r0]
 8008a1a:	4658      	mov	r0, fp
 8008a1c:	f7f7 fcb0 	bl	8000380 <strlen>
 8008a20:	2300      	movs	r3, #0
 8008a22:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a24:	f8d8 3000 	ldr.w	r3, [r8]
 8008a28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008a2c:	6822      	ldr	r2, [r4, #0]
 8008a2e:	9005      	str	r0, [sp, #20]
 8008a30:	3307      	adds	r3, #7
 8008a32:	f023 0307 	bic.w	r3, r3, #7
 8008a36:	f103 0108 	add.w	r1, r3, #8
 8008a3a:	f8c8 1000 	str.w	r1, [r8]
 8008a3e:	ed93 0b00 	vldr	d0, [r3]
 8008a42:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008ca0 <_printf_float+0x2a0>
 8008a46:	eeb0 7bc0 	vabs.f64	d7, d0
 8008a4a:	eeb4 7b46 	vcmp.f64	d7, d6
 8008a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a52:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008a56:	dd24      	ble.n	8008aa2 <_printf_float+0xa2>
 8008a58:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a60:	d502      	bpl.n	8008a68 <_printf_float+0x68>
 8008a62:	232d      	movs	r3, #45	@ 0x2d
 8008a64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a68:	498f      	ldr	r1, [pc, #572]	@ (8008ca8 <_printf_float+0x2a8>)
 8008a6a:	4b90      	ldr	r3, [pc, #576]	@ (8008cac <_printf_float+0x2ac>)
 8008a6c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008a70:	bf8c      	ite	hi
 8008a72:	4688      	movhi	r8, r1
 8008a74:	4698      	movls	r8, r3
 8008a76:	f022 0204 	bic.w	r2, r2, #4
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	6123      	str	r3, [r4, #16]
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	f04f 0a00 	mov.w	sl, #0
 8008a84:	9700      	str	r7, [sp, #0]
 8008a86:	4633      	mov	r3, r6
 8008a88:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f000 f9d1 	bl	8008e34 <_printf_common>
 8008a92:	3001      	adds	r0, #1
 8008a94:	f040 8089 	bne.w	8008baa <_printf_float+0x1aa>
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a9c:	b00d      	add	sp, #52	@ 0x34
 8008a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa2:	eeb4 0b40 	vcmp.f64	d0, d0
 8008aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aaa:	d709      	bvc.n	8008ac0 <_printf_float+0xc0>
 8008aac:	ee10 3a90 	vmov	r3, s1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	bfbc      	itt	lt
 8008ab4:	232d      	movlt	r3, #45	@ 0x2d
 8008ab6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008aba:	497d      	ldr	r1, [pc, #500]	@ (8008cb0 <_printf_float+0x2b0>)
 8008abc:	4b7d      	ldr	r3, [pc, #500]	@ (8008cb4 <_printf_float+0x2b4>)
 8008abe:	e7d5      	b.n	8008a6c <_printf_float+0x6c>
 8008ac0:	6863      	ldr	r3, [r4, #4]
 8008ac2:	1c59      	adds	r1, r3, #1
 8008ac4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008ac8:	d139      	bne.n	8008b3e <_printf_float+0x13e>
 8008aca:	2306      	movs	r3, #6
 8008acc:	6063      	str	r3, [r4, #4]
 8008ace:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	6022      	str	r2, [r4, #0]
 8008ad6:	9303      	str	r3, [sp, #12]
 8008ad8:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ada:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008ade:	ab09      	add	r3, sp, #36	@ 0x24
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	6861      	ldr	r1, [r4, #4]
 8008ae4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f7ff fef9 	bl	80088e0 <__cvt>
 8008aee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008af2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008af4:	4680      	mov	r8, r0
 8008af6:	d129      	bne.n	8008b4c <_printf_float+0x14c>
 8008af8:	1cc8      	adds	r0, r1, #3
 8008afa:	db02      	blt.n	8008b02 <_printf_float+0x102>
 8008afc:	6863      	ldr	r3, [r4, #4]
 8008afe:	4299      	cmp	r1, r3
 8008b00:	dd41      	ble.n	8008b86 <_printf_float+0x186>
 8008b02:	f1a9 0902 	sub.w	r9, r9, #2
 8008b06:	fa5f f989 	uxtb.w	r9, r9
 8008b0a:	3901      	subs	r1, #1
 8008b0c:	464a      	mov	r2, r9
 8008b0e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008b12:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b14:	f7ff ff38 	bl	8008988 <__exponent>
 8008b18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b1a:	1813      	adds	r3, r2, r0
 8008b1c:	2a01      	cmp	r2, #1
 8008b1e:	4682      	mov	sl, r0
 8008b20:	6123      	str	r3, [r4, #16]
 8008b22:	dc02      	bgt.n	8008b2a <_printf_float+0x12a>
 8008b24:	6822      	ldr	r2, [r4, #0]
 8008b26:	07d2      	lsls	r2, r2, #31
 8008b28:	d501      	bpl.n	8008b2e <_printf_float+0x12e>
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	6123      	str	r3, [r4, #16]
 8008b2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0a6      	beq.n	8008a84 <_printf_float+0x84>
 8008b36:	232d      	movs	r3, #45	@ 0x2d
 8008b38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b3c:	e7a2      	b.n	8008a84 <_printf_float+0x84>
 8008b3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b42:	d1c4      	bne.n	8008ace <_printf_float+0xce>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1c2      	bne.n	8008ace <_printf_float+0xce>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e7bf      	b.n	8008acc <_printf_float+0xcc>
 8008b4c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008b50:	d9db      	bls.n	8008b0a <_printf_float+0x10a>
 8008b52:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008b56:	d118      	bne.n	8008b8a <_printf_float+0x18a>
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	6863      	ldr	r3, [r4, #4]
 8008b5c:	dd0b      	ble.n	8008b76 <_printf_float+0x176>
 8008b5e:	6121      	str	r1, [r4, #16]
 8008b60:	b913      	cbnz	r3, 8008b68 <_printf_float+0x168>
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	07d0      	lsls	r0, r2, #31
 8008b66:	d502      	bpl.n	8008b6e <_printf_float+0x16e>
 8008b68:	3301      	adds	r3, #1
 8008b6a:	440b      	add	r3, r1
 8008b6c:	6123      	str	r3, [r4, #16]
 8008b6e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b70:	f04f 0a00 	mov.w	sl, #0
 8008b74:	e7db      	b.n	8008b2e <_printf_float+0x12e>
 8008b76:	b913      	cbnz	r3, 8008b7e <_printf_float+0x17e>
 8008b78:	6822      	ldr	r2, [r4, #0]
 8008b7a:	07d2      	lsls	r2, r2, #31
 8008b7c:	d501      	bpl.n	8008b82 <_printf_float+0x182>
 8008b7e:	3302      	adds	r3, #2
 8008b80:	e7f4      	b.n	8008b6c <_printf_float+0x16c>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e7f2      	b.n	8008b6c <_printf_float+0x16c>
 8008b86:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008b8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b8c:	4299      	cmp	r1, r3
 8008b8e:	db05      	blt.n	8008b9c <_printf_float+0x19c>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	6121      	str	r1, [r4, #16]
 8008b94:	07d8      	lsls	r0, r3, #31
 8008b96:	d5ea      	bpl.n	8008b6e <_printf_float+0x16e>
 8008b98:	1c4b      	adds	r3, r1, #1
 8008b9a:	e7e7      	b.n	8008b6c <_printf_float+0x16c>
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	bfd4      	ite	le
 8008ba0:	f1c1 0202 	rsble	r2, r1, #2
 8008ba4:	2201      	movgt	r2, #1
 8008ba6:	4413      	add	r3, r2
 8008ba8:	e7e0      	b.n	8008b6c <_printf_float+0x16c>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	055a      	lsls	r2, r3, #21
 8008bae:	d407      	bmi.n	8008bc0 <_printf_float+0x1c0>
 8008bb0:	6923      	ldr	r3, [r4, #16]
 8008bb2:	4642      	mov	r2, r8
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b8      	blx	r7
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d12a      	bne.n	8008c14 <_printf_float+0x214>
 8008bbe:	e76b      	b.n	8008a98 <_printf_float+0x98>
 8008bc0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008bc4:	f240 80e0 	bls.w	8008d88 <_printf_float+0x388>
 8008bc8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008bcc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd4:	d133      	bne.n	8008c3e <_printf_float+0x23e>
 8008bd6:	4a38      	ldr	r2, [pc, #224]	@ (8008cb8 <_printf_float+0x2b8>)
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b8      	blx	r7
 8008be0:	3001      	adds	r0, #1
 8008be2:	f43f af59 	beq.w	8008a98 <_printf_float+0x98>
 8008be6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008bea:	4543      	cmp	r3, r8
 8008bec:	db02      	blt.n	8008bf4 <_printf_float+0x1f4>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	07d8      	lsls	r0, r3, #31
 8008bf2:	d50f      	bpl.n	8008c14 <_printf_float+0x214>
 8008bf4:	9b05      	ldr	r3, [sp, #20]
 8008bf6:	465a      	mov	r2, fp
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f af4a 	beq.w	8008a98 <_printf_float+0x98>
 8008c04:	f04f 0900 	mov.w	r9, #0
 8008c08:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008c0c:	f104 0a1a 	add.w	sl, r4, #26
 8008c10:	45c8      	cmp	r8, r9
 8008c12:	dc09      	bgt.n	8008c28 <_printf_float+0x228>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	079b      	lsls	r3, r3, #30
 8008c18:	f100 8107 	bmi.w	8008e2a <_printf_float+0x42a>
 8008c1c:	68e0      	ldr	r0, [r4, #12]
 8008c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c20:	4298      	cmp	r0, r3
 8008c22:	bfb8      	it	lt
 8008c24:	4618      	movlt	r0, r3
 8008c26:	e739      	b.n	8008a9c <_printf_float+0x9c>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4652      	mov	r2, sl
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4628      	mov	r0, r5
 8008c30:	47b8      	blx	r7
 8008c32:	3001      	adds	r0, #1
 8008c34:	f43f af30 	beq.w	8008a98 <_printf_float+0x98>
 8008c38:	f109 0901 	add.w	r9, r9, #1
 8008c3c:	e7e8      	b.n	8008c10 <_printf_float+0x210>
 8008c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	dc3b      	bgt.n	8008cbc <_printf_float+0x2bc>
 8008c44:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb8 <_printf_float+0x2b8>)
 8008c46:	2301      	movs	r3, #1
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	47b8      	blx	r7
 8008c4e:	3001      	adds	r0, #1
 8008c50:	f43f af22 	beq.w	8008a98 <_printf_float+0x98>
 8008c54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008c58:	ea59 0303 	orrs.w	r3, r9, r3
 8008c5c:	d102      	bne.n	8008c64 <_printf_float+0x264>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	07d9      	lsls	r1, r3, #31
 8008c62:	d5d7      	bpl.n	8008c14 <_printf_float+0x214>
 8008c64:	9b05      	ldr	r3, [sp, #20]
 8008c66:	465a      	mov	r2, fp
 8008c68:	4631      	mov	r1, r6
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	47b8      	blx	r7
 8008c6e:	3001      	adds	r0, #1
 8008c70:	f43f af12 	beq.w	8008a98 <_printf_float+0x98>
 8008c74:	f04f 0a00 	mov.w	sl, #0
 8008c78:	f104 0b1a 	add.w	fp, r4, #26
 8008c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c7e:	425b      	negs	r3, r3
 8008c80:	4553      	cmp	r3, sl
 8008c82:	dc01      	bgt.n	8008c88 <_printf_float+0x288>
 8008c84:	464b      	mov	r3, r9
 8008c86:	e794      	b.n	8008bb2 <_printf_float+0x1b2>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	465a      	mov	r2, fp
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4628      	mov	r0, r5
 8008c90:	47b8      	blx	r7
 8008c92:	3001      	adds	r0, #1
 8008c94:	f43f af00 	beq.w	8008a98 <_printf_float+0x98>
 8008c98:	f10a 0a01 	add.w	sl, sl, #1
 8008c9c:	e7ee      	b.n	8008c7c <_printf_float+0x27c>
 8008c9e:	bf00      	nop
 8008ca0:	ffffffff 	.word	0xffffffff
 8008ca4:	7fefffff 	.word	0x7fefffff
 8008ca8:	0800b0f4 	.word	0x0800b0f4
 8008cac:	0800b0f0 	.word	0x0800b0f0
 8008cb0:	0800b0fc 	.word	0x0800b0fc
 8008cb4:	0800b0f8 	.word	0x0800b0f8
 8008cb8:	0800b100 	.word	0x0800b100
 8008cbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008cbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008cc2:	4553      	cmp	r3, sl
 8008cc4:	bfa8      	it	ge
 8008cc6:	4653      	movge	r3, sl
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	4699      	mov	r9, r3
 8008ccc:	dc37      	bgt.n	8008d3e <_printf_float+0x33e>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9307      	str	r3, [sp, #28]
 8008cd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cd6:	f104 021a 	add.w	r2, r4, #26
 8008cda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008cdc:	9907      	ldr	r1, [sp, #28]
 8008cde:	9306      	str	r3, [sp, #24]
 8008ce0:	eba3 0309 	sub.w	r3, r3, r9
 8008ce4:	428b      	cmp	r3, r1
 8008ce6:	dc31      	bgt.n	8008d4c <_printf_float+0x34c>
 8008ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cea:	459a      	cmp	sl, r3
 8008cec:	dc3b      	bgt.n	8008d66 <_printf_float+0x366>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	07da      	lsls	r2, r3, #31
 8008cf2:	d438      	bmi.n	8008d66 <_printf_float+0x366>
 8008cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf6:	ebaa 0903 	sub.w	r9, sl, r3
 8008cfa:	9b06      	ldr	r3, [sp, #24]
 8008cfc:	ebaa 0303 	sub.w	r3, sl, r3
 8008d00:	4599      	cmp	r9, r3
 8008d02:	bfa8      	it	ge
 8008d04:	4699      	movge	r9, r3
 8008d06:	f1b9 0f00 	cmp.w	r9, #0
 8008d0a:	dc34      	bgt.n	8008d76 <_printf_float+0x376>
 8008d0c:	f04f 0800 	mov.w	r8, #0
 8008d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d14:	f104 0b1a 	add.w	fp, r4, #26
 8008d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1a:	ebaa 0303 	sub.w	r3, sl, r3
 8008d1e:	eba3 0309 	sub.w	r3, r3, r9
 8008d22:	4543      	cmp	r3, r8
 8008d24:	f77f af76 	ble.w	8008c14 <_printf_float+0x214>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	465a      	mov	r2, fp
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	f43f aeb0 	beq.w	8008a98 <_printf_float+0x98>
 8008d38:	f108 0801 	add.w	r8, r8, #1
 8008d3c:	e7ec      	b.n	8008d18 <_printf_float+0x318>
 8008d3e:	4642      	mov	r2, r8
 8008d40:	4631      	mov	r1, r6
 8008d42:	4628      	mov	r0, r5
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	d1c1      	bne.n	8008cce <_printf_float+0x2ce>
 8008d4a:	e6a5      	b.n	8008a98 <_printf_float+0x98>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4628      	mov	r0, r5
 8008d52:	9206      	str	r2, [sp, #24]
 8008d54:	47b8      	blx	r7
 8008d56:	3001      	adds	r0, #1
 8008d58:	f43f ae9e 	beq.w	8008a98 <_printf_float+0x98>
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	9a06      	ldr	r2, [sp, #24]
 8008d60:	3301      	adds	r3, #1
 8008d62:	9307      	str	r3, [sp, #28]
 8008d64:	e7b9      	b.n	8008cda <_printf_float+0x2da>
 8008d66:	9b05      	ldr	r3, [sp, #20]
 8008d68:	465a      	mov	r2, fp
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	47b8      	blx	r7
 8008d70:	3001      	adds	r0, #1
 8008d72:	d1bf      	bne.n	8008cf4 <_printf_float+0x2f4>
 8008d74:	e690      	b.n	8008a98 <_printf_float+0x98>
 8008d76:	9a06      	ldr	r2, [sp, #24]
 8008d78:	464b      	mov	r3, r9
 8008d7a:	4442      	add	r2, r8
 8008d7c:	4631      	mov	r1, r6
 8008d7e:	4628      	mov	r0, r5
 8008d80:	47b8      	blx	r7
 8008d82:	3001      	adds	r0, #1
 8008d84:	d1c2      	bne.n	8008d0c <_printf_float+0x30c>
 8008d86:	e687      	b.n	8008a98 <_printf_float+0x98>
 8008d88:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008d8c:	f1b9 0f01 	cmp.w	r9, #1
 8008d90:	dc01      	bgt.n	8008d96 <_printf_float+0x396>
 8008d92:	07db      	lsls	r3, r3, #31
 8008d94:	d536      	bpl.n	8008e04 <_printf_float+0x404>
 8008d96:	2301      	movs	r3, #1
 8008d98:	4642      	mov	r2, r8
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	47b8      	blx	r7
 8008da0:	3001      	adds	r0, #1
 8008da2:	f43f ae79 	beq.w	8008a98 <_printf_float+0x98>
 8008da6:	9b05      	ldr	r3, [sp, #20]
 8008da8:	465a      	mov	r2, fp
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b8      	blx	r7
 8008db0:	3001      	adds	r0, #1
 8008db2:	f43f ae71 	beq.w	8008a98 <_printf_float+0x98>
 8008db6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008dba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008dc6:	d018      	beq.n	8008dfa <_printf_float+0x3fa>
 8008dc8:	464b      	mov	r3, r9
 8008dca:	f108 0201 	add.w	r2, r8, #1
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d10c      	bne.n	8008df2 <_printf_float+0x3f2>
 8008dd8:	e65e      	b.n	8008a98 <_printf_float+0x98>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	465a      	mov	r2, fp
 8008dde:	4631      	mov	r1, r6
 8008de0:	4628      	mov	r0, r5
 8008de2:	47b8      	blx	r7
 8008de4:	3001      	adds	r0, #1
 8008de6:	f43f ae57 	beq.w	8008a98 <_printf_float+0x98>
 8008dea:	f108 0801 	add.w	r8, r8, #1
 8008dee:	45c8      	cmp	r8, r9
 8008df0:	dbf3      	blt.n	8008dda <_printf_float+0x3da>
 8008df2:	4653      	mov	r3, sl
 8008df4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008df8:	e6dc      	b.n	8008bb4 <_printf_float+0x1b4>
 8008dfa:	f04f 0800 	mov.w	r8, #0
 8008dfe:	f104 0b1a 	add.w	fp, r4, #26
 8008e02:	e7f4      	b.n	8008dee <_printf_float+0x3ee>
 8008e04:	2301      	movs	r3, #1
 8008e06:	4642      	mov	r2, r8
 8008e08:	e7e1      	b.n	8008dce <_printf_float+0x3ce>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	464a      	mov	r2, r9
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4628      	mov	r0, r5
 8008e12:	47b8      	blx	r7
 8008e14:	3001      	adds	r0, #1
 8008e16:	f43f ae3f 	beq.w	8008a98 <_printf_float+0x98>
 8008e1a:	f108 0801 	add.w	r8, r8, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	4543      	cmp	r3, r8
 8008e26:	dcf0      	bgt.n	8008e0a <_printf_float+0x40a>
 8008e28:	e6f8      	b.n	8008c1c <_printf_float+0x21c>
 8008e2a:	f04f 0800 	mov.w	r8, #0
 8008e2e:	f104 0919 	add.w	r9, r4, #25
 8008e32:	e7f4      	b.n	8008e1e <_printf_float+0x41e>

08008e34 <_printf_common>:
 8008e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	4616      	mov	r6, r2
 8008e3a:	4698      	mov	r8, r3
 8008e3c:	688a      	ldr	r2, [r1, #8]
 8008e3e:	690b      	ldr	r3, [r1, #16]
 8008e40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e44:	4293      	cmp	r3, r2
 8008e46:	bfb8      	it	lt
 8008e48:	4613      	movlt	r3, r2
 8008e4a:	6033      	str	r3, [r6, #0]
 8008e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e50:	4607      	mov	r7, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	b10a      	cbz	r2, 8008e5a <_printf_common+0x26>
 8008e56:	3301      	adds	r3, #1
 8008e58:	6033      	str	r3, [r6, #0]
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	0699      	lsls	r1, r3, #26
 8008e5e:	bf42      	ittt	mi
 8008e60:	6833      	ldrmi	r3, [r6, #0]
 8008e62:	3302      	addmi	r3, #2
 8008e64:	6033      	strmi	r3, [r6, #0]
 8008e66:	6825      	ldr	r5, [r4, #0]
 8008e68:	f015 0506 	ands.w	r5, r5, #6
 8008e6c:	d106      	bne.n	8008e7c <_printf_common+0x48>
 8008e6e:	f104 0a19 	add.w	sl, r4, #25
 8008e72:	68e3      	ldr	r3, [r4, #12]
 8008e74:	6832      	ldr	r2, [r6, #0]
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	42ab      	cmp	r3, r5
 8008e7a:	dc26      	bgt.n	8008eca <_printf_common+0x96>
 8008e7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e80:	6822      	ldr	r2, [r4, #0]
 8008e82:	3b00      	subs	r3, #0
 8008e84:	bf18      	it	ne
 8008e86:	2301      	movne	r3, #1
 8008e88:	0692      	lsls	r2, r2, #26
 8008e8a:	d42b      	bmi.n	8008ee4 <_printf_common+0xb0>
 8008e8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e90:	4641      	mov	r1, r8
 8008e92:	4638      	mov	r0, r7
 8008e94:	47c8      	blx	r9
 8008e96:	3001      	adds	r0, #1
 8008e98:	d01e      	beq.n	8008ed8 <_printf_common+0xa4>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	6922      	ldr	r2, [r4, #16]
 8008e9e:	f003 0306 	and.w	r3, r3, #6
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	bf02      	ittt	eq
 8008ea6:	68e5      	ldreq	r5, [r4, #12]
 8008ea8:	6833      	ldreq	r3, [r6, #0]
 8008eaa:	1aed      	subeq	r5, r5, r3
 8008eac:	68a3      	ldr	r3, [r4, #8]
 8008eae:	bf0c      	ite	eq
 8008eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb4:	2500      	movne	r5, #0
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	bfc4      	itt	gt
 8008eba:	1a9b      	subgt	r3, r3, r2
 8008ebc:	18ed      	addgt	r5, r5, r3
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	341a      	adds	r4, #26
 8008ec2:	42b5      	cmp	r5, r6
 8008ec4:	d11a      	bne.n	8008efc <_printf_common+0xc8>
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e008      	b.n	8008edc <_printf_common+0xa8>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	4652      	mov	r2, sl
 8008ece:	4641      	mov	r1, r8
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	47c8      	blx	r9
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d103      	bne.n	8008ee0 <_printf_common+0xac>
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	e7c6      	b.n	8008e72 <_printf_common+0x3e>
 8008ee4:	18e1      	adds	r1, r4, r3
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	2030      	movs	r0, #48	@ 0x30
 8008eea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008eee:	4422      	add	r2, r4
 8008ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ef4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ef8:	3302      	adds	r3, #2
 8008efa:	e7c7      	b.n	8008e8c <_printf_common+0x58>
 8008efc:	2301      	movs	r3, #1
 8008efe:	4622      	mov	r2, r4
 8008f00:	4641      	mov	r1, r8
 8008f02:	4638      	mov	r0, r7
 8008f04:	47c8      	blx	r9
 8008f06:	3001      	adds	r0, #1
 8008f08:	d0e6      	beq.n	8008ed8 <_printf_common+0xa4>
 8008f0a:	3601      	adds	r6, #1
 8008f0c:	e7d9      	b.n	8008ec2 <_printf_common+0x8e>
	...

08008f10 <_printf_i>:
 8008f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f14:	7e0f      	ldrb	r7, [r1, #24]
 8008f16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f18:	2f78      	cmp	r7, #120	@ 0x78
 8008f1a:	4691      	mov	r9, r2
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	469a      	mov	sl, r3
 8008f22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f26:	d807      	bhi.n	8008f38 <_printf_i+0x28>
 8008f28:	2f62      	cmp	r7, #98	@ 0x62
 8008f2a:	d80a      	bhi.n	8008f42 <_printf_i+0x32>
 8008f2c:	2f00      	cmp	r7, #0
 8008f2e:	f000 80d1 	beq.w	80090d4 <_printf_i+0x1c4>
 8008f32:	2f58      	cmp	r7, #88	@ 0x58
 8008f34:	f000 80b8 	beq.w	80090a8 <_printf_i+0x198>
 8008f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f40:	e03a      	b.n	8008fb8 <_printf_i+0xa8>
 8008f42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f46:	2b15      	cmp	r3, #21
 8008f48:	d8f6      	bhi.n	8008f38 <_printf_i+0x28>
 8008f4a:	a101      	add	r1, pc, #4	@ (adr r1, 8008f50 <_printf_i+0x40>)
 8008f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f50:	08008fa9 	.word	0x08008fa9
 8008f54:	08008fbd 	.word	0x08008fbd
 8008f58:	08008f39 	.word	0x08008f39
 8008f5c:	08008f39 	.word	0x08008f39
 8008f60:	08008f39 	.word	0x08008f39
 8008f64:	08008f39 	.word	0x08008f39
 8008f68:	08008fbd 	.word	0x08008fbd
 8008f6c:	08008f39 	.word	0x08008f39
 8008f70:	08008f39 	.word	0x08008f39
 8008f74:	08008f39 	.word	0x08008f39
 8008f78:	08008f39 	.word	0x08008f39
 8008f7c:	080090bb 	.word	0x080090bb
 8008f80:	08008fe7 	.word	0x08008fe7
 8008f84:	08009075 	.word	0x08009075
 8008f88:	08008f39 	.word	0x08008f39
 8008f8c:	08008f39 	.word	0x08008f39
 8008f90:	080090dd 	.word	0x080090dd
 8008f94:	08008f39 	.word	0x08008f39
 8008f98:	08008fe7 	.word	0x08008fe7
 8008f9c:	08008f39 	.word	0x08008f39
 8008fa0:	08008f39 	.word	0x08008f39
 8008fa4:	0800907d 	.word	0x0800907d
 8008fa8:	6833      	ldr	r3, [r6, #0]
 8008faa:	1d1a      	adds	r2, r3, #4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6032      	str	r2, [r6, #0]
 8008fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e09c      	b.n	80090f6 <_printf_i+0x1e6>
 8008fbc:	6833      	ldr	r3, [r6, #0]
 8008fbe:	6820      	ldr	r0, [r4, #0]
 8008fc0:	1d19      	adds	r1, r3, #4
 8008fc2:	6031      	str	r1, [r6, #0]
 8008fc4:	0606      	lsls	r6, r0, #24
 8008fc6:	d501      	bpl.n	8008fcc <_printf_i+0xbc>
 8008fc8:	681d      	ldr	r5, [r3, #0]
 8008fca:	e003      	b.n	8008fd4 <_printf_i+0xc4>
 8008fcc:	0645      	lsls	r5, r0, #25
 8008fce:	d5fb      	bpl.n	8008fc8 <_printf_i+0xb8>
 8008fd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	da03      	bge.n	8008fe0 <_printf_i+0xd0>
 8008fd8:	232d      	movs	r3, #45	@ 0x2d
 8008fda:	426d      	negs	r5, r5
 8008fdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fe0:	4858      	ldr	r0, [pc, #352]	@ (8009144 <_printf_i+0x234>)
 8008fe2:	230a      	movs	r3, #10
 8008fe4:	e011      	b.n	800900a <_printf_i+0xfa>
 8008fe6:	6821      	ldr	r1, [r4, #0]
 8008fe8:	6833      	ldr	r3, [r6, #0]
 8008fea:	0608      	lsls	r0, r1, #24
 8008fec:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ff0:	d402      	bmi.n	8008ff8 <_printf_i+0xe8>
 8008ff2:	0649      	lsls	r1, r1, #25
 8008ff4:	bf48      	it	mi
 8008ff6:	b2ad      	uxthmi	r5, r5
 8008ff8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ffa:	4852      	ldr	r0, [pc, #328]	@ (8009144 <_printf_i+0x234>)
 8008ffc:	6033      	str	r3, [r6, #0]
 8008ffe:	bf14      	ite	ne
 8009000:	230a      	movne	r3, #10
 8009002:	2308      	moveq	r3, #8
 8009004:	2100      	movs	r1, #0
 8009006:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800900a:	6866      	ldr	r6, [r4, #4]
 800900c:	60a6      	str	r6, [r4, #8]
 800900e:	2e00      	cmp	r6, #0
 8009010:	db05      	blt.n	800901e <_printf_i+0x10e>
 8009012:	6821      	ldr	r1, [r4, #0]
 8009014:	432e      	orrs	r6, r5
 8009016:	f021 0104 	bic.w	r1, r1, #4
 800901a:	6021      	str	r1, [r4, #0]
 800901c:	d04b      	beq.n	80090b6 <_printf_i+0x1a6>
 800901e:	4616      	mov	r6, r2
 8009020:	fbb5 f1f3 	udiv	r1, r5, r3
 8009024:	fb03 5711 	mls	r7, r3, r1, r5
 8009028:	5dc7      	ldrb	r7, [r0, r7]
 800902a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800902e:	462f      	mov	r7, r5
 8009030:	42bb      	cmp	r3, r7
 8009032:	460d      	mov	r5, r1
 8009034:	d9f4      	bls.n	8009020 <_printf_i+0x110>
 8009036:	2b08      	cmp	r3, #8
 8009038:	d10b      	bne.n	8009052 <_printf_i+0x142>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	07df      	lsls	r7, r3, #31
 800903e:	d508      	bpl.n	8009052 <_printf_i+0x142>
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	6861      	ldr	r1, [r4, #4]
 8009044:	4299      	cmp	r1, r3
 8009046:	bfde      	ittt	le
 8009048:	2330      	movle	r3, #48	@ 0x30
 800904a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800904e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009052:	1b92      	subs	r2, r2, r6
 8009054:	6122      	str	r2, [r4, #16]
 8009056:	f8cd a000 	str.w	sl, [sp]
 800905a:	464b      	mov	r3, r9
 800905c:	aa03      	add	r2, sp, #12
 800905e:	4621      	mov	r1, r4
 8009060:	4640      	mov	r0, r8
 8009062:	f7ff fee7 	bl	8008e34 <_printf_common>
 8009066:	3001      	adds	r0, #1
 8009068:	d14a      	bne.n	8009100 <_printf_i+0x1f0>
 800906a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800906e:	b004      	add	sp, #16
 8009070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	f043 0320 	orr.w	r3, r3, #32
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	4832      	ldr	r0, [pc, #200]	@ (8009148 <_printf_i+0x238>)
 800907e:	2778      	movs	r7, #120	@ 0x78
 8009080:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	6831      	ldr	r1, [r6, #0]
 8009088:	061f      	lsls	r7, r3, #24
 800908a:	f851 5b04 	ldr.w	r5, [r1], #4
 800908e:	d402      	bmi.n	8009096 <_printf_i+0x186>
 8009090:	065f      	lsls	r7, r3, #25
 8009092:	bf48      	it	mi
 8009094:	b2ad      	uxthmi	r5, r5
 8009096:	6031      	str	r1, [r6, #0]
 8009098:	07d9      	lsls	r1, r3, #31
 800909a:	bf44      	itt	mi
 800909c:	f043 0320 	orrmi.w	r3, r3, #32
 80090a0:	6023      	strmi	r3, [r4, #0]
 80090a2:	b11d      	cbz	r5, 80090ac <_printf_i+0x19c>
 80090a4:	2310      	movs	r3, #16
 80090a6:	e7ad      	b.n	8009004 <_printf_i+0xf4>
 80090a8:	4826      	ldr	r0, [pc, #152]	@ (8009144 <_printf_i+0x234>)
 80090aa:	e7e9      	b.n	8009080 <_printf_i+0x170>
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	f023 0320 	bic.w	r3, r3, #32
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	e7f6      	b.n	80090a4 <_printf_i+0x194>
 80090b6:	4616      	mov	r6, r2
 80090b8:	e7bd      	b.n	8009036 <_printf_i+0x126>
 80090ba:	6833      	ldr	r3, [r6, #0]
 80090bc:	6825      	ldr	r5, [r4, #0]
 80090be:	6961      	ldr	r1, [r4, #20]
 80090c0:	1d18      	adds	r0, r3, #4
 80090c2:	6030      	str	r0, [r6, #0]
 80090c4:	062e      	lsls	r6, r5, #24
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	d501      	bpl.n	80090ce <_printf_i+0x1be>
 80090ca:	6019      	str	r1, [r3, #0]
 80090cc:	e002      	b.n	80090d4 <_printf_i+0x1c4>
 80090ce:	0668      	lsls	r0, r5, #25
 80090d0:	d5fb      	bpl.n	80090ca <_printf_i+0x1ba>
 80090d2:	8019      	strh	r1, [r3, #0]
 80090d4:	2300      	movs	r3, #0
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	4616      	mov	r6, r2
 80090da:	e7bc      	b.n	8009056 <_printf_i+0x146>
 80090dc:	6833      	ldr	r3, [r6, #0]
 80090de:	1d1a      	adds	r2, r3, #4
 80090e0:	6032      	str	r2, [r6, #0]
 80090e2:	681e      	ldr	r6, [r3, #0]
 80090e4:	6862      	ldr	r2, [r4, #4]
 80090e6:	2100      	movs	r1, #0
 80090e8:	4630      	mov	r0, r6
 80090ea:	f7f7 f8f9 	bl	80002e0 <memchr>
 80090ee:	b108      	cbz	r0, 80090f4 <_printf_i+0x1e4>
 80090f0:	1b80      	subs	r0, r0, r6
 80090f2:	6060      	str	r0, [r4, #4]
 80090f4:	6863      	ldr	r3, [r4, #4]
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	2300      	movs	r3, #0
 80090fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090fe:	e7aa      	b.n	8009056 <_printf_i+0x146>
 8009100:	6923      	ldr	r3, [r4, #16]
 8009102:	4632      	mov	r2, r6
 8009104:	4649      	mov	r1, r9
 8009106:	4640      	mov	r0, r8
 8009108:	47d0      	blx	sl
 800910a:	3001      	adds	r0, #1
 800910c:	d0ad      	beq.n	800906a <_printf_i+0x15a>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	079b      	lsls	r3, r3, #30
 8009112:	d413      	bmi.n	800913c <_printf_i+0x22c>
 8009114:	68e0      	ldr	r0, [r4, #12]
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	4298      	cmp	r0, r3
 800911a:	bfb8      	it	lt
 800911c:	4618      	movlt	r0, r3
 800911e:	e7a6      	b.n	800906e <_printf_i+0x15e>
 8009120:	2301      	movs	r3, #1
 8009122:	4632      	mov	r2, r6
 8009124:	4649      	mov	r1, r9
 8009126:	4640      	mov	r0, r8
 8009128:	47d0      	blx	sl
 800912a:	3001      	adds	r0, #1
 800912c:	d09d      	beq.n	800906a <_printf_i+0x15a>
 800912e:	3501      	adds	r5, #1
 8009130:	68e3      	ldr	r3, [r4, #12]
 8009132:	9903      	ldr	r1, [sp, #12]
 8009134:	1a5b      	subs	r3, r3, r1
 8009136:	42ab      	cmp	r3, r5
 8009138:	dcf2      	bgt.n	8009120 <_printf_i+0x210>
 800913a:	e7eb      	b.n	8009114 <_printf_i+0x204>
 800913c:	2500      	movs	r5, #0
 800913e:	f104 0619 	add.w	r6, r4, #25
 8009142:	e7f5      	b.n	8009130 <_printf_i+0x220>
 8009144:	0800b102 	.word	0x0800b102
 8009148:	0800b113 	.word	0x0800b113

0800914c <std>:
 800914c:	2300      	movs	r3, #0
 800914e:	b510      	push	{r4, lr}
 8009150:	4604      	mov	r4, r0
 8009152:	e9c0 3300 	strd	r3, r3, [r0]
 8009156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800915a:	6083      	str	r3, [r0, #8]
 800915c:	8181      	strh	r1, [r0, #12]
 800915e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009160:	81c2      	strh	r2, [r0, #14]
 8009162:	6183      	str	r3, [r0, #24]
 8009164:	4619      	mov	r1, r3
 8009166:	2208      	movs	r2, #8
 8009168:	305c      	adds	r0, #92	@ 0x5c
 800916a:	f000 f8b1 	bl	80092d0 <memset>
 800916e:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <std+0x58>)
 8009170:	6263      	str	r3, [r4, #36]	@ 0x24
 8009172:	4b0d      	ldr	r3, [pc, #52]	@ (80091a8 <std+0x5c>)
 8009174:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009176:	4b0d      	ldr	r3, [pc, #52]	@ (80091ac <std+0x60>)
 8009178:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800917a:	4b0d      	ldr	r3, [pc, #52]	@ (80091b0 <std+0x64>)
 800917c:	6323      	str	r3, [r4, #48]	@ 0x30
 800917e:	4b0d      	ldr	r3, [pc, #52]	@ (80091b4 <std+0x68>)
 8009180:	6224      	str	r4, [r4, #32]
 8009182:	429c      	cmp	r4, r3
 8009184:	d006      	beq.n	8009194 <std+0x48>
 8009186:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800918a:	4294      	cmp	r4, r2
 800918c:	d002      	beq.n	8009194 <std+0x48>
 800918e:	33d0      	adds	r3, #208	@ 0xd0
 8009190:	429c      	cmp	r4, r3
 8009192:	d105      	bne.n	80091a0 <std+0x54>
 8009194:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800919c:	f000 b8ca 	b.w	8009334 <__retarget_lock_init_recursive>
 80091a0:	bd10      	pop	{r4, pc}
 80091a2:	bf00      	nop
 80091a4:	0800a8cd 	.word	0x0800a8cd
 80091a8:	0800a8ef 	.word	0x0800a8ef
 80091ac:	0800a927 	.word	0x0800a927
 80091b0:	0800a94b 	.word	0x0800a94b
 80091b4:	240005a8 	.word	0x240005a8

080091b8 <stdio_exit_handler>:
 80091b8:	4a02      	ldr	r2, [pc, #8]	@ (80091c4 <stdio_exit_handler+0xc>)
 80091ba:	4903      	ldr	r1, [pc, #12]	@ (80091c8 <stdio_exit_handler+0x10>)
 80091bc:	4803      	ldr	r0, [pc, #12]	@ (80091cc <stdio_exit_handler+0x14>)
 80091be:	f000 b869 	b.w	8009294 <_fwalk_sglue>
 80091c2:	bf00      	nop
 80091c4:	24000010 	.word	0x24000010
 80091c8:	0800a171 	.word	0x0800a171
 80091cc:	24000020 	.word	0x24000020

080091d0 <cleanup_stdio>:
 80091d0:	6841      	ldr	r1, [r0, #4]
 80091d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009204 <cleanup_stdio+0x34>)
 80091d4:	4299      	cmp	r1, r3
 80091d6:	b510      	push	{r4, lr}
 80091d8:	4604      	mov	r4, r0
 80091da:	d001      	beq.n	80091e0 <cleanup_stdio+0x10>
 80091dc:	f000 ffc8 	bl	800a170 <_fflush_r>
 80091e0:	68a1      	ldr	r1, [r4, #8]
 80091e2:	4b09      	ldr	r3, [pc, #36]	@ (8009208 <cleanup_stdio+0x38>)
 80091e4:	4299      	cmp	r1, r3
 80091e6:	d002      	beq.n	80091ee <cleanup_stdio+0x1e>
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 ffc1 	bl	800a170 <_fflush_r>
 80091ee:	68e1      	ldr	r1, [r4, #12]
 80091f0:	4b06      	ldr	r3, [pc, #24]	@ (800920c <cleanup_stdio+0x3c>)
 80091f2:	4299      	cmp	r1, r3
 80091f4:	d004      	beq.n	8009200 <cleanup_stdio+0x30>
 80091f6:	4620      	mov	r0, r4
 80091f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091fc:	f000 bfb8 	b.w	800a170 <_fflush_r>
 8009200:	bd10      	pop	{r4, pc}
 8009202:	bf00      	nop
 8009204:	240005a8 	.word	0x240005a8
 8009208:	24000610 	.word	0x24000610
 800920c:	24000678 	.word	0x24000678

08009210 <global_stdio_init.part.0>:
 8009210:	b510      	push	{r4, lr}
 8009212:	4b0b      	ldr	r3, [pc, #44]	@ (8009240 <global_stdio_init.part.0+0x30>)
 8009214:	4c0b      	ldr	r4, [pc, #44]	@ (8009244 <global_stdio_init.part.0+0x34>)
 8009216:	4a0c      	ldr	r2, [pc, #48]	@ (8009248 <global_stdio_init.part.0+0x38>)
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	4620      	mov	r0, r4
 800921c:	2200      	movs	r2, #0
 800921e:	2104      	movs	r1, #4
 8009220:	f7ff ff94 	bl	800914c <std>
 8009224:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009228:	2201      	movs	r2, #1
 800922a:	2109      	movs	r1, #9
 800922c:	f7ff ff8e 	bl	800914c <std>
 8009230:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009234:	2202      	movs	r2, #2
 8009236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800923a:	2112      	movs	r1, #18
 800923c:	f7ff bf86 	b.w	800914c <std>
 8009240:	240006e0 	.word	0x240006e0
 8009244:	240005a8 	.word	0x240005a8
 8009248:	080091b9 	.word	0x080091b9

0800924c <__sfp_lock_acquire>:
 800924c:	4801      	ldr	r0, [pc, #4]	@ (8009254 <__sfp_lock_acquire+0x8>)
 800924e:	f000 b872 	b.w	8009336 <__retarget_lock_acquire_recursive>
 8009252:	bf00      	nop
 8009254:	240006e5 	.word	0x240006e5

08009258 <__sfp_lock_release>:
 8009258:	4801      	ldr	r0, [pc, #4]	@ (8009260 <__sfp_lock_release+0x8>)
 800925a:	f000 b86d 	b.w	8009338 <__retarget_lock_release_recursive>
 800925e:	bf00      	nop
 8009260:	240006e5 	.word	0x240006e5

08009264 <__sinit>:
 8009264:	b510      	push	{r4, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	f7ff fff0 	bl	800924c <__sfp_lock_acquire>
 800926c:	6a23      	ldr	r3, [r4, #32]
 800926e:	b11b      	cbz	r3, 8009278 <__sinit+0x14>
 8009270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009274:	f7ff bff0 	b.w	8009258 <__sfp_lock_release>
 8009278:	4b04      	ldr	r3, [pc, #16]	@ (800928c <__sinit+0x28>)
 800927a:	6223      	str	r3, [r4, #32]
 800927c:	4b04      	ldr	r3, [pc, #16]	@ (8009290 <__sinit+0x2c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1f5      	bne.n	8009270 <__sinit+0xc>
 8009284:	f7ff ffc4 	bl	8009210 <global_stdio_init.part.0>
 8009288:	e7f2      	b.n	8009270 <__sinit+0xc>
 800928a:	bf00      	nop
 800928c:	080091d1 	.word	0x080091d1
 8009290:	240006e0 	.word	0x240006e0

08009294 <_fwalk_sglue>:
 8009294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009298:	4607      	mov	r7, r0
 800929a:	4688      	mov	r8, r1
 800929c:	4614      	mov	r4, r2
 800929e:	2600      	movs	r6, #0
 80092a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092a4:	f1b9 0901 	subs.w	r9, r9, #1
 80092a8:	d505      	bpl.n	80092b6 <_fwalk_sglue+0x22>
 80092aa:	6824      	ldr	r4, [r4, #0]
 80092ac:	2c00      	cmp	r4, #0
 80092ae:	d1f7      	bne.n	80092a0 <_fwalk_sglue+0xc>
 80092b0:	4630      	mov	r0, r6
 80092b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d907      	bls.n	80092cc <_fwalk_sglue+0x38>
 80092bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092c0:	3301      	adds	r3, #1
 80092c2:	d003      	beq.n	80092cc <_fwalk_sglue+0x38>
 80092c4:	4629      	mov	r1, r5
 80092c6:	4638      	mov	r0, r7
 80092c8:	47c0      	blx	r8
 80092ca:	4306      	orrs	r6, r0
 80092cc:	3568      	adds	r5, #104	@ 0x68
 80092ce:	e7e9      	b.n	80092a4 <_fwalk_sglue+0x10>

080092d0 <memset>:
 80092d0:	4402      	add	r2, r0
 80092d2:	4603      	mov	r3, r0
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d100      	bne.n	80092da <memset+0xa>
 80092d8:	4770      	bx	lr
 80092da:	f803 1b01 	strb.w	r1, [r3], #1
 80092de:	e7f9      	b.n	80092d4 <memset+0x4>

080092e0 <__errno>:
 80092e0:	4b01      	ldr	r3, [pc, #4]	@ (80092e8 <__errno+0x8>)
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	2400001c 	.word	0x2400001c

080092ec <__libc_init_array>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009324 <__libc_init_array+0x38>)
 80092f0:	4c0d      	ldr	r4, [pc, #52]	@ (8009328 <__libc_init_array+0x3c>)
 80092f2:	1b64      	subs	r4, r4, r5
 80092f4:	10a4      	asrs	r4, r4, #2
 80092f6:	2600      	movs	r6, #0
 80092f8:	42a6      	cmp	r6, r4
 80092fa:	d109      	bne.n	8009310 <__libc_init_array+0x24>
 80092fc:	4d0b      	ldr	r5, [pc, #44]	@ (800932c <__libc_init_array+0x40>)
 80092fe:	4c0c      	ldr	r4, [pc, #48]	@ (8009330 <__libc_init_array+0x44>)
 8009300:	f001 fede 	bl	800b0c0 <_init>
 8009304:	1b64      	subs	r4, r4, r5
 8009306:	10a4      	asrs	r4, r4, #2
 8009308:	2600      	movs	r6, #0
 800930a:	42a6      	cmp	r6, r4
 800930c:	d105      	bne.n	800931a <__libc_init_array+0x2e>
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	f855 3b04 	ldr.w	r3, [r5], #4
 8009314:	4798      	blx	r3
 8009316:	3601      	adds	r6, #1
 8009318:	e7ee      	b.n	80092f8 <__libc_init_array+0xc>
 800931a:	f855 3b04 	ldr.w	r3, [r5], #4
 800931e:	4798      	blx	r3
 8009320:	3601      	adds	r6, #1
 8009322:	e7f2      	b.n	800930a <__libc_init_array+0x1e>
 8009324:	0800b46c 	.word	0x0800b46c
 8009328:	0800b46c 	.word	0x0800b46c
 800932c:	0800b46c 	.word	0x0800b46c
 8009330:	0800b470 	.word	0x0800b470

08009334 <__retarget_lock_init_recursive>:
 8009334:	4770      	bx	lr

08009336 <__retarget_lock_acquire_recursive>:
 8009336:	4770      	bx	lr

08009338 <__retarget_lock_release_recursive>:
 8009338:	4770      	bx	lr
	...

0800933c <_localeconv_r>:
 800933c:	4800      	ldr	r0, [pc, #0]	@ (8009340 <_localeconv_r+0x4>)
 800933e:	4770      	bx	lr
 8009340:	2400015c 	.word	0x2400015c

08009344 <quorem>:
 8009344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009348:	6903      	ldr	r3, [r0, #16]
 800934a:	690c      	ldr	r4, [r1, #16]
 800934c:	42a3      	cmp	r3, r4
 800934e:	4607      	mov	r7, r0
 8009350:	db7e      	blt.n	8009450 <quorem+0x10c>
 8009352:	3c01      	subs	r4, #1
 8009354:	f101 0814 	add.w	r8, r1, #20
 8009358:	00a3      	lsls	r3, r4, #2
 800935a:	f100 0514 	add.w	r5, r0, #20
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800936a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800936e:	3301      	adds	r3, #1
 8009370:	429a      	cmp	r2, r3
 8009372:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009376:	fbb2 f6f3 	udiv	r6, r2, r3
 800937a:	d32e      	bcc.n	80093da <quorem+0x96>
 800937c:	f04f 0a00 	mov.w	sl, #0
 8009380:	46c4      	mov	ip, r8
 8009382:	46ae      	mov	lr, r5
 8009384:	46d3      	mov	fp, sl
 8009386:	f85c 3b04 	ldr.w	r3, [ip], #4
 800938a:	b298      	uxth	r0, r3
 800938c:	fb06 a000 	mla	r0, r6, r0, sl
 8009390:	0c02      	lsrs	r2, r0, #16
 8009392:	0c1b      	lsrs	r3, r3, #16
 8009394:	fb06 2303 	mla	r3, r6, r3, r2
 8009398:	f8de 2000 	ldr.w	r2, [lr]
 800939c:	b280      	uxth	r0, r0
 800939e:	b292      	uxth	r2, r2
 80093a0:	1a12      	subs	r2, r2, r0
 80093a2:	445a      	add	r2, fp
 80093a4:	f8de 0000 	ldr.w	r0, [lr]
 80093a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093b6:	b292      	uxth	r2, r2
 80093b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093bc:	45e1      	cmp	r9, ip
 80093be:	f84e 2b04 	str.w	r2, [lr], #4
 80093c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093c6:	d2de      	bcs.n	8009386 <quorem+0x42>
 80093c8:	9b00      	ldr	r3, [sp, #0]
 80093ca:	58eb      	ldr	r3, [r5, r3]
 80093cc:	b92b      	cbnz	r3, 80093da <quorem+0x96>
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	3b04      	subs	r3, #4
 80093d2:	429d      	cmp	r5, r3
 80093d4:	461a      	mov	r2, r3
 80093d6:	d32f      	bcc.n	8009438 <quorem+0xf4>
 80093d8:	613c      	str	r4, [r7, #16]
 80093da:	4638      	mov	r0, r7
 80093dc:	f001 f96e 	bl	800a6bc <__mcmp>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	db25      	blt.n	8009430 <quorem+0xec>
 80093e4:	4629      	mov	r1, r5
 80093e6:	2000      	movs	r0, #0
 80093e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80093ec:	f8d1 c000 	ldr.w	ip, [r1]
 80093f0:	fa1f fe82 	uxth.w	lr, r2
 80093f4:	fa1f f38c 	uxth.w	r3, ip
 80093f8:	eba3 030e 	sub.w	r3, r3, lr
 80093fc:	4403      	add	r3, r0
 80093fe:	0c12      	lsrs	r2, r2, #16
 8009400:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009404:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009408:	b29b      	uxth	r3, r3
 800940a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800940e:	45c1      	cmp	r9, r8
 8009410:	f841 3b04 	str.w	r3, [r1], #4
 8009414:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009418:	d2e6      	bcs.n	80093e8 <quorem+0xa4>
 800941a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800941e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009422:	b922      	cbnz	r2, 800942e <quorem+0xea>
 8009424:	3b04      	subs	r3, #4
 8009426:	429d      	cmp	r5, r3
 8009428:	461a      	mov	r2, r3
 800942a:	d30b      	bcc.n	8009444 <quorem+0x100>
 800942c:	613c      	str	r4, [r7, #16]
 800942e:	3601      	adds	r6, #1
 8009430:	4630      	mov	r0, r6
 8009432:	b003      	add	sp, #12
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	6812      	ldr	r2, [r2, #0]
 800943a:	3b04      	subs	r3, #4
 800943c:	2a00      	cmp	r2, #0
 800943e:	d1cb      	bne.n	80093d8 <quorem+0x94>
 8009440:	3c01      	subs	r4, #1
 8009442:	e7c6      	b.n	80093d2 <quorem+0x8e>
 8009444:	6812      	ldr	r2, [r2, #0]
 8009446:	3b04      	subs	r3, #4
 8009448:	2a00      	cmp	r2, #0
 800944a:	d1ef      	bne.n	800942c <quorem+0xe8>
 800944c:	3c01      	subs	r4, #1
 800944e:	e7ea      	b.n	8009426 <quorem+0xe2>
 8009450:	2000      	movs	r0, #0
 8009452:	e7ee      	b.n	8009432 <quorem+0xee>
 8009454:	0000      	movs	r0, r0
	...

08009458 <_dtoa_r>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	ed2d 8b02 	vpush	{d8}
 8009460:	69c7      	ldr	r7, [r0, #28]
 8009462:	b091      	sub	sp, #68	@ 0x44
 8009464:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009468:	ec55 4b10 	vmov	r4, r5, d0
 800946c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800946e:	9107      	str	r1, [sp, #28]
 8009470:	4681      	mov	r9, r0
 8009472:	9209      	str	r2, [sp, #36]	@ 0x24
 8009474:	930d      	str	r3, [sp, #52]	@ 0x34
 8009476:	b97f      	cbnz	r7, 8009498 <_dtoa_r+0x40>
 8009478:	2010      	movs	r0, #16
 800947a:	f000 fd4b 	bl	8009f14 <malloc>
 800947e:	4602      	mov	r2, r0
 8009480:	f8c9 001c 	str.w	r0, [r9, #28]
 8009484:	b920      	cbnz	r0, 8009490 <_dtoa_r+0x38>
 8009486:	4ba0      	ldr	r3, [pc, #640]	@ (8009708 <_dtoa_r+0x2b0>)
 8009488:	21ef      	movs	r1, #239	@ 0xef
 800948a:	48a0      	ldr	r0, [pc, #640]	@ (800970c <_dtoa_r+0x2b4>)
 800948c:	f001 fac6 	bl	800aa1c <__assert_func>
 8009490:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009494:	6007      	str	r7, [r0, #0]
 8009496:	60c7      	str	r7, [r0, #12]
 8009498:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800949c:	6819      	ldr	r1, [r3, #0]
 800949e:	b159      	cbz	r1, 80094b8 <_dtoa_r+0x60>
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	604a      	str	r2, [r1, #4]
 80094a4:	2301      	movs	r3, #1
 80094a6:	4093      	lsls	r3, r2
 80094a8:	608b      	str	r3, [r1, #8]
 80094aa:	4648      	mov	r0, r9
 80094ac:	f000 fed4 	bl	800a258 <_Bfree>
 80094b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094b4:	2200      	movs	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	1e2b      	subs	r3, r5, #0
 80094ba:	bfbb      	ittet	lt
 80094bc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094c0:	9303      	strlt	r3, [sp, #12]
 80094c2:	2300      	movge	r3, #0
 80094c4:	2201      	movlt	r2, #1
 80094c6:	bfac      	ite	ge
 80094c8:	6033      	strge	r3, [r6, #0]
 80094ca:	6032      	strlt	r2, [r6, #0]
 80094cc:	4b90      	ldr	r3, [pc, #576]	@ (8009710 <_dtoa_r+0x2b8>)
 80094ce:	9e03      	ldr	r6, [sp, #12]
 80094d0:	43b3      	bics	r3, r6
 80094d2:	d110      	bne.n	80094f6 <_dtoa_r+0x9e>
 80094d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094d6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80094e0:	4323      	orrs	r3, r4
 80094e2:	f000 84e6 	beq.w	8009eb2 <_dtoa_r+0xa5a>
 80094e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094e8:	4f8a      	ldr	r7, [pc, #552]	@ (8009714 <_dtoa_r+0x2bc>)
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 84e8 	beq.w	8009ec0 <_dtoa_r+0xa68>
 80094f0:	1cfb      	adds	r3, r7, #3
 80094f2:	f000 bce3 	b.w	8009ebc <_dtoa_r+0xa64>
 80094f6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80094fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80094fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009502:	d10a      	bne.n	800951a <_dtoa_r+0xc2>
 8009504:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009506:	2301      	movs	r3, #1
 8009508:	6013      	str	r3, [r2, #0]
 800950a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800950c:	b113      	cbz	r3, 8009514 <_dtoa_r+0xbc>
 800950e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009510:	4b81      	ldr	r3, [pc, #516]	@ (8009718 <_dtoa_r+0x2c0>)
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	4f81      	ldr	r7, [pc, #516]	@ (800971c <_dtoa_r+0x2c4>)
 8009516:	f000 bcd3 	b.w	8009ec0 <_dtoa_r+0xa68>
 800951a:	aa0e      	add	r2, sp, #56	@ 0x38
 800951c:	a90f      	add	r1, sp, #60	@ 0x3c
 800951e:	4648      	mov	r0, r9
 8009520:	eeb0 0b48 	vmov.f64	d0, d8
 8009524:	f001 f97a 	bl	800a81c <__d2b>
 8009528:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800952c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800952e:	9001      	str	r0, [sp, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d045      	beq.n	80095c0 <_dtoa_r+0x168>
 8009534:	eeb0 7b48 	vmov.f64	d7, d8
 8009538:	ee18 1a90 	vmov	r1, s17
 800953c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009540:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009544:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009548:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800954c:	2500      	movs	r5, #0
 800954e:	ee07 1a90 	vmov	s15, r1
 8009552:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009556:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80096f0 <_dtoa_r+0x298>
 800955a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800955e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80096f8 <_dtoa_r+0x2a0>
 8009562:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009566:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009700 <_dtoa_r+0x2a8>
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009572:	eeb0 7b46 	vmov.f64	d7, d6
 8009576:	eea4 7b05 	vfma.f64	d7, d4, d5
 800957a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800957e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009586:	ee16 8a90 	vmov	r8, s13
 800958a:	d508      	bpl.n	800959e <_dtoa_r+0x146>
 800958c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009590:	eeb4 6b47 	vcmp.f64	d6, d7
 8009594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009598:	bf18      	it	ne
 800959a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800959e:	f1b8 0f16 	cmp.w	r8, #22
 80095a2:	d82b      	bhi.n	80095fc <_dtoa_r+0x1a4>
 80095a4:	495e      	ldr	r1, [pc, #376]	@ (8009720 <_dtoa_r+0x2c8>)
 80095a6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80095aa:	ed91 7b00 	vldr	d7, [r1]
 80095ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80095b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b6:	d501      	bpl.n	80095bc <_dtoa_r+0x164>
 80095b8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80095bc:	2100      	movs	r1, #0
 80095be:	e01e      	b.n	80095fe <_dtoa_r+0x1a6>
 80095c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095c2:	4413      	add	r3, r2
 80095c4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80095c8:	2920      	cmp	r1, #32
 80095ca:	bfc1      	itttt	gt
 80095cc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80095d0:	408e      	lslgt	r6, r1
 80095d2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80095d6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80095da:	bfd6      	itet	le
 80095dc:	f1c1 0120 	rsble	r1, r1, #32
 80095e0:	4331      	orrgt	r1, r6
 80095e2:	fa04 f101 	lslle.w	r1, r4, r1
 80095e6:	ee07 1a90 	vmov	s15, r1
 80095ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80095ee:	3b01      	subs	r3, #1
 80095f0:	ee17 1a90 	vmov	r1, s15
 80095f4:	2501      	movs	r5, #1
 80095f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80095fa:	e7a8      	b.n	800954e <_dtoa_r+0xf6>
 80095fc:	2101      	movs	r1, #1
 80095fe:	1ad2      	subs	r2, r2, r3
 8009600:	1e53      	subs	r3, r2, #1
 8009602:	9306      	str	r3, [sp, #24]
 8009604:	bf45      	ittet	mi
 8009606:	f1c2 0301 	rsbmi	r3, r2, #1
 800960a:	9304      	strmi	r3, [sp, #16]
 800960c:	2300      	movpl	r3, #0
 800960e:	2300      	movmi	r3, #0
 8009610:	bf4c      	ite	mi
 8009612:	9306      	strmi	r3, [sp, #24]
 8009614:	9304      	strpl	r3, [sp, #16]
 8009616:	f1b8 0f00 	cmp.w	r8, #0
 800961a:	910c      	str	r1, [sp, #48]	@ 0x30
 800961c:	db18      	blt.n	8009650 <_dtoa_r+0x1f8>
 800961e:	9b06      	ldr	r3, [sp, #24]
 8009620:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009624:	4443      	add	r3, r8
 8009626:	9306      	str	r3, [sp, #24]
 8009628:	2300      	movs	r3, #0
 800962a:	9a07      	ldr	r2, [sp, #28]
 800962c:	2a09      	cmp	r2, #9
 800962e:	d845      	bhi.n	80096bc <_dtoa_r+0x264>
 8009630:	2a05      	cmp	r2, #5
 8009632:	bfc4      	itt	gt
 8009634:	3a04      	subgt	r2, #4
 8009636:	9207      	strgt	r2, [sp, #28]
 8009638:	9a07      	ldr	r2, [sp, #28]
 800963a:	f1a2 0202 	sub.w	r2, r2, #2
 800963e:	bfcc      	ite	gt
 8009640:	2400      	movgt	r4, #0
 8009642:	2401      	movle	r4, #1
 8009644:	2a03      	cmp	r2, #3
 8009646:	d844      	bhi.n	80096d2 <_dtoa_r+0x27a>
 8009648:	e8df f002 	tbb	[pc, r2]
 800964c:	0b173634 	.word	0x0b173634
 8009650:	9b04      	ldr	r3, [sp, #16]
 8009652:	2200      	movs	r2, #0
 8009654:	eba3 0308 	sub.w	r3, r3, r8
 8009658:	9304      	str	r3, [sp, #16]
 800965a:	920a      	str	r2, [sp, #40]	@ 0x28
 800965c:	f1c8 0300 	rsb	r3, r8, #0
 8009660:	e7e3      	b.n	800962a <_dtoa_r+0x1d2>
 8009662:	2201      	movs	r2, #1
 8009664:	9208      	str	r2, [sp, #32]
 8009666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009668:	eb08 0b02 	add.w	fp, r8, r2
 800966c:	f10b 0a01 	add.w	sl, fp, #1
 8009670:	4652      	mov	r2, sl
 8009672:	2a01      	cmp	r2, #1
 8009674:	bfb8      	it	lt
 8009676:	2201      	movlt	r2, #1
 8009678:	e006      	b.n	8009688 <_dtoa_r+0x230>
 800967a:	2201      	movs	r2, #1
 800967c:	9208      	str	r2, [sp, #32]
 800967e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009680:	2a00      	cmp	r2, #0
 8009682:	dd29      	ble.n	80096d8 <_dtoa_r+0x280>
 8009684:	4693      	mov	fp, r2
 8009686:	4692      	mov	sl, r2
 8009688:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800968c:	2100      	movs	r1, #0
 800968e:	2004      	movs	r0, #4
 8009690:	f100 0614 	add.w	r6, r0, #20
 8009694:	4296      	cmp	r6, r2
 8009696:	d926      	bls.n	80096e6 <_dtoa_r+0x28e>
 8009698:	6079      	str	r1, [r7, #4]
 800969a:	4648      	mov	r0, r9
 800969c:	9305      	str	r3, [sp, #20]
 800969e:	f000 fd9b 	bl	800a1d8 <_Balloc>
 80096a2:	9b05      	ldr	r3, [sp, #20]
 80096a4:	4607      	mov	r7, r0
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d13e      	bne.n	8009728 <_dtoa_r+0x2d0>
 80096aa:	4b1e      	ldr	r3, [pc, #120]	@ (8009724 <_dtoa_r+0x2cc>)
 80096ac:	4602      	mov	r2, r0
 80096ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80096b2:	e6ea      	b.n	800948a <_dtoa_r+0x32>
 80096b4:	2200      	movs	r2, #0
 80096b6:	e7e1      	b.n	800967c <_dtoa_r+0x224>
 80096b8:	2200      	movs	r2, #0
 80096ba:	e7d3      	b.n	8009664 <_dtoa_r+0x20c>
 80096bc:	2401      	movs	r4, #1
 80096be:	2200      	movs	r2, #0
 80096c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80096c4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80096c8:	2100      	movs	r1, #0
 80096ca:	46da      	mov	sl, fp
 80096cc:	2212      	movs	r2, #18
 80096ce:	9109      	str	r1, [sp, #36]	@ 0x24
 80096d0:	e7da      	b.n	8009688 <_dtoa_r+0x230>
 80096d2:	2201      	movs	r2, #1
 80096d4:	9208      	str	r2, [sp, #32]
 80096d6:	e7f5      	b.n	80096c4 <_dtoa_r+0x26c>
 80096d8:	f04f 0b01 	mov.w	fp, #1
 80096dc:	46da      	mov	sl, fp
 80096de:	465a      	mov	r2, fp
 80096e0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80096e4:	e7d0      	b.n	8009688 <_dtoa_r+0x230>
 80096e6:	3101      	adds	r1, #1
 80096e8:	0040      	lsls	r0, r0, #1
 80096ea:	e7d1      	b.n	8009690 <_dtoa_r+0x238>
 80096ec:	f3af 8000 	nop.w
 80096f0:	636f4361 	.word	0x636f4361
 80096f4:	3fd287a7 	.word	0x3fd287a7
 80096f8:	8b60c8b3 	.word	0x8b60c8b3
 80096fc:	3fc68a28 	.word	0x3fc68a28
 8009700:	509f79fb 	.word	0x509f79fb
 8009704:	3fd34413 	.word	0x3fd34413
 8009708:	0800b131 	.word	0x0800b131
 800970c:	0800b148 	.word	0x0800b148
 8009710:	7ff00000 	.word	0x7ff00000
 8009714:	0800b12d 	.word	0x0800b12d
 8009718:	0800b101 	.word	0x0800b101
 800971c:	0800b100 	.word	0x0800b100
 8009720:	0800b298 	.word	0x0800b298
 8009724:	0800b1a0 	.word	0x0800b1a0
 8009728:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800972c:	f1ba 0f0e 	cmp.w	sl, #14
 8009730:	6010      	str	r0, [r2, #0]
 8009732:	d86e      	bhi.n	8009812 <_dtoa_r+0x3ba>
 8009734:	2c00      	cmp	r4, #0
 8009736:	d06c      	beq.n	8009812 <_dtoa_r+0x3ba>
 8009738:	f1b8 0f00 	cmp.w	r8, #0
 800973c:	f340 80b4 	ble.w	80098a8 <_dtoa_r+0x450>
 8009740:	4ac8      	ldr	r2, [pc, #800]	@ (8009a64 <_dtoa_r+0x60c>)
 8009742:	f008 010f 	and.w	r1, r8, #15
 8009746:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800974a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800974e:	ed92 7b00 	vldr	d7, [r2]
 8009752:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009756:	f000 809b 	beq.w	8009890 <_dtoa_r+0x438>
 800975a:	4ac3      	ldr	r2, [pc, #780]	@ (8009a68 <_dtoa_r+0x610>)
 800975c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009760:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009764:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009768:	f001 010f 	and.w	r1, r1, #15
 800976c:	2203      	movs	r2, #3
 800976e:	48be      	ldr	r0, [pc, #760]	@ (8009a68 <_dtoa_r+0x610>)
 8009770:	2900      	cmp	r1, #0
 8009772:	f040 808f 	bne.w	8009894 <_dtoa_r+0x43c>
 8009776:	ed9d 6b02 	vldr	d6, [sp, #8]
 800977a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800977e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009782:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009784:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009788:	2900      	cmp	r1, #0
 800978a:	f000 80b3 	beq.w	80098f4 <_dtoa_r+0x49c>
 800978e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009792:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979a:	f140 80ab 	bpl.w	80098f4 <_dtoa_r+0x49c>
 800979e:	f1ba 0f00 	cmp.w	sl, #0
 80097a2:	f000 80a7 	beq.w	80098f4 <_dtoa_r+0x49c>
 80097a6:	f1bb 0f00 	cmp.w	fp, #0
 80097aa:	dd30      	ble.n	800980e <_dtoa_r+0x3b6>
 80097ac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80097b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80097b8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80097bc:	9105      	str	r1, [sp, #20]
 80097be:	3201      	adds	r2, #1
 80097c0:	465c      	mov	r4, fp
 80097c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80097c6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80097ca:	ee07 2a90 	vmov	s15, r2
 80097ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80097d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80097d6:	ee15 2a90 	vmov	r2, s11
 80097da:	ec51 0b15 	vmov	r0, r1, d5
 80097de:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80097e2:	2c00      	cmp	r4, #0
 80097e4:	f040 808a 	bne.w	80098fc <_dtoa_r+0x4a4>
 80097e8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80097ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 80097f0:	ec41 0b17 	vmov	d7, r0, r1
 80097f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097fc:	f300 826a 	bgt.w	8009cd4 <_dtoa_r+0x87c>
 8009800:	eeb1 7b47 	vneg.f64	d7, d7
 8009804:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800980c:	d423      	bmi.n	8009856 <_dtoa_r+0x3fe>
 800980e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009812:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009814:	2a00      	cmp	r2, #0
 8009816:	f2c0 8129 	blt.w	8009a6c <_dtoa_r+0x614>
 800981a:	f1b8 0f0e 	cmp.w	r8, #14
 800981e:	f300 8125 	bgt.w	8009a6c <_dtoa_r+0x614>
 8009822:	4b90      	ldr	r3, [pc, #576]	@ (8009a64 <_dtoa_r+0x60c>)
 8009824:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009828:	ed93 6b00 	vldr	d6, [r3]
 800982c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800982e:	2b00      	cmp	r3, #0
 8009830:	f280 80c8 	bge.w	80099c4 <_dtoa_r+0x56c>
 8009834:	f1ba 0f00 	cmp.w	sl, #0
 8009838:	f300 80c4 	bgt.w	80099c4 <_dtoa_r+0x56c>
 800983c:	d10b      	bne.n	8009856 <_dtoa_r+0x3fe>
 800983e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009842:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009846:	ed9d 7b02 	vldr	d7, [sp, #8]
 800984a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800984e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009852:	f2c0 823c 	blt.w	8009cce <_dtoa_r+0x876>
 8009856:	2400      	movs	r4, #0
 8009858:	4625      	mov	r5, r4
 800985a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800985c:	43db      	mvns	r3, r3
 800985e:	9305      	str	r3, [sp, #20]
 8009860:	463e      	mov	r6, r7
 8009862:	f04f 0800 	mov.w	r8, #0
 8009866:	4621      	mov	r1, r4
 8009868:	4648      	mov	r0, r9
 800986a:	f000 fcf5 	bl	800a258 <_Bfree>
 800986e:	2d00      	cmp	r5, #0
 8009870:	f000 80a2 	beq.w	80099b8 <_dtoa_r+0x560>
 8009874:	f1b8 0f00 	cmp.w	r8, #0
 8009878:	d005      	beq.n	8009886 <_dtoa_r+0x42e>
 800987a:	45a8      	cmp	r8, r5
 800987c:	d003      	beq.n	8009886 <_dtoa_r+0x42e>
 800987e:	4641      	mov	r1, r8
 8009880:	4648      	mov	r0, r9
 8009882:	f000 fce9 	bl	800a258 <_Bfree>
 8009886:	4629      	mov	r1, r5
 8009888:	4648      	mov	r0, r9
 800988a:	f000 fce5 	bl	800a258 <_Bfree>
 800988e:	e093      	b.n	80099b8 <_dtoa_r+0x560>
 8009890:	2202      	movs	r2, #2
 8009892:	e76c      	b.n	800976e <_dtoa_r+0x316>
 8009894:	07cc      	lsls	r4, r1, #31
 8009896:	d504      	bpl.n	80098a2 <_dtoa_r+0x44a>
 8009898:	ed90 6b00 	vldr	d6, [r0]
 800989c:	3201      	adds	r2, #1
 800989e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098a2:	1049      	asrs	r1, r1, #1
 80098a4:	3008      	adds	r0, #8
 80098a6:	e763      	b.n	8009770 <_dtoa_r+0x318>
 80098a8:	d022      	beq.n	80098f0 <_dtoa_r+0x498>
 80098aa:	f1c8 0100 	rsb	r1, r8, #0
 80098ae:	4a6d      	ldr	r2, [pc, #436]	@ (8009a64 <_dtoa_r+0x60c>)
 80098b0:	f001 000f 	and.w	r0, r1, #15
 80098b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80098b8:	ed92 7b00 	vldr	d7, [r2]
 80098bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80098c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098c4:	4868      	ldr	r0, [pc, #416]	@ (8009a68 <_dtoa_r+0x610>)
 80098c6:	1109      	asrs	r1, r1, #4
 80098c8:	2400      	movs	r4, #0
 80098ca:	2202      	movs	r2, #2
 80098cc:	b929      	cbnz	r1, 80098da <_dtoa_r+0x482>
 80098ce:	2c00      	cmp	r4, #0
 80098d0:	f43f af57 	beq.w	8009782 <_dtoa_r+0x32a>
 80098d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098d8:	e753      	b.n	8009782 <_dtoa_r+0x32a>
 80098da:	07ce      	lsls	r6, r1, #31
 80098dc:	d505      	bpl.n	80098ea <_dtoa_r+0x492>
 80098de:	ed90 6b00 	vldr	d6, [r0]
 80098e2:	3201      	adds	r2, #1
 80098e4:	2401      	movs	r4, #1
 80098e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098ea:	1049      	asrs	r1, r1, #1
 80098ec:	3008      	adds	r0, #8
 80098ee:	e7ed      	b.n	80098cc <_dtoa_r+0x474>
 80098f0:	2202      	movs	r2, #2
 80098f2:	e746      	b.n	8009782 <_dtoa_r+0x32a>
 80098f4:	f8cd 8014 	str.w	r8, [sp, #20]
 80098f8:	4654      	mov	r4, sl
 80098fa:	e762      	b.n	80097c2 <_dtoa_r+0x36a>
 80098fc:	4a59      	ldr	r2, [pc, #356]	@ (8009a64 <_dtoa_r+0x60c>)
 80098fe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009902:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009906:	9a08      	ldr	r2, [sp, #32]
 8009908:	ec41 0b17 	vmov	d7, r0, r1
 800990c:	443c      	add	r4, r7
 800990e:	b34a      	cbz	r2, 8009964 <_dtoa_r+0x50c>
 8009910:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009914:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009918:	463e      	mov	r6, r7
 800991a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800991e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009922:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009926:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800992a:	ee14 2a90 	vmov	r2, s9
 800992e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009932:	3230      	adds	r2, #48	@ 0x30
 8009934:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009938:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800993c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009940:	f806 2b01 	strb.w	r2, [r6], #1
 8009944:	d438      	bmi.n	80099b8 <_dtoa_r+0x560>
 8009946:	ee32 5b46 	vsub.f64	d5, d2, d6
 800994a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800994e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009952:	d46e      	bmi.n	8009a32 <_dtoa_r+0x5da>
 8009954:	42a6      	cmp	r6, r4
 8009956:	f43f af5a 	beq.w	800980e <_dtoa_r+0x3b6>
 800995a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800995e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009962:	e7e0      	b.n	8009926 <_dtoa_r+0x4ce>
 8009964:	4621      	mov	r1, r4
 8009966:	463e      	mov	r6, r7
 8009968:	ee27 7b04 	vmul.f64	d7, d7, d4
 800996c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009970:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009974:	ee14 2a90 	vmov	r2, s9
 8009978:	3230      	adds	r2, #48	@ 0x30
 800997a:	f806 2b01 	strb.w	r2, [r6], #1
 800997e:	42a6      	cmp	r6, r4
 8009980:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009984:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009988:	d119      	bne.n	80099be <_dtoa_r+0x566>
 800998a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800998e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009992:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999a:	dc4a      	bgt.n	8009a32 <_dtoa_r+0x5da>
 800999c:	ee35 5b47 	vsub.f64	d5, d5, d7
 80099a0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80099a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a8:	f57f af31 	bpl.w	800980e <_dtoa_r+0x3b6>
 80099ac:	460e      	mov	r6, r1
 80099ae:	3901      	subs	r1, #1
 80099b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099b4:	2b30      	cmp	r3, #48	@ 0x30
 80099b6:	d0f9      	beq.n	80099ac <_dtoa_r+0x554>
 80099b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80099bc:	e027      	b.n	8009a0e <_dtoa_r+0x5b6>
 80099be:	ee26 6b03 	vmul.f64	d6, d6, d3
 80099c2:	e7d5      	b.n	8009970 <_dtoa_r+0x518>
 80099c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099c8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80099cc:	463e      	mov	r6, r7
 80099ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80099d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80099d6:	ee15 3a10 	vmov	r3, s10
 80099da:	3330      	adds	r3, #48	@ 0x30
 80099dc:	f806 3b01 	strb.w	r3, [r6], #1
 80099e0:	1bf3      	subs	r3, r6, r7
 80099e2:	459a      	cmp	sl, r3
 80099e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80099e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80099ec:	d132      	bne.n	8009a54 <_dtoa_r+0x5fc>
 80099ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80099f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80099f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fa:	dc18      	bgt.n	8009a2e <_dtoa_r+0x5d6>
 80099fc:	eeb4 7b46 	vcmp.f64	d7, d6
 8009a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a04:	d103      	bne.n	8009a0e <_dtoa_r+0x5b6>
 8009a06:	ee15 3a10 	vmov	r3, s10
 8009a0a:	07db      	lsls	r3, r3, #31
 8009a0c:	d40f      	bmi.n	8009a2e <_dtoa_r+0x5d6>
 8009a0e:	9901      	ldr	r1, [sp, #4]
 8009a10:	4648      	mov	r0, r9
 8009a12:	f000 fc21 	bl	800a258 <_Bfree>
 8009a16:	2300      	movs	r3, #0
 8009a18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a1a:	7033      	strb	r3, [r6, #0]
 8009a1c:	f108 0301 	add.w	r3, r8, #1
 8009a20:	6013      	str	r3, [r2, #0]
 8009a22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 824b 	beq.w	8009ec0 <_dtoa_r+0xa68>
 8009a2a:	601e      	str	r6, [r3, #0]
 8009a2c:	e248      	b.n	8009ec0 <_dtoa_r+0xa68>
 8009a2e:	f8cd 8014 	str.w	r8, [sp, #20]
 8009a32:	4633      	mov	r3, r6
 8009a34:	461e      	mov	r6, r3
 8009a36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a3a:	2a39      	cmp	r2, #57	@ 0x39
 8009a3c:	d106      	bne.n	8009a4c <_dtoa_r+0x5f4>
 8009a3e:	429f      	cmp	r7, r3
 8009a40:	d1f8      	bne.n	8009a34 <_dtoa_r+0x5dc>
 8009a42:	9a05      	ldr	r2, [sp, #20]
 8009a44:	3201      	adds	r2, #1
 8009a46:	9205      	str	r2, [sp, #20]
 8009a48:	2230      	movs	r2, #48	@ 0x30
 8009a4a:	703a      	strb	r2, [r7, #0]
 8009a4c:	781a      	ldrb	r2, [r3, #0]
 8009a4e:	3201      	adds	r2, #1
 8009a50:	701a      	strb	r2, [r3, #0]
 8009a52:	e7b1      	b.n	80099b8 <_dtoa_r+0x560>
 8009a54:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a60:	d1b5      	bne.n	80099ce <_dtoa_r+0x576>
 8009a62:	e7d4      	b.n	8009a0e <_dtoa_r+0x5b6>
 8009a64:	0800b298 	.word	0x0800b298
 8009a68:	0800b270 	.word	0x0800b270
 8009a6c:	9908      	ldr	r1, [sp, #32]
 8009a6e:	2900      	cmp	r1, #0
 8009a70:	f000 80e9 	beq.w	8009c46 <_dtoa_r+0x7ee>
 8009a74:	9907      	ldr	r1, [sp, #28]
 8009a76:	2901      	cmp	r1, #1
 8009a78:	f300 80cb 	bgt.w	8009c12 <_dtoa_r+0x7ba>
 8009a7c:	2d00      	cmp	r5, #0
 8009a7e:	f000 80c4 	beq.w	8009c0a <_dtoa_r+0x7b2>
 8009a82:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009a86:	9e04      	ldr	r6, [sp, #16]
 8009a88:	461c      	mov	r4, r3
 8009a8a:	9305      	str	r3, [sp, #20]
 8009a8c:	9b04      	ldr	r3, [sp, #16]
 8009a8e:	4413      	add	r3, r2
 8009a90:	9304      	str	r3, [sp, #16]
 8009a92:	9b06      	ldr	r3, [sp, #24]
 8009a94:	2101      	movs	r1, #1
 8009a96:	4413      	add	r3, r2
 8009a98:	4648      	mov	r0, r9
 8009a9a:	9306      	str	r3, [sp, #24]
 8009a9c:	f000 fc90 	bl	800a3c0 <__i2b>
 8009aa0:	9b05      	ldr	r3, [sp, #20]
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	b166      	cbz	r6, 8009ac0 <_dtoa_r+0x668>
 8009aa6:	9a06      	ldr	r2, [sp, #24]
 8009aa8:	2a00      	cmp	r2, #0
 8009aaa:	dd09      	ble.n	8009ac0 <_dtoa_r+0x668>
 8009aac:	42b2      	cmp	r2, r6
 8009aae:	9904      	ldr	r1, [sp, #16]
 8009ab0:	bfa8      	it	ge
 8009ab2:	4632      	movge	r2, r6
 8009ab4:	1a89      	subs	r1, r1, r2
 8009ab6:	9104      	str	r1, [sp, #16]
 8009ab8:	9906      	ldr	r1, [sp, #24]
 8009aba:	1ab6      	subs	r6, r6, r2
 8009abc:	1a8a      	subs	r2, r1, r2
 8009abe:	9206      	str	r2, [sp, #24]
 8009ac0:	b30b      	cbz	r3, 8009b06 <_dtoa_r+0x6ae>
 8009ac2:	9a08      	ldr	r2, [sp, #32]
 8009ac4:	2a00      	cmp	r2, #0
 8009ac6:	f000 80c5 	beq.w	8009c54 <_dtoa_r+0x7fc>
 8009aca:	2c00      	cmp	r4, #0
 8009acc:	f000 80bf 	beq.w	8009c4e <_dtoa_r+0x7f6>
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ad8:	f000 fd2a 	bl	800a530 <__pow5mult>
 8009adc:	9a01      	ldr	r2, [sp, #4]
 8009ade:	4601      	mov	r1, r0
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	4648      	mov	r0, r9
 8009ae4:	f000 fc82 	bl	800a3ec <__multiply>
 8009ae8:	9901      	ldr	r1, [sp, #4]
 8009aea:	9005      	str	r0, [sp, #20]
 8009aec:	4648      	mov	r0, r9
 8009aee:	f000 fbb3 	bl	800a258 <_Bfree>
 8009af2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009af4:	1b1b      	subs	r3, r3, r4
 8009af6:	f000 80b0 	beq.w	8009c5a <_dtoa_r+0x802>
 8009afa:	9905      	ldr	r1, [sp, #20]
 8009afc:	461a      	mov	r2, r3
 8009afe:	4648      	mov	r0, r9
 8009b00:	f000 fd16 	bl	800a530 <__pow5mult>
 8009b04:	9001      	str	r0, [sp, #4]
 8009b06:	2101      	movs	r1, #1
 8009b08:	4648      	mov	r0, r9
 8009b0a:	f000 fc59 	bl	800a3c0 <__i2b>
 8009b0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b10:	4604      	mov	r4, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 81da 	beq.w	8009ecc <_dtoa_r+0xa74>
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	4648      	mov	r0, r9
 8009b1e:	f000 fd07 	bl	800a530 <__pow5mult>
 8009b22:	9b07      	ldr	r3, [sp, #28]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	4604      	mov	r4, r0
 8009b28:	f300 80a0 	bgt.w	8009c6c <_dtoa_r+0x814>
 8009b2c:	9b02      	ldr	r3, [sp, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f040 8096 	bne.w	8009c60 <_dtoa_r+0x808>
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	f040 8092 	bne.w	8009c64 <_dtoa_r+0x80c>
 8009b40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009b44:	0d12      	lsrs	r2, r2, #20
 8009b46:	0512      	lsls	r2, r2, #20
 8009b48:	2a00      	cmp	r2, #0
 8009b4a:	f000 808d 	beq.w	8009c68 <_dtoa_r+0x810>
 8009b4e:	9b04      	ldr	r3, [sp, #16]
 8009b50:	3301      	adds	r3, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	9b06      	ldr	r3, [sp, #24]
 8009b56:	3301      	adds	r3, #1
 8009b58:	9306      	str	r3, [sp, #24]
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 81b9 	beq.w	8009ed8 <_dtoa_r+0xa80>
 8009b66:	6922      	ldr	r2, [r4, #16]
 8009b68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009b6c:	6910      	ldr	r0, [r2, #16]
 8009b6e:	f000 fbdb 	bl	800a328 <__hi0bits>
 8009b72:	f1c0 0020 	rsb	r0, r0, #32
 8009b76:	9b06      	ldr	r3, [sp, #24]
 8009b78:	4418      	add	r0, r3
 8009b7a:	f010 001f 	ands.w	r0, r0, #31
 8009b7e:	f000 8081 	beq.w	8009c84 <_dtoa_r+0x82c>
 8009b82:	f1c0 0220 	rsb	r2, r0, #32
 8009b86:	2a04      	cmp	r2, #4
 8009b88:	dd73      	ble.n	8009c72 <_dtoa_r+0x81a>
 8009b8a:	9b04      	ldr	r3, [sp, #16]
 8009b8c:	f1c0 001c 	rsb	r0, r0, #28
 8009b90:	4403      	add	r3, r0
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	9b06      	ldr	r3, [sp, #24]
 8009b96:	4406      	add	r6, r0
 8009b98:	4403      	add	r3, r0
 8009b9a:	9306      	str	r3, [sp, #24]
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	dd05      	ble.n	8009bae <_dtoa_r+0x756>
 8009ba2:	9901      	ldr	r1, [sp, #4]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4648      	mov	r0, r9
 8009ba8:	f000 fd1c 	bl	800a5e4 <__lshift>
 8009bac:	9001      	str	r0, [sp, #4]
 8009bae:	9b06      	ldr	r3, [sp, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dd05      	ble.n	8009bc0 <_dtoa_r+0x768>
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	4648      	mov	r0, r9
 8009bba:	f000 fd13 	bl	800a5e4 <__lshift>
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d060      	beq.n	8009c88 <_dtoa_r+0x830>
 8009bc6:	9801      	ldr	r0, [sp, #4]
 8009bc8:	4621      	mov	r1, r4
 8009bca:	f000 fd77 	bl	800a6bc <__mcmp>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	da5a      	bge.n	8009c88 <_dtoa_r+0x830>
 8009bd2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8009bd6:	9305      	str	r3, [sp, #20]
 8009bd8:	9901      	ldr	r1, [sp, #4]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	220a      	movs	r2, #10
 8009bde:	4648      	mov	r0, r9
 8009be0:	f000 fb5c 	bl	800a29c <__multadd>
 8009be4:	9b08      	ldr	r3, [sp, #32]
 8009be6:	9001      	str	r0, [sp, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 8177 	beq.w	8009edc <_dtoa_r+0xa84>
 8009bee:	4629      	mov	r1, r5
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	220a      	movs	r2, #10
 8009bf4:	4648      	mov	r0, r9
 8009bf6:	f000 fb51 	bl	800a29c <__multadd>
 8009bfa:	f1bb 0f00 	cmp.w	fp, #0
 8009bfe:	4605      	mov	r5, r0
 8009c00:	dc6e      	bgt.n	8009ce0 <_dtoa_r+0x888>
 8009c02:	9b07      	ldr	r3, [sp, #28]
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	dc48      	bgt.n	8009c9a <_dtoa_r+0x842>
 8009c08:	e06a      	b.n	8009ce0 <_dtoa_r+0x888>
 8009c0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c10:	e739      	b.n	8009a86 <_dtoa_r+0x62e>
 8009c12:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	db07      	blt.n	8009c2a <_dtoa_r+0x7d2>
 8009c1a:	f1ba 0f00 	cmp.w	sl, #0
 8009c1e:	eba3 0404 	sub.w	r4, r3, r4
 8009c22:	db0b      	blt.n	8009c3c <_dtoa_r+0x7e4>
 8009c24:	9e04      	ldr	r6, [sp, #16]
 8009c26:	4652      	mov	r2, sl
 8009c28:	e72f      	b.n	8009a8a <_dtoa_r+0x632>
 8009c2a:	1ae2      	subs	r2, r4, r3
 8009c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c2e:	9e04      	ldr	r6, [sp, #16]
 8009c30:	4413      	add	r3, r2
 8009c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c34:	4652      	mov	r2, sl
 8009c36:	4623      	mov	r3, r4
 8009c38:	2400      	movs	r4, #0
 8009c3a:	e726      	b.n	8009a8a <_dtoa_r+0x632>
 8009c3c:	9a04      	ldr	r2, [sp, #16]
 8009c3e:	eba2 060a 	sub.w	r6, r2, sl
 8009c42:	2200      	movs	r2, #0
 8009c44:	e721      	b.n	8009a8a <_dtoa_r+0x632>
 8009c46:	9e04      	ldr	r6, [sp, #16]
 8009c48:	9d08      	ldr	r5, [sp, #32]
 8009c4a:	461c      	mov	r4, r3
 8009c4c:	e72a      	b.n	8009aa4 <_dtoa_r+0x64c>
 8009c4e:	9a01      	ldr	r2, [sp, #4]
 8009c50:	9205      	str	r2, [sp, #20]
 8009c52:	e752      	b.n	8009afa <_dtoa_r+0x6a2>
 8009c54:	9901      	ldr	r1, [sp, #4]
 8009c56:	461a      	mov	r2, r3
 8009c58:	e751      	b.n	8009afe <_dtoa_r+0x6a6>
 8009c5a:	9b05      	ldr	r3, [sp, #20]
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	e752      	b.n	8009b06 <_dtoa_r+0x6ae>
 8009c60:	2300      	movs	r3, #0
 8009c62:	e77b      	b.n	8009b5c <_dtoa_r+0x704>
 8009c64:	9b02      	ldr	r3, [sp, #8]
 8009c66:	e779      	b.n	8009b5c <_dtoa_r+0x704>
 8009c68:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009c6a:	e778      	b.n	8009b5e <_dtoa_r+0x706>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c70:	e779      	b.n	8009b66 <_dtoa_r+0x70e>
 8009c72:	d093      	beq.n	8009b9c <_dtoa_r+0x744>
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	321c      	adds	r2, #28
 8009c78:	4413      	add	r3, r2
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	9b06      	ldr	r3, [sp, #24]
 8009c7e:	4416      	add	r6, r2
 8009c80:	4413      	add	r3, r2
 8009c82:	e78a      	b.n	8009b9a <_dtoa_r+0x742>
 8009c84:	4602      	mov	r2, r0
 8009c86:	e7f5      	b.n	8009c74 <_dtoa_r+0x81c>
 8009c88:	f1ba 0f00 	cmp.w	sl, #0
 8009c8c:	f8cd 8014 	str.w	r8, [sp, #20]
 8009c90:	46d3      	mov	fp, sl
 8009c92:	dc21      	bgt.n	8009cd8 <_dtoa_r+0x880>
 8009c94:	9b07      	ldr	r3, [sp, #28]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	dd1e      	ble.n	8009cd8 <_dtoa_r+0x880>
 8009c9a:	f1bb 0f00 	cmp.w	fp, #0
 8009c9e:	f47f addc 	bne.w	800985a <_dtoa_r+0x402>
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	465b      	mov	r3, fp
 8009ca6:	2205      	movs	r2, #5
 8009ca8:	4648      	mov	r0, r9
 8009caa:	f000 faf7 	bl	800a29c <__multadd>
 8009cae:	4601      	mov	r1, r0
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	9801      	ldr	r0, [sp, #4]
 8009cb4:	f000 fd02 	bl	800a6bc <__mcmp>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	f77f adce 	ble.w	800985a <_dtoa_r+0x402>
 8009cbe:	463e      	mov	r6, r7
 8009cc0:	2331      	movs	r3, #49	@ 0x31
 8009cc2:	f806 3b01 	strb.w	r3, [r6], #1
 8009cc6:	9b05      	ldr	r3, [sp, #20]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	9305      	str	r3, [sp, #20]
 8009ccc:	e5c9      	b.n	8009862 <_dtoa_r+0x40a>
 8009cce:	f8cd 8014 	str.w	r8, [sp, #20]
 8009cd2:	4654      	mov	r4, sl
 8009cd4:	4625      	mov	r5, r4
 8009cd6:	e7f2      	b.n	8009cbe <_dtoa_r+0x866>
 8009cd8:	9b08      	ldr	r3, [sp, #32]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 8102 	beq.w	8009ee4 <_dtoa_r+0xa8c>
 8009ce0:	2e00      	cmp	r6, #0
 8009ce2:	dd05      	ble.n	8009cf0 <_dtoa_r+0x898>
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	4632      	mov	r2, r6
 8009ce8:	4648      	mov	r0, r9
 8009cea:	f000 fc7b 	bl	800a5e4 <__lshift>
 8009cee:	4605      	mov	r5, r0
 8009cf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d058      	beq.n	8009da8 <_dtoa_r+0x950>
 8009cf6:	6869      	ldr	r1, [r5, #4]
 8009cf8:	4648      	mov	r0, r9
 8009cfa:	f000 fa6d 	bl	800a1d8 <_Balloc>
 8009cfe:	4606      	mov	r6, r0
 8009d00:	b928      	cbnz	r0, 8009d0e <_dtoa_r+0x8b6>
 8009d02:	4b82      	ldr	r3, [pc, #520]	@ (8009f0c <_dtoa_r+0xab4>)
 8009d04:	4602      	mov	r2, r0
 8009d06:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d0a:	f7ff bbbe 	b.w	800948a <_dtoa_r+0x32>
 8009d0e:	692a      	ldr	r2, [r5, #16]
 8009d10:	3202      	adds	r2, #2
 8009d12:	0092      	lsls	r2, r2, #2
 8009d14:	f105 010c 	add.w	r1, r5, #12
 8009d18:	300c      	adds	r0, #12
 8009d1a:	f000 fe71 	bl	800aa00 <memcpy>
 8009d1e:	2201      	movs	r2, #1
 8009d20:	4631      	mov	r1, r6
 8009d22:	4648      	mov	r0, r9
 8009d24:	f000 fc5e 	bl	800a5e4 <__lshift>
 8009d28:	1c7b      	adds	r3, r7, #1
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	eb07 030b 	add.w	r3, r7, fp
 8009d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d32:	9b02      	ldr	r3, [sp, #8]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	46a8      	mov	r8, r5
 8009d3a:	9308      	str	r3, [sp, #32]
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	9b04      	ldr	r3, [sp, #16]
 8009d40:	9801      	ldr	r0, [sp, #4]
 8009d42:	4621      	mov	r1, r4
 8009d44:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009d48:	f7ff fafc 	bl	8009344 <quorem>
 8009d4c:	4641      	mov	r1, r8
 8009d4e:	9002      	str	r0, [sp, #8]
 8009d50:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009d54:	9801      	ldr	r0, [sp, #4]
 8009d56:	f000 fcb1 	bl	800a6bc <__mcmp>
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	9006      	str	r0, [sp, #24]
 8009d5e:	4621      	mov	r1, r4
 8009d60:	4648      	mov	r0, r9
 8009d62:	f000 fcc7 	bl	800a6f4 <__mdiff>
 8009d66:	68c2      	ldr	r2, [r0, #12]
 8009d68:	4606      	mov	r6, r0
 8009d6a:	b9fa      	cbnz	r2, 8009dac <_dtoa_r+0x954>
 8009d6c:	4601      	mov	r1, r0
 8009d6e:	9801      	ldr	r0, [sp, #4]
 8009d70:	f000 fca4 	bl	800a6bc <__mcmp>
 8009d74:	4602      	mov	r2, r0
 8009d76:	4631      	mov	r1, r6
 8009d78:	4648      	mov	r0, r9
 8009d7a:	920a      	str	r2, [sp, #40]	@ 0x28
 8009d7c:	f000 fa6c 	bl	800a258 <_Bfree>
 8009d80:	9b07      	ldr	r3, [sp, #28]
 8009d82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d84:	9e04      	ldr	r6, [sp, #16]
 8009d86:	ea42 0103 	orr.w	r1, r2, r3
 8009d8a:	9b08      	ldr	r3, [sp, #32]
 8009d8c:	4319      	orrs	r1, r3
 8009d8e:	d10f      	bne.n	8009db0 <_dtoa_r+0x958>
 8009d90:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009d94:	d028      	beq.n	8009de8 <_dtoa_r+0x990>
 8009d96:	9b06      	ldr	r3, [sp, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	dd02      	ble.n	8009da2 <_dtoa_r+0x94a>
 8009d9c:	9b02      	ldr	r3, [sp, #8]
 8009d9e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009da2:	f88b a000 	strb.w	sl, [fp]
 8009da6:	e55e      	b.n	8009866 <_dtoa_r+0x40e>
 8009da8:	4628      	mov	r0, r5
 8009daa:	e7bd      	b.n	8009d28 <_dtoa_r+0x8d0>
 8009dac:	2201      	movs	r2, #1
 8009dae:	e7e2      	b.n	8009d76 <_dtoa_r+0x91e>
 8009db0:	9b06      	ldr	r3, [sp, #24]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	db04      	blt.n	8009dc0 <_dtoa_r+0x968>
 8009db6:	9907      	ldr	r1, [sp, #28]
 8009db8:	430b      	orrs	r3, r1
 8009dba:	9908      	ldr	r1, [sp, #32]
 8009dbc:	430b      	orrs	r3, r1
 8009dbe:	d120      	bne.n	8009e02 <_dtoa_r+0x9aa>
 8009dc0:	2a00      	cmp	r2, #0
 8009dc2:	ddee      	ble.n	8009da2 <_dtoa_r+0x94a>
 8009dc4:	9901      	ldr	r1, [sp, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	4648      	mov	r0, r9
 8009dca:	f000 fc0b 	bl	800a5e4 <__lshift>
 8009dce:	4621      	mov	r1, r4
 8009dd0:	9001      	str	r0, [sp, #4]
 8009dd2:	f000 fc73 	bl	800a6bc <__mcmp>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	dc03      	bgt.n	8009de2 <_dtoa_r+0x98a>
 8009dda:	d1e2      	bne.n	8009da2 <_dtoa_r+0x94a>
 8009ddc:	f01a 0f01 	tst.w	sl, #1
 8009de0:	d0df      	beq.n	8009da2 <_dtoa_r+0x94a>
 8009de2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009de6:	d1d9      	bne.n	8009d9c <_dtoa_r+0x944>
 8009de8:	2339      	movs	r3, #57	@ 0x39
 8009dea:	f88b 3000 	strb.w	r3, [fp]
 8009dee:	4633      	mov	r3, r6
 8009df0:	461e      	mov	r6, r3
 8009df2:	3b01      	subs	r3, #1
 8009df4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009df8:	2a39      	cmp	r2, #57	@ 0x39
 8009dfa:	d052      	beq.n	8009ea2 <_dtoa_r+0xa4a>
 8009dfc:	3201      	adds	r2, #1
 8009dfe:	701a      	strb	r2, [r3, #0]
 8009e00:	e531      	b.n	8009866 <_dtoa_r+0x40e>
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	dd07      	ble.n	8009e16 <_dtoa_r+0x9be>
 8009e06:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009e0a:	d0ed      	beq.n	8009de8 <_dtoa_r+0x990>
 8009e0c:	f10a 0301 	add.w	r3, sl, #1
 8009e10:	f88b 3000 	strb.w	r3, [fp]
 8009e14:	e527      	b.n	8009866 <_dtoa_r+0x40e>
 8009e16:	9b04      	ldr	r3, [sp, #16]
 8009e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e1a:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d029      	beq.n	8009e76 <_dtoa_r+0xa1e>
 8009e22:	9901      	ldr	r1, [sp, #4]
 8009e24:	2300      	movs	r3, #0
 8009e26:	220a      	movs	r2, #10
 8009e28:	4648      	mov	r0, r9
 8009e2a:	f000 fa37 	bl	800a29c <__multadd>
 8009e2e:	45a8      	cmp	r8, r5
 8009e30:	9001      	str	r0, [sp, #4]
 8009e32:	f04f 0300 	mov.w	r3, #0
 8009e36:	f04f 020a 	mov.w	r2, #10
 8009e3a:	4641      	mov	r1, r8
 8009e3c:	4648      	mov	r0, r9
 8009e3e:	d107      	bne.n	8009e50 <_dtoa_r+0x9f8>
 8009e40:	f000 fa2c 	bl	800a29c <__multadd>
 8009e44:	4680      	mov	r8, r0
 8009e46:	4605      	mov	r5, r0
 8009e48:	9b04      	ldr	r3, [sp, #16]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	9304      	str	r3, [sp, #16]
 8009e4e:	e776      	b.n	8009d3e <_dtoa_r+0x8e6>
 8009e50:	f000 fa24 	bl	800a29c <__multadd>
 8009e54:	4629      	mov	r1, r5
 8009e56:	4680      	mov	r8, r0
 8009e58:	2300      	movs	r3, #0
 8009e5a:	220a      	movs	r2, #10
 8009e5c:	4648      	mov	r0, r9
 8009e5e:	f000 fa1d 	bl	800a29c <__multadd>
 8009e62:	4605      	mov	r5, r0
 8009e64:	e7f0      	b.n	8009e48 <_dtoa_r+0x9f0>
 8009e66:	f1bb 0f00 	cmp.w	fp, #0
 8009e6a:	bfcc      	ite	gt
 8009e6c:	465e      	movgt	r6, fp
 8009e6e:	2601      	movle	r6, #1
 8009e70:	443e      	add	r6, r7
 8009e72:	f04f 0800 	mov.w	r8, #0
 8009e76:	9901      	ldr	r1, [sp, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	4648      	mov	r0, r9
 8009e7c:	f000 fbb2 	bl	800a5e4 <__lshift>
 8009e80:	4621      	mov	r1, r4
 8009e82:	9001      	str	r0, [sp, #4]
 8009e84:	f000 fc1a 	bl	800a6bc <__mcmp>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	dcb0      	bgt.n	8009dee <_dtoa_r+0x996>
 8009e8c:	d102      	bne.n	8009e94 <_dtoa_r+0xa3c>
 8009e8e:	f01a 0f01 	tst.w	sl, #1
 8009e92:	d1ac      	bne.n	8009dee <_dtoa_r+0x996>
 8009e94:	4633      	mov	r3, r6
 8009e96:	461e      	mov	r6, r3
 8009e98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e9c:	2a30      	cmp	r2, #48	@ 0x30
 8009e9e:	d0fa      	beq.n	8009e96 <_dtoa_r+0xa3e>
 8009ea0:	e4e1      	b.n	8009866 <_dtoa_r+0x40e>
 8009ea2:	429f      	cmp	r7, r3
 8009ea4:	d1a4      	bne.n	8009df0 <_dtoa_r+0x998>
 8009ea6:	9b05      	ldr	r3, [sp, #20]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	9305      	str	r3, [sp, #20]
 8009eac:	2331      	movs	r3, #49	@ 0x31
 8009eae:	703b      	strb	r3, [r7, #0]
 8009eb0:	e4d9      	b.n	8009866 <_dtoa_r+0x40e>
 8009eb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009eb4:	4f16      	ldr	r7, [pc, #88]	@ (8009f10 <_dtoa_r+0xab8>)
 8009eb6:	b11b      	cbz	r3, 8009ec0 <_dtoa_r+0xa68>
 8009eb8:	f107 0308 	add.w	r3, r7, #8
 8009ebc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	b011      	add	sp, #68	@ 0x44
 8009ec4:	ecbd 8b02 	vpop	{d8}
 8009ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ecc:	9b07      	ldr	r3, [sp, #28]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	f77f ae2c 	ble.w	8009b2c <_dtoa_r+0x6d4>
 8009ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ed6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ed8:	2001      	movs	r0, #1
 8009eda:	e64c      	b.n	8009b76 <_dtoa_r+0x71e>
 8009edc:	f1bb 0f00 	cmp.w	fp, #0
 8009ee0:	f77f aed8 	ble.w	8009c94 <_dtoa_r+0x83c>
 8009ee4:	463e      	mov	r6, r7
 8009ee6:	9801      	ldr	r0, [sp, #4]
 8009ee8:	4621      	mov	r1, r4
 8009eea:	f7ff fa2b 	bl	8009344 <quorem>
 8009eee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009ef2:	f806 ab01 	strb.w	sl, [r6], #1
 8009ef6:	1bf2      	subs	r2, r6, r7
 8009ef8:	4593      	cmp	fp, r2
 8009efa:	ddb4      	ble.n	8009e66 <_dtoa_r+0xa0e>
 8009efc:	9901      	ldr	r1, [sp, #4]
 8009efe:	2300      	movs	r3, #0
 8009f00:	220a      	movs	r2, #10
 8009f02:	4648      	mov	r0, r9
 8009f04:	f000 f9ca 	bl	800a29c <__multadd>
 8009f08:	9001      	str	r0, [sp, #4]
 8009f0a:	e7ec      	b.n	8009ee6 <_dtoa_r+0xa8e>
 8009f0c:	0800b1a0 	.word	0x0800b1a0
 8009f10:	0800b124 	.word	0x0800b124

08009f14 <malloc>:
 8009f14:	4b02      	ldr	r3, [pc, #8]	@ (8009f20 <malloc+0xc>)
 8009f16:	4601      	mov	r1, r0
 8009f18:	6818      	ldr	r0, [r3, #0]
 8009f1a:	f000 b825 	b.w	8009f68 <_malloc_r>
 8009f1e:	bf00      	nop
 8009f20:	2400001c 	.word	0x2400001c

08009f24 <sbrk_aligned>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	4e0f      	ldr	r6, [pc, #60]	@ (8009f64 <sbrk_aligned+0x40>)
 8009f28:	460c      	mov	r4, r1
 8009f2a:	6831      	ldr	r1, [r6, #0]
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	b911      	cbnz	r1, 8009f36 <sbrk_aligned+0x12>
 8009f30:	f000 fd34 	bl	800a99c <_sbrk_r>
 8009f34:	6030      	str	r0, [r6, #0]
 8009f36:	4621      	mov	r1, r4
 8009f38:	4628      	mov	r0, r5
 8009f3a:	f000 fd2f 	bl	800a99c <_sbrk_r>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	d103      	bne.n	8009f4a <sbrk_aligned+0x26>
 8009f42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009f46:	4620      	mov	r0, r4
 8009f48:	bd70      	pop	{r4, r5, r6, pc}
 8009f4a:	1cc4      	adds	r4, r0, #3
 8009f4c:	f024 0403 	bic.w	r4, r4, #3
 8009f50:	42a0      	cmp	r0, r4
 8009f52:	d0f8      	beq.n	8009f46 <sbrk_aligned+0x22>
 8009f54:	1a21      	subs	r1, r4, r0
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 fd20 	bl	800a99c <_sbrk_r>
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d1f2      	bne.n	8009f46 <sbrk_aligned+0x22>
 8009f60:	e7ef      	b.n	8009f42 <sbrk_aligned+0x1e>
 8009f62:	bf00      	nop
 8009f64:	240006e8 	.word	0x240006e8

08009f68 <_malloc_r>:
 8009f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f6c:	1ccd      	adds	r5, r1, #3
 8009f6e:	f025 0503 	bic.w	r5, r5, #3
 8009f72:	3508      	adds	r5, #8
 8009f74:	2d0c      	cmp	r5, #12
 8009f76:	bf38      	it	cc
 8009f78:	250c      	movcc	r5, #12
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	db01      	blt.n	8009f84 <_malloc_r+0x1c>
 8009f80:	42a9      	cmp	r1, r5
 8009f82:	d904      	bls.n	8009f8e <_malloc_r+0x26>
 8009f84:	230c      	movs	r3, #12
 8009f86:	6033      	str	r3, [r6, #0]
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a064 <_malloc_r+0xfc>
 8009f92:	f000 f915 	bl	800a1c0 <__malloc_lock>
 8009f96:	f8d8 3000 	ldr.w	r3, [r8]
 8009f9a:	461c      	mov	r4, r3
 8009f9c:	bb44      	cbnz	r4, 8009ff0 <_malloc_r+0x88>
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7ff ffbf 	bl	8009f24 <sbrk_aligned>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	4604      	mov	r4, r0
 8009faa:	d158      	bne.n	800a05e <_malloc_r+0xf6>
 8009fac:	f8d8 4000 	ldr.w	r4, [r8]
 8009fb0:	4627      	mov	r7, r4
 8009fb2:	2f00      	cmp	r7, #0
 8009fb4:	d143      	bne.n	800a03e <_malloc_r+0xd6>
 8009fb6:	2c00      	cmp	r4, #0
 8009fb8:	d04b      	beq.n	800a052 <_malloc_r+0xea>
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	eb04 0903 	add.w	r9, r4, r3
 8009fc4:	f000 fcea 	bl	800a99c <_sbrk_r>
 8009fc8:	4581      	cmp	r9, r0
 8009fca:	d142      	bne.n	800a052 <_malloc_r+0xea>
 8009fcc:	6821      	ldr	r1, [r4, #0]
 8009fce:	1a6d      	subs	r5, r5, r1
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7ff ffa6 	bl	8009f24 <sbrk_aligned>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d03a      	beq.n	800a052 <_malloc_r+0xea>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	442b      	add	r3, r5
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	bb62      	cbnz	r2, 800a044 <_malloc_r+0xdc>
 8009fea:	f8c8 7000 	str.w	r7, [r8]
 8009fee:	e00f      	b.n	800a010 <_malloc_r+0xa8>
 8009ff0:	6822      	ldr	r2, [r4, #0]
 8009ff2:	1b52      	subs	r2, r2, r5
 8009ff4:	d420      	bmi.n	800a038 <_malloc_r+0xd0>
 8009ff6:	2a0b      	cmp	r2, #11
 8009ff8:	d917      	bls.n	800a02a <_malloc_r+0xc2>
 8009ffa:	1961      	adds	r1, r4, r5
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	6025      	str	r5, [r4, #0]
 800a000:	bf18      	it	ne
 800a002:	6059      	strne	r1, [r3, #4]
 800a004:	6863      	ldr	r3, [r4, #4]
 800a006:	bf08      	it	eq
 800a008:	f8c8 1000 	streq.w	r1, [r8]
 800a00c:	5162      	str	r2, [r4, r5]
 800a00e:	604b      	str	r3, [r1, #4]
 800a010:	4630      	mov	r0, r6
 800a012:	f000 f8db 	bl	800a1cc <__malloc_unlock>
 800a016:	f104 000b 	add.w	r0, r4, #11
 800a01a:	1d23      	adds	r3, r4, #4
 800a01c:	f020 0007 	bic.w	r0, r0, #7
 800a020:	1ac2      	subs	r2, r0, r3
 800a022:	bf1c      	itt	ne
 800a024:	1a1b      	subne	r3, r3, r0
 800a026:	50a3      	strne	r3, [r4, r2]
 800a028:	e7af      	b.n	8009f8a <_malloc_r+0x22>
 800a02a:	6862      	ldr	r2, [r4, #4]
 800a02c:	42a3      	cmp	r3, r4
 800a02e:	bf0c      	ite	eq
 800a030:	f8c8 2000 	streq.w	r2, [r8]
 800a034:	605a      	strne	r2, [r3, #4]
 800a036:	e7eb      	b.n	800a010 <_malloc_r+0xa8>
 800a038:	4623      	mov	r3, r4
 800a03a:	6864      	ldr	r4, [r4, #4]
 800a03c:	e7ae      	b.n	8009f9c <_malloc_r+0x34>
 800a03e:	463c      	mov	r4, r7
 800a040:	687f      	ldr	r7, [r7, #4]
 800a042:	e7b6      	b.n	8009fb2 <_malloc_r+0x4a>
 800a044:	461a      	mov	r2, r3
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	42a3      	cmp	r3, r4
 800a04a:	d1fb      	bne.n	800a044 <_malloc_r+0xdc>
 800a04c:	2300      	movs	r3, #0
 800a04e:	6053      	str	r3, [r2, #4]
 800a050:	e7de      	b.n	800a010 <_malloc_r+0xa8>
 800a052:	230c      	movs	r3, #12
 800a054:	6033      	str	r3, [r6, #0]
 800a056:	4630      	mov	r0, r6
 800a058:	f000 f8b8 	bl	800a1cc <__malloc_unlock>
 800a05c:	e794      	b.n	8009f88 <_malloc_r+0x20>
 800a05e:	6005      	str	r5, [r0, #0]
 800a060:	e7d6      	b.n	800a010 <_malloc_r+0xa8>
 800a062:	bf00      	nop
 800a064:	240006ec 	.word	0x240006ec

0800a068 <__sflush_r>:
 800a068:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a070:	0716      	lsls	r6, r2, #28
 800a072:	4605      	mov	r5, r0
 800a074:	460c      	mov	r4, r1
 800a076:	d454      	bmi.n	800a122 <__sflush_r+0xba>
 800a078:	684b      	ldr	r3, [r1, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	dc02      	bgt.n	800a084 <__sflush_r+0x1c>
 800a07e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a080:	2b00      	cmp	r3, #0
 800a082:	dd48      	ble.n	800a116 <__sflush_r+0xae>
 800a084:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a086:	2e00      	cmp	r6, #0
 800a088:	d045      	beq.n	800a116 <__sflush_r+0xae>
 800a08a:	2300      	movs	r3, #0
 800a08c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a090:	682f      	ldr	r7, [r5, #0]
 800a092:	6a21      	ldr	r1, [r4, #32]
 800a094:	602b      	str	r3, [r5, #0]
 800a096:	d030      	beq.n	800a0fa <__sflush_r+0x92>
 800a098:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	0759      	lsls	r1, r3, #29
 800a09e:	d505      	bpl.n	800a0ac <__sflush_r+0x44>
 800a0a0:	6863      	ldr	r3, [r4, #4]
 800a0a2:	1ad2      	subs	r2, r2, r3
 800a0a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0a6:	b10b      	cbz	r3, 800a0ac <__sflush_r+0x44>
 800a0a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0aa:	1ad2      	subs	r2, r2, r3
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0b0:	6a21      	ldr	r1, [r4, #32]
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	47b0      	blx	r6
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	d106      	bne.n	800a0ca <__sflush_r+0x62>
 800a0bc:	6829      	ldr	r1, [r5, #0]
 800a0be:	291d      	cmp	r1, #29
 800a0c0:	d82b      	bhi.n	800a11a <__sflush_r+0xb2>
 800a0c2:	4a2a      	ldr	r2, [pc, #168]	@ (800a16c <__sflush_r+0x104>)
 800a0c4:	40ca      	lsrs	r2, r1
 800a0c6:	07d6      	lsls	r6, r2, #31
 800a0c8:	d527      	bpl.n	800a11a <__sflush_r+0xb2>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	6062      	str	r2, [r4, #4]
 800a0ce:	04d9      	lsls	r1, r3, #19
 800a0d0:	6922      	ldr	r2, [r4, #16]
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	d504      	bpl.n	800a0e0 <__sflush_r+0x78>
 800a0d6:	1c42      	adds	r2, r0, #1
 800a0d8:	d101      	bne.n	800a0de <__sflush_r+0x76>
 800a0da:	682b      	ldr	r3, [r5, #0]
 800a0dc:	b903      	cbnz	r3, 800a0e0 <__sflush_r+0x78>
 800a0de:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0e2:	602f      	str	r7, [r5, #0]
 800a0e4:	b1b9      	cbz	r1, 800a116 <__sflush_r+0xae>
 800a0e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0ea:	4299      	cmp	r1, r3
 800a0ec:	d002      	beq.n	800a0f4 <__sflush_r+0x8c>
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f000 fcc6 	bl	800aa80 <_free_r>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0f8:	e00d      	b.n	800a116 <__sflush_r+0xae>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b0      	blx	r6
 800a100:	4602      	mov	r2, r0
 800a102:	1c50      	adds	r0, r2, #1
 800a104:	d1c9      	bne.n	800a09a <__sflush_r+0x32>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0c6      	beq.n	800a09a <__sflush_r+0x32>
 800a10c:	2b1d      	cmp	r3, #29
 800a10e:	d001      	beq.n	800a114 <__sflush_r+0xac>
 800a110:	2b16      	cmp	r3, #22
 800a112:	d11e      	bne.n	800a152 <__sflush_r+0xea>
 800a114:	602f      	str	r7, [r5, #0]
 800a116:	2000      	movs	r0, #0
 800a118:	e022      	b.n	800a160 <__sflush_r+0xf8>
 800a11a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a11e:	b21b      	sxth	r3, r3
 800a120:	e01b      	b.n	800a15a <__sflush_r+0xf2>
 800a122:	690f      	ldr	r7, [r1, #16]
 800a124:	2f00      	cmp	r7, #0
 800a126:	d0f6      	beq.n	800a116 <__sflush_r+0xae>
 800a128:	0793      	lsls	r3, r2, #30
 800a12a:	680e      	ldr	r6, [r1, #0]
 800a12c:	bf08      	it	eq
 800a12e:	694b      	ldreq	r3, [r1, #20]
 800a130:	600f      	str	r7, [r1, #0]
 800a132:	bf18      	it	ne
 800a134:	2300      	movne	r3, #0
 800a136:	eba6 0807 	sub.w	r8, r6, r7
 800a13a:	608b      	str	r3, [r1, #8]
 800a13c:	f1b8 0f00 	cmp.w	r8, #0
 800a140:	dde9      	ble.n	800a116 <__sflush_r+0xae>
 800a142:	6a21      	ldr	r1, [r4, #32]
 800a144:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a146:	4643      	mov	r3, r8
 800a148:	463a      	mov	r2, r7
 800a14a:	4628      	mov	r0, r5
 800a14c:	47b0      	blx	r6
 800a14e:	2800      	cmp	r0, #0
 800a150:	dc08      	bgt.n	800a164 <__sflush_r+0xfc>
 800a152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a15a:	81a3      	strh	r3, [r4, #12]
 800a15c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a164:	4407      	add	r7, r0
 800a166:	eba8 0800 	sub.w	r8, r8, r0
 800a16a:	e7e7      	b.n	800a13c <__sflush_r+0xd4>
 800a16c:	20400001 	.word	0x20400001

0800a170 <_fflush_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	690b      	ldr	r3, [r1, #16]
 800a174:	4605      	mov	r5, r0
 800a176:	460c      	mov	r4, r1
 800a178:	b913      	cbnz	r3, 800a180 <_fflush_r+0x10>
 800a17a:	2500      	movs	r5, #0
 800a17c:	4628      	mov	r0, r5
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
 800a180:	b118      	cbz	r0, 800a18a <_fflush_r+0x1a>
 800a182:	6a03      	ldr	r3, [r0, #32]
 800a184:	b90b      	cbnz	r3, 800a18a <_fflush_r+0x1a>
 800a186:	f7ff f86d 	bl	8009264 <__sinit>
 800a18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d0f3      	beq.n	800a17a <_fflush_r+0xa>
 800a192:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a194:	07d0      	lsls	r0, r2, #31
 800a196:	d404      	bmi.n	800a1a2 <_fflush_r+0x32>
 800a198:	0599      	lsls	r1, r3, #22
 800a19a:	d402      	bmi.n	800a1a2 <_fflush_r+0x32>
 800a19c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a19e:	f7ff f8ca 	bl	8009336 <__retarget_lock_acquire_recursive>
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	f7ff ff5f 	bl	800a068 <__sflush_r>
 800a1aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1ac:	07da      	lsls	r2, r3, #31
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	d4e4      	bmi.n	800a17c <_fflush_r+0xc>
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	059b      	lsls	r3, r3, #22
 800a1b6:	d4e1      	bmi.n	800a17c <_fflush_r+0xc>
 800a1b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ba:	f7ff f8bd 	bl	8009338 <__retarget_lock_release_recursive>
 800a1be:	e7dd      	b.n	800a17c <_fflush_r+0xc>

0800a1c0 <__malloc_lock>:
 800a1c0:	4801      	ldr	r0, [pc, #4]	@ (800a1c8 <__malloc_lock+0x8>)
 800a1c2:	f7ff b8b8 	b.w	8009336 <__retarget_lock_acquire_recursive>
 800a1c6:	bf00      	nop
 800a1c8:	240006e4 	.word	0x240006e4

0800a1cc <__malloc_unlock>:
 800a1cc:	4801      	ldr	r0, [pc, #4]	@ (800a1d4 <__malloc_unlock+0x8>)
 800a1ce:	f7ff b8b3 	b.w	8009338 <__retarget_lock_release_recursive>
 800a1d2:	bf00      	nop
 800a1d4:	240006e4 	.word	0x240006e4

0800a1d8 <_Balloc>:
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	69c6      	ldr	r6, [r0, #28]
 800a1dc:	4604      	mov	r4, r0
 800a1de:	460d      	mov	r5, r1
 800a1e0:	b976      	cbnz	r6, 800a200 <_Balloc+0x28>
 800a1e2:	2010      	movs	r0, #16
 800a1e4:	f7ff fe96 	bl	8009f14 <malloc>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	61e0      	str	r0, [r4, #28]
 800a1ec:	b920      	cbnz	r0, 800a1f8 <_Balloc+0x20>
 800a1ee:	4b18      	ldr	r3, [pc, #96]	@ (800a250 <_Balloc+0x78>)
 800a1f0:	4818      	ldr	r0, [pc, #96]	@ (800a254 <_Balloc+0x7c>)
 800a1f2:	216b      	movs	r1, #107	@ 0x6b
 800a1f4:	f000 fc12 	bl	800aa1c <__assert_func>
 800a1f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1fc:	6006      	str	r6, [r0, #0]
 800a1fe:	60c6      	str	r6, [r0, #12]
 800a200:	69e6      	ldr	r6, [r4, #28]
 800a202:	68f3      	ldr	r3, [r6, #12]
 800a204:	b183      	cbz	r3, 800a228 <_Balloc+0x50>
 800a206:	69e3      	ldr	r3, [r4, #28]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a20e:	b9b8      	cbnz	r0, 800a240 <_Balloc+0x68>
 800a210:	2101      	movs	r1, #1
 800a212:	fa01 f605 	lsl.w	r6, r1, r5
 800a216:	1d72      	adds	r2, r6, #5
 800a218:	0092      	lsls	r2, r2, #2
 800a21a:	4620      	mov	r0, r4
 800a21c:	f000 fc1c 	bl	800aa58 <_calloc_r>
 800a220:	b160      	cbz	r0, 800a23c <_Balloc+0x64>
 800a222:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a226:	e00e      	b.n	800a246 <_Balloc+0x6e>
 800a228:	2221      	movs	r2, #33	@ 0x21
 800a22a:	2104      	movs	r1, #4
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 fc13 	bl	800aa58 <_calloc_r>
 800a232:	69e3      	ldr	r3, [r4, #28]
 800a234:	60f0      	str	r0, [r6, #12]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e4      	bne.n	800a206 <_Balloc+0x2e>
 800a23c:	2000      	movs	r0, #0
 800a23e:	bd70      	pop	{r4, r5, r6, pc}
 800a240:	6802      	ldr	r2, [r0, #0]
 800a242:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a246:	2300      	movs	r3, #0
 800a248:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a24c:	e7f7      	b.n	800a23e <_Balloc+0x66>
 800a24e:	bf00      	nop
 800a250:	0800b131 	.word	0x0800b131
 800a254:	0800b1b1 	.word	0x0800b1b1

0800a258 <_Bfree>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	69c6      	ldr	r6, [r0, #28]
 800a25c:	4605      	mov	r5, r0
 800a25e:	460c      	mov	r4, r1
 800a260:	b976      	cbnz	r6, 800a280 <_Bfree+0x28>
 800a262:	2010      	movs	r0, #16
 800a264:	f7ff fe56 	bl	8009f14 <malloc>
 800a268:	4602      	mov	r2, r0
 800a26a:	61e8      	str	r0, [r5, #28]
 800a26c:	b920      	cbnz	r0, 800a278 <_Bfree+0x20>
 800a26e:	4b09      	ldr	r3, [pc, #36]	@ (800a294 <_Bfree+0x3c>)
 800a270:	4809      	ldr	r0, [pc, #36]	@ (800a298 <_Bfree+0x40>)
 800a272:	218f      	movs	r1, #143	@ 0x8f
 800a274:	f000 fbd2 	bl	800aa1c <__assert_func>
 800a278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a27c:	6006      	str	r6, [r0, #0]
 800a27e:	60c6      	str	r6, [r0, #12]
 800a280:	b13c      	cbz	r4, 800a292 <_Bfree+0x3a>
 800a282:	69eb      	ldr	r3, [r5, #28]
 800a284:	6862      	ldr	r2, [r4, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a28c:	6021      	str	r1, [r4, #0]
 800a28e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a292:	bd70      	pop	{r4, r5, r6, pc}
 800a294:	0800b131 	.word	0x0800b131
 800a298:	0800b1b1 	.word	0x0800b1b1

0800a29c <__multadd>:
 800a29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a0:	690d      	ldr	r5, [r1, #16]
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	460c      	mov	r4, r1
 800a2a6:	461e      	mov	r6, r3
 800a2a8:	f101 0c14 	add.w	ip, r1, #20
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a2b2:	b299      	uxth	r1, r3
 800a2b4:	fb02 6101 	mla	r1, r2, r1, r6
 800a2b8:	0c1e      	lsrs	r6, r3, #16
 800a2ba:	0c0b      	lsrs	r3, r1, #16
 800a2bc:	fb02 3306 	mla	r3, r2, r6, r3
 800a2c0:	b289      	uxth	r1, r1
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2c8:	4285      	cmp	r5, r0
 800a2ca:	f84c 1b04 	str.w	r1, [ip], #4
 800a2ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2d2:	dcec      	bgt.n	800a2ae <__multadd+0x12>
 800a2d4:	b30e      	cbz	r6, 800a31a <__multadd+0x7e>
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	42ab      	cmp	r3, r5
 800a2da:	dc19      	bgt.n	800a310 <__multadd+0x74>
 800a2dc:	6861      	ldr	r1, [r4, #4]
 800a2de:	4638      	mov	r0, r7
 800a2e0:	3101      	adds	r1, #1
 800a2e2:	f7ff ff79 	bl	800a1d8 <_Balloc>
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	b928      	cbnz	r0, 800a2f6 <__multadd+0x5a>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a320 <__multadd+0x84>)
 800a2ee:	480d      	ldr	r0, [pc, #52]	@ (800a324 <__multadd+0x88>)
 800a2f0:	21ba      	movs	r1, #186	@ 0xba
 800a2f2:	f000 fb93 	bl	800aa1c <__assert_func>
 800a2f6:	6922      	ldr	r2, [r4, #16]
 800a2f8:	3202      	adds	r2, #2
 800a2fa:	f104 010c 	add.w	r1, r4, #12
 800a2fe:	0092      	lsls	r2, r2, #2
 800a300:	300c      	adds	r0, #12
 800a302:	f000 fb7d 	bl	800aa00 <memcpy>
 800a306:	4621      	mov	r1, r4
 800a308:	4638      	mov	r0, r7
 800a30a:	f7ff ffa5 	bl	800a258 <_Bfree>
 800a30e:	4644      	mov	r4, r8
 800a310:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a314:	3501      	adds	r5, #1
 800a316:	615e      	str	r6, [r3, #20]
 800a318:	6125      	str	r5, [r4, #16]
 800a31a:	4620      	mov	r0, r4
 800a31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a320:	0800b1a0 	.word	0x0800b1a0
 800a324:	0800b1b1 	.word	0x0800b1b1

0800a328 <__hi0bits>:
 800a328:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a32c:	4603      	mov	r3, r0
 800a32e:	bf36      	itet	cc
 800a330:	0403      	lslcc	r3, r0, #16
 800a332:	2000      	movcs	r0, #0
 800a334:	2010      	movcc	r0, #16
 800a336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a33a:	bf3c      	itt	cc
 800a33c:	021b      	lslcc	r3, r3, #8
 800a33e:	3008      	addcc	r0, #8
 800a340:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a344:	bf3c      	itt	cc
 800a346:	011b      	lslcc	r3, r3, #4
 800a348:	3004      	addcc	r0, #4
 800a34a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a34e:	bf3c      	itt	cc
 800a350:	009b      	lslcc	r3, r3, #2
 800a352:	3002      	addcc	r0, #2
 800a354:	2b00      	cmp	r3, #0
 800a356:	db05      	blt.n	800a364 <__hi0bits+0x3c>
 800a358:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a35c:	f100 0001 	add.w	r0, r0, #1
 800a360:	bf08      	it	eq
 800a362:	2020      	moveq	r0, #32
 800a364:	4770      	bx	lr

0800a366 <__lo0bits>:
 800a366:	6803      	ldr	r3, [r0, #0]
 800a368:	4602      	mov	r2, r0
 800a36a:	f013 0007 	ands.w	r0, r3, #7
 800a36e:	d00b      	beq.n	800a388 <__lo0bits+0x22>
 800a370:	07d9      	lsls	r1, r3, #31
 800a372:	d421      	bmi.n	800a3b8 <__lo0bits+0x52>
 800a374:	0798      	lsls	r0, r3, #30
 800a376:	bf49      	itett	mi
 800a378:	085b      	lsrmi	r3, r3, #1
 800a37a:	089b      	lsrpl	r3, r3, #2
 800a37c:	2001      	movmi	r0, #1
 800a37e:	6013      	strmi	r3, [r2, #0]
 800a380:	bf5c      	itt	pl
 800a382:	6013      	strpl	r3, [r2, #0]
 800a384:	2002      	movpl	r0, #2
 800a386:	4770      	bx	lr
 800a388:	b299      	uxth	r1, r3
 800a38a:	b909      	cbnz	r1, 800a390 <__lo0bits+0x2a>
 800a38c:	0c1b      	lsrs	r3, r3, #16
 800a38e:	2010      	movs	r0, #16
 800a390:	b2d9      	uxtb	r1, r3
 800a392:	b909      	cbnz	r1, 800a398 <__lo0bits+0x32>
 800a394:	3008      	adds	r0, #8
 800a396:	0a1b      	lsrs	r3, r3, #8
 800a398:	0719      	lsls	r1, r3, #28
 800a39a:	bf04      	itt	eq
 800a39c:	091b      	lsreq	r3, r3, #4
 800a39e:	3004      	addeq	r0, #4
 800a3a0:	0799      	lsls	r1, r3, #30
 800a3a2:	bf04      	itt	eq
 800a3a4:	089b      	lsreq	r3, r3, #2
 800a3a6:	3002      	addeq	r0, #2
 800a3a8:	07d9      	lsls	r1, r3, #31
 800a3aa:	d403      	bmi.n	800a3b4 <__lo0bits+0x4e>
 800a3ac:	085b      	lsrs	r3, r3, #1
 800a3ae:	f100 0001 	add.w	r0, r0, #1
 800a3b2:	d003      	beq.n	800a3bc <__lo0bits+0x56>
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	4770      	bx	lr
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	4770      	bx	lr
 800a3bc:	2020      	movs	r0, #32
 800a3be:	4770      	bx	lr

0800a3c0 <__i2b>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	2101      	movs	r1, #1
 800a3c6:	f7ff ff07 	bl	800a1d8 <_Balloc>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	b928      	cbnz	r0, 800a3da <__i2b+0x1a>
 800a3ce:	4b05      	ldr	r3, [pc, #20]	@ (800a3e4 <__i2b+0x24>)
 800a3d0:	4805      	ldr	r0, [pc, #20]	@ (800a3e8 <__i2b+0x28>)
 800a3d2:	f240 1145 	movw	r1, #325	@ 0x145
 800a3d6:	f000 fb21 	bl	800aa1c <__assert_func>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	6144      	str	r4, [r0, #20]
 800a3de:	6103      	str	r3, [r0, #16]
 800a3e0:	bd10      	pop	{r4, pc}
 800a3e2:	bf00      	nop
 800a3e4:	0800b1a0 	.word	0x0800b1a0
 800a3e8:	0800b1b1 	.word	0x0800b1b1

0800a3ec <__multiply>:
 800a3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f0:	4617      	mov	r7, r2
 800a3f2:	690a      	ldr	r2, [r1, #16]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	bfa8      	it	ge
 800a3fa:	463b      	movge	r3, r7
 800a3fc:	4689      	mov	r9, r1
 800a3fe:	bfa4      	itt	ge
 800a400:	460f      	movge	r7, r1
 800a402:	4699      	movge	r9, r3
 800a404:	693d      	ldr	r5, [r7, #16]
 800a406:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	eb05 060a 	add.w	r6, r5, sl
 800a412:	42b3      	cmp	r3, r6
 800a414:	b085      	sub	sp, #20
 800a416:	bfb8      	it	lt
 800a418:	3101      	addlt	r1, #1
 800a41a:	f7ff fedd 	bl	800a1d8 <_Balloc>
 800a41e:	b930      	cbnz	r0, 800a42e <__multiply+0x42>
 800a420:	4602      	mov	r2, r0
 800a422:	4b41      	ldr	r3, [pc, #260]	@ (800a528 <__multiply+0x13c>)
 800a424:	4841      	ldr	r0, [pc, #260]	@ (800a52c <__multiply+0x140>)
 800a426:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a42a:	f000 faf7 	bl	800aa1c <__assert_func>
 800a42e:	f100 0414 	add.w	r4, r0, #20
 800a432:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a436:	4623      	mov	r3, r4
 800a438:	2200      	movs	r2, #0
 800a43a:	4573      	cmp	r3, lr
 800a43c:	d320      	bcc.n	800a480 <__multiply+0x94>
 800a43e:	f107 0814 	add.w	r8, r7, #20
 800a442:	f109 0114 	add.w	r1, r9, #20
 800a446:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a44a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a44e:	9302      	str	r3, [sp, #8]
 800a450:	1beb      	subs	r3, r5, r7
 800a452:	3b15      	subs	r3, #21
 800a454:	f023 0303 	bic.w	r3, r3, #3
 800a458:	3304      	adds	r3, #4
 800a45a:	3715      	adds	r7, #21
 800a45c:	42bd      	cmp	r5, r7
 800a45e:	bf38      	it	cc
 800a460:	2304      	movcc	r3, #4
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	9b02      	ldr	r3, [sp, #8]
 800a466:	9103      	str	r1, [sp, #12]
 800a468:	428b      	cmp	r3, r1
 800a46a:	d80c      	bhi.n	800a486 <__multiply+0x9a>
 800a46c:	2e00      	cmp	r6, #0
 800a46e:	dd03      	ble.n	800a478 <__multiply+0x8c>
 800a470:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a474:	2b00      	cmp	r3, #0
 800a476:	d055      	beq.n	800a524 <__multiply+0x138>
 800a478:	6106      	str	r6, [r0, #16]
 800a47a:	b005      	add	sp, #20
 800a47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a480:	f843 2b04 	str.w	r2, [r3], #4
 800a484:	e7d9      	b.n	800a43a <__multiply+0x4e>
 800a486:	f8b1 a000 	ldrh.w	sl, [r1]
 800a48a:	f1ba 0f00 	cmp.w	sl, #0
 800a48e:	d01f      	beq.n	800a4d0 <__multiply+0xe4>
 800a490:	46c4      	mov	ip, r8
 800a492:	46a1      	mov	r9, r4
 800a494:	2700      	movs	r7, #0
 800a496:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a49a:	f8d9 3000 	ldr.w	r3, [r9]
 800a49e:	fa1f fb82 	uxth.w	fp, r2
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a4a8:	443b      	add	r3, r7
 800a4aa:	f8d9 7000 	ldr.w	r7, [r9]
 800a4ae:	0c12      	lsrs	r2, r2, #16
 800a4b0:	0c3f      	lsrs	r7, r7, #16
 800a4b2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a4b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4c0:	4565      	cmp	r5, ip
 800a4c2:	f849 3b04 	str.w	r3, [r9], #4
 800a4c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a4ca:	d8e4      	bhi.n	800a496 <__multiply+0xaa>
 800a4cc:	9b01      	ldr	r3, [sp, #4]
 800a4ce:	50e7      	str	r7, [r4, r3]
 800a4d0:	9b03      	ldr	r3, [sp, #12]
 800a4d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a4d6:	3104      	adds	r1, #4
 800a4d8:	f1b9 0f00 	cmp.w	r9, #0
 800a4dc:	d020      	beq.n	800a520 <__multiply+0x134>
 800a4de:	6823      	ldr	r3, [r4, #0]
 800a4e0:	4647      	mov	r7, r8
 800a4e2:	46a4      	mov	ip, r4
 800a4e4:	f04f 0a00 	mov.w	sl, #0
 800a4e8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a4ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a4f0:	fb09 220b 	mla	r2, r9, fp, r2
 800a4f4:	4452      	add	r2, sl
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4fc:	f84c 3b04 	str.w	r3, [ip], #4
 800a500:	f857 3b04 	ldr.w	r3, [r7], #4
 800a504:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a508:	f8bc 3000 	ldrh.w	r3, [ip]
 800a50c:	fb09 330a 	mla	r3, r9, sl, r3
 800a510:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a514:	42bd      	cmp	r5, r7
 800a516:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a51a:	d8e5      	bhi.n	800a4e8 <__multiply+0xfc>
 800a51c:	9a01      	ldr	r2, [sp, #4]
 800a51e:	50a3      	str	r3, [r4, r2]
 800a520:	3404      	adds	r4, #4
 800a522:	e79f      	b.n	800a464 <__multiply+0x78>
 800a524:	3e01      	subs	r6, #1
 800a526:	e7a1      	b.n	800a46c <__multiply+0x80>
 800a528:	0800b1a0 	.word	0x0800b1a0
 800a52c:	0800b1b1 	.word	0x0800b1b1

0800a530 <__pow5mult>:
 800a530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a534:	4615      	mov	r5, r2
 800a536:	f012 0203 	ands.w	r2, r2, #3
 800a53a:	4607      	mov	r7, r0
 800a53c:	460e      	mov	r6, r1
 800a53e:	d007      	beq.n	800a550 <__pow5mult+0x20>
 800a540:	4c25      	ldr	r4, [pc, #148]	@ (800a5d8 <__pow5mult+0xa8>)
 800a542:	3a01      	subs	r2, #1
 800a544:	2300      	movs	r3, #0
 800a546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a54a:	f7ff fea7 	bl	800a29c <__multadd>
 800a54e:	4606      	mov	r6, r0
 800a550:	10ad      	asrs	r5, r5, #2
 800a552:	d03d      	beq.n	800a5d0 <__pow5mult+0xa0>
 800a554:	69fc      	ldr	r4, [r7, #28]
 800a556:	b97c      	cbnz	r4, 800a578 <__pow5mult+0x48>
 800a558:	2010      	movs	r0, #16
 800a55a:	f7ff fcdb 	bl	8009f14 <malloc>
 800a55e:	4602      	mov	r2, r0
 800a560:	61f8      	str	r0, [r7, #28]
 800a562:	b928      	cbnz	r0, 800a570 <__pow5mult+0x40>
 800a564:	4b1d      	ldr	r3, [pc, #116]	@ (800a5dc <__pow5mult+0xac>)
 800a566:	481e      	ldr	r0, [pc, #120]	@ (800a5e0 <__pow5mult+0xb0>)
 800a568:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a56c:	f000 fa56 	bl	800aa1c <__assert_func>
 800a570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a574:	6004      	str	r4, [r0, #0]
 800a576:	60c4      	str	r4, [r0, #12]
 800a578:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a57c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a580:	b94c      	cbnz	r4, 800a596 <__pow5mult+0x66>
 800a582:	f240 2171 	movw	r1, #625	@ 0x271
 800a586:	4638      	mov	r0, r7
 800a588:	f7ff ff1a 	bl	800a3c0 <__i2b>
 800a58c:	2300      	movs	r3, #0
 800a58e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a592:	4604      	mov	r4, r0
 800a594:	6003      	str	r3, [r0, #0]
 800a596:	f04f 0900 	mov.w	r9, #0
 800a59a:	07eb      	lsls	r3, r5, #31
 800a59c:	d50a      	bpl.n	800a5b4 <__pow5mult+0x84>
 800a59e:	4631      	mov	r1, r6
 800a5a0:	4622      	mov	r2, r4
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	f7ff ff22 	bl	800a3ec <__multiply>
 800a5a8:	4631      	mov	r1, r6
 800a5aa:	4680      	mov	r8, r0
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	f7ff fe53 	bl	800a258 <_Bfree>
 800a5b2:	4646      	mov	r6, r8
 800a5b4:	106d      	asrs	r5, r5, #1
 800a5b6:	d00b      	beq.n	800a5d0 <__pow5mult+0xa0>
 800a5b8:	6820      	ldr	r0, [r4, #0]
 800a5ba:	b938      	cbnz	r0, 800a5cc <__pow5mult+0x9c>
 800a5bc:	4622      	mov	r2, r4
 800a5be:	4621      	mov	r1, r4
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	f7ff ff13 	bl	800a3ec <__multiply>
 800a5c6:	6020      	str	r0, [r4, #0]
 800a5c8:	f8c0 9000 	str.w	r9, [r0]
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	e7e4      	b.n	800a59a <__pow5mult+0x6a>
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d6:	bf00      	nop
 800a5d8:	0800b264 	.word	0x0800b264
 800a5dc:	0800b131 	.word	0x0800b131
 800a5e0:	0800b1b1 	.word	0x0800b1b1

0800a5e4 <__lshift>:
 800a5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	6849      	ldr	r1, [r1, #4]
 800a5ec:	6923      	ldr	r3, [r4, #16]
 800a5ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5f2:	68a3      	ldr	r3, [r4, #8]
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	4691      	mov	r9, r2
 800a5f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5fc:	f108 0601 	add.w	r6, r8, #1
 800a600:	42b3      	cmp	r3, r6
 800a602:	db0b      	blt.n	800a61c <__lshift+0x38>
 800a604:	4638      	mov	r0, r7
 800a606:	f7ff fde7 	bl	800a1d8 <_Balloc>
 800a60a:	4605      	mov	r5, r0
 800a60c:	b948      	cbnz	r0, 800a622 <__lshift+0x3e>
 800a60e:	4602      	mov	r2, r0
 800a610:	4b28      	ldr	r3, [pc, #160]	@ (800a6b4 <__lshift+0xd0>)
 800a612:	4829      	ldr	r0, [pc, #164]	@ (800a6b8 <__lshift+0xd4>)
 800a614:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a618:	f000 fa00 	bl	800aa1c <__assert_func>
 800a61c:	3101      	adds	r1, #1
 800a61e:	005b      	lsls	r3, r3, #1
 800a620:	e7ee      	b.n	800a600 <__lshift+0x1c>
 800a622:	2300      	movs	r3, #0
 800a624:	f100 0114 	add.w	r1, r0, #20
 800a628:	f100 0210 	add.w	r2, r0, #16
 800a62c:	4618      	mov	r0, r3
 800a62e:	4553      	cmp	r3, sl
 800a630:	db33      	blt.n	800a69a <__lshift+0xb6>
 800a632:	6920      	ldr	r0, [r4, #16]
 800a634:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a638:	f104 0314 	add.w	r3, r4, #20
 800a63c:	f019 091f 	ands.w	r9, r9, #31
 800a640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a644:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a648:	d02b      	beq.n	800a6a2 <__lshift+0xbe>
 800a64a:	f1c9 0e20 	rsb	lr, r9, #32
 800a64e:	468a      	mov	sl, r1
 800a650:	2200      	movs	r2, #0
 800a652:	6818      	ldr	r0, [r3, #0]
 800a654:	fa00 f009 	lsl.w	r0, r0, r9
 800a658:	4310      	orrs	r0, r2
 800a65a:	f84a 0b04 	str.w	r0, [sl], #4
 800a65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a662:	459c      	cmp	ip, r3
 800a664:	fa22 f20e 	lsr.w	r2, r2, lr
 800a668:	d8f3      	bhi.n	800a652 <__lshift+0x6e>
 800a66a:	ebac 0304 	sub.w	r3, ip, r4
 800a66e:	3b15      	subs	r3, #21
 800a670:	f023 0303 	bic.w	r3, r3, #3
 800a674:	3304      	adds	r3, #4
 800a676:	f104 0015 	add.w	r0, r4, #21
 800a67a:	4560      	cmp	r0, ip
 800a67c:	bf88      	it	hi
 800a67e:	2304      	movhi	r3, #4
 800a680:	50ca      	str	r2, [r1, r3]
 800a682:	b10a      	cbz	r2, 800a688 <__lshift+0xa4>
 800a684:	f108 0602 	add.w	r6, r8, #2
 800a688:	3e01      	subs	r6, #1
 800a68a:	4638      	mov	r0, r7
 800a68c:	612e      	str	r6, [r5, #16]
 800a68e:	4621      	mov	r1, r4
 800a690:	f7ff fde2 	bl	800a258 <_Bfree>
 800a694:	4628      	mov	r0, r5
 800a696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a69a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a69e:	3301      	adds	r3, #1
 800a6a0:	e7c5      	b.n	800a62e <__lshift+0x4a>
 800a6a2:	3904      	subs	r1, #4
 800a6a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6ac:	459c      	cmp	ip, r3
 800a6ae:	d8f9      	bhi.n	800a6a4 <__lshift+0xc0>
 800a6b0:	e7ea      	b.n	800a688 <__lshift+0xa4>
 800a6b2:	bf00      	nop
 800a6b4:	0800b1a0 	.word	0x0800b1a0
 800a6b8:	0800b1b1 	.word	0x0800b1b1

0800a6bc <__mcmp>:
 800a6bc:	690a      	ldr	r2, [r1, #16]
 800a6be:	4603      	mov	r3, r0
 800a6c0:	6900      	ldr	r0, [r0, #16]
 800a6c2:	1a80      	subs	r0, r0, r2
 800a6c4:	b530      	push	{r4, r5, lr}
 800a6c6:	d10e      	bne.n	800a6e6 <__mcmp+0x2a>
 800a6c8:	3314      	adds	r3, #20
 800a6ca:	3114      	adds	r1, #20
 800a6cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6dc:	4295      	cmp	r5, r2
 800a6de:	d003      	beq.n	800a6e8 <__mcmp+0x2c>
 800a6e0:	d205      	bcs.n	800a6ee <__mcmp+0x32>
 800a6e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6e6:	bd30      	pop	{r4, r5, pc}
 800a6e8:	42a3      	cmp	r3, r4
 800a6ea:	d3f3      	bcc.n	800a6d4 <__mcmp+0x18>
 800a6ec:	e7fb      	b.n	800a6e6 <__mcmp+0x2a>
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	e7f9      	b.n	800a6e6 <__mcmp+0x2a>
	...

0800a6f4 <__mdiff>:
 800a6f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f8:	4689      	mov	r9, r1
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	4648      	mov	r0, r9
 800a700:	4614      	mov	r4, r2
 800a702:	f7ff ffdb 	bl	800a6bc <__mcmp>
 800a706:	1e05      	subs	r5, r0, #0
 800a708:	d112      	bne.n	800a730 <__mdiff+0x3c>
 800a70a:	4629      	mov	r1, r5
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff fd63 	bl	800a1d8 <_Balloc>
 800a712:	4602      	mov	r2, r0
 800a714:	b928      	cbnz	r0, 800a722 <__mdiff+0x2e>
 800a716:	4b3f      	ldr	r3, [pc, #252]	@ (800a814 <__mdiff+0x120>)
 800a718:	f240 2137 	movw	r1, #567	@ 0x237
 800a71c:	483e      	ldr	r0, [pc, #248]	@ (800a818 <__mdiff+0x124>)
 800a71e:	f000 f97d 	bl	800aa1c <__assert_func>
 800a722:	2301      	movs	r3, #1
 800a724:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a728:	4610      	mov	r0, r2
 800a72a:	b003      	add	sp, #12
 800a72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a730:	bfbc      	itt	lt
 800a732:	464b      	movlt	r3, r9
 800a734:	46a1      	movlt	r9, r4
 800a736:	4630      	mov	r0, r6
 800a738:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a73c:	bfba      	itte	lt
 800a73e:	461c      	movlt	r4, r3
 800a740:	2501      	movlt	r5, #1
 800a742:	2500      	movge	r5, #0
 800a744:	f7ff fd48 	bl	800a1d8 <_Balloc>
 800a748:	4602      	mov	r2, r0
 800a74a:	b918      	cbnz	r0, 800a754 <__mdiff+0x60>
 800a74c:	4b31      	ldr	r3, [pc, #196]	@ (800a814 <__mdiff+0x120>)
 800a74e:	f240 2145 	movw	r1, #581	@ 0x245
 800a752:	e7e3      	b.n	800a71c <__mdiff+0x28>
 800a754:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a758:	6926      	ldr	r6, [r4, #16]
 800a75a:	60c5      	str	r5, [r0, #12]
 800a75c:	f109 0310 	add.w	r3, r9, #16
 800a760:	f109 0514 	add.w	r5, r9, #20
 800a764:	f104 0e14 	add.w	lr, r4, #20
 800a768:	f100 0b14 	add.w	fp, r0, #20
 800a76c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a770:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	46d9      	mov	r9, fp
 800a778:	f04f 0c00 	mov.w	ip, #0
 800a77c:	9b01      	ldr	r3, [sp, #4]
 800a77e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a782:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	fa1f f38a 	uxth.w	r3, sl
 800a78c:	4619      	mov	r1, r3
 800a78e:	b283      	uxth	r3, r0
 800a790:	1acb      	subs	r3, r1, r3
 800a792:	0c00      	lsrs	r0, r0, #16
 800a794:	4463      	add	r3, ip
 800a796:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a79a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a7a4:	4576      	cmp	r6, lr
 800a7a6:	f849 3b04 	str.w	r3, [r9], #4
 800a7aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7ae:	d8e5      	bhi.n	800a77c <__mdiff+0x88>
 800a7b0:	1b33      	subs	r3, r6, r4
 800a7b2:	3b15      	subs	r3, #21
 800a7b4:	f023 0303 	bic.w	r3, r3, #3
 800a7b8:	3415      	adds	r4, #21
 800a7ba:	3304      	adds	r3, #4
 800a7bc:	42a6      	cmp	r6, r4
 800a7be:	bf38      	it	cc
 800a7c0:	2304      	movcc	r3, #4
 800a7c2:	441d      	add	r5, r3
 800a7c4:	445b      	add	r3, fp
 800a7c6:	461e      	mov	r6, r3
 800a7c8:	462c      	mov	r4, r5
 800a7ca:	4544      	cmp	r4, r8
 800a7cc:	d30e      	bcc.n	800a7ec <__mdiff+0xf8>
 800a7ce:	f108 0103 	add.w	r1, r8, #3
 800a7d2:	1b49      	subs	r1, r1, r5
 800a7d4:	f021 0103 	bic.w	r1, r1, #3
 800a7d8:	3d03      	subs	r5, #3
 800a7da:	45a8      	cmp	r8, r5
 800a7dc:	bf38      	it	cc
 800a7de:	2100      	movcc	r1, #0
 800a7e0:	440b      	add	r3, r1
 800a7e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7e6:	b191      	cbz	r1, 800a80e <__mdiff+0x11a>
 800a7e8:	6117      	str	r7, [r2, #16]
 800a7ea:	e79d      	b.n	800a728 <__mdiff+0x34>
 800a7ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7f0:	46e6      	mov	lr, ip
 800a7f2:	0c08      	lsrs	r0, r1, #16
 800a7f4:	fa1c fc81 	uxtah	ip, ip, r1
 800a7f8:	4471      	add	r1, lr
 800a7fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7fe:	b289      	uxth	r1, r1
 800a800:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a804:	f846 1b04 	str.w	r1, [r6], #4
 800a808:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a80c:	e7dd      	b.n	800a7ca <__mdiff+0xd6>
 800a80e:	3f01      	subs	r7, #1
 800a810:	e7e7      	b.n	800a7e2 <__mdiff+0xee>
 800a812:	bf00      	nop
 800a814:	0800b1a0 	.word	0x0800b1a0
 800a818:	0800b1b1 	.word	0x0800b1b1

0800a81c <__d2b>:
 800a81c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a820:	460f      	mov	r7, r1
 800a822:	2101      	movs	r1, #1
 800a824:	ec59 8b10 	vmov	r8, r9, d0
 800a828:	4616      	mov	r6, r2
 800a82a:	f7ff fcd5 	bl	800a1d8 <_Balloc>
 800a82e:	4604      	mov	r4, r0
 800a830:	b930      	cbnz	r0, 800a840 <__d2b+0x24>
 800a832:	4602      	mov	r2, r0
 800a834:	4b23      	ldr	r3, [pc, #140]	@ (800a8c4 <__d2b+0xa8>)
 800a836:	4824      	ldr	r0, [pc, #144]	@ (800a8c8 <__d2b+0xac>)
 800a838:	f240 310f 	movw	r1, #783	@ 0x30f
 800a83c:	f000 f8ee 	bl	800aa1c <__assert_func>
 800a840:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a844:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a848:	b10d      	cbz	r5, 800a84e <__d2b+0x32>
 800a84a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a84e:	9301      	str	r3, [sp, #4]
 800a850:	f1b8 0300 	subs.w	r3, r8, #0
 800a854:	d023      	beq.n	800a89e <__d2b+0x82>
 800a856:	4668      	mov	r0, sp
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	f7ff fd84 	bl	800a366 <__lo0bits>
 800a85e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a862:	b1d0      	cbz	r0, 800a89a <__d2b+0x7e>
 800a864:	f1c0 0320 	rsb	r3, r0, #32
 800a868:	fa02 f303 	lsl.w	r3, r2, r3
 800a86c:	430b      	orrs	r3, r1
 800a86e:	40c2      	lsrs	r2, r0
 800a870:	6163      	str	r3, [r4, #20]
 800a872:	9201      	str	r2, [sp, #4]
 800a874:	9b01      	ldr	r3, [sp, #4]
 800a876:	61a3      	str	r3, [r4, #24]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bf0c      	ite	eq
 800a87c:	2201      	moveq	r2, #1
 800a87e:	2202      	movne	r2, #2
 800a880:	6122      	str	r2, [r4, #16]
 800a882:	b1a5      	cbz	r5, 800a8ae <__d2b+0x92>
 800a884:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a888:	4405      	add	r5, r0
 800a88a:	603d      	str	r5, [r7, #0]
 800a88c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a890:	6030      	str	r0, [r6, #0]
 800a892:	4620      	mov	r0, r4
 800a894:	b003      	add	sp, #12
 800a896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a89a:	6161      	str	r1, [r4, #20]
 800a89c:	e7ea      	b.n	800a874 <__d2b+0x58>
 800a89e:	a801      	add	r0, sp, #4
 800a8a0:	f7ff fd61 	bl	800a366 <__lo0bits>
 800a8a4:	9b01      	ldr	r3, [sp, #4]
 800a8a6:	6163      	str	r3, [r4, #20]
 800a8a8:	3020      	adds	r0, #32
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	e7e8      	b.n	800a880 <__d2b+0x64>
 800a8ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a8b6:	6038      	str	r0, [r7, #0]
 800a8b8:	6918      	ldr	r0, [r3, #16]
 800a8ba:	f7ff fd35 	bl	800a328 <__hi0bits>
 800a8be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8c2:	e7e5      	b.n	800a890 <__d2b+0x74>
 800a8c4:	0800b1a0 	.word	0x0800b1a0
 800a8c8:	0800b1b1 	.word	0x0800b1b1

0800a8cc <__sread>:
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d4:	f000 f850 	bl	800a978 <_read_r>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	bfab      	itete	ge
 800a8dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8de:	89a3      	ldrhlt	r3, [r4, #12]
 800a8e0:	181b      	addge	r3, r3, r0
 800a8e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a8e6:	bfac      	ite	ge
 800a8e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a8ea:	81a3      	strhlt	r3, [r4, #12]
 800a8ec:	bd10      	pop	{r4, pc}

0800a8ee <__swrite>:
 800a8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f2:	461f      	mov	r7, r3
 800a8f4:	898b      	ldrh	r3, [r1, #12]
 800a8f6:	05db      	lsls	r3, r3, #23
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	4616      	mov	r6, r2
 800a8fe:	d505      	bpl.n	800a90c <__swrite+0x1e>
 800a900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a904:	2302      	movs	r3, #2
 800a906:	2200      	movs	r2, #0
 800a908:	f000 f824 	bl	800a954 <_lseek_r>
 800a90c:	89a3      	ldrh	r3, [r4, #12]
 800a90e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a912:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a916:	81a3      	strh	r3, [r4, #12]
 800a918:	4632      	mov	r2, r6
 800a91a:	463b      	mov	r3, r7
 800a91c:	4628      	mov	r0, r5
 800a91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a922:	f000 b84b 	b.w	800a9bc <_write_r>

0800a926 <__sseek>:
 800a926:	b510      	push	{r4, lr}
 800a928:	460c      	mov	r4, r1
 800a92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a92e:	f000 f811 	bl	800a954 <_lseek_r>
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	bf15      	itete	ne
 800a938:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a93a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a93e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a942:	81a3      	strheq	r3, [r4, #12]
 800a944:	bf18      	it	ne
 800a946:	81a3      	strhne	r3, [r4, #12]
 800a948:	bd10      	pop	{r4, pc}

0800a94a <__sclose>:
 800a94a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94e:	f000 b847 	b.w	800a9e0 <_close_r>
	...

0800a954 <_lseek_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4d07      	ldr	r5, [pc, #28]	@ (800a974 <_lseek_r+0x20>)
 800a958:	4604      	mov	r4, r0
 800a95a:	4608      	mov	r0, r1
 800a95c:	4611      	mov	r1, r2
 800a95e:	2200      	movs	r2, #0
 800a960:	602a      	str	r2, [r5, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	f7f6 f98b 	bl	8000c7e <_lseek>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_lseek_r+0x1e>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_lseek_r+0x1e>
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	240006f0 	.word	0x240006f0

0800a978 <_read_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d07      	ldr	r5, [pc, #28]	@ (800a998 <_read_r+0x20>)
 800a97c:	4604      	mov	r4, r0
 800a97e:	4608      	mov	r0, r1
 800a980:	4611      	mov	r1, r2
 800a982:	2200      	movs	r2, #0
 800a984:	602a      	str	r2, [r5, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	f7f6 f919 	bl	8000bbe <_read>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d102      	bne.n	800a996 <_read_r+0x1e>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	b103      	cbz	r3, 800a996 <_read_r+0x1e>
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	240006f0 	.word	0x240006f0

0800a99c <_sbrk_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4d06      	ldr	r5, [pc, #24]	@ (800a9b8 <_sbrk_r+0x1c>)
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	602b      	str	r3, [r5, #0]
 800a9a8:	f7f6 f976 	bl	8000c98 <_sbrk>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_sbrk_r+0x1a>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_sbrk_r+0x1a>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	240006f0 	.word	0x240006f0

0800a9bc <_write_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4d07      	ldr	r5, [pc, #28]	@ (800a9dc <_write_r+0x20>)
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	4608      	mov	r0, r1
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	602a      	str	r2, [r5, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f7f6 f914 	bl	8000bf8 <_write>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_write_r+0x1e>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_write_r+0x1e>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	240006f0 	.word	0x240006f0

0800a9e0 <_close_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4d06      	ldr	r5, [pc, #24]	@ (800a9fc <_close_r+0x1c>)
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	4608      	mov	r0, r1
 800a9ea:	602b      	str	r3, [r5, #0]
 800a9ec:	f7f6 f920 	bl	8000c30 <_close>
 800a9f0:	1c43      	adds	r3, r0, #1
 800a9f2:	d102      	bne.n	800a9fa <_close_r+0x1a>
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	b103      	cbz	r3, 800a9fa <_close_r+0x1a>
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
 800a9fc:	240006f0 	.word	0x240006f0

0800aa00 <memcpy>:
 800aa00:	440a      	add	r2, r1
 800aa02:	4291      	cmp	r1, r2
 800aa04:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800aa08:	d100      	bne.n	800aa0c <memcpy+0xc>
 800aa0a:	4770      	bx	lr
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa16:	4291      	cmp	r1, r2
 800aa18:	d1f9      	bne.n	800aa0e <memcpy+0xe>
 800aa1a:	bd10      	pop	{r4, pc}

0800aa1c <__assert_func>:
 800aa1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa1e:	4614      	mov	r4, r2
 800aa20:	461a      	mov	r2, r3
 800aa22:	4b09      	ldr	r3, [pc, #36]	@ (800aa48 <__assert_func+0x2c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4605      	mov	r5, r0
 800aa28:	68d8      	ldr	r0, [r3, #12]
 800aa2a:	b14c      	cbz	r4, 800aa40 <__assert_func+0x24>
 800aa2c:	4b07      	ldr	r3, [pc, #28]	@ (800aa4c <__assert_func+0x30>)
 800aa2e:	9100      	str	r1, [sp, #0]
 800aa30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa34:	4906      	ldr	r1, [pc, #24]	@ (800aa50 <__assert_func+0x34>)
 800aa36:	462b      	mov	r3, r5
 800aa38:	f000 f87e 	bl	800ab38 <fiprintf>
 800aa3c:	f000 f89b 	bl	800ab76 <abort>
 800aa40:	4b04      	ldr	r3, [pc, #16]	@ (800aa54 <__assert_func+0x38>)
 800aa42:	461c      	mov	r4, r3
 800aa44:	e7f3      	b.n	800aa2e <__assert_func+0x12>
 800aa46:	bf00      	nop
 800aa48:	2400001c 	.word	0x2400001c
 800aa4c:	0800b214 	.word	0x0800b214
 800aa50:	0800b221 	.word	0x0800b221
 800aa54:	0800b24f 	.word	0x0800b24f

0800aa58 <_calloc_r>:
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	fba1 5402 	umull	r5, r4, r1, r2
 800aa5e:	b934      	cbnz	r4, 800aa6e <_calloc_r+0x16>
 800aa60:	4629      	mov	r1, r5
 800aa62:	f7ff fa81 	bl	8009f68 <_malloc_r>
 800aa66:	4606      	mov	r6, r0
 800aa68:	b928      	cbnz	r0, 800aa76 <_calloc_r+0x1e>
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	bd70      	pop	{r4, r5, r6, pc}
 800aa6e:	220c      	movs	r2, #12
 800aa70:	6002      	str	r2, [r0, #0]
 800aa72:	2600      	movs	r6, #0
 800aa74:	e7f9      	b.n	800aa6a <_calloc_r+0x12>
 800aa76:	462a      	mov	r2, r5
 800aa78:	4621      	mov	r1, r4
 800aa7a:	f7fe fc29 	bl	80092d0 <memset>
 800aa7e:	e7f4      	b.n	800aa6a <_calloc_r+0x12>

0800aa80 <_free_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4605      	mov	r5, r0
 800aa84:	2900      	cmp	r1, #0
 800aa86:	d041      	beq.n	800ab0c <_free_r+0x8c>
 800aa88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa8c:	1f0c      	subs	r4, r1, #4
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	bfb8      	it	lt
 800aa92:	18e4      	addlt	r4, r4, r3
 800aa94:	f7ff fb94 	bl	800a1c0 <__malloc_lock>
 800aa98:	4a1d      	ldr	r2, [pc, #116]	@ (800ab10 <_free_r+0x90>)
 800aa9a:	6813      	ldr	r3, [r2, #0]
 800aa9c:	b933      	cbnz	r3, 800aaac <_free_r+0x2c>
 800aa9e:	6063      	str	r3, [r4, #4]
 800aaa0:	6014      	str	r4, [r2, #0]
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaa8:	f7ff bb90 	b.w	800a1cc <__malloc_unlock>
 800aaac:	42a3      	cmp	r3, r4
 800aaae:	d908      	bls.n	800aac2 <_free_r+0x42>
 800aab0:	6820      	ldr	r0, [r4, #0]
 800aab2:	1821      	adds	r1, r4, r0
 800aab4:	428b      	cmp	r3, r1
 800aab6:	bf01      	itttt	eq
 800aab8:	6819      	ldreq	r1, [r3, #0]
 800aaba:	685b      	ldreq	r3, [r3, #4]
 800aabc:	1809      	addeq	r1, r1, r0
 800aabe:	6021      	streq	r1, [r4, #0]
 800aac0:	e7ed      	b.n	800aa9e <_free_r+0x1e>
 800aac2:	461a      	mov	r2, r3
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	b10b      	cbz	r3, 800aacc <_free_r+0x4c>
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	d9fa      	bls.n	800aac2 <_free_r+0x42>
 800aacc:	6811      	ldr	r1, [r2, #0]
 800aace:	1850      	adds	r0, r2, r1
 800aad0:	42a0      	cmp	r0, r4
 800aad2:	d10b      	bne.n	800aaec <_free_r+0x6c>
 800aad4:	6820      	ldr	r0, [r4, #0]
 800aad6:	4401      	add	r1, r0
 800aad8:	1850      	adds	r0, r2, r1
 800aada:	4283      	cmp	r3, r0
 800aadc:	6011      	str	r1, [r2, #0]
 800aade:	d1e0      	bne.n	800aaa2 <_free_r+0x22>
 800aae0:	6818      	ldr	r0, [r3, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	6053      	str	r3, [r2, #4]
 800aae6:	4408      	add	r0, r1
 800aae8:	6010      	str	r0, [r2, #0]
 800aaea:	e7da      	b.n	800aaa2 <_free_r+0x22>
 800aaec:	d902      	bls.n	800aaf4 <_free_r+0x74>
 800aaee:	230c      	movs	r3, #12
 800aaf0:	602b      	str	r3, [r5, #0]
 800aaf2:	e7d6      	b.n	800aaa2 <_free_r+0x22>
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	1821      	adds	r1, r4, r0
 800aaf8:	428b      	cmp	r3, r1
 800aafa:	bf04      	itt	eq
 800aafc:	6819      	ldreq	r1, [r3, #0]
 800aafe:	685b      	ldreq	r3, [r3, #4]
 800ab00:	6063      	str	r3, [r4, #4]
 800ab02:	bf04      	itt	eq
 800ab04:	1809      	addeq	r1, r1, r0
 800ab06:	6021      	streq	r1, [r4, #0]
 800ab08:	6054      	str	r4, [r2, #4]
 800ab0a:	e7ca      	b.n	800aaa2 <_free_r+0x22>
 800ab0c:	bd38      	pop	{r3, r4, r5, pc}
 800ab0e:	bf00      	nop
 800ab10:	240006ec 	.word	0x240006ec

0800ab14 <__ascii_mbtowc>:
 800ab14:	b082      	sub	sp, #8
 800ab16:	b901      	cbnz	r1, 800ab1a <__ascii_mbtowc+0x6>
 800ab18:	a901      	add	r1, sp, #4
 800ab1a:	b142      	cbz	r2, 800ab2e <__ascii_mbtowc+0x1a>
 800ab1c:	b14b      	cbz	r3, 800ab32 <__ascii_mbtowc+0x1e>
 800ab1e:	7813      	ldrb	r3, [r2, #0]
 800ab20:	600b      	str	r3, [r1, #0]
 800ab22:	7812      	ldrb	r2, [r2, #0]
 800ab24:	1e10      	subs	r0, r2, #0
 800ab26:	bf18      	it	ne
 800ab28:	2001      	movne	r0, #1
 800ab2a:	b002      	add	sp, #8
 800ab2c:	4770      	bx	lr
 800ab2e:	4610      	mov	r0, r2
 800ab30:	e7fb      	b.n	800ab2a <__ascii_mbtowc+0x16>
 800ab32:	f06f 0001 	mvn.w	r0, #1
 800ab36:	e7f8      	b.n	800ab2a <__ascii_mbtowc+0x16>

0800ab38 <fiprintf>:
 800ab38:	b40e      	push	{r1, r2, r3}
 800ab3a:	b503      	push	{r0, r1, lr}
 800ab3c:	4601      	mov	r1, r0
 800ab3e:	ab03      	add	r3, sp, #12
 800ab40:	4805      	ldr	r0, [pc, #20]	@ (800ab58 <fiprintf+0x20>)
 800ab42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab46:	6800      	ldr	r0, [r0, #0]
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	f000 f845 	bl	800abd8 <_vfiprintf_r>
 800ab4e:	b002      	add	sp, #8
 800ab50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab54:	b003      	add	sp, #12
 800ab56:	4770      	bx	lr
 800ab58:	2400001c 	.word	0x2400001c

0800ab5c <__ascii_wctomb>:
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	4608      	mov	r0, r1
 800ab60:	b141      	cbz	r1, 800ab74 <__ascii_wctomb+0x18>
 800ab62:	2aff      	cmp	r2, #255	@ 0xff
 800ab64:	d904      	bls.n	800ab70 <__ascii_wctomb+0x14>
 800ab66:	228a      	movs	r2, #138	@ 0x8a
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab6e:	4770      	bx	lr
 800ab70:	700a      	strb	r2, [r1, #0]
 800ab72:	2001      	movs	r0, #1
 800ab74:	4770      	bx	lr

0800ab76 <abort>:
 800ab76:	b508      	push	{r3, lr}
 800ab78:	2006      	movs	r0, #6
 800ab7a:	f000 fa63 	bl	800b044 <raise>
 800ab7e:	2001      	movs	r0, #1
 800ab80:	f7f6 f812 	bl	8000ba8 <_exit>

0800ab84 <__sfputc_r>:
 800ab84:	6893      	ldr	r3, [r2, #8]
 800ab86:	3b01      	subs	r3, #1
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	b410      	push	{r4}
 800ab8c:	6093      	str	r3, [r2, #8]
 800ab8e:	da08      	bge.n	800aba2 <__sfputc_r+0x1e>
 800ab90:	6994      	ldr	r4, [r2, #24]
 800ab92:	42a3      	cmp	r3, r4
 800ab94:	db01      	blt.n	800ab9a <__sfputc_r+0x16>
 800ab96:	290a      	cmp	r1, #10
 800ab98:	d103      	bne.n	800aba2 <__sfputc_r+0x1e>
 800ab9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab9e:	f000 b933 	b.w	800ae08 <__swbuf_r>
 800aba2:	6813      	ldr	r3, [r2, #0]
 800aba4:	1c58      	adds	r0, r3, #1
 800aba6:	6010      	str	r0, [r2, #0]
 800aba8:	7019      	strb	r1, [r3, #0]
 800abaa:	4608      	mov	r0, r1
 800abac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <__sfputs_r>:
 800abb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb4:	4606      	mov	r6, r0
 800abb6:	460f      	mov	r7, r1
 800abb8:	4614      	mov	r4, r2
 800abba:	18d5      	adds	r5, r2, r3
 800abbc:	42ac      	cmp	r4, r5
 800abbe:	d101      	bne.n	800abc4 <__sfputs_r+0x12>
 800abc0:	2000      	movs	r0, #0
 800abc2:	e007      	b.n	800abd4 <__sfputs_r+0x22>
 800abc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc8:	463a      	mov	r2, r7
 800abca:	4630      	mov	r0, r6
 800abcc:	f7ff ffda 	bl	800ab84 <__sfputc_r>
 800abd0:	1c43      	adds	r3, r0, #1
 800abd2:	d1f3      	bne.n	800abbc <__sfputs_r+0xa>
 800abd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abd8 <_vfiprintf_r>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	460d      	mov	r5, r1
 800abde:	b09d      	sub	sp, #116	@ 0x74
 800abe0:	4614      	mov	r4, r2
 800abe2:	4698      	mov	r8, r3
 800abe4:	4606      	mov	r6, r0
 800abe6:	b118      	cbz	r0, 800abf0 <_vfiprintf_r+0x18>
 800abe8:	6a03      	ldr	r3, [r0, #32]
 800abea:	b90b      	cbnz	r3, 800abf0 <_vfiprintf_r+0x18>
 800abec:	f7fe fb3a 	bl	8009264 <__sinit>
 800abf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abf2:	07d9      	lsls	r1, r3, #31
 800abf4:	d405      	bmi.n	800ac02 <_vfiprintf_r+0x2a>
 800abf6:	89ab      	ldrh	r3, [r5, #12]
 800abf8:	059a      	lsls	r2, r3, #22
 800abfa:	d402      	bmi.n	800ac02 <_vfiprintf_r+0x2a>
 800abfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abfe:	f7fe fb9a 	bl	8009336 <__retarget_lock_acquire_recursive>
 800ac02:	89ab      	ldrh	r3, [r5, #12]
 800ac04:	071b      	lsls	r3, r3, #28
 800ac06:	d501      	bpl.n	800ac0c <_vfiprintf_r+0x34>
 800ac08:	692b      	ldr	r3, [r5, #16]
 800ac0a:	b99b      	cbnz	r3, 800ac34 <_vfiprintf_r+0x5c>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f000 f938 	bl	800ae84 <__swsetup_r>
 800ac14:	b170      	cbz	r0, 800ac34 <_vfiprintf_r+0x5c>
 800ac16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac18:	07dc      	lsls	r4, r3, #31
 800ac1a:	d504      	bpl.n	800ac26 <_vfiprintf_r+0x4e>
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac20:	b01d      	add	sp, #116	@ 0x74
 800ac22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac26:	89ab      	ldrh	r3, [r5, #12]
 800ac28:	0598      	lsls	r0, r3, #22
 800ac2a:	d4f7      	bmi.n	800ac1c <_vfiprintf_r+0x44>
 800ac2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac2e:	f7fe fb83 	bl	8009338 <__retarget_lock_release_recursive>
 800ac32:	e7f3      	b.n	800ac1c <_vfiprintf_r+0x44>
 800ac34:	2300      	movs	r3, #0
 800ac36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac38:	2320      	movs	r3, #32
 800ac3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac42:	2330      	movs	r3, #48	@ 0x30
 800ac44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800adf4 <_vfiprintf_r+0x21c>
 800ac48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac4c:	f04f 0901 	mov.w	r9, #1
 800ac50:	4623      	mov	r3, r4
 800ac52:	469a      	mov	sl, r3
 800ac54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac58:	b10a      	cbz	r2, 800ac5e <_vfiprintf_r+0x86>
 800ac5a:	2a25      	cmp	r2, #37	@ 0x25
 800ac5c:	d1f9      	bne.n	800ac52 <_vfiprintf_r+0x7a>
 800ac5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac62:	d00b      	beq.n	800ac7c <_vfiprintf_r+0xa4>
 800ac64:	465b      	mov	r3, fp
 800ac66:	4622      	mov	r2, r4
 800ac68:	4629      	mov	r1, r5
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff ffa1 	bl	800abb2 <__sfputs_r>
 800ac70:	3001      	adds	r0, #1
 800ac72:	f000 80a7 	beq.w	800adc4 <_vfiprintf_r+0x1ec>
 800ac76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac78:	445a      	add	r2, fp
 800ac7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 809f 	beq.w	800adc4 <_vfiprintf_r+0x1ec>
 800ac86:	2300      	movs	r3, #0
 800ac88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac90:	f10a 0a01 	add.w	sl, sl, #1
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	9307      	str	r3, [sp, #28]
 800ac98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac9e:	4654      	mov	r4, sl
 800aca0:	2205      	movs	r2, #5
 800aca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca6:	4853      	ldr	r0, [pc, #332]	@ (800adf4 <_vfiprintf_r+0x21c>)
 800aca8:	f7f5 fb1a 	bl	80002e0 <memchr>
 800acac:	9a04      	ldr	r2, [sp, #16]
 800acae:	b9d8      	cbnz	r0, 800ace8 <_vfiprintf_r+0x110>
 800acb0:	06d1      	lsls	r1, r2, #27
 800acb2:	bf44      	itt	mi
 800acb4:	2320      	movmi	r3, #32
 800acb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acba:	0713      	lsls	r3, r2, #28
 800acbc:	bf44      	itt	mi
 800acbe:	232b      	movmi	r3, #43	@ 0x2b
 800acc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acc4:	f89a 3000 	ldrb.w	r3, [sl]
 800acc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800acca:	d015      	beq.n	800acf8 <_vfiprintf_r+0x120>
 800accc:	9a07      	ldr	r2, [sp, #28]
 800acce:	4654      	mov	r4, sl
 800acd0:	2000      	movs	r0, #0
 800acd2:	f04f 0c0a 	mov.w	ip, #10
 800acd6:	4621      	mov	r1, r4
 800acd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acdc:	3b30      	subs	r3, #48	@ 0x30
 800acde:	2b09      	cmp	r3, #9
 800ace0:	d94b      	bls.n	800ad7a <_vfiprintf_r+0x1a2>
 800ace2:	b1b0      	cbz	r0, 800ad12 <_vfiprintf_r+0x13a>
 800ace4:	9207      	str	r2, [sp, #28]
 800ace6:	e014      	b.n	800ad12 <_vfiprintf_r+0x13a>
 800ace8:	eba0 0308 	sub.w	r3, r0, r8
 800acec:	fa09 f303 	lsl.w	r3, r9, r3
 800acf0:	4313      	orrs	r3, r2
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	46a2      	mov	sl, r4
 800acf6:	e7d2      	b.n	800ac9e <_vfiprintf_r+0xc6>
 800acf8:	9b03      	ldr	r3, [sp, #12]
 800acfa:	1d19      	adds	r1, r3, #4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	9103      	str	r1, [sp, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfbb      	ittet	lt
 800ad04:	425b      	neglt	r3, r3
 800ad06:	f042 0202 	orrlt.w	r2, r2, #2
 800ad0a:	9307      	strge	r3, [sp, #28]
 800ad0c:	9307      	strlt	r3, [sp, #28]
 800ad0e:	bfb8      	it	lt
 800ad10:	9204      	strlt	r2, [sp, #16]
 800ad12:	7823      	ldrb	r3, [r4, #0]
 800ad14:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad16:	d10a      	bne.n	800ad2e <_vfiprintf_r+0x156>
 800ad18:	7863      	ldrb	r3, [r4, #1]
 800ad1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad1c:	d132      	bne.n	800ad84 <_vfiprintf_r+0x1ac>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	1d1a      	adds	r2, r3, #4
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	9203      	str	r2, [sp, #12]
 800ad26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad2a:	3402      	adds	r4, #2
 800ad2c:	9305      	str	r3, [sp, #20]
 800ad2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae04 <_vfiprintf_r+0x22c>
 800ad32:	7821      	ldrb	r1, [r4, #0]
 800ad34:	2203      	movs	r2, #3
 800ad36:	4650      	mov	r0, sl
 800ad38:	f7f5 fad2 	bl	80002e0 <memchr>
 800ad3c:	b138      	cbz	r0, 800ad4e <_vfiprintf_r+0x176>
 800ad3e:	9b04      	ldr	r3, [sp, #16]
 800ad40:	eba0 000a 	sub.w	r0, r0, sl
 800ad44:	2240      	movs	r2, #64	@ 0x40
 800ad46:	4082      	lsls	r2, r0
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	3401      	adds	r4, #1
 800ad4c:	9304      	str	r3, [sp, #16]
 800ad4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad52:	4829      	ldr	r0, [pc, #164]	@ (800adf8 <_vfiprintf_r+0x220>)
 800ad54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad58:	2206      	movs	r2, #6
 800ad5a:	f7f5 fac1 	bl	80002e0 <memchr>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d03f      	beq.n	800ade2 <_vfiprintf_r+0x20a>
 800ad62:	4b26      	ldr	r3, [pc, #152]	@ (800adfc <_vfiprintf_r+0x224>)
 800ad64:	bb1b      	cbnz	r3, 800adae <_vfiprintf_r+0x1d6>
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	3307      	adds	r3, #7
 800ad6a:	f023 0307 	bic.w	r3, r3, #7
 800ad6e:	3308      	adds	r3, #8
 800ad70:	9303      	str	r3, [sp, #12]
 800ad72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad74:	443b      	add	r3, r7
 800ad76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad78:	e76a      	b.n	800ac50 <_vfiprintf_r+0x78>
 800ad7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad7e:	460c      	mov	r4, r1
 800ad80:	2001      	movs	r0, #1
 800ad82:	e7a8      	b.n	800acd6 <_vfiprintf_r+0xfe>
 800ad84:	2300      	movs	r3, #0
 800ad86:	3401      	adds	r4, #1
 800ad88:	9305      	str	r3, [sp, #20]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	f04f 0c0a 	mov.w	ip, #10
 800ad90:	4620      	mov	r0, r4
 800ad92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad96:	3a30      	subs	r2, #48	@ 0x30
 800ad98:	2a09      	cmp	r2, #9
 800ad9a:	d903      	bls.n	800ada4 <_vfiprintf_r+0x1cc>
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0c6      	beq.n	800ad2e <_vfiprintf_r+0x156>
 800ada0:	9105      	str	r1, [sp, #20]
 800ada2:	e7c4      	b.n	800ad2e <_vfiprintf_r+0x156>
 800ada4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ada8:	4604      	mov	r4, r0
 800adaa:	2301      	movs	r3, #1
 800adac:	e7f0      	b.n	800ad90 <_vfiprintf_r+0x1b8>
 800adae:	ab03      	add	r3, sp, #12
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	462a      	mov	r2, r5
 800adb4:	4b12      	ldr	r3, [pc, #72]	@ (800ae00 <_vfiprintf_r+0x228>)
 800adb6:	a904      	add	r1, sp, #16
 800adb8:	4630      	mov	r0, r6
 800adba:	f7fd fe21 	bl	8008a00 <_printf_float>
 800adbe:	4607      	mov	r7, r0
 800adc0:	1c78      	adds	r0, r7, #1
 800adc2:	d1d6      	bne.n	800ad72 <_vfiprintf_r+0x19a>
 800adc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adc6:	07d9      	lsls	r1, r3, #31
 800adc8:	d405      	bmi.n	800add6 <_vfiprintf_r+0x1fe>
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	059a      	lsls	r2, r3, #22
 800adce:	d402      	bmi.n	800add6 <_vfiprintf_r+0x1fe>
 800add0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800add2:	f7fe fab1 	bl	8009338 <__retarget_lock_release_recursive>
 800add6:	89ab      	ldrh	r3, [r5, #12]
 800add8:	065b      	lsls	r3, r3, #25
 800adda:	f53f af1f 	bmi.w	800ac1c <_vfiprintf_r+0x44>
 800adde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ade0:	e71e      	b.n	800ac20 <_vfiprintf_r+0x48>
 800ade2:	ab03      	add	r3, sp, #12
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	462a      	mov	r2, r5
 800ade8:	4b05      	ldr	r3, [pc, #20]	@ (800ae00 <_vfiprintf_r+0x228>)
 800adea:	a904      	add	r1, sp, #16
 800adec:	4630      	mov	r0, r6
 800adee:	f7fe f88f 	bl	8008f10 <_printf_i>
 800adf2:	e7e4      	b.n	800adbe <_vfiprintf_r+0x1e6>
 800adf4:	0800b250 	.word	0x0800b250
 800adf8:	0800b25a 	.word	0x0800b25a
 800adfc:	08008a01 	.word	0x08008a01
 800ae00:	0800abb3 	.word	0x0800abb3
 800ae04:	0800b256 	.word	0x0800b256

0800ae08 <__swbuf_r>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	460e      	mov	r6, r1
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	4605      	mov	r5, r0
 800ae10:	b118      	cbz	r0, 800ae1a <__swbuf_r+0x12>
 800ae12:	6a03      	ldr	r3, [r0, #32]
 800ae14:	b90b      	cbnz	r3, 800ae1a <__swbuf_r+0x12>
 800ae16:	f7fe fa25 	bl	8009264 <__sinit>
 800ae1a:	69a3      	ldr	r3, [r4, #24]
 800ae1c:	60a3      	str	r3, [r4, #8]
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	071a      	lsls	r2, r3, #28
 800ae22:	d501      	bpl.n	800ae28 <__swbuf_r+0x20>
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	b943      	cbnz	r3, 800ae3a <__swbuf_r+0x32>
 800ae28:	4621      	mov	r1, r4
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f000 f82a 	bl	800ae84 <__swsetup_r>
 800ae30:	b118      	cbz	r0, 800ae3a <__swbuf_r+0x32>
 800ae32:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ae36:	4638      	mov	r0, r7
 800ae38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	6922      	ldr	r2, [r4, #16]
 800ae3e:	1a98      	subs	r0, r3, r2
 800ae40:	6963      	ldr	r3, [r4, #20]
 800ae42:	b2f6      	uxtb	r6, r6
 800ae44:	4283      	cmp	r3, r0
 800ae46:	4637      	mov	r7, r6
 800ae48:	dc05      	bgt.n	800ae56 <__swbuf_r+0x4e>
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f7ff f98f 	bl	800a170 <_fflush_r>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d1ed      	bne.n	800ae32 <__swbuf_r+0x2a>
 800ae56:	68a3      	ldr	r3, [r4, #8]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	60a3      	str	r3, [r4, #8]
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	6022      	str	r2, [r4, #0]
 800ae62:	701e      	strb	r6, [r3, #0]
 800ae64:	6962      	ldr	r2, [r4, #20]
 800ae66:	1c43      	adds	r3, r0, #1
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d004      	beq.n	800ae76 <__swbuf_r+0x6e>
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	07db      	lsls	r3, r3, #31
 800ae70:	d5e1      	bpl.n	800ae36 <__swbuf_r+0x2e>
 800ae72:	2e0a      	cmp	r6, #10
 800ae74:	d1df      	bne.n	800ae36 <__swbuf_r+0x2e>
 800ae76:	4621      	mov	r1, r4
 800ae78:	4628      	mov	r0, r5
 800ae7a:	f7ff f979 	bl	800a170 <_fflush_r>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d0d9      	beq.n	800ae36 <__swbuf_r+0x2e>
 800ae82:	e7d6      	b.n	800ae32 <__swbuf_r+0x2a>

0800ae84 <__swsetup_r>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	4b29      	ldr	r3, [pc, #164]	@ (800af2c <__swsetup_r+0xa8>)
 800ae88:	4605      	mov	r5, r0
 800ae8a:	6818      	ldr	r0, [r3, #0]
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	b118      	cbz	r0, 800ae98 <__swsetup_r+0x14>
 800ae90:	6a03      	ldr	r3, [r0, #32]
 800ae92:	b90b      	cbnz	r3, 800ae98 <__swsetup_r+0x14>
 800ae94:	f7fe f9e6 	bl	8009264 <__sinit>
 800ae98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae9c:	0719      	lsls	r1, r3, #28
 800ae9e:	d422      	bmi.n	800aee6 <__swsetup_r+0x62>
 800aea0:	06da      	lsls	r2, r3, #27
 800aea2:	d407      	bmi.n	800aeb4 <__swsetup_r+0x30>
 800aea4:	2209      	movs	r2, #9
 800aea6:	602a      	str	r2, [r5, #0]
 800aea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aeb2:	e033      	b.n	800af1c <__swsetup_r+0x98>
 800aeb4:	0758      	lsls	r0, r3, #29
 800aeb6:	d512      	bpl.n	800aede <__swsetup_r+0x5a>
 800aeb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeba:	b141      	cbz	r1, 800aece <__swsetup_r+0x4a>
 800aebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aec0:	4299      	cmp	r1, r3
 800aec2:	d002      	beq.n	800aeca <__swsetup_r+0x46>
 800aec4:	4628      	mov	r0, r5
 800aec6:	f7ff fddb 	bl	800aa80 <_free_r>
 800aeca:	2300      	movs	r3, #0
 800aecc:	6363      	str	r3, [r4, #52]	@ 0x34
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aed4:	81a3      	strh	r3, [r4, #12]
 800aed6:	2300      	movs	r3, #0
 800aed8:	6063      	str	r3, [r4, #4]
 800aeda:	6923      	ldr	r3, [r4, #16]
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	f043 0308 	orr.w	r3, r3, #8
 800aee4:	81a3      	strh	r3, [r4, #12]
 800aee6:	6923      	ldr	r3, [r4, #16]
 800aee8:	b94b      	cbnz	r3, 800aefe <__swsetup_r+0x7a>
 800aeea:	89a3      	ldrh	r3, [r4, #12]
 800aeec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aef4:	d003      	beq.n	800aefe <__swsetup_r+0x7a>
 800aef6:	4621      	mov	r1, r4
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 f83f 	bl	800af7c <__smakebuf_r>
 800aefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af02:	f013 0201 	ands.w	r2, r3, #1
 800af06:	d00a      	beq.n	800af1e <__swsetup_r+0x9a>
 800af08:	2200      	movs	r2, #0
 800af0a:	60a2      	str	r2, [r4, #8]
 800af0c:	6962      	ldr	r2, [r4, #20]
 800af0e:	4252      	negs	r2, r2
 800af10:	61a2      	str	r2, [r4, #24]
 800af12:	6922      	ldr	r2, [r4, #16]
 800af14:	b942      	cbnz	r2, 800af28 <__swsetup_r+0xa4>
 800af16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af1a:	d1c5      	bne.n	800aea8 <__swsetup_r+0x24>
 800af1c:	bd38      	pop	{r3, r4, r5, pc}
 800af1e:	0799      	lsls	r1, r3, #30
 800af20:	bf58      	it	pl
 800af22:	6962      	ldrpl	r2, [r4, #20]
 800af24:	60a2      	str	r2, [r4, #8]
 800af26:	e7f4      	b.n	800af12 <__swsetup_r+0x8e>
 800af28:	2000      	movs	r0, #0
 800af2a:	e7f7      	b.n	800af1c <__swsetup_r+0x98>
 800af2c:	2400001c 	.word	0x2400001c

0800af30 <__swhatbuf_r>:
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	460c      	mov	r4, r1
 800af34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af38:	2900      	cmp	r1, #0
 800af3a:	b096      	sub	sp, #88	@ 0x58
 800af3c:	4615      	mov	r5, r2
 800af3e:	461e      	mov	r6, r3
 800af40:	da0d      	bge.n	800af5e <__swhatbuf_r+0x2e>
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af48:	f04f 0100 	mov.w	r1, #0
 800af4c:	bf14      	ite	ne
 800af4e:	2340      	movne	r3, #64	@ 0x40
 800af50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af54:	2000      	movs	r0, #0
 800af56:	6031      	str	r1, [r6, #0]
 800af58:	602b      	str	r3, [r5, #0]
 800af5a:	b016      	add	sp, #88	@ 0x58
 800af5c:	bd70      	pop	{r4, r5, r6, pc}
 800af5e:	466a      	mov	r2, sp
 800af60:	f000 f89c 	bl	800b09c <_fstat_r>
 800af64:	2800      	cmp	r0, #0
 800af66:	dbec      	blt.n	800af42 <__swhatbuf_r+0x12>
 800af68:	9901      	ldr	r1, [sp, #4]
 800af6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af72:	4259      	negs	r1, r3
 800af74:	4159      	adcs	r1, r3
 800af76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af7a:	e7eb      	b.n	800af54 <__swhatbuf_r+0x24>

0800af7c <__smakebuf_r>:
 800af7c:	898b      	ldrh	r3, [r1, #12]
 800af7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af80:	079d      	lsls	r5, r3, #30
 800af82:	4606      	mov	r6, r0
 800af84:	460c      	mov	r4, r1
 800af86:	d507      	bpl.n	800af98 <__smakebuf_r+0x1c>
 800af88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	6123      	str	r3, [r4, #16]
 800af90:	2301      	movs	r3, #1
 800af92:	6163      	str	r3, [r4, #20]
 800af94:	b003      	add	sp, #12
 800af96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af98:	ab01      	add	r3, sp, #4
 800af9a:	466a      	mov	r2, sp
 800af9c:	f7ff ffc8 	bl	800af30 <__swhatbuf_r>
 800afa0:	9f00      	ldr	r7, [sp, #0]
 800afa2:	4605      	mov	r5, r0
 800afa4:	4639      	mov	r1, r7
 800afa6:	4630      	mov	r0, r6
 800afa8:	f7fe ffde 	bl	8009f68 <_malloc_r>
 800afac:	b948      	cbnz	r0, 800afc2 <__smakebuf_r+0x46>
 800afae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb2:	059a      	lsls	r2, r3, #22
 800afb4:	d4ee      	bmi.n	800af94 <__smakebuf_r+0x18>
 800afb6:	f023 0303 	bic.w	r3, r3, #3
 800afba:	f043 0302 	orr.w	r3, r3, #2
 800afbe:	81a3      	strh	r3, [r4, #12]
 800afc0:	e7e2      	b.n	800af88 <__smakebuf_r+0xc>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	6020      	str	r0, [r4, #0]
 800afc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afca:	81a3      	strh	r3, [r4, #12]
 800afcc:	9b01      	ldr	r3, [sp, #4]
 800afce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800afd2:	b15b      	cbz	r3, 800afec <__smakebuf_r+0x70>
 800afd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd8:	4630      	mov	r0, r6
 800afda:	f000 f83b 	bl	800b054 <_isatty_r>
 800afde:	b128      	cbz	r0, 800afec <__smakebuf_r+0x70>
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	f023 0303 	bic.w	r3, r3, #3
 800afe6:	f043 0301 	orr.w	r3, r3, #1
 800afea:	81a3      	strh	r3, [r4, #12]
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	431d      	orrs	r5, r3
 800aff0:	81a5      	strh	r5, [r4, #12]
 800aff2:	e7cf      	b.n	800af94 <__smakebuf_r+0x18>

0800aff4 <_raise_r>:
 800aff4:	291f      	cmp	r1, #31
 800aff6:	b538      	push	{r3, r4, r5, lr}
 800aff8:	4605      	mov	r5, r0
 800affa:	460c      	mov	r4, r1
 800affc:	d904      	bls.n	800b008 <_raise_r+0x14>
 800affe:	2316      	movs	r3, #22
 800b000:	6003      	str	r3, [r0, #0]
 800b002:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b00a:	b112      	cbz	r2, 800b012 <_raise_r+0x1e>
 800b00c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b010:	b94b      	cbnz	r3, 800b026 <_raise_r+0x32>
 800b012:	4628      	mov	r0, r5
 800b014:	f000 f840 	bl	800b098 <_getpid_r>
 800b018:	4622      	mov	r2, r4
 800b01a:	4601      	mov	r1, r0
 800b01c:	4628      	mov	r0, r5
 800b01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b022:	f000 b827 	b.w	800b074 <_kill_r>
 800b026:	2b01      	cmp	r3, #1
 800b028:	d00a      	beq.n	800b040 <_raise_r+0x4c>
 800b02a:	1c59      	adds	r1, r3, #1
 800b02c:	d103      	bne.n	800b036 <_raise_r+0x42>
 800b02e:	2316      	movs	r3, #22
 800b030:	6003      	str	r3, [r0, #0]
 800b032:	2001      	movs	r0, #1
 800b034:	e7e7      	b.n	800b006 <_raise_r+0x12>
 800b036:	2100      	movs	r1, #0
 800b038:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b03c:	4620      	mov	r0, r4
 800b03e:	4798      	blx	r3
 800b040:	2000      	movs	r0, #0
 800b042:	e7e0      	b.n	800b006 <_raise_r+0x12>

0800b044 <raise>:
 800b044:	4b02      	ldr	r3, [pc, #8]	@ (800b050 <raise+0xc>)
 800b046:	4601      	mov	r1, r0
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	f7ff bfd3 	b.w	800aff4 <_raise_r>
 800b04e:	bf00      	nop
 800b050:	2400001c 	.word	0x2400001c

0800b054 <_isatty_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4d06      	ldr	r5, [pc, #24]	@ (800b070 <_isatty_r+0x1c>)
 800b058:	2300      	movs	r3, #0
 800b05a:	4604      	mov	r4, r0
 800b05c:	4608      	mov	r0, r1
 800b05e:	602b      	str	r3, [r5, #0]
 800b060:	f7f5 fe02 	bl	8000c68 <_isatty>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d102      	bne.n	800b06e <_isatty_r+0x1a>
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	b103      	cbz	r3, 800b06e <_isatty_r+0x1a>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	240006f0 	.word	0x240006f0

0800b074 <_kill_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d07      	ldr	r5, [pc, #28]	@ (800b094 <_kill_r+0x20>)
 800b078:	2300      	movs	r3, #0
 800b07a:	4604      	mov	r4, r0
 800b07c:	4608      	mov	r0, r1
 800b07e:	4611      	mov	r1, r2
 800b080:	602b      	str	r3, [r5, #0]
 800b082:	f7f5 fd81 	bl	8000b88 <_kill>
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	d102      	bne.n	800b090 <_kill_r+0x1c>
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	b103      	cbz	r3, 800b090 <_kill_r+0x1c>
 800b08e:	6023      	str	r3, [r4, #0]
 800b090:	bd38      	pop	{r3, r4, r5, pc}
 800b092:	bf00      	nop
 800b094:	240006f0 	.word	0x240006f0

0800b098 <_getpid_r>:
 800b098:	f7f5 bd6e 	b.w	8000b78 <_getpid>

0800b09c <_fstat_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4d07      	ldr	r5, [pc, #28]	@ (800b0bc <_fstat_r+0x20>)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	602b      	str	r3, [r5, #0]
 800b0aa:	f7f5 fdcd 	bl	8000c48 <_fstat>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	d102      	bne.n	800b0b8 <_fstat_r+0x1c>
 800b0b2:	682b      	ldr	r3, [r5, #0]
 800b0b4:	b103      	cbz	r3, 800b0b8 <_fstat_r+0x1c>
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ba:	bf00      	nop
 800b0bc:	240006f0 	.word	0x240006f0

0800b0c0 <_init>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	bf00      	nop
 800b0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c6:	bc08      	pop	{r3}
 800b0c8:	469e      	mov	lr, r3
 800b0ca:	4770      	bx	lr

0800b0cc <_fini>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	bf00      	nop
 800b0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d2:	bc08      	pop	{r3}
 800b0d4:	469e      	mov	lr, r3
 800b0d6:	4770      	bx	lr
