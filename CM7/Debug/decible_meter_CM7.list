
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af50  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800b1f0  0800b1f0  0000c1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b58c  0800b58c  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b58c  0800b58c  0000c58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b594  0800b594  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b594  0800b594  0000c594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b598  0800b598  0000c598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800b59c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  240001d8  0800b774  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240006f4  0800b774  0000d6f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dede  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215b  00000000  00000000  0001b0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0001d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a7  00000000  00000000  0001ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fce7  00000000  00000000  0001e65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b23  00000000  00000000  0005e346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00199e09  00000000  00000000  0006ee69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00208c72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  00208cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0020c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b1d8 	.word	0x0800b1d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800b1d8 	.word	0x0800b1d8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	@ (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	@ (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	@ (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	@ (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	@ (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	@ (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	@ (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	@ (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	@ (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	@ (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	@ (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	@ (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	@ (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	@ (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	@ (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	@ (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	@ (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000464:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d013      	beq.n	80004fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d00b      	beq.n	80004fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e4:	e000      	b.n	80004e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f9      	beq.n	80004e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004f2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	b2d2      	uxtb	r2, r2
 80004fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004fc:	687b      	ldr	r3, [r7, #4]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <main>:
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai);
void Error_Handler(void);

// Main function
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 8000512:	f000 fc85 	bl	8000e20 <HAL_Init>

    // Initialize system
    SystemClock_Config();
 8000516:	f000 f837 	bl	8000588 <SystemClock_Config>
    MX_GPIO_Init();
 800051a:	f000 f93f 	bl	800079c <MX_GPIO_Init>
    MX_DMA_Init();
 800051e:	f000 f9ed 	bl	80008fc <MX_DMA_Init>
    MX_SAI1_Init();
 8000522:	f000 f983 	bl	800082c <MX_SAI1_Init>
    // GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    // HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    // Start SAI reception using DMA in circular mode
    HAL_StatusTypeDef status =
        HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)audio_buffer, BUFFER_LEN);
 8000526:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800052a:	4912      	ldr	r1, [pc, #72]	@ (8000574 <main+0x68>)
 800052c:	4812      	ldr	r0, [pc, #72]	@ (8000578 <main+0x6c>)
 800052e:	f007 fee9 	bl	8008304 <HAL_SAI_Receive_DMA>
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <main+0x34>
    {
        // Indicate specific error with LED pattern or debug output
        Error_Handler();
 800053c:	f000 fac6 	bl	8000acc <Error_Handler>

    // Main processing loop
    while (1)
    {
        // Process first half of buffer
        if (buffer_half_ready)
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <main+0x70>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d006      	beq.n	8000558 <main+0x4c>
        {
            ProcessAudioData(&audio_buffer[0], BUFFER_LEN / 2);
 800054a:	2180      	movs	r1, #128	@ 0x80
 800054c:	4809      	ldr	r0, [pc, #36]	@ (8000574 <main+0x68>)
 800054e:	f000 fa57 	bl	8000a00 <ProcessAudioData>
            buffer_half_ready = 0;
 8000552:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <main+0x70>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
        }

        // Process second half of buffer
        if (buffer_full_ready)
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <main+0x74>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0ee      	beq.n	8000540 <main+0x34>
        {
            ProcessAudioData(&audio_buffer[BUFFER_LEN / 2], BUFFER_LEN / 2);
 8000562:	2180      	movs	r1, #128	@ 0x80
 8000564:	4807      	ldr	r0, [pc, #28]	@ (8000584 <main+0x78>)
 8000566:	f000 fa4b 	bl	8000a00 <ProcessAudioData>
            buffer_full_ready = 0;
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <main+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
        if (buffer_half_ready)
 8000570:	e7e6      	b.n	8000540 <main+0x34>
 8000572:	bf00      	nop
 8000574:	240001f4 	.word	0x240001f4
 8000578:	24000508 	.word	0x24000508
 800057c:	240003f4 	.word	0x240003f4
 8000580:	240003f5 	.word	0x240003f5
 8000584:	240002f4 	.word	0x240002f4

08000588 <SystemClock_Config>:
    }
}

// System clock configuration - optimized for audio applications
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0d0      	sub	sp, #320	@ 0x140
 800058c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000592:	224c      	movs	r2, #76	@ 0x4c
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f008 ff28 	bl	80093ec <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80005a0:	2220      	movs	r2, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f008 ff21 	bl	80093ec <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80005ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80005b2:	4618      	mov	r0, r3
 80005b4:	23c8      	movs	r3, #200	@ 0xc8
 80005b6:	461a      	mov	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f008 ff17 	bl	80093ec <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005be:	2004      	movs	r0, #4
 80005c0:	f003 fdfe 	bl	80041c0 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80005c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	4b6f      	ldr	r3, [pc, #444]	@ (8000790 <SystemClock_Config+0x208>)
 80005d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005d4:	4a6e      	ldr	r2, [pc, #440]	@ (8000790 <SystemClock_Config+0x208>)
 80005d6:	f023 0301 	bic.w	r3, r3, #1
 80005da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80005dc:	4b6c      	ldr	r3, [pc, #432]	@ (8000790 <SystemClock_Config+0x208>)
 80005de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005e0:	f003 0201 	and.w	r2, r3, #1
 80005e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80005e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	4b69      	ldr	r3, [pc, #420]	@ (8000794 <SystemClock_Config+0x20c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a68      	ldr	r2, [pc, #416]	@ (8000794 <SystemClock_Config+0x20c>)
 80005f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b66      	ldr	r3, [pc, #408]	@ (8000794 <SystemClock_Config+0x20c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8000602:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000606:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000610:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000614:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000616:	bf00      	nop
 8000618:	4b5e      	ldr	r3, [pc, #376]	@ (8000794 <SystemClock_Config+0x20c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000624:	d1f8      	bne.n	8000618 <SystemClock_Config+0x90>
    {
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 8000626:	f003 fdbb 	bl	80041a0 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800062a:	f000 fc8b 	bl	8000f44 <HAL_GetREVID>
 800062e:	4b5a      	ldr	r3, [pc, #360]	@ (8000798 <SystemClock_Config+0x210>)
 8000630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000632:	4a59      	ldr	r2, [pc, #356]	@ (8000798 <SystemClock_Config+0x210>)
 8000634:	f023 0318 	bic.w	r3, r3, #24
 8000638:	6713      	str	r3, [r2, #112]	@ 0x70

    /** Macro to configure the PLL clock source
     */
    __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800063a:	4b57      	ldr	r3, [pc, #348]	@ (8000798 <SystemClock_Config+0x210>)
 800063c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800063e:	f023 0303 	bic.w	r3, r3, #3
 8000642:	4a55      	ldr	r2, [pc, #340]	@ (8000798 <SystemClock_Config+0x210>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6293      	str	r3, [r2, #40]	@ 0x28

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064a:	2301      	movs	r3, #1
 800064c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000654:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	2302      	movs	r3, #2
 8000660:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    RCC_OscInitStruct.PLL.PLLM = 5;
 8000664:	2305      	movs	r3, #5
 8000666:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    RCC_OscInitStruct.PLL.PLLN = 160;
 800066a:	23a0      	movs	r3, #160	@ 0xa0
 800066c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    RCC_OscInitStruct.PLL.PLLP = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    RCC_OscInitStruct.PLL.PLLR = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000682:	2308      	movs	r3, #8
 8000684:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fdeb 	bl	8004274 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x120>
    {
        Error_Handler();
 80006a4:	f000 fa12 	bl	8000acc <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 80006a8:	233f      	movs	r3, #63	@ 0x3f
 80006aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 |
                                  RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2303      	movs	r3, #3
 80006b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ba:	2308      	movs	r3, #8
 80006bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006c0:	2340      	movs	r3, #64	@ 0x40
 80006c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006c6:	2340      	movs	r3, #64	@ 0x40
 80006c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006d4:	2340      	movs	r3, #64	@ 0x40
 80006d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 fa21 	bl	8004b28 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x168>
    {
        Error_Handler();
 80006ec:	f000 f9ee 	bl	8000acc <Error_Handler>
    }

    /** Configure the SAI PLL for audio clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80006f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006f4:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 80006f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 8000704:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000708:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800070c:	2219      	movs	r2, #25
 800070e:	609a      	str	r2, [r3, #8]
    PeriphClkInitStruct.PLL2.PLL2N = 344;
 8000710:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000714:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000718:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800071c:	60da      	str	r2, [r3, #12]
    PeriphClkInitStruct.PLL2.PLL2P = 7; // PLL2P = 344/7 = 49.142MHz for 16kHz * 256 = ~12.58MHz
 800071e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000722:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000726:	2207      	movs	r2, #7
 8000728:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800072a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800072e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000732:	2202      	movs	r2, #2
 8000734:	615a      	str	r2, [r3, #20]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000736:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800073a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800073e:	2202      	movs	r2, #2
 8000740:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000742:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000746:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800074e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000752:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800075a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800075e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8000766:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800076a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800076e:	2201      	movs	r2, #1
 8000770:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fd4c 	bl	8005214 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x1fe>
    {
        Error_Handler();
 8000782:	f000 f9a3 	bl	8000acc <Error_Handler>
    }
}
 8000786:	bf00      	nop
 8000788:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	58000400 	.word	0x58000400
 8000794:	58024800 	.word	0x58024800
 8000798:	58024400 	.word	0x58024400

0800079c <MX_GPIO_Init>:

// GPIO initialization
static void MX_GPIO_Init(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b8:	f003 0310 	and.w	r3, r3, #16
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c6:	4a18      	ldr	r2, [pc, #96]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e4:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000802:	4a09      	ldr	r2, [pc, #36]	@ (8000828 <MX_GPIO_Init+0x8c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_GPIO_Init+0x8c>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

    // Add any specific GPIO pin configurations here if needed
    // for example, LEDs or debug pins
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	58024400 	.word	0x58024400

0800082c <MX_SAI1_Init>:

// SAI1 initialization with proper audio configuration
static void MX_SAI1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    /* SAI peripheral configuration */
    hsai_BlockA1.Instance = SAI1_Block_A;
 8000830:	4b30      	ldr	r3, [pc, #192]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000832:	4a31      	ldr	r2, [pc, #196]	@ (80008f8 <MX_SAI1_Init+0xcc>)
 8000834:	601a      	str	r2, [r3, #0]
    hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000836:	4b2f      	ldr	r3, [pc, #188]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000838:	2200      	movs	r2, #0
 800083a:	645a      	str	r2, [r3, #68]	@ 0x44
    hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800083c:	4b2d      	ldr	r3, [pc, #180]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 800083e:	2201      	movs	r2, #1
 8000840:	605a      	str	r2, [r3, #4]
    hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000842:	4b2c      	ldr	r3, [pc, #176]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	649a      	str	r2, [r3, #72]	@ 0x48
    hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000848:	4b2a      	ldr	r3, [pc, #168]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 800084a:	2200      	movs	r2, #0
 800084c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800084e:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000850:	2200      	movs	r2, #0
 8000852:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000854:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
    hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800085a:	4b26      	ldr	r3, [pc, #152]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
    hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
    hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000866:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800086c:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
    hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000874:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000878:	621a      	str	r2, [r3, #32]
    hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
    hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000880:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000882:	2200      	movs	r2, #0
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000886:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	@ 0x30
    hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 800088e:	2200      	movs	r2, #0
 8000890:	635a      	str	r2, [r3, #52]	@ 0x34
    hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 800089c:	2200      	movs	r2, #0
 800089e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsai_BlockA1.Init.PdmInit.ClockEnable = 0;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* SAI frame configuration - add these directly to the Init structure */
    hsai_BlockA1.FrameInit.FrameLength = 32;
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008a8:	2220      	movs	r2, #32
 80008aa:	655a      	str	r2, [r3, #84]	@ 0x54
    hsai_BlockA1.FrameInit.ActiveFrameLength = 16;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008ae:	2210      	movs	r2, #16
 80008b0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* SAI slot configuration */
    hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	669a      	str	r2, [r3, #104]	@ 0x68
    hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	66da      	str	r2, [r3, #108]	@ 0x6c
    hsai_BlockA1.SlotInit.SlotNumber = 2;
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	671a      	str	r2, [r3, #112]	@ 0x70
    hsai_BlockA1.SlotInit.SlotActive = SAI_SLOTACTIVE_ALL;
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008dc:	675a      	str	r2, [r3, #116]	@ 0x74

    if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_SAI1_Init+0xc8>)
 80008e0:	f007 f9d6 	bl	8007c90 <HAL_SAI_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_SAI1_Init+0xc2>
    {
        Error_Handler();
 80008ea:	f000 f8ef 	bl	8000acc <Error_Handler>
    }
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	24000508 	.word	0x24000508
 80008f8:	40015804 	.word	0x40015804

080008fc <MX_DMA_Init>:

// DMA initialization for SAI
static void MX_DMA_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000902:	4b2b      	ldr	r3, [pc, #172]	@ (80009b0 <MX_DMA_Init+0xb4>)
 8000904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000908:	4a29      	ldr	r2, [pc, #164]	@ (80009b0 <MX_DMA_Init+0xb4>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000912:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <MX_DMA_Init+0xb4>)
 8000914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

    /* Configure DMA request for SAI1 RX */
    hdma_sai1_a_rx.Instance = DMA1_Stream1;
 8000920:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <MX_DMA_Init+0xb8>)
 8000922:	4a25      	ldr	r2, [pc, #148]	@ (80009b8 <MX_DMA_Init+0xbc>)
 8000924:	601a      	str	r2, [r3, #0]
    hdma_sai1_a_rx.Init.Request = DMA_REQUEST_SAI1_A;
 8000926:	4b23      	ldr	r3, [pc, #140]	@ (80009b4 <MX_DMA_Init+0xb8>)
 8000928:	2257      	movs	r2, #87	@ 0x57
 800092a:	605a      	str	r2, [r3, #4]
    hdma_sai1_a_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092c:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <MX_DMA_Init+0xb8>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    hdma_sai1_a_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <MX_DMA_Init+0xb8>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    hdma_sai1_a_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000938:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <MX_DMA_Init+0xb8>)
 800093a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800093e:	611a      	str	r2, [r3, #16]
    hdma_sai1_a_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_DMA_Init+0xb8>)
 8000942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000946:	615a      	str	r2, [r3, #20]
    hdma_sai1_a_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_DMA_Init+0xb8>)
 800094a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800094e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a_rx.Init.Mode = DMA_CIRCULAR;
 8000950:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <MX_DMA_Init+0xb8>)
 8000952:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000956:	61da      	str	r2, [r3, #28]
    hdma_sai1_a_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000958:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_DMA_Init+0xb8>)
 800095a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800095e:	621a      	str	r2, [r3, #32]

    // Consider enabling FIFO mode for more stable transfers with bursts
    hdma_sai1_a_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_DMA_Init+0xb8>)
 8000962:	2204      	movs	r2, #4
 8000964:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai1_a_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <MX_DMA_Init+0xb8>)
 8000968:	2203      	movs	r2, #3
 800096a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai1_a_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_DMA_Init+0xb8>)
 800096e:	2200      	movs	r2, #0
 8000970:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai1_a_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <MX_DMA_Init+0xb8>)
 8000974:	2200      	movs	r2, #0
 8000976:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_DMA_Init(&hdma_sai1_a_rx) != HAL_OK)
 8000978:	480e      	ldr	r0, [pc, #56]	@ (80009b4 <MX_DMA_Init+0xb8>)
 800097a:	f000 fbff 	bl	800117c <HAL_DMA_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_DMA_Init+0x8c>
    {
        Error_Handler();
 8000984:	f000 f8a2 	bl	8000acc <Error_Handler>
    }

    /* Associate the DMA handle with the SAI handle */
    __HAL_LINKDMA(&hsai_BlockA1, hdmarx, hdma_sai1_a_rx);
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_DMA_Init+0xc0>)
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <MX_DMA_Init+0xb8>)
 800098c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <MX_DMA_Init+0xb8>)
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <MX_DMA_Init+0xc0>)
 8000994:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Configure NVIC for DMA interrupt */
    HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	200c      	movs	r0, #12
 800099c:	f000 fbb9 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009a0:	200c      	movs	r0, #12
 80009a2:	f000 fbd0 	bl	8001146 <HAL_NVIC_EnableIRQ>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	58024400 	.word	0x58024400
 80009b4:	240003f8 	.word	0x240003f8
 80009b8:	40020028 	.word	0x40020028
 80009bc:	24000508 	.word	0x24000508

080009c0 <HAL_SAI_RxHalfCpltCallback>:
 * @brief  Half completed reception callback
 * @param  hsai: pointer to a SAI_HandleTypeDef structure
 * @retval None
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    /* Set flag to process first half of buffer */
    buffer_half_ready = 1;
 80009c8:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <HAL_SAI_RxHalfCpltCallback+0x1c>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	240003f4 	.word	0x240003f4

080009e0 <HAL_SAI_RxCpltCallback>:
 * @brief  Completed reception callback
 * @param  hsai: pointer to a SAI_HandleTypeDef structure
 * @retval None
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    /* Set flag to process second half of buffer */
    buffer_full_ready = 1;
 80009e8:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <HAL_SAI_RxCpltCallback+0x1c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	240003f5 	.word	0x240003f5

08000a00 <ProcessAudioData>:
 * @param  buffer: pointer to buffer containing audio data
 * @param  length: length of the buffer to process
 * @retval None
 */
void ProcessAudioData(uint16_t *buffer, uint16_t length)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
    // Debug: Check if buffer contains non-zero values
    uint8_t has_data = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	75fb      	strb	r3, [r7, #23]
    uint16_t max_value = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	82bb      	strh	r3, [r7, #20]
    uint16_t avg_value = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	81bb      	strh	r3, [r7, #12]
    uint32_t sum = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]

    printf("ayay data");
 8000a1c:	4824      	ldr	r0, [pc, #144]	@ (8000ab0 <ProcessAudioData+0xb0>)
 8000a1e:	f008 fcd3 	bl	80093c8 <iprintf>

    for (uint16_t i = 0; i < length; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	81fb      	strh	r3, [r7, #14]
 8000a26:	e025      	b.n	8000a74 <ProcessAudioData+0x74>
    {
        if (buffer[i] != 0)
 8000a28:	89fb      	ldrh	r3, [r7, #14]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <ProcessAudioData+0x40>
        {
            has_data = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	75fb      	strb	r3, [r7, #23]
            printf("ayay data");
 8000a3a:	481d      	ldr	r0, [pc, #116]	@ (8000ab0 <ProcessAudioData+0xb0>)
 8000a3c:	f008 fcc4 	bl	80093c8 <iprintf>
        }

        if (buffer[i] > max_value)
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	8aba      	ldrh	r2, [r7, #20]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d205      	bcs.n	8000a5c <ProcessAudioData+0x5c>
        {
            max_value = buffer[i];
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	82bb      	strh	r3, [r7, #20]
        }

        sum += buffer[i];
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < length; i++)
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	3301      	adds	r3, #1
 8000a72:	81fb      	strh	r3, [r7, #14]
 8000a74:	89fa      	ldrh	r2, [r7, #14]
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d3d5      	bcc.n	8000a28 <ProcessAudioData+0x28>
    }

    if (length > 0)
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d004      	beq.n	8000a8c <ProcessAudioData+0x8c>
    {
        avg_value = sum / length;
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	81bb      	strh	r3, [r7, #12]
    // TODO: Add your debug output mechanism here
    // For example, toggle LEDs based on audio detection
    // or output to debug UART

    // Example LED debug - assuming you have LEDs connected:
    if (has_data)
 8000a8c:	7dfb      	ldrb	r3, [r7, #23]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <ProcessAudioData+0x9e>
    {

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
 8000a92:	2201      	movs	r2, #1
 8000a94:	2101      	movs	r1, #1
 8000a96:	4807      	ldr	r0, [pc, #28]	@ (8000ab4 <ProcessAudioData+0xb4>)
 8000a98:	f003 fb68 	bl	800416c <HAL_GPIO_WritePin>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn off LED
    }

    // Add your processing code here
}
 8000a9c:	e004      	b.n	8000aa8 <ProcessAudioData+0xa8>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn off LED
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <ProcessAudioData+0xb4>)
 8000aa4:	f003 fb62 	bl	800416c <HAL_GPIO_WritePin>
}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	0800b1f0 	.word	0x0800b1f0
 8000ab4:	58020400 	.word	0x58020400

08000ab8 <DMA1_Stream1_IRQHandler>:
/**
 * @brief  DMA1 Stream1 IRQ handler (for SAI RX)
 * @retval None
 */
void DMA1_Stream1_IRQHandler(void) { HAL_DMA_IRQHandler(&hdma_sai1_a_rx); }
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <DMA1_Stream1_IRQHandler+0x10>)
 8000abe:	f001 fe87 	bl	80027d0 <HAL_DMA_IRQHandler>
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	240003f8 	.word	0x240003f8

08000acc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
    /* User can add his own implementation to report the HAL error */
    __disable_irq();
    while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_SAI_MspInit>:
 * @brief  SAI MSP Initialization
 * @param  hsai: pointer to a SAI_HandleTypeDef structure
 * @retval None
 */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

    if (hsai->Instance == SAI1_Block_A)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b74 <HAL_SAI_MspInit+0x9c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d137      	bne.n	8000b6a <HAL_SAI_MspInit+0x92>
    {
        /* SAI1 clock enable */
        __HAL_RCC_SAI1_CLK_ENABLE();
 8000afa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <HAL_SAI_MspInit+0xa0>)
 8000afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b00:	4a1d      	ldr	r2, [pc, #116]	@ (8000b78 <HAL_SAI_MspInit+0xa0>)
 8000b02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <HAL_SAI_MspInit+0xa0>)
 8000b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]

        /* Enable GPIO clocks */
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <HAL_SAI_MspInit+0xa0>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1e:	4a16      	ldr	r2, [pc, #88]	@ (8000b78 <HAL_SAI_MspInit+0xa0>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b28:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <HAL_SAI_MspInit+0xa0>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]

        /* Configure GPIO pins for SAI1 */
        /* SAI1_SD_A pin (data input) - Configure with pull-up for better noise immunity */
        GPIO_InitStruct.Pin = GPIO_PIN_2; // Adjust based on your board schematic
 8000b36:	2304      	movs	r3, #4
 8000b38:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b42:	2302      	movs	r3, #2
 8000b44:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000b46:	2306      	movs	r3, #6
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480a      	ldr	r0, [pc, #40]	@ (8000b7c <HAL_SAI_MspInit+0xa4>)
 8000b52:	f003 f95b 	bl	8003e0c <HAL_GPIO_Init>

        /* SAI1_SCK_A, SAI1_FS_A, SAI1_MCLK_A pins */
        GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5; // Adjust based on your board
 8000b56:	2338      	movs	r3, #56	@ 0x38
 8000b58:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <HAL_SAI_MspInit+0xa4>)
 8000b66:	f003 f951 	bl	8003e0c <HAL_GPIO_Init>
    }
}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	@ 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40015804 	.word	0x40015804
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	58021000 	.word	0x58021000

08000b80 <_write>:
        HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5);
    }
}

int _write(int file, char *ptr, int len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e009      	b.n	8000baa <_write+0x2a>
    {
        ITM_SendChar(*ptr++);
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	60ba      	str	r2, [r7, #8]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fc8c 	bl	80004bc <ITM_SendChar>
    for (i = 0; i < len; i++)
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dbf1      	blt.n	8000b96 <_write+0x16>
    }
    return len;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_MspInit+0x30>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bc8:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <HAL_MspInit+0x30>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_MspInit+0x30>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	58024400 	.word	0x58024400

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8000c46:	f000 f95d 	bl	8000f04 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <BDMA_Channel0_IRQHandler>:

/**
 * @brief This function handles BDMA channel0 global interrupt.
 */
void BDMA_Channel0_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

    /* USER CODE END BDMA_Channel0_IRQn 0 */
    // HAL_DMA_IRQHandler(&hdma_sai4_a);
    HAL_DMA_IRQHandler(&hsai_BlockA4);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <BDMA_Channel0_IRQHandler+0x10>)
 8000c56:	f001 fdbb 	bl	80027d0 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

    /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24000470 	.word	0x24000470

08000c64 <SAI4_IRQHandler>:

/**
 * @brief This function handles SAI4 global interrupt.
 */
void SAI4_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SAI4_IRQn 0 */
    HAL_SAI_IRQHandler(&hsai_BlockA4);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <SAI4_IRQHandler+0x10>)
 8000c6a:	f007 fbdf 	bl	800842c <HAL_SAI_IRQHandler>
    /* USER CODE END SAI4_IRQn 0 */

    /* USER CODE BEGIN SAI4_IRQn 1 */

    /* USER CODE END SAI4_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	24000470 	.word	0x24000470

08000c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return 1;
 8000c7c:	2301      	movs	r3, #1
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_kill>:

int _kill(int pid, int sig)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c92:	f008 fbb3 	bl	80093fc <__errno>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2216      	movs	r2, #22
 8000c9a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_exit>:

void _exit (int status)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ffe7 	bl	8000c88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cba:	bf00      	nop
 8000cbc:	e7fd      	b.n	8000cba <_exit+0x12>

08000cbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e00a      	b.n	8000ce6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cd0:	f3af 8000 	nop.w
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	60ba      	str	r2, [r7, #8]
 8000cdc:	b2ca      	uxtb	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	dbf0      	blt.n	8000cd0 <_read+0x12>
  }

  return len;
 8000cee:	687b      	ldr	r3, [r7, #4]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d20:	605a      	str	r2, [r3, #4]
  return 0;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_isatty>:

int _isatty(int file)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d38:	2301      	movs	r3, #1
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b085      	sub	sp, #20
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f008 fb34 	bl	80093fc <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	24080000 	.word	0x24080000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	240005a0 	.word	0x240005a0
 8000dc8:	240006f8 	.word	0x240006f8

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd0:	f7ff fade 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	@ (8000e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f008 fb05 	bl	8009408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fb85 	bl	800050c <main>
  bx  lr
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e0c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000e10:	0800b59c 	.word	0x0800b59c
  ldr r2, =_sbss
 8000e14:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000e18:	240006f4 	.word	0x240006f4

08000e1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC3_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f968 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e2c:	f004 f832 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8000e30:	4602      	mov	r2, r0
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_Init+0x68>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	f003 030f 	and.w	r3, r3, #15
 8000e3c:	4913      	ldr	r1, [pc, #76]	@ (8000e8c <HAL_Init+0x6c>)
 8000e3e:	5ccb      	ldrb	r3, [r1, r3]
 8000e40:	f003 031f 	and.w	r3, r3, #31
 8000e44:	fa22 f303 	lsr.w	r3, r2, r3
 8000e48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_Init+0x68>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <HAL_Init+0x6c>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_Init+0x70>)
 8000e62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <HAL_Init+0x74>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f000 f814 	bl	8000e98 <HAL_InitTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e002      	b.n	8000e80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7a:	f7ff fe9f 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	0800b1fc 	.word	0x0800b1fc
 8000e90:	24000004 	.word	0x24000004
 8000e94:	24000000 	.word	0x24000000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_InitTick+0x60>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e021      	b.n	8000ef0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <HAL_InitTick+0x64>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_InitTick+0x60>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f94d 	bl	8001162 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee0:	f000 f917 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <HAL_InitTick+0x68>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2400000c 	.word	0x2400000c
 8000efc:	24000000 	.word	0x24000000
 8000f00:	24000008 	.word	0x24000008

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2400000c 	.word	0x2400000c
 8000f28:	240005a4 	.word	0x240005a4

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	240005a4 	.word	0x240005a4

08000f44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <HAL_GetREVID+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	0c1b      	lsrs	r3, r3, #16
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	5c001000 	.word	0x5c001000

08000f5c <__NVIC_SetPriorityGrouping>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x40>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x40>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	05fa0000 	.word	0x05fa0000

08000fa4 <__NVIC_GetPriorityGrouping>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	@ (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	@ (800104c <__NVIC_SetPriority+0x50>)
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff29 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff40 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff90 	bl	8001050 <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5f 	bl	8000ffc <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff33 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffa4 	bl	80010b8 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff fed2 	bl	8000f2c <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e316      	b.n	80017c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a66      	ldr	r2, [pc, #408]	@ (8001334 <HAL_DMA_Init+0x1b8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d04a      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a65      	ldr	r2, [pc, #404]	@ (8001338 <HAL_DMA_Init+0x1bc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d045      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a63      	ldr	r2, [pc, #396]	@ (800133c <HAL_DMA_Init+0x1c0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d040      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a62      	ldr	r2, [pc, #392]	@ (8001340 <HAL_DMA_Init+0x1c4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d03b      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a60      	ldr	r2, [pc, #384]	@ (8001344 <HAL_DMA_Init+0x1c8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d036      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001348 <HAL_DMA_Init+0x1cc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d031      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a5d      	ldr	r2, [pc, #372]	@ (800134c <HAL_DMA_Init+0x1d0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d02c      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a5c      	ldr	r2, [pc, #368]	@ (8001350 <HAL_DMA_Init+0x1d4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d027      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a5a      	ldr	r2, [pc, #360]	@ (8001354 <HAL_DMA_Init+0x1d8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d022      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a59      	ldr	r2, [pc, #356]	@ (8001358 <HAL_DMA_Init+0x1dc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d01d      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a57      	ldr	r2, [pc, #348]	@ (800135c <HAL_DMA_Init+0x1e0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d018      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a56      	ldr	r2, [pc, #344]	@ (8001360 <HAL_DMA_Init+0x1e4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d013      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a54      	ldr	r2, [pc, #336]	@ (8001364 <HAL_DMA_Init+0x1e8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00e      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a53      	ldr	r2, [pc, #332]	@ (8001368 <HAL_DMA_Init+0x1ec>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d009      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a51      	ldr	r2, [pc, #324]	@ (800136c <HAL_DMA_Init+0x1f0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d004      	beq.n	8001234 <HAL_DMA_Init+0xb8>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a50      	ldr	r2, [pc, #320]	@ (8001370 <HAL_DMA_Init+0x1f4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d101      	bne.n	8001238 <HAL_DMA_Init+0xbc>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_DMA_Init+0xbe>
 8001238:	2300      	movs	r3, #0
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 813b 	beq.w	80014b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a37      	ldr	r2, [pc, #220]	@ (8001334 <HAL_DMA_Init+0x1b8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d04a      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a36      	ldr	r2, [pc, #216]	@ (8001338 <HAL_DMA_Init+0x1bc>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d045      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a34      	ldr	r2, [pc, #208]	@ (800133c <HAL_DMA_Init+0x1c0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d040      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a33      	ldr	r2, [pc, #204]	@ (8001340 <HAL_DMA_Init+0x1c4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d03b      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a31      	ldr	r2, [pc, #196]	@ (8001344 <HAL_DMA_Init+0x1c8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d036      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a30      	ldr	r2, [pc, #192]	@ (8001348 <HAL_DMA_Init+0x1cc>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d031      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a2e      	ldr	r2, [pc, #184]	@ (800134c <HAL_DMA_Init+0x1d0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d02c      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a2d      	ldr	r2, [pc, #180]	@ (8001350 <HAL_DMA_Init+0x1d4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d027      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001354 <HAL_DMA_Init+0x1d8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d022      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001358 <HAL_DMA_Init+0x1dc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d01d      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a28      	ldr	r2, [pc, #160]	@ (800135c <HAL_DMA_Init+0x1e0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d018      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a27      	ldr	r2, [pc, #156]	@ (8001360 <HAL_DMA_Init+0x1e4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d013      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a25      	ldr	r2, [pc, #148]	@ (8001364 <HAL_DMA_Init+0x1e8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00e      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a24      	ldr	r2, [pc, #144]	@ (8001368 <HAL_DMA_Init+0x1ec>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d009      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a22      	ldr	r2, [pc, #136]	@ (800136c <HAL_DMA_Init+0x1f0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d004      	beq.n	80012f0 <HAL_DMA_Init+0x174>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a21      	ldr	r2, [pc, #132]	@ (8001370 <HAL_DMA_Init+0x1f4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d108      	bne.n	8001302 <HAL_DMA_Init+0x186>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e007      	b.n	8001312 <HAL_DMA_Init+0x196>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001312:	e02f      	b.n	8001374 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001314:	f7ff fe0a 	bl	8000f2c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b05      	cmp	r3, #5
 8001320:	d928      	bls.n	8001374 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2220      	movs	r2, #32
 8001326:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2203      	movs	r2, #3
 800132c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e246      	b.n	80017c2 <HAL_DMA_Init+0x646>
 8001334:	40020010 	.word	0x40020010
 8001338:	40020028 	.word	0x40020028
 800133c:	40020040 	.word	0x40020040
 8001340:	40020058 	.word	0x40020058
 8001344:	40020070 	.word	0x40020070
 8001348:	40020088 	.word	0x40020088
 800134c:	400200a0 	.word	0x400200a0
 8001350:	400200b8 	.word	0x400200b8
 8001354:	40020410 	.word	0x40020410
 8001358:	40020428 	.word	0x40020428
 800135c:	40020440 	.word	0x40020440
 8001360:	40020458 	.word	0x40020458
 8001364:	40020470 	.word	0x40020470
 8001368:	40020488 	.word	0x40020488
 800136c:	400204a0 	.word	0x400204a0
 8001370:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1c8      	bne.n	8001314 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4b83      	ldr	r3, [pc, #524]	@ (800159c <HAL_DMA_Init+0x420>)
 800138e:	4013      	ands	r3, r2
 8001390:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800139a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4313      	orrs	r3, r2
 80013be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d107      	bne.n	80013d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d0:	4313      	orrs	r3, r2
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80013d8:	4b71      	ldr	r3, [pc, #452]	@ (80015a0 <HAL_DMA_Init+0x424>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b71      	ldr	r3, [pc, #452]	@ (80015a4 <HAL_DMA_Init+0x428>)
 80013de:	4013      	ands	r3, r2
 80013e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013e4:	d328      	bcc.n	8001438 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b28      	cmp	r3, #40	@ 0x28
 80013ec:	d903      	bls.n	80013f6 <HAL_DMA_Init+0x27a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80013f4:	d917      	bls.n	8001426 <HAL_DMA_Init+0x2aa>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80013fc:	d903      	bls.n	8001406 <HAL_DMA_Init+0x28a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b42      	cmp	r3, #66	@ 0x42
 8001404:	d90f      	bls.n	8001426 <HAL_DMA_Init+0x2aa>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b46      	cmp	r3, #70	@ 0x46
 800140c:	d903      	bls.n	8001416 <HAL_DMA_Init+0x29a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b48      	cmp	r3, #72	@ 0x48
 8001414:	d907      	bls.n	8001426 <HAL_DMA_Init+0x2aa>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b4e      	cmp	r3, #78	@ 0x4e
 800141c:	d905      	bls.n	800142a <HAL_DMA_Init+0x2ae>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b52      	cmp	r3, #82	@ 0x52
 8001424:	d801      	bhi.n	800142a <HAL_DMA_Init+0x2ae>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_DMA_Init+0x2b0>
 800142a:	2300      	movs	r3, #0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001436:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f023 0307 	bic.w	r3, r3, #7
 800144e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	4313      	orrs	r3, r2
 8001458:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	2b04      	cmp	r3, #4
 8001460:	d117      	bne.n	8001492 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4313      	orrs	r3, r2
 800146a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00e      	beq.n	8001492 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f002 fb3f 	bl	8003af8 <DMA_CheckFifoParam>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2240      	movs	r2, #64	@ 0x40
 8001484:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e197      	b.n	80017c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f002 fa7a 	bl	8003994 <DMA_CalcBaseAndBitshift>
 80014a0:	4603      	mov	r3, r0
 80014a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	223f      	movs	r2, #63	@ 0x3f
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	e0cd      	b.n	8001652 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a3b      	ldr	r2, [pc, #236]	@ (80015a8 <HAL_DMA_Init+0x42c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d022      	beq.n	8001506 <HAL_DMA_Init+0x38a>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a39      	ldr	r2, [pc, #228]	@ (80015ac <HAL_DMA_Init+0x430>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01d      	beq.n	8001506 <HAL_DMA_Init+0x38a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a38      	ldr	r2, [pc, #224]	@ (80015b0 <HAL_DMA_Init+0x434>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d018      	beq.n	8001506 <HAL_DMA_Init+0x38a>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a36      	ldr	r2, [pc, #216]	@ (80015b4 <HAL_DMA_Init+0x438>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_DMA_Init+0x38a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a35      	ldr	r2, [pc, #212]	@ (80015b8 <HAL_DMA_Init+0x43c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d00e      	beq.n	8001506 <HAL_DMA_Init+0x38a>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a33      	ldr	r2, [pc, #204]	@ (80015bc <HAL_DMA_Init+0x440>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d009      	beq.n	8001506 <HAL_DMA_Init+0x38a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a32      	ldr	r2, [pc, #200]	@ (80015c0 <HAL_DMA_Init+0x444>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d004      	beq.n	8001506 <HAL_DMA_Init+0x38a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a30      	ldr	r2, [pc, #192]	@ (80015c4 <HAL_DMA_Init+0x448>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_DMA_Init+0x38e>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_DMA_Init+0x390>
 800150a:	2300      	movs	r3, #0
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 8097 	beq.w	8001640 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a24      	ldr	r2, [pc, #144]	@ (80015a8 <HAL_DMA_Init+0x42c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d021      	beq.n	8001560 <HAL_DMA_Init+0x3e4>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <HAL_DMA_Init+0x430>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01c      	beq.n	8001560 <HAL_DMA_Init+0x3e4>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a21      	ldr	r2, [pc, #132]	@ (80015b0 <HAL_DMA_Init+0x434>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d017      	beq.n	8001560 <HAL_DMA_Init+0x3e4>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <HAL_DMA_Init+0x438>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d012      	beq.n	8001560 <HAL_DMA_Init+0x3e4>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a1e      	ldr	r2, [pc, #120]	@ (80015b8 <HAL_DMA_Init+0x43c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d00d      	beq.n	8001560 <HAL_DMA_Init+0x3e4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1c      	ldr	r2, [pc, #112]	@ (80015bc <HAL_DMA_Init+0x440>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d008      	beq.n	8001560 <HAL_DMA_Init+0x3e4>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <HAL_DMA_Init+0x444>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d003      	beq.n	8001560 <HAL_DMA_Init+0x3e4>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_DMA_Init+0x448>)
 800155e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <HAL_DMA_Init+0x44c>)
 800157c:	4013      	ands	r3, r2
 800157e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b40      	cmp	r3, #64	@ 0x40
 8001586:	d021      	beq.n	80015cc <HAL_DMA_Init+0x450>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b80      	cmp	r3, #128	@ 0x80
 800158e:	d102      	bne.n	8001596 <HAL_DMA_Init+0x41a>
 8001590:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001594:	e01b      	b.n	80015ce <HAL_DMA_Init+0x452>
 8001596:	2300      	movs	r3, #0
 8001598:	e019      	b.n	80015ce <HAL_DMA_Init+0x452>
 800159a:	bf00      	nop
 800159c:	fe10803f 	.word	0xfe10803f
 80015a0:	5c001000 	.word	0x5c001000
 80015a4:	ffff0000 	.word	0xffff0000
 80015a8:	58025408 	.word	0x58025408
 80015ac:	5802541c 	.word	0x5802541c
 80015b0:	58025430 	.word	0x58025430
 80015b4:	58025444 	.word	0x58025444
 80015b8:	58025458 	.word	0x58025458
 80015bc:	5802546c 	.word	0x5802546c
 80015c0:	58025480 	.word	0x58025480
 80015c4:	58025494 	.word	0x58025494
 80015c8:	fffe000f 	.word	0xfffe000f
 80015cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68d2      	ldr	r2, [r2, #12]
 80015d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80015f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80015fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b6e      	ldr	r3, [pc, #440]	@ (80017cc <HAL_DMA_Init+0x650>)
 8001614:	4413      	add	r3, r2
 8001616:	4a6e      	ldr	r2, [pc, #440]	@ (80017d0 <HAL_DMA_Init+0x654>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	009a      	lsls	r2, r3, #2
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f002 f9b5 	bl	8003994 <DMA_CalcBaseAndBitshift>
 800162a:	4603      	mov	r3, r0
 800162c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	2201      	movs	r2, #1
 8001638:	409a      	lsls	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	e008      	b.n	8001652 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2240      	movs	r2, #64	@ 0x40
 8001644:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2203      	movs	r2, #3
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0b7      	b.n	80017c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a5f      	ldr	r2, [pc, #380]	@ (80017d4 <HAL_DMA_Init+0x658>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d072      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5d      	ldr	r2, [pc, #372]	@ (80017d8 <HAL_DMA_Init+0x65c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d06d      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a5c      	ldr	r2, [pc, #368]	@ (80017dc <HAL_DMA_Init+0x660>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d068      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a5a      	ldr	r2, [pc, #360]	@ (80017e0 <HAL_DMA_Init+0x664>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d063      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a59      	ldr	r2, [pc, #356]	@ (80017e4 <HAL_DMA_Init+0x668>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d05e      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a57      	ldr	r2, [pc, #348]	@ (80017e8 <HAL_DMA_Init+0x66c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d059      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a56      	ldr	r2, [pc, #344]	@ (80017ec <HAL_DMA_Init+0x670>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d054      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a54      	ldr	r2, [pc, #336]	@ (80017f0 <HAL_DMA_Init+0x674>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d04f      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a53      	ldr	r2, [pc, #332]	@ (80017f4 <HAL_DMA_Init+0x678>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d04a      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a51      	ldr	r2, [pc, #324]	@ (80017f8 <HAL_DMA_Init+0x67c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d045      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a50      	ldr	r2, [pc, #320]	@ (80017fc <HAL_DMA_Init+0x680>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d040      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001800 <HAL_DMA_Init+0x684>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d03b      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001804 <HAL_DMA_Init+0x688>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d036      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001808 <HAL_DMA_Init+0x68c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d031      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a4a      	ldr	r2, [pc, #296]	@ (800180c <HAL_DMA_Init+0x690>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d02c      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a48      	ldr	r2, [pc, #288]	@ (8001810 <HAL_DMA_Init+0x694>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d027      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a47      	ldr	r2, [pc, #284]	@ (8001814 <HAL_DMA_Init+0x698>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a45      	ldr	r2, [pc, #276]	@ (8001818 <HAL_DMA_Init+0x69c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01d      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a44      	ldr	r2, [pc, #272]	@ (800181c <HAL_DMA_Init+0x6a0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d018      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a42      	ldr	r2, [pc, #264]	@ (8001820 <HAL_DMA_Init+0x6a4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a41      	ldr	r2, [pc, #260]	@ (8001824 <HAL_DMA_Init+0x6a8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00e      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a3f      	ldr	r2, [pc, #252]	@ (8001828 <HAL_DMA_Init+0x6ac>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d009      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a3e      	ldr	r2, [pc, #248]	@ (800182c <HAL_DMA_Init+0x6b0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d004      	beq.n	8001742 <HAL_DMA_Init+0x5c6>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a3c      	ldr	r2, [pc, #240]	@ (8001830 <HAL_DMA_Init+0x6b4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_DMA_Init+0x5ca>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_DMA_Init+0x5cc>
 8001746:	2300      	movs	r3, #0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d032      	beq.n	80017b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f002 fa4f 	bl	8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b80      	cmp	r3, #128	@ 0x80
 8001758:	d102      	bne.n	8001760 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001774:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d010      	beq.n	80017a0 <HAL_DMA_Init+0x624>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b08      	cmp	r3, #8
 8001784:	d80c      	bhi.n	80017a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f002 facc 	bl	8003d24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	e008      	b.n	80017b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	a7fdabf8 	.word	0xa7fdabf8
 80017d0:	cccccccd 	.word	0xcccccccd
 80017d4:	40020010 	.word	0x40020010
 80017d8:	40020028 	.word	0x40020028
 80017dc:	40020040 	.word	0x40020040
 80017e0:	40020058 	.word	0x40020058
 80017e4:	40020070 	.word	0x40020070
 80017e8:	40020088 	.word	0x40020088
 80017ec:	400200a0 	.word	0x400200a0
 80017f0:	400200b8 	.word	0x400200b8
 80017f4:	40020410 	.word	0x40020410
 80017f8:	40020428 	.word	0x40020428
 80017fc:	40020440 	.word	0x40020440
 8001800:	40020458 	.word	0x40020458
 8001804:	40020470 	.word	0x40020470
 8001808:	40020488 	.word	0x40020488
 800180c:	400204a0 	.word	0x400204a0
 8001810:	400204b8 	.word	0x400204b8
 8001814:	58025408 	.word	0x58025408
 8001818:	5802541c 	.word	0x5802541c
 800181c:	58025430 	.word	0x58025430
 8001820:	58025444 	.word	0x58025444
 8001824:	58025458 	.word	0x58025458
 8001828:	5802546c 	.word	0x5802546c
 800182c:	58025480 	.word	0x58025480
 8001830:	58025494 	.word	0x58025494

08001834 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e226      	b.n	8001c9e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_DMA_Start_IT+0x2a>
 800185a:	2302      	movs	r3, #2
 800185c:	e21f      	b.n	8001c9e <HAL_DMA_Start_IT+0x46a>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	f040 820a 	bne.w	8001c88 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a68      	ldr	r2, [pc, #416]	@ (8001a28 <HAL_DMA_Start_IT+0x1f4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d04a      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a66      	ldr	r2, [pc, #408]	@ (8001a2c <HAL_DMA_Start_IT+0x1f8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d045      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a65      	ldr	r2, [pc, #404]	@ (8001a30 <HAL_DMA_Start_IT+0x1fc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d040      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a63      	ldr	r2, [pc, #396]	@ (8001a34 <HAL_DMA_Start_IT+0x200>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d03b      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a62      	ldr	r2, [pc, #392]	@ (8001a38 <HAL_DMA_Start_IT+0x204>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d036      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a60      	ldr	r2, [pc, #384]	@ (8001a3c <HAL_DMA_Start_IT+0x208>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d031      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a5f      	ldr	r2, [pc, #380]	@ (8001a40 <HAL_DMA_Start_IT+0x20c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d02c      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001a44 <HAL_DMA_Start_IT+0x210>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d027      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a5c      	ldr	r2, [pc, #368]	@ (8001a48 <HAL_DMA_Start_IT+0x214>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d022      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a5a      	ldr	r2, [pc, #360]	@ (8001a4c <HAL_DMA_Start_IT+0x218>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01d      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a59      	ldr	r2, [pc, #356]	@ (8001a50 <HAL_DMA_Start_IT+0x21c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d018      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a57      	ldr	r2, [pc, #348]	@ (8001a54 <HAL_DMA_Start_IT+0x220>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a56      	ldr	r2, [pc, #344]	@ (8001a58 <HAL_DMA_Start_IT+0x224>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00e      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a54      	ldr	r2, [pc, #336]	@ (8001a5c <HAL_DMA_Start_IT+0x228>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d009      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a53      	ldr	r2, [pc, #332]	@ (8001a60 <HAL_DMA_Start_IT+0x22c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d004      	beq.n	8001922 <HAL_DMA_Start_IT+0xee>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a51      	ldr	r2, [pc, #324]	@ (8001a64 <HAL_DMA_Start_IT+0x230>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d108      	bne.n	8001934 <HAL_DMA_Start_IT+0x100>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0201 	bic.w	r2, r2, #1
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e007      	b.n	8001944 <HAL_DMA_Start_IT+0x110>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f001 fe76 	bl	800363c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a34      	ldr	r2, [pc, #208]	@ (8001a28 <HAL_DMA_Start_IT+0x1f4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d04a      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a33      	ldr	r2, [pc, #204]	@ (8001a2c <HAL_DMA_Start_IT+0x1f8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d045      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a31      	ldr	r2, [pc, #196]	@ (8001a30 <HAL_DMA_Start_IT+0x1fc>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d040      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a30      	ldr	r2, [pc, #192]	@ (8001a34 <HAL_DMA_Start_IT+0x200>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d03b      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a38 <HAL_DMA_Start_IT+0x204>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d036      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2d      	ldr	r2, [pc, #180]	@ (8001a3c <HAL_DMA_Start_IT+0x208>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d031      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2b      	ldr	r2, [pc, #172]	@ (8001a40 <HAL_DMA_Start_IT+0x20c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d02c      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a2a      	ldr	r2, [pc, #168]	@ (8001a44 <HAL_DMA_Start_IT+0x210>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d027      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a28      	ldr	r2, [pc, #160]	@ (8001a48 <HAL_DMA_Start_IT+0x214>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d022      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a27      	ldr	r2, [pc, #156]	@ (8001a4c <HAL_DMA_Start_IT+0x218>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d01d      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a25      	ldr	r2, [pc, #148]	@ (8001a50 <HAL_DMA_Start_IT+0x21c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d018      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a24      	ldr	r2, [pc, #144]	@ (8001a54 <HAL_DMA_Start_IT+0x220>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d013      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a22      	ldr	r2, [pc, #136]	@ (8001a58 <HAL_DMA_Start_IT+0x224>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00e      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <HAL_DMA_Start_IT+0x228>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d009      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a60 <HAL_DMA_Start_IT+0x22c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d004      	beq.n	80019f0 <HAL_DMA_Start_IT+0x1bc>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <HAL_DMA_Start_IT+0x230>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_DMA_Start_IT+0x1c0>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_DMA_Start_IT+0x1c2>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d036      	beq.n	8001a68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 021e 	bic.w	r2, r3, #30
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0216 	orr.w	r2, r2, #22
 8001a0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03e      	beq.n	8001a94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f042 0208 	orr.w	r2, r2, #8
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e035      	b.n	8001a94 <HAL_DMA_Start_IT+0x260>
 8001a28:	40020010 	.word	0x40020010
 8001a2c:	40020028 	.word	0x40020028
 8001a30:	40020040 	.word	0x40020040
 8001a34:	40020058 	.word	0x40020058
 8001a38:	40020070 	.word	0x40020070
 8001a3c:	40020088 	.word	0x40020088
 8001a40:	400200a0 	.word	0x400200a0
 8001a44:	400200b8 	.word	0x400200b8
 8001a48:	40020410 	.word	0x40020410
 8001a4c:	40020428 	.word	0x40020428
 8001a50:	40020440 	.word	0x40020440
 8001a54:	40020458 	.word	0x40020458
 8001a58:	40020470 	.word	0x40020470
 8001a5c:	40020488 	.word	0x40020488
 8001a60:	400204a0 	.word	0x400204a0
 8001a64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 020e 	bic.w	r2, r3, #14
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 020a 	orr.w	r2, r2, #10
 8001a7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0204 	orr.w	r2, r2, #4
 8001a92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a83      	ldr	r2, [pc, #524]	@ (8001ca8 <HAL_DMA_Start_IT+0x474>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d072      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a82      	ldr	r2, [pc, #520]	@ (8001cac <HAL_DMA_Start_IT+0x478>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d06d      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a80      	ldr	r2, [pc, #512]	@ (8001cb0 <HAL_DMA_Start_IT+0x47c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d068      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a7f      	ldr	r2, [pc, #508]	@ (8001cb4 <HAL_DMA_Start_IT+0x480>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d063      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a7d      	ldr	r2, [pc, #500]	@ (8001cb8 <HAL_DMA_Start_IT+0x484>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d05e      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7c      	ldr	r2, [pc, #496]	@ (8001cbc <HAL_DMA_Start_IT+0x488>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d059      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a7a      	ldr	r2, [pc, #488]	@ (8001cc0 <HAL_DMA_Start_IT+0x48c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d054      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a79      	ldr	r2, [pc, #484]	@ (8001cc4 <HAL_DMA_Start_IT+0x490>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d04f      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a77      	ldr	r2, [pc, #476]	@ (8001cc8 <HAL_DMA_Start_IT+0x494>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d04a      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a76      	ldr	r2, [pc, #472]	@ (8001ccc <HAL_DMA_Start_IT+0x498>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d045      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a74      	ldr	r2, [pc, #464]	@ (8001cd0 <HAL_DMA_Start_IT+0x49c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d040      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a73      	ldr	r2, [pc, #460]	@ (8001cd4 <HAL_DMA_Start_IT+0x4a0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d03b      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a71      	ldr	r2, [pc, #452]	@ (8001cd8 <HAL_DMA_Start_IT+0x4a4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d036      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a70      	ldr	r2, [pc, #448]	@ (8001cdc <HAL_DMA_Start_IT+0x4a8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d031      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce0 <HAL_DMA_Start_IT+0x4ac>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d02c      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6d      	ldr	r2, [pc, #436]	@ (8001ce4 <HAL_DMA_Start_IT+0x4b0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d027      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6b      	ldr	r2, [pc, #428]	@ (8001ce8 <HAL_DMA_Start_IT+0x4b4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d022      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6a      	ldr	r2, [pc, #424]	@ (8001cec <HAL_DMA_Start_IT+0x4b8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d01d      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a68      	ldr	r2, [pc, #416]	@ (8001cf0 <HAL_DMA_Start_IT+0x4bc>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d018      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a67      	ldr	r2, [pc, #412]	@ (8001cf4 <HAL_DMA_Start_IT+0x4c0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d013      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a65      	ldr	r2, [pc, #404]	@ (8001cf8 <HAL_DMA_Start_IT+0x4c4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00e      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a64      	ldr	r2, [pc, #400]	@ (8001cfc <HAL_DMA_Start_IT+0x4c8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d009      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a62      	ldr	r2, [pc, #392]	@ (8001d00 <HAL_DMA_Start_IT+0x4cc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d004      	beq.n	8001b84 <HAL_DMA_Start_IT+0x350>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a61      	ldr	r2, [pc, #388]	@ (8001d04 <HAL_DMA_Start_IT+0x4d0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_DMA_Start_IT+0x354>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_DMA_Start_IT+0x356>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01a      	beq.n	8001bc4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001baa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bc2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a37      	ldr	r2, [pc, #220]	@ (8001ca8 <HAL_DMA_Start_IT+0x474>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d04a      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a36      	ldr	r2, [pc, #216]	@ (8001cac <HAL_DMA_Start_IT+0x478>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d045      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a34      	ldr	r2, [pc, #208]	@ (8001cb0 <HAL_DMA_Start_IT+0x47c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d040      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a33      	ldr	r2, [pc, #204]	@ (8001cb4 <HAL_DMA_Start_IT+0x480>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d03b      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a31      	ldr	r2, [pc, #196]	@ (8001cb8 <HAL_DMA_Start_IT+0x484>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d036      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a30      	ldr	r2, [pc, #192]	@ (8001cbc <HAL_DMA_Start_IT+0x488>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d031      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc0 <HAL_DMA_Start_IT+0x48c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d02c      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc4 <HAL_DMA_Start_IT+0x490>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d027      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc8 <HAL_DMA_Start_IT+0x494>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d022      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2a      	ldr	r2, [pc, #168]	@ (8001ccc <HAL_DMA_Start_IT+0x498>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d01d      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a28      	ldr	r2, [pc, #160]	@ (8001cd0 <HAL_DMA_Start_IT+0x49c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d018      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a27      	ldr	r2, [pc, #156]	@ (8001cd4 <HAL_DMA_Start_IT+0x4a0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a25      	ldr	r2, [pc, #148]	@ (8001cd8 <HAL_DMA_Start_IT+0x4a4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00e      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a24      	ldr	r2, [pc, #144]	@ (8001cdc <HAL_DMA_Start_IT+0x4a8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a22      	ldr	r2, [pc, #136]	@ (8001ce0 <HAL_DMA_Start_IT+0x4ac>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_DMA_Start_IT+0x430>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ce4 <HAL_DMA_Start_IT+0x4b0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d108      	bne.n	8001c76 <HAL_DMA_Start_IT+0x442>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e012      	b.n	8001c9c <HAL_DMA_Start_IT+0x468>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e009      	b.n	8001c9c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40020010 	.word	0x40020010
 8001cac:	40020028 	.word	0x40020028
 8001cb0:	40020040 	.word	0x40020040
 8001cb4:	40020058 	.word	0x40020058
 8001cb8:	40020070 	.word	0x40020070
 8001cbc:	40020088 	.word	0x40020088
 8001cc0:	400200a0 	.word	0x400200a0
 8001cc4:	400200b8 	.word	0x400200b8
 8001cc8:	40020410 	.word	0x40020410
 8001ccc:	40020428 	.word	0x40020428
 8001cd0:	40020440 	.word	0x40020440
 8001cd4:	40020458 	.word	0x40020458
 8001cd8:	40020470 	.word	0x40020470
 8001cdc:	40020488 	.word	0x40020488
 8001ce0:	400204a0 	.word	0x400204a0
 8001ce4:	400204b8 	.word	0x400204b8
 8001ce8:	58025408 	.word	0x58025408
 8001cec:	5802541c 	.word	0x5802541c
 8001cf0:	58025430 	.word	0x58025430
 8001cf4:	58025444 	.word	0x58025444
 8001cf8:	58025458 	.word	0x58025458
 8001cfc:	5802546c 	.word	0x5802546c
 8001d00:	58025480 	.word	0x58025480
 8001d04:	58025494 	.word	0x58025494

08001d08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff f90c 	bl	8000f2c <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e2dc      	b.n	80022da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d008      	beq.n	8001d3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2280      	movs	r2, #128	@ 0x80
 8001d30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e2cd      	b.n	80022da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a76      	ldr	r2, [pc, #472]	@ (8001f1c <HAL_DMA_Abort+0x214>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d04a      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a74      	ldr	r2, [pc, #464]	@ (8001f20 <HAL_DMA_Abort+0x218>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d045      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a73      	ldr	r2, [pc, #460]	@ (8001f24 <HAL_DMA_Abort+0x21c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d040      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a71      	ldr	r2, [pc, #452]	@ (8001f28 <HAL_DMA_Abort+0x220>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d03b      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a70      	ldr	r2, [pc, #448]	@ (8001f2c <HAL_DMA_Abort+0x224>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d036      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a6e      	ldr	r2, [pc, #440]	@ (8001f30 <HAL_DMA_Abort+0x228>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d031      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6d      	ldr	r2, [pc, #436]	@ (8001f34 <HAL_DMA_Abort+0x22c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d02c      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6b      	ldr	r2, [pc, #428]	@ (8001f38 <HAL_DMA_Abort+0x230>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d027      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6a      	ldr	r2, [pc, #424]	@ (8001f3c <HAL_DMA_Abort+0x234>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d022      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a68      	ldr	r2, [pc, #416]	@ (8001f40 <HAL_DMA_Abort+0x238>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01d      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a67      	ldr	r2, [pc, #412]	@ (8001f44 <HAL_DMA_Abort+0x23c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d018      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a65      	ldr	r2, [pc, #404]	@ (8001f48 <HAL_DMA_Abort+0x240>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a64      	ldr	r2, [pc, #400]	@ (8001f4c <HAL_DMA_Abort+0x244>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00e      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a62      	ldr	r2, [pc, #392]	@ (8001f50 <HAL_DMA_Abort+0x248>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d009      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a61      	ldr	r2, [pc, #388]	@ (8001f54 <HAL_DMA_Abort+0x24c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d004      	beq.n	8001dde <HAL_DMA_Abort+0xd6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5f      	ldr	r2, [pc, #380]	@ (8001f58 <HAL_DMA_Abort+0x250>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_DMA_Abort+0xda>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_DMA_Abort+0xdc>
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 021e 	bic.w	r2, r2, #30
 8001df6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e00a      	b.n	8001e26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 020e 	bic.w	r2, r2, #14
 8001e1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f1c <HAL_DMA_Abort+0x214>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d072      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a3a      	ldr	r2, [pc, #232]	@ (8001f20 <HAL_DMA_Abort+0x218>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d06d      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a39      	ldr	r2, [pc, #228]	@ (8001f24 <HAL_DMA_Abort+0x21c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d068      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a37      	ldr	r2, [pc, #220]	@ (8001f28 <HAL_DMA_Abort+0x220>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d063      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a36      	ldr	r2, [pc, #216]	@ (8001f2c <HAL_DMA_Abort+0x224>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d05e      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a34      	ldr	r2, [pc, #208]	@ (8001f30 <HAL_DMA_Abort+0x228>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d059      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a33      	ldr	r2, [pc, #204]	@ (8001f34 <HAL_DMA_Abort+0x22c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d054      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a31      	ldr	r2, [pc, #196]	@ (8001f38 <HAL_DMA_Abort+0x230>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d04f      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a30      	ldr	r2, [pc, #192]	@ (8001f3c <HAL_DMA_Abort+0x234>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04a      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a2e      	ldr	r2, [pc, #184]	@ (8001f40 <HAL_DMA_Abort+0x238>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d045      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f44 <HAL_DMA_Abort+0x23c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d040      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2b      	ldr	r2, [pc, #172]	@ (8001f48 <HAL_DMA_Abort+0x240>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d03b      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <HAL_DMA_Abort+0x244>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d036      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a28      	ldr	r2, [pc, #160]	@ (8001f50 <HAL_DMA_Abort+0x248>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d031      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a27      	ldr	r2, [pc, #156]	@ (8001f54 <HAL_DMA_Abort+0x24c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d02c      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	@ (8001f58 <HAL_DMA_Abort+0x250>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d027      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a24      	ldr	r2, [pc, #144]	@ (8001f5c <HAL_DMA_Abort+0x254>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d022      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a22      	ldr	r2, [pc, #136]	@ (8001f60 <HAL_DMA_Abort+0x258>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01d      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a21      	ldr	r2, [pc, #132]	@ (8001f64 <HAL_DMA_Abort+0x25c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d018      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <HAL_DMA_Abort+0x260>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <HAL_DMA_Abort+0x264>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00e      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <HAL_DMA_Abort+0x268>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1b      	ldr	r2, [pc, #108]	@ (8001f74 <HAL_DMA_Abort+0x26c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_DMA_Abort+0x20e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <HAL_DMA_Abort+0x270>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d132      	bne.n	8001f7c <HAL_DMA_Abort+0x274>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e031      	b.n	8001f7e <HAL_DMA_Abort+0x276>
 8001f1a:	bf00      	nop
 8001f1c:	40020010 	.word	0x40020010
 8001f20:	40020028 	.word	0x40020028
 8001f24:	40020040 	.word	0x40020040
 8001f28:	40020058 	.word	0x40020058
 8001f2c:	40020070 	.word	0x40020070
 8001f30:	40020088 	.word	0x40020088
 8001f34:	400200a0 	.word	0x400200a0
 8001f38:	400200b8 	.word	0x400200b8
 8001f3c:	40020410 	.word	0x40020410
 8001f40:	40020428 	.word	0x40020428
 8001f44:	40020440 	.word	0x40020440
 8001f48:	40020458 	.word	0x40020458
 8001f4c:	40020470 	.word	0x40020470
 8001f50:	40020488 	.word	0x40020488
 8001f54:	400204a0 	.word	0x400204a0
 8001f58:	400204b8 	.word	0x400204b8
 8001f5c:	58025408 	.word	0x58025408
 8001f60:	5802541c 	.word	0x5802541c
 8001f64:	58025430 	.word	0x58025430
 8001f68:	58025444 	.word	0x58025444
 8001f6c:	58025458 	.word	0x58025458
 8001f70:	5802546c 	.word	0x5802546c
 8001f74:	58025480 	.word	0x58025480
 8001f78:	58025494 	.word	0x58025494
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6d      	ldr	r2, [pc, #436]	@ (800214c <HAL_DMA_Abort+0x444>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d04a      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8002150 <HAL_DMA_Abort+0x448>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d045      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6a      	ldr	r2, [pc, #424]	@ (8002154 <HAL_DMA_Abort+0x44c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d040      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a68      	ldr	r2, [pc, #416]	@ (8002158 <HAL_DMA_Abort+0x450>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d03b      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a67      	ldr	r2, [pc, #412]	@ (800215c <HAL_DMA_Abort+0x454>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d036      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a65      	ldr	r2, [pc, #404]	@ (8002160 <HAL_DMA_Abort+0x458>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d031      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a64      	ldr	r2, [pc, #400]	@ (8002164 <HAL_DMA_Abort+0x45c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d02c      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a62      	ldr	r2, [pc, #392]	@ (8002168 <HAL_DMA_Abort+0x460>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d027      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a61      	ldr	r2, [pc, #388]	@ (800216c <HAL_DMA_Abort+0x464>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d022      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a5f      	ldr	r2, [pc, #380]	@ (8002170 <HAL_DMA_Abort+0x468>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01d      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8002174 <HAL_DMA_Abort+0x46c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d018      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a5c      	ldr	r2, [pc, #368]	@ (8002178 <HAL_DMA_Abort+0x470>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a5b      	ldr	r2, [pc, #364]	@ (800217c <HAL_DMA_Abort+0x474>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00e      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a59      	ldr	r2, [pc, #356]	@ (8002180 <HAL_DMA_Abort+0x478>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d009      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a58      	ldr	r2, [pc, #352]	@ (8002184 <HAL_DMA_Abort+0x47c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_DMA_Abort+0x32a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a56      	ldr	r2, [pc, #344]	@ (8002188 <HAL_DMA_Abort+0x480>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d108      	bne.n	8002044 <HAL_DMA_Abort+0x33c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e007      	b.n	8002054 <HAL_DMA_Abort+0x34c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002054:	e013      	b.n	800207e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002056:	f7fe ff69 	bl	8000f2c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b05      	cmp	r3, #5
 8002062:	d90c      	bls.n	800207e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e12d      	b.n	80022da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1e5      	bne.n	8002056 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <HAL_DMA_Abort+0x444>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d04a      	beq.n	800212a <HAL_DMA_Abort+0x422>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2d      	ldr	r2, [pc, #180]	@ (8002150 <HAL_DMA_Abort+0x448>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d045      	beq.n	800212a <HAL_DMA_Abort+0x422>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002154 <HAL_DMA_Abort+0x44c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d040      	beq.n	800212a <HAL_DMA_Abort+0x422>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002158 <HAL_DMA_Abort+0x450>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d03b      	beq.n	800212a <HAL_DMA_Abort+0x422>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a29      	ldr	r2, [pc, #164]	@ (800215c <HAL_DMA_Abort+0x454>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d036      	beq.n	800212a <HAL_DMA_Abort+0x422>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a27      	ldr	r2, [pc, #156]	@ (8002160 <HAL_DMA_Abort+0x458>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d031      	beq.n	800212a <HAL_DMA_Abort+0x422>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a26      	ldr	r2, [pc, #152]	@ (8002164 <HAL_DMA_Abort+0x45c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d02c      	beq.n	800212a <HAL_DMA_Abort+0x422>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a24      	ldr	r2, [pc, #144]	@ (8002168 <HAL_DMA_Abort+0x460>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d027      	beq.n	800212a <HAL_DMA_Abort+0x422>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a23      	ldr	r2, [pc, #140]	@ (800216c <HAL_DMA_Abort+0x464>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d022      	beq.n	800212a <HAL_DMA_Abort+0x422>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a21      	ldr	r2, [pc, #132]	@ (8002170 <HAL_DMA_Abort+0x468>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01d      	beq.n	800212a <HAL_DMA_Abort+0x422>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a20      	ldr	r2, [pc, #128]	@ (8002174 <HAL_DMA_Abort+0x46c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d018      	beq.n	800212a <HAL_DMA_Abort+0x422>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002178 <HAL_DMA_Abort+0x470>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_DMA_Abort+0x422>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1d      	ldr	r2, [pc, #116]	@ (800217c <HAL_DMA_Abort+0x474>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00e      	beq.n	800212a <HAL_DMA_Abort+0x422>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1b      	ldr	r2, [pc, #108]	@ (8002180 <HAL_DMA_Abort+0x478>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d009      	beq.n	800212a <HAL_DMA_Abort+0x422>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1a      	ldr	r2, [pc, #104]	@ (8002184 <HAL_DMA_Abort+0x47c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d004      	beq.n	800212a <HAL_DMA_Abort+0x422>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a18      	ldr	r2, [pc, #96]	@ (8002188 <HAL_DMA_Abort+0x480>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_DMA_Abort+0x426>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_DMA_Abort+0x428>
 800212e:	2300      	movs	r3, #0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d02b      	beq.n	800218c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	223f      	movs	r2, #63	@ 0x3f
 8002144:	409a      	lsls	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	e02a      	b.n	80021a2 <HAL_DMA_Abort+0x49a>
 800214c:	40020010 	.word	0x40020010
 8002150:	40020028 	.word	0x40020028
 8002154:	40020040 	.word	0x40020040
 8002158:	40020058 	.word	0x40020058
 800215c:	40020070 	.word	0x40020070
 8002160:	40020088 	.word	0x40020088
 8002164:	400200a0 	.word	0x400200a0
 8002168:	400200b8 	.word	0x400200b8
 800216c:	40020410 	.word	0x40020410
 8002170:	40020428 	.word	0x40020428
 8002174:	40020440 	.word	0x40020440
 8002178:	40020458 	.word	0x40020458
 800217c:	40020470 	.word	0x40020470
 8002180:	40020488 	.word	0x40020488
 8002184:	400204a0 	.word	0x400204a0
 8002188:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002190:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2201      	movs	r2, #1
 800219c:	409a      	lsls	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a4f      	ldr	r2, [pc, #316]	@ (80022e4 <HAL_DMA_Abort+0x5dc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d072      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a4d      	ldr	r2, [pc, #308]	@ (80022e8 <HAL_DMA_Abort+0x5e0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d06d      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a4c      	ldr	r2, [pc, #304]	@ (80022ec <HAL_DMA_Abort+0x5e4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d068      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a4a      	ldr	r2, [pc, #296]	@ (80022f0 <HAL_DMA_Abort+0x5e8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d063      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a49      	ldr	r2, [pc, #292]	@ (80022f4 <HAL_DMA_Abort+0x5ec>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d05e      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a47      	ldr	r2, [pc, #284]	@ (80022f8 <HAL_DMA_Abort+0x5f0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d059      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a46      	ldr	r2, [pc, #280]	@ (80022fc <HAL_DMA_Abort+0x5f4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d054      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a44      	ldr	r2, [pc, #272]	@ (8002300 <HAL_DMA_Abort+0x5f8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d04f      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a43      	ldr	r2, [pc, #268]	@ (8002304 <HAL_DMA_Abort+0x5fc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d04a      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a41      	ldr	r2, [pc, #260]	@ (8002308 <HAL_DMA_Abort+0x600>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d045      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a40      	ldr	r2, [pc, #256]	@ (800230c <HAL_DMA_Abort+0x604>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d040      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a3e      	ldr	r2, [pc, #248]	@ (8002310 <HAL_DMA_Abort+0x608>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d03b      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a3d      	ldr	r2, [pc, #244]	@ (8002314 <HAL_DMA_Abort+0x60c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d036      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a3b      	ldr	r2, [pc, #236]	@ (8002318 <HAL_DMA_Abort+0x610>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d031      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a3a      	ldr	r2, [pc, #232]	@ (800231c <HAL_DMA_Abort+0x614>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d02c      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a38      	ldr	r2, [pc, #224]	@ (8002320 <HAL_DMA_Abort+0x618>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d027      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a37      	ldr	r2, [pc, #220]	@ (8002324 <HAL_DMA_Abort+0x61c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a35      	ldr	r2, [pc, #212]	@ (8002328 <HAL_DMA_Abort+0x620>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01d      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a34      	ldr	r2, [pc, #208]	@ (800232c <HAL_DMA_Abort+0x624>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d018      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a32      	ldr	r2, [pc, #200]	@ (8002330 <HAL_DMA_Abort+0x628>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a31      	ldr	r2, [pc, #196]	@ (8002334 <HAL_DMA_Abort+0x62c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00e      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2f      	ldr	r2, [pc, #188]	@ (8002338 <HAL_DMA_Abort+0x630>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d009      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2e      	ldr	r2, [pc, #184]	@ (800233c <HAL_DMA_Abort+0x634>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d004      	beq.n	8002292 <HAL_DMA_Abort+0x58a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2c      	ldr	r2, [pc, #176]	@ (8002340 <HAL_DMA_Abort+0x638>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_DMA_Abort+0x58e>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_DMA_Abort+0x590>
 8002296:	2300      	movs	r3, #0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40020010 	.word	0x40020010
 80022e8:	40020028 	.word	0x40020028
 80022ec:	40020040 	.word	0x40020040
 80022f0:	40020058 	.word	0x40020058
 80022f4:	40020070 	.word	0x40020070
 80022f8:	40020088 	.word	0x40020088
 80022fc:	400200a0 	.word	0x400200a0
 8002300:	400200b8 	.word	0x400200b8
 8002304:	40020410 	.word	0x40020410
 8002308:	40020428 	.word	0x40020428
 800230c:	40020440 	.word	0x40020440
 8002310:	40020458 	.word	0x40020458
 8002314:	40020470 	.word	0x40020470
 8002318:	40020488 	.word	0x40020488
 800231c:	400204a0 	.word	0x400204a0
 8002320:	400204b8 	.word	0x400204b8
 8002324:	58025408 	.word	0x58025408
 8002328:	5802541c 	.word	0x5802541c
 800232c:	58025430 	.word	0x58025430
 8002330:	58025444 	.word	0x58025444
 8002334:	58025458 	.word	0x58025458
 8002338:	5802546c 	.word	0x5802546c
 800233c:	58025480 	.word	0x58025480
 8002340:	58025494 	.word	0x58025494

08002344 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e237      	b.n	80027c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d004      	beq.n	800236c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2280      	movs	r2, #128	@ 0x80
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e22c      	b.n	80027c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a5c      	ldr	r2, [pc, #368]	@ (80024e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d04a      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a5b      	ldr	r2, [pc, #364]	@ (80024e8 <HAL_DMA_Abort_IT+0x1a4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d045      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a59      	ldr	r2, [pc, #356]	@ (80024ec <HAL_DMA_Abort_IT+0x1a8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d040      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a58      	ldr	r2, [pc, #352]	@ (80024f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d03b      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a56      	ldr	r2, [pc, #344]	@ (80024f4 <HAL_DMA_Abort_IT+0x1b0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d036      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a55      	ldr	r2, [pc, #340]	@ (80024f8 <HAL_DMA_Abort_IT+0x1b4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d031      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a53      	ldr	r2, [pc, #332]	@ (80024fc <HAL_DMA_Abort_IT+0x1b8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02c      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a52      	ldr	r2, [pc, #328]	@ (8002500 <HAL_DMA_Abort_IT+0x1bc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d027      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a50      	ldr	r2, [pc, #320]	@ (8002504 <HAL_DMA_Abort_IT+0x1c0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d022      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a4f      	ldr	r2, [pc, #316]	@ (8002508 <HAL_DMA_Abort_IT+0x1c4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d01d      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a4d      	ldr	r2, [pc, #308]	@ (800250c <HAL_DMA_Abort_IT+0x1c8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d018      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a4c      	ldr	r2, [pc, #304]	@ (8002510 <HAL_DMA_Abort_IT+0x1cc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d013      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002514 <HAL_DMA_Abort_IT+0x1d0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00e      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a49      	ldr	r2, [pc, #292]	@ (8002518 <HAL_DMA_Abort_IT+0x1d4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a47      	ldr	r2, [pc, #284]	@ (800251c <HAL_DMA_Abort_IT+0x1d8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a46      	ldr	r2, [pc, #280]	@ (8002520 <HAL_DMA_Abort_IT+0x1dc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d101      	bne.n	8002410 <HAL_DMA_Abort_IT+0xcc>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_DMA_Abort_IT+0xce>
 8002410:	2300      	movs	r3, #0
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8086 	beq.w	8002524 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2204      	movs	r2, #4
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2f      	ldr	r2, [pc, #188]	@ (80024e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d04a      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2e      	ldr	r2, [pc, #184]	@ (80024e8 <HAL_DMA_Abort_IT+0x1a4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d045      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a2c      	ldr	r2, [pc, #176]	@ (80024ec <HAL_DMA_Abort_IT+0x1a8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d040      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a2b      	ldr	r2, [pc, #172]	@ (80024f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d03b      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <HAL_DMA_Abort_IT+0x1b0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d036      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a28      	ldr	r2, [pc, #160]	@ (80024f8 <HAL_DMA_Abort_IT+0x1b4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d031      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a26      	ldr	r2, [pc, #152]	@ (80024fc <HAL_DMA_Abort_IT+0x1b8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d02c      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a25      	ldr	r2, [pc, #148]	@ (8002500 <HAL_DMA_Abort_IT+0x1bc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d027      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a23      	ldr	r2, [pc, #140]	@ (8002504 <HAL_DMA_Abort_IT+0x1c0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d022      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a22      	ldr	r2, [pc, #136]	@ (8002508 <HAL_DMA_Abort_IT+0x1c4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d01d      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a20      	ldr	r2, [pc, #128]	@ (800250c <HAL_DMA_Abort_IT+0x1c8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d018      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1f      	ldr	r2, [pc, #124]	@ (8002510 <HAL_DMA_Abort_IT+0x1cc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d013      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1d      	ldr	r2, [pc, #116]	@ (8002514 <HAL_DMA_Abort_IT+0x1d0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00e      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_DMA_Abort_IT+0x1d4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1a      	ldr	r2, [pc, #104]	@ (800251c <HAL_DMA_Abort_IT+0x1d8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x17c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a19      	ldr	r2, [pc, #100]	@ (8002520 <HAL_DMA_Abort_IT+0x1dc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d108      	bne.n	80024d2 <HAL_DMA_Abort_IT+0x18e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e178      	b.n	80027c4 <HAL_DMA_Abort_IT+0x480>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e16f      	b.n	80027c4 <HAL_DMA_Abort_IT+0x480>
 80024e4:	40020010 	.word	0x40020010
 80024e8:	40020028 	.word	0x40020028
 80024ec:	40020040 	.word	0x40020040
 80024f0:	40020058 	.word	0x40020058
 80024f4:	40020070 	.word	0x40020070
 80024f8:	40020088 	.word	0x40020088
 80024fc:	400200a0 	.word	0x400200a0
 8002500:	400200b8 	.word	0x400200b8
 8002504:	40020410 	.word	0x40020410
 8002508:	40020428 	.word	0x40020428
 800250c:	40020440 	.word	0x40020440
 8002510:	40020458 	.word	0x40020458
 8002514:	40020470 	.word	0x40020470
 8002518:	40020488 	.word	0x40020488
 800251c:	400204a0 	.word	0x400204a0
 8002520:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 020e 	bic.w	r2, r2, #14
 8002532:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a6c      	ldr	r2, [pc, #432]	@ (80026ec <HAL_DMA_Abort_IT+0x3a8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d04a      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6b      	ldr	r2, [pc, #428]	@ (80026f0 <HAL_DMA_Abort_IT+0x3ac>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d045      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a69      	ldr	r2, [pc, #420]	@ (80026f4 <HAL_DMA_Abort_IT+0x3b0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d040      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a68      	ldr	r2, [pc, #416]	@ (80026f8 <HAL_DMA_Abort_IT+0x3b4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d03b      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a66      	ldr	r2, [pc, #408]	@ (80026fc <HAL_DMA_Abort_IT+0x3b8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d036      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a65      	ldr	r2, [pc, #404]	@ (8002700 <HAL_DMA_Abort_IT+0x3bc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d031      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a63      	ldr	r2, [pc, #396]	@ (8002704 <HAL_DMA_Abort_IT+0x3c0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02c      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a62      	ldr	r2, [pc, #392]	@ (8002708 <HAL_DMA_Abort_IT+0x3c4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d027      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a60      	ldr	r2, [pc, #384]	@ (800270c <HAL_DMA_Abort_IT+0x3c8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d022      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a5f      	ldr	r2, [pc, #380]	@ (8002710 <HAL_DMA_Abort_IT+0x3cc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d01d      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a5d      	ldr	r2, [pc, #372]	@ (8002714 <HAL_DMA_Abort_IT+0x3d0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d018      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002718 <HAL_DMA_Abort_IT+0x3d4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d013      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5a      	ldr	r2, [pc, #360]	@ (800271c <HAL_DMA_Abort_IT+0x3d8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00e      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a59      	ldr	r2, [pc, #356]	@ (8002720 <HAL_DMA_Abort_IT+0x3dc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a57      	ldr	r2, [pc, #348]	@ (8002724 <HAL_DMA_Abort_IT+0x3e0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x290>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a56      	ldr	r2, [pc, #344]	@ (8002728 <HAL_DMA_Abort_IT+0x3e4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d108      	bne.n	80025e6 <HAL_DMA_Abort_IT+0x2a2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e007      	b.n	80025f6 <HAL_DMA_Abort_IT+0x2b2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a3c      	ldr	r2, [pc, #240]	@ (80026ec <HAL_DMA_Abort_IT+0x3a8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d072      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a3a      	ldr	r2, [pc, #232]	@ (80026f0 <HAL_DMA_Abort_IT+0x3ac>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d06d      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a39      	ldr	r2, [pc, #228]	@ (80026f4 <HAL_DMA_Abort_IT+0x3b0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d068      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a37      	ldr	r2, [pc, #220]	@ (80026f8 <HAL_DMA_Abort_IT+0x3b4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d063      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a36      	ldr	r2, [pc, #216]	@ (80026fc <HAL_DMA_Abort_IT+0x3b8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d05e      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a34      	ldr	r2, [pc, #208]	@ (8002700 <HAL_DMA_Abort_IT+0x3bc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d059      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a33      	ldr	r2, [pc, #204]	@ (8002704 <HAL_DMA_Abort_IT+0x3c0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d054      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a31      	ldr	r2, [pc, #196]	@ (8002708 <HAL_DMA_Abort_IT+0x3c4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d04f      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a30      	ldr	r2, [pc, #192]	@ (800270c <HAL_DMA_Abort_IT+0x3c8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d04a      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2e      	ldr	r2, [pc, #184]	@ (8002710 <HAL_DMA_Abort_IT+0x3cc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d045      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2d      	ldr	r2, [pc, #180]	@ (8002714 <HAL_DMA_Abort_IT+0x3d0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d040      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2b      	ldr	r2, [pc, #172]	@ (8002718 <HAL_DMA_Abort_IT+0x3d4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d03b      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2a      	ldr	r2, [pc, #168]	@ (800271c <HAL_DMA_Abort_IT+0x3d8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d036      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a28      	ldr	r2, [pc, #160]	@ (8002720 <HAL_DMA_Abort_IT+0x3dc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d031      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a27      	ldr	r2, [pc, #156]	@ (8002724 <HAL_DMA_Abort_IT+0x3e0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d02c      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a25      	ldr	r2, [pc, #148]	@ (8002728 <HAL_DMA_Abort_IT+0x3e4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d027      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a24      	ldr	r2, [pc, #144]	@ (800272c <HAL_DMA_Abort_IT+0x3e8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d022      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a22      	ldr	r2, [pc, #136]	@ (8002730 <HAL_DMA_Abort_IT+0x3ec>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01d      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a21      	ldr	r2, [pc, #132]	@ (8002734 <HAL_DMA_Abort_IT+0x3f0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d018      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002738 <HAL_DMA_Abort_IT+0x3f4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1e      	ldr	r2, [pc, #120]	@ (800273c <HAL_DMA_Abort_IT+0x3f8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00e      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002740 <HAL_DMA_Abort_IT+0x3fc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d009      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002744 <HAL_DMA_Abort_IT+0x400>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d004      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x3a2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a19      	ldr	r2, [pc, #100]	@ (8002748 <HAL_DMA_Abort_IT+0x404>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d132      	bne.n	800274c <HAL_DMA_Abort_IT+0x408>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e031      	b.n	800274e <HAL_DMA_Abort_IT+0x40a>
 80026ea:	bf00      	nop
 80026ec:	40020010 	.word	0x40020010
 80026f0:	40020028 	.word	0x40020028
 80026f4:	40020040 	.word	0x40020040
 80026f8:	40020058 	.word	0x40020058
 80026fc:	40020070 	.word	0x40020070
 8002700:	40020088 	.word	0x40020088
 8002704:	400200a0 	.word	0x400200a0
 8002708:	400200b8 	.word	0x400200b8
 800270c:	40020410 	.word	0x40020410
 8002710:	40020428 	.word	0x40020428
 8002714:	40020440 	.word	0x40020440
 8002718:	40020458 	.word	0x40020458
 800271c:	40020470 	.word	0x40020470
 8002720:	40020488 	.word	0x40020488
 8002724:	400204a0 	.word	0x400204a0
 8002728:	400204b8 	.word	0x400204b8
 800272c:	58025408 	.word	0x58025408
 8002730:	5802541c 	.word	0x5802541c
 8002734:	58025430 	.word	0x58025430
 8002738:	58025444 	.word	0x58025444
 800273c:	58025458 	.word	0x58025458
 8002740:	5802546c 	.word	0x5802546c
 8002744:	58025480 	.word	0x58025480
 8002748:	58025494 	.word	0x58025494
 800274c:	2300      	movs	r3, #0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d028      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002760:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002766:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	2201      	movs	r2, #1
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002780:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00c      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002798:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80027a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop

080027d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027dc:	4b67      	ldr	r3, [pc, #412]	@ (800297c <HAL_DMA_IRQHandler+0x1ac>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a67      	ldr	r2, [pc, #412]	@ (8002980 <HAL_DMA_IRQHandler+0x1b0>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0a9b      	lsrs	r3, r3, #10
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a5f      	ldr	r2, [pc, #380]	@ (8002984 <HAL_DMA_IRQHandler+0x1b4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d04a      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a5d      	ldr	r2, [pc, #372]	@ (8002988 <HAL_DMA_IRQHandler+0x1b8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d045      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5c      	ldr	r2, [pc, #368]	@ (800298c <HAL_DMA_IRQHandler+0x1bc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d040      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a5a      	ldr	r2, [pc, #360]	@ (8002990 <HAL_DMA_IRQHandler+0x1c0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d03b      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a59      	ldr	r2, [pc, #356]	@ (8002994 <HAL_DMA_IRQHandler+0x1c4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d036      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a57      	ldr	r2, [pc, #348]	@ (8002998 <HAL_DMA_IRQHandler+0x1c8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d031      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a56      	ldr	r2, [pc, #344]	@ (800299c <HAL_DMA_IRQHandler+0x1cc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d02c      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a54      	ldr	r2, [pc, #336]	@ (80029a0 <HAL_DMA_IRQHandler+0x1d0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d027      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a53      	ldr	r2, [pc, #332]	@ (80029a4 <HAL_DMA_IRQHandler+0x1d4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d022      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a51      	ldr	r2, [pc, #324]	@ (80029a8 <HAL_DMA_IRQHandler+0x1d8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01d      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a50      	ldr	r2, [pc, #320]	@ (80029ac <HAL_DMA_IRQHandler+0x1dc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d018      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a4e      	ldr	r2, [pc, #312]	@ (80029b0 <HAL_DMA_IRQHandler+0x1e0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a4d      	ldr	r2, [pc, #308]	@ (80029b4 <HAL_DMA_IRQHandler+0x1e4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00e      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a4b      	ldr	r2, [pc, #300]	@ (80029b8 <HAL_DMA_IRQHandler+0x1e8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d009      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a4a      	ldr	r2, [pc, #296]	@ (80029bc <HAL_DMA_IRQHandler+0x1ec>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d004      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xd2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a48      	ldr	r2, [pc, #288]	@ (80029c0 <HAL_DMA_IRQHandler+0x1f0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_DMA_IRQHandler+0xd6>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_DMA_IRQHandler+0xd8>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 842b 	beq.w	8003104 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2208      	movs	r2, #8
 80028b8:	409a      	lsls	r2, r3
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80a2 	beq.w	8002a08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002984 <HAL_DMA_IRQHandler+0x1b4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d04a      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002988 <HAL_DMA_IRQHandler+0x1b8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d045      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2b      	ldr	r2, [pc, #172]	@ (800298c <HAL_DMA_IRQHandler+0x1bc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d040      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002990 <HAL_DMA_IRQHandler+0x1c0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d03b      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a28      	ldr	r2, [pc, #160]	@ (8002994 <HAL_DMA_IRQHandler+0x1c4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d036      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a27      	ldr	r2, [pc, #156]	@ (8002998 <HAL_DMA_IRQHandler+0x1c8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d031      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a25      	ldr	r2, [pc, #148]	@ (800299c <HAL_DMA_IRQHandler+0x1cc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d02c      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a24      	ldr	r2, [pc, #144]	@ (80029a0 <HAL_DMA_IRQHandler+0x1d0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d027      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a22      	ldr	r2, [pc, #136]	@ (80029a4 <HAL_DMA_IRQHandler+0x1d4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d022      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a21      	ldr	r2, [pc, #132]	@ (80029a8 <HAL_DMA_IRQHandler+0x1d8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d01d      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1f      	ldr	r2, [pc, #124]	@ (80029ac <HAL_DMA_IRQHandler+0x1dc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d018      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1e      	ldr	r2, [pc, #120]	@ (80029b0 <HAL_DMA_IRQHandler+0x1e0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <HAL_DMA_IRQHandler+0x1e4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00e      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <HAL_DMA_IRQHandler+0x1e8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a19      	ldr	r2, [pc, #100]	@ (80029bc <HAL_DMA_IRQHandler+0x1ec>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_DMA_IRQHandler+0x194>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a18      	ldr	r2, [pc, #96]	@ (80029c0 <HAL_DMA_IRQHandler+0x1f0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d12f      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x1f4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e02e      	b.n	80029d8 <HAL_DMA_IRQHandler+0x208>
 800297a:	bf00      	nop
 800297c:	24000000 	.word	0x24000000
 8002980:	1b4e81b5 	.word	0x1b4e81b5
 8002984:	40020010 	.word	0x40020010
 8002988:	40020028 	.word	0x40020028
 800298c:	40020040 	.word	0x40020040
 8002990:	40020058 	.word	0x40020058
 8002994:	40020070 	.word	0x40020070
 8002998:	40020088 	.word	0x40020088
 800299c:	400200a0 	.word	0x400200a0
 80029a0:	400200b8 	.word	0x400200b8
 80029a4:	40020410 	.word	0x40020410
 80029a8:	40020428 	.word	0x40020428
 80029ac:	40020440 	.word	0x40020440
 80029b0:	40020458 	.word	0x40020458
 80029b4:	40020470 	.word	0x40020470
 80029b8:	40020488 	.word	0x40020488
 80029bc:	400204a0 	.word	0x400204a0
 80029c0:	400204b8 	.word	0x400204b8
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bf14      	ite	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	2300      	moveq	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0204 	bic.w	r2, r2, #4
 80029ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2208      	movs	r2, #8
 80029f6:	409a      	lsls	r2, r3
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d06e      	beq.n	8002afc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a69      	ldr	r2, [pc, #420]	@ (8002bc8 <HAL_DMA_IRQHandler+0x3f8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d04a      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a67      	ldr	r2, [pc, #412]	@ (8002bcc <HAL_DMA_IRQHandler+0x3fc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d045      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a66      	ldr	r2, [pc, #408]	@ (8002bd0 <HAL_DMA_IRQHandler+0x400>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d040      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a64      	ldr	r2, [pc, #400]	@ (8002bd4 <HAL_DMA_IRQHandler+0x404>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d03b      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a63      	ldr	r2, [pc, #396]	@ (8002bd8 <HAL_DMA_IRQHandler+0x408>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d036      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a61      	ldr	r2, [pc, #388]	@ (8002bdc <HAL_DMA_IRQHandler+0x40c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d031      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a60      	ldr	r2, [pc, #384]	@ (8002be0 <HAL_DMA_IRQHandler+0x410>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d02c      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a5e      	ldr	r2, [pc, #376]	@ (8002be4 <HAL_DMA_IRQHandler+0x414>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d027      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a5d      	ldr	r2, [pc, #372]	@ (8002be8 <HAL_DMA_IRQHandler+0x418>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a5b      	ldr	r2, [pc, #364]	@ (8002bec <HAL_DMA_IRQHandler+0x41c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01d      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a5a      	ldr	r2, [pc, #360]	@ (8002bf0 <HAL_DMA_IRQHandler+0x420>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a58      	ldr	r2, [pc, #352]	@ (8002bf4 <HAL_DMA_IRQHandler+0x424>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a57      	ldr	r2, [pc, #348]	@ (8002bf8 <HAL_DMA_IRQHandler+0x428>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a55      	ldr	r2, [pc, #340]	@ (8002bfc <HAL_DMA_IRQHandler+0x42c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a54      	ldr	r2, [pc, #336]	@ (8002c00 <HAL_DMA_IRQHandler+0x430>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2ee>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	@ (8002c04 <HAL_DMA_IRQHandler+0x434>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10a      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x304>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e003      	b.n	8002adc <HAL_DMA_IRQHandler+0x30c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00d      	beq.n	8002afc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af4:	f043 0202 	orr.w	r2, r3, #2
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2204      	movs	r2, #4
 8002b06:	409a      	lsls	r2, r3
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 808f 	beq.w	8002c30 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc8 <HAL_DMA_IRQHandler+0x3f8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d04a      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2a      	ldr	r2, [pc, #168]	@ (8002bcc <HAL_DMA_IRQHandler+0x3fc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d045      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a29      	ldr	r2, [pc, #164]	@ (8002bd0 <HAL_DMA_IRQHandler+0x400>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d040      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a27      	ldr	r2, [pc, #156]	@ (8002bd4 <HAL_DMA_IRQHandler+0x404>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d03b      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a26      	ldr	r2, [pc, #152]	@ (8002bd8 <HAL_DMA_IRQHandler+0x408>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d036      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a24      	ldr	r2, [pc, #144]	@ (8002bdc <HAL_DMA_IRQHandler+0x40c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d031      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a23      	ldr	r2, [pc, #140]	@ (8002be0 <HAL_DMA_IRQHandler+0x410>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d02c      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a21      	ldr	r2, [pc, #132]	@ (8002be4 <HAL_DMA_IRQHandler+0x414>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d027      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a20      	ldr	r2, [pc, #128]	@ (8002be8 <HAL_DMA_IRQHandler+0x418>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d022      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1e      	ldr	r2, [pc, #120]	@ (8002bec <HAL_DMA_IRQHandler+0x41c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01d      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf0 <HAL_DMA_IRQHandler+0x420>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d018      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf4 <HAL_DMA_IRQHandler+0x424>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf8 <HAL_DMA_IRQHandler+0x428>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00e      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a18      	ldr	r2, [pc, #96]	@ (8002bfc <HAL_DMA_IRQHandler+0x42c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d009      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a17      	ldr	r2, [pc, #92]	@ (8002c00 <HAL_DMA_IRQHandler+0x430>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d004      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3e2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a15      	ldr	r2, [pc, #84]	@ (8002c04 <HAL_DMA_IRQHandler+0x434>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d12a      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x438>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e023      	b.n	8002c10 <HAL_DMA_IRQHandler+0x440>
 8002bc8:	40020010 	.word	0x40020010
 8002bcc:	40020028 	.word	0x40020028
 8002bd0:	40020040 	.word	0x40020040
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	40020070 	.word	0x40020070
 8002bdc:	40020088 	.word	0x40020088
 8002be0:	400200a0 	.word	0x400200a0
 8002be4:	400200b8 	.word	0x400200b8
 8002be8:	40020410 	.word	0x40020410
 8002bec:	40020428 	.word	0x40020428
 8002bf0:	40020440 	.word	0x40020440
 8002bf4:	40020458 	.word	0x40020458
 8002bf8:	40020470 	.word	0x40020470
 8002bfc:	40020488 	.word	0x40020488
 8002c00:	400204a0 	.word	0x400204a0
 8002c04:	400204b8 	.word	0x400204b8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00d      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	f043 0204 	orr.w	r2, r3, #4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2210      	movs	r2, #16
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a6 	beq.w	8002d92 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a85      	ldr	r2, [pc, #532]	@ (8002e60 <HAL_DMA_IRQHandler+0x690>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d04a      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a83      	ldr	r2, [pc, #524]	@ (8002e64 <HAL_DMA_IRQHandler+0x694>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d045      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a82      	ldr	r2, [pc, #520]	@ (8002e68 <HAL_DMA_IRQHandler+0x698>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d040      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a80      	ldr	r2, [pc, #512]	@ (8002e6c <HAL_DMA_IRQHandler+0x69c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d03b      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a7f      	ldr	r2, [pc, #508]	@ (8002e70 <HAL_DMA_IRQHandler+0x6a0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d036      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e74 <HAL_DMA_IRQHandler+0x6a4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d031      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7c      	ldr	r2, [pc, #496]	@ (8002e78 <HAL_DMA_IRQHandler+0x6a8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d02c      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a7a      	ldr	r2, [pc, #488]	@ (8002e7c <HAL_DMA_IRQHandler+0x6ac>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d027      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a79      	ldr	r2, [pc, #484]	@ (8002e80 <HAL_DMA_IRQHandler+0x6b0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d022      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a77      	ldr	r2, [pc, #476]	@ (8002e84 <HAL_DMA_IRQHandler+0x6b4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a76      	ldr	r2, [pc, #472]	@ (8002e88 <HAL_DMA_IRQHandler+0x6b8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d018      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a74      	ldr	r2, [pc, #464]	@ (8002e8c <HAL_DMA_IRQHandler+0x6bc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a73      	ldr	r2, [pc, #460]	@ (8002e90 <HAL_DMA_IRQHandler+0x6c0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00e      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a71      	ldr	r2, [pc, #452]	@ (8002e94 <HAL_DMA_IRQHandler+0x6c4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a70      	ldr	r2, [pc, #448]	@ (8002e98 <HAL_DMA_IRQHandler+0x6c8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x516>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e9c <HAL_DMA_IRQHandler+0x6cc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10a      	bne.n	8002cfc <HAL_DMA_IRQHandler+0x52c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e009      	b.n	8002d10 <HAL_DMA_IRQHandler+0x540>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d03e      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d018      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d108      	bne.n	8002d52 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d024      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
 8002d50:	e01f      	b.n	8002d92 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01b      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
 8002d62:	e016      	b.n	8002d92 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d107      	bne.n	8002d82 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0208 	bic.w	r2, r2, #8
 8002d80:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8110 	beq.w	8002fc8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2c      	ldr	r2, [pc, #176]	@ (8002e60 <HAL_DMA_IRQHandler+0x690>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d04a      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e64 <HAL_DMA_IRQHandler+0x694>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d045      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a29      	ldr	r2, [pc, #164]	@ (8002e68 <HAL_DMA_IRQHandler+0x698>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d040      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a28      	ldr	r2, [pc, #160]	@ (8002e6c <HAL_DMA_IRQHandler+0x69c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d03b      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	@ (8002e70 <HAL_DMA_IRQHandler+0x6a0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d036      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a25      	ldr	r2, [pc, #148]	@ (8002e74 <HAL_DMA_IRQHandler+0x6a4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d031      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a23      	ldr	r2, [pc, #140]	@ (8002e78 <HAL_DMA_IRQHandler+0x6a8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02c      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a22      	ldr	r2, [pc, #136]	@ (8002e7c <HAL_DMA_IRQHandler+0x6ac>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d027      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a20      	ldr	r2, [pc, #128]	@ (8002e80 <HAL_DMA_IRQHandler+0x6b0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d022      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1f      	ldr	r2, [pc, #124]	@ (8002e84 <HAL_DMA_IRQHandler+0x6b4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d01d      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <HAL_DMA_IRQHandler+0x6b8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d018      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <HAL_DMA_IRQHandler+0x6bc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d013      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1a      	ldr	r2, [pc, #104]	@ (8002e90 <HAL_DMA_IRQHandler+0x6c0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00e      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a19      	ldr	r2, [pc, #100]	@ (8002e94 <HAL_DMA_IRQHandler+0x6c4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d009      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <HAL_DMA_IRQHandler+0x6c8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x678>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a16      	ldr	r2, [pc, #88]	@ (8002e9c <HAL_DMA_IRQHandler+0x6cc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d12b      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x6d0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf14      	ite	ne
 8002e56:	2301      	movne	r3, #1
 8002e58:	2300      	moveq	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	e02a      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x6e4>
 8002e5e:	bf00      	nop
 8002e60:	40020010 	.word	0x40020010
 8002e64:	40020028 	.word	0x40020028
 8002e68:	40020040 	.word	0x40020040
 8002e6c:	40020058 	.word	0x40020058
 8002e70:	40020070 	.word	0x40020070
 8002e74:	40020088 	.word	0x40020088
 8002e78:	400200a0 	.word	0x400200a0
 8002e7c:	400200b8 	.word	0x400200b8
 8002e80:	40020410 	.word	0x40020410
 8002e84:	40020428 	.word	0x40020428
 8002e88:	40020440 	.word	0x40020440
 8002e8c:	40020458 	.word	0x40020458
 8002e90:	40020470 	.word	0x40020470
 8002e94:	40020488 	.word	0x40020488
 8002e98:	400204a0 	.word	0x400204a0
 8002e9c:	400204b8 	.word	0x400204b8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8087 	beq.w	8002fc8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d139      	bne.n	8002f4a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0216 	bic.w	r2, r2, #22
 8002ee4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ef4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <HAL_DMA_IRQHandler+0x736>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0208 	bic.w	r2, r2, #8
 8002f14:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	223f      	movs	r2, #63	@ 0x3f
 8002f20:	409a      	lsls	r2, r3
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 834a 	beq.w	80035d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
          }
          return;
 8002f48:	e344      	b.n	80035d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d018      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d02c      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
 8002f76:	e027      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d023      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
 8002f88:	e01e      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10f      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0210 	bic.w	r2, r2, #16
 8002fa6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8306 	beq.w	80035de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8088 	beq.w	80030f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a7a      	ldr	r2, [pc, #488]	@ (80031d8 <HAL_DMA_IRQHandler+0xa08>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d04a      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a79      	ldr	r2, [pc, #484]	@ (80031dc <HAL_DMA_IRQHandler+0xa0c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d045      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a77      	ldr	r2, [pc, #476]	@ (80031e0 <HAL_DMA_IRQHandler+0xa10>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d040      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a76      	ldr	r2, [pc, #472]	@ (80031e4 <HAL_DMA_IRQHandler+0xa14>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d03b      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a74      	ldr	r2, [pc, #464]	@ (80031e8 <HAL_DMA_IRQHandler+0xa18>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d036      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a73      	ldr	r2, [pc, #460]	@ (80031ec <HAL_DMA_IRQHandler+0xa1c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d031      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a71      	ldr	r2, [pc, #452]	@ (80031f0 <HAL_DMA_IRQHandler+0xa20>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d02c      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a70      	ldr	r2, [pc, #448]	@ (80031f4 <HAL_DMA_IRQHandler+0xa24>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d027      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a6e      	ldr	r2, [pc, #440]	@ (80031f8 <HAL_DMA_IRQHandler+0xa28>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d022      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a6d      	ldr	r2, [pc, #436]	@ (80031fc <HAL_DMA_IRQHandler+0xa2c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d01d      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a6b      	ldr	r2, [pc, #428]	@ (8003200 <HAL_DMA_IRQHandler+0xa30>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d018      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6a      	ldr	r2, [pc, #424]	@ (8003204 <HAL_DMA_IRQHandler+0xa34>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a68      	ldr	r2, [pc, #416]	@ (8003208 <HAL_DMA_IRQHandler+0xa38>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00e      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a67      	ldr	r2, [pc, #412]	@ (800320c <HAL_DMA_IRQHandler+0xa3c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a65      	ldr	r2, [pc, #404]	@ (8003210 <HAL_DMA_IRQHandler+0xa40>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <HAL_DMA_IRQHandler+0x8b8>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a64      	ldr	r2, [pc, #400]	@ (8003214 <HAL_DMA_IRQHandler+0xa44>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d108      	bne.n	800309a <HAL_DMA_IRQHandler+0x8ca>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e007      	b.n	80030aa <HAL_DMA_IRQHandler+0x8da>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3301      	adds	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d307      	bcc.n	80030c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f2      	bne.n	80030aa <HAL_DMA_IRQHandler+0x8da>
 80030c4:	e000      	b.n	80030c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80030c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d004      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2203      	movs	r2, #3
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80030de:	e003      	b.n	80030e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8272 	beq.w	80035de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
 8003102:	e26c      	b.n	80035de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a43      	ldr	r2, [pc, #268]	@ (8003218 <HAL_DMA_IRQHandler+0xa48>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d022      	beq.n	8003154 <HAL_DMA_IRQHandler+0x984>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a42      	ldr	r2, [pc, #264]	@ (800321c <HAL_DMA_IRQHandler+0xa4c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d01d      	beq.n	8003154 <HAL_DMA_IRQHandler+0x984>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a40      	ldr	r2, [pc, #256]	@ (8003220 <HAL_DMA_IRQHandler+0xa50>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d018      	beq.n	8003154 <HAL_DMA_IRQHandler+0x984>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a3f      	ldr	r2, [pc, #252]	@ (8003224 <HAL_DMA_IRQHandler+0xa54>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <HAL_DMA_IRQHandler+0x984>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a3d      	ldr	r2, [pc, #244]	@ (8003228 <HAL_DMA_IRQHandler+0xa58>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00e      	beq.n	8003154 <HAL_DMA_IRQHandler+0x984>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a3c      	ldr	r2, [pc, #240]	@ (800322c <HAL_DMA_IRQHandler+0xa5c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_DMA_IRQHandler+0x984>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a3a      	ldr	r2, [pc, #232]	@ (8003230 <HAL_DMA_IRQHandler+0xa60>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <HAL_DMA_IRQHandler+0x984>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a39      	ldr	r2, [pc, #228]	@ (8003234 <HAL_DMA_IRQHandler+0xa64>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_DMA_IRQHandler+0x988>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <HAL_DMA_IRQHandler+0x98a>
 8003158:	2300      	movs	r3, #0
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 823f 	beq.w	80035de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	2204      	movs	r2, #4
 8003172:	409a      	lsls	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80cd 	beq.w	8003318 <HAL_DMA_IRQHandler+0xb48>
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80c7 	beq.w	8003318 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2204      	movs	r2, #4
 8003194:	409a      	lsls	r2, r3
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d049      	beq.n	8003238 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8210 	beq.w	80035d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031c0:	e20a      	b.n	80035d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8206 	beq.w	80035d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031d4:	e200      	b.n	80035d8 <HAL_DMA_IRQHandler+0xe08>
 80031d6:	bf00      	nop
 80031d8:	40020010 	.word	0x40020010
 80031dc:	40020028 	.word	0x40020028
 80031e0:	40020040 	.word	0x40020040
 80031e4:	40020058 	.word	0x40020058
 80031e8:	40020070 	.word	0x40020070
 80031ec:	40020088 	.word	0x40020088
 80031f0:	400200a0 	.word	0x400200a0
 80031f4:	400200b8 	.word	0x400200b8
 80031f8:	40020410 	.word	0x40020410
 80031fc:	40020428 	.word	0x40020428
 8003200:	40020440 	.word	0x40020440
 8003204:	40020458 	.word	0x40020458
 8003208:	40020470 	.word	0x40020470
 800320c:	40020488 	.word	0x40020488
 8003210:	400204a0 	.word	0x400204a0
 8003214:	400204b8 	.word	0x400204b8
 8003218:	58025408 	.word	0x58025408
 800321c:	5802541c 	.word	0x5802541c
 8003220:	58025430 	.word	0x58025430
 8003224:	58025444 	.word	0x58025444
 8003228:	58025458 	.word	0x58025458
 800322c:	5802546c 	.word	0x5802546c
 8003230:	58025480 	.word	0x58025480
 8003234:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d160      	bne.n	8003304 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7f      	ldr	r2, [pc, #508]	@ (8003444 <HAL_DMA_IRQHandler+0xc74>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d04a      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a7d      	ldr	r2, [pc, #500]	@ (8003448 <HAL_DMA_IRQHandler+0xc78>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d045      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7c      	ldr	r2, [pc, #496]	@ (800344c <HAL_DMA_IRQHandler+0xc7c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d040      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a7a      	ldr	r2, [pc, #488]	@ (8003450 <HAL_DMA_IRQHandler+0xc80>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d03b      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a79      	ldr	r2, [pc, #484]	@ (8003454 <HAL_DMA_IRQHandler+0xc84>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d036      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a77      	ldr	r2, [pc, #476]	@ (8003458 <HAL_DMA_IRQHandler+0xc88>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d031      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a76      	ldr	r2, [pc, #472]	@ (800345c <HAL_DMA_IRQHandler+0xc8c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d02c      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a74      	ldr	r2, [pc, #464]	@ (8003460 <HAL_DMA_IRQHandler+0xc90>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d027      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a73      	ldr	r2, [pc, #460]	@ (8003464 <HAL_DMA_IRQHandler+0xc94>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a71      	ldr	r2, [pc, #452]	@ (8003468 <HAL_DMA_IRQHandler+0xc98>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01d      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a70      	ldr	r2, [pc, #448]	@ (800346c <HAL_DMA_IRQHandler+0xc9c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d018      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003470 <HAL_DMA_IRQHandler+0xca0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6d      	ldr	r2, [pc, #436]	@ (8003474 <HAL_DMA_IRQHandler+0xca4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00e      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003478 <HAL_DMA_IRQHandler+0xca8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6a      	ldr	r2, [pc, #424]	@ (800347c <HAL_DMA_IRQHandler+0xcac>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xb12>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a68      	ldr	r2, [pc, #416]	@ (8003480 <HAL_DMA_IRQHandler+0xcb0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <HAL_DMA_IRQHandler+0xb24>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0208 	bic.w	r2, r2, #8
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e007      	b.n	8003304 <HAL_DMA_IRQHandler+0xb34>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8165 	beq.w	80035d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003316:	e15f      	b.n	80035d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2202      	movs	r2, #2
 8003322:	409a      	lsls	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80c5 	beq.w	80034b8 <HAL_DMA_IRQHandler+0xce8>
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80bf 	beq.w	80034b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	2202      	movs	r2, #2
 8003344:	409a      	lsls	r2, r3
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d018      	beq.n	8003386 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 813a 	beq.w	80035dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003370:	e134      	b.n	80035dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8130 	beq.w	80035dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003384:	e12a      	b.n	80035dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	f040 8089 	bne.w	80034a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2b      	ldr	r2, [pc, #172]	@ (8003444 <HAL_DMA_IRQHandler+0xc74>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d04a      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a29      	ldr	r2, [pc, #164]	@ (8003448 <HAL_DMA_IRQHandler+0xc78>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d045      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a28      	ldr	r2, [pc, #160]	@ (800344c <HAL_DMA_IRQHandler+0xc7c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d040      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a26      	ldr	r2, [pc, #152]	@ (8003450 <HAL_DMA_IRQHandler+0xc80>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d03b      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a25      	ldr	r2, [pc, #148]	@ (8003454 <HAL_DMA_IRQHandler+0xc84>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d036      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a23      	ldr	r2, [pc, #140]	@ (8003458 <HAL_DMA_IRQHandler+0xc88>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d031      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a22      	ldr	r2, [pc, #136]	@ (800345c <HAL_DMA_IRQHandler+0xc8c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d02c      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a20      	ldr	r2, [pc, #128]	@ (8003460 <HAL_DMA_IRQHandler+0xc90>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d027      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003464 <HAL_DMA_IRQHandler+0xc94>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003468 <HAL_DMA_IRQHandler+0xc98>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01d      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1c      	ldr	r2, [pc, #112]	@ (800346c <HAL_DMA_IRQHandler+0xc9c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1a      	ldr	r2, [pc, #104]	@ (8003470 <HAL_DMA_IRQHandler+0xca0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a19      	ldr	r2, [pc, #100]	@ (8003474 <HAL_DMA_IRQHandler+0xca4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a17      	ldr	r2, [pc, #92]	@ (8003478 <HAL_DMA_IRQHandler+0xca8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a16      	ldr	r2, [pc, #88]	@ (800347c <HAL_DMA_IRQHandler+0xcac>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_DMA_IRQHandler+0xc62>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <HAL_DMA_IRQHandler+0xcb0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d128      	bne.n	8003484 <HAL_DMA_IRQHandler+0xcb4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0214 	bic.w	r2, r2, #20
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e027      	b.n	8003494 <HAL_DMA_IRQHandler+0xcc4>
 8003444:	40020010 	.word	0x40020010
 8003448:	40020028 	.word	0x40020028
 800344c:	40020040 	.word	0x40020040
 8003450:	40020058 	.word	0x40020058
 8003454:	40020070 	.word	0x40020070
 8003458:	40020088 	.word	0x40020088
 800345c:	400200a0 	.word	0x400200a0
 8003460:	400200b8 	.word	0x400200b8
 8003464:	40020410 	.word	0x40020410
 8003468:	40020428 	.word	0x40020428
 800346c:	40020440 	.word	0x40020440
 8003470:	40020458 	.word	0x40020458
 8003474:	40020470 	.word	0x40020470
 8003478:	40020488 	.word	0x40020488
 800347c:	400204a0 	.word	0x400204a0
 8003480:	400204b8 	.word	0x400204b8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 020a 	bic.w	r2, r2, #10
 8003492:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8097 	beq.w	80035dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b6:	e091      	b.n	80035dc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2208      	movs	r2, #8
 80034c2:	409a      	lsls	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8088 	beq.w	80035de <HAL_DMA_IRQHandler+0xe0e>
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8082 	beq.w	80035de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a41      	ldr	r2, [pc, #260]	@ (80035e4 <HAL_DMA_IRQHandler+0xe14>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d04a      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3f      	ldr	r2, [pc, #252]	@ (80035e8 <HAL_DMA_IRQHandler+0xe18>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d045      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a3e      	ldr	r2, [pc, #248]	@ (80035ec <HAL_DMA_IRQHandler+0xe1c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d040      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a3c      	ldr	r2, [pc, #240]	@ (80035f0 <HAL_DMA_IRQHandler+0xe20>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d03b      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a3b      	ldr	r2, [pc, #236]	@ (80035f4 <HAL_DMA_IRQHandler+0xe24>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d036      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a39      	ldr	r2, [pc, #228]	@ (80035f8 <HAL_DMA_IRQHandler+0xe28>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d031      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a38      	ldr	r2, [pc, #224]	@ (80035fc <HAL_DMA_IRQHandler+0xe2c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d02c      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a36      	ldr	r2, [pc, #216]	@ (8003600 <HAL_DMA_IRQHandler+0xe30>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d027      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a35      	ldr	r2, [pc, #212]	@ (8003604 <HAL_DMA_IRQHandler+0xe34>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d022      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a33      	ldr	r2, [pc, #204]	@ (8003608 <HAL_DMA_IRQHandler+0xe38>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01d      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a32      	ldr	r2, [pc, #200]	@ (800360c <HAL_DMA_IRQHandler+0xe3c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d018      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a30      	ldr	r2, [pc, #192]	@ (8003610 <HAL_DMA_IRQHandler+0xe40>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2f      	ldr	r2, [pc, #188]	@ (8003614 <HAL_DMA_IRQHandler+0xe44>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00e      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2d      	ldr	r2, [pc, #180]	@ (8003618 <HAL_DMA_IRQHandler+0xe48>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d009      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a2c      	ldr	r2, [pc, #176]	@ (800361c <HAL_DMA_IRQHandler+0xe4c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_DMA_IRQHandler+0xdaa>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2a      	ldr	r2, [pc, #168]	@ (8003620 <HAL_DMA_IRQHandler+0xe50>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d108      	bne.n	800358c <HAL_DMA_IRQHandler+0xdbc>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 021c 	bic.w	r2, r2, #28
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e007      	b.n	800359c <HAL_DMA_IRQHandler+0xdcc>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 020e 	bic.w	r2, r2, #14
 800359a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2201      	movs	r2, #1
 80035a6:	409a      	lsls	r2, r3
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
 80035d2:	e004      	b.n	80035de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80035d4:	bf00      	nop
 80035d6:	e002      	b.n	80035de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80035de:	3728      	adds	r7, #40	@ 0x28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40020010 	.word	0x40020010
 80035e8:	40020028 	.word	0x40020028
 80035ec:	40020040 	.word	0x40020040
 80035f0:	40020058 	.word	0x40020058
 80035f4:	40020070 	.word	0x40020070
 80035f8:	40020088 	.word	0x40020088
 80035fc:	400200a0 	.word	0x400200a0
 8003600:	400200b8 	.word	0x400200b8
 8003604:	40020410 	.word	0x40020410
 8003608:	40020428 	.word	0x40020428
 800360c:	40020440 	.word	0x40020440
 8003610:	40020458 	.word	0x40020458
 8003614:	40020470 	.word	0x40020470
 8003618:	40020488 	.word	0x40020488
 800361c:	400204a0 	.word	0x400204a0
 8003620:	400204b8 	.word	0x400204b8

08003624 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003654:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a7f      	ldr	r2, [pc, #508]	@ (8003858 <DMA_SetConfig+0x21c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d072      	beq.n	8003746 <DMA_SetConfig+0x10a>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a7d      	ldr	r2, [pc, #500]	@ (800385c <DMA_SetConfig+0x220>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d06d      	beq.n	8003746 <DMA_SetConfig+0x10a>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a7c      	ldr	r2, [pc, #496]	@ (8003860 <DMA_SetConfig+0x224>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d068      	beq.n	8003746 <DMA_SetConfig+0x10a>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a7a      	ldr	r2, [pc, #488]	@ (8003864 <DMA_SetConfig+0x228>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d063      	beq.n	8003746 <DMA_SetConfig+0x10a>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a79      	ldr	r2, [pc, #484]	@ (8003868 <DMA_SetConfig+0x22c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d05e      	beq.n	8003746 <DMA_SetConfig+0x10a>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a77      	ldr	r2, [pc, #476]	@ (800386c <DMA_SetConfig+0x230>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d059      	beq.n	8003746 <DMA_SetConfig+0x10a>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a76      	ldr	r2, [pc, #472]	@ (8003870 <DMA_SetConfig+0x234>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d054      	beq.n	8003746 <DMA_SetConfig+0x10a>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a74      	ldr	r2, [pc, #464]	@ (8003874 <DMA_SetConfig+0x238>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d04f      	beq.n	8003746 <DMA_SetConfig+0x10a>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a73      	ldr	r2, [pc, #460]	@ (8003878 <DMA_SetConfig+0x23c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d04a      	beq.n	8003746 <DMA_SetConfig+0x10a>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a71      	ldr	r2, [pc, #452]	@ (800387c <DMA_SetConfig+0x240>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d045      	beq.n	8003746 <DMA_SetConfig+0x10a>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a70      	ldr	r2, [pc, #448]	@ (8003880 <DMA_SetConfig+0x244>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d040      	beq.n	8003746 <DMA_SetConfig+0x10a>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003884 <DMA_SetConfig+0x248>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d03b      	beq.n	8003746 <DMA_SetConfig+0x10a>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6d      	ldr	r2, [pc, #436]	@ (8003888 <DMA_SetConfig+0x24c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d036      	beq.n	8003746 <DMA_SetConfig+0x10a>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a6b      	ldr	r2, [pc, #428]	@ (800388c <DMA_SetConfig+0x250>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d031      	beq.n	8003746 <DMA_SetConfig+0x10a>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003890 <DMA_SetConfig+0x254>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d02c      	beq.n	8003746 <DMA_SetConfig+0x10a>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a68      	ldr	r2, [pc, #416]	@ (8003894 <DMA_SetConfig+0x258>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d027      	beq.n	8003746 <DMA_SetConfig+0x10a>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a67      	ldr	r2, [pc, #412]	@ (8003898 <DMA_SetConfig+0x25c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <DMA_SetConfig+0x10a>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a65      	ldr	r2, [pc, #404]	@ (800389c <DMA_SetConfig+0x260>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <DMA_SetConfig+0x10a>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a64      	ldr	r2, [pc, #400]	@ (80038a0 <DMA_SetConfig+0x264>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <DMA_SetConfig+0x10a>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a62      	ldr	r2, [pc, #392]	@ (80038a4 <DMA_SetConfig+0x268>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <DMA_SetConfig+0x10a>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a61      	ldr	r2, [pc, #388]	@ (80038a8 <DMA_SetConfig+0x26c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <DMA_SetConfig+0x10a>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a5f      	ldr	r2, [pc, #380]	@ (80038ac <DMA_SetConfig+0x270>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <DMA_SetConfig+0x10a>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a5e      	ldr	r2, [pc, #376]	@ (80038b0 <DMA_SetConfig+0x274>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <DMA_SetConfig+0x10a>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a5c      	ldr	r2, [pc, #368]	@ (80038b4 <DMA_SetConfig+0x278>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <DMA_SetConfig+0x10e>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <DMA_SetConfig+0x110>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003758:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800376a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a39      	ldr	r2, [pc, #228]	@ (8003858 <DMA_SetConfig+0x21c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d04a      	beq.n	800380c <DMA_SetConfig+0x1d0>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a38      	ldr	r2, [pc, #224]	@ (800385c <DMA_SetConfig+0x220>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d045      	beq.n	800380c <DMA_SetConfig+0x1d0>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a36      	ldr	r2, [pc, #216]	@ (8003860 <DMA_SetConfig+0x224>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d040      	beq.n	800380c <DMA_SetConfig+0x1d0>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a35      	ldr	r2, [pc, #212]	@ (8003864 <DMA_SetConfig+0x228>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d03b      	beq.n	800380c <DMA_SetConfig+0x1d0>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a33      	ldr	r2, [pc, #204]	@ (8003868 <DMA_SetConfig+0x22c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d036      	beq.n	800380c <DMA_SetConfig+0x1d0>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a32      	ldr	r2, [pc, #200]	@ (800386c <DMA_SetConfig+0x230>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d031      	beq.n	800380c <DMA_SetConfig+0x1d0>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a30      	ldr	r2, [pc, #192]	@ (8003870 <DMA_SetConfig+0x234>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d02c      	beq.n	800380c <DMA_SetConfig+0x1d0>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003874 <DMA_SetConfig+0x238>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d027      	beq.n	800380c <DMA_SetConfig+0x1d0>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003878 <DMA_SetConfig+0x23c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d022      	beq.n	800380c <DMA_SetConfig+0x1d0>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2c      	ldr	r2, [pc, #176]	@ (800387c <DMA_SetConfig+0x240>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d01d      	beq.n	800380c <DMA_SetConfig+0x1d0>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003880 <DMA_SetConfig+0x244>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d018      	beq.n	800380c <DMA_SetConfig+0x1d0>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a29      	ldr	r2, [pc, #164]	@ (8003884 <DMA_SetConfig+0x248>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <DMA_SetConfig+0x1d0>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a27      	ldr	r2, [pc, #156]	@ (8003888 <DMA_SetConfig+0x24c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00e      	beq.n	800380c <DMA_SetConfig+0x1d0>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a26      	ldr	r2, [pc, #152]	@ (800388c <DMA_SetConfig+0x250>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d009      	beq.n	800380c <DMA_SetConfig+0x1d0>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a24      	ldr	r2, [pc, #144]	@ (8003890 <DMA_SetConfig+0x254>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <DMA_SetConfig+0x1d0>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a23      	ldr	r2, [pc, #140]	@ (8003894 <DMA_SetConfig+0x258>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d101      	bne.n	8003810 <DMA_SetConfig+0x1d4>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <DMA_SetConfig+0x1d6>
 8003810:	2300      	movs	r3, #0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d059      	beq.n	80038ca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	223f      	movs	r2, #63	@ 0x3f
 8003820:	409a      	lsls	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003834:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	d138      	bne.n	80038b8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003856:	e086      	b.n	8003966 <DMA_SetConfig+0x32a>
 8003858:	40020010 	.word	0x40020010
 800385c:	40020028 	.word	0x40020028
 8003860:	40020040 	.word	0x40020040
 8003864:	40020058 	.word	0x40020058
 8003868:	40020070 	.word	0x40020070
 800386c:	40020088 	.word	0x40020088
 8003870:	400200a0 	.word	0x400200a0
 8003874:	400200b8 	.word	0x400200b8
 8003878:	40020410 	.word	0x40020410
 800387c:	40020428 	.word	0x40020428
 8003880:	40020440 	.word	0x40020440
 8003884:	40020458 	.word	0x40020458
 8003888:	40020470 	.word	0x40020470
 800388c:	40020488 	.word	0x40020488
 8003890:	400204a0 	.word	0x400204a0
 8003894:	400204b8 	.word	0x400204b8
 8003898:	58025408 	.word	0x58025408
 800389c:	5802541c 	.word	0x5802541c
 80038a0:	58025430 	.word	0x58025430
 80038a4:	58025444 	.word	0x58025444
 80038a8:	58025458 	.word	0x58025458
 80038ac:	5802546c 	.word	0x5802546c
 80038b0:	58025480 	.word	0x58025480
 80038b4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	60da      	str	r2, [r3, #12]
}
 80038c8:	e04d      	b.n	8003966 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a29      	ldr	r2, [pc, #164]	@ (8003974 <DMA_SetConfig+0x338>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d022      	beq.n	800391a <DMA_SetConfig+0x2de>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a27      	ldr	r2, [pc, #156]	@ (8003978 <DMA_SetConfig+0x33c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <DMA_SetConfig+0x2de>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a26      	ldr	r2, [pc, #152]	@ (800397c <DMA_SetConfig+0x340>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <DMA_SetConfig+0x2de>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a24      	ldr	r2, [pc, #144]	@ (8003980 <DMA_SetConfig+0x344>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <DMA_SetConfig+0x2de>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a23      	ldr	r2, [pc, #140]	@ (8003984 <DMA_SetConfig+0x348>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <DMA_SetConfig+0x2de>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a21      	ldr	r2, [pc, #132]	@ (8003988 <DMA_SetConfig+0x34c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <DMA_SetConfig+0x2de>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a20      	ldr	r2, [pc, #128]	@ (800398c <DMA_SetConfig+0x350>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <DMA_SetConfig+0x2de>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1e      	ldr	r2, [pc, #120]	@ (8003990 <DMA_SetConfig+0x354>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <DMA_SetConfig+0x2e2>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <DMA_SetConfig+0x2e4>
 800391e:	2300      	movs	r3, #0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d020      	beq.n	8003966 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	2201      	movs	r2, #1
 800392e:	409a      	lsls	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	d108      	bne.n	8003956 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	60da      	str	r2, [r3, #12]
}
 8003954:	e007      	b.n	8003966 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	60da      	str	r2, [r3, #12]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	58025408 	.word	0x58025408
 8003978:	5802541c 	.word	0x5802541c
 800397c:	58025430 	.word	0x58025430
 8003980:	58025444 	.word	0x58025444
 8003984:	58025458 	.word	0x58025458
 8003988:	5802546c 	.word	0x5802546c
 800398c:	58025480 	.word	0x58025480
 8003990:	58025494 	.word	0x58025494

08003994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a42      	ldr	r2, [pc, #264]	@ (8003aac <DMA_CalcBaseAndBitshift+0x118>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d04a      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a41      	ldr	r2, [pc, #260]	@ (8003ab0 <DMA_CalcBaseAndBitshift+0x11c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d045      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab4 <DMA_CalcBaseAndBitshift+0x120>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d040      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a3e      	ldr	r2, [pc, #248]	@ (8003ab8 <DMA_CalcBaseAndBitshift+0x124>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d03b      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a3c      	ldr	r2, [pc, #240]	@ (8003abc <DMA_CalcBaseAndBitshift+0x128>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d036      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ac0 <DMA_CalcBaseAndBitshift+0x12c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d031      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a39      	ldr	r2, [pc, #228]	@ (8003ac4 <DMA_CalcBaseAndBitshift+0x130>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02c      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a38      	ldr	r2, [pc, #224]	@ (8003ac8 <DMA_CalcBaseAndBitshift+0x134>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d027      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a36      	ldr	r2, [pc, #216]	@ (8003acc <DMA_CalcBaseAndBitshift+0x138>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a35      	ldr	r2, [pc, #212]	@ (8003ad0 <DMA_CalcBaseAndBitshift+0x13c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d01d      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a33      	ldr	r2, [pc, #204]	@ (8003ad4 <DMA_CalcBaseAndBitshift+0x140>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a32      	ldr	r2, [pc, #200]	@ (8003ad8 <DMA_CalcBaseAndBitshift+0x144>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a30      	ldr	r2, [pc, #192]	@ (8003adc <DMA_CalcBaseAndBitshift+0x148>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae4 <DMA_CalcBaseAndBitshift+0x150>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <DMA_CalcBaseAndBitshift+0xa8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae8 <DMA_CalcBaseAndBitshift+0x154>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <DMA_CalcBaseAndBitshift+0xac>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <DMA_CalcBaseAndBitshift+0xae>
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d024      	beq.n	8003a90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	3b10      	subs	r3, #16
 8003a4e:	4a27      	ldr	r2, [pc, #156]	@ (8003aec <DMA_CalcBaseAndBitshift+0x158>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	4a24      	ldr	r2, [pc, #144]	@ (8003af0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a60:	5cd3      	ldrb	r3, [r2, r3]
 8003a62:	461a      	mov	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d908      	bls.n	8003a80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	4b1f      	ldr	r3, [pc, #124]	@ (8003af4 <DMA_CalcBaseAndBitshift+0x160>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	1d1a      	adds	r2, r3, #4
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a7e:	e00d      	b.n	8003a9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <DMA_CalcBaseAndBitshift+0x160>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a8e:	e005      	b.n	8003a9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40020010 	.word	0x40020010
 8003ab0:	40020028 	.word	0x40020028
 8003ab4:	40020040 	.word	0x40020040
 8003ab8:	40020058 	.word	0x40020058
 8003abc:	40020070 	.word	0x40020070
 8003ac0:	40020088 	.word	0x40020088
 8003ac4:	400200a0 	.word	0x400200a0
 8003ac8:	400200b8 	.word	0x400200b8
 8003acc:	40020410 	.word	0x40020410
 8003ad0:	40020428 	.word	0x40020428
 8003ad4:	40020440 	.word	0x40020440
 8003ad8:	40020458 	.word	0x40020458
 8003adc:	40020470 	.word	0x40020470
 8003ae0:	40020488 	.word	0x40020488
 8003ae4:	400204a0 	.word	0x400204a0
 8003ae8:	400204b8 	.word	0x400204b8
 8003aec:	aaaaaaab 	.word	0xaaaaaaab
 8003af0:	0800b20c 	.word	0x0800b20c
 8003af4:	fffffc00 	.word	0xfffffc00

08003af8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d120      	bne.n	8003b4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d858      	bhi.n	8003bc6 <DMA_CheckFifoParam+0xce>
 8003b14:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <DMA_CheckFifoParam+0x24>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b3f 	.word	0x08003b3f
 8003b24:	08003b2d 	.word	0x08003b2d
 8003b28:	08003bc7 	.word	0x08003bc7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d048      	beq.n	8003bca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b3c:	e045      	b.n	8003bca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b46:	d142      	bne.n	8003bce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b4c:	e03f      	b.n	8003bce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b56:	d123      	bne.n	8003ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d838      	bhi.n	8003bd2 <DMA_CheckFifoParam+0xda>
 8003b60:	a201      	add	r2, pc, #4	@ (adr r2, 8003b68 <DMA_CheckFifoParam+0x70>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b7f 	.word	0x08003b7f
 8003b70:	08003b79 	.word	0x08003b79
 8003b74:	08003b91 	.word	0x08003b91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
        break;
 8003b7c:	e030      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d025      	beq.n	8003bd6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b8e:	e022      	b.n	8003bd6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b98:	d11f      	bne.n	8003bda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b9e:	e01c      	b.n	8003bda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d902      	bls.n	8003bae <DMA_CheckFifoParam+0xb6>
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d003      	beq.n	8003bb4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003bac:	e018      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8003bb2:	e015      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8003bc4:	e00b      	b.n	8003bde <DMA_CheckFifoParam+0xe6>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e00a      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e008      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e006      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bd2:	bf00      	nop
 8003bd4:	e004      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bd6:	bf00      	nop
 8003bd8:	e002      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bda:	bf00      	nop
 8003bdc:	e000      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
    break;
 8003bde:	bf00      	nop
    }
  }

  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop

08003bf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a38      	ldr	r2, [pc, #224]	@ (8003ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d022      	beq.n	8003c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a36      	ldr	r2, [pc, #216]	@ (8003ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01d      	beq.n	8003c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a35      	ldr	r2, [pc, #212]	@ (8003cec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d018      	beq.n	8003c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a33      	ldr	r2, [pc, #204]	@ (8003cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a32      	ldr	r2, [pc, #200]	@ (8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00e      	beq.n	8003c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a30      	ldr	r2, [pc, #192]	@ (8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2d      	ldr	r2, [pc, #180]	@ (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c52:	2300      	movs	r3, #0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01a      	beq.n	8003c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	3b08      	subs	r3, #8
 8003c60:	4a28      	ldr	r2, [pc, #160]	@ (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4b26      	ldr	r3, [pc, #152]	@ (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	461a      	mov	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a24      	ldr	r2, [pc, #144]	@ (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c7c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2201      	movs	r2, #1
 8003c86:	409a      	lsls	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003c8c:	e024      	b.n	8003cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	3b10      	subs	r3, #16
 8003c96:	4a1e      	ldr	r2, [pc, #120]	@ (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d806      	bhi.n	8003cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4a1b      	ldr	r2, [pc, #108]	@ (8003d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d902      	bls.n	8003cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4b18      	ldr	r3, [pc, #96]	@ (8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a16      	ldr	r2, [pc, #88]	@ (8003d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003cc8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	58025408 	.word	0x58025408
 8003ce8:	5802541c 	.word	0x5802541c
 8003cec:	58025430 	.word	0x58025430
 8003cf0:	58025444 	.word	0x58025444
 8003cf4:	58025458 	.word	0x58025458
 8003cf8:	5802546c 	.word	0x5802546c
 8003cfc:	58025480 	.word	0x58025480
 8003d00:	58025494 	.word	0x58025494
 8003d04:	cccccccd 	.word	0xcccccccd
 8003d08:	16009600 	.word	0x16009600
 8003d0c:	58025880 	.word	0x58025880
 8003d10:	aaaaaaab 	.word	0xaaaaaaab
 8003d14:	400204b8 	.word	0x400204b8
 8003d18:	4002040f 	.word	0x4002040f
 8003d1c:	10008200 	.word	0x10008200
 8003d20:	40020880 	.word	0x40020880

08003d24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d04a      	beq.n	8003dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d847      	bhi.n	8003dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a25      	ldr	r2, [pc, #148]	@ (8003ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d022      	beq.n	8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a24      	ldr	r2, [pc, #144]	@ (8003de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d01d      	beq.n	8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a22      	ldr	r2, [pc, #136]	@ (8003de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d018      	beq.n	8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a21      	ldr	r2, [pc, #132]	@ (8003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00e      	beq.n	8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1e      	ldr	r2, [pc, #120]	@ (8003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d009      	beq.n	8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1c      	ldr	r2, [pc, #112]	@ (8003df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d101      	bne.n	8003d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4b17      	ldr	r3, [pc, #92]	@ (8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	461a      	mov	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003dac:	671a      	str	r2, [r3, #112]	@ 0x70
 8003dae:	e009      	b.n	8003dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4b14      	ldr	r3, [pc, #80]	@ (8003e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	461a      	mov	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a11      	ldr	r2, [pc, #68]	@ (8003e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003dc2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	2201      	movs	r2, #1
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	58025408 	.word	0x58025408
 8003de0:	5802541c 	.word	0x5802541c
 8003de4:	58025430 	.word	0x58025430
 8003de8:	58025444 	.word	0x58025444
 8003dec:	58025458 	.word	0x58025458
 8003df0:	5802546c 	.word	0x5802546c
 8003df4:	58025480 	.word	0x58025480
 8003df8:	58025494 	.word	0x58025494
 8003dfc:	1600963f 	.word	0x1600963f
 8003e00:	58025940 	.word	0x58025940
 8003e04:	1000823f 	.word	0x1000823f
 8003e08:	40020940 	.word	0x40020940

08003e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	@ 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e1a:	4b89      	ldr	r3, [pc, #548]	@ (8004040 <HAL_GPIO_Init+0x234>)
 8003e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e1e:	e194      	b.n	800414a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2101      	movs	r1, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8186 	beq.w	8004144 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d005      	beq.n	8003e50 <HAL_GPIO_Init+0x44>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d130      	bne.n	8003eb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e86:	2201      	movs	r2, #1
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 0201 	and.w	r2, r3, #1
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d017      	beq.n	8003eee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d123      	bne.n	8003f42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	08da      	lsrs	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3208      	adds	r2, #8
 8003f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	220f      	movs	r2, #15
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	08da      	lsrs	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3208      	adds	r2, #8
 8003f3c:	69b9      	ldr	r1, [r7, #24]
 8003f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80e0 	beq.w	8004144 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f84:	4b2f      	ldr	r3, [pc, #188]	@ (8004044 <HAL_GPIO_Init+0x238>)
 8003f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f8a:	4a2e      	ldr	r2, [pc, #184]	@ (8004044 <HAL_GPIO_Init+0x238>)
 8003f8c:	f043 0302 	orr.w	r3, r3, #2
 8003f90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003f94:	4b2b      	ldr	r3, [pc, #172]	@ (8004044 <HAL_GPIO_Init+0x238>)
 8003f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fa2:	4a29      	ldr	r2, [pc, #164]	@ (8004048 <HAL_GPIO_Init+0x23c>)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	220f      	movs	r2, #15
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a20      	ldr	r2, [pc, #128]	@ (800404c <HAL_GPIO_Init+0x240>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d052      	beq.n	8004074 <HAL_GPIO_Init+0x268>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8004050 <HAL_GPIO_Init+0x244>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d031      	beq.n	800403a <HAL_GPIO_Init+0x22e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8004054 <HAL_GPIO_Init+0x248>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02b      	beq.n	8004036 <HAL_GPIO_Init+0x22a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8004058 <HAL_GPIO_Init+0x24c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d025      	beq.n	8004032 <HAL_GPIO_Init+0x226>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800405c <HAL_GPIO_Init+0x250>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01f      	beq.n	800402e <HAL_GPIO_Init+0x222>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8004060 <HAL_GPIO_Init+0x254>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d019      	beq.n	800402a <HAL_GPIO_Init+0x21e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8004064 <HAL_GPIO_Init+0x258>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_GPIO_Init+0x21a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a19      	ldr	r2, [pc, #100]	@ (8004068 <HAL_GPIO_Init+0x25c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00d      	beq.n	8004022 <HAL_GPIO_Init+0x216>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a18      	ldr	r2, [pc, #96]	@ (800406c <HAL_GPIO_Init+0x260>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <HAL_GPIO_Init+0x212>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a17      	ldr	r2, [pc, #92]	@ (8004070 <HAL_GPIO_Init+0x264>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_GPIO_Init+0x20e>
 8004016:	2309      	movs	r3, #9
 8004018:	e02d      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800401a:	230a      	movs	r3, #10
 800401c:	e02b      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800401e:	2308      	movs	r3, #8
 8004020:	e029      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 8004022:	2307      	movs	r3, #7
 8004024:	e027      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 8004026:	2306      	movs	r3, #6
 8004028:	e025      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800402a:	2305      	movs	r3, #5
 800402c:	e023      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800402e:	2304      	movs	r3, #4
 8004030:	e021      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 8004032:	2303      	movs	r3, #3
 8004034:	e01f      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 8004036:	2302      	movs	r3, #2
 8004038:	e01d      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800403a:	2301      	movs	r3, #1
 800403c:	e01b      	b.n	8004076 <HAL_GPIO_Init+0x26a>
 800403e:	bf00      	nop
 8004040:	58000080 	.word	0x58000080
 8004044:	58024400 	.word	0x58024400
 8004048:	58000400 	.word	0x58000400
 800404c:	58020000 	.word	0x58020000
 8004050:	58020400 	.word	0x58020400
 8004054:	58020800 	.word	0x58020800
 8004058:	58020c00 	.word	0x58020c00
 800405c:	58021000 	.word	0x58021000
 8004060:	58021400 	.word	0x58021400
 8004064:	58021800 	.word	0x58021800
 8004068:	58021c00 	.word	0x58021c00
 800406c:	58022000 	.word	0x58022000
 8004070:	58022400 	.word	0x58022400
 8004074:	2300      	movs	r3, #0
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	f002 0203 	and.w	r2, r2, #3
 800407c:	0092      	lsls	r2, r2, #2
 800407e:	4093      	lsls	r3, r2
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004086:	4938      	ldr	r1, [pc, #224]	@ (8004168 <HAL_GPIO_Init+0x35c>)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	3302      	adds	r3, #2
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80040ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80040e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3301      	adds	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	f47f ae63 	bne.w	8003e20 <HAL_GPIO_Init+0x14>
  }
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	3724      	adds	r7, #36	@ 0x24
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	58000400 	.word	0x58000400

0800416c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
 8004178:	4613      	mov	r3, r2
 800417a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800417c:	787b      	ldrb	r3, [r7, #1]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004182:	887a      	ldrh	r2, [r7, #2]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004188:	e003      	b.n	8004192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800418a:	887b      	ldrh	r3, [r7, #2]
 800418c:	041a      	lsls	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	619a      	str	r2, [r3, #24]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a04      	ldr	r2, [pc, #16]	@ (80041bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ae:	6013      	str	r3, [r2, #0]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	58024800 	.word	0x58024800

080041c0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80041c8:	4b29      	ldr	r3, [pc, #164]	@ (8004270 <HAL_PWREx_ConfigSupply+0xb0>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	2b06      	cmp	r3, #6
 80041d2:	d00a      	beq.n	80041ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041d4:	4b26      	ldr	r3, [pc, #152]	@ (8004270 <HAL_PWREx_ConfigSupply+0xb0>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d001      	beq.n	80041e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e040      	b.n	8004268 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e03e      	b.n	8004268 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80041ea:	4b21      	ldr	r3, [pc, #132]	@ (8004270 <HAL_PWREx_ConfigSupply+0xb0>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80041f2:	491f      	ldr	r1, [pc, #124]	@ (8004270 <HAL_PWREx_ConfigSupply+0xb0>)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80041fa:	f7fc fe97 	bl	8000f2c <HAL_GetTick>
 80041fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004200:	e009      	b.n	8004216 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004202:	f7fc fe93 	bl	8000f2c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004210:	d901      	bls.n	8004216 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e028      	b.n	8004268 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004216:	4b16      	ldr	r3, [pc, #88]	@ (8004270 <HAL_PWREx_ConfigSupply+0xb0>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800421e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004222:	d1ee      	bne.n	8004202 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b1e      	cmp	r3, #30
 8004228:	d008      	beq.n	800423c <HAL_PWREx_ConfigSupply+0x7c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b2e      	cmp	r3, #46	@ 0x2e
 800422e:	d005      	beq.n	800423c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b1d      	cmp	r3, #29
 8004234:	d002      	beq.n	800423c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b2d      	cmp	r3, #45	@ 0x2d
 800423a:	d114      	bne.n	8004266 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800423c:	f7fc fe76 	bl	8000f2c <HAL_GetTick>
 8004240:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004242:	e009      	b.n	8004258 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004244:	f7fc fe72 	bl	8000f2c <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004252:	d901      	bls.n	8004258 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e007      	b.n	8004268 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_PWREx_ConfigSupply+0xb0>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004264:	d1ee      	bne.n	8004244 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	58024800 	.word	0x58024800

08004274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08c      	sub	sp, #48	@ 0x30
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	f000 bc48 	b.w	8004b18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8088 	beq.w	80043a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004296:	4b99      	ldr	r3, [pc, #612]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800429e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042a0:	4b96      	ldr	r3, [pc, #600]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d007      	beq.n	80042bc <HAL_RCC_OscConfig+0x48>
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	2b18      	cmp	r3, #24
 80042b0:	d111      	bne.n	80042d6 <HAL_RCC_OscConfig+0x62>
 80042b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d10c      	bne.n	80042d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	4b8f      	ldr	r3, [pc, #572]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d06d      	beq.n	80043a4 <HAL_RCC_OscConfig+0x130>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d169      	bne.n	80043a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f000 bc21 	b.w	8004b18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x7a>
 80042e0:	4b86      	ldr	r3, [pc, #536]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a85      	ldr	r2, [pc, #532]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	e02e      	b.n	800434c <HAL_RCC_OscConfig+0xd8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10c      	bne.n	8004310 <HAL_RCC_OscConfig+0x9c>
 80042f6:	4b81      	ldr	r3, [pc, #516]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a80      	ldr	r2, [pc, #512]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	4b7e      	ldr	r3, [pc, #504]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7d      	ldr	r2, [pc, #500]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004308:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e01d      	b.n	800434c <HAL_RCC_OscConfig+0xd8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0xc0>
 800431a:	4b78      	ldr	r3, [pc, #480]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a77      	ldr	r2, [pc, #476]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b75      	ldr	r3, [pc, #468]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a74      	ldr	r2, [pc, #464]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e00b      	b.n	800434c <HAL_RCC_OscConfig+0xd8>
 8004334:	4b71      	ldr	r3, [pc, #452]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a70      	ldr	r2, [pc, #448]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 800433a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b6e      	ldr	r3, [pc, #440]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6d      	ldr	r2, [pc, #436]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800434a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fc fdea 	bl	8000f2c <HAL_GetTick>
 8004358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435c:	f7fc fde6 	bl	8000f2c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	@ 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e3d4      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800436e:	4b63      	ldr	r3, [pc, #396]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0xe8>
 800437a:	e014      	b.n	80043a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fc fdd6 	bl	8000f2c <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7fc fdd2 	bl	8000f2c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	@ 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e3c0      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004396:	4b59      	ldr	r3, [pc, #356]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x110>
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80ca 	beq.w	8004548 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b4:	4b51      	ldr	r3, [pc, #324]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043be:	4b4f      	ldr	r3, [pc, #316]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_RCC_OscConfig+0x166>
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	2b18      	cmp	r3, #24
 80043ce:	d156      	bne.n	800447e <HAL_RCC_OscConfig+0x20a>
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d151      	bne.n	800447e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043da:	4b48      	ldr	r3, [pc, #288]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_RCC_OscConfig+0x17e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e392      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043f2:	4b42      	ldr	r3, [pc, #264]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 0219 	bic.w	r2, r3, #25
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	493f      	ldr	r1, [pc, #252]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fc fd92 	bl	8000f2c <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440c:	f7fc fd8e 	bl	8000f2c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e37c      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800441e:	4b37      	ldr	r3, [pc, #220]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	f7fc fd8b 	bl	8000f44 <HAL_GetREVID>
 800442e:	4603      	mov	r3, r0
 8004430:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004434:	4293      	cmp	r3, r2
 8004436:	d817      	bhi.n	8004468 <HAL_RCC_OscConfig+0x1f4>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d108      	bne.n	8004452 <HAL_RCC_OscConfig+0x1de>
 8004440:	4b2e      	ldr	r3, [pc, #184]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004448:	4a2c      	ldr	r2, [pc, #176]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 800444a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800444e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004450:	e07a      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	4b2a      	ldr	r3, [pc, #168]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	031b      	lsls	r3, r3, #12
 8004460:	4926      	ldr	r1, [pc, #152]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004466:	e06f      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004468:	4b24      	ldr	r3, [pc, #144]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	061b      	lsls	r3, r3, #24
 8004476:	4921      	ldr	r1, [pc, #132]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800447c:	e064      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d047      	beq.n	8004516 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004486:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 0219 	bic.w	r2, r3, #25
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	491a      	ldr	r1, [pc, #104]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fc fd48 	bl	8000f2c <HAL_GetTick>
 800449c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a0:	f7fc fd44 	bl	8000f2c <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e332      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044b2:	4b12      	ldr	r3, [pc, #72]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044be:	f7fc fd41 	bl	8000f44 <HAL_GetREVID>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d819      	bhi.n	8004500 <HAL_RCC_OscConfig+0x28c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b40      	cmp	r3, #64	@ 0x40
 80044d2:	d108      	bne.n	80044e6 <HAL_RCC_OscConfig+0x272>
 80044d4:	4b09      	ldr	r3, [pc, #36]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044dc:	4a07      	ldr	r2, [pc, #28]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80044de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e2:	6053      	str	r3, [r2, #4]
 80044e4:	e030      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
 80044e6:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	031b      	lsls	r3, r3, #12
 80044f4:	4901      	ldr	r1, [pc, #4]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]
 80044fa:	e025      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
 80044fc:	58024400 	.word	0x58024400
 8004500:	4b9a      	ldr	r3, [pc, #616]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	4997      	ldr	r1, [pc, #604]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004510:	4313      	orrs	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
 8004514:	e018      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004516:	4b95      	ldr	r3, [pc, #596]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a94      	ldr	r2, [pc, #592]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fc fd03 	bl	8000f2c <HAL_GetTick>
 8004526:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452a:	f7fc fcff 	bl	8000f2c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e2ed      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800453c:	4b8b      	ldr	r3, [pc, #556]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f0      	bne.n	800452a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80a9 	beq.w	80046a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004556:	4b85      	ldr	r3, [pc, #532]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800455e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004560:	4b82      	ldr	r3, [pc, #520]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d007      	beq.n	800457c <HAL_RCC_OscConfig+0x308>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b18      	cmp	r3, #24
 8004570:	d13a      	bne.n	80045e8 <HAL_RCC_OscConfig+0x374>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d135      	bne.n	80045e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800457c:	4b7b      	ldr	r3, [pc, #492]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_OscConfig+0x320>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	2b80      	cmp	r3, #128	@ 0x80
 800458e:	d001      	beq.n	8004594 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e2c1      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004594:	f7fc fcd6 	bl	8000f44 <HAL_GetREVID>
 8004598:	4603      	mov	r3, r0
 800459a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800459e:	4293      	cmp	r3, r2
 80045a0:	d817      	bhi.n	80045d2 <HAL_RCC_OscConfig+0x35e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d108      	bne.n	80045bc <HAL_RCC_OscConfig+0x348>
 80045aa:	4b70      	ldr	r3, [pc, #448]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80045b2:	4a6e      	ldr	r2, [pc, #440]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045ba:	e075      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045bc:	4b6b      	ldr	r3, [pc, #428]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	069b      	lsls	r3, r3, #26
 80045ca:	4968      	ldr	r1, [pc, #416]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045d0:	e06a      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045d2:	4b66      	ldr	r3, [pc, #408]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	4962      	ldr	r1, [pc, #392]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045e6:	e05f      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d042      	beq.n	8004676 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045f0:	4b5e      	ldr	r3, [pc, #376]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5d      	ldr	r2, [pc, #372]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fc fc96 	bl	8000f2c <HAL_GetTick>
 8004600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004604:	f7fc fc92 	bl	8000f2c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e280      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004616:	4b55      	ldr	r3, [pc, #340]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004622:	f7fc fc8f 	bl	8000f44 <HAL_GetREVID>
 8004626:	4603      	mov	r3, r0
 8004628:	f241 0203 	movw	r2, #4099	@ 0x1003
 800462c:	4293      	cmp	r3, r2
 800462e:	d817      	bhi.n	8004660 <HAL_RCC_OscConfig+0x3ec>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	2b20      	cmp	r3, #32
 8004636:	d108      	bne.n	800464a <HAL_RCC_OscConfig+0x3d6>
 8004638:	4b4c      	ldr	r3, [pc, #304]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004640:	4a4a      	ldr	r2, [pc, #296]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004642:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004646:	6053      	str	r3, [r2, #4]
 8004648:	e02e      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
 800464a:	4b48      	ldr	r3, [pc, #288]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	069b      	lsls	r3, r3, #26
 8004658:	4944      	ldr	r1, [pc, #272]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	604b      	str	r3, [r1, #4]
 800465e:	e023      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
 8004660:	4b42      	ldr	r3, [pc, #264]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	493f      	ldr	r1, [pc, #252]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004670:	4313      	orrs	r3, r2
 8004672:	60cb      	str	r3, [r1, #12]
 8004674:	e018      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004676:	4b3d      	ldr	r3, [pc, #244]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a3c      	ldr	r2, [pc, #240]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800467c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fc fc53 	bl	8000f2c <HAL_GetTick>
 8004686:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800468a:	f7fc fc4f 	bl	8000f2c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e23d      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800469c:	4b33      	ldr	r3, [pc, #204]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d036      	beq.n	8004722 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d019      	beq.n	80046f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046bc:	4b2b      	ldr	r3, [pc, #172]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80046be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c0:	4a2a      	ldr	r2, [pc, #168]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fc fc30 	bl	8000f2c <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d0:	f7fc fc2c 	bl	8000f2c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e21a      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046e2:	4b22      	ldr	r3, [pc, #136]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80046e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x45c>
 80046ee:	e018      	b.n	8004722 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f0:	4b1e      	ldr	r3, [pc, #120]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80046f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f4:	4a1d      	ldr	r2, [pc, #116]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fc fc16 	bl	8000f2c <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004704:	f7fc fc12 	bl	8000f2c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e200      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004716:	4b15      	ldr	r3, [pc, #84]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d039      	beq.n	80047a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01c      	beq.n	8004770 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004736:	4b0d      	ldr	r3, [pc, #52]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a0c      	ldr	r2, [pc, #48]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800473c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004742:	f7fc fbf3 	bl	8000f2c <HAL_GetTick>
 8004746:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800474a:	f7fc fbef 	bl	8000f2c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e1dd      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800475c:	4b03      	ldr	r3, [pc, #12]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x4d6>
 8004768:	e01b      	b.n	80047a2 <HAL_RCC_OscConfig+0x52e>
 800476a:	bf00      	nop
 800476c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004770:	4b9b      	ldr	r3, [pc, #620]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a9a      	ldr	r2, [pc, #616]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800477a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800477c:	f7fc fbd6 	bl	8000f2c <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004784:	f7fc fbd2 	bl	8000f2c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1c0      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004796:	4b92      	ldr	r3, [pc, #584]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8081 	beq.w	80048b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047b0:	4b8c      	ldr	r3, [pc, #560]	@ (80049e4 <HAL_RCC_OscConfig+0x770>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a8b      	ldr	r2, [pc, #556]	@ (80049e4 <HAL_RCC_OscConfig+0x770>)
 80047b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047bc:	f7fc fbb6 	bl	8000f2c <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c4:	f7fc fbb2 	bl	8000f2c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1a0      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d6:	4b83      	ldr	r3, [pc, #524]	@ (80049e4 <HAL_RCC_OscConfig+0x770>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d106      	bne.n	80047f8 <HAL_RCC_OscConfig+0x584>
 80047ea:	4b7d      	ldr	r3, [pc, #500]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	4a7c      	ldr	r2, [pc, #496]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f6:	e02d      	b.n	8004854 <HAL_RCC_OscConfig+0x5e0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10c      	bne.n	800481a <HAL_RCC_OscConfig+0x5a6>
 8004800:	4b77      	ldr	r3, [pc, #476]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004804:	4a76      	ldr	r2, [pc, #472]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	6713      	str	r3, [r2, #112]	@ 0x70
 800480c:	4b74      	ldr	r3, [pc, #464]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004810:	4a73      	ldr	r2, [pc, #460]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004812:	f023 0304 	bic.w	r3, r3, #4
 8004816:	6713      	str	r3, [r2, #112]	@ 0x70
 8004818:	e01c      	b.n	8004854 <HAL_RCC_OscConfig+0x5e0>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b05      	cmp	r3, #5
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x5c8>
 8004822:	4b6f      	ldr	r3, [pc, #444]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	4a6e      	ldr	r2, [pc, #440]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	6713      	str	r3, [r2, #112]	@ 0x70
 800482e:	4b6c      	ldr	r3, [pc, #432]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	4a6b      	ldr	r2, [pc, #428]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6713      	str	r3, [r2, #112]	@ 0x70
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0x5e0>
 800483c:	4b68      	ldr	r3, [pc, #416]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004840:	4a67      	ldr	r2, [pc, #412]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	@ 0x70
 8004848:	4b65      	ldr	r3, [pc, #404]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484c:	4a64      	ldr	r2, [pc, #400]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800484e:	f023 0304 	bic.w	r3, r3, #4
 8004852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fc fb66 	bl	8000f2c <HAL_GetTick>
 8004860:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fc fb62 	bl	8000f2c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e14e      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800487a:	4b59      	ldr	r3, [pc, #356]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ee      	beq.n	8004864 <HAL_RCC_OscConfig+0x5f0>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fc fb50 	bl	8000f2c <HAL_GetTick>
 800488c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fc fb4c 	bl	8000f2c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e138      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048a6:	4b4e      	ldr	r3, [pc, #312]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ee      	bne.n	8004890 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 812d 	beq.w	8004b16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048bc:	4b48      	ldr	r3, [pc, #288]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048c4:	2b18      	cmp	r3, #24
 80048c6:	f000 80bd 	beq.w	8004a44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	f040 809e 	bne.w	8004a10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d4:	4b42      	ldr	r3, [pc, #264]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a41      	ldr	r2, [pc, #260]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80048da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fc fb24 	bl	8000f2c <HAL_GetTick>
 80048e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fc fb20 	bl	8000f2c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e10e      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048fa:	4b39      	ldr	r3, [pc, #228]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004906:	4b36      	ldr	r3, [pc, #216]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800490a:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <HAL_RCC_OscConfig+0x774>)
 800490c:	4013      	ands	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004916:	0112      	lsls	r2, r2, #4
 8004918:	430a      	orrs	r2, r1
 800491a:	4931      	ldr	r1, [pc, #196]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800491c:	4313      	orrs	r3, r2
 800491e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	3b01      	subs	r3, #1
 8004926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800492e:	3b01      	subs	r3, #1
 8004930:	025b      	lsls	r3, r3, #9
 8004932:	b29b      	uxth	r3, r3
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004948:	3b01      	subs	r3, #1
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004950:	4923      	ldr	r1, [pc, #140]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004952:	4313      	orrs	r3, r2
 8004954:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004956:	4b22      	ldr	r3, [pc, #136]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	4a21      	ldr	r2, [pc, #132]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004962:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004966:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <HAL_RCC_OscConfig+0x778>)
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800496e:	00d2      	lsls	r2, r2, #3
 8004970:	491b      	ldr	r1, [pc, #108]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004976:	4b1a      	ldr	r3, [pc, #104]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	f023 020c 	bic.w	r2, r3, #12
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	4917      	ldr	r1, [pc, #92]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004988:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	f023 0202 	bic.w	r2, r3, #2
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004994:	4912      	ldr	r1, [pc, #72]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800499a:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800499c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499e:	4a10      	ldr	r2, [pc, #64]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	4a0d      	ldr	r2, [pc, #52]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049b2:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80049be:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c2:	4a07      	ldr	r2, [pc, #28]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ca:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fc faa9 	bl	8000f2c <HAL_GetTick>
 80049da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049dc:	e011      	b.n	8004a02 <HAL_RCC_OscConfig+0x78e>
 80049de:	bf00      	nop
 80049e0:	58024400 	.word	0x58024400
 80049e4:	58024800 	.word	0x58024800
 80049e8:	fffffc0c 	.word	0xfffffc0c
 80049ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f0:	f7fc fa9c 	bl	8000f2c <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e08a      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a02:	4b47      	ldr	r3, [pc, #284]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x77c>
 8004a0e:	e082      	b.n	8004b16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a10:	4b43      	ldr	r3, [pc, #268]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a42      	ldr	r2, [pc, #264]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fc fa86 	bl	8000f2c <HAL_GetTick>
 8004a20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a24:	f7fc fa82 	bl	8000f2c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e070      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a36:	4b3a      	ldr	r3, [pc, #232]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x7b0>
 8004a42:	e068      	b.n	8004b16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a44:	4b36      	ldr	r3, [pc, #216]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a4a:	4b35      	ldr	r3, [pc, #212]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d031      	beq.n	8004abc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f003 0203 	and.w	r2, r3, #3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d12a      	bne.n	8004abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d122      	bne.n	8004abc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d11a      	bne.n	8004abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	0a5b      	lsrs	r3, r3, #9
 8004a8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d111      	bne.n	8004abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	0c1b      	lsrs	r3, r3, #16
 8004a9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d108      	bne.n	8004abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	0e1b      	lsrs	r3, r3, #24
 8004aae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e02b      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004ac0:	4b17      	ldr	r3, [pc, #92]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac4:	08db      	lsrs	r3, r3, #3
 8004ac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d01f      	beq.n	8004b16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ad6:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ada:	4a11      	ldr	r2, [pc, #68]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004adc:	f023 0301 	bic.w	r3, r3, #1
 8004ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ae2:	f7fc fa23 	bl	8000f2c <HAL_GetTick>
 8004ae6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ae8:	bf00      	nop
 8004aea:	f7fc fa1f 	bl	8000f2c <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d0f9      	beq.n	8004aea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004afa:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <HAL_RCC_OscConfig+0x8b0>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b02:	00d2      	lsls	r2, r2, #3
 8004b04:	4906      	ldr	r1, [pc, #24]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b0a:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0e:	4a04      	ldr	r2, [pc, #16]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3730      	adds	r7, #48	@ 0x30
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	58024400 	.word	0x58024400
 8004b24:	ffff0007 	.word	0xffff0007

08004b28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e19c      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d910      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b87      	ldr	r3, [pc, #540]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 020f 	bic.w	r2, r3, #15
 8004b52:	4985      	ldr	r1, [pc, #532]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b83      	ldr	r3, [pc, #524]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e184      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d010      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	4b7b      	ldr	r3, [pc, #492]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d908      	bls.n	8004b9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b88:	4b78      	ldr	r3, [pc, #480]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	4975      	ldr	r1, [pc, #468]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d010      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	4b70      	ldr	r3, [pc, #448]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d908      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	496a      	ldr	r1, [pc, #424]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d010      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699a      	ldr	r2, [r3, #24]
 8004bd8:	4b64      	ldr	r3, [pc, #400]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d908      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004be4:	4b61      	ldr	r3, [pc, #388]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	495e      	ldr	r1, [pc, #376]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d010      	beq.n	8004c24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	4b59      	ldr	r3, [pc, #356]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d908      	bls.n	8004c24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c12:	4b56      	ldr	r3, [pc, #344]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	4953      	ldr	r1, [pc, #332]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d010      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	4b4d      	ldr	r3, [pc, #308]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d908      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c40:	4b4a      	ldr	r3, [pc, #296]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f023 020f 	bic.w	r2, r3, #15
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4947      	ldr	r1, [pc, #284]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d055      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c5e:	4b43      	ldr	r3, [pc, #268]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	4940      	ldr	r1, [pc, #256]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c78:	4b3c      	ldr	r3, [pc, #240]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d121      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0f6      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c90:	4b36      	ldr	r3, [pc, #216]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d115      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0ea      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ca8:	4b30      	ldr	r3, [pc, #192]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0de      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0d6      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cc8:	4b28      	ldr	r3, [pc, #160]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f023 0207 	bic.w	r2, r3, #7
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4925      	ldr	r1, [pc, #148]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cda:	f7fc f927 	bl	8000f2c <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce2:	f7fc f923 	bl	8000f2c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0be      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d1eb      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d010      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d208      	bcs.n	8004d38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d26:	4b11      	ldr	r3, [pc, #68]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f023 020f 	bic.w	r2, r3, #15
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	490e      	ldr	r1, [pc, #56]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d214      	bcs.n	8004d70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 020f 	bic.w	r2, r3, #15
 8004d4e:	4906      	ldr	r1, [pc, #24]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b04      	ldr	r3, [pc, #16]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e086      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
 8004d68:	52002000 	.word	0x52002000
 8004d6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	4b3f      	ldr	r3, [pc, #252]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d208      	bcs.n	8004d9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	4939      	ldr	r1, [pc, #228]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	4b34      	ldr	r3, [pc, #208]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d208      	bcs.n	8004dcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dba:	4b31      	ldr	r3, [pc, #196]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	492e      	ldr	r1, [pc, #184]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d010      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	4b28      	ldr	r3, [pc, #160]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d208      	bcs.n	8004dfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004de8:	4b25      	ldr	r3, [pc, #148]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	4922      	ldr	r1, [pc, #136]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d010      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69da      	ldr	r2, [r3, #28]
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d208      	bcs.n	8004e28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e16:	4b1a      	ldr	r3, [pc, #104]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	4917      	ldr	r1, [pc, #92]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e28:	f000 f834 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b14      	ldr	r3, [pc, #80]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	4912      	ldr	r1, [pc, #72]	@ (8004e84 <HAL_RCC_ClockConfig+0x35c>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
 8004e44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e46:	4b0e      	ldr	r3, [pc, #56]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004e84 <HAL_RCC_ClockConfig+0x35c>)
 8004e50:	5cd3      	ldrb	r3, [r2, r3]
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e88 <HAL_RCC_ClockConfig+0x360>)
 8004e5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e60:	4a0a      	ldr	r2, [pc, #40]	@ (8004e8c <HAL_RCC_ClockConfig+0x364>)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e66:	4b0a      	ldr	r3, [pc, #40]	@ (8004e90 <HAL_RCC_ClockConfig+0x368>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fc f814 	bl	8000e98 <HAL_InitTick>
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	58024400 	.word	0x58024400
 8004e84:	0800b1fc 	.word	0x0800b1fc
 8004e88:	24000004 	.word	0x24000004
 8004e8c:	24000000 	.word	0x24000000
 8004e90:	24000008 	.word	0x24000008

08004e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b089      	sub	sp, #36	@ 0x24
 8004e98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e9a:	4bb3      	ldr	r3, [pc, #716]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ea2:	2b18      	cmp	r3, #24
 8004ea4:	f200 8155 	bhi.w	8005152 <HAL_RCC_GetSysClockFreq+0x2be>
 8004ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08005153 	.word	0x08005153
 8004eb8:	08005153 	.word	0x08005153
 8004ebc:	08005153 	.word	0x08005153
 8004ec0:	08005153 	.word	0x08005153
 8004ec4:	08005153 	.word	0x08005153
 8004ec8:	08005153 	.word	0x08005153
 8004ecc:	08005153 	.word	0x08005153
 8004ed0:	08004f3b 	.word	0x08004f3b
 8004ed4:	08005153 	.word	0x08005153
 8004ed8:	08005153 	.word	0x08005153
 8004edc:	08005153 	.word	0x08005153
 8004ee0:	08005153 	.word	0x08005153
 8004ee4:	08005153 	.word	0x08005153
 8004ee8:	08005153 	.word	0x08005153
 8004eec:	08005153 	.word	0x08005153
 8004ef0:	08004f41 	.word	0x08004f41
 8004ef4:	08005153 	.word	0x08005153
 8004ef8:	08005153 	.word	0x08005153
 8004efc:	08005153 	.word	0x08005153
 8004f00:	08005153 	.word	0x08005153
 8004f04:	08005153 	.word	0x08005153
 8004f08:	08005153 	.word	0x08005153
 8004f0c:	08005153 	.word	0x08005153
 8004f10:	08004f47 	.word	0x08004f47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f14:	4b94      	ldr	r3, [pc, #592]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f20:	4b91      	ldr	r3, [pc, #580]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	08db      	lsrs	r3, r3, #3
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	4a90      	ldr	r2, [pc, #576]	@ (800516c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f32:	e111      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f34:	4b8d      	ldr	r3, [pc, #564]	@ (800516c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f36:	61bb      	str	r3, [r7, #24]
      break;
 8004f38:	e10e      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f3c:	61bb      	str	r3, [r7, #24]
      break;
 8004f3e:	e10b      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f40:	4b8c      	ldr	r3, [pc, #560]	@ (8005174 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f42:	61bb      	str	r3, [r7, #24]
      break;
 8004f44:	e108      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f46:	4b88      	ldr	r3, [pc, #544]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f50:	4b85      	ldr	r3, [pc, #532]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f5c:	4b82      	ldr	r3, [pc, #520]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f66:	4b80      	ldr	r3, [pc, #512]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80e1 	beq.w	800514c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	f000 8083 	beq.w	8005098 <HAL_RCC_GetSysClockFreq+0x204>
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	f200 80a1 	bhi.w	80050dc <HAL_RCC_GetSysClockFreq+0x248>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x114>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d056      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004fa6:	e099      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fa8:	4b6f      	ldr	r3, [pc, #444]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d02d      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	08db      	lsrs	r3, r3, #3
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	4a6b      	ldr	r2, [pc, #428]	@ (800516c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	ee07 3a90 	vmov	s15, r3
 8004fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fde:	4b62      	ldr	r3, [pc, #392]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ff2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005178 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800500e:	e087      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800517c <HAL_RCC_GetSysClockFreq+0x2e8>
 800501e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005022:	4b51      	ldr	r3, [pc, #324]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005032:	ed97 6a02 	vldr	s12, [r7, #8]
 8005036:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800503a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005052:	e065      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005180 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005066:	4b40      	ldr	r3, [pc, #256]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005076:	ed97 6a02 	vldr	s12, [r7, #8]
 800507a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800507e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800508a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005096:	e043      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005184 <HAL_RCC_GetSysClockFreq+0x2f0>
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80050be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005178 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050da:	e021      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005180 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005102:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005178 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800511e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005120:	4b11      	ldr	r3, [pc, #68]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005124:	0a5b      	lsrs	r3, r3, #9
 8005126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800512a:	3301      	adds	r3, #1
 800512c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	ee07 3a90 	vmov	s15, r3
 8005134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005138:	edd7 6a07 	vldr	s13, [r7, #28]
 800513c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005144:	ee17 3a90 	vmov	r3, s15
 8005148:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800514a:	e005      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]
      break;
 8005150:	e002      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005152:	4b07      	ldr	r3, [pc, #28]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005154:	61bb      	str	r3, [r7, #24]
      break;
 8005156:	bf00      	nop
  }

  return sysclockfreq;
 8005158:	69bb      	ldr	r3, [r7, #24]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3724      	adds	r7, #36	@ 0x24
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	58024400 	.word	0x58024400
 800516c:	03d09000 	.word	0x03d09000
 8005170:	003d0900 	.word	0x003d0900
 8005174:	017d7840 	.word	0x017d7840
 8005178:	46000000 	.word	0x46000000
 800517c:	4c742400 	.word	0x4c742400
 8005180:	4a742400 	.word	0x4a742400
 8005184:	4bbebc20 	.word	0x4bbebc20

08005188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800518e:	f7ff fe81 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8005192:	4602      	mov	r2, r0
 8005194:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	490f      	ldr	r1, [pc, #60]	@ (80051dc <HAL_RCC_GetHCLKFreq+0x54>)
 80051a0:	5ccb      	ldrb	r3, [r1, r3]
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051ac:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	4a09      	ldr	r2, [pc, #36]	@ (80051dc <HAL_RCC_GetHCLKFreq+0x54>)
 80051b6:	5cd3      	ldrb	r3, [r2, r3]
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	fa22 f303 	lsr.w	r3, r2, r3
 80051c2:	4a07      	ldr	r2, [pc, #28]	@ (80051e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051c6:	4a07      	ldr	r2, [pc, #28]	@ (80051e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051cc:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	58024400 	.word	0x58024400
 80051dc:	0800b1fc 	.word	0x0800b1fc
 80051e0:	24000004 	.word	0x24000004
 80051e4:	24000000 	.word	0x24000000

080051e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051ec:	f7ff ffcc 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b06      	ldr	r3, [pc, #24]	@ (800520c <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4904      	ldr	r1, [pc, #16]	@ (8005210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005208:	4618      	mov	r0, r3
 800520a:	bd80      	pop	{r7, pc}
 800520c:	58024400 	.word	0x58024400
 8005210:	0800b1fc 	.word	0x0800b1fc

08005214 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005218:	b0cc      	sub	sp, #304	@ 0x130
 800521a:	af00      	add	r7, sp, #0
 800521c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005220:	2300      	movs	r3, #0
 8005222:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005226:	2300      	movs	r3, #0
 8005228:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800522c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005238:	2500      	movs	r5, #0
 800523a:	ea54 0305 	orrs.w	r3, r4, r5
 800523e:	d049      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005246:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800524a:	d02f      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800524c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005250:	d828      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005252:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005256:	d01a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005258:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800525c:	d822      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005266:	d007      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005268:	e01c      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800526a:	4bb8      	ldr	r3, [pc, #736]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	4ab7      	ldr	r2, [pc, #732]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005276:	e01a      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005278:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800527c:	3308      	adds	r3, #8
 800527e:	2102      	movs	r1, #2
 8005280:	4618      	mov	r0, r3
 8005282:	f002 fba1 	bl	80079c8 <RCCEx_PLL2_Config>
 8005286:	4603      	mov	r3, r0
 8005288:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800528c:	e00f      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800528e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005292:	3328      	adds	r3, #40	@ 0x28
 8005294:	2102      	movs	r1, #2
 8005296:	4618      	mov	r0, r3
 8005298:	f002 fc48 	bl	8007b2c <RCCEx_PLL3_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052a2:	e004      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052aa:	e000      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80052ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052b6:	4ba5      	ldr	r3, [pc, #660]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c4:	4aa1      	ldr	r2, [pc, #644]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c6:	430b      	orrs	r3, r1
 80052c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80052ca:	e003      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80052e0:	f04f 0900 	mov.w	r9, #0
 80052e4:	ea58 0309 	orrs.w	r3, r8, r9
 80052e8:	d047      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d82a      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052f4:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	08005311 	.word	0x08005311
 8005300:	0800531f 	.word	0x0800531f
 8005304:	08005335 	.word	0x08005335
 8005308:	08005353 	.word	0x08005353
 800530c:	08005353 	.word	0x08005353
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005310:	4b8e      	ldr	r3, [pc, #568]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005314:	4a8d      	ldr	r2, [pc, #564]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800531a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800531c:	e01a      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800531e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005322:	3308      	adds	r3, #8
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f002 fb4e 	bl	80079c8 <RCCEx_PLL2_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005332:	e00f      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005338:	3328      	adds	r3, #40	@ 0x28
 800533a:	2100      	movs	r1, #0
 800533c:	4618      	mov	r0, r3
 800533e:	f002 fbf5 	bl	8007b2c <RCCEx_PLL3_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005348:	e004      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005350:	e000      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005354:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800535c:	4b7b      	ldr	r3, [pc, #492]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800535e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005360:	f023 0107 	bic.w	r1, r3, #7
 8005364:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536a:	4a78      	ldr	r2, [pc, #480]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800536c:	430b      	orrs	r3, r1
 800536e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005370:	e003      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005372:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005376:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800537a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005386:	f04f 0b00 	mov.w	fp, #0
 800538a:	ea5a 030b 	orrs.w	r3, sl, fp
 800538e:	d04c      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005390:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800539a:	d030      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800539c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053a0:	d829      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80053a4:	d02d      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80053a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80053a8:	d825      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053aa:	2b80      	cmp	r3, #128	@ 0x80
 80053ac:	d018      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80053ae:	2b80      	cmp	r3, #128	@ 0x80
 80053b0:	d821      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80053b6:	2b40      	cmp	r3, #64	@ 0x40
 80053b8:	d007      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80053ba:	e01c      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053bc:	4b63      	ldr	r3, [pc, #396]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c0:	4a62      	ldr	r2, [pc, #392]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053c8:	e01c      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053ce:	3308      	adds	r3, #8
 80053d0:	2100      	movs	r1, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f002 faf8 	bl	80079c8 <RCCEx_PLL2_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053de:	e011      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053e4:	3328      	adds	r3, #40	@ 0x28
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f002 fb9f 	bl	8007b2c <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053f4:	e006      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80053fc:	e002      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005404:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800540c:	4b4f      	ldr	r3, [pc, #316]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800540e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005410:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800541a:	4a4c      	ldr	r2, [pc, #304]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800541c:	430b      	orrs	r3, r1
 800541e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005420:	e003      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005422:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005426:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800542a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005436:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800543a:	2300      	movs	r3, #0
 800543c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005440:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005444:	460b      	mov	r3, r1
 8005446:	4313      	orrs	r3, r2
 8005448:	d053      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800544a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800544e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005452:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005456:	d035      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005458:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800545c:	d82e      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800545e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005462:	d031      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005464:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005468:	d828      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800546a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800546e:	d01a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005474:	d822      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800547a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800547e:	d007      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005480:	e01c      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005482:	4b32      	ldr	r3, [pc, #200]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005486:	4a31      	ldr	r2, [pc, #196]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800548c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800548e:	e01c      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005494:	3308      	adds	r3, #8
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f002 fa95 	bl	80079c8 <RCCEx_PLL2_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054a4:	e011      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054aa:	3328      	adds	r3, #40	@ 0x28
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f002 fb3c 	bl	8007b2c <RCCEx_PLL3_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ba:	e006      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80054c2:	e002      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054c4:	bf00      	nop
 80054c6:	e000      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054d2:	4b1e      	ldr	r3, [pc, #120]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80054da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80054e2:	4a1a      	ldr	r2, [pc, #104]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054e8:	e003      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80054fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005502:	2300      	movs	r3, #0
 8005504:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005508:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800550c:	460b      	mov	r3, r1
 800550e:	4313      	orrs	r3, r2
 8005510:	d056      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800551a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800551e:	d038      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005520:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005524:	d831      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005526:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800552a:	d034      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800552c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005530:	d82b      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005532:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005536:	d01d      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005538:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800553c:	d825      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d006      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005546:	d00a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005548:	e01f      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800554a:	bf00      	nop
 800554c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005550:	4ba2      	ldr	r3, [pc, #648]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	4aa1      	ldr	r2, [pc, #644]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800555c:	e01c      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800555e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005562:	3308      	adds	r3, #8
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f002 fa2e 	bl	80079c8 <RCCEx_PLL2_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005572:	e011      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005574:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005578:	3328      	adds	r3, #40	@ 0x28
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f002 fad5 	bl	8007b2c <RCCEx_PLL3_Config>
 8005582:	4603      	mov	r3, r0
 8005584:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005588:	e006      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005590:	e002      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005598:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10b      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055a0:	4b8e      	ldr	r3, [pc, #568]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80055a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055b0:	4a8a      	ldr	r2, [pc, #552]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055b2:	430b      	orrs	r3, r1
 80055b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055b6:	e003      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80055cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80055d0:	2300      	movs	r3, #0
 80055d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80055d6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80055da:	460b      	mov	r3, r1
 80055dc:	4313      	orrs	r3, r2
 80055de:	d03a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80055e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055e6:	2b30      	cmp	r3, #48	@ 0x30
 80055e8:	d01f      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80055ea:	2b30      	cmp	r3, #48	@ 0x30
 80055ec:	d819      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d00c      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d815      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d019      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	d111      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fe:	4b77      	ldr	r3, [pc, #476]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	4a76      	ldr	r2, [pc, #472]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005608:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800560a:	e011      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800560c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005610:	3308      	adds	r3, #8
 8005612:	2102      	movs	r1, #2
 8005614:	4618      	mov	r0, r3
 8005616:	f002 f9d7 	bl	80079c8 <RCCEx_PLL2_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005620:	e006      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005628:	e002      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800562a:	bf00      	nop
 800562c:	e000      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800562e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005630:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005638:	4b68      	ldr	r3, [pc, #416]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800563a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005646:	4a65      	ldr	r2, [pc, #404]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005648:	430b      	orrs	r3, r1
 800564a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800564c:	e003      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005652:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005656:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005662:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005666:	2300      	movs	r3, #0
 8005668:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800566c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005670:	460b      	mov	r3, r1
 8005672:	4313      	orrs	r3, r2
 8005674:	d051      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005676:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800567a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800567c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005680:	d035      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005686:	d82e      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005688:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800568c:	d031      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800568e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005692:	d828      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005698:	d01a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800569a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800569e:	d822      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a8:	d007      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80056aa:	e01c      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ac:	4b4b      	ldr	r3, [pc, #300]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b0:	4a4a      	ldr	r2, [pc, #296]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056b8:	e01c      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056be:	3308      	adds	r3, #8
 80056c0:	2100      	movs	r1, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f002 f980 	bl	80079c8 <RCCEx_PLL2_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056ce:	e011      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056d4:	3328      	adds	r3, #40	@ 0x28
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f002 fa27 	bl	8007b2c <RCCEx_PLL3_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056e4:	e006      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80056ec:	e002      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056fc:	4b37      	ldr	r3, [pc, #220]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005700:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005704:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800570a:	4a34      	ldr	r2, [pc, #208]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800570c:	430b      	orrs	r3, r1
 800570e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005710:	e003      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005716:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800571a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005726:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800572a:	2300      	movs	r3, #0
 800572c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005730:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005734:	460b      	mov	r3, r1
 8005736:	4313      	orrs	r3, r2
 8005738:	d056      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800573a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800573e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005744:	d033      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005746:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800574a:	d82c      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800574c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005750:	d02f      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005752:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005756:	d826      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005758:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800575c:	d02b      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800575e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005762:	d820      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005768:	d012      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800576a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800576e:	d81a      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d022      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005778:	d115      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800577a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800577e:	3308      	adds	r3, #8
 8005780:	2101      	movs	r1, #1
 8005782:	4618      	mov	r0, r3
 8005784:	f002 f920 	bl	80079c8 <RCCEx_PLL2_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800578e:	e015      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005794:	3328      	adds	r3, #40	@ 0x28
 8005796:	2101      	movs	r1, #1
 8005798:	4618      	mov	r0, r3
 800579a:	f002 f9c7 	bl	8007b2c <RCCEx_PLL3_Config>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057a4:	e00a      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80057ac:	e006      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057ae:	bf00      	nop
 80057b0:	e004      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057b2:	bf00      	nop
 80057b4:	e002      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057b6:	bf00      	nop
 80057b8:	e000      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10d      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057c4:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80057cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057d2:	4a02      	ldr	r2, [pc, #8]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057d8:	e006      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80057da:	bf00      	nop
 80057dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80057f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057fe:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005802:	460b      	mov	r3, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	d055      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005808:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800580c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005814:	d033      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800581a:	d82c      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005820:	d02f      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005826:	d826      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005828:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800582c:	d02b      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800582e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005832:	d820      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005838:	d012      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800583a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800583e:	d81a      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d022      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005848:	d115      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800584a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800584e:	3308      	adds	r3, #8
 8005850:	2101      	movs	r1, #1
 8005852:	4618      	mov	r0, r3
 8005854:	f002 f8b8 	bl	80079c8 <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800585e:	e015      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005860:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005864:	3328      	adds	r3, #40	@ 0x28
 8005866:	2101      	movs	r1, #1
 8005868:	4618      	mov	r0, r3
 800586a:	f002 f95f 	bl	8007b2c <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005874:	e00a      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800587c:	e006      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800587e:	bf00      	nop
 8005880:	e004      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005882:	bf00      	nop
 8005884:	e002      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800588a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005894:	4bb6      	ldr	r3, [pc, #728]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005898:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800589c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058a4:	4ab2      	ldr	r2, [pc, #712]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80058aa:	e003      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80058b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80058c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058c4:	2300      	movs	r3, #0
 80058c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	d02a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80058d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d011      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80058de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058e2:	d10a      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058e8:	3308      	adds	r3, #8
 80058ea:	2101      	movs	r1, #1
 80058ec:	4618      	mov	r0, r3
 80058ee:	f002 f86b 	bl	80079c8 <RCCEx_PLL2_Config>
 80058f2:	4603      	mov	r3, r0
 80058f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80058f8:	e004      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005900:	e000      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005904:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800590c:	4b98      	ldr	r3, [pc, #608]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800590e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005910:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005914:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591a:	4a95      	ldr	r2, [pc, #596]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800591c:	430b      	orrs	r3, r1
 800591e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005920:	e003      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005922:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005926:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800592a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005936:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800593a:	2300      	movs	r3, #0
 800593c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005940:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005944:	460b      	mov	r3, r1
 8005946:	4313      	orrs	r3, r2
 8005948:	d037      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800594a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800594e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005954:	d00e      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800595a:	d816      	bhi.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x776>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d018      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005964:	d111      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005966:	4b82      	ldr	r3, [pc, #520]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	4a81      	ldr	r2, [pc, #516]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800596c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005972:	e00f      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005974:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005978:	3308      	adds	r3, #8
 800597a:	2101      	movs	r1, #1
 800597c:	4618      	mov	r0, r3
 800597e:	f002 f823 	bl	80079c8 <RCCEx_PLL2_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005988:	e004      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005990:	e000      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005994:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800599c:	4b74      	ldr	r3, [pc, #464]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800599e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059aa:	4a71      	ldr	r2, [pc, #452]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059ac:	430b      	orrs	r3, r1
 80059ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80059ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80059c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80059d0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4313      	orrs	r3, r2
 80059d8:	d03a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80059da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d81d      	bhi.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80059e4:	a201      	add	r2, pc, #4	@ (adr r2, 80059ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ea:	bf00      	nop
 80059ec:	08005a29 	.word	0x08005a29
 80059f0:	080059fd 	.word	0x080059fd
 80059f4:	08005a0b 	.word	0x08005a0b
 80059f8:	08005a29 	.word	0x08005a29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a00:	4a5b      	ldr	r2, [pc, #364]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a08:	e00f      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a0e:	3308      	adds	r3, #8
 8005a10:	2102      	movs	r1, #2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 ffd8 	bl	80079c8 <RCCEx_PLL2_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a1e:	e004      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a26:	e000      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a32:	4b4f      	ldr	r3, [pc, #316]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a36:	f023 0103 	bic.w	r1, r3, #3
 8005a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a40:	4a4b      	ldr	r2, [pc, #300]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a42:	430b      	orrs	r3, r1
 8005a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a46:	e003      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a48:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a4c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a60:	2300      	movs	r3, #0
 8005a62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f000 80a0 	beq.w	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a72:	4b40      	ldr	r3, [pc, #256]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a3f      	ldr	r2, [pc, #252]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a7e:	f7fb fa55 	bl	8000f2c <HAL_GetTick>
 8005a82:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a86:	e00b      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a88:	f7fb fa50 	bl	8000f2c <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b64      	cmp	r3, #100	@ 0x64
 8005a96:	d903      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a9e:	e005      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aa0:	4b34      	ldr	r3, [pc, #208]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0ed      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005aac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d17a      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ab6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005abc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ac0:	4053      	eors	r3, r2
 8005ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d015      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005aca:	4b29      	ldr	r3, [pc, #164]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ad6:	4b26      	ldr	r3, [pc, #152]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ada:	4a25      	ldr	r2, [pc, #148]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ae2:	4b23      	ldr	r3, [pc, #140]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae6:	4a22      	ldr	r2, [pc, #136]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005aee:	4a20      	ldr	r2, [pc, #128]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005af0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005af4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005afa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b02:	d118      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fb fa12 	bl	8000f2c <HAL_GetTick>
 8005b08:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b0c:	e00d      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0e:	f7fb fa0d 	bl	8000f2c <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b18:	1ad2      	subs	r2, r2, r3
 8005b1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d903      	bls.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005b28:	e005      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b2a:	4b11      	ldr	r3, [pc, #68]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0eb      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005b36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d130      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b4e:	d115      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005b50:	4b07      	ldr	r3, [pc, #28]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005b58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b60:	091a      	lsrs	r2, r3, #4
 8005b62:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	4a02      	ldr	r2, [pc, #8]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6113      	str	r3, [r2, #16]
 8005b6c:	e00c      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005b6e:	bf00      	nop
 8005b70:	58024400 	.word	0x58024400
 8005b74:	58024800 	.word	0x58024800
 8005b78:	00ffffcf 	.word	0x00ffffcf
 8005b7c:	4bd4      	ldr	r3, [pc, #848]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	4ad3      	ldr	r2, [pc, #844]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b82:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b86:	6113      	str	r3, [r2, #16]
 8005b88:	4bd1      	ldr	r3, [pc, #836]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b8a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b98:	4acd      	ldr	r2, [pc, #820]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ba0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ba4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8005ba8:	e003      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005baa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	f002 0301 	and.w	r3, r2, #1
 8005bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f000 808b 	beq.w	8005cea <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005bd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bdc:	2b28      	cmp	r3, #40	@ 0x28
 8005bde:	d86b      	bhi.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005be0:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005cc1 	.word	0x08005cc1
 8005bec:	08005cb9 	.word	0x08005cb9
 8005bf0:	08005cb9 	.word	0x08005cb9
 8005bf4:	08005cb9 	.word	0x08005cb9
 8005bf8:	08005cb9 	.word	0x08005cb9
 8005bfc:	08005cb9 	.word	0x08005cb9
 8005c00:	08005cb9 	.word	0x08005cb9
 8005c04:	08005cb9 	.word	0x08005cb9
 8005c08:	08005c8d 	.word	0x08005c8d
 8005c0c:	08005cb9 	.word	0x08005cb9
 8005c10:	08005cb9 	.word	0x08005cb9
 8005c14:	08005cb9 	.word	0x08005cb9
 8005c18:	08005cb9 	.word	0x08005cb9
 8005c1c:	08005cb9 	.word	0x08005cb9
 8005c20:	08005cb9 	.word	0x08005cb9
 8005c24:	08005cb9 	.word	0x08005cb9
 8005c28:	08005ca3 	.word	0x08005ca3
 8005c2c:	08005cb9 	.word	0x08005cb9
 8005c30:	08005cb9 	.word	0x08005cb9
 8005c34:	08005cb9 	.word	0x08005cb9
 8005c38:	08005cb9 	.word	0x08005cb9
 8005c3c:	08005cb9 	.word	0x08005cb9
 8005c40:	08005cb9 	.word	0x08005cb9
 8005c44:	08005cb9 	.word	0x08005cb9
 8005c48:	08005cc1 	.word	0x08005cc1
 8005c4c:	08005cb9 	.word	0x08005cb9
 8005c50:	08005cb9 	.word	0x08005cb9
 8005c54:	08005cb9 	.word	0x08005cb9
 8005c58:	08005cb9 	.word	0x08005cb9
 8005c5c:	08005cb9 	.word	0x08005cb9
 8005c60:	08005cb9 	.word	0x08005cb9
 8005c64:	08005cb9 	.word	0x08005cb9
 8005c68:	08005cc1 	.word	0x08005cc1
 8005c6c:	08005cb9 	.word	0x08005cb9
 8005c70:	08005cb9 	.word	0x08005cb9
 8005c74:	08005cb9 	.word	0x08005cb9
 8005c78:	08005cb9 	.word	0x08005cb9
 8005c7c:	08005cb9 	.word	0x08005cb9
 8005c80:	08005cb9 	.word	0x08005cb9
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005cc1 	.word	0x08005cc1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c90:	3308      	adds	r3, #8
 8005c92:	2101      	movs	r1, #1
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 fe97 	bl	80079c8 <RCCEx_PLL2_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ca0:	e00f      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca6:	3328      	adds	r3, #40	@ 0x28
 8005ca8:	2101      	movs	r1, #1
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 ff3e 	bl	8007b2c <RCCEx_PLL3_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005cb6:	e004      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10b      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005cca:	4b81      	ldr	r3, [pc, #516]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cda:	4a7d      	ldr	r2, [pc, #500]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ce0:	e003      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ce6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	f002 0302 	and.w	r3, r2, #2
 8005cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d00:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d04:	460b      	mov	r3, r1
 8005d06:	4313      	orrs	r3, r2
 8005d08:	d042      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d10:	2b05      	cmp	r3, #5
 8005d12:	d825      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005d14:	a201      	add	r2, pc, #4	@ (adr r2, 8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d69 	.word	0x08005d69
 8005d20:	08005d35 	.word	0x08005d35
 8005d24:	08005d4b 	.word	0x08005d4b
 8005d28:	08005d69 	.word	0x08005d69
 8005d2c:	08005d69 	.word	0x08005d69
 8005d30:	08005d69 	.word	0x08005d69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d38:	3308      	adds	r3, #8
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f001 fe43 	bl	80079c8 <RCCEx_PLL2_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d48:	e00f      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d4e:	3328      	adds	r3, #40	@ 0x28
 8005d50:	2101      	movs	r1, #1
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 feea 	bl	8007b2c <RCCEx_PLL3_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d5e:	e004      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d66:	e000      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d72:	4b57      	ldr	r3, [pc, #348]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d76:	f023 0107 	bic.w	r1, r3, #7
 8005d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d80:	4a53      	ldr	r2, [pc, #332]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d82:	430b      	orrs	r3, r1
 8005d84:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d86:	e003      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d8c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f002 0304 	and.w	r3, r2, #4
 8005d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005da0:	2300      	movs	r3, #0
 8005da2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4313      	orrs	r3, r2
 8005dae:	d044      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005db0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005db8:	2b05      	cmp	r3, #5
 8005dba:	d825      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005e11 	.word	0x08005e11
 8005dc8:	08005ddd 	.word	0x08005ddd
 8005dcc:	08005df3 	.word	0x08005df3
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e11 	.word	0x08005e11
 8005dd8:	08005e11 	.word	0x08005e11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005de0:	3308      	adds	r3, #8
 8005de2:	2101      	movs	r1, #1
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 fdef 	bl	80079c8 <RCCEx_PLL2_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005df0:	e00f      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005df6:	3328      	adds	r3, #40	@ 0x28
 8005df8:	2101      	movs	r1, #1
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 fe96 	bl	8007b2c <RCCEx_PLL3_Config>
 8005e00:	4603      	mov	r3, r0
 8005e02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e06:	e004      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e0e:	e000      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10b      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1e:	f023 0107 	bic.w	r1, r3, #7
 8005e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e2a:	4a29      	ldr	r2, [pc, #164]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e30:	e003      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f002 0320 	and.w	r3, r2, #32
 8005e46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e54:	460b      	mov	r3, r1
 8005e56:	4313      	orrs	r3, r2
 8005e58:	d057      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e66:	d035      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e6c:	d82c      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e72:	d031      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e78:	d826      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e7e:	d02d      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005e80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e84:	d820      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e8a:	d012      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e90:	d81a      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d024      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e9a:	d115      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fd8f 	bl	80079c8 <RCCEx_PLL2_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005eb0:	e017      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eb6:	3328      	adds	r3, #40	@ 0x28
 8005eb8:	2102      	movs	r1, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 fe36 	bl	8007b2c <RCCEx_PLL3_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005ec6:	e00c      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ece:	e008      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005ed0:	58024400 	.word	0x58024400
        break;
 8005ed4:	bf00      	nop
 8005ed6:	e004      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ed8:	bf00      	nop
 8005eda:	e002      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005edc:	bf00      	nop
 8005ede:	e000      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eea:	4bc2      	ldr	r3, [pc, #776]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ef2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005efa:	4abe      	ldr	r2, [pc, #760]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f20:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d055      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f32:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f36:	d033      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005f38:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f3c:	d82c      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f42:	d02f      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f48:	d826      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f4e:	d02b      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005f50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f54:	d820      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f5a:	d012      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f60:	d81a      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d022      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f6a:	d115      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f70:	3308      	adds	r3, #8
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fd27 	bl	80079c8 <RCCEx_PLL2_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f80:	e015      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f86:	3328      	adds	r3, #40	@ 0x28
 8005f88:	2102      	movs	r1, #2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 fdce 	bl	8007b2c <RCCEx_PLL3_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f96:	e00a      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f9e:	e006      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fa0:	bf00      	nop
 8005fa2:	e004      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fa4:	bf00      	nop
 8005fa6:	e002      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fa8:	bf00      	nop
 8005faa:	e000      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fb6:	4b8f      	ldr	r3, [pc, #572]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fc6:	4a8b      	ldr	r2, [pc, #556]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fcc:	e003      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005fe2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fec:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	d055      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ffe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006002:	d033      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006004:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006008:	d82c      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800600a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800600e:	d02f      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006014:	d826      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006016:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800601a:	d02b      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800601c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006020:	d820      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006026:	d012      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006028:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800602c:	d81a      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d022      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006036:	d115      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800603c:	3308      	adds	r3, #8
 800603e:	2100      	movs	r1, #0
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fcc1 	bl	80079c8 <RCCEx_PLL2_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800604c:	e015      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800604e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006052:	3328      	adds	r3, #40	@ 0x28
 8006054:	2102      	movs	r1, #2
 8006056:	4618      	mov	r0, r3
 8006058:	f001 fd68 	bl	8007b2c <RCCEx_PLL3_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006062:	e00a      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800606a:	e006      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800606c:	bf00      	nop
 800606e:	e004      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006070:	bf00      	nop
 8006072:	e002      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006082:	4b5c      	ldr	r3, [pc, #368]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006086:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800608a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800608e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006092:	4a58      	ldr	r2, [pc, #352]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006094:	430b      	orrs	r3, r1
 8006096:	6593      	str	r3, [r2, #88]	@ 0x58
 8006098:	e003      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800609e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80060a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	f002 0308 	and.w	r3, r2, #8
 80060ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060b2:	2300      	movs	r3, #0
 80060b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060b8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80060bc:	460b      	mov	r3, r1
 80060be:	4313      	orrs	r3, r2
 80060c0:	d01e      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80060c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ce:	d10c      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d4:	3328      	adds	r3, #40	@ 0x28
 80060d6:	2102      	movs	r1, #2
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 fd27 	bl	8007b2c <RCCEx_PLL3_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80060ea:	4b42      	ldr	r3, [pc, #264]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fa:	4a3e      	ldr	r2, [pc, #248]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060fc:	430b      	orrs	r3, r1
 80060fe:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f002 0310 	and.w	r3, r2, #16
 800610c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006116:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800611a:	460b      	mov	r3, r1
 800611c:	4313      	orrs	r3, r2
 800611e:	d01e      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006124:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800612c:	d10c      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800612e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006132:	3328      	adds	r3, #40	@ 0x28
 8006134:	2102      	movs	r1, #2
 8006136:	4618      	mov	r0, r3
 8006138:	f001 fcf8 	bl	8007b2c <RCCEx_PLL3_Config>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006148:	4b2a      	ldr	r3, [pc, #168]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800614a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800614c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006154:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006158:	4a26      	ldr	r2, [pc, #152]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800615a:	430b      	orrs	r3, r1
 800615c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800615e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800616a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800616e:	2300      	movs	r3, #0
 8006170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006174:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006178:	460b      	mov	r3, r1
 800617a:	4313      	orrs	r3, r2
 800617c:	d040      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800617e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006182:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006186:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800618a:	d022      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800618c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006190:	d81b      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800619a:	d00b      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800619c:	e015      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800619e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061a2:	3308      	adds	r3, #8
 80061a4:	2100      	movs	r1, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 fc0e 	bl	80079c8 <RCCEx_PLL2_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80061b2:	e00f      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b8:	3328      	adds	r3, #40	@ 0x28
 80061ba:	2102      	movs	r1, #2
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 fcb5 	bl	8007b2c <RCCEx_PLL3_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80061c8:	e004      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061d0:	e000      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80061d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10d      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061dc:	4b05      	ldr	r3, [pc, #20]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80061e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061ec:	4a01      	ldr	r2, [pc, #4]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061ee:	430b      	orrs	r3, r1
 80061f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80061f2:	e005      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80061f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800620c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800620e:	2300      	movs	r3, #0
 8006210:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006212:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006216:	460b      	mov	r3, r1
 8006218:	4313      	orrs	r3, r2
 800621a:	d03b      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800621c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006224:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006228:	d01f      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800622a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800622e:	d818      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006230:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006234:	d003      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006236:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800623a:	d007      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800623c:	e011      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623e:	4b64      	ldr	r3, [pc, #400]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006242:	4a63      	ldr	r2, [pc, #396]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006248:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800624a:	e00f      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800624c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006250:	3328      	adds	r3, #40	@ 0x28
 8006252:	2101      	movs	r1, #1
 8006254:	4618      	mov	r0, r3
 8006256:	f001 fc69 	bl	8007b2c <RCCEx_PLL3_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006260:	e004      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006268:	e000      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800626a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10b      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006274:	4b56      	ldr	r3, [pc, #344]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006278:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800627c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006284:	4a52      	ldr	r2, [pc, #328]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006286:	430b      	orrs	r3, r1
 8006288:	6553      	str	r3, [r2, #84]	@ 0x54
 800628a:	e003      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006290:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80062a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80062a2:	2300      	movs	r3, #0
 80062a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80062a6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80062aa:	460b      	mov	r3, r1
 80062ac:	4313      	orrs	r3, r2
 80062ae:	d031      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80062b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80062ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062be:	d007      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80062c0:	e011      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c2:	4b43      	ldr	r3, [pc, #268]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c6:	4a42      	ldr	r2, [pc, #264]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80062ce:	e00e      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062d4:	3308      	adds	r3, #8
 80062d6:	2102      	movs	r1, #2
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 fb75 	bl	80079c8 <RCCEx_PLL2_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80062e4:	e003      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80062f6:	4b36      	ldr	r3, [pc, #216]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006304:	4a32      	ldr	r2, [pc, #200]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006306:	430b      	orrs	r3, r1
 8006308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800630a:	e003      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006310:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006322:	2300      	movs	r3, #0
 8006324:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006326:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800632a:	460b      	mov	r3, r1
 800632c:	4313      	orrs	r3, r2
 800632e:	d00c      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006334:	3328      	adds	r3, #40	@ 0x28
 8006336:	2102      	movs	r1, #2
 8006338:	4618      	mov	r0, r3
 800633a:	f001 fbf7 	bl	8007b2c <RCCEx_PLL3_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800634a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006356:	663b      	str	r3, [r7, #96]	@ 0x60
 8006358:	2300      	movs	r3, #0
 800635a:	667b      	str	r3, [r7, #100]	@ 0x64
 800635c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006360:	460b      	mov	r3, r1
 8006362:	4313      	orrs	r3, r2
 8006364:	d03a      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800636a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800636e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006372:	d018      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006378:	d811      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800637a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800637e:	d014      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006384:	d80b      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d011      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800638a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800638e:	d106      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006390:	4b0f      	ldr	r3, [pc, #60]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	4a0e      	ldr	r2, [pc, #56]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800639a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800639c:	e008      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80063a4:	e004      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80063a6:	bf00      	nop
 80063a8:	e002      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80063aa:	bf00      	nop
 80063ac:	e000      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80063ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063b8:	4b05      	ldr	r3, [pc, #20]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063c8:	4a01      	ldr	r2, [pc, #4]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063ca:	430b      	orrs	r3, r1
 80063cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80063ce:	e005      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80063d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80063dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80063e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063ea:	2300      	movs	r3, #0
 80063ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80063f2:	460b      	mov	r3, r1
 80063f4:	4313      	orrs	r3, r2
 80063f6:	d009      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063f8:	4baa      	ldr	r3, [pc, #680]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006400:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006406:	4aa7      	ldr	r2, [pc, #668]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006408:	430b      	orrs	r3, r1
 800640a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800640c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006418:	653b      	str	r3, [r7, #80]	@ 0x50
 800641a:	2300      	movs	r3, #0
 800641c:	657b      	str	r3, [r7, #84]	@ 0x54
 800641e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006422:	460b      	mov	r3, r1
 8006424:	4313      	orrs	r3, r2
 8006426:	d00a      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006428:	4b9e      	ldr	r3, [pc, #632]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006434:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006438:	4a9a      	ldr	r2, [pc, #616]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800643a:	430b      	orrs	r3, r1
 800643c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800643e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800644a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800644c:	2300      	movs	r3, #0
 800644e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006450:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006454:	460b      	mov	r3, r1
 8006456:	4313      	orrs	r3, r2
 8006458:	d009      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800645a:	4b92      	ldr	r3, [pc, #584]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800645c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800645e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006468:	4a8e      	ldr	r2, [pc, #568]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800646a:	430b      	orrs	r3, r1
 800646c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800646e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800647a:	643b      	str	r3, [r7, #64]	@ 0x40
 800647c:	2300      	movs	r3, #0
 800647e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006480:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006484:	460b      	mov	r3, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	d00e      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800648a:	4b86      	ldr	r3, [pc, #536]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	4a85      	ldr	r2, [pc, #532]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006490:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006494:	6113      	str	r3, [r2, #16]
 8006496:	4b83      	ldr	r3, [pc, #524]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006498:	6919      	ldr	r1, [r3, #16]
 800649a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800649e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80064a2:	4a80      	ldr	r2, [pc, #512]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80064a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80064b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064b6:	2300      	movs	r3, #0
 80064b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80064be:	460b      	mov	r3, r1
 80064c0:	4313      	orrs	r3, r2
 80064c2:	d009      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80064c4:	4b77      	ldr	r3, [pc, #476]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064c8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80064cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d2:	4a74      	ldr	r2, [pc, #464]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064d4:	430b      	orrs	r3, r1
 80064d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80064e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80064e6:	2300      	movs	r3, #0
 80064e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d00a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064f4:	4b6b      	ldr	r3, [pc, #428]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80064fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006504:	4a67      	ldr	r2, [pc, #412]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006506:	430b      	orrs	r3, r1
 8006508:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800650a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	2100      	movs	r1, #0
 8006514:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800651c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006520:	460b      	mov	r3, r1
 8006522:	4313      	orrs	r3, r2
 8006524:	d011      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006526:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800652a:	3308      	adds	r3, #8
 800652c:	2100      	movs	r1, #0
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fa4a 	bl	80079c8 <RCCEx_PLL2_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800653a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006542:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006546:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800654a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	2100      	movs	r1, #0
 8006554:	6239      	str	r1, [r7, #32]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
 800655c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006560:	460b      	mov	r3, r1
 8006562:	4313      	orrs	r3, r2
 8006564:	d011      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006566:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800656a:	3308      	adds	r3, #8
 800656c:	2101      	movs	r1, #1
 800656e:	4618      	mov	r0, r3
 8006570:	f001 fa2a 	bl	80079c8 <RCCEx_PLL2_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800657a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006582:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006586:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800658a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	2100      	movs	r1, #0
 8006594:	61b9      	str	r1, [r7, #24]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80065a0:	460b      	mov	r3, r1
 80065a2:	4313      	orrs	r3, r2
 80065a4:	d011      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065aa:	3308      	adds	r3, #8
 80065ac:	2102      	movs	r1, #2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 fa0a 	bl	80079c8 <RCCEx_PLL2_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80065ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80065ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	2100      	movs	r1, #0
 80065d4:	6139      	str	r1, [r7, #16]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80065e0:	460b      	mov	r3, r1
 80065e2:	4313      	orrs	r3, r2
 80065e4:	d011      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ea:	3328      	adds	r3, #40	@ 0x28
 80065ec:	2100      	movs	r1, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 fa9c 	bl	8007b2c <RCCEx_PLL3_Config>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80065fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006602:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006606:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800660a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	2100      	movs	r1, #0
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006620:	460b      	mov	r3, r1
 8006622:	4313      	orrs	r3, r2
 8006624:	d011      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006626:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800662a:	3328      	adds	r3, #40	@ 0x28
 800662c:	2101      	movs	r1, #1
 800662e:	4618      	mov	r0, r3
 8006630:	f001 fa7c 	bl	8007b2c <RCCEx_PLL3_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800663a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006642:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006646:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800664a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	2100      	movs	r1, #0
 8006654:	6039      	str	r1, [r7, #0]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006660:	460b      	mov	r3, r1
 8006662:	4313      	orrs	r3, r2
 8006664:	d011      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800666a:	3328      	adds	r3, #40	@ 0x28
 800666c:	2102      	movs	r1, #2
 800666e:	4618      	mov	r0, r3
 8006670:	f001 fa5c 	bl	8007b2c <RCCEx_PLL3_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800667a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006682:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006686:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800668a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
}
 8006698:	4618      	mov	r0, r3
 800669a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800669e:	46bd      	mov	sp, r7
 80066a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066a4:	58024400 	.word	0x58024400

080066a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b090      	sub	sp, #64	@ 0x40
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80066b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80066ba:	430b      	orrs	r3, r1
 80066bc:	f040 8094 	bne.w	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80066c0:	4b9e      	ldr	r3, [pc, #632]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	f200 8087 	bhi.w	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80066d2:	a201      	add	r2, pc, #4	@ (adr r2, 80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	080066ed 	.word	0x080066ed
 80066dc:	08006715 	.word	0x08006715
 80066e0:	0800673d 	.word	0x0800673d
 80066e4:	080067d9 	.word	0x080067d9
 80066e8:	08006765 	.word	0x08006765
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066ec:	4b93      	ldr	r3, [pc, #588]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066f8:	d108      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 f810 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006708:	f000 bd45 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006710:	f000 bd41 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006714:	4b89      	ldr	r3, [pc, #548]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800671c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006720:	d108      	bne.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006722:	f107 0318 	add.w	r3, r7, #24
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fd54 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006730:	f000 bd31 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006738:	f000 bd2d 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800673c:	4b7f      	ldr	r3, [pc, #508]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006748:	d108      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800674a:	f107 030c 	add.w	r3, r7, #12
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fe94 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006758:	f000 bd1d 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006760:	f000 bd19 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006764:	4b75      	ldr	r3, [pc, #468]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006768:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800676e:	4b73      	ldr	r3, [pc, #460]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b04      	cmp	r3, #4
 8006778:	d10c      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800677a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677c:	2b00      	cmp	r3, #0
 800677e:	d109      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006780:	4b6e      	ldr	r3, [pc, #440]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	08db      	lsrs	r3, r3, #3
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	4a6d      	ldr	r2, [pc, #436]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
 8006790:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006792:	e01f      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006794:	4b69      	ldr	r3, [pc, #420]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067a0:	d106      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80067a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067a8:	d102      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067aa:	4b66      	ldr	r3, [pc, #408]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80067ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ae:	e011      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067b0:	4b62      	ldr	r3, [pc, #392]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067bc:	d106      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80067be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067c4:	d102      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067c6:	4b60      	ldr	r3, [pc, #384]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80067c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ca:	e003      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80067d0:	f000 bce1 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067d4:	f000 bcdf 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067d8:	4b5c      	ldr	r3, [pc, #368]	@ (800694c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80067da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067dc:	f000 bcdb 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067e4:	f000 bcd7 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80067e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ec:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80067f0:	430b      	orrs	r3, r1
 80067f2:	f040 80ad 	bne.w	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80067f6:	4b51      	ldr	r3, [pc, #324]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067fa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80067fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006806:	d056      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800680e:	f200 8090 	bhi.w	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	2bc0      	cmp	r3, #192	@ 0xc0
 8006816:	f000 8088 	beq.w	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	2bc0      	cmp	r3, #192	@ 0xc0
 800681e:	f200 8088 	bhi.w	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	2b80      	cmp	r3, #128	@ 0x80
 8006826:	d032      	beq.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682a:	2b80      	cmp	r3, #128	@ 0x80
 800682c:	f200 8081 	bhi.w	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	2b40      	cmp	r3, #64	@ 0x40
 800683a:	d014      	beq.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800683c:	e079      	b.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800683e:	4b3f      	ldr	r3, [pc, #252]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800684a:	d108      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800684c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006850:	4618      	mov	r0, r3
 8006852:	f000 ff67 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800685a:	f000 bc9c 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006862:	f000 bc98 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006866:	4b35      	ldr	r3, [pc, #212]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800686e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006872:	d108      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006874:	f107 0318 	add.w	r3, r7, #24
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fcab 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006882:	f000 bc88 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800688a:	f000 bc84 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800688e:	4b2b      	ldr	r3, [pc, #172]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800689a:	d108      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800689c:	f107 030c 	add.w	r3, r7, #12
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fdeb 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068aa:	f000 bc74 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068b2:	f000 bc70 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068b6:	4b21      	ldr	r3, [pc, #132]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068c0:	4b1e      	ldr	r3, [pc, #120]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d10c      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80068cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068d2:	4b1a      	ldr	r3, [pc, #104]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	08db      	lsrs	r3, r3, #3
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	4a18      	ldr	r2, [pc, #96]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068de:	fa22 f303 	lsr.w	r3, r2, r3
 80068e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068e4:	e01f      	b.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068e6:	4b15      	ldr	r3, [pc, #84]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068f2:	d106      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80068f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068fa:	d102      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068fc:	4b11      	ldr	r3, [pc, #68]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80068fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006900:	e011      	b.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006902:	4b0e      	ldr	r3, [pc, #56]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800690a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800690e:	d106      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006916:	d102      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006918:	4b0b      	ldr	r3, [pc, #44]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800691c:	e003      	b.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006922:	f000 bc38 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006926:	f000 bc36 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800692a:	4b08      	ldr	r3, [pc, #32]	@ (800694c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800692c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800692e:	f000 bc32 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006936:	f000 bc2e 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800693a:	bf00      	nop
 800693c:	58024400 	.word	0x58024400
 8006940:	03d09000 	.word	0x03d09000
 8006944:	003d0900 	.word	0x003d0900
 8006948:	017d7840 	.word	0x017d7840
 800694c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006954:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006958:	430b      	orrs	r3, r1
 800695a:	f040 809c 	bne.w	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800695e:	4b9e      	ldr	r3, [pc, #632]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006962:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006966:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800696e:	d054      	beq.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006972:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006976:	f200 808b 	bhi.w	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006980:	f000 8083 	beq.w	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800698a:	f200 8081 	bhi.w	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006994:	d02f      	beq.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800699c:	d878      	bhi.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069aa:	d012      	beq.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80069ac:	e070      	b.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069ae:	4b8a      	ldr	r3, [pc, #552]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069ba:	d107      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 feaf 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ca:	e3e4      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d0:	e3e1      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069d2:	4b81      	ldr	r3, [pc, #516]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069de:	d107      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069e0:	f107 0318 	add.w	r3, r7, #24
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fbf5 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ee:	e3d2      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069f4:	e3cf      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069f6:	4b78      	ldr	r3, [pc, #480]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a02:	d107      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a04:	f107 030c 	add.w	r3, r7, #12
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fd37 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a12:	e3c0      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a18:	e3bd      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a1a:	4b6f      	ldr	r3, [pc, #444]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a24:	4b6c      	ldr	r3, [pc, #432]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d10c      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a36:	4b68      	ldr	r3, [pc, #416]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	08db      	lsrs	r3, r3, #3
 8006a3c:	f003 0303 	and.w	r3, r3, #3
 8006a40:	4a66      	ldr	r2, [pc, #408]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a42:	fa22 f303 	lsr.w	r3, r2, r3
 8006a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a48:	e01e      	b.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a4a:	4b63      	ldr	r3, [pc, #396]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a56:	d106      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a5e:	d102      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a60:	4b5f      	ldr	r3, [pc, #380]	@ (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a64:	e010      	b.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a66:	4b5c      	ldr	r3, [pc, #368]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a72:	d106      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a7a:	d102      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a7c:	4b59      	ldr	r3, [pc, #356]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a80:	e002      	b.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a86:	e386      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a88:	e385      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a8a:	4b57      	ldr	r3, [pc, #348]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a8e:	e382      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a94:	e37f      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a9a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	f040 80a7 	bne.w	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006aac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ab4:	d055      	beq.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006abc:	f200 8096 	bhi.w	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ac6:	f000 8084 	beq.w	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ad0:	f200 808c 	bhi.w	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ada:	d030      	beq.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ae2:	f200 8083 	bhi.w	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006af2:	d012      	beq.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006af4:	e07a      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006af6:	4b38      	ldr	r3, [pc, #224]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006afe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b02:	d107      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fe0b 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b12:	e340      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b18:	e33d      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b26:	d107      	bne.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b28:	f107 0318 	add.w	r3, r7, #24
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fb51 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b36:	e32e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3c:	e32b      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b3e:	4b26      	ldr	r3, [pc, #152]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b4a:	d107      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b4c:	f107 030c 	add.w	r3, r7, #12
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 fc93 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5a:	e31c      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b60:	e319      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b62:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d10c      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b7e:	4b16      	ldr	r3, [pc, #88]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	08db      	lsrs	r3, r3, #3
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	4a14      	ldr	r2, [pc, #80]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b90:	e01e      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b92:	4b11      	ldr	r3, [pc, #68]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b9e:	d106      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ba6:	d102      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bac:	e010      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bae:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bba:	d106      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc2:	d102      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bc4:	4b07      	ldr	r3, [pc, #28]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bc8:	e002      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006bce:	e2e2      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bd0:	e2e1      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bd2:	4b05      	ldr	r3, [pc, #20]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd6:	e2de      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bd8:	58024400 	.word	0x58024400
 8006bdc:	03d09000 	.word	0x03d09000
 8006be0:	003d0900 	.word	0x003d0900
 8006be4:	017d7840 	.word	0x017d7840
 8006be8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf0:	e2d1      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	f040 809c 	bne.w	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006c00:	4b93      	ldr	r3, [pc, #588]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c04:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006c08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c10:	d054      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c18:	f200 808b 	bhi.w	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c22:	f000 8083 	beq.w	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c2c:	f200 8081 	bhi.w	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c36:	d02f      	beq.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c3e:	d878      	bhi.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c4c:	d012      	beq.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006c4e:	e070      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c50:	4b7f      	ldr	r3, [pc, #508]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c5c:	d107      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fd5e 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c6c:	e293      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c72:	e290      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c74:	4b76      	ldr	r3, [pc, #472]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c80:	d107      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c82:	f107 0318 	add.w	r3, r7, #24
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 faa4 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c90:	e281      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c96:	e27e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c98:	4b6d      	ldr	r3, [pc, #436]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ca4:	d107      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca6:	f107 030c 	add.w	r3, r7, #12
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fbe6 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cb4:	e26f      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cba:	e26c      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cbc:	4b64      	ldr	r3, [pc, #400]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cc6:	4b62      	ldr	r3, [pc, #392]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d10c      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d109      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cd8:	4b5d      	ldr	r3, [pc, #372]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	08db      	lsrs	r3, r3, #3
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cea:	e01e      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cec:	4b58      	ldr	r3, [pc, #352]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf8:	d106      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d00:	d102      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d02:	4b55      	ldr	r3, [pc, #340]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d06:	e010      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d08:	4b51      	ldr	r3, [pc, #324]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d14:	d106      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d1c:	d102      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d22:	e002      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d28:	e235      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d2a:	e234      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d30:	e231      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d36:	e22e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d3c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006d40:	430b      	orrs	r3, r1
 8006d42:	f040 808f 	bne.w	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006d46:	4b42      	ldr	r3, [pc, #264]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d4a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d56:	d06b      	beq.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d5e:	d874      	bhi.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d66:	d056      	beq.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d6e:	d86c      	bhi.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d76:	d03b      	beq.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d7e:	d864      	bhi.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d86:	d021      	beq.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d8e:	d85c      	bhi.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d9c:	d004      	beq.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006d9e:	e054      	b.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006da0:	f7fe fa22 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8006da4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006da6:	e1f6      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006da8:	4b29      	ldr	r3, [pc, #164]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006db0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006db4:	d107      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006db6:	f107 0318 	add.w	r3, r7, #24
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fa0a 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dc4:	e1e7      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dca:	e1e4      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dcc:	4b20      	ldr	r3, [pc, #128]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dd8:	d107      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dda:	f107 030c 	add.w	r3, r7, #12
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fb4c 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de8:	e1d5      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dee:	e1d2      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006df0:	4b17      	ldr	r3, [pc, #92]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d109      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dfc:	4b14      	ldr	r3, [pc, #80]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	08db      	lsrs	r3, r3, #3
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	4a13      	ldr	r2, [pc, #76]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e08:	fa22 f303 	lsr.w	r3, r2, r3
 8006e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e0e:	e1c2      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e14:	e1bf      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e16:	4b0e      	ldr	r3, [pc, #56]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e22:	d102      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006e24:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e28:	e1b5      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e2e:	e1b2      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e30:	4b07      	ldr	r3, [pc, #28]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e3c:	d102      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006e3e:	4b07      	ldr	r3, [pc, #28]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e42:	e1a8      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e48:	e1a5      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e4e:	e1a2      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e50:	58024400 	.word	0x58024400
 8006e54:	03d09000 	.word	0x03d09000
 8006e58:	003d0900 	.word	0x003d0900
 8006e5c:	017d7840 	.word	0x017d7840
 8006e60:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e68:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	d173      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006e70:	4b9c      	ldr	r3, [pc, #624]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e80:	d02f      	beq.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e88:	d863      	bhi.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e96:	d012      	beq.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006e98:	e05b      	b.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e9a:	4b92      	ldr	r3, [pc, #584]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ea6:	d107      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea8:	f107 0318 	add.w	r3, r7, #24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f991 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb6:	e16e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ebc:	e16b      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ebe:	4b89      	ldr	r3, [pc, #548]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eca:	d107      	bne.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ecc:	f107 030c 	add.w	r3, r7, #12
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fad3 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eda:	e15c      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee0:	e159      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ee2:	4b80      	ldr	r3, [pc, #512]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ee6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006eea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006eec:	4b7d      	ldr	r3, [pc, #500]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d10c      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d109      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006efe:	4b79      	ldr	r3, [pc, #484]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	08db      	lsrs	r3, r3, #3
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	4a77      	ldr	r2, [pc, #476]	@ (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f10:	e01e      	b.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f12:	4b74      	ldr	r3, [pc, #464]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f1e:	d106      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f26:	d102      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f28:	4b70      	ldr	r3, [pc, #448]	@ (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f2c:	e010      	b.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f3a:	d106      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f42:	d102      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f44:	4b6a      	ldr	r3, [pc, #424]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f48:	e002      	b.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f4e:	e122      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f50:	e121      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f56:	e11e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f5c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006f60:	430b      	orrs	r3, r1
 8006f62:	d133      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006f64:	4b5f      	ldr	r3, [pc, #380]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f7a:	d012      	beq.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006f7c:	e023      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f7e:	4b59      	ldr	r3, [pc, #356]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fbc7 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f9a:	e0fc      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa0:	e0f9      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fa2:	4b50      	ldr	r3, [pc, #320]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006faa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fae:	d107      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb0:	f107 0318 	add.w	r3, r7, #24
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f90d 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fbe:	e0ea      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc4:	e0e7      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fca:	e0e4      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	f040 808d 	bne.w	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006fda:	4b42      	ldr	r3, [pc, #264]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fde:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006fe2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fea:	d06b      	beq.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ff2:	d874      	bhi.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffa:	d056      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007002:	d86c      	bhi.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007006:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800700a:	d03b      	beq.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800700c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007012:	d864      	bhi.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800701a:	d021      	beq.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800701c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007022:	d85c      	bhi.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800702a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007030:	d004      	beq.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007032:	e054      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007034:	f000 f8b8 	bl	80071a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007038:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800703a:	e0ac      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800703c:	4b29      	ldr	r3, [pc, #164]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007044:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007048:	d107      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800704a:	f107 0318 	add.w	r3, r7, #24
 800704e:	4618      	mov	r0, r3
 8007050:	f000 f8c0 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007058:	e09d      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705e:	e09a      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007060:	4b20      	ldr	r3, [pc, #128]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800706c:	d107      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800706e:	f107 030c 	add.w	r3, r7, #12
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fa02 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800707c:	e08b      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007082:	e088      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007084:	4b17      	ldr	r3, [pc, #92]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b04      	cmp	r3, #4
 800708e:	d109      	bne.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007090:	4b14      	ldr	r3, [pc, #80]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	08db      	lsrs	r3, r3, #3
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	4a13      	ldr	r2, [pc, #76]	@ (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800709c:	fa22 f303 	lsr.w	r3, r2, r3
 80070a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070a2:	e078      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070a8:	e075      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80070aa:	4b0e      	ldr	r3, [pc, #56]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070b6:	d102      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80070b8:	4b0c      	ldr	r3, [pc, #48]	@ (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80070ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070bc:	e06b      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c2:	e068      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070c4:	4b07      	ldr	r3, [pc, #28]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070d0:	d102      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80070d2:	4b07      	ldr	r3, [pc, #28]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80070d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d6:	e05e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070dc:	e05b      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e2:	e058      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070e4:	58024400 	.word	0x58024400
 80070e8:	03d09000 	.word	0x03d09000
 80070ec:	003d0900 	.word	0x003d0900
 80070f0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80070f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80070fc:	430b      	orrs	r3, r1
 80070fe:	d148      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007100:	4b27      	ldr	r3, [pc, #156]	@ (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007104:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007108:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007110:	d02a      	beq.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007118:	d838      	bhi.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007126:	d00d      	beq.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007128:	e030      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800712a:	4b1d      	ldr	r3, [pc, #116]	@ (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007136:	d102      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007138:	4b1a      	ldr	r3, [pc, #104]	@ (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800713a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800713c:	e02b      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007142:	e028      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007144:	4b16      	ldr	r3, [pc, #88]	@ (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800714c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007150:	d107      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fae4 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007160:	e019      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007166:	e016      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007168:	4b0d      	ldr	r3, [pc, #52]	@ (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007174:	d107      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007176:	f107 0318 	add.w	r3, r7, #24
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f82a 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007184:	e007      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800718a:	e004      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007190:	e001      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007198:	4618      	mov	r0, r3
 800719a:	3740      	adds	r7, #64	@ 0x40
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	58024400 	.word	0x58024400
 80071a4:	017d7840 	.word	0x017d7840

080071a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80071ac:	f7fd ffec 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80071b0:	4602      	mov	r2, r0
 80071b2:	4b06      	ldr	r3, [pc, #24]	@ (80071cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	091b      	lsrs	r3, r3, #4
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	4904      	ldr	r1, [pc, #16]	@ (80071d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071be:	5ccb      	ldrb	r3, [r1, r3]
 80071c0:	f003 031f 	and.w	r3, r3, #31
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	58024400 	.word	0x58024400
 80071d0:	0800b1fc 	.word	0x0800b1fc

080071d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b089      	sub	sp, #36	@ 0x24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071dc:	4ba1      	ldr	r3, [pc, #644]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80071e6:	4b9f      	ldr	r3, [pc, #636]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ea:	0b1b      	lsrs	r3, r3, #12
 80071ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071f2:	4b9c      	ldr	r3, [pc, #624]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f6:	091b      	lsrs	r3, r3, #4
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80071fe:	4b99      	ldr	r3, [pc, #612]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007202:	08db      	lsrs	r3, r3, #3
 8007204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	fb02 f303 	mul.w	r3, r2, r3
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8111 	beq.w	8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b02      	cmp	r3, #2
 8007226:	f000 8083 	beq.w	8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b02      	cmp	r3, #2
 800722e:	f200 80a1 	bhi.w	8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d056      	beq.n	80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800723e:	e099      	b.n	8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007240:	4b88      	ldr	r3, [pc, #544]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d02d      	beq.n	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800724c:	4b85      	ldr	r3, [pc, #532]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	08db      	lsrs	r3, r3, #3
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	4a84      	ldr	r2, [pc, #528]	@ (8007468 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007258:	fa22 f303 	lsr.w	r3, r2, r3
 800725c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007276:	4b7b      	ldr	r3, [pc, #492]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007286:	ed97 6a03 	vldr	s12, [r7, #12]
 800728a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800746c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800728e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800729a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072a6:	e087      	b.n	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007470 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80072b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800746c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ea:	e065      	b.n	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fe:	4b59      	ldr	r3, [pc, #356]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007312:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800746c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800732e:	e043      	b.n	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800733e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007342:	4b48      	ldr	r3, [pc, #288]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007352:	ed97 6a03 	vldr	s12, [r7, #12]
 8007356:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800746c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800735a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007372:	e021      	b.n	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007386:	4b37      	ldr	r3, [pc, #220]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	ed97 6a03 	vldr	s12, [r7, #12]
 800739a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800746c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800739e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80073b8:	4b2a      	ldr	r3, [pc, #168]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073bc:	0a5b      	lsrs	r3, r3, #9
 80073be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073de:	ee17 2a90 	vmov	r2, s15
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80073e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ea:	0c1b      	lsrs	r3, r3, #16
 80073ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007400:	edd7 6a07 	vldr	s13, [r7, #28]
 8007404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740c:	ee17 2a90 	vmov	r2, s15
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007414:	4b13      	ldr	r3, [pc, #76]	@ (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007418:	0e1b      	lsrs	r3, r3, #24
 800741a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800742a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800742e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743a:	ee17 2a90 	vmov	r2, s15
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007442:	e008      	b.n	8007456 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	609a      	str	r2, [r3, #8]
}
 8007456:	bf00      	nop
 8007458:	3724      	adds	r7, #36	@ 0x24
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	58024400 	.word	0x58024400
 8007468:	03d09000 	.word	0x03d09000
 800746c:	46000000 	.word	0x46000000
 8007470:	4c742400 	.word	0x4c742400
 8007474:	4a742400 	.word	0x4a742400
 8007478:	4bbebc20 	.word	0x4bbebc20

0800747c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800747c:	b480      	push	{r7}
 800747e:	b089      	sub	sp, #36	@ 0x24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007484:	4ba1      	ldr	r3, [pc, #644]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800748e:	4b9f      	ldr	r3, [pc, #636]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007492:	0d1b      	lsrs	r3, r3, #20
 8007494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007498:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800749a:	4b9c      	ldr	r3, [pc, #624]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80074a6:	4b99      	ldr	r3, [pc, #612]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074aa:	08db      	lsrs	r3, r3, #3
 80074ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8111 	beq.w	80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	f000 8083 	beq.w	80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	f200 80a1 	bhi.w	800761c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d056      	beq.n	8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074e6:	e099      	b.n	800761c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074e8:	4b88      	ldr	r3, [pc, #544]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d02d      	beq.n	8007550 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074f4:	4b85      	ldr	r3, [pc, #532]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	08db      	lsrs	r3, r3, #3
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	4a84      	ldr	r2, [pc, #528]	@ (8007710 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007500:	fa22 f303 	lsr.w	r3, r2, r3
 8007504:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	ee07 3a90 	vmov	s15, r3
 800750c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751e:	4b7b      	ldr	r3, [pc, #492]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007532:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800754e:	e087      	b.n	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007718 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800755e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007562:	4b6a      	ldr	r3, [pc, #424]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007572:	ed97 6a03 	vldr	s12, [r7, #12]
 8007576:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800757a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007592:	e065      	b.n	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800771c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b59      	ldr	r3, [pc, #356]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075d6:	e043      	b.n	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ea:	4b48      	ldr	r3, [pc, #288]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800761a:	e021      	b.n	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800771c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800762a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762e:	4b37      	ldr	r3, [pc, #220]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007642:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800765e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007660:	4b2a      	ldr	r3, [pc, #168]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007664:	0a5b      	lsrs	r3, r3, #9
 8007666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800767a:	edd7 6a07 	vldr	s13, [r7, #28]
 800767e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007686:	ee17 2a90 	vmov	r2, s15
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800768e:	4b1f      	ldr	r3, [pc, #124]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007692:	0c1b      	lsrs	r3, r3, #16
 8007694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007698:	ee07 3a90 	vmov	s15, r3
 800769c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b4:	ee17 2a90 	vmov	r2, s15
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80076bc:	4b13      	ldr	r3, [pc, #76]	@ (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c0:	0e1b      	lsrs	r3, r3, #24
 80076c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e2:	ee17 2a90 	vmov	r2, s15
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076ea:	e008      	b.n	80076fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	609a      	str	r2, [r3, #8]
}
 80076fe:	bf00      	nop
 8007700:	3724      	adds	r7, #36	@ 0x24
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	58024400 	.word	0x58024400
 8007710:	03d09000 	.word	0x03d09000
 8007714:	46000000 	.word	0x46000000
 8007718:	4c742400 	.word	0x4c742400
 800771c:	4a742400 	.word	0x4a742400
 8007720:	4bbebc20 	.word	0x4bbebc20

08007724 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007724:	b480      	push	{r7}
 8007726:	b089      	sub	sp, #36	@ 0x24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800772c:	4ba0      	ldr	r3, [pc, #640]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800772e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007736:	4b9e      	ldr	r3, [pc, #632]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773a:	091b      	lsrs	r3, r3, #4
 800773c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007740:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007742:	4b9b      	ldr	r3, [pc, #620]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800774c:	4b98      	ldr	r3, [pc, #608]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800774e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007750:	08db      	lsrs	r3, r3, #3
 8007752:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	fb02 f303 	mul.w	r3, r2, r3
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007764:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8111 	beq.w	8007992 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b02      	cmp	r3, #2
 8007774:	f000 8083 	beq.w	800787e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b02      	cmp	r3, #2
 800777c:	f200 80a1 	bhi.w	80078c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d056      	beq.n	800783a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800778c:	e099      	b.n	80078c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800778e:	4b88      	ldr	r3, [pc, #544]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d02d      	beq.n	80077f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800779a:	4b85      	ldr	r3, [pc, #532]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	08db      	lsrs	r3, r3, #3
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	4a83      	ldr	r2, [pc, #524]	@ (80079b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80077a6:	fa22 f303 	lsr.w	r3, r2, r3
 80077aa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	ee07 3a90 	vmov	s15, r3
 80077bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c4:	4b7a      	ldr	r3, [pc, #488]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80079b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077f4:	e087      	b.n	8007906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	ee07 3a90 	vmov	s15, r3
 80077fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007800:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80079bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007808:	4b69      	ldr	r3, [pc, #420]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800780a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007810:	ee07 3a90 	vmov	s15, r3
 8007814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007818:	ed97 6a03 	vldr	s12, [r7, #12]
 800781c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80079b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007828:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800782c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007834:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007838:	e065      	b.n	8007906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	ee07 3a90 	vmov	s15, r3
 8007840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007844:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80079c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784c:	4b58      	ldr	r3, [pc, #352]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800784e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007854:	ee07 3a90 	vmov	s15, r3
 8007858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007860:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80079b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007878:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800787c:	e043      	b.n	8007906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007888:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80079c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800788c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007890:	4b47      	ldr	r3, [pc, #284]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007898:	ee07 3a90 	vmov	s15, r3
 800789c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80079b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c0:	e021      	b.n	8007906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	ee07 3a90 	vmov	s15, r3
 80078c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078cc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80079bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80078d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d4:	4b36      	ldr	r3, [pc, #216]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078dc:	ee07 3a90 	vmov	s15, r3
 80078e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80079b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007904:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007906:	4b2a      	ldr	r3, [pc, #168]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790a:	0a5b      	lsrs	r3, r3, #9
 800790c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007910:	ee07 3a90 	vmov	s15, r3
 8007914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007918:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800791c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007920:	edd7 6a07 	vldr	s13, [r7, #28]
 8007924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800792c:	ee17 2a90 	vmov	r2, s15
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007934:	4b1e      	ldr	r3, [pc, #120]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007938:	0c1b      	lsrs	r3, r3, #16
 800793a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007946:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800794a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800794e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800795a:	ee17 2a90 	vmov	r2, s15
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007962:	4b13      	ldr	r3, [pc, #76]	@ (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007966:	0e1b      	lsrs	r3, r3, #24
 8007968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007974:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007978:	ee37 7a87 	vadd.f32	s14, s15, s14
 800797c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007988:	ee17 2a90 	vmov	r2, s15
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007990:	e008      	b.n	80079a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	609a      	str	r2, [r3, #8]
}
 80079a4:	bf00      	nop
 80079a6:	3724      	adds	r7, #36	@ 0x24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	58024400 	.word	0x58024400
 80079b4:	03d09000 	.word	0x03d09000
 80079b8:	46000000 	.word	0x46000000
 80079bc:	4c742400 	.word	0x4c742400
 80079c0:	4a742400 	.word	0x4a742400
 80079c4:	4bbebc20 	.word	0x4bbebc20

080079c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079d6:	4b53      	ldr	r3, [pc, #332]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d101      	bne.n	80079e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e099      	b.n	8007b1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a4e      	ldr	r2, [pc, #312]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 80079ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f2:	f7f9 fa9b 	bl	8000f2c <HAL_GetTick>
 80079f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079f8:	e008      	b.n	8007a0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079fa:	f7f9 fa97 	bl	8000f2c <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e086      	b.n	8007b1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a0c:	4b45      	ldr	r3, [pc, #276]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f0      	bne.n	80079fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a18:	4b42      	ldr	r3, [pc, #264]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	031b      	lsls	r3, r3, #12
 8007a26:	493f      	ldr	r1, [pc, #252]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	025b      	lsls	r3, r3, #9
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	041b      	lsls	r3, r3, #16
 8007a4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	061b      	lsls	r3, r3, #24
 8007a58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a5c:	4931      	ldr	r1, [pc, #196]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a62:	4b30      	ldr	r3, [pc, #192]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	492d      	ldr	r1, [pc, #180]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a74:	4b2b      	ldr	r3, [pc, #172]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a78:	f023 0220 	bic.w	r2, r3, #32
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	4928      	ldr	r1, [pc, #160]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a86:	4b27      	ldr	r3, [pc, #156]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8a:	4a26      	ldr	r2, [pc, #152]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a8c:	f023 0310 	bic.w	r3, r3, #16
 8007a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a92:	4b24      	ldr	r3, [pc, #144]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a96:	4b24      	ldr	r3, [pc, #144]	@ (8007b28 <RCCEx_PLL2_Config+0x160>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	69d2      	ldr	r2, [r2, #28]
 8007a9e:	00d2      	lsls	r2, r2, #3
 8007aa0:	4920      	ldr	r1, [pc, #128]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007aac:	f043 0310 	orr.w	r3, r3, #16
 8007ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d106      	bne.n	8007ac6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abc:	4a19      	ldr	r2, [pc, #100]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007abe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ac4:	e00f      	b.n	8007ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d106      	bne.n	8007ada <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007acc:	4b15      	ldr	r3, [pc, #84]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	4a14      	ldr	r2, [pc, #80]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ad8:	e005      	b.n	8007ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ada:	4b12      	ldr	r3, [pc, #72]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ade:	4a11      	ldr	r2, [pc, #68]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007ae0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a0e      	ldr	r2, [pc, #56]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007aec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007af2:	f7f9 fa1b 	bl	8000f2c <HAL_GetTick>
 8007af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007af8:	e008      	b.n	8007b0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007afa:	f7f9 fa17 	bl	8000f2c <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e006      	b.n	8007b1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b0c:	4b05      	ldr	r3, [pc, #20]	@ (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f0      	beq.n	8007afa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	58024400 	.word	0x58024400
 8007b28:	ffff0007 	.word	0xffff0007

08007b2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b3a:	4b53      	ldr	r3, [pc, #332]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d101      	bne.n	8007b4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e099      	b.n	8007c7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a4e      	ldr	r2, [pc, #312]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b56:	f7f9 f9e9 	bl	8000f2c <HAL_GetTick>
 8007b5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b5c:	e008      	b.n	8007b70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b5e:	f7f9 f9e5 	bl	8000f2c <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d901      	bls.n	8007b70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e086      	b.n	8007c7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b70:	4b45      	ldr	r3, [pc, #276]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1f0      	bne.n	8007b5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b7c:	4b42      	ldr	r3, [pc, #264]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	051b      	lsls	r3, r3, #20
 8007b8a:	493f      	ldr	r1, [pc, #252]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	025b      	lsls	r3, r3, #9
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	041b      	lsls	r3, r3, #16
 8007bae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	061b      	lsls	r3, r3, #24
 8007bbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007bc0:	4931      	ldr	r1, [pc, #196]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007bc6:	4b30      	ldr	r3, [pc, #192]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	492d      	ldr	r1, [pc, #180]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bdc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	4928      	ldr	r1, [pc, #160]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007bea:	4b27      	ldr	r3, [pc, #156]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bee:	4a26      	ldr	r2, [pc, #152]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bf6:	4b24      	ldr	r3, [pc, #144]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bfa:	4b24      	ldr	r3, [pc, #144]	@ (8007c8c <RCCEx_PLL3_Config+0x160>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	69d2      	ldr	r2, [r2, #28]
 8007c02:	00d2      	lsls	r2, r2, #3
 8007c04:	4920      	ldr	r1, [pc, #128]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	4a19      	ldr	r2, [pc, #100]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c28:	e00f      	b.n	8007c4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d106      	bne.n	8007c3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c30:	4b15      	ldr	r3, [pc, #84]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c34:	4a14      	ldr	r2, [pc, #80]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c3c:	e005      	b.n	8007c4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c3e:	4b12      	ldr	r3, [pc, #72]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c42:	4a11      	ldr	r2, [pc, #68]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c56:	f7f9 f969 	bl	8000f2c <HAL_GetTick>
 8007c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c5c:	e008      	b.n	8007c70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c5e:	f7f9 f965 	bl	8000f2c <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d901      	bls.n	8007c70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e006      	b.n	8007c7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c70:	4b05      	ldr	r3, [pc, #20]	@ (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f0      	beq.n	8007c5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	58024400 	.word	0x58024400
 8007c8c:	ffff0007 	.word	0xffff0007

08007c90 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	@ 0x28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e28e      	b.n	80081c0 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007ca2:	f7f9 f94f 	bl	8000f44 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d113      	bne.n	8007cd8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a96      	ldr	r2, [pc, #600]	@ (8007f10 <HAL_SAI_Init+0x280>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d004      	beq.n	8007cc4 <HAL_SAI_Init+0x34>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a95      	ldr	r2, [pc, #596]	@ (8007f14 <HAL_SAI_Init+0x284>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d107      	bne.n	8007cd4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d103      	bne.n	8007cd4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e273      	b.n	80081c0 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a8c      	ldr	r2, [pc, #560]	@ (8007f10 <HAL_SAI_Init+0x280>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d004      	beq.n	8007cec <HAL_SAI_Init+0x5c>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a8c      	ldr	r2, [pc, #560]	@ (8007f18 <HAL_SAI_Init+0x288>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d102      	bne.n	8007cf2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007cec:	4b8b      	ldr	r3, [pc, #556]	@ (8007f1c <HAL_SAI_Init+0x28c>)
 8007cee:	61bb      	str	r3, [r7, #24]
 8007cf0:	e028      	b.n	8007d44 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a8a      	ldr	r2, [pc, #552]	@ (8007f20 <HAL_SAI_Init+0x290>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d004      	beq.n	8007d06 <HAL_SAI_Init+0x76>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a88      	ldr	r2, [pc, #544]	@ (8007f24 <HAL_SAI_Init+0x294>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d102      	bne.n	8007d0c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007d06:	4b88      	ldr	r3, [pc, #544]	@ (8007f28 <HAL_SAI_Init+0x298>)
 8007d08:	61bb      	str	r3, [r7, #24]
 8007d0a:	e01b      	b.n	8007d44 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a86      	ldr	r2, [pc, #536]	@ (8007f2c <HAL_SAI_Init+0x29c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d004      	beq.n	8007d20 <HAL_SAI_Init+0x90>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a85      	ldr	r2, [pc, #532]	@ (8007f30 <HAL_SAI_Init+0x2a0>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d102      	bne.n	8007d26 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007d20:	4b84      	ldr	r3, [pc, #528]	@ (8007f34 <HAL_SAI_Init+0x2a4>)
 8007d22:	61bb      	str	r3, [r7, #24]
 8007d24:	e00e      	b.n	8007d44 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a7a      	ldr	r2, [pc, #488]	@ (8007f14 <HAL_SAI_Init+0x284>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_SAI_Init+0xaa>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a80      	ldr	r2, [pc, #512]	@ (8007f38 <HAL_SAI_Init+0x2a8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d102      	bne.n	8007d40 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007d3a:	4b80      	ldr	r3, [pc, #512]	@ (8007f3c <HAL_SAI_Init+0x2ac>)
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	e001      	b.n	8007d44 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e23d      	b.n	80081c0 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d106      	bne.n	8007d5e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7f8 febd 	bl	8000ad8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fd5e 	bl	8008820 <SAI_Disable>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e228      	b.n	80081c0 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2202      	movs	r2, #2
 8007d72:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d00c      	beq.n	8007d98 <HAL_SAI_Init+0x108>
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d80d      	bhi.n	8007d9e <HAL_SAI_Init+0x10e>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <HAL_SAI_Init+0xfc>
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d003      	beq.n	8007d92 <HAL_SAI_Init+0x102>
 8007d8a:	e008      	b.n	8007d9e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007d90:	e008      	b.n	8007da4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007d92:	2310      	movs	r3, #16
 8007d94:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007d96:	e005      	b.n	8007da4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007d98:	2320      	movs	r3, #32
 8007d9a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007d9c:	e002      	b.n	8007da4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007da2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d832      	bhi.n	8007e12 <HAL_SAI_Init+0x182>
 8007dac:	a201      	add	r2, pc, #4	@ (adr r2, 8007db4 <HAL_SAI_Init+0x124>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007dcd 	.word	0x08007dcd
 8007db8:	08007dd3 	.word	0x08007dd3
 8007dbc:	08007ddb 	.word	0x08007ddb
 8007dc0:	08007de3 	.word	0x08007de3
 8007dc4:	08007df3 	.word	0x08007df3
 8007dc8:	08007e03 	.word	0x08007e03
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61fb      	str	r3, [r7, #28]
      break;
 8007dd0:	e022      	b.n	8007e18 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dd6:	61fb      	str	r3, [r7, #28]
      break;
 8007dd8:	e01e      	b.n	8007e18 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007dda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007dde:	61fb      	str	r3, [r7, #28]
      break;
 8007de0:	e01a      	b.n	8007e18 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007de2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007de6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007df0:	e012      	b.n	8007e18 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007df2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007df6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfa:	f043 0302 	orr.w	r3, r3, #2
 8007dfe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007e00:	e00a      	b.n	8007e18 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e06:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	f043 0303 	orr.w	r3, r3, #3
 8007e0e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007e10:	e002      	b.n	8007e18 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
      break;
 8007e16:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e1c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 80c5 	beq.w	8007fb2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a37      	ldr	r2, [pc, #220]	@ (8007f10 <HAL_SAI_Init+0x280>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d004      	beq.n	8007e40 <HAL_SAI_Init+0x1b0>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a37      	ldr	r2, [pc, #220]	@ (8007f18 <HAL_SAI_Init+0x288>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d106      	bne.n	8007e4e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007e40:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007e44:	f04f 0100 	mov.w	r1, #0
 8007e48:	f7fe fc2e 	bl	80066a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e4c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a33      	ldr	r2, [pc, #204]	@ (8007f20 <HAL_SAI_Init+0x290>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d004      	beq.n	8007e62 <HAL_SAI_Init+0x1d2>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a31      	ldr	r2, [pc, #196]	@ (8007f24 <HAL_SAI_Init+0x294>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d106      	bne.n	8007e70 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007e62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007e66:	f04f 0100 	mov.w	r1, #0
 8007e6a:	f7fe fc1d 	bl	80066a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e6e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a2d      	ldr	r2, [pc, #180]	@ (8007f2c <HAL_SAI_Init+0x29c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <HAL_SAI_Init+0x1f4>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f30 <HAL_SAI_Init+0x2a0>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d106      	bne.n	8007e92 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007e84:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007e88:	f04f 0100 	mov.w	r1, #0
 8007e8c:	f7fe fc0c 	bl	80066a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e90:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a1f      	ldr	r2, [pc, #124]	@ (8007f14 <HAL_SAI_Init+0x284>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d106      	bne.n	8007eaa <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007e9c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007ea0:	f04f 0100 	mov.w	r1, #0
 8007ea4:	f7fe fc00 	bl	80066a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ea8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a22      	ldr	r2, [pc, #136]	@ (8007f38 <HAL_SAI_Init+0x2a8>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d106      	bne.n	8007ec2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007eb4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007eb8:	f04f 0100 	mov.w	r1, #0
 8007ebc:	f7fe fbf4 	bl	80066a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ec0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007eca:	d139      	bne.n	8007f40 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d102      	bne.n	8007eda <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007ed4:	2340      	movs	r3, #64	@ 0x40
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e00a      	b.n	8007ef0 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ede:	2b08      	cmp	r3, #8
 8007ee0:	d103      	bne.n	8007eea <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007ee2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	e002      	b.n	8007ef0 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eee:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	4619      	mov	r1, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	fb02 f303 	mul.w	r3, r2, r3
 8007f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f0a:	613b      	str	r3, [r7, #16]
 8007f0c:	e030      	b.n	8007f70 <HAL_SAI_Init+0x2e0>
 8007f0e:	bf00      	nop
 8007f10:	40015804 	.word	0x40015804
 8007f14:	58005404 	.word	0x58005404
 8007f18:	40015824 	.word	0x40015824
 8007f1c:	40015800 	.word	0x40015800
 8007f20:	40015c04 	.word	0x40015c04
 8007f24:	40015c24 	.word	0x40015c24
 8007f28:	40015c00 	.word	0x40015c00
 8007f2c:	40016004 	.word	0x40016004
 8007f30:	40016024 	.word	0x40016024
 8007f34:	40016000 	.word	0x40016000
 8007f38:	58005424 	.word	0x58005424
 8007f3c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f48:	d101      	bne.n	8007f4e <HAL_SAI_Init+0x2be>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e000      	b.n	8007f50 <HAL_SAI_Init+0x2c0>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	fb02 f303 	mul.w	r3, r2, r3
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f6e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4a95      	ldr	r2, [pc, #596]	@ (80081c8 <HAL_SAI_Init+0x538>)
 8007f74:	fba2 2303 	umull	r2, r3, r2, r3
 8007f78:	08da      	lsrs	r2, r3, #3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007f7e:	6939      	ldr	r1, [r7, #16]
 8007f80:	4b91      	ldr	r3, [pc, #580]	@ (80081c8 <HAL_SAI_Init+0x538>)
 8007f82:	fba3 2301 	umull	r2, r3, r3, r1
 8007f86:	08da      	lsrs	r2, r3, #3
 8007f88:	4613      	mov	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	1aca      	subs	r2, r1, r3
 8007f92:	2a08      	cmp	r2, #8
 8007f94:	d904      	bls.n	8007fa0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d104      	bne.n	8007fb2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fac:	085a      	lsrs	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_SAI_Init+0x332>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d109      	bne.n	8007fd6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d101      	bne.n	8007fce <HAL_SAI_Init+0x33e>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e001      	b.n	8007fd2 <HAL_SAI_Init+0x342>
 8007fce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fd2:	623b      	str	r3, [r7, #32]
 8007fd4:	e008      	b.n	8007fe8 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d102      	bne.n	8007fe4 <HAL_SAI_Init+0x354>
 8007fde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fe2:	e000      	b.n	8007fe6 <HAL_SAI_Init+0x356>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007fe8:	f7f8 ffac 	bl	8000f44 <HAL_GetREVID>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ff2:	d331      	bcc.n	8008058 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6819      	ldr	r1, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	4b73      	ldr	r3, [pc, #460]	@ (80081cc <HAL_SAI_Init+0x53c>)
 8008000:	400b      	ands	r3, r1
 8008002:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6819      	ldr	r1, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008012:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008018:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800801e:	431a      	orrs	r2, r3
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800802c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008038:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803e:	051b      	lsls	r3, r3, #20
 8008040:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008046:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e02d      	b.n	80080b4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6819      	ldr	r1, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b5b      	ldr	r3, [pc, #364]	@ (80081d0 <HAL_SAI_Init+0x540>)
 8008064:	400b      	ands	r3, r1
 8008066:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6819      	ldr	r1, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008076:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800807c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008082:	431a      	orrs	r2, r3
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008090:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800809c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a2:	051b      	lsls	r3, r3, #20
 80080a4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080aa:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6859      	ldr	r1, [r3, #4]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	4b45      	ldr	r3, [pc, #276]	@ (80081d4 <HAL_SAI_Init+0x544>)
 80080c0:	400b      	ands	r3, r1
 80080c2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6859      	ldr	r1, [r3, #4]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69da      	ldr	r2, [r3, #28]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6899      	ldr	r1, [r3, #8]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	4b3a      	ldr	r3, [pc, #232]	@ (80081d8 <HAL_SAI_Init+0x548>)
 80080ee:	400b      	ands	r3, r1
 80080f0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6899      	ldr	r1, [r3, #8]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008102:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8008108:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800810e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008114:	3b01      	subs	r3, #1
 8008116:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008118:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68d9      	ldr	r1, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008130:	400b      	ands	r3, r1
 8008132:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68d9      	ldr	r1, [r3, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008142:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008148:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800814a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008150:	3b01      	subs	r3, #1
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a1e      	ldr	r2, [pc, #120]	@ (80081dc <HAL_SAI_Init+0x54c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d004      	beq.n	8008172 <HAL_SAI_Init+0x4e2>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a1c      	ldr	r2, [pc, #112]	@ (80081e0 <HAL_SAI_Init+0x550>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d119      	bne.n	80081a6 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008176:	f023 0201 	bic.w	r2, r3, #1
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008184:	2b01      	cmp	r3, #1
 8008186:	d10e      	bne.n	80081a6 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008190:	3b01      	subs	r3, #1
 8008192:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008194:	431a      	orrs	r2, r3
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800819e:	f043 0201 	orr.w	r2, r3, #1
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3728      	adds	r7, #40	@ 0x28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	cccccccd 	.word	0xcccccccd
 80081cc:	f005c010 	.word	0xf005c010
 80081d0:	f805c010 	.word	0xf805c010
 80081d4:	ffff1ff0 	.word	0xffff1ff0
 80081d8:	fff88000 	.word	0xfff88000
 80081dc:	40015804 	.word	0x40015804
 80081e0:	58005404 	.word	0x58005404

080081e4 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_SAI_Abort+0x1a>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e07d      	b.n	80082fa <HAL_SAI_Abort+0x116>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fb0a 	bl	8008820 <SAI_Disable>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008220:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008224:	d14f      	bne.n	80082c6 <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008234:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b12      	cmp	r3, #18
 8008240:	d11d      	bne.n	800827e <HAL_SAI_Abort+0x9a>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008248:	2b00      	cmp	r3, #0
 800824a:	d018      	beq.n	800827e <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008252:	4618      	mov	r0, r3
 8008254:	f7f9 fd58 	bl	8001d08 <HAL_DMA_Abort>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00f      	beq.n	800827e <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008266:	2b80      	cmp	r3, #128	@ 0x80
 8008268:	d009      	beq.n	800827e <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008274:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b22      	cmp	r3, #34	@ 0x22
 8008288:	d11d      	bne.n	80082c6 <HAL_SAI_Abort+0xe2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008290:	2b00      	cmp	r3, #0
 8008292:	d018      	beq.n	80082c6 <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800829a:	4618      	mov	r0, r3
 800829c:	f7f9 fd34 	bl	8001d08 <HAL_DMA_Abort>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00f      	beq.n	80082c6 <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ae:	2b80      	cmp	r3, #128	@ 0x80
 80082b0:	d009      	beq.n	80082c6 <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082d6:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0208 	orr.w	r2, r2, #8
 80082e6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <HAL_SAI_Receive_DMA+0x1a>
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e079      	b.n	8008416 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b01      	cmp	r3, #1
 800832c:	d172      	bne.n	8008414 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <HAL_SAI_Receive_DMA+0x38>
 8008338:	2302      	movs	r3, #2
 800833a:	e06c      	b.n	8008416 <HAL_SAI_Receive_DMA+0x112>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	88fa      	ldrh	r2, [r7, #6]
 800834e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	88fa      	ldrh	r2, [r7, #6]
 8008356:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2222      	movs	r2, #34	@ 0x22
 8008366:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008370:	4a2b      	ldr	r2, [pc, #172]	@ (8008420 <HAL_SAI_Receive_DMA+0x11c>)
 8008372:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800837a:	4a2a      	ldr	r2, [pc, #168]	@ (8008424 <HAL_SAI_Receive_DMA+0x120>)
 800837c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008384:	4a28      	ldr	r2, [pc, #160]	@ (8008428 <HAL_SAI_Receive_DMA+0x124>)
 8008386:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800838e:	2200      	movs	r2, #0
 8008390:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	331c      	adds	r3, #28
 800839e:	4619      	mov	r1, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083a4:	461a      	mov	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 80083ac:	f7f9 fa42 	bl	8001834 <HAL_DMA_Start_IT>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e029      	b.n	8008416 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80083c2:	2100      	movs	r1, #0
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f9f3 	bl	80087b0 <SAI_InterruptFlag>
 80083ca:	4601      	mov	r1, r0
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80083e8:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d107      	bne.n	8008408 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008406:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	e000      	b.n	8008416 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008414:	2302      	movs	r3, #2
  }
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	080088f5 	.word	0x080088f5
 8008424:	08008895 	.word	0x08008895
 8008428:	08008911 	.word	0x08008911

0800842c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 81a7 	beq.w	8008790 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <HAL_SAI_IRQHandler+0x4e>
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f003 0308 	and.w	r3, r3, #8
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
 8008478:	e18a      	b.n	8008790 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01e      	beq.n	80084c2 <HAL_SAI_IRQHandler+0x96>
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d019      	beq.n	80084c2 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2201      	movs	r2, #1
 8008494:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b22      	cmp	r3, #34	@ 0x22
 80084a0:	d101      	bne.n	80084a6 <HAL_SAI_IRQHandler+0x7a>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <HAL_SAI_IRQHandler+0x7c>
 80084a6:	2302      	movs	r3, #2
 80084a8:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	431a      	orrs	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f96e 	bl	800879c <HAL_SAI_ErrorCallback>
 80084c0:	e166      	b.n	8008790 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d013      	beq.n	80084f4 <HAL_SAI_IRQHandler+0xc8>
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2202      	movs	r2, #2
 80084dc:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 8153 	beq.w	8008790 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084f0:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80084f2:	e14d      	b.n	8008790 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d05b      	beq.n	80085b6 <HAL_SAI_IRQHandler+0x18a>
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f003 0320 	and.w	r3, r3, #32
 8008504:	2b00      	cmp	r3, #0
 8008506:	d056      	beq.n	80085b6 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2220      	movs	r2, #32
 800850e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008516:	f043 0204 	orr.w	r2, r3, #4
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d03e      	beq.n	80085a8 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008530:	2b00      	cmp	r3, #0
 8008532:	d018      	beq.n	8008566 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800853a:	4a97      	ldr	r2, [pc, #604]	@ (8008798 <HAL_SAI_IRQHandler+0x36c>)
 800853c:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008544:	4618      	mov	r0, r3
 8008546:	f7f9 fefd 	bl	8002344 <HAL_DMA_Abort_IT>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008556:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f91b 	bl	800879c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 810a 	beq.w	8008786 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008578:	4a87      	ldr	r2, [pc, #540]	@ (8008798 <HAL_SAI_IRQHandler+0x36c>)
 800857a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008582:	4618      	mov	r0, r3
 8008584:	f7f9 fede 	bl	8002344 <HAL_DMA_Abort_IT>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 80fb 	beq.w	8008786 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008596:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f8fb 	bl	800879c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80085a6:	e0ee      	b.n	8008786 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff fe1b 	bl	80081e4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f8f4 	bl	800879c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80085b4:	e0e7      	b.n	8008786 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d05b      	beq.n	8008678 <HAL_SAI_IRQHandler+0x24c>
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d056      	beq.n	8008678 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2240      	movs	r2, #64	@ 0x40
 80085d0:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085d8:	f043 0208 	orr.w	r2, r3, #8
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d03e      	beq.n	800866a <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d018      	beq.n	8008628 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085fc:	4a66      	ldr	r2, [pc, #408]	@ (8008798 <HAL_SAI_IRQHandler+0x36c>)
 80085fe:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008606:	4618      	mov	r0, r3
 8008608:	f7f9 fe9c 	bl	8002344 <HAL_DMA_Abort_IT>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008618:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f8ba 	bl	800879c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 80ab 	beq.w	800878a <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800863a:	4a57      	ldr	r2, [pc, #348]	@ (8008798 <HAL_SAI_IRQHandler+0x36c>)
 800863c:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008644:	4618      	mov	r0, r3
 8008646:	f7f9 fe7d 	bl	8002344 <HAL_DMA_Abort_IT>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 809c 	beq.w	800878a <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008658:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f89a 	bl	800879c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008668:	e08f      	b.n	800878a <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fdba 	bl	80081e4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f893 	bl	800879c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008676:	e088      	b.n	800878a <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d067      	beq.n	8008752 <HAL_SAI_IRQHandler+0x326>
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d062      	beq.n	8008752 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2204      	movs	r2, #4
 8008692:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800869a:	f043 0220 	orr.w	r2, r3, #32
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d03c      	beq.n	8008728 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d018      	beq.n	80086ea <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086be:	4a36      	ldr	r2, [pc, #216]	@ (8008798 <HAL_SAI_IRQHandler+0x36c>)
 80086c0:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7f9 fe3b 	bl	8002344 <HAL_DMA_Abort_IT>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00a      	beq.n	80086ea <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f859 	bl	800879c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d04c      	beq.n	800878e <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086fa:	4a27      	ldr	r2, [pc, #156]	@ (8008798 <HAL_SAI_IRQHandler+0x36c>)
 80086fc:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008704:	4618      	mov	r0, r3
 8008706:	f7f9 fe1d 	bl	8002344 <HAL_DMA_Abort_IT>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d03e      	beq.n	800878e <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008716:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f83b 	bl	800879c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008726:	e032      	b.n	800878e <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2200      	movs	r2, #0
 800872e:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008738:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f826 	bl	800879c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008750:	e01d      	b.n	800878e <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f003 0310 	and.w	r3, r3, #16
 8008758:	2b00      	cmp	r3, #0
 800875a:	d019      	beq.n	8008790 <HAL_SAI_IRQHandler+0x364>
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f003 0310 	and.w	r3, r3, #16
 8008762:	2b00      	cmp	r3, #0
 8008764:	d014      	beq.n	8008790 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2210      	movs	r2, #16
 800876c:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008774:	f043 0210 	orr.w	r2, r3, #16
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f80c 	bl	800879c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8008784:	e004      	b.n	8008790 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008786:	bf00      	nop
 8008788:	e002      	b.n	8008790 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800878a:	bf00      	nop
 800878c:	e000      	b.n	8008790 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800878e:	bf00      	nop
}
 8008790:	bf00      	nop
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	0800896f 	.word	0x0800896f

0800879c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80087bc:	2301      	movs	r3, #1
 80087be:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d103      	bne.n	80087ce <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f043 0308 	orr.w	r3, r3, #8
 80087cc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d2:	2b08      	cmp	r3, #8
 80087d4:	d10b      	bne.n	80087ee <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d003      	beq.n	80087e6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d103      	bne.n	80087ee <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f043 0310 	orr.w	r3, r3, #16
 80087ec:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d003      	beq.n	80087fe <SAI_InterruptFlag+0x4e>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d104      	bne.n	8008808 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008804:	60fb      	str	r3, [r7, #12]
 8008806:	e003      	b.n	8008810 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f043 0304 	orr.w	r3, r3, #4
 800880e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008810:	68fb      	ldr	r3, [r7, #12]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
	...

08008820 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008828:	4b18      	ldr	r3, [pc, #96]	@ (800888c <SAI_Disable+0x6c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a18      	ldr	r2, [pc, #96]	@ (8008890 <SAI_Disable+0x70>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	0b1b      	lsrs	r3, r3, #12
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800884a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008858:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	72fb      	strb	r3, [r7, #11]
      break;
 8008866:	e009      	b.n	800887c <SAI_Disable+0x5c>
    }
    count--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3b01      	subs	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e7      	bne.n	800884c <SAI_Disable+0x2c>

  return status;
 800887c:	7afb      	ldrb	r3, [r7, #11]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	24000000 	.word	0x24000000
 8008890:	95cbec1b 	.word	0x95cbec1b

08008894 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088aa:	d01c      	beq.n	80088e6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80088ba:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80088c4:	2100      	movs	r1, #0
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff ff72 	bl	80087b0 <SAI_InterruptFlag>
 80088cc:	4603      	mov	r3, r0
 80088ce:	43d9      	mvns	r1, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691a      	ldr	r2, [r3, #16]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	400a      	ands	r2, r1
 80088dc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f7f8 f87a 	bl	80009e0 <HAL_SAI_RxCpltCallback>
#endif
}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008900:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7f8 f85c 	bl	80009c0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fa fe80 	bl	8003624 <HAL_DMA_GetError>
 8008924:	4603      	mov	r3, r0
 8008926:	2b02      	cmp	r3, #2
 8008928:	d01d      	beq.n	8008966 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008930:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008948:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f7ff ff68 	bl	8008820 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f7ff ff1b 	bl	800879c <HAL_SAI_ErrorCallback>
#endif
  }
}
 8008966:	bf00      	nop
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800898a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2200      	movs	r2, #0
 8008992:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800899c:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	d00a      	beq.n	80089be <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f7ff ff39 	bl	8008820 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f042 0208 	orr.w	r2, r2, #8
 80089bc:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7ff fee4 	bl	800879c <HAL_SAI_ErrorCallback>
#endif
}
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <__cvt>:
 80089dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089de:	ed2d 8b02 	vpush	{d8}
 80089e2:	eeb0 8b40 	vmov.f64	d8, d0
 80089e6:	b085      	sub	sp, #20
 80089e8:	4617      	mov	r7, r2
 80089ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80089ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089ee:	ee18 2a90 	vmov	r2, s17
 80089f2:	f025 0520 	bic.w	r5, r5, #32
 80089f6:	2a00      	cmp	r2, #0
 80089f8:	bfb6      	itet	lt
 80089fa:	222d      	movlt	r2, #45	@ 0x2d
 80089fc:	2200      	movge	r2, #0
 80089fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8008a02:	2d46      	cmp	r5, #70	@ 0x46
 8008a04:	460c      	mov	r4, r1
 8008a06:	701a      	strb	r2, [r3, #0]
 8008a08:	d004      	beq.n	8008a14 <__cvt+0x38>
 8008a0a:	2d45      	cmp	r5, #69	@ 0x45
 8008a0c:	d100      	bne.n	8008a10 <__cvt+0x34>
 8008a0e:	3401      	adds	r4, #1
 8008a10:	2102      	movs	r1, #2
 8008a12:	e000      	b.n	8008a16 <__cvt+0x3a>
 8008a14:	2103      	movs	r1, #3
 8008a16:	ab03      	add	r3, sp, #12
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	ab02      	add	r3, sp, #8
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	4622      	mov	r2, r4
 8008a20:	4633      	mov	r3, r6
 8008a22:	eeb0 0b48 	vmov.f64	d0, d8
 8008a26:	f000 fda3 	bl	8009570 <_dtoa_r>
 8008a2a:	2d47      	cmp	r5, #71	@ 0x47
 8008a2c:	d114      	bne.n	8008a58 <__cvt+0x7c>
 8008a2e:	07fb      	lsls	r3, r7, #31
 8008a30:	d50a      	bpl.n	8008a48 <__cvt+0x6c>
 8008a32:	1902      	adds	r2, r0, r4
 8008a34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3c:	bf08      	it	eq
 8008a3e:	9203      	streq	r2, [sp, #12]
 8008a40:	2130      	movs	r1, #48	@ 0x30
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d319      	bcc.n	8008a7c <__cvt+0xa0>
 8008a48:	9b03      	ldr	r3, [sp, #12]
 8008a4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a4c:	1a1b      	subs	r3, r3, r0
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	b005      	add	sp, #20
 8008a52:	ecbd 8b02 	vpop	{d8}
 8008a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a58:	2d46      	cmp	r5, #70	@ 0x46
 8008a5a:	eb00 0204 	add.w	r2, r0, r4
 8008a5e:	d1e9      	bne.n	8008a34 <__cvt+0x58>
 8008a60:	7803      	ldrb	r3, [r0, #0]
 8008a62:	2b30      	cmp	r3, #48	@ 0x30
 8008a64:	d107      	bne.n	8008a76 <__cvt+0x9a>
 8008a66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6e:	bf1c      	itt	ne
 8008a70:	f1c4 0401 	rsbne	r4, r4, #1
 8008a74:	6034      	strne	r4, [r6, #0]
 8008a76:	6833      	ldr	r3, [r6, #0]
 8008a78:	441a      	add	r2, r3
 8008a7a:	e7db      	b.n	8008a34 <__cvt+0x58>
 8008a7c:	1c5c      	adds	r4, r3, #1
 8008a7e:	9403      	str	r4, [sp, #12]
 8008a80:	7019      	strb	r1, [r3, #0]
 8008a82:	e7de      	b.n	8008a42 <__cvt+0x66>

08008a84 <__exponent>:
 8008a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a86:	2900      	cmp	r1, #0
 8008a88:	bfba      	itte	lt
 8008a8a:	4249      	neglt	r1, r1
 8008a8c:	232d      	movlt	r3, #45	@ 0x2d
 8008a8e:	232b      	movge	r3, #43	@ 0x2b
 8008a90:	2909      	cmp	r1, #9
 8008a92:	7002      	strb	r2, [r0, #0]
 8008a94:	7043      	strb	r3, [r0, #1]
 8008a96:	dd29      	ble.n	8008aec <__exponent+0x68>
 8008a98:	f10d 0307 	add.w	r3, sp, #7
 8008a9c:	461d      	mov	r5, r3
 8008a9e:	270a      	movs	r7, #10
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	fbb1 f6f7 	udiv	r6, r1, r7
 8008aa6:	fb07 1416 	mls	r4, r7, r6, r1
 8008aaa:	3430      	adds	r4, #48	@ 0x30
 8008aac:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	2c63      	cmp	r4, #99	@ 0x63
 8008ab4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008ab8:	4631      	mov	r1, r6
 8008aba:	dcf1      	bgt.n	8008aa0 <__exponent+0x1c>
 8008abc:	3130      	adds	r1, #48	@ 0x30
 8008abe:	1e94      	subs	r4, r2, #2
 8008ac0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ac4:	1c41      	adds	r1, r0, #1
 8008ac6:	4623      	mov	r3, r4
 8008ac8:	42ab      	cmp	r3, r5
 8008aca:	d30a      	bcc.n	8008ae2 <__exponent+0x5e>
 8008acc:	f10d 0309 	add.w	r3, sp, #9
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	42ac      	cmp	r4, r5
 8008ad4:	bf88      	it	hi
 8008ad6:	2300      	movhi	r3, #0
 8008ad8:	3302      	adds	r3, #2
 8008ada:	4403      	add	r3, r0
 8008adc:	1a18      	subs	r0, r3, r0
 8008ade:	b003      	add	sp, #12
 8008ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ae6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008aea:	e7ed      	b.n	8008ac8 <__exponent+0x44>
 8008aec:	2330      	movs	r3, #48	@ 0x30
 8008aee:	3130      	adds	r1, #48	@ 0x30
 8008af0:	7083      	strb	r3, [r0, #2]
 8008af2:	70c1      	strb	r1, [r0, #3]
 8008af4:	1d03      	adds	r3, r0, #4
 8008af6:	e7f1      	b.n	8008adc <__exponent+0x58>

08008af8 <_printf_float>:
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	b08d      	sub	sp, #52	@ 0x34
 8008afe:	460c      	mov	r4, r1
 8008b00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008b04:	4616      	mov	r6, r2
 8008b06:	461f      	mov	r7, r3
 8008b08:	4605      	mov	r5, r0
 8008b0a:	f000 fca5 	bl	8009458 <_localeconv_r>
 8008b0e:	f8d0 b000 	ldr.w	fp, [r0]
 8008b12:	4658      	mov	r0, fp
 8008b14:	f7f7 fc34 	bl	8000380 <strlen>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008b24:	6822      	ldr	r2, [r4, #0]
 8008b26:	9005      	str	r0, [sp, #20]
 8008b28:	3307      	adds	r3, #7
 8008b2a:	f023 0307 	bic.w	r3, r3, #7
 8008b2e:	f103 0108 	add.w	r1, r3, #8
 8008b32:	f8c8 1000 	str.w	r1, [r8]
 8008b36:	ed93 0b00 	vldr	d0, [r3]
 8008b3a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008d98 <_printf_float+0x2a0>
 8008b3e:	eeb0 7bc0 	vabs.f64	d7, d0
 8008b42:	eeb4 7b46 	vcmp.f64	d7, d6
 8008b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b4a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008b4e:	dd24      	ble.n	8008b9a <_printf_float+0xa2>
 8008b50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b58:	d502      	bpl.n	8008b60 <_printf_float+0x68>
 8008b5a:	232d      	movs	r3, #45	@ 0x2d
 8008b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b60:	498f      	ldr	r1, [pc, #572]	@ (8008da0 <_printf_float+0x2a8>)
 8008b62:	4b90      	ldr	r3, [pc, #576]	@ (8008da4 <_printf_float+0x2ac>)
 8008b64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008b68:	bf8c      	ite	hi
 8008b6a:	4688      	movhi	r8, r1
 8008b6c:	4698      	movls	r8, r3
 8008b6e:	f022 0204 	bic.w	r2, r2, #4
 8008b72:	2303      	movs	r3, #3
 8008b74:	6123      	str	r3, [r4, #16]
 8008b76:	6022      	str	r2, [r4, #0]
 8008b78:	f04f 0a00 	mov.w	sl, #0
 8008b7c:	9700      	str	r7, [sp, #0]
 8008b7e:	4633      	mov	r3, r6
 8008b80:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b82:	4621      	mov	r1, r4
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 f9d1 	bl	8008f2c <_printf_common>
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	f040 8089 	bne.w	8008ca2 <_printf_float+0x1aa>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b94:	b00d      	add	sp, #52	@ 0x34
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba2:	d709      	bvc.n	8008bb8 <_printf_float+0xc0>
 8008ba4:	ee10 3a90 	vmov	r3, s1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	bfbc      	itt	lt
 8008bac:	232d      	movlt	r3, #45	@ 0x2d
 8008bae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008bb2:	497d      	ldr	r1, [pc, #500]	@ (8008da8 <_printf_float+0x2b0>)
 8008bb4:	4b7d      	ldr	r3, [pc, #500]	@ (8008dac <_printf_float+0x2b4>)
 8008bb6:	e7d5      	b.n	8008b64 <_printf_float+0x6c>
 8008bb8:	6863      	ldr	r3, [r4, #4]
 8008bba:	1c59      	adds	r1, r3, #1
 8008bbc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008bc0:	d139      	bne.n	8008c36 <_printf_float+0x13e>
 8008bc2:	2306      	movs	r3, #6
 8008bc4:	6063      	str	r3, [r4, #4]
 8008bc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008bca:	2300      	movs	r3, #0
 8008bcc:	6022      	str	r2, [r4, #0]
 8008bce:	9303      	str	r3, [sp, #12]
 8008bd0:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008bd6:	ab09      	add	r3, sp, #36	@ 0x24
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	6861      	ldr	r1, [r4, #4]
 8008bdc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008be0:	4628      	mov	r0, r5
 8008be2:	f7ff fefb 	bl	80089dc <__cvt>
 8008be6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008bea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bec:	4680      	mov	r8, r0
 8008bee:	d129      	bne.n	8008c44 <_printf_float+0x14c>
 8008bf0:	1cc8      	adds	r0, r1, #3
 8008bf2:	db02      	blt.n	8008bfa <_printf_float+0x102>
 8008bf4:	6863      	ldr	r3, [r4, #4]
 8008bf6:	4299      	cmp	r1, r3
 8008bf8:	dd41      	ble.n	8008c7e <_printf_float+0x186>
 8008bfa:	f1a9 0902 	sub.w	r9, r9, #2
 8008bfe:	fa5f f989 	uxtb.w	r9, r9
 8008c02:	3901      	subs	r1, #1
 8008c04:	464a      	mov	r2, r9
 8008c06:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c0c:	f7ff ff3a 	bl	8008a84 <__exponent>
 8008c10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c12:	1813      	adds	r3, r2, r0
 8008c14:	2a01      	cmp	r2, #1
 8008c16:	4682      	mov	sl, r0
 8008c18:	6123      	str	r3, [r4, #16]
 8008c1a:	dc02      	bgt.n	8008c22 <_printf_float+0x12a>
 8008c1c:	6822      	ldr	r2, [r4, #0]
 8008c1e:	07d2      	lsls	r2, r2, #31
 8008c20:	d501      	bpl.n	8008c26 <_printf_float+0x12e>
 8008c22:	3301      	adds	r3, #1
 8008c24:	6123      	str	r3, [r4, #16]
 8008c26:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0a6      	beq.n	8008b7c <_printf_float+0x84>
 8008c2e:	232d      	movs	r3, #45	@ 0x2d
 8008c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c34:	e7a2      	b.n	8008b7c <_printf_float+0x84>
 8008c36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c3a:	d1c4      	bne.n	8008bc6 <_printf_float+0xce>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1c2      	bne.n	8008bc6 <_printf_float+0xce>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e7bf      	b.n	8008bc4 <_printf_float+0xcc>
 8008c44:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008c48:	d9db      	bls.n	8008c02 <_printf_float+0x10a>
 8008c4a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008c4e:	d118      	bne.n	8008c82 <_printf_float+0x18a>
 8008c50:	2900      	cmp	r1, #0
 8008c52:	6863      	ldr	r3, [r4, #4]
 8008c54:	dd0b      	ble.n	8008c6e <_printf_float+0x176>
 8008c56:	6121      	str	r1, [r4, #16]
 8008c58:	b913      	cbnz	r3, 8008c60 <_printf_float+0x168>
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	07d0      	lsls	r0, r2, #31
 8008c5e:	d502      	bpl.n	8008c66 <_printf_float+0x16e>
 8008c60:	3301      	adds	r3, #1
 8008c62:	440b      	add	r3, r1
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c68:	f04f 0a00 	mov.w	sl, #0
 8008c6c:	e7db      	b.n	8008c26 <_printf_float+0x12e>
 8008c6e:	b913      	cbnz	r3, 8008c76 <_printf_float+0x17e>
 8008c70:	6822      	ldr	r2, [r4, #0]
 8008c72:	07d2      	lsls	r2, r2, #31
 8008c74:	d501      	bpl.n	8008c7a <_printf_float+0x182>
 8008c76:	3302      	adds	r3, #2
 8008c78:	e7f4      	b.n	8008c64 <_printf_float+0x16c>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e7f2      	b.n	8008c64 <_printf_float+0x16c>
 8008c7e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c84:	4299      	cmp	r1, r3
 8008c86:	db05      	blt.n	8008c94 <_printf_float+0x19c>
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	6121      	str	r1, [r4, #16]
 8008c8c:	07d8      	lsls	r0, r3, #31
 8008c8e:	d5ea      	bpl.n	8008c66 <_printf_float+0x16e>
 8008c90:	1c4b      	adds	r3, r1, #1
 8008c92:	e7e7      	b.n	8008c64 <_printf_float+0x16c>
 8008c94:	2900      	cmp	r1, #0
 8008c96:	bfd4      	ite	le
 8008c98:	f1c1 0202 	rsble	r2, r1, #2
 8008c9c:	2201      	movgt	r2, #1
 8008c9e:	4413      	add	r3, r2
 8008ca0:	e7e0      	b.n	8008c64 <_printf_float+0x16c>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	055a      	lsls	r2, r3, #21
 8008ca6:	d407      	bmi.n	8008cb8 <_printf_float+0x1c0>
 8008ca8:	6923      	ldr	r3, [r4, #16]
 8008caa:	4642      	mov	r2, r8
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d12a      	bne.n	8008d0c <_printf_float+0x214>
 8008cb6:	e76b      	b.n	8008b90 <_printf_float+0x98>
 8008cb8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008cbc:	f240 80e0 	bls.w	8008e80 <_printf_float+0x388>
 8008cc0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008cc4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ccc:	d133      	bne.n	8008d36 <_printf_float+0x23e>
 8008cce:	4a38      	ldr	r2, [pc, #224]	@ (8008db0 <_printf_float+0x2b8>)
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f43f af59 	beq.w	8008b90 <_printf_float+0x98>
 8008cde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008ce2:	4543      	cmp	r3, r8
 8008ce4:	db02      	blt.n	8008cec <_printf_float+0x1f4>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	07d8      	lsls	r0, r3, #31
 8008cea:	d50f      	bpl.n	8008d0c <_printf_float+0x214>
 8008cec:	9b05      	ldr	r3, [sp, #20]
 8008cee:	465a      	mov	r2, fp
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	47b8      	blx	r7
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	f43f af4a 	beq.w	8008b90 <_printf_float+0x98>
 8008cfc:	f04f 0900 	mov.w	r9, #0
 8008d00:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008d04:	f104 0a1a 	add.w	sl, r4, #26
 8008d08:	45c8      	cmp	r8, r9
 8008d0a:	dc09      	bgt.n	8008d20 <_printf_float+0x228>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	079b      	lsls	r3, r3, #30
 8008d10:	f100 8107 	bmi.w	8008f22 <_printf_float+0x42a>
 8008d14:	68e0      	ldr	r0, [r4, #12]
 8008d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d18:	4298      	cmp	r0, r3
 8008d1a:	bfb8      	it	lt
 8008d1c:	4618      	movlt	r0, r3
 8008d1e:	e739      	b.n	8008b94 <_printf_float+0x9c>
 8008d20:	2301      	movs	r3, #1
 8008d22:	4652      	mov	r2, sl
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	47b8      	blx	r7
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f43f af30 	beq.w	8008b90 <_printf_float+0x98>
 8008d30:	f109 0901 	add.w	r9, r9, #1
 8008d34:	e7e8      	b.n	8008d08 <_printf_float+0x210>
 8008d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dc3b      	bgt.n	8008db4 <_printf_float+0x2bc>
 8008d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8008db0 <_printf_float+0x2b8>)
 8008d3e:	2301      	movs	r3, #1
 8008d40:	4631      	mov	r1, r6
 8008d42:	4628      	mov	r0, r5
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f af22 	beq.w	8008b90 <_printf_float+0x98>
 8008d4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d50:	ea59 0303 	orrs.w	r3, r9, r3
 8008d54:	d102      	bne.n	8008d5c <_printf_float+0x264>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	07d9      	lsls	r1, r3, #31
 8008d5a:	d5d7      	bpl.n	8008d0c <_printf_float+0x214>
 8008d5c:	9b05      	ldr	r3, [sp, #20]
 8008d5e:	465a      	mov	r2, fp
 8008d60:	4631      	mov	r1, r6
 8008d62:	4628      	mov	r0, r5
 8008d64:	47b8      	blx	r7
 8008d66:	3001      	adds	r0, #1
 8008d68:	f43f af12 	beq.w	8008b90 <_printf_float+0x98>
 8008d6c:	f04f 0a00 	mov.w	sl, #0
 8008d70:	f104 0b1a 	add.w	fp, r4, #26
 8008d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d76:	425b      	negs	r3, r3
 8008d78:	4553      	cmp	r3, sl
 8008d7a:	dc01      	bgt.n	8008d80 <_printf_float+0x288>
 8008d7c:	464b      	mov	r3, r9
 8008d7e:	e794      	b.n	8008caa <_printf_float+0x1b2>
 8008d80:	2301      	movs	r3, #1
 8008d82:	465a      	mov	r2, fp
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f43f af00 	beq.w	8008b90 <_printf_float+0x98>
 8008d90:	f10a 0a01 	add.w	sl, sl, #1
 8008d94:	e7ee      	b.n	8008d74 <_printf_float+0x27c>
 8008d96:	bf00      	nop
 8008d98:	ffffffff 	.word	0xffffffff
 8008d9c:	7fefffff 	.word	0x7fefffff
 8008da0:	0800b218 	.word	0x0800b218
 8008da4:	0800b214 	.word	0x0800b214
 8008da8:	0800b220 	.word	0x0800b220
 8008dac:	0800b21c 	.word	0x0800b21c
 8008db0:	0800b224 	.word	0x0800b224
 8008db4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008db6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008dba:	4553      	cmp	r3, sl
 8008dbc:	bfa8      	it	ge
 8008dbe:	4653      	movge	r3, sl
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	4699      	mov	r9, r3
 8008dc4:	dc37      	bgt.n	8008e36 <_printf_float+0x33e>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9307      	str	r3, [sp, #28]
 8008dca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dce:	f104 021a 	add.w	r2, r4, #26
 8008dd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008dd4:	9907      	ldr	r1, [sp, #28]
 8008dd6:	9306      	str	r3, [sp, #24]
 8008dd8:	eba3 0309 	sub.w	r3, r3, r9
 8008ddc:	428b      	cmp	r3, r1
 8008dde:	dc31      	bgt.n	8008e44 <_printf_float+0x34c>
 8008de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de2:	459a      	cmp	sl, r3
 8008de4:	dc3b      	bgt.n	8008e5e <_printf_float+0x366>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	07da      	lsls	r2, r3, #31
 8008dea:	d438      	bmi.n	8008e5e <_printf_float+0x366>
 8008dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dee:	ebaa 0903 	sub.w	r9, sl, r3
 8008df2:	9b06      	ldr	r3, [sp, #24]
 8008df4:	ebaa 0303 	sub.w	r3, sl, r3
 8008df8:	4599      	cmp	r9, r3
 8008dfa:	bfa8      	it	ge
 8008dfc:	4699      	movge	r9, r3
 8008dfe:	f1b9 0f00 	cmp.w	r9, #0
 8008e02:	dc34      	bgt.n	8008e6e <_printf_float+0x376>
 8008e04:	f04f 0800 	mov.w	r8, #0
 8008e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e0c:	f104 0b1a 	add.w	fp, r4, #26
 8008e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e12:	ebaa 0303 	sub.w	r3, sl, r3
 8008e16:	eba3 0309 	sub.w	r3, r3, r9
 8008e1a:	4543      	cmp	r3, r8
 8008e1c:	f77f af76 	ble.w	8008d0c <_printf_float+0x214>
 8008e20:	2301      	movs	r3, #1
 8008e22:	465a      	mov	r2, fp
 8008e24:	4631      	mov	r1, r6
 8008e26:	4628      	mov	r0, r5
 8008e28:	47b8      	blx	r7
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	f43f aeb0 	beq.w	8008b90 <_printf_float+0x98>
 8008e30:	f108 0801 	add.w	r8, r8, #1
 8008e34:	e7ec      	b.n	8008e10 <_printf_float+0x318>
 8008e36:	4642      	mov	r2, r8
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	47b8      	blx	r7
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d1c1      	bne.n	8008dc6 <_printf_float+0x2ce>
 8008e42:	e6a5      	b.n	8008b90 <_printf_float+0x98>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4631      	mov	r1, r6
 8008e48:	4628      	mov	r0, r5
 8008e4a:	9206      	str	r2, [sp, #24]
 8008e4c:	47b8      	blx	r7
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f43f ae9e 	beq.w	8008b90 <_printf_float+0x98>
 8008e54:	9b07      	ldr	r3, [sp, #28]
 8008e56:	9a06      	ldr	r2, [sp, #24]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	9307      	str	r3, [sp, #28]
 8008e5c:	e7b9      	b.n	8008dd2 <_printf_float+0x2da>
 8008e5e:	9b05      	ldr	r3, [sp, #20]
 8008e60:	465a      	mov	r2, fp
 8008e62:	4631      	mov	r1, r6
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b8      	blx	r7
 8008e68:	3001      	adds	r0, #1
 8008e6a:	d1bf      	bne.n	8008dec <_printf_float+0x2f4>
 8008e6c:	e690      	b.n	8008b90 <_printf_float+0x98>
 8008e6e:	9a06      	ldr	r2, [sp, #24]
 8008e70:	464b      	mov	r3, r9
 8008e72:	4442      	add	r2, r8
 8008e74:	4631      	mov	r1, r6
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d1c2      	bne.n	8008e04 <_printf_float+0x30c>
 8008e7e:	e687      	b.n	8008b90 <_printf_float+0x98>
 8008e80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008e84:	f1b9 0f01 	cmp.w	r9, #1
 8008e88:	dc01      	bgt.n	8008e8e <_printf_float+0x396>
 8008e8a:	07db      	lsls	r3, r3, #31
 8008e8c:	d536      	bpl.n	8008efc <_printf_float+0x404>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4642      	mov	r2, r8
 8008e92:	4631      	mov	r1, r6
 8008e94:	4628      	mov	r0, r5
 8008e96:	47b8      	blx	r7
 8008e98:	3001      	adds	r0, #1
 8008e9a:	f43f ae79 	beq.w	8008b90 <_printf_float+0x98>
 8008e9e:	9b05      	ldr	r3, [sp, #20]
 8008ea0:	465a      	mov	r2, fp
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	47b8      	blx	r7
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	f43f ae71 	beq.w	8008b90 <_printf_float+0x98>
 8008eae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008eb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eba:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008ebe:	d018      	beq.n	8008ef2 <_printf_float+0x3fa>
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	f108 0201 	add.w	r2, r8, #1
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4628      	mov	r0, r5
 8008eca:	47b8      	blx	r7
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d10c      	bne.n	8008eea <_printf_float+0x3f2>
 8008ed0:	e65e      	b.n	8008b90 <_printf_float+0x98>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	465a      	mov	r2, fp
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b8      	blx	r7
 8008edc:	3001      	adds	r0, #1
 8008ede:	f43f ae57 	beq.w	8008b90 <_printf_float+0x98>
 8008ee2:	f108 0801 	add.w	r8, r8, #1
 8008ee6:	45c8      	cmp	r8, r9
 8008ee8:	dbf3      	blt.n	8008ed2 <_printf_float+0x3da>
 8008eea:	4653      	mov	r3, sl
 8008eec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ef0:	e6dc      	b.n	8008cac <_printf_float+0x1b4>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	f104 0b1a 	add.w	fp, r4, #26
 8008efa:	e7f4      	b.n	8008ee6 <_printf_float+0x3ee>
 8008efc:	2301      	movs	r3, #1
 8008efe:	4642      	mov	r2, r8
 8008f00:	e7e1      	b.n	8008ec6 <_printf_float+0x3ce>
 8008f02:	2301      	movs	r3, #1
 8008f04:	464a      	mov	r2, r9
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	47b8      	blx	r7
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	f43f ae3f 	beq.w	8008b90 <_printf_float+0x98>
 8008f12:	f108 0801 	add.w	r8, r8, #1
 8008f16:	68e3      	ldr	r3, [r4, #12]
 8008f18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f1a:	1a5b      	subs	r3, r3, r1
 8008f1c:	4543      	cmp	r3, r8
 8008f1e:	dcf0      	bgt.n	8008f02 <_printf_float+0x40a>
 8008f20:	e6f8      	b.n	8008d14 <_printf_float+0x21c>
 8008f22:	f04f 0800 	mov.w	r8, #0
 8008f26:	f104 0919 	add.w	r9, r4, #25
 8008f2a:	e7f4      	b.n	8008f16 <_printf_float+0x41e>

08008f2c <_printf_common>:
 8008f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f30:	4616      	mov	r6, r2
 8008f32:	4698      	mov	r8, r3
 8008f34:	688a      	ldr	r2, [r1, #8]
 8008f36:	690b      	ldr	r3, [r1, #16]
 8008f38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	bfb8      	it	lt
 8008f40:	4613      	movlt	r3, r2
 8008f42:	6033      	str	r3, [r6, #0]
 8008f44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f48:	4607      	mov	r7, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	b10a      	cbz	r2, 8008f52 <_printf_common+0x26>
 8008f4e:	3301      	adds	r3, #1
 8008f50:	6033      	str	r3, [r6, #0]
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	0699      	lsls	r1, r3, #26
 8008f56:	bf42      	ittt	mi
 8008f58:	6833      	ldrmi	r3, [r6, #0]
 8008f5a:	3302      	addmi	r3, #2
 8008f5c:	6033      	strmi	r3, [r6, #0]
 8008f5e:	6825      	ldr	r5, [r4, #0]
 8008f60:	f015 0506 	ands.w	r5, r5, #6
 8008f64:	d106      	bne.n	8008f74 <_printf_common+0x48>
 8008f66:	f104 0a19 	add.w	sl, r4, #25
 8008f6a:	68e3      	ldr	r3, [r4, #12]
 8008f6c:	6832      	ldr	r2, [r6, #0]
 8008f6e:	1a9b      	subs	r3, r3, r2
 8008f70:	42ab      	cmp	r3, r5
 8008f72:	dc26      	bgt.n	8008fc2 <_printf_common+0x96>
 8008f74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f78:	6822      	ldr	r2, [r4, #0]
 8008f7a:	3b00      	subs	r3, #0
 8008f7c:	bf18      	it	ne
 8008f7e:	2301      	movne	r3, #1
 8008f80:	0692      	lsls	r2, r2, #26
 8008f82:	d42b      	bmi.n	8008fdc <_printf_common+0xb0>
 8008f84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f88:	4641      	mov	r1, r8
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	47c8      	blx	r9
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d01e      	beq.n	8008fd0 <_printf_common+0xa4>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	6922      	ldr	r2, [r4, #16]
 8008f96:	f003 0306 	and.w	r3, r3, #6
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	bf02      	ittt	eq
 8008f9e:	68e5      	ldreq	r5, [r4, #12]
 8008fa0:	6833      	ldreq	r3, [r6, #0]
 8008fa2:	1aed      	subeq	r5, r5, r3
 8008fa4:	68a3      	ldr	r3, [r4, #8]
 8008fa6:	bf0c      	ite	eq
 8008fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fac:	2500      	movne	r5, #0
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	bfc4      	itt	gt
 8008fb2:	1a9b      	subgt	r3, r3, r2
 8008fb4:	18ed      	addgt	r5, r5, r3
 8008fb6:	2600      	movs	r6, #0
 8008fb8:	341a      	adds	r4, #26
 8008fba:	42b5      	cmp	r5, r6
 8008fbc:	d11a      	bne.n	8008ff4 <_printf_common+0xc8>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e008      	b.n	8008fd4 <_printf_common+0xa8>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	4652      	mov	r2, sl
 8008fc6:	4641      	mov	r1, r8
 8008fc8:	4638      	mov	r0, r7
 8008fca:	47c8      	blx	r9
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d103      	bne.n	8008fd8 <_printf_common+0xac>
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd8:	3501      	adds	r5, #1
 8008fda:	e7c6      	b.n	8008f6a <_printf_common+0x3e>
 8008fdc:	18e1      	adds	r1, r4, r3
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	2030      	movs	r0, #48	@ 0x30
 8008fe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fe6:	4422      	add	r2, r4
 8008fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ff0:	3302      	adds	r3, #2
 8008ff2:	e7c7      	b.n	8008f84 <_printf_common+0x58>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	4641      	mov	r1, r8
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	47c8      	blx	r9
 8008ffe:	3001      	adds	r0, #1
 8009000:	d0e6      	beq.n	8008fd0 <_printf_common+0xa4>
 8009002:	3601      	adds	r6, #1
 8009004:	e7d9      	b.n	8008fba <_printf_common+0x8e>
	...

08009008 <_printf_i>:
 8009008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800900c:	7e0f      	ldrb	r7, [r1, #24]
 800900e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009010:	2f78      	cmp	r7, #120	@ 0x78
 8009012:	4691      	mov	r9, r2
 8009014:	4680      	mov	r8, r0
 8009016:	460c      	mov	r4, r1
 8009018:	469a      	mov	sl, r3
 800901a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800901e:	d807      	bhi.n	8009030 <_printf_i+0x28>
 8009020:	2f62      	cmp	r7, #98	@ 0x62
 8009022:	d80a      	bhi.n	800903a <_printf_i+0x32>
 8009024:	2f00      	cmp	r7, #0
 8009026:	f000 80d1 	beq.w	80091cc <_printf_i+0x1c4>
 800902a:	2f58      	cmp	r7, #88	@ 0x58
 800902c:	f000 80b8 	beq.w	80091a0 <_printf_i+0x198>
 8009030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009038:	e03a      	b.n	80090b0 <_printf_i+0xa8>
 800903a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800903e:	2b15      	cmp	r3, #21
 8009040:	d8f6      	bhi.n	8009030 <_printf_i+0x28>
 8009042:	a101      	add	r1, pc, #4	@ (adr r1, 8009048 <_printf_i+0x40>)
 8009044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009048:	080090a1 	.word	0x080090a1
 800904c:	080090b5 	.word	0x080090b5
 8009050:	08009031 	.word	0x08009031
 8009054:	08009031 	.word	0x08009031
 8009058:	08009031 	.word	0x08009031
 800905c:	08009031 	.word	0x08009031
 8009060:	080090b5 	.word	0x080090b5
 8009064:	08009031 	.word	0x08009031
 8009068:	08009031 	.word	0x08009031
 800906c:	08009031 	.word	0x08009031
 8009070:	08009031 	.word	0x08009031
 8009074:	080091b3 	.word	0x080091b3
 8009078:	080090df 	.word	0x080090df
 800907c:	0800916d 	.word	0x0800916d
 8009080:	08009031 	.word	0x08009031
 8009084:	08009031 	.word	0x08009031
 8009088:	080091d5 	.word	0x080091d5
 800908c:	08009031 	.word	0x08009031
 8009090:	080090df 	.word	0x080090df
 8009094:	08009031 	.word	0x08009031
 8009098:	08009031 	.word	0x08009031
 800909c:	08009175 	.word	0x08009175
 80090a0:	6833      	ldr	r3, [r6, #0]
 80090a2:	1d1a      	adds	r2, r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6032      	str	r2, [r6, #0]
 80090a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090b0:	2301      	movs	r3, #1
 80090b2:	e09c      	b.n	80091ee <_printf_i+0x1e6>
 80090b4:	6833      	ldr	r3, [r6, #0]
 80090b6:	6820      	ldr	r0, [r4, #0]
 80090b8:	1d19      	adds	r1, r3, #4
 80090ba:	6031      	str	r1, [r6, #0]
 80090bc:	0606      	lsls	r6, r0, #24
 80090be:	d501      	bpl.n	80090c4 <_printf_i+0xbc>
 80090c0:	681d      	ldr	r5, [r3, #0]
 80090c2:	e003      	b.n	80090cc <_printf_i+0xc4>
 80090c4:	0645      	lsls	r5, r0, #25
 80090c6:	d5fb      	bpl.n	80090c0 <_printf_i+0xb8>
 80090c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090cc:	2d00      	cmp	r5, #0
 80090ce:	da03      	bge.n	80090d8 <_printf_i+0xd0>
 80090d0:	232d      	movs	r3, #45	@ 0x2d
 80090d2:	426d      	negs	r5, r5
 80090d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090d8:	4858      	ldr	r0, [pc, #352]	@ (800923c <_printf_i+0x234>)
 80090da:	230a      	movs	r3, #10
 80090dc:	e011      	b.n	8009102 <_printf_i+0xfa>
 80090de:	6821      	ldr	r1, [r4, #0]
 80090e0:	6833      	ldr	r3, [r6, #0]
 80090e2:	0608      	lsls	r0, r1, #24
 80090e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80090e8:	d402      	bmi.n	80090f0 <_printf_i+0xe8>
 80090ea:	0649      	lsls	r1, r1, #25
 80090ec:	bf48      	it	mi
 80090ee:	b2ad      	uxthmi	r5, r5
 80090f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80090f2:	4852      	ldr	r0, [pc, #328]	@ (800923c <_printf_i+0x234>)
 80090f4:	6033      	str	r3, [r6, #0]
 80090f6:	bf14      	ite	ne
 80090f8:	230a      	movne	r3, #10
 80090fa:	2308      	moveq	r3, #8
 80090fc:	2100      	movs	r1, #0
 80090fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009102:	6866      	ldr	r6, [r4, #4]
 8009104:	60a6      	str	r6, [r4, #8]
 8009106:	2e00      	cmp	r6, #0
 8009108:	db05      	blt.n	8009116 <_printf_i+0x10e>
 800910a:	6821      	ldr	r1, [r4, #0]
 800910c:	432e      	orrs	r6, r5
 800910e:	f021 0104 	bic.w	r1, r1, #4
 8009112:	6021      	str	r1, [r4, #0]
 8009114:	d04b      	beq.n	80091ae <_printf_i+0x1a6>
 8009116:	4616      	mov	r6, r2
 8009118:	fbb5 f1f3 	udiv	r1, r5, r3
 800911c:	fb03 5711 	mls	r7, r3, r1, r5
 8009120:	5dc7      	ldrb	r7, [r0, r7]
 8009122:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009126:	462f      	mov	r7, r5
 8009128:	42bb      	cmp	r3, r7
 800912a:	460d      	mov	r5, r1
 800912c:	d9f4      	bls.n	8009118 <_printf_i+0x110>
 800912e:	2b08      	cmp	r3, #8
 8009130:	d10b      	bne.n	800914a <_printf_i+0x142>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	07df      	lsls	r7, r3, #31
 8009136:	d508      	bpl.n	800914a <_printf_i+0x142>
 8009138:	6923      	ldr	r3, [r4, #16]
 800913a:	6861      	ldr	r1, [r4, #4]
 800913c:	4299      	cmp	r1, r3
 800913e:	bfde      	ittt	le
 8009140:	2330      	movle	r3, #48	@ 0x30
 8009142:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009146:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800914a:	1b92      	subs	r2, r2, r6
 800914c:	6122      	str	r2, [r4, #16]
 800914e:	f8cd a000 	str.w	sl, [sp]
 8009152:	464b      	mov	r3, r9
 8009154:	aa03      	add	r2, sp, #12
 8009156:	4621      	mov	r1, r4
 8009158:	4640      	mov	r0, r8
 800915a:	f7ff fee7 	bl	8008f2c <_printf_common>
 800915e:	3001      	adds	r0, #1
 8009160:	d14a      	bne.n	80091f8 <_printf_i+0x1f0>
 8009162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009166:	b004      	add	sp, #16
 8009168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	f043 0320 	orr.w	r3, r3, #32
 8009172:	6023      	str	r3, [r4, #0]
 8009174:	4832      	ldr	r0, [pc, #200]	@ (8009240 <_printf_i+0x238>)
 8009176:	2778      	movs	r7, #120	@ 0x78
 8009178:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	6831      	ldr	r1, [r6, #0]
 8009180:	061f      	lsls	r7, r3, #24
 8009182:	f851 5b04 	ldr.w	r5, [r1], #4
 8009186:	d402      	bmi.n	800918e <_printf_i+0x186>
 8009188:	065f      	lsls	r7, r3, #25
 800918a:	bf48      	it	mi
 800918c:	b2ad      	uxthmi	r5, r5
 800918e:	6031      	str	r1, [r6, #0]
 8009190:	07d9      	lsls	r1, r3, #31
 8009192:	bf44      	itt	mi
 8009194:	f043 0320 	orrmi.w	r3, r3, #32
 8009198:	6023      	strmi	r3, [r4, #0]
 800919a:	b11d      	cbz	r5, 80091a4 <_printf_i+0x19c>
 800919c:	2310      	movs	r3, #16
 800919e:	e7ad      	b.n	80090fc <_printf_i+0xf4>
 80091a0:	4826      	ldr	r0, [pc, #152]	@ (800923c <_printf_i+0x234>)
 80091a2:	e7e9      	b.n	8009178 <_printf_i+0x170>
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	f023 0320 	bic.w	r3, r3, #32
 80091aa:	6023      	str	r3, [r4, #0]
 80091ac:	e7f6      	b.n	800919c <_printf_i+0x194>
 80091ae:	4616      	mov	r6, r2
 80091b0:	e7bd      	b.n	800912e <_printf_i+0x126>
 80091b2:	6833      	ldr	r3, [r6, #0]
 80091b4:	6825      	ldr	r5, [r4, #0]
 80091b6:	6961      	ldr	r1, [r4, #20]
 80091b8:	1d18      	adds	r0, r3, #4
 80091ba:	6030      	str	r0, [r6, #0]
 80091bc:	062e      	lsls	r6, r5, #24
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	d501      	bpl.n	80091c6 <_printf_i+0x1be>
 80091c2:	6019      	str	r1, [r3, #0]
 80091c4:	e002      	b.n	80091cc <_printf_i+0x1c4>
 80091c6:	0668      	lsls	r0, r5, #25
 80091c8:	d5fb      	bpl.n	80091c2 <_printf_i+0x1ba>
 80091ca:	8019      	strh	r1, [r3, #0]
 80091cc:	2300      	movs	r3, #0
 80091ce:	6123      	str	r3, [r4, #16]
 80091d0:	4616      	mov	r6, r2
 80091d2:	e7bc      	b.n	800914e <_printf_i+0x146>
 80091d4:	6833      	ldr	r3, [r6, #0]
 80091d6:	1d1a      	adds	r2, r3, #4
 80091d8:	6032      	str	r2, [r6, #0]
 80091da:	681e      	ldr	r6, [r3, #0]
 80091dc:	6862      	ldr	r2, [r4, #4]
 80091de:	2100      	movs	r1, #0
 80091e0:	4630      	mov	r0, r6
 80091e2:	f7f7 f87d 	bl	80002e0 <memchr>
 80091e6:	b108      	cbz	r0, 80091ec <_printf_i+0x1e4>
 80091e8:	1b80      	subs	r0, r0, r6
 80091ea:	6060      	str	r0, [r4, #4]
 80091ec:	6863      	ldr	r3, [r4, #4]
 80091ee:	6123      	str	r3, [r4, #16]
 80091f0:	2300      	movs	r3, #0
 80091f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091f6:	e7aa      	b.n	800914e <_printf_i+0x146>
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	4632      	mov	r2, r6
 80091fc:	4649      	mov	r1, r9
 80091fe:	4640      	mov	r0, r8
 8009200:	47d0      	blx	sl
 8009202:	3001      	adds	r0, #1
 8009204:	d0ad      	beq.n	8009162 <_printf_i+0x15a>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	079b      	lsls	r3, r3, #30
 800920a:	d413      	bmi.n	8009234 <_printf_i+0x22c>
 800920c:	68e0      	ldr	r0, [r4, #12]
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	4298      	cmp	r0, r3
 8009212:	bfb8      	it	lt
 8009214:	4618      	movlt	r0, r3
 8009216:	e7a6      	b.n	8009166 <_printf_i+0x15e>
 8009218:	2301      	movs	r3, #1
 800921a:	4632      	mov	r2, r6
 800921c:	4649      	mov	r1, r9
 800921e:	4640      	mov	r0, r8
 8009220:	47d0      	blx	sl
 8009222:	3001      	adds	r0, #1
 8009224:	d09d      	beq.n	8009162 <_printf_i+0x15a>
 8009226:	3501      	adds	r5, #1
 8009228:	68e3      	ldr	r3, [r4, #12]
 800922a:	9903      	ldr	r1, [sp, #12]
 800922c:	1a5b      	subs	r3, r3, r1
 800922e:	42ab      	cmp	r3, r5
 8009230:	dcf2      	bgt.n	8009218 <_printf_i+0x210>
 8009232:	e7eb      	b.n	800920c <_printf_i+0x204>
 8009234:	2500      	movs	r5, #0
 8009236:	f104 0619 	add.w	r6, r4, #25
 800923a:	e7f5      	b.n	8009228 <_printf_i+0x220>
 800923c:	0800b226 	.word	0x0800b226
 8009240:	0800b237 	.word	0x0800b237

08009244 <std>:
 8009244:	2300      	movs	r3, #0
 8009246:	b510      	push	{r4, lr}
 8009248:	4604      	mov	r4, r0
 800924a:	e9c0 3300 	strd	r3, r3, [r0]
 800924e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009252:	6083      	str	r3, [r0, #8]
 8009254:	8181      	strh	r1, [r0, #12]
 8009256:	6643      	str	r3, [r0, #100]	@ 0x64
 8009258:	81c2      	strh	r2, [r0, #14]
 800925a:	6183      	str	r3, [r0, #24]
 800925c:	4619      	mov	r1, r3
 800925e:	2208      	movs	r2, #8
 8009260:	305c      	adds	r0, #92	@ 0x5c
 8009262:	f000 f8c3 	bl	80093ec <memset>
 8009266:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <std+0x58>)
 8009268:	6263      	str	r3, [r4, #36]	@ 0x24
 800926a:	4b0d      	ldr	r3, [pc, #52]	@ (80092a0 <std+0x5c>)
 800926c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800926e:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <std+0x60>)
 8009270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009272:	4b0d      	ldr	r3, [pc, #52]	@ (80092a8 <std+0x64>)
 8009274:	6323      	str	r3, [r4, #48]	@ 0x30
 8009276:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <std+0x68>)
 8009278:	6224      	str	r4, [r4, #32]
 800927a:	429c      	cmp	r4, r3
 800927c:	d006      	beq.n	800928c <std+0x48>
 800927e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009282:	4294      	cmp	r4, r2
 8009284:	d002      	beq.n	800928c <std+0x48>
 8009286:	33d0      	adds	r3, #208	@ 0xd0
 8009288:	429c      	cmp	r4, r3
 800928a:	d105      	bne.n	8009298 <std+0x54>
 800928c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009294:	f000 b8dc 	b.w	8009450 <__retarget_lock_init_recursive>
 8009298:	bd10      	pop	{r4, pc}
 800929a:	bf00      	nop
 800929c:	0800ac69 	.word	0x0800ac69
 80092a0:	0800ac8b 	.word	0x0800ac8b
 80092a4:	0800acc3 	.word	0x0800acc3
 80092a8:	0800ace7 	.word	0x0800ace7
 80092ac:	240005a8 	.word	0x240005a8

080092b0 <stdio_exit_handler>:
 80092b0:	4a02      	ldr	r2, [pc, #8]	@ (80092bc <stdio_exit_handler+0xc>)
 80092b2:	4903      	ldr	r1, [pc, #12]	@ (80092c0 <stdio_exit_handler+0x10>)
 80092b4:	4803      	ldr	r0, [pc, #12]	@ (80092c4 <stdio_exit_handler+0x14>)
 80092b6:	f000 b869 	b.w	800938c <_fwalk_sglue>
 80092ba:	bf00      	nop
 80092bc:	24000010 	.word	0x24000010
 80092c0:	0800a50d 	.word	0x0800a50d
 80092c4:	24000020 	.word	0x24000020

080092c8 <cleanup_stdio>:
 80092c8:	6841      	ldr	r1, [r0, #4]
 80092ca:	4b0c      	ldr	r3, [pc, #48]	@ (80092fc <cleanup_stdio+0x34>)
 80092cc:	4299      	cmp	r1, r3
 80092ce:	b510      	push	{r4, lr}
 80092d0:	4604      	mov	r4, r0
 80092d2:	d001      	beq.n	80092d8 <cleanup_stdio+0x10>
 80092d4:	f001 f91a 	bl	800a50c <_fflush_r>
 80092d8:	68a1      	ldr	r1, [r4, #8]
 80092da:	4b09      	ldr	r3, [pc, #36]	@ (8009300 <cleanup_stdio+0x38>)
 80092dc:	4299      	cmp	r1, r3
 80092de:	d002      	beq.n	80092e6 <cleanup_stdio+0x1e>
 80092e0:	4620      	mov	r0, r4
 80092e2:	f001 f913 	bl	800a50c <_fflush_r>
 80092e6:	68e1      	ldr	r1, [r4, #12]
 80092e8:	4b06      	ldr	r3, [pc, #24]	@ (8009304 <cleanup_stdio+0x3c>)
 80092ea:	4299      	cmp	r1, r3
 80092ec:	d004      	beq.n	80092f8 <cleanup_stdio+0x30>
 80092ee:	4620      	mov	r0, r4
 80092f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f4:	f001 b90a 	b.w	800a50c <_fflush_r>
 80092f8:	bd10      	pop	{r4, pc}
 80092fa:	bf00      	nop
 80092fc:	240005a8 	.word	0x240005a8
 8009300:	24000610 	.word	0x24000610
 8009304:	24000678 	.word	0x24000678

08009308 <global_stdio_init.part.0>:
 8009308:	b510      	push	{r4, lr}
 800930a:	4b0b      	ldr	r3, [pc, #44]	@ (8009338 <global_stdio_init.part.0+0x30>)
 800930c:	4c0b      	ldr	r4, [pc, #44]	@ (800933c <global_stdio_init.part.0+0x34>)
 800930e:	4a0c      	ldr	r2, [pc, #48]	@ (8009340 <global_stdio_init.part.0+0x38>)
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	4620      	mov	r0, r4
 8009314:	2200      	movs	r2, #0
 8009316:	2104      	movs	r1, #4
 8009318:	f7ff ff94 	bl	8009244 <std>
 800931c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009320:	2201      	movs	r2, #1
 8009322:	2109      	movs	r1, #9
 8009324:	f7ff ff8e 	bl	8009244 <std>
 8009328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800932c:	2202      	movs	r2, #2
 800932e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009332:	2112      	movs	r1, #18
 8009334:	f7ff bf86 	b.w	8009244 <std>
 8009338:	240006e0 	.word	0x240006e0
 800933c:	240005a8 	.word	0x240005a8
 8009340:	080092b1 	.word	0x080092b1

08009344 <__sfp_lock_acquire>:
 8009344:	4801      	ldr	r0, [pc, #4]	@ (800934c <__sfp_lock_acquire+0x8>)
 8009346:	f000 b884 	b.w	8009452 <__retarget_lock_acquire_recursive>
 800934a:	bf00      	nop
 800934c:	240006e5 	.word	0x240006e5

08009350 <__sfp_lock_release>:
 8009350:	4801      	ldr	r0, [pc, #4]	@ (8009358 <__sfp_lock_release+0x8>)
 8009352:	f000 b87f 	b.w	8009454 <__retarget_lock_release_recursive>
 8009356:	bf00      	nop
 8009358:	240006e5 	.word	0x240006e5

0800935c <__sinit>:
 800935c:	b510      	push	{r4, lr}
 800935e:	4604      	mov	r4, r0
 8009360:	f7ff fff0 	bl	8009344 <__sfp_lock_acquire>
 8009364:	6a23      	ldr	r3, [r4, #32]
 8009366:	b11b      	cbz	r3, 8009370 <__sinit+0x14>
 8009368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800936c:	f7ff bff0 	b.w	8009350 <__sfp_lock_release>
 8009370:	4b04      	ldr	r3, [pc, #16]	@ (8009384 <__sinit+0x28>)
 8009372:	6223      	str	r3, [r4, #32]
 8009374:	4b04      	ldr	r3, [pc, #16]	@ (8009388 <__sinit+0x2c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1f5      	bne.n	8009368 <__sinit+0xc>
 800937c:	f7ff ffc4 	bl	8009308 <global_stdio_init.part.0>
 8009380:	e7f2      	b.n	8009368 <__sinit+0xc>
 8009382:	bf00      	nop
 8009384:	080092c9 	.word	0x080092c9
 8009388:	240006e0 	.word	0x240006e0

0800938c <_fwalk_sglue>:
 800938c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009390:	4607      	mov	r7, r0
 8009392:	4688      	mov	r8, r1
 8009394:	4614      	mov	r4, r2
 8009396:	2600      	movs	r6, #0
 8009398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800939c:	f1b9 0901 	subs.w	r9, r9, #1
 80093a0:	d505      	bpl.n	80093ae <_fwalk_sglue+0x22>
 80093a2:	6824      	ldr	r4, [r4, #0]
 80093a4:	2c00      	cmp	r4, #0
 80093a6:	d1f7      	bne.n	8009398 <_fwalk_sglue+0xc>
 80093a8:	4630      	mov	r0, r6
 80093aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ae:	89ab      	ldrh	r3, [r5, #12]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d907      	bls.n	80093c4 <_fwalk_sglue+0x38>
 80093b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093b8:	3301      	adds	r3, #1
 80093ba:	d003      	beq.n	80093c4 <_fwalk_sglue+0x38>
 80093bc:	4629      	mov	r1, r5
 80093be:	4638      	mov	r0, r7
 80093c0:	47c0      	blx	r8
 80093c2:	4306      	orrs	r6, r0
 80093c4:	3568      	adds	r5, #104	@ 0x68
 80093c6:	e7e9      	b.n	800939c <_fwalk_sglue+0x10>

080093c8 <iprintf>:
 80093c8:	b40f      	push	{r0, r1, r2, r3}
 80093ca:	b507      	push	{r0, r1, r2, lr}
 80093cc:	4906      	ldr	r1, [pc, #24]	@ (80093e8 <iprintf+0x20>)
 80093ce:	ab04      	add	r3, sp, #16
 80093d0:	6808      	ldr	r0, [r1, #0]
 80093d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d6:	6881      	ldr	r1, [r0, #8]
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	f000 fe51 	bl	800a080 <_vfiprintf_r>
 80093de:	b003      	add	sp, #12
 80093e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093e4:	b004      	add	sp, #16
 80093e6:	4770      	bx	lr
 80093e8:	2400001c 	.word	0x2400001c

080093ec <memset>:
 80093ec:	4402      	add	r2, r0
 80093ee:	4603      	mov	r3, r0
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d100      	bne.n	80093f6 <memset+0xa>
 80093f4:	4770      	bx	lr
 80093f6:	f803 1b01 	strb.w	r1, [r3], #1
 80093fa:	e7f9      	b.n	80093f0 <memset+0x4>

080093fc <__errno>:
 80093fc:	4b01      	ldr	r3, [pc, #4]	@ (8009404 <__errno+0x8>)
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	2400001c 	.word	0x2400001c

08009408 <__libc_init_array>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	4d0d      	ldr	r5, [pc, #52]	@ (8009440 <__libc_init_array+0x38>)
 800940c:	4c0d      	ldr	r4, [pc, #52]	@ (8009444 <__libc_init_array+0x3c>)
 800940e:	1b64      	subs	r4, r4, r5
 8009410:	10a4      	asrs	r4, r4, #2
 8009412:	2600      	movs	r6, #0
 8009414:	42a6      	cmp	r6, r4
 8009416:	d109      	bne.n	800942c <__libc_init_array+0x24>
 8009418:	4d0b      	ldr	r5, [pc, #44]	@ (8009448 <__libc_init_array+0x40>)
 800941a:	4c0c      	ldr	r4, [pc, #48]	@ (800944c <__libc_init_array+0x44>)
 800941c:	f001 fedc 	bl	800b1d8 <_init>
 8009420:	1b64      	subs	r4, r4, r5
 8009422:	10a4      	asrs	r4, r4, #2
 8009424:	2600      	movs	r6, #0
 8009426:	42a6      	cmp	r6, r4
 8009428:	d105      	bne.n	8009436 <__libc_init_array+0x2e>
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009430:	4798      	blx	r3
 8009432:	3601      	adds	r6, #1
 8009434:	e7ee      	b.n	8009414 <__libc_init_array+0xc>
 8009436:	f855 3b04 	ldr.w	r3, [r5], #4
 800943a:	4798      	blx	r3
 800943c:	3601      	adds	r6, #1
 800943e:	e7f2      	b.n	8009426 <__libc_init_array+0x1e>
 8009440:	0800b594 	.word	0x0800b594
 8009444:	0800b594 	.word	0x0800b594
 8009448:	0800b594 	.word	0x0800b594
 800944c:	0800b598 	.word	0x0800b598

08009450 <__retarget_lock_init_recursive>:
 8009450:	4770      	bx	lr

08009452 <__retarget_lock_acquire_recursive>:
 8009452:	4770      	bx	lr

08009454 <__retarget_lock_release_recursive>:
 8009454:	4770      	bx	lr
	...

08009458 <_localeconv_r>:
 8009458:	4800      	ldr	r0, [pc, #0]	@ (800945c <_localeconv_r+0x4>)
 800945a:	4770      	bx	lr
 800945c:	2400015c 	.word	0x2400015c

08009460 <quorem>:
 8009460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	6903      	ldr	r3, [r0, #16]
 8009466:	690c      	ldr	r4, [r1, #16]
 8009468:	42a3      	cmp	r3, r4
 800946a:	4607      	mov	r7, r0
 800946c:	db7e      	blt.n	800956c <quorem+0x10c>
 800946e:	3c01      	subs	r4, #1
 8009470:	f101 0814 	add.w	r8, r1, #20
 8009474:	00a3      	lsls	r3, r4, #2
 8009476:	f100 0514 	add.w	r5, r0, #20
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800948a:	3301      	adds	r3, #1
 800948c:	429a      	cmp	r2, r3
 800948e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009492:	fbb2 f6f3 	udiv	r6, r2, r3
 8009496:	d32e      	bcc.n	80094f6 <quorem+0x96>
 8009498:	f04f 0a00 	mov.w	sl, #0
 800949c:	46c4      	mov	ip, r8
 800949e:	46ae      	mov	lr, r5
 80094a0:	46d3      	mov	fp, sl
 80094a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80094a6:	b298      	uxth	r0, r3
 80094a8:	fb06 a000 	mla	r0, r6, r0, sl
 80094ac:	0c02      	lsrs	r2, r0, #16
 80094ae:	0c1b      	lsrs	r3, r3, #16
 80094b0:	fb06 2303 	mla	r3, r6, r3, r2
 80094b4:	f8de 2000 	ldr.w	r2, [lr]
 80094b8:	b280      	uxth	r0, r0
 80094ba:	b292      	uxth	r2, r2
 80094bc:	1a12      	subs	r2, r2, r0
 80094be:	445a      	add	r2, fp
 80094c0:	f8de 0000 	ldr.w	r0, [lr]
 80094c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80094ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80094d2:	b292      	uxth	r2, r2
 80094d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094d8:	45e1      	cmp	r9, ip
 80094da:	f84e 2b04 	str.w	r2, [lr], #4
 80094de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80094e2:	d2de      	bcs.n	80094a2 <quorem+0x42>
 80094e4:	9b00      	ldr	r3, [sp, #0]
 80094e6:	58eb      	ldr	r3, [r5, r3]
 80094e8:	b92b      	cbnz	r3, 80094f6 <quorem+0x96>
 80094ea:	9b01      	ldr	r3, [sp, #4]
 80094ec:	3b04      	subs	r3, #4
 80094ee:	429d      	cmp	r5, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	d32f      	bcc.n	8009554 <quorem+0xf4>
 80094f4:	613c      	str	r4, [r7, #16]
 80094f6:	4638      	mov	r0, r7
 80094f8:	f001 faae 	bl	800aa58 <__mcmp>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	db25      	blt.n	800954c <quorem+0xec>
 8009500:	4629      	mov	r1, r5
 8009502:	2000      	movs	r0, #0
 8009504:	f858 2b04 	ldr.w	r2, [r8], #4
 8009508:	f8d1 c000 	ldr.w	ip, [r1]
 800950c:	fa1f fe82 	uxth.w	lr, r2
 8009510:	fa1f f38c 	uxth.w	r3, ip
 8009514:	eba3 030e 	sub.w	r3, r3, lr
 8009518:	4403      	add	r3, r0
 800951a:	0c12      	lsrs	r2, r2, #16
 800951c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009520:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009524:	b29b      	uxth	r3, r3
 8009526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800952a:	45c1      	cmp	r9, r8
 800952c:	f841 3b04 	str.w	r3, [r1], #4
 8009530:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009534:	d2e6      	bcs.n	8009504 <quorem+0xa4>
 8009536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800953a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800953e:	b922      	cbnz	r2, 800954a <quorem+0xea>
 8009540:	3b04      	subs	r3, #4
 8009542:	429d      	cmp	r5, r3
 8009544:	461a      	mov	r2, r3
 8009546:	d30b      	bcc.n	8009560 <quorem+0x100>
 8009548:	613c      	str	r4, [r7, #16]
 800954a:	3601      	adds	r6, #1
 800954c:	4630      	mov	r0, r6
 800954e:	b003      	add	sp, #12
 8009550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009554:	6812      	ldr	r2, [r2, #0]
 8009556:	3b04      	subs	r3, #4
 8009558:	2a00      	cmp	r2, #0
 800955a:	d1cb      	bne.n	80094f4 <quorem+0x94>
 800955c:	3c01      	subs	r4, #1
 800955e:	e7c6      	b.n	80094ee <quorem+0x8e>
 8009560:	6812      	ldr	r2, [r2, #0]
 8009562:	3b04      	subs	r3, #4
 8009564:	2a00      	cmp	r2, #0
 8009566:	d1ef      	bne.n	8009548 <quorem+0xe8>
 8009568:	3c01      	subs	r4, #1
 800956a:	e7ea      	b.n	8009542 <quorem+0xe2>
 800956c:	2000      	movs	r0, #0
 800956e:	e7ee      	b.n	800954e <quorem+0xee>

08009570 <_dtoa_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	ed2d 8b02 	vpush	{d8}
 8009578:	69c7      	ldr	r7, [r0, #28]
 800957a:	b091      	sub	sp, #68	@ 0x44
 800957c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009580:	ec55 4b10 	vmov	r4, r5, d0
 8009584:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009586:	9107      	str	r1, [sp, #28]
 8009588:	4681      	mov	r9, r0
 800958a:	9209      	str	r2, [sp, #36]	@ 0x24
 800958c:	930d      	str	r3, [sp, #52]	@ 0x34
 800958e:	b97f      	cbnz	r7, 80095b0 <_dtoa_r+0x40>
 8009590:	2010      	movs	r0, #16
 8009592:	f000 fe8d 	bl	800a2b0 <malloc>
 8009596:	4602      	mov	r2, r0
 8009598:	f8c9 001c 	str.w	r0, [r9, #28]
 800959c:	b920      	cbnz	r0, 80095a8 <_dtoa_r+0x38>
 800959e:	4ba0      	ldr	r3, [pc, #640]	@ (8009820 <_dtoa_r+0x2b0>)
 80095a0:	21ef      	movs	r1, #239	@ 0xef
 80095a2:	48a0      	ldr	r0, [pc, #640]	@ (8009824 <_dtoa_r+0x2b4>)
 80095a4:	f001 fd20 	bl	800afe8 <__assert_func>
 80095a8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80095ac:	6007      	str	r7, [r0, #0]
 80095ae:	60c7      	str	r7, [r0, #12]
 80095b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80095b4:	6819      	ldr	r1, [r3, #0]
 80095b6:	b159      	cbz	r1, 80095d0 <_dtoa_r+0x60>
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	604a      	str	r2, [r1, #4]
 80095bc:	2301      	movs	r3, #1
 80095be:	4093      	lsls	r3, r2
 80095c0:	608b      	str	r3, [r1, #8]
 80095c2:	4648      	mov	r0, r9
 80095c4:	f001 f816 	bl	800a5f4 <_Bfree>
 80095c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80095cc:	2200      	movs	r2, #0
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	1e2b      	subs	r3, r5, #0
 80095d2:	bfbb      	ittet	lt
 80095d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80095d8:	9303      	strlt	r3, [sp, #12]
 80095da:	2300      	movge	r3, #0
 80095dc:	2201      	movlt	r2, #1
 80095de:	bfac      	ite	ge
 80095e0:	6033      	strge	r3, [r6, #0]
 80095e2:	6032      	strlt	r2, [r6, #0]
 80095e4:	4b90      	ldr	r3, [pc, #576]	@ (8009828 <_dtoa_r+0x2b8>)
 80095e6:	9e03      	ldr	r6, [sp, #12]
 80095e8:	43b3      	bics	r3, r6
 80095ea:	d110      	bne.n	800960e <_dtoa_r+0x9e>
 80095ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80095f8:	4323      	orrs	r3, r4
 80095fa:	f000 84e6 	beq.w	8009fca <_dtoa_r+0xa5a>
 80095fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009600:	4f8a      	ldr	r7, [pc, #552]	@ (800982c <_dtoa_r+0x2bc>)
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 84e8 	beq.w	8009fd8 <_dtoa_r+0xa68>
 8009608:	1cfb      	adds	r3, r7, #3
 800960a:	f000 bce3 	b.w	8009fd4 <_dtoa_r+0xa64>
 800960e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009612:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961a:	d10a      	bne.n	8009632 <_dtoa_r+0xc2>
 800961c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800961e:	2301      	movs	r3, #1
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009624:	b113      	cbz	r3, 800962c <_dtoa_r+0xbc>
 8009626:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009628:	4b81      	ldr	r3, [pc, #516]	@ (8009830 <_dtoa_r+0x2c0>)
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	4f81      	ldr	r7, [pc, #516]	@ (8009834 <_dtoa_r+0x2c4>)
 800962e:	f000 bcd3 	b.w	8009fd8 <_dtoa_r+0xa68>
 8009632:	aa0e      	add	r2, sp, #56	@ 0x38
 8009634:	a90f      	add	r1, sp, #60	@ 0x3c
 8009636:	4648      	mov	r0, r9
 8009638:	eeb0 0b48 	vmov.f64	d0, d8
 800963c:	f001 fabc 	bl	800abb8 <__d2b>
 8009640:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009644:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009646:	9001      	str	r0, [sp, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d045      	beq.n	80096d8 <_dtoa_r+0x168>
 800964c:	eeb0 7b48 	vmov.f64	d7, d8
 8009650:	ee18 1a90 	vmov	r1, s17
 8009654:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009658:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800965c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009660:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009664:	2500      	movs	r5, #0
 8009666:	ee07 1a90 	vmov	s15, r1
 800966a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800966e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009808 <_dtoa_r+0x298>
 8009672:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009676:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009810 <_dtoa_r+0x2a0>
 800967a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800967e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009818 <_dtoa_r+0x2a8>
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800968a:	eeb0 7b46 	vmov.f64	d7, d6
 800968e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009692:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009696:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800969a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969e:	ee16 8a90 	vmov	r8, s13
 80096a2:	d508      	bpl.n	80096b6 <_dtoa_r+0x146>
 80096a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80096a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80096ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b0:	bf18      	it	ne
 80096b2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80096b6:	f1b8 0f16 	cmp.w	r8, #22
 80096ba:	d82b      	bhi.n	8009714 <_dtoa_r+0x1a4>
 80096bc:	495e      	ldr	r1, [pc, #376]	@ (8009838 <_dtoa_r+0x2c8>)
 80096be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80096c2:	ed91 7b00 	vldr	d7, [r1]
 80096c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80096ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ce:	d501      	bpl.n	80096d4 <_dtoa_r+0x164>
 80096d0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80096d4:	2100      	movs	r1, #0
 80096d6:	e01e      	b.n	8009716 <_dtoa_r+0x1a6>
 80096d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096da:	4413      	add	r3, r2
 80096dc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80096e0:	2920      	cmp	r1, #32
 80096e2:	bfc1      	itttt	gt
 80096e4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80096e8:	408e      	lslgt	r6, r1
 80096ea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80096ee:	fa24 f101 	lsrgt.w	r1, r4, r1
 80096f2:	bfd6      	itet	le
 80096f4:	f1c1 0120 	rsble	r1, r1, #32
 80096f8:	4331      	orrgt	r1, r6
 80096fa:	fa04 f101 	lslle.w	r1, r4, r1
 80096fe:	ee07 1a90 	vmov	s15, r1
 8009702:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009706:	3b01      	subs	r3, #1
 8009708:	ee17 1a90 	vmov	r1, s15
 800970c:	2501      	movs	r5, #1
 800970e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009712:	e7a8      	b.n	8009666 <_dtoa_r+0xf6>
 8009714:	2101      	movs	r1, #1
 8009716:	1ad2      	subs	r2, r2, r3
 8009718:	1e53      	subs	r3, r2, #1
 800971a:	9306      	str	r3, [sp, #24]
 800971c:	bf45      	ittet	mi
 800971e:	f1c2 0301 	rsbmi	r3, r2, #1
 8009722:	9304      	strmi	r3, [sp, #16]
 8009724:	2300      	movpl	r3, #0
 8009726:	2300      	movmi	r3, #0
 8009728:	bf4c      	ite	mi
 800972a:	9306      	strmi	r3, [sp, #24]
 800972c:	9304      	strpl	r3, [sp, #16]
 800972e:	f1b8 0f00 	cmp.w	r8, #0
 8009732:	910c      	str	r1, [sp, #48]	@ 0x30
 8009734:	db18      	blt.n	8009768 <_dtoa_r+0x1f8>
 8009736:	9b06      	ldr	r3, [sp, #24]
 8009738:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800973c:	4443      	add	r3, r8
 800973e:	9306      	str	r3, [sp, #24]
 8009740:	2300      	movs	r3, #0
 8009742:	9a07      	ldr	r2, [sp, #28]
 8009744:	2a09      	cmp	r2, #9
 8009746:	d845      	bhi.n	80097d4 <_dtoa_r+0x264>
 8009748:	2a05      	cmp	r2, #5
 800974a:	bfc4      	itt	gt
 800974c:	3a04      	subgt	r2, #4
 800974e:	9207      	strgt	r2, [sp, #28]
 8009750:	9a07      	ldr	r2, [sp, #28]
 8009752:	f1a2 0202 	sub.w	r2, r2, #2
 8009756:	bfcc      	ite	gt
 8009758:	2400      	movgt	r4, #0
 800975a:	2401      	movle	r4, #1
 800975c:	2a03      	cmp	r2, #3
 800975e:	d844      	bhi.n	80097ea <_dtoa_r+0x27a>
 8009760:	e8df f002 	tbb	[pc, r2]
 8009764:	0b173634 	.word	0x0b173634
 8009768:	9b04      	ldr	r3, [sp, #16]
 800976a:	2200      	movs	r2, #0
 800976c:	eba3 0308 	sub.w	r3, r3, r8
 8009770:	9304      	str	r3, [sp, #16]
 8009772:	920a      	str	r2, [sp, #40]	@ 0x28
 8009774:	f1c8 0300 	rsb	r3, r8, #0
 8009778:	e7e3      	b.n	8009742 <_dtoa_r+0x1d2>
 800977a:	2201      	movs	r2, #1
 800977c:	9208      	str	r2, [sp, #32]
 800977e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009780:	eb08 0b02 	add.w	fp, r8, r2
 8009784:	f10b 0a01 	add.w	sl, fp, #1
 8009788:	4652      	mov	r2, sl
 800978a:	2a01      	cmp	r2, #1
 800978c:	bfb8      	it	lt
 800978e:	2201      	movlt	r2, #1
 8009790:	e006      	b.n	80097a0 <_dtoa_r+0x230>
 8009792:	2201      	movs	r2, #1
 8009794:	9208      	str	r2, [sp, #32]
 8009796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009798:	2a00      	cmp	r2, #0
 800979a:	dd29      	ble.n	80097f0 <_dtoa_r+0x280>
 800979c:	4693      	mov	fp, r2
 800979e:	4692      	mov	sl, r2
 80097a0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80097a4:	2100      	movs	r1, #0
 80097a6:	2004      	movs	r0, #4
 80097a8:	f100 0614 	add.w	r6, r0, #20
 80097ac:	4296      	cmp	r6, r2
 80097ae:	d926      	bls.n	80097fe <_dtoa_r+0x28e>
 80097b0:	6079      	str	r1, [r7, #4]
 80097b2:	4648      	mov	r0, r9
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	f000 fedd 	bl	800a574 <_Balloc>
 80097ba:	9b05      	ldr	r3, [sp, #20]
 80097bc:	4607      	mov	r7, r0
 80097be:	2800      	cmp	r0, #0
 80097c0:	d13e      	bne.n	8009840 <_dtoa_r+0x2d0>
 80097c2:	4b1e      	ldr	r3, [pc, #120]	@ (800983c <_dtoa_r+0x2cc>)
 80097c4:	4602      	mov	r2, r0
 80097c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80097ca:	e6ea      	b.n	80095a2 <_dtoa_r+0x32>
 80097cc:	2200      	movs	r2, #0
 80097ce:	e7e1      	b.n	8009794 <_dtoa_r+0x224>
 80097d0:	2200      	movs	r2, #0
 80097d2:	e7d3      	b.n	800977c <_dtoa_r+0x20c>
 80097d4:	2401      	movs	r4, #1
 80097d6:	2200      	movs	r2, #0
 80097d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80097dc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80097e0:	2100      	movs	r1, #0
 80097e2:	46da      	mov	sl, fp
 80097e4:	2212      	movs	r2, #18
 80097e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80097e8:	e7da      	b.n	80097a0 <_dtoa_r+0x230>
 80097ea:	2201      	movs	r2, #1
 80097ec:	9208      	str	r2, [sp, #32]
 80097ee:	e7f5      	b.n	80097dc <_dtoa_r+0x26c>
 80097f0:	f04f 0b01 	mov.w	fp, #1
 80097f4:	46da      	mov	sl, fp
 80097f6:	465a      	mov	r2, fp
 80097f8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80097fc:	e7d0      	b.n	80097a0 <_dtoa_r+0x230>
 80097fe:	3101      	adds	r1, #1
 8009800:	0040      	lsls	r0, r0, #1
 8009802:	e7d1      	b.n	80097a8 <_dtoa_r+0x238>
 8009804:	f3af 8000 	nop.w
 8009808:	636f4361 	.word	0x636f4361
 800980c:	3fd287a7 	.word	0x3fd287a7
 8009810:	8b60c8b3 	.word	0x8b60c8b3
 8009814:	3fc68a28 	.word	0x3fc68a28
 8009818:	509f79fb 	.word	0x509f79fb
 800981c:	3fd34413 	.word	0x3fd34413
 8009820:	0800b255 	.word	0x0800b255
 8009824:	0800b26c 	.word	0x0800b26c
 8009828:	7ff00000 	.word	0x7ff00000
 800982c:	0800b251 	.word	0x0800b251
 8009830:	0800b225 	.word	0x0800b225
 8009834:	0800b224 	.word	0x0800b224
 8009838:	0800b3c0 	.word	0x0800b3c0
 800983c:	0800b2c4 	.word	0x0800b2c4
 8009840:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009844:	f1ba 0f0e 	cmp.w	sl, #14
 8009848:	6010      	str	r0, [r2, #0]
 800984a:	d86e      	bhi.n	800992a <_dtoa_r+0x3ba>
 800984c:	2c00      	cmp	r4, #0
 800984e:	d06c      	beq.n	800992a <_dtoa_r+0x3ba>
 8009850:	f1b8 0f00 	cmp.w	r8, #0
 8009854:	f340 80b4 	ble.w	80099c0 <_dtoa_r+0x450>
 8009858:	4ac8      	ldr	r2, [pc, #800]	@ (8009b7c <_dtoa_r+0x60c>)
 800985a:	f008 010f 	and.w	r1, r8, #15
 800985e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009862:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009866:	ed92 7b00 	vldr	d7, [r2]
 800986a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800986e:	f000 809b 	beq.w	80099a8 <_dtoa_r+0x438>
 8009872:	4ac3      	ldr	r2, [pc, #780]	@ (8009b80 <_dtoa_r+0x610>)
 8009874:	ed92 6b08 	vldr	d6, [r2, #32]
 8009878:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800987c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009880:	f001 010f 	and.w	r1, r1, #15
 8009884:	2203      	movs	r2, #3
 8009886:	48be      	ldr	r0, [pc, #760]	@ (8009b80 <_dtoa_r+0x610>)
 8009888:	2900      	cmp	r1, #0
 800988a:	f040 808f 	bne.w	80099ac <_dtoa_r+0x43c>
 800988e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009892:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009896:	ed8d 7b02 	vstr	d7, [sp, #8]
 800989a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800989c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098a0:	2900      	cmp	r1, #0
 80098a2:	f000 80b3 	beq.w	8009a0c <_dtoa_r+0x49c>
 80098a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80098aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80098ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b2:	f140 80ab 	bpl.w	8009a0c <_dtoa_r+0x49c>
 80098b6:	f1ba 0f00 	cmp.w	sl, #0
 80098ba:	f000 80a7 	beq.w	8009a0c <_dtoa_r+0x49c>
 80098be:	f1bb 0f00 	cmp.w	fp, #0
 80098c2:	dd30      	ble.n	8009926 <_dtoa_r+0x3b6>
 80098c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80098c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098d0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80098d4:	9105      	str	r1, [sp, #20]
 80098d6:	3201      	adds	r2, #1
 80098d8:	465c      	mov	r4, fp
 80098da:	ed9d 6b02 	vldr	d6, [sp, #8]
 80098de:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80098e2:	ee07 2a90 	vmov	s15, r2
 80098e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80098ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 80098ee:	ee15 2a90 	vmov	r2, s11
 80098f2:	ec51 0b15 	vmov	r0, r1, d5
 80098f6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80098fa:	2c00      	cmp	r4, #0
 80098fc:	f040 808a 	bne.w	8009a14 <_dtoa_r+0x4a4>
 8009900:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009904:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009908:	ec41 0b17 	vmov	d7, r0, r1
 800990c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009914:	f300 826a 	bgt.w	8009dec <_dtoa_r+0x87c>
 8009918:	eeb1 7b47 	vneg.f64	d7, d7
 800991c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009924:	d423      	bmi.n	800996e <_dtoa_r+0x3fe>
 8009926:	ed8d 8b02 	vstr	d8, [sp, #8]
 800992a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800992c:	2a00      	cmp	r2, #0
 800992e:	f2c0 8129 	blt.w	8009b84 <_dtoa_r+0x614>
 8009932:	f1b8 0f0e 	cmp.w	r8, #14
 8009936:	f300 8125 	bgt.w	8009b84 <_dtoa_r+0x614>
 800993a:	4b90      	ldr	r3, [pc, #576]	@ (8009b7c <_dtoa_r+0x60c>)
 800993c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009940:	ed93 6b00 	vldr	d6, [r3]
 8009944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009946:	2b00      	cmp	r3, #0
 8009948:	f280 80c8 	bge.w	8009adc <_dtoa_r+0x56c>
 800994c:	f1ba 0f00 	cmp.w	sl, #0
 8009950:	f300 80c4 	bgt.w	8009adc <_dtoa_r+0x56c>
 8009954:	d10b      	bne.n	800996e <_dtoa_r+0x3fe>
 8009956:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800995a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800995e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009962:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800996a:	f2c0 823c 	blt.w	8009de6 <_dtoa_r+0x876>
 800996e:	2400      	movs	r4, #0
 8009970:	4625      	mov	r5, r4
 8009972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009974:	43db      	mvns	r3, r3
 8009976:	9305      	str	r3, [sp, #20]
 8009978:	463e      	mov	r6, r7
 800997a:	f04f 0800 	mov.w	r8, #0
 800997e:	4621      	mov	r1, r4
 8009980:	4648      	mov	r0, r9
 8009982:	f000 fe37 	bl	800a5f4 <_Bfree>
 8009986:	2d00      	cmp	r5, #0
 8009988:	f000 80a2 	beq.w	8009ad0 <_dtoa_r+0x560>
 800998c:	f1b8 0f00 	cmp.w	r8, #0
 8009990:	d005      	beq.n	800999e <_dtoa_r+0x42e>
 8009992:	45a8      	cmp	r8, r5
 8009994:	d003      	beq.n	800999e <_dtoa_r+0x42e>
 8009996:	4641      	mov	r1, r8
 8009998:	4648      	mov	r0, r9
 800999a:	f000 fe2b 	bl	800a5f4 <_Bfree>
 800999e:	4629      	mov	r1, r5
 80099a0:	4648      	mov	r0, r9
 80099a2:	f000 fe27 	bl	800a5f4 <_Bfree>
 80099a6:	e093      	b.n	8009ad0 <_dtoa_r+0x560>
 80099a8:	2202      	movs	r2, #2
 80099aa:	e76c      	b.n	8009886 <_dtoa_r+0x316>
 80099ac:	07cc      	lsls	r4, r1, #31
 80099ae:	d504      	bpl.n	80099ba <_dtoa_r+0x44a>
 80099b0:	ed90 6b00 	vldr	d6, [r0]
 80099b4:	3201      	adds	r2, #1
 80099b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099ba:	1049      	asrs	r1, r1, #1
 80099bc:	3008      	adds	r0, #8
 80099be:	e763      	b.n	8009888 <_dtoa_r+0x318>
 80099c0:	d022      	beq.n	8009a08 <_dtoa_r+0x498>
 80099c2:	f1c8 0100 	rsb	r1, r8, #0
 80099c6:	4a6d      	ldr	r2, [pc, #436]	@ (8009b7c <_dtoa_r+0x60c>)
 80099c8:	f001 000f 	and.w	r0, r1, #15
 80099cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80099d0:	ed92 7b00 	vldr	d7, [r2]
 80099d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80099d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099dc:	4868      	ldr	r0, [pc, #416]	@ (8009b80 <_dtoa_r+0x610>)
 80099de:	1109      	asrs	r1, r1, #4
 80099e0:	2400      	movs	r4, #0
 80099e2:	2202      	movs	r2, #2
 80099e4:	b929      	cbnz	r1, 80099f2 <_dtoa_r+0x482>
 80099e6:	2c00      	cmp	r4, #0
 80099e8:	f43f af57 	beq.w	800989a <_dtoa_r+0x32a>
 80099ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099f0:	e753      	b.n	800989a <_dtoa_r+0x32a>
 80099f2:	07ce      	lsls	r6, r1, #31
 80099f4:	d505      	bpl.n	8009a02 <_dtoa_r+0x492>
 80099f6:	ed90 6b00 	vldr	d6, [r0]
 80099fa:	3201      	adds	r2, #1
 80099fc:	2401      	movs	r4, #1
 80099fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a02:	1049      	asrs	r1, r1, #1
 8009a04:	3008      	adds	r0, #8
 8009a06:	e7ed      	b.n	80099e4 <_dtoa_r+0x474>
 8009a08:	2202      	movs	r2, #2
 8009a0a:	e746      	b.n	800989a <_dtoa_r+0x32a>
 8009a0c:	f8cd 8014 	str.w	r8, [sp, #20]
 8009a10:	4654      	mov	r4, sl
 8009a12:	e762      	b.n	80098da <_dtoa_r+0x36a>
 8009a14:	4a59      	ldr	r2, [pc, #356]	@ (8009b7c <_dtoa_r+0x60c>)
 8009a16:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009a1a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009a1e:	9a08      	ldr	r2, [sp, #32]
 8009a20:	ec41 0b17 	vmov	d7, r0, r1
 8009a24:	443c      	add	r4, r7
 8009a26:	b34a      	cbz	r2, 8009a7c <_dtoa_r+0x50c>
 8009a28:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009a2c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009a30:	463e      	mov	r6, r7
 8009a32:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009a36:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009a3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009a3e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009a42:	ee14 2a90 	vmov	r2, s9
 8009a46:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009a4a:	3230      	adds	r2, #48	@ 0x30
 8009a4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009a50:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a58:	f806 2b01 	strb.w	r2, [r6], #1
 8009a5c:	d438      	bmi.n	8009ad0 <_dtoa_r+0x560>
 8009a5e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009a62:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6a:	d46e      	bmi.n	8009b4a <_dtoa_r+0x5da>
 8009a6c:	42a6      	cmp	r6, r4
 8009a6e:	f43f af5a 	beq.w	8009926 <_dtoa_r+0x3b6>
 8009a72:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009a76:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009a7a:	e7e0      	b.n	8009a3e <_dtoa_r+0x4ce>
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	463e      	mov	r6, r7
 8009a80:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a84:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009a88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009a8c:	ee14 2a90 	vmov	r2, s9
 8009a90:	3230      	adds	r2, #48	@ 0x30
 8009a92:	f806 2b01 	strb.w	r2, [r6], #1
 8009a96:	42a6      	cmp	r6, r4
 8009a98:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009a9c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009aa0:	d119      	bne.n	8009ad6 <_dtoa_r+0x566>
 8009aa2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009aa6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009aaa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab2:	dc4a      	bgt.n	8009b4a <_dtoa_r+0x5da>
 8009ab4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009ab8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac0:	f57f af31 	bpl.w	8009926 <_dtoa_r+0x3b6>
 8009ac4:	460e      	mov	r6, r1
 8009ac6:	3901      	subs	r1, #1
 8009ac8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009acc:	2b30      	cmp	r3, #48	@ 0x30
 8009ace:	d0f9      	beq.n	8009ac4 <_dtoa_r+0x554>
 8009ad0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009ad4:	e027      	b.n	8009b26 <_dtoa_r+0x5b6>
 8009ad6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ada:	e7d5      	b.n	8009a88 <_dtoa_r+0x518>
 8009adc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ae0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009ae4:	463e      	mov	r6, r7
 8009ae6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009aea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009aee:	ee15 3a10 	vmov	r3, s10
 8009af2:	3330      	adds	r3, #48	@ 0x30
 8009af4:	f806 3b01 	strb.w	r3, [r6], #1
 8009af8:	1bf3      	subs	r3, r6, r7
 8009afa:	459a      	cmp	sl, r3
 8009afc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009b00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009b04:	d132      	bne.n	8009b6c <_dtoa_r+0x5fc>
 8009b06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009b0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b12:	dc18      	bgt.n	8009b46 <_dtoa_r+0x5d6>
 8009b14:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1c:	d103      	bne.n	8009b26 <_dtoa_r+0x5b6>
 8009b1e:	ee15 3a10 	vmov	r3, s10
 8009b22:	07db      	lsls	r3, r3, #31
 8009b24:	d40f      	bmi.n	8009b46 <_dtoa_r+0x5d6>
 8009b26:	9901      	ldr	r1, [sp, #4]
 8009b28:	4648      	mov	r0, r9
 8009b2a:	f000 fd63 	bl	800a5f4 <_Bfree>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b32:	7033      	strb	r3, [r6, #0]
 8009b34:	f108 0301 	add.w	r3, r8, #1
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 824b 	beq.w	8009fd8 <_dtoa_r+0xa68>
 8009b42:	601e      	str	r6, [r3, #0]
 8009b44:	e248      	b.n	8009fd8 <_dtoa_r+0xa68>
 8009b46:	f8cd 8014 	str.w	r8, [sp, #20]
 8009b4a:	4633      	mov	r3, r6
 8009b4c:	461e      	mov	r6, r3
 8009b4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b52:	2a39      	cmp	r2, #57	@ 0x39
 8009b54:	d106      	bne.n	8009b64 <_dtoa_r+0x5f4>
 8009b56:	429f      	cmp	r7, r3
 8009b58:	d1f8      	bne.n	8009b4c <_dtoa_r+0x5dc>
 8009b5a:	9a05      	ldr	r2, [sp, #20]
 8009b5c:	3201      	adds	r2, #1
 8009b5e:	9205      	str	r2, [sp, #20]
 8009b60:	2230      	movs	r2, #48	@ 0x30
 8009b62:	703a      	strb	r2, [r7, #0]
 8009b64:	781a      	ldrb	r2, [r3, #0]
 8009b66:	3201      	adds	r2, #1
 8009b68:	701a      	strb	r2, [r3, #0]
 8009b6a:	e7b1      	b.n	8009ad0 <_dtoa_r+0x560>
 8009b6c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009b70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b78:	d1b5      	bne.n	8009ae6 <_dtoa_r+0x576>
 8009b7a:	e7d4      	b.n	8009b26 <_dtoa_r+0x5b6>
 8009b7c:	0800b3c0 	.word	0x0800b3c0
 8009b80:	0800b398 	.word	0x0800b398
 8009b84:	9908      	ldr	r1, [sp, #32]
 8009b86:	2900      	cmp	r1, #0
 8009b88:	f000 80e9 	beq.w	8009d5e <_dtoa_r+0x7ee>
 8009b8c:	9907      	ldr	r1, [sp, #28]
 8009b8e:	2901      	cmp	r1, #1
 8009b90:	f300 80cb 	bgt.w	8009d2a <_dtoa_r+0x7ba>
 8009b94:	2d00      	cmp	r5, #0
 8009b96:	f000 80c4 	beq.w	8009d22 <_dtoa_r+0x7b2>
 8009b9a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b9e:	9e04      	ldr	r6, [sp, #16]
 8009ba0:	461c      	mov	r4, r3
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	9304      	str	r3, [sp, #16]
 8009baa:	9b06      	ldr	r3, [sp, #24]
 8009bac:	2101      	movs	r1, #1
 8009bae:	4413      	add	r3, r2
 8009bb0:	4648      	mov	r0, r9
 8009bb2:	9306      	str	r3, [sp, #24]
 8009bb4:	f000 fdd2 	bl	800a75c <__i2b>
 8009bb8:	9b05      	ldr	r3, [sp, #20]
 8009bba:	4605      	mov	r5, r0
 8009bbc:	b166      	cbz	r6, 8009bd8 <_dtoa_r+0x668>
 8009bbe:	9a06      	ldr	r2, [sp, #24]
 8009bc0:	2a00      	cmp	r2, #0
 8009bc2:	dd09      	ble.n	8009bd8 <_dtoa_r+0x668>
 8009bc4:	42b2      	cmp	r2, r6
 8009bc6:	9904      	ldr	r1, [sp, #16]
 8009bc8:	bfa8      	it	ge
 8009bca:	4632      	movge	r2, r6
 8009bcc:	1a89      	subs	r1, r1, r2
 8009bce:	9104      	str	r1, [sp, #16]
 8009bd0:	9906      	ldr	r1, [sp, #24]
 8009bd2:	1ab6      	subs	r6, r6, r2
 8009bd4:	1a8a      	subs	r2, r1, r2
 8009bd6:	9206      	str	r2, [sp, #24]
 8009bd8:	b30b      	cbz	r3, 8009c1e <_dtoa_r+0x6ae>
 8009bda:	9a08      	ldr	r2, [sp, #32]
 8009bdc:	2a00      	cmp	r2, #0
 8009bde:	f000 80c5 	beq.w	8009d6c <_dtoa_r+0x7fc>
 8009be2:	2c00      	cmp	r4, #0
 8009be4:	f000 80bf 	beq.w	8009d66 <_dtoa_r+0x7f6>
 8009be8:	4629      	mov	r1, r5
 8009bea:	4622      	mov	r2, r4
 8009bec:	4648      	mov	r0, r9
 8009bee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bf0:	f000 fe6c 	bl	800a8cc <__pow5mult>
 8009bf4:	9a01      	ldr	r2, [sp, #4]
 8009bf6:	4601      	mov	r1, r0
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	4648      	mov	r0, r9
 8009bfc:	f000 fdc4 	bl	800a788 <__multiply>
 8009c00:	9901      	ldr	r1, [sp, #4]
 8009c02:	9005      	str	r0, [sp, #20]
 8009c04:	4648      	mov	r0, r9
 8009c06:	f000 fcf5 	bl	800a5f4 <_Bfree>
 8009c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c0c:	1b1b      	subs	r3, r3, r4
 8009c0e:	f000 80b0 	beq.w	8009d72 <_dtoa_r+0x802>
 8009c12:	9905      	ldr	r1, [sp, #20]
 8009c14:	461a      	mov	r2, r3
 8009c16:	4648      	mov	r0, r9
 8009c18:	f000 fe58 	bl	800a8cc <__pow5mult>
 8009c1c:	9001      	str	r0, [sp, #4]
 8009c1e:	2101      	movs	r1, #1
 8009c20:	4648      	mov	r0, r9
 8009c22:	f000 fd9b 	bl	800a75c <__i2b>
 8009c26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c28:	4604      	mov	r4, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 81da 	beq.w	8009fe4 <_dtoa_r+0xa74>
 8009c30:	461a      	mov	r2, r3
 8009c32:	4601      	mov	r1, r0
 8009c34:	4648      	mov	r0, r9
 8009c36:	f000 fe49 	bl	800a8cc <__pow5mult>
 8009c3a:	9b07      	ldr	r3, [sp, #28]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	4604      	mov	r4, r0
 8009c40:	f300 80a0 	bgt.w	8009d84 <_dtoa_r+0x814>
 8009c44:	9b02      	ldr	r3, [sp, #8]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f040 8096 	bne.w	8009d78 <_dtoa_r+0x808>
 8009c4c:	9b03      	ldr	r3, [sp, #12]
 8009c4e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009c52:	2a00      	cmp	r2, #0
 8009c54:	f040 8092 	bne.w	8009d7c <_dtoa_r+0x80c>
 8009c58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009c5c:	0d12      	lsrs	r2, r2, #20
 8009c5e:	0512      	lsls	r2, r2, #20
 8009c60:	2a00      	cmp	r2, #0
 8009c62:	f000 808d 	beq.w	8009d80 <_dtoa_r+0x810>
 8009c66:	9b04      	ldr	r3, [sp, #16]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	9304      	str	r3, [sp, #16]
 8009c6c:	9b06      	ldr	r3, [sp, #24]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	9306      	str	r3, [sp, #24]
 8009c72:	2301      	movs	r3, #1
 8009c74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 81b9 	beq.w	8009ff0 <_dtoa_r+0xa80>
 8009c7e:	6922      	ldr	r2, [r4, #16]
 8009c80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009c84:	6910      	ldr	r0, [r2, #16]
 8009c86:	f000 fd1d 	bl	800a6c4 <__hi0bits>
 8009c8a:	f1c0 0020 	rsb	r0, r0, #32
 8009c8e:	9b06      	ldr	r3, [sp, #24]
 8009c90:	4418      	add	r0, r3
 8009c92:	f010 001f 	ands.w	r0, r0, #31
 8009c96:	f000 8081 	beq.w	8009d9c <_dtoa_r+0x82c>
 8009c9a:	f1c0 0220 	rsb	r2, r0, #32
 8009c9e:	2a04      	cmp	r2, #4
 8009ca0:	dd73      	ble.n	8009d8a <_dtoa_r+0x81a>
 8009ca2:	9b04      	ldr	r3, [sp, #16]
 8009ca4:	f1c0 001c 	rsb	r0, r0, #28
 8009ca8:	4403      	add	r3, r0
 8009caa:	9304      	str	r3, [sp, #16]
 8009cac:	9b06      	ldr	r3, [sp, #24]
 8009cae:	4406      	add	r6, r0
 8009cb0:	4403      	add	r3, r0
 8009cb2:	9306      	str	r3, [sp, #24]
 8009cb4:	9b04      	ldr	r3, [sp, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dd05      	ble.n	8009cc6 <_dtoa_r+0x756>
 8009cba:	9901      	ldr	r1, [sp, #4]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4648      	mov	r0, r9
 8009cc0:	f000 fe5e 	bl	800a980 <__lshift>
 8009cc4:	9001      	str	r0, [sp, #4]
 8009cc6:	9b06      	ldr	r3, [sp, #24]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	dd05      	ble.n	8009cd8 <_dtoa_r+0x768>
 8009ccc:	4621      	mov	r1, r4
 8009cce:	461a      	mov	r2, r3
 8009cd0:	4648      	mov	r0, r9
 8009cd2:	f000 fe55 	bl	800a980 <__lshift>
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d060      	beq.n	8009da0 <_dtoa_r+0x830>
 8009cde:	9801      	ldr	r0, [sp, #4]
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	f000 feb9 	bl	800aa58 <__mcmp>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	da5a      	bge.n	8009da0 <_dtoa_r+0x830>
 8009cea:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8009cee:	9305      	str	r3, [sp, #20]
 8009cf0:	9901      	ldr	r1, [sp, #4]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	220a      	movs	r2, #10
 8009cf6:	4648      	mov	r0, r9
 8009cf8:	f000 fc9e 	bl	800a638 <__multadd>
 8009cfc:	9b08      	ldr	r3, [sp, #32]
 8009cfe:	9001      	str	r0, [sp, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 8177 	beq.w	8009ff4 <_dtoa_r+0xa84>
 8009d06:	4629      	mov	r1, r5
 8009d08:	2300      	movs	r3, #0
 8009d0a:	220a      	movs	r2, #10
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	f000 fc93 	bl	800a638 <__multadd>
 8009d12:	f1bb 0f00 	cmp.w	fp, #0
 8009d16:	4605      	mov	r5, r0
 8009d18:	dc6e      	bgt.n	8009df8 <_dtoa_r+0x888>
 8009d1a:	9b07      	ldr	r3, [sp, #28]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	dc48      	bgt.n	8009db2 <_dtoa_r+0x842>
 8009d20:	e06a      	b.n	8009df8 <_dtoa_r+0x888>
 8009d22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009d28:	e739      	b.n	8009b9e <_dtoa_r+0x62e>
 8009d2a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8009d2e:	42a3      	cmp	r3, r4
 8009d30:	db07      	blt.n	8009d42 <_dtoa_r+0x7d2>
 8009d32:	f1ba 0f00 	cmp.w	sl, #0
 8009d36:	eba3 0404 	sub.w	r4, r3, r4
 8009d3a:	db0b      	blt.n	8009d54 <_dtoa_r+0x7e4>
 8009d3c:	9e04      	ldr	r6, [sp, #16]
 8009d3e:	4652      	mov	r2, sl
 8009d40:	e72f      	b.n	8009ba2 <_dtoa_r+0x632>
 8009d42:	1ae2      	subs	r2, r4, r3
 8009d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d46:	9e04      	ldr	r6, [sp, #16]
 8009d48:	4413      	add	r3, r2
 8009d4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d4c:	4652      	mov	r2, sl
 8009d4e:	4623      	mov	r3, r4
 8009d50:	2400      	movs	r4, #0
 8009d52:	e726      	b.n	8009ba2 <_dtoa_r+0x632>
 8009d54:	9a04      	ldr	r2, [sp, #16]
 8009d56:	eba2 060a 	sub.w	r6, r2, sl
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	e721      	b.n	8009ba2 <_dtoa_r+0x632>
 8009d5e:	9e04      	ldr	r6, [sp, #16]
 8009d60:	9d08      	ldr	r5, [sp, #32]
 8009d62:	461c      	mov	r4, r3
 8009d64:	e72a      	b.n	8009bbc <_dtoa_r+0x64c>
 8009d66:	9a01      	ldr	r2, [sp, #4]
 8009d68:	9205      	str	r2, [sp, #20]
 8009d6a:	e752      	b.n	8009c12 <_dtoa_r+0x6a2>
 8009d6c:	9901      	ldr	r1, [sp, #4]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	e751      	b.n	8009c16 <_dtoa_r+0x6a6>
 8009d72:	9b05      	ldr	r3, [sp, #20]
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	e752      	b.n	8009c1e <_dtoa_r+0x6ae>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	e77b      	b.n	8009c74 <_dtoa_r+0x704>
 8009d7c:	9b02      	ldr	r3, [sp, #8]
 8009d7e:	e779      	b.n	8009c74 <_dtoa_r+0x704>
 8009d80:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009d82:	e778      	b.n	8009c76 <_dtoa_r+0x706>
 8009d84:	2300      	movs	r3, #0
 8009d86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d88:	e779      	b.n	8009c7e <_dtoa_r+0x70e>
 8009d8a:	d093      	beq.n	8009cb4 <_dtoa_r+0x744>
 8009d8c:	9b04      	ldr	r3, [sp, #16]
 8009d8e:	321c      	adds	r2, #28
 8009d90:	4413      	add	r3, r2
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	9b06      	ldr	r3, [sp, #24]
 8009d96:	4416      	add	r6, r2
 8009d98:	4413      	add	r3, r2
 8009d9a:	e78a      	b.n	8009cb2 <_dtoa_r+0x742>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	e7f5      	b.n	8009d8c <_dtoa_r+0x81c>
 8009da0:	f1ba 0f00 	cmp.w	sl, #0
 8009da4:	f8cd 8014 	str.w	r8, [sp, #20]
 8009da8:	46d3      	mov	fp, sl
 8009daa:	dc21      	bgt.n	8009df0 <_dtoa_r+0x880>
 8009dac:	9b07      	ldr	r3, [sp, #28]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	dd1e      	ble.n	8009df0 <_dtoa_r+0x880>
 8009db2:	f1bb 0f00 	cmp.w	fp, #0
 8009db6:	f47f addc 	bne.w	8009972 <_dtoa_r+0x402>
 8009dba:	4621      	mov	r1, r4
 8009dbc:	465b      	mov	r3, fp
 8009dbe:	2205      	movs	r2, #5
 8009dc0:	4648      	mov	r0, r9
 8009dc2:	f000 fc39 	bl	800a638 <__multadd>
 8009dc6:	4601      	mov	r1, r0
 8009dc8:	4604      	mov	r4, r0
 8009dca:	9801      	ldr	r0, [sp, #4]
 8009dcc:	f000 fe44 	bl	800aa58 <__mcmp>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f77f adce 	ble.w	8009972 <_dtoa_r+0x402>
 8009dd6:	463e      	mov	r6, r7
 8009dd8:	2331      	movs	r3, #49	@ 0x31
 8009dda:	f806 3b01 	strb.w	r3, [r6], #1
 8009dde:	9b05      	ldr	r3, [sp, #20]
 8009de0:	3301      	adds	r3, #1
 8009de2:	9305      	str	r3, [sp, #20]
 8009de4:	e5c9      	b.n	800997a <_dtoa_r+0x40a>
 8009de6:	f8cd 8014 	str.w	r8, [sp, #20]
 8009dea:	4654      	mov	r4, sl
 8009dec:	4625      	mov	r5, r4
 8009dee:	e7f2      	b.n	8009dd6 <_dtoa_r+0x866>
 8009df0:	9b08      	ldr	r3, [sp, #32]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 8102 	beq.w	8009ffc <_dtoa_r+0xa8c>
 8009df8:	2e00      	cmp	r6, #0
 8009dfa:	dd05      	ble.n	8009e08 <_dtoa_r+0x898>
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	4632      	mov	r2, r6
 8009e00:	4648      	mov	r0, r9
 8009e02:	f000 fdbd 	bl	800a980 <__lshift>
 8009e06:	4605      	mov	r5, r0
 8009e08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d058      	beq.n	8009ec0 <_dtoa_r+0x950>
 8009e0e:	6869      	ldr	r1, [r5, #4]
 8009e10:	4648      	mov	r0, r9
 8009e12:	f000 fbaf 	bl	800a574 <_Balloc>
 8009e16:	4606      	mov	r6, r0
 8009e18:	b928      	cbnz	r0, 8009e26 <_dtoa_r+0x8b6>
 8009e1a:	4b82      	ldr	r3, [pc, #520]	@ (800a024 <_dtoa_r+0xab4>)
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e22:	f7ff bbbe 	b.w	80095a2 <_dtoa_r+0x32>
 8009e26:	692a      	ldr	r2, [r5, #16]
 8009e28:	3202      	adds	r2, #2
 8009e2a:	0092      	lsls	r2, r2, #2
 8009e2c:	f105 010c 	add.w	r1, r5, #12
 8009e30:	300c      	adds	r0, #12
 8009e32:	f001 f8cb 	bl	800afcc <memcpy>
 8009e36:	2201      	movs	r2, #1
 8009e38:	4631      	mov	r1, r6
 8009e3a:	4648      	mov	r0, r9
 8009e3c:	f000 fda0 	bl	800a980 <__lshift>
 8009e40:	1c7b      	adds	r3, r7, #1
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	eb07 030b 	add.w	r3, r7, fp
 8009e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e4a:	9b02      	ldr	r3, [sp, #8]
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	46a8      	mov	r8, r5
 8009e52:	9308      	str	r3, [sp, #32]
 8009e54:	4605      	mov	r5, r0
 8009e56:	9b04      	ldr	r3, [sp, #16]
 8009e58:	9801      	ldr	r0, [sp, #4]
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009e60:	f7ff fafe 	bl	8009460 <quorem>
 8009e64:	4641      	mov	r1, r8
 8009e66:	9002      	str	r0, [sp, #8]
 8009e68:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009e6c:	9801      	ldr	r0, [sp, #4]
 8009e6e:	f000 fdf3 	bl	800aa58 <__mcmp>
 8009e72:	462a      	mov	r2, r5
 8009e74:	9006      	str	r0, [sp, #24]
 8009e76:	4621      	mov	r1, r4
 8009e78:	4648      	mov	r0, r9
 8009e7a:	f000 fe09 	bl	800aa90 <__mdiff>
 8009e7e:	68c2      	ldr	r2, [r0, #12]
 8009e80:	4606      	mov	r6, r0
 8009e82:	b9fa      	cbnz	r2, 8009ec4 <_dtoa_r+0x954>
 8009e84:	4601      	mov	r1, r0
 8009e86:	9801      	ldr	r0, [sp, #4]
 8009e88:	f000 fde6 	bl	800aa58 <__mcmp>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4648      	mov	r0, r9
 8009e92:	920a      	str	r2, [sp, #40]	@ 0x28
 8009e94:	f000 fbae 	bl	800a5f4 <_Bfree>
 8009e98:	9b07      	ldr	r3, [sp, #28]
 8009e9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e9c:	9e04      	ldr	r6, [sp, #16]
 8009e9e:	ea42 0103 	orr.w	r1, r2, r3
 8009ea2:	9b08      	ldr	r3, [sp, #32]
 8009ea4:	4319      	orrs	r1, r3
 8009ea6:	d10f      	bne.n	8009ec8 <_dtoa_r+0x958>
 8009ea8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009eac:	d028      	beq.n	8009f00 <_dtoa_r+0x990>
 8009eae:	9b06      	ldr	r3, [sp, #24]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dd02      	ble.n	8009eba <_dtoa_r+0x94a>
 8009eb4:	9b02      	ldr	r3, [sp, #8]
 8009eb6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009eba:	f88b a000 	strb.w	sl, [fp]
 8009ebe:	e55e      	b.n	800997e <_dtoa_r+0x40e>
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	e7bd      	b.n	8009e40 <_dtoa_r+0x8d0>
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	e7e2      	b.n	8009e8e <_dtoa_r+0x91e>
 8009ec8:	9b06      	ldr	r3, [sp, #24]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	db04      	blt.n	8009ed8 <_dtoa_r+0x968>
 8009ece:	9907      	ldr	r1, [sp, #28]
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	9908      	ldr	r1, [sp, #32]
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	d120      	bne.n	8009f1a <_dtoa_r+0x9aa>
 8009ed8:	2a00      	cmp	r2, #0
 8009eda:	ddee      	ble.n	8009eba <_dtoa_r+0x94a>
 8009edc:	9901      	ldr	r1, [sp, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	4648      	mov	r0, r9
 8009ee2:	f000 fd4d 	bl	800a980 <__lshift>
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	9001      	str	r0, [sp, #4]
 8009eea:	f000 fdb5 	bl	800aa58 <__mcmp>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	dc03      	bgt.n	8009efa <_dtoa_r+0x98a>
 8009ef2:	d1e2      	bne.n	8009eba <_dtoa_r+0x94a>
 8009ef4:	f01a 0f01 	tst.w	sl, #1
 8009ef8:	d0df      	beq.n	8009eba <_dtoa_r+0x94a>
 8009efa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009efe:	d1d9      	bne.n	8009eb4 <_dtoa_r+0x944>
 8009f00:	2339      	movs	r3, #57	@ 0x39
 8009f02:	f88b 3000 	strb.w	r3, [fp]
 8009f06:	4633      	mov	r3, r6
 8009f08:	461e      	mov	r6, r3
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f10:	2a39      	cmp	r2, #57	@ 0x39
 8009f12:	d052      	beq.n	8009fba <_dtoa_r+0xa4a>
 8009f14:	3201      	adds	r2, #1
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	e531      	b.n	800997e <_dtoa_r+0x40e>
 8009f1a:	2a00      	cmp	r2, #0
 8009f1c:	dd07      	ble.n	8009f2e <_dtoa_r+0x9be>
 8009f1e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009f22:	d0ed      	beq.n	8009f00 <_dtoa_r+0x990>
 8009f24:	f10a 0301 	add.w	r3, sl, #1
 8009f28:	f88b 3000 	strb.w	r3, [fp]
 8009f2c:	e527      	b.n	800997e <_dtoa_r+0x40e>
 8009f2e:	9b04      	ldr	r3, [sp, #16]
 8009f30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f32:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d029      	beq.n	8009f8e <_dtoa_r+0xa1e>
 8009f3a:	9901      	ldr	r1, [sp, #4]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	220a      	movs	r2, #10
 8009f40:	4648      	mov	r0, r9
 8009f42:	f000 fb79 	bl	800a638 <__multadd>
 8009f46:	45a8      	cmp	r8, r5
 8009f48:	9001      	str	r0, [sp, #4]
 8009f4a:	f04f 0300 	mov.w	r3, #0
 8009f4e:	f04f 020a 	mov.w	r2, #10
 8009f52:	4641      	mov	r1, r8
 8009f54:	4648      	mov	r0, r9
 8009f56:	d107      	bne.n	8009f68 <_dtoa_r+0x9f8>
 8009f58:	f000 fb6e 	bl	800a638 <__multadd>
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	4605      	mov	r5, r0
 8009f60:	9b04      	ldr	r3, [sp, #16]
 8009f62:	3301      	adds	r3, #1
 8009f64:	9304      	str	r3, [sp, #16]
 8009f66:	e776      	b.n	8009e56 <_dtoa_r+0x8e6>
 8009f68:	f000 fb66 	bl	800a638 <__multadd>
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	4680      	mov	r8, r0
 8009f70:	2300      	movs	r3, #0
 8009f72:	220a      	movs	r2, #10
 8009f74:	4648      	mov	r0, r9
 8009f76:	f000 fb5f 	bl	800a638 <__multadd>
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	e7f0      	b.n	8009f60 <_dtoa_r+0x9f0>
 8009f7e:	f1bb 0f00 	cmp.w	fp, #0
 8009f82:	bfcc      	ite	gt
 8009f84:	465e      	movgt	r6, fp
 8009f86:	2601      	movle	r6, #1
 8009f88:	443e      	add	r6, r7
 8009f8a:	f04f 0800 	mov.w	r8, #0
 8009f8e:	9901      	ldr	r1, [sp, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	4648      	mov	r0, r9
 8009f94:	f000 fcf4 	bl	800a980 <__lshift>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	9001      	str	r0, [sp, #4]
 8009f9c:	f000 fd5c 	bl	800aa58 <__mcmp>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	dcb0      	bgt.n	8009f06 <_dtoa_r+0x996>
 8009fa4:	d102      	bne.n	8009fac <_dtoa_r+0xa3c>
 8009fa6:	f01a 0f01 	tst.w	sl, #1
 8009faa:	d1ac      	bne.n	8009f06 <_dtoa_r+0x996>
 8009fac:	4633      	mov	r3, r6
 8009fae:	461e      	mov	r6, r3
 8009fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fb4:	2a30      	cmp	r2, #48	@ 0x30
 8009fb6:	d0fa      	beq.n	8009fae <_dtoa_r+0xa3e>
 8009fb8:	e4e1      	b.n	800997e <_dtoa_r+0x40e>
 8009fba:	429f      	cmp	r7, r3
 8009fbc:	d1a4      	bne.n	8009f08 <_dtoa_r+0x998>
 8009fbe:	9b05      	ldr	r3, [sp, #20]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	9305      	str	r3, [sp, #20]
 8009fc4:	2331      	movs	r3, #49	@ 0x31
 8009fc6:	703b      	strb	r3, [r7, #0]
 8009fc8:	e4d9      	b.n	800997e <_dtoa_r+0x40e>
 8009fca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009fcc:	4f16      	ldr	r7, [pc, #88]	@ (800a028 <_dtoa_r+0xab8>)
 8009fce:	b11b      	cbz	r3, 8009fd8 <_dtoa_r+0xa68>
 8009fd0:	f107 0308 	add.w	r3, r7, #8
 8009fd4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	4638      	mov	r0, r7
 8009fda:	b011      	add	sp, #68	@ 0x44
 8009fdc:	ecbd 8b02 	vpop	{d8}
 8009fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe4:	9b07      	ldr	r3, [sp, #28]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	f77f ae2c 	ble.w	8009c44 <_dtoa_r+0x6d4>
 8009fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	e64c      	b.n	8009c8e <_dtoa_r+0x71e>
 8009ff4:	f1bb 0f00 	cmp.w	fp, #0
 8009ff8:	f77f aed8 	ble.w	8009dac <_dtoa_r+0x83c>
 8009ffc:	463e      	mov	r6, r7
 8009ffe:	9801      	ldr	r0, [sp, #4]
 800a000:	4621      	mov	r1, r4
 800a002:	f7ff fa2d 	bl	8009460 <quorem>
 800a006:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a00a:	f806 ab01 	strb.w	sl, [r6], #1
 800a00e:	1bf2      	subs	r2, r6, r7
 800a010:	4593      	cmp	fp, r2
 800a012:	ddb4      	ble.n	8009f7e <_dtoa_r+0xa0e>
 800a014:	9901      	ldr	r1, [sp, #4]
 800a016:	2300      	movs	r3, #0
 800a018:	220a      	movs	r2, #10
 800a01a:	4648      	mov	r0, r9
 800a01c:	f000 fb0c 	bl	800a638 <__multadd>
 800a020:	9001      	str	r0, [sp, #4]
 800a022:	e7ec      	b.n	8009ffe <_dtoa_r+0xa8e>
 800a024:	0800b2c4 	.word	0x0800b2c4
 800a028:	0800b248 	.word	0x0800b248

0800a02c <__sfputc_r>:
 800a02c:	6893      	ldr	r3, [r2, #8]
 800a02e:	3b01      	subs	r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	b410      	push	{r4}
 800a034:	6093      	str	r3, [r2, #8]
 800a036:	da08      	bge.n	800a04a <__sfputc_r+0x1e>
 800a038:	6994      	ldr	r4, [r2, #24]
 800a03a:	42a3      	cmp	r3, r4
 800a03c:	db01      	blt.n	800a042 <__sfputc_r+0x16>
 800a03e:	290a      	cmp	r1, #10
 800a040:	d103      	bne.n	800a04a <__sfputc_r+0x1e>
 800a042:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a046:	f000 be52 	b.w	800acee <__swbuf_r>
 800a04a:	6813      	ldr	r3, [r2, #0]
 800a04c:	1c58      	adds	r0, r3, #1
 800a04e:	6010      	str	r0, [r2, #0]
 800a050:	7019      	strb	r1, [r3, #0]
 800a052:	4608      	mov	r0, r1
 800a054:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <__sfputs_r>:
 800a05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05c:	4606      	mov	r6, r0
 800a05e:	460f      	mov	r7, r1
 800a060:	4614      	mov	r4, r2
 800a062:	18d5      	adds	r5, r2, r3
 800a064:	42ac      	cmp	r4, r5
 800a066:	d101      	bne.n	800a06c <__sfputs_r+0x12>
 800a068:	2000      	movs	r0, #0
 800a06a:	e007      	b.n	800a07c <__sfputs_r+0x22>
 800a06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a070:	463a      	mov	r2, r7
 800a072:	4630      	mov	r0, r6
 800a074:	f7ff ffda 	bl	800a02c <__sfputc_r>
 800a078:	1c43      	adds	r3, r0, #1
 800a07a:	d1f3      	bne.n	800a064 <__sfputs_r+0xa>
 800a07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a080 <_vfiprintf_r>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	460d      	mov	r5, r1
 800a086:	b09d      	sub	sp, #116	@ 0x74
 800a088:	4614      	mov	r4, r2
 800a08a:	4698      	mov	r8, r3
 800a08c:	4606      	mov	r6, r0
 800a08e:	b118      	cbz	r0, 800a098 <_vfiprintf_r+0x18>
 800a090:	6a03      	ldr	r3, [r0, #32]
 800a092:	b90b      	cbnz	r3, 800a098 <_vfiprintf_r+0x18>
 800a094:	f7ff f962 	bl	800935c <__sinit>
 800a098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a09a:	07d9      	lsls	r1, r3, #31
 800a09c:	d405      	bmi.n	800a0aa <_vfiprintf_r+0x2a>
 800a09e:	89ab      	ldrh	r3, [r5, #12]
 800a0a0:	059a      	lsls	r2, r3, #22
 800a0a2:	d402      	bmi.n	800a0aa <_vfiprintf_r+0x2a>
 800a0a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0a6:	f7ff f9d4 	bl	8009452 <__retarget_lock_acquire_recursive>
 800a0aa:	89ab      	ldrh	r3, [r5, #12]
 800a0ac:	071b      	lsls	r3, r3, #28
 800a0ae:	d501      	bpl.n	800a0b4 <_vfiprintf_r+0x34>
 800a0b0:	692b      	ldr	r3, [r5, #16]
 800a0b2:	b99b      	cbnz	r3, 800a0dc <_vfiprintf_r+0x5c>
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f000 fe58 	bl	800ad6c <__swsetup_r>
 800a0bc:	b170      	cbz	r0, 800a0dc <_vfiprintf_r+0x5c>
 800a0be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0c0:	07dc      	lsls	r4, r3, #31
 800a0c2:	d504      	bpl.n	800a0ce <_vfiprintf_r+0x4e>
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0c8:	b01d      	add	sp, #116	@ 0x74
 800a0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ce:	89ab      	ldrh	r3, [r5, #12]
 800a0d0:	0598      	lsls	r0, r3, #22
 800a0d2:	d4f7      	bmi.n	800a0c4 <_vfiprintf_r+0x44>
 800a0d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0d6:	f7ff f9bd 	bl	8009454 <__retarget_lock_release_recursive>
 800a0da:	e7f3      	b.n	800a0c4 <_vfiprintf_r+0x44>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0e0:	2320      	movs	r3, #32
 800a0e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0ea:	2330      	movs	r3, #48	@ 0x30
 800a0ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a29c <_vfiprintf_r+0x21c>
 800a0f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0f4:	f04f 0901 	mov.w	r9, #1
 800a0f8:	4623      	mov	r3, r4
 800a0fa:	469a      	mov	sl, r3
 800a0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a100:	b10a      	cbz	r2, 800a106 <_vfiprintf_r+0x86>
 800a102:	2a25      	cmp	r2, #37	@ 0x25
 800a104:	d1f9      	bne.n	800a0fa <_vfiprintf_r+0x7a>
 800a106:	ebba 0b04 	subs.w	fp, sl, r4
 800a10a:	d00b      	beq.n	800a124 <_vfiprintf_r+0xa4>
 800a10c:	465b      	mov	r3, fp
 800a10e:	4622      	mov	r2, r4
 800a110:	4629      	mov	r1, r5
 800a112:	4630      	mov	r0, r6
 800a114:	f7ff ffa1 	bl	800a05a <__sfputs_r>
 800a118:	3001      	adds	r0, #1
 800a11a:	f000 80a7 	beq.w	800a26c <_vfiprintf_r+0x1ec>
 800a11e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a120:	445a      	add	r2, fp
 800a122:	9209      	str	r2, [sp, #36]	@ 0x24
 800a124:	f89a 3000 	ldrb.w	r3, [sl]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 809f 	beq.w	800a26c <_vfiprintf_r+0x1ec>
 800a12e:	2300      	movs	r3, #0
 800a130:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a138:	f10a 0a01 	add.w	sl, sl, #1
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a144:	931a      	str	r3, [sp, #104]	@ 0x68
 800a146:	4654      	mov	r4, sl
 800a148:	2205      	movs	r2, #5
 800a14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14e:	4853      	ldr	r0, [pc, #332]	@ (800a29c <_vfiprintf_r+0x21c>)
 800a150:	f7f6 f8c6 	bl	80002e0 <memchr>
 800a154:	9a04      	ldr	r2, [sp, #16]
 800a156:	b9d8      	cbnz	r0, 800a190 <_vfiprintf_r+0x110>
 800a158:	06d1      	lsls	r1, r2, #27
 800a15a:	bf44      	itt	mi
 800a15c:	2320      	movmi	r3, #32
 800a15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a162:	0713      	lsls	r3, r2, #28
 800a164:	bf44      	itt	mi
 800a166:	232b      	movmi	r3, #43	@ 0x2b
 800a168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a16c:	f89a 3000 	ldrb.w	r3, [sl]
 800a170:	2b2a      	cmp	r3, #42	@ 0x2a
 800a172:	d015      	beq.n	800a1a0 <_vfiprintf_r+0x120>
 800a174:	9a07      	ldr	r2, [sp, #28]
 800a176:	4654      	mov	r4, sl
 800a178:	2000      	movs	r0, #0
 800a17a:	f04f 0c0a 	mov.w	ip, #10
 800a17e:	4621      	mov	r1, r4
 800a180:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a184:	3b30      	subs	r3, #48	@ 0x30
 800a186:	2b09      	cmp	r3, #9
 800a188:	d94b      	bls.n	800a222 <_vfiprintf_r+0x1a2>
 800a18a:	b1b0      	cbz	r0, 800a1ba <_vfiprintf_r+0x13a>
 800a18c:	9207      	str	r2, [sp, #28]
 800a18e:	e014      	b.n	800a1ba <_vfiprintf_r+0x13a>
 800a190:	eba0 0308 	sub.w	r3, r0, r8
 800a194:	fa09 f303 	lsl.w	r3, r9, r3
 800a198:	4313      	orrs	r3, r2
 800a19a:	9304      	str	r3, [sp, #16]
 800a19c:	46a2      	mov	sl, r4
 800a19e:	e7d2      	b.n	800a146 <_vfiprintf_r+0xc6>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	1d19      	adds	r1, r3, #4
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	9103      	str	r1, [sp, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bfbb      	ittet	lt
 800a1ac:	425b      	neglt	r3, r3
 800a1ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a1b2:	9307      	strge	r3, [sp, #28]
 800a1b4:	9307      	strlt	r3, [sp, #28]
 800a1b6:	bfb8      	it	lt
 800a1b8:	9204      	strlt	r2, [sp, #16]
 800a1ba:	7823      	ldrb	r3, [r4, #0]
 800a1bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1be:	d10a      	bne.n	800a1d6 <_vfiprintf_r+0x156>
 800a1c0:	7863      	ldrb	r3, [r4, #1]
 800a1c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1c4:	d132      	bne.n	800a22c <_vfiprintf_r+0x1ac>
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	1d1a      	adds	r2, r3, #4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	9203      	str	r2, [sp, #12]
 800a1ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1d2:	3402      	adds	r4, #2
 800a1d4:	9305      	str	r3, [sp, #20]
 800a1d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a2ac <_vfiprintf_r+0x22c>
 800a1da:	7821      	ldrb	r1, [r4, #0]
 800a1dc:	2203      	movs	r2, #3
 800a1de:	4650      	mov	r0, sl
 800a1e0:	f7f6 f87e 	bl	80002e0 <memchr>
 800a1e4:	b138      	cbz	r0, 800a1f6 <_vfiprintf_r+0x176>
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	eba0 000a 	sub.w	r0, r0, sl
 800a1ec:	2240      	movs	r2, #64	@ 0x40
 800a1ee:	4082      	lsls	r2, r0
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	3401      	adds	r4, #1
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fa:	4829      	ldr	r0, [pc, #164]	@ (800a2a0 <_vfiprintf_r+0x220>)
 800a1fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a200:	2206      	movs	r2, #6
 800a202:	f7f6 f86d 	bl	80002e0 <memchr>
 800a206:	2800      	cmp	r0, #0
 800a208:	d03f      	beq.n	800a28a <_vfiprintf_r+0x20a>
 800a20a:	4b26      	ldr	r3, [pc, #152]	@ (800a2a4 <_vfiprintf_r+0x224>)
 800a20c:	bb1b      	cbnz	r3, 800a256 <_vfiprintf_r+0x1d6>
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	3307      	adds	r3, #7
 800a212:	f023 0307 	bic.w	r3, r3, #7
 800a216:	3308      	adds	r3, #8
 800a218:	9303      	str	r3, [sp, #12]
 800a21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21c:	443b      	add	r3, r7
 800a21e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a220:	e76a      	b.n	800a0f8 <_vfiprintf_r+0x78>
 800a222:	fb0c 3202 	mla	r2, ip, r2, r3
 800a226:	460c      	mov	r4, r1
 800a228:	2001      	movs	r0, #1
 800a22a:	e7a8      	b.n	800a17e <_vfiprintf_r+0xfe>
 800a22c:	2300      	movs	r3, #0
 800a22e:	3401      	adds	r4, #1
 800a230:	9305      	str	r3, [sp, #20]
 800a232:	4619      	mov	r1, r3
 800a234:	f04f 0c0a 	mov.w	ip, #10
 800a238:	4620      	mov	r0, r4
 800a23a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a23e:	3a30      	subs	r2, #48	@ 0x30
 800a240:	2a09      	cmp	r2, #9
 800a242:	d903      	bls.n	800a24c <_vfiprintf_r+0x1cc>
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0c6      	beq.n	800a1d6 <_vfiprintf_r+0x156>
 800a248:	9105      	str	r1, [sp, #20]
 800a24a:	e7c4      	b.n	800a1d6 <_vfiprintf_r+0x156>
 800a24c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a250:	4604      	mov	r4, r0
 800a252:	2301      	movs	r3, #1
 800a254:	e7f0      	b.n	800a238 <_vfiprintf_r+0x1b8>
 800a256:	ab03      	add	r3, sp, #12
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	462a      	mov	r2, r5
 800a25c:	4b12      	ldr	r3, [pc, #72]	@ (800a2a8 <_vfiprintf_r+0x228>)
 800a25e:	a904      	add	r1, sp, #16
 800a260:	4630      	mov	r0, r6
 800a262:	f7fe fc49 	bl	8008af8 <_printf_float>
 800a266:	4607      	mov	r7, r0
 800a268:	1c78      	adds	r0, r7, #1
 800a26a:	d1d6      	bne.n	800a21a <_vfiprintf_r+0x19a>
 800a26c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a26e:	07d9      	lsls	r1, r3, #31
 800a270:	d405      	bmi.n	800a27e <_vfiprintf_r+0x1fe>
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	059a      	lsls	r2, r3, #22
 800a276:	d402      	bmi.n	800a27e <_vfiprintf_r+0x1fe>
 800a278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a27a:	f7ff f8eb 	bl	8009454 <__retarget_lock_release_recursive>
 800a27e:	89ab      	ldrh	r3, [r5, #12]
 800a280:	065b      	lsls	r3, r3, #25
 800a282:	f53f af1f 	bmi.w	800a0c4 <_vfiprintf_r+0x44>
 800a286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a288:	e71e      	b.n	800a0c8 <_vfiprintf_r+0x48>
 800a28a:	ab03      	add	r3, sp, #12
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	462a      	mov	r2, r5
 800a290:	4b05      	ldr	r3, [pc, #20]	@ (800a2a8 <_vfiprintf_r+0x228>)
 800a292:	a904      	add	r1, sp, #16
 800a294:	4630      	mov	r0, r6
 800a296:	f7fe feb7 	bl	8009008 <_printf_i>
 800a29a:	e7e4      	b.n	800a266 <_vfiprintf_r+0x1e6>
 800a29c:	0800b2d5 	.word	0x0800b2d5
 800a2a0:	0800b2df 	.word	0x0800b2df
 800a2a4:	08008af9 	.word	0x08008af9
 800a2a8:	0800a05b 	.word	0x0800a05b
 800a2ac:	0800b2db 	.word	0x0800b2db

0800a2b0 <malloc>:
 800a2b0:	4b02      	ldr	r3, [pc, #8]	@ (800a2bc <malloc+0xc>)
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	6818      	ldr	r0, [r3, #0]
 800a2b6:	f000 b825 	b.w	800a304 <_malloc_r>
 800a2ba:	bf00      	nop
 800a2bc:	2400001c 	.word	0x2400001c

0800a2c0 <sbrk_aligned>:
 800a2c0:	b570      	push	{r4, r5, r6, lr}
 800a2c2:	4e0f      	ldr	r6, [pc, #60]	@ (800a300 <sbrk_aligned+0x40>)
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	6831      	ldr	r1, [r6, #0]
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	b911      	cbnz	r1, 800a2d2 <sbrk_aligned+0x12>
 800a2cc:	f000 fe3a 	bl	800af44 <_sbrk_r>
 800a2d0:	6030      	str	r0, [r6, #0]
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 fe35 	bl	800af44 <_sbrk_r>
 800a2da:	1c43      	adds	r3, r0, #1
 800a2dc:	d103      	bne.n	800a2e6 <sbrk_aligned+0x26>
 800a2de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	bd70      	pop	{r4, r5, r6, pc}
 800a2e6:	1cc4      	adds	r4, r0, #3
 800a2e8:	f024 0403 	bic.w	r4, r4, #3
 800a2ec:	42a0      	cmp	r0, r4
 800a2ee:	d0f8      	beq.n	800a2e2 <sbrk_aligned+0x22>
 800a2f0:	1a21      	subs	r1, r4, r0
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f000 fe26 	bl	800af44 <_sbrk_r>
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d1f2      	bne.n	800a2e2 <sbrk_aligned+0x22>
 800a2fc:	e7ef      	b.n	800a2de <sbrk_aligned+0x1e>
 800a2fe:	bf00      	nop
 800a300:	240006e8 	.word	0x240006e8

0800a304 <_malloc_r>:
 800a304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a308:	1ccd      	adds	r5, r1, #3
 800a30a:	f025 0503 	bic.w	r5, r5, #3
 800a30e:	3508      	adds	r5, #8
 800a310:	2d0c      	cmp	r5, #12
 800a312:	bf38      	it	cc
 800a314:	250c      	movcc	r5, #12
 800a316:	2d00      	cmp	r5, #0
 800a318:	4606      	mov	r6, r0
 800a31a:	db01      	blt.n	800a320 <_malloc_r+0x1c>
 800a31c:	42a9      	cmp	r1, r5
 800a31e:	d904      	bls.n	800a32a <_malloc_r+0x26>
 800a320:	230c      	movs	r3, #12
 800a322:	6033      	str	r3, [r6, #0]
 800a324:	2000      	movs	r0, #0
 800a326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a32a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a400 <_malloc_r+0xfc>
 800a32e:	f000 f915 	bl	800a55c <__malloc_lock>
 800a332:	f8d8 3000 	ldr.w	r3, [r8]
 800a336:	461c      	mov	r4, r3
 800a338:	bb44      	cbnz	r4, 800a38c <_malloc_r+0x88>
 800a33a:	4629      	mov	r1, r5
 800a33c:	4630      	mov	r0, r6
 800a33e:	f7ff ffbf 	bl	800a2c0 <sbrk_aligned>
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	4604      	mov	r4, r0
 800a346:	d158      	bne.n	800a3fa <_malloc_r+0xf6>
 800a348:	f8d8 4000 	ldr.w	r4, [r8]
 800a34c:	4627      	mov	r7, r4
 800a34e:	2f00      	cmp	r7, #0
 800a350:	d143      	bne.n	800a3da <_malloc_r+0xd6>
 800a352:	2c00      	cmp	r4, #0
 800a354:	d04b      	beq.n	800a3ee <_malloc_r+0xea>
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	4639      	mov	r1, r7
 800a35a:	4630      	mov	r0, r6
 800a35c:	eb04 0903 	add.w	r9, r4, r3
 800a360:	f000 fdf0 	bl	800af44 <_sbrk_r>
 800a364:	4581      	cmp	r9, r0
 800a366:	d142      	bne.n	800a3ee <_malloc_r+0xea>
 800a368:	6821      	ldr	r1, [r4, #0]
 800a36a:	1a6d      	subs	r5, r5, r1
 800a36c:	4629      	mov	r1, r5
 800a36e:	4630      	mov	r0, r6
 800a370:	f7ff ffa6 	bl	800a2c0 <sbrk_aligned>
 800a374:	3001      	adds	r0, #1
 800a376:	d03a      	beq.n	800a3ee <_malloc_r+0xea>
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	442b      	add	r3, r5
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	f8d8 3000 	ldr.w	r3, [r8]
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	bb62      	cbnz	r2, 800a3e0 <_malloc_r+0xdc>
 800a386:	f8c8 7000 	str.w	r7, [r8]
 800a38a:	e00f      	b.n	800a3ac <_malloc_r+0xa8>
 800a38c:	6822      	ldr	r2, [r4, #0]
 800a38e:	1b52      	subs	r2, r2, r5
 800a390:	d420      	bmi.n	800a3d4 <_malloc_r+0xd0>
 800a392:	2a0b      	cmp	r2, #11
 800a394:	d917      	bls.n	800a3c6 <_malloc_r+0xc2>
 800a396:	1961      	adds	r1, r4, r5
 800a398:	42a3      	cmp	r3, r4
 800a39a:	6025      	str	r5, [r4, #0]
 800a39c:	bf18      	it	ne
 800a39e:	6059      	strne	r1, [r3, #4]
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	bf08      	it	eq
 800a3a4:	f8c8 1000 	streq.w	r1, [r8]
 800a3a8:	5162      	str	r2, [r4, r5]
 800a3aa:	604b      	str	r3, [r1, #4]
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f000 f8db 	bl	800a568 <__malloc_unlock>
 800a3b2:	f104 000b 	add.w	r0, r4, #11
 800a3b6:	1d23      	adds	r3, r4, #4
 800a3b8:	f020 0007 	bic.w	r0, r0, #7
 800a3bc:	1ac2      	subs	r2, r0, r3
 800a3be:	bf1c      	itt	ne
 800a3c0:	1a1b      	subne	r3, r3, r0
 800a3c2:	50a3      	strne	r3, [r4, r2]
 800a3c4:	e7af      	b.n	800a326 <_malloc_r+0x22>
 800a3c6:	6862      	ldr	r2, [r4, #4]
 800a3c8:	42a3      	cmp	r3, r4
 800a3ca:	bf0c      	ite	eq
 800a3cc:	f8c8 2000 	streq.w	r2, [r8]
 800a3d0:	605a      	strne	r2, [r3, #4]
 800a3d2:	e7eb      	b.n	800a3ac <_malloc_r+0xa8>
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	6864      	ldr	r4, [r4, #4]
 800a3d8:	e7ae      	b.n	800a338 <_malloc_r+0x34>
 800a3da:	463c      	mov	r4, r7
 800a3dc:	687f      	ldr	r7, [r7, #4]
 800a3de:	e7b6      	b.n	800a34e <_malloc_r+0x4a>
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	42a3      	cmp	r3, r4
 800a3e6:	d1fb      	bne.n	800a3e0 <_malloc_r+0xdc>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	6053      	str	r3, [r2, #4]
 800a3ec:	e7de      	b.n	800a3ac <_malloc_r+0xa8>
 800a3ee:	230c      	movs	r3, #12
 800a3f0:	6033      	str	r3, [r6, #0]
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f000 f8b8 	bl	800a568 <__malloc_unlock>
 800a3f8:	e794      	b.n	800a324 <_malloc_r+0x20>
 800a3fa:	6005      	str	r5, [r0, #0]
 800a3fc:	e7d6      	b.n	800a3ac <_malloc_r+0xa8>
 800a3fe:	bf00      	nop
 800a400:	240006ec 	.word	0x240006ec

0800a404 <__sflush_r>:
 800a404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40c:	0716      	lsls	r6, r2, #28
 800a40e:	4605      	mov	r5, r0
 800a410:	460c      	mov	r4, r1
 800a412:	d454      	bmi.n	800a4be <__sflush_r+0xba>
 800a414:	684b      	ldr	r3, [r1, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	dc02      	bgt.n	800a420 <__sflush_r+0x1c>
 800a41a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	dd48      	ble.n	800a4b2 <__sflush_r+0xae>
 800a420:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a422:	2e00      	cmp	r6, #0
 800a424:	d045      	beq.n	800a4b2 <__sflush_r+0xae>
 800a426:	2300      	movs	r3, #0
 800a428:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a42c:	682f      	ldr	r7, [r5, #0]
 800a42e:	6a21      	ldr	r1, [r4, #32]
 800a430:	602b      	str	r3, [r5, #0]
 800a432:	d030      	beq.n	800a496 <__sflush_r+0x92>
 800a434:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	0759      	lsls	r1, r3, #29
 800a43a:	d505      	bpl.n	800a448 <__sflush_r+0x44>
 800a43c:	6863      	ldr	r3, [r4, #4]
 800a43e:	1ad2      	subs	r2, r2, r3
 800a440:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a442:	b10b      	cbz	r3, 800a448 <__sflush_r+0x44>
 800a444:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a446:	1ad2      	subs	r2, r2, r3
 800a448:	2300      	movs	r3, #0
 800a44a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a44c:	6a21      	ldr	r1, [r4, #32]
 800a44e:	4628      	mov	r0, r5
 800a450:	47b0      	blx	r6
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	d106      	bne.n	800a466 <__sflush_r+0x62>
 800a458:	6829      	ldr	r1, [r5, #0]
 800a45a:	291d      	cmp	r1, #29
 800a45c:	d82b      	bhi.n	800a4b6 <__sflush_r+0xb2>
 800a45e:	4a2a      	ldr	r2, [pc, #168]	@ (800a508 <__sflush_r+0x104>)
 800a460:	40ca      	lsrs	r2, r1
 800a462:	07d6      	lsls	r6, r2, #31
 800a464:	d527      	bpl.n	800a4b6 <__sflush_r+0xb2>
 800a466:	2200      	movs	r2, #0
 800a468:	6062      	str	r2, [r4, #4]
 800a46a:	04d9      	lsls	r1, r3, #19
 800a46c:	6922      	ldr	r2, [r4, #16]
 800a46e:	6022      	str	r2, [r4, #0]
 800a470:	d504      	bpl.n	800a47c <__sflush_r+0x78>
 800a472:	1c42      	adds	r2, r0, #1
 800a474:	d101      	bne.n	800a47a <__sflush_r+0x76>
 800a476:	682b      	ldr	r3, [r5, #0]
 800a478:	b903      	cbnz	r3, 800a47c <__sflush_r+0x78>
 800a47a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a47e:	602f      	str	r7, [r5, #0]
 800a480:	b1b9      	cbz	r1, 800a4b2 <__sflush_r+0xae>
 800a482:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a486:	4299      	cmp	r1, r3
 800a488:	d002      	beq.n	800a490 <__sflush_r+0x8c>
 800a48a:	4628      	mov	r0, r5
 800a48c:	f000 fdde 	bl	800b04c <_free_r>
 800a490:	2300      	movs	r3, #0
 800a492:	6363      	str	r3, [r4, #52]	@ 0x34
 800a494:	e00d      	b.n	800a4b2 <__sflush_r+0xae>
 800a496:	2301      	movs	r3, #1
 800a498:	4628      	mov	r0, r5
 800a49a:	47b0      	blx	r6
 800a49c:	4602      	mov	r2, r0
 800a49e:	1c50      	adds	r0, r2, #1
 800a4a0:	d1c9      	bne.n	800a436 <__sflush_r+0x32>
 800a4a2:	682b      	ldr	r3, [r5, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d0c6      	beq.n	800a436 <__sflush_r+0x32>
 800a4a8:	2b1d      	cmp	r3, #29
 800a4aa:	d001      	beq.n	800a4b0 <__sflush_r+0xac>
 800a4ac:	2b16      	cmp	r3, #22
 800a4ae:	d11e      	bne.n	800a4ee <__sflush_r+0xea>
 800a4b0:	602f      	str	r7, [r5, #0]
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	e022      	b.n	800a4fc <__sflush_r+0xf8>
 800a4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4ba:	b21b      	sxth	r3, r3
 800a4bc:	e01b      	b.n	800a4f6 <__sflush_r+0xf2>
 800a4be:	690f      	ldr	r7, [r1, #16]
 800a4c0:	2f00      	cmp	r7, #0
 800a4c2:	d0f6      	beq.n	800a4b2 <__sflush_r+0xae>
 800a4c4:	0793      	lsls	r3, r2, #30
 800a4c6:	680e      	ldr	r6, [r1, #0]
 800a4c8:	bf08      	it	eq
 800a4ca:	694b      	ldreq	r3, [r1, #20]
 800a4cc:	600f      	str	r7, [r1, #0]
 800a4ce:	bf18      	it	ne
 800a4d0:	2300      	movne	r3, #0
 800a4d2:	eba6 0807 	sub.w	r8, r6, r7
 800a4d6:	608b      	str	r3, [r1, #8]
 800a4d8:	f1b8 0f00 	cmp.w	r8, #0
 800a4dc:	dde9      	ble.n	800a4b2 <__sflush_r+0xae>
 800a4de:	6a21      	ldr	r1, [r4, #32]
 800a4e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a4e2:	4643      	mov	r3, r8
 800a4e4:	463a      	mov	r2, r7
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	47b0      	blx	r6
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	dc08      	bgt.n	800a500 <__sflush_r+0xfc>
 800a4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a500:	4407      	add	r7, r0
 800a502:	eba8 0800 	sub.w	r8, r8, r0
 800a506:	e7e7      	b.n	800a4d8 <__sflush_r+0xd4>
 800a508:	20400001 	.word	0x20400001

0800a50c <_fflush_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	690b      	ldr	r3, [r1, #16]
 800a510:	4605      	mov	r5, r0
 800a512:	460c      	mov	r4, r1
 800a514:	b913      	cbnz	r3, 800a51c <_fflush_r+0x10>
 800a516:	2500      	movs	r5, #0
 800a518:	4628      	mov	r0, r5
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	b118      	cbz	r0, 800a526 <_fflush_r+0x1a>
 800a51e:	6a03      	ldr	r3, [r0, #32]
 800a520:	b90b      	cbnz	r3, 800a526 <_fflush_r+0x1a>
 800a522:	f7fe ff1b 	bl	800935c <__sinit>
 800a526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d0f3      	beq.n	800a516 <_fflush_r+0xa>
 800a52e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a530:	07d0      	lsls	r0, r2, #31
 800a532:	d404      	bmi.n	800a53e <_fflush_r+0x32>
 800a534:	0599      	lsls	r1, r3, #22
 800a536:	d402      	bmi.n	800a53e <_fflush_r+0x32>
 800a538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a53a:	f7fe ff8a 	bl	8009452 <__retarget_lock_acquire_recursive>
 800a53e:	4628      	mov	r0, r5
 800a540:	4621      	mov	r1, r4
 800a542:	f7ff ff5f 	bl	800a404 <__sflush_r>
 800a546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a548:	07da      	lsls	r2, r3, #31
 800a54a:	4605      	mov	r5, r0
 800a54c:	d4e4      	bmi.n	800a518 <_fflush_r+0xc>
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	059b      	lsls	r3, r3, #22
 800a552:	d4e1      	bmi.n	800a518 <_fflush_r+0xc>
 800a554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a556:	f7fe ff7d 	bl	8009454 <__retarget_lock_release_recursive>
 800a55a:	e7dd      	b.n	800a518 <_fflush_r+0xc>

0800a55c <__malloc_lock>:
 800a55c:	4801      	ldr	r0, [pc, #4]	@ (800a564 <__malloc_lock+0x8>)
 800a55e:	f7fe bf78 	b.w	8009452 <__retarget_lock_acquire_recursive>
 800a562:	bf00      	nop
 800a564:	240006e4 	.word	0x240006e4

0800a568 <__malloc_unlock>:
 800a568:	4801      	ldr	r0, [pc, #4]	@ (800a570 <__malloc_unlock+0x8>)
 800a56a:	f7fe bf73 	b.w	8009454 <__retarget_lock_release_recursive>
 800a56e:	bf00      	nop
 800a570:	240006e4 	.word	0x240006e4

0800a574 <_Balloc>:
 800a574:	b570      	push	{r4, r5, r6, lr}
 800a576:	69c6      	ldr	r6, [r0, #28]
 800a578:	4604      	mov	r4, r0
 800a57a:	460d      	mov	r5, r1
 800a57c:	b976      	cbnz	r6, 800a59c <_Balloc+0x28>
 800a57e:	2010      	movs	r0, #16
 800a580:	f7ff fe96 	bl	800a2b0 <malloc>
 800a584:	4602      	mov	r2, r0
 800a586:	61e0      	str	r0, [r4, #28]
 800a588:	b920      	cbnz	r0, 800a594 <_Balloc+0x20>
 800a58a:	4b18      	ldr	r3, [pc, #96]	@ (800a5ec <_Balloc+0x78>)
 800a58c:	4818      	ldr	r0, [pc, #96]	@ (800a5f0 <_Balloc+0x7c>)
 800a58e:	216b      	movs	r1, #107	@ 0x6b
 800a590:	f000 fd2a 	bl	800afe8 <__assert_func>
 800a594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a598:	6006      	str	r6, [r0, #0]
 800a59a:	60c6      	str	r6, [r0, #12]
 800a59c:	69e6      	ldr	r6, [r4, #28]
 800a59e:	68f3      	ldr	r3, [r6, #12]
 800a5a0:	b183      	cbz	r3, 800a5c4 <_Balloc+0x50>
 800a5a2:	69e3      	ldr	r3, [r4, #28]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5aa:	b9b8      	cbnz	r0, 800a5dc <_Balloc+0x68>
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	fa01 f605 	lsl.w	r6, r1, r5
 800a5b2:	1d72      	adds	r2, r6, #5
 800a5b4:	0092      	lsls	r2, r2, #2
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f000 fd34 	bl	800b024 <_calloc_r>
 800a5bc:	b160      	cbz	r0, 800a5d8 <_Balloc+0x64>
 800a5be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5c2:	e00e      	b.n	800a5e2 <_Balloc+0x6e>
 800a5c4:	2221      	movs	r2, #33	@ 0x21
 800a5c6:	2104      	movs	r1, #4
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f000 fd2b 	bl	800b024 <_calloc_r>
 800a5ce:	69e3      	ldr	r3, [r4, #28]
 800a5d0:	60f0      	str	r0, [r6, #12]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e4      	bne.n	800a5a2 <_Balloc+0x2e>
 800a5d8:	2000      	movs	r0, #0
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	6802      	ldr	r2, [r0, #0]
 800a5de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5e8:	e7f7      	b.n	800a5da <_Balloc+0x66>
 800a5ea:	bf00      	nop
 800a5ec:	0800b255 	.word	0x0800b255
 800a5f0:	0800b2e6 	.word	0x0800b2e6

0800a5f4 <_Bfree>:
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	69c6      	ldr	r6, [r0, #28]
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	b976      	cbnz	r6, 800a61c <_Bfree+0x28>
 800a5fe:	2010      	movs	r0, #16
 800a600:	f7ff fe56 	bl	800a2b0 <malloc>
 800a604:	4602      	mov	r2, r0
 800a606:	61e8      	str	r0, [r5, #28]
 800a608:	b920      	cbnz	r0, 800a614 <_Bfree+0x20>
 800a60a:	4b09      	ldr	r3, [pc, #36]	@ (800a630 <_Bfree+0x3c>)
 800a60c:	4809      	ldr	r0, [pc, #36]	@ (800a634 <_Bfree+0x40>)
 800a60e:	218f      	movs	r1, #143	@ 0x8f
 800a610:	f000 fcea 	bl	800afe8 <__assert_func>
 800a614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a618:	6006      	str	r6, [r0, #0]
 800a61a:	60c6      	str	r6, [r0, #12]
 800a61c:	b13c      	cbz	r4, 800a62e <_Bfree+0x3a>
 800a61e:	69eb      	ldr	r3, [r5, #28]
 800a620:	6862      	ldr	r2, [r4, #4]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a628:	6021      	str	r1, [r4, #0]
 800a62a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	0800b255 	.word	0x0800b255
 800a634:	0800b2e6 	.word	0x0800b2e6

0800a638 <__multadd>:
 800a638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63c:	690d      	ldr	r5, [r1, #16]
 800a63e:	4607      	mov	r7, r0
 800a640:	460c      	mov	r4, r1
 800a642:	461e      	mov	r6, r3
 800a644:	f101 0c14 	add.w	ip, r1, #20
 800a648:	2000      	movs	r0, #0
 800a64a:	f8dc 3000 	ldr.w	r3, [ip]
 800a64e:	b299      	uxth	r1, r3
 800a650:	fb02 6101 	mla	r1, r2, r1, r6
 800a654:	0c1e      	lsrs	r6, r3, #16
 800a656:	0c0b      	lsrs	r3, r1, #16
 800a658:	fb02 3306 	mla	r3, r2, r6, r3
 800a65c:	b289      	uxth	r1, r1
 800a65e:	3001      	adds	r0, #1
 800a660:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a664:	4285      	cmp	r5, r0
 800a666:	f84c 1b04 	str.w	r1, [ip], #4
 800a66a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a66e:	dcec      	bgt.n	800a64a <__multadd+0x12>
 800a670:	b30e      	cbz	r6, 800a6b6 <__multadd+0x7e>
 800a672:	68a3      	ldr	r3, [r4, #8]
 800a674:	42ab      	cmp	r3, r5
 800a676:	dc19      	bgt.n	800a6ac <__multadd+0x74>
 800a678:	6861      	ldr	r1, [r4, #4]
 800a67a:	4638      	mov	r0, r7
 800a67c:	3101      	adds	r1, #1
 800a67e:	f7ff ff79 	bl	800a574 <_Balloc>
 800a682:	4680      	mov	r8, r0
 800a684:	b928      	cbnz	r0, 800a692 <__multadd+0x5a>
 800a686:	4602      	mov	r2, r0
 800a688:	4b0c      	ldr	r3, [pc, #48]	@ (800a6bc <__multadd+0x84>)
 800a68a:	480d      	ldr	r0, [pc, #52]	@ (800a6c0 <__multadd+0x88>)
 800a68c:	21ba      	movs	r1, #186	@ 0xba
 800a68e:	f000 fcab 	bl	800afe8 <__assert_func>
 800a692:	6922      	ldr	r2, [r4, #16]
 800a694:	3202      	adds	r2, #2
 800a696:	f104 010c 	add.w	r1, r4, #12
 800a69a:	0092      	lsls	r2, r2, #2
 800a69c:	300c      	adds	r0, #12
 800a69e:	f000 fc95 	bl	800afcc <memcpy>
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	f7ff ffa5 	bl	800a5f4 <_Bfree>
 800a6aa:	4644      	mov	r4, r8
 800a6ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	615e      	str	r6, [r3, #20]
 800a6b4:	6125      	str	r5, [r4, #16]
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6bc:	0800b2c4 	.word	0x0800b2c4
 800a6c0:	0800b2e6 	.word	0x0800b2e6

0800a6c4 <__hi0bits>:
 800a6c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	bf36      	itet	cc
 800a6cc:	0403      	lslcc	r3, r0, #16
 800a6ce:	2000      	movcs	r0, #0
 800a6d0:	2010      	movcc	r0, #16
 800a6d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6d6:	bf3c      	itt	cc
 800a6d8:	021b      	lslcc	r3, r3, #8
 800a6da:	3008      	addcc	r0, #8
 800a6dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6e0:	bf3c      	itt	cc
 800a6e2:	011b      	lslcc	r3, r3, #4
 800a6e4:	3004      	addcc	r0, #4
 800a6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6ea:	bf3c      	itt	cc
 800a6ec:	009b      	lslcc	r3, r3, #2
 800a6ee:	3002      	addcc	r0, #2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	db05      	blt.n	800a700 <__hi0bits+0x3c>
 800a6f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6f8:	f100 0001 	add.w	r0, r0, #1
 800a6fc:	bf08      	it	eq
 800a6fe:	2020      	moveq	r0, #32
 800a700:	4770      	bx	lr

0800a702 <__lo0bits>:
 800a702:	6803      	ldr	r3, [r0, #0]
 800a704:	4602      	mov	r2, r0
 800a706:	f013 0007 	ands.w	r0, r3, #7
 800a70a:	d00b      	beq.n	800a724 <__lo0bits+0x22>
 800a70c:	07d9      	lsls	r1, r3, #31
 800a70e:	d421      	bmi.n	800a754 <__lo0bits+0x52>
 800a710:	0798      	lsls	r0, r3, #30
 800a712:	bf49      	itett	mi
 800a714:	085b      	lsrmi	r3, r3, #1
 800a716:	089b      	lsrpl	r3, r3, #2
 800a718:	2001      	movmi	r0, #1
 800a71a:	6013      	strmi	r3, [r2, #0]
 800a71c:	bf5c      	itt	pl
 800a71e:	6013      	strpl	r3, [r2, #0]
 800a720:	2002      	movpl	r0, #2
 800a722:	4770      	bx	lr
 800a724:	b299      	uxth	r1, r3
 800a726:	b909      	cbnz	r1, 800a72c <__lo0bits+0x2a>
 800a728:	0c1b      	lsrs	r3, r3, #16
 800a72a:	2010      	movs	r0, #16
 800a72c:	b2d9      	uxtb	r1, r3
 800a72e:	b909      	cbnz	r1, 800a734 <__lo0bits+0x32>
 800a730:	3008      	adds	r0, #8
 800a732:	0a1b      	lsrs	r3, r3, #8
 800a734:	0719      	lsls	r1, r3, #28
 800a736:	bf04      	itt	eq
 800a738:	091b      	lsreq	r3, r3, #4
 800a73a:	3004      	addeq	r0, #4
 800a73c:	0799      	lsls	r1, r3, #30
 800a73e:	bf04      	itt	eq
 800a740:	089b      	lsreq	r3, r3, #2
 800a742:	3002      	addeq	r0, #2
 800a744:	07d9      	lsls	r1, r3, #31
 800a746:	d403      	bmi.n	800a750 <__lo0bits+0x4e>
 800a748:	085b      	lsrs	r3, r3, #1
 800a74a:	f100 0001 	add.w	r0, r0, #1
 800a74e:	d003      	beq.n	800a758 <__lo0bits+0x56>
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	4770      	bx	lr
 800a754:	2000      	movs	r0, #0
 800a756:	4770      	bx	lr
 800a758:	2020      	movs	r0, #32
 800a75a:	4770      	bx	lr

0800a75c <__i2b>:
 800a75c:	b510      	push	{r4, lr}
 800a75e:	460c      	mov	r4, r1
 800a760:	2101      	movs	r1, #1
 800a762:	f7ff ff07 	bl	800a574 <_Balloc>
 800a766:	4602      	mov	r2, r0
 800a768:	b928      	cbnz	r0, 800a776 <__i2b+0x1a>
 800a76a:	4b05      	ldr	r3, [pc, #20]	@ (800a780 <__i2b+0x24>)
 800a76c:	4805      	ldr	r0, [pc, #20]	@ (800a784 <__i2b+0x28>)
 800a76e:	f240 1145 	movw	r1, #325	@ 0x145
 800a772:	f000 fc39 	bl	800afe8 <__assert_func>
 800a776:	2301      	movs	r3, #1
 800a778:	6144      	str	r4, [r0, #20]
 800a77a:	6103      	str	r3, [r0, #16]
 800a77c:	bd10      	pop	{r4, pc}
 800a77e:	bf00      	nop
 800a780:	0800b2c4 	.word	0x0800b2c4
 800a784:	0800b2e6 	.word	0x0800b2e6

0800a788 <__multiply>:
 800a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	4617      	mov	r7, r2
 800a78e:	690a      	ldr	r2, [r1, #16]
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	429a      	cmp	r2, r3
 800a794:	bfa8      	it	ge
 800a796:	463b      	movge	r3, r7
 800a798:	4689      	mov	r9, r1
 800a79a:	bfa4      	itt	ge
 800a79c:	460f      	movge	r7, r1
 800a79e:	4699      	movge	r9, r3
 800a7a0:	693d      	ldr	r5, [r7, #16]
 800a7a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	6879      	ldr	r1, [r7, #4]
 800a7aa:	eb05 060a 	add.w	r6, r5, sl
 800a7ae:	42b3      	cmp	r3, r6
 800a7b0:	b085      	sub	sp, #20
 800a7b2:	bfb8      	it	lt
 800a7b4:	3101      	addlt	r1, #1
 800a7b6:	f7ff fedd 	bl	800a574 <_Balloc>
 800a7ba:	b930      	cbnz	r0, 800a7ca <__multiply+0x42>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	4b41      	ldr	r3, [pc, #260]	@ (800a8c4 <__multiply+0x13c>)
 800a7c0:	4841      	ldr	r0, [pc, #260]	@ (800a8c8 <__multiply+0x140>)
 800a7c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a7c6:	f000 fc0f 	bl	800afe8 <__assert_func>
 800a7ca:	f100 0414 	add.w	r4, r0, #20
 800a7ce:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a7d2:	4623      	mov	r3, r4
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	4573      	cmp	r3, lr
 800a7d8:	d320      	bcc.n	800a81c <__multiply+0x94>
 800a7da:	f107 0814 	add.w	r8, r7, #20
 800a7de:	f109 0114 	add.w	r1, r9, #20
 800a7e2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a7e6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a7ea:	9302      	str	r3, [sp, #8]
 800a7ec:	1beb      	subs	r3, r5, r7
 800a7ee:	3b15      	subs	r3, #21
 800a7f0:	f023 0303 	bic.w	r3, r3, #3
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	3715      	adds	r7, #21
 800a7f8:	42bd      	cmp	r5, r7
 800a7fa:	bf38      	it	cc
 800a7fc:	2304      	movcc	r3, #4
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	9b02      	ldr	r3, [sp, #8]
 800a802:	9103      	str	r1, [sp, #12]
 800a804:	428b      	cmp	r3, r1
 800a806:	d80c      	bhi.n	800a822 <__multiply+0x9a>
 800a808:	2e00      	cmp	r6, #0
 800a80a:	dd03      	ble.n	800a814 <__multiply+0x8c>
 800a80c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a810:	2b00      	cmp	r3, #0
 800a812:	d055      	beq.n	800a8c0 <__multiply+0x138>
 800a814:	6106      	str	r6, [r0, #16]
 800a816:	b005      	add	sp, #20
 800a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81c:	f843 2b04 	str.w	r2, [r3], #4
 800a820:	e7d9      	b.n	800a7d6 <__multiply+0x4e>
 800a822:	f8b1 a000 	ldrh.w	sl, [r1]
 800a826:	f1ba 0f00 	cmp.w	sl, #0
 800a82a:	d01f      	beq.n	800a86c <__multiply+0xe4>
 800a82c:	46c4      	mov	ip, r8
 800a82e:	46a1      	mov	r9, r4
 800a830:	2700      	movs	r7, #0
 800a832:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a836:	f8d9 3000 	ldr.w	r3, [r9]
 800a83a:	fa1f fb82 	uxth.w	fp, r2
 800a83e:	b29b      	uxth	r3, r3
 800a840:	fb0a 330b 	mla	r3, sl, fp, r3
 800a844:	443b      	add	r3, r7
 800a846:	f8d9 7000 	ldr.w	r7, [r9]
 800a84a:	0c12      	lsrs	r2, r2, #16
 800a84c:	0c3f      	lsrs	r7, r7, #16
 800a84e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a852:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a856:	b29b      	uxth	r3, r3
 800a858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a85c:	4565      	cmp	r5, ip
 800a85e:	f849 3b04 	str.w	r3, [r9], #4
 800a862:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a866:	d8e4      	bhi.n	800a832 <__multiply+0xaa>
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	50e7      	str	r7, [r4, r3]
 800a86c:	9b03      	ldr	r3, [sp, #12]
 800a86e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a872:	3104      	adds	r1, #4
 800a874:	f1b9 0f00 	cmp.w	r9, #0
 800a878:	d020      	beq.n	800a8bc <__multiply+0x134>
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	4647      	mov	r7, r8
 800a87e:	46a4      	mov	ip, r4
 800a880:	f04f 0a00 	mov.w	sl, #0
 800a884:	f8b7 b000 	ldrh.w	fp, [r7]
 800a888:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a88c:	fb09 220b 	mla	r2, r9, fp, r2
 800a890:	4452      	add	r2, sl
 800a892:	b29b      	uxth	r3, r3
 800a894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a898:	f84c 3b04 	str.w	r3, [ip], #4
 800a89c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a8a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8a4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a8a8:	fb09 330a 	mla	r3, r9, sl, r3
 800a8ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a8b0:	42bd      	cmp	r5, r7
 800a8b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8b6:	d8e5      	bhi.n	800a884 <__multiply+0xfc>
 800a8b8:	9a01      	ldr	r2, [sp, #4]
 800a8ba:	50a3      	str	r3, [r4, r2]
 800a8bc:	3404      	adds	r4, #4
 800a8be:	e79f      	b.n	800a800 <__multiply+0x78>
 800a8c0:	3e01      	subs	r6, #1
 800a8c2:	e7a1      	b.n	800a808 <__multiply+0x80>
 800a8c4:	0800b2c4 	.word	0x0800b2c4
 800a8c8:	0800b2e6 	.word	0x0800b2e6

0800a8cc <__pow5mult>:
 800a8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8d0:	4615      	mov	r5, r2
 800a8d2:	f012 0203 	ands.w	r2, r2, #3
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	460e      	mov	r6, r1
 800a8da:	d007      	beq.n	800a8ec <__pow5mult+0x20>
 800a8dc:	4c25      	ldr	r4, [pc, #148]	@ (800a974 <__pow5mult+0xa8>)
 800a8de:	3a01      	subs	r2, #1
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8e6:	f7ff fea7 	bl	800a638 <__multadd>
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	10ad      	asrs	r5, r5, #2
 800a8ee:	d03d      	beq.n	800a96c <__pow5mult+0xa0>
 800a8f0:	69fc      	ldr	r4, [r7, #28]
 800a8f2:	b97c      	cbnz	r4, 800a914 <__pow5mult+0x48>
 800a8f4:	2010      	movs	r0, #16
 800a8f6:	f7ff fcdb 	bl	800a2b0 <malloc>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	61f8      	str	r0, [r7, #28]
 800a8fe:	b928      	cbnz	r0, 800a90c <__pow5mult+0x40>
 800a900:	4b1d      	ldr	r3, [pc, #116]	@ (800a978 <__pow5mult+0xac>)
 800a902:	481e      	ldr	r0, [pc, #120]	@ (800a97c <__pow5mult+0xb0>)
 800a904:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a908:	f000 fb6e 	bl	800afe8 <__assert_func>
 800a90c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a910:	6004      	str	r4, [r0, #0]
 800a912:	60c4      	str	r4, [r0, #12]
 800a914:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a91c:	b94c      	cbnz	r4, 800a932 <__pow5mult+0x66>
 800a91e:	f240 2171 	movw	r1, #625	@ 0x271
 800a922:	4638      	mov	r0, r7
 800a924:	f7ff ff1a 	bl	800a75c <__i2b>
 800a928:	2300      	movs	r3, #0
 800a92a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a92e:	4604      	mov	r4, r0
 800a930:	6003      	str	r3, [r0, #0]
 800a932:	f04f 0900 	mov.w	r9, #0
 800a936:	07eb      	lsls	r3, r5, #31
 800a938:	d50a      	bpl.n	800a950 <__pow5mult+0x84>
 800a93a:	4631      	mov	r1, r6
 800a93c:	4622      	mov	r2, r4
 800a93e:	4638      	mov	r0, r7
 800a940:	f7ff ff22 	bl	800a788 <__multiply>
 800a944:	4631      	mov	r1, r6
 800a946:	4680      	mov	r8, r0
 800a948:	4638      	mov	r0, r7
 800a94a:	f7ff fe53 	bl	800a5f4 <_Bfree>
 800a94e:	4646      	mov	r6, r8
 800a950:	106d      	asrs	r5, r5, #1
 800a952:	d00b      	beq.n	800a96c <__pow5mult+0xa0>
 800a954:	6820      	ldr	r0, [r4, #0]
 800a956:	b938      	cbnz	r0, 800a968 <__pow5mult+0x9c>
 800a958:	4622      	mov	r2, r4
 800a95a:	4621      	mov	r1, r4
 800a95c:	4638      	mov	r0, r7
 800a95e:	f7ff ff13 	bl	800a788 <__multiply>
 800a962:	6020      	str	r0, [r4, #0]
 800a964:	f8c0 9000 	str.w	r9, [r0]
 800a968:	4604      	mov	r4, r0
 800a96a:	e7e4      	b.n	800a936 <__pow5mult+0x6a>
 800a96c:	4630      	mov	r0, r6
 800a96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a972:	bf00      	nop
 800a974:	0800b388 	.word	0x0800b388
 800a978:	0800b255 	.word	0x0800b255
 800a97c:	0800b2e6 	.word	0x0800b2e6

0800a980 <__lshift>:
 800a980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a984:	460c      	mov	r4, r1
 800a986:	6849      	ldr	r1, [r1, #4]
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a98e:	68a3      	ldr	r3, [r4, #8]
 800a990:	4607      	mov	r7, r0
 800a992:	4691      	mov	r9, r2
 800a994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a998:	f108 0601 	add.w	r6, r8, #1
 800a99c:	42b3      	cmp	r3, r6
 800a99e:	db0b      	blt.n	800a9b8 <__lshift+0x38>
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	f7ff fde7 	bl	800a574 <_Balloc>
 800a9a6:	4605      	mov	r5, r0
 800a9a8:	b948      	cbnz	r0, 800a9be <__lshift+0x3e>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	4b28      	ldr	r3, [pc, #160]	@ (800aa50 <__lshift+0xd0>)
 800a9ae:	4829      	ldr	r0, [pc, #164]	@ (800aa54 <__lshift+0xd4>)
 800a9b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a9b4:	f000 fb18 	bl	800afe8 <__assert_func>
 800a9b8:	3101      	adds	r1, #1
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	e7ee      	b.n	800a99c <__lshift+0x1c>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f100 0114 	add.w	r1, r0, #20
 800a9c4:	f100 0210 	add.w	r2, r0, #16
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	4553      	cmp	r3, sl
 800a9cc:	db33      	blt.n	800aa36 <__lshift+0xb6>
 800a9ce:	6920      	ldr	r0, [r4, #16]
 800a9d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9d4:	f104 0314 	add.w	r3, r4, #20
 800a9d8:	f019 091f 	ands.w	r9, r9, #31
 800a9dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9e4:	d02b      	beq.n	800aa3e <__lshift+0xbe>
 800a9e6:	f1c9 0e20 	rsb	lr, r9, #32
 800a9ea:	468a      	mov	sl, r1
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	6818      	ldr	r0, [r3, #0]
 800a9f0:	fa00 f009 	lsl.w	r0, r0, r9
 800a9f4:	4310      	orrs	r0, r2
 800a9f6:	f84a 0b04 	str.w	r0, [sl], #4
 800a9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fe:	459c      	cmp	ip, r3
 800aa00:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa04:	d8f3      	bhi.n	800a9ee <__lshift+0x6e>
 800aa06:	ebac 0304 	sub.w	r3, ip, r4
 800aa0a:	3b15      	subs	r3, #21
 800aa0c:	f023 0303 	bic.w	r3, r3, #3
 800aa10:	3304      	adds	r3, #4
 800aa12:	f104 0015 	add.w	r0, r4, #21
 800aa16:	4560      	cmp	r0, ip
 800aa18:	bf88      	it	hi
 800aa1a:	2304      	movhi	r3, #4
 800aa1c:	50ca      	str	r2, [r1, r3]
 800aa1e:	b10a      	cbz	r2, 800aa24 <__lshift+0xa4>
 800aa20:	f108 0602 	add.w	r6, r8, #2
 800aa24:	3e01      	subs	r6, #1
 800aa26:	4638      	mov	r0, r7
 800aa28:	612e      	str	r6, [r5, #16]
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	f7ff fde2 	bl	800a5f4 <_Bfree>
 800aa30:	4628      	mov	r0, r5
 800aa32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa36:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	e7c5      	b.n	800a9ca <__lshift+0x4a>
 800aa3e:	3904      	subs	r1, #4
 800aa40:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa44:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa48:	459c      	cmp	ip, r3
 800aa4a:	d8f9      	bhi.n	800aa40 <__lshift+0xc0>
 800aa4c:	e7ea      	b.n	800aa24 <__lshift+0xa4>
 800aa4e:	bf00      	nop
 800aa50:	0800b2c4 	.word	0x0800b2c4
 800aa54:	0800b2e6 	.word	0x0800b2e6

0800aa58 <__mcmp>:
 800aa58:	690a      	ldr	r2, [r1, #16]
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	6900      	ldr	r0, [r0, #16]
 800aa5e:	1a80      	subs	r0, r0, r2
 800aa60:	b530      	push	{r4, r5, lr}
 800aa62:	d10e      	bne.n	800aa82 <__mcmp+0x2a>
 800aa64:	3314      	adds	r3, #20
 800aa66:	3114      	adds	r1, #20
 800aa68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa78:	4295      	cmp	r5, r2
 800aa7a:	d003      	beq.n	800aa84 <__mcmp+0x2c>
 800aa7c:	d205      	bcs.n	800aa8a <__mcmp+0x32>
 800aa7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa82:	bd30      	pop	{r4, r5, pc}
 800aa84:	42a3      	cmp	r3, r4
 800aa86:	d3f3      	bcc.n	800aa70 <__mcmp+0x18>
 800aa88:	e7fb      	b.n	800aa82 <__mcmp+0x2a>
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	e7f9      	b.n	800aa82 <__mcmp+0x2a>
	...

0800aa90 <__mdiff>:
 800aa90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	4689      	mov	r9, r1
 800aa96:	4606      	mov	r6, r0
 800aa98:	4611      	mov	r1, r2
 800aa9a:	4648      	mov	r0, r9
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	f7ff ffdb 	bl	800aa58 <__mcmp>
 800aaa2:	1e05      	subs	r5, r0, #0
 800aaa4:	d112      	bne.n	800aacc <__mdiff+0x3c>
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7ff fd63 	bl	800a574 <_Balloc>
 800aaae:	4602      	mov	r2, r0
 800aab0:	b928      	cbnz	r0, 800aabe <__mdiff+0x2e>
 800aab2:	4b3f      	ldr	r3, [pc, #252]	@ (800abb0 <__mdiff+0x120>)
 800aab4:	f240 2137 	movw	r1, #567	@ 0x237
 800aab8:	483e      	ldr	r0, [pc, #248]	@ (800abb4 <__mdiff+0x124>)
 800aaba:	f000 fa95 	bl	800afe8 <__assert_func>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aac4:	4610      	mov	r0, r2
 800aac6:	b003      	add	sp, #12
 800aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aacc:	bfbc      	itt	lt
 800aace:	464b      	movlt	r3, r9
 800aad0:	46a1      	movlt	r9, r4
 800aad2:	4630      	mov	r0, r6
 800aad4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aad8:	bfba      	itte	lt
 800aada:	461c      	movlt	r4, r3
 800aadc:	2501      	movlt	r5, #1
 800aade:	2500      	movge	r5, #0
 800aae0:	f7ff fd48 	bl	800a574 <_Balloc>
 800aae4:	4602      	mov	r2, r0
 800aae6:	b918      	cbnz	r0, 800aaf0 <__mdiff+0x60>
 800aae8:	4b31      	ldr	r3, [pc, #196]	@ (800abb0 <__mdiff+0x120>)
 800aaea:	f240 2145 	movw	r1, #581	@ 0x245
 800aaee:	e7e3      	b.n	800aab8 <__mdiff+0x28>
 800aaf0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aaf4:	6926      	ldr	r6, [r4, #16]
 800aaf6:	60c5      	str	r5, [r0, #12]
 800aaf8:	f109 0310 	add.w	r3, r9, #16
 800aafc:	f109 0514 	add.w	r5, r9, #20
 800ab00:	f104 0e14 	add.w	lr, r4, #20
 800ab04:	f100 0b14 	add.w	fp, r0, #20
 800ab08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ab0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ab10:	9301      	str	r3, [sp, #4]
 800ab12:	46d9      	mov	r9, fp
 800ab14:	f04f 0c00 	mov.w	ip, #0
 800ab18:	9b01      	ldr	r3, [sp, #4]
 800ab1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ab1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ab22:	9301      	str	r3, [sp, #4]
 800ab24:	fa1f f38a 	uxth.w	r3, sl
 800ab28:	4619      	mov	r1, r3
 800ab2a:	b283      	uxth	r3, r0
 800ab2c:	1acb      	subs	r3, r1, r3
 800ab2e:	0c00      	lsrs	r0, r0, #16
 800ab30:	4463      	add	r3, ip
 800ab32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab40:	4576      	cmp	r6, lr
 800ab42:	f849 3b04 	str.w	r3, [r9], #4
 800ab46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab4a:	d8e5      	bhi.n	800ab18 <__mdiff+0x88>
 800ab4c:	1b33      	subs	r3, r6, r4
 800ab4e:	3b15      	subs	r3, #21
 800ab50:	f023 0303 	bic.w	r3, r3, #3
 800ab54:	3415      	adds	r4, #21
 800ab56:	3304      	adds	r3, #4
 800ab58:	42a6      	cmp	r6, r4
 800ab5a:	bf38      	it	cc
 800ab5c:	2304      	movcc	r3, #4
 800ab5e:	441d      	add	r5, r3
 800ab60:	445b      	add	r3, fp
 800ab62:	461e      	mov	r6, r3
 800ab64:	462c      	mov	r4, r5
 800ab66:	4544      	cmp	r4, r8
 800ab68:	d30e      	bcc.n	800ab88 <__mdiff+0xf8>
 800ab6a:	f108 0103 	add.w	r1, r8, #3
 800ab6e:	1b49      	subs	r1, r1, r5
 800ab70:	f021 0103 	bic.w	r1, r1, #3
 800ab74:	3d03      	subs	r5, #3
 800ab76:	45a8      	cmp	r8, r5
 800ab78:	bf38      	it	cc
 800ab7a:	2100      	movcc	r1, #0
 800ab7c:	440b      	add	r3, r1
 800ab7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab82:	b191      	cbz	r1, 800abaa <__mdiff+0x11a>
 800ab84:	6117      	str	r7, [r2, #16]
 800ab86:	e79d      	b.n	800aac4 <__mdiff+0x34>
 800ab88:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab8c:	46e6      	mov	lr, ip
 800ab8e:	0c08      	lsrs	r0, r1, #16
 800ab90:	fa1c fc81 	uxtah	ip, ip, r1
 800ab94:	4471      	add	r1, lr
 800ab96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab9a:	b289      	uxth	r1, r1
 800ab9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aba0:	f846 1b04 	str.w	r1, [r6], #4
 800aba4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aba8:	e7dd      	b.n	800ab66 <__mdiff+0xd6>
 800abaa:	3f01      	subs	r7, #1
 800abac:	e7e7      	b.n	800ab7e <__mdiff+0xee>
 800abae:	bf00      	nop
 800abb0:	0800b2c4 	.word	0x0800b2c4
 800abb4:	0800b2e6 	.word	0x0800b2e6

0800abb8 <__d2b>:
 800abb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abbc:	460f      	mov	r7, r1
 800abbe:	2101      	movs	r1, #1
 800abc0:	ec59 8b10 	vmov	r8, r9, d0
 800abc4:	4616      	mov	r6, r2
 800abc6:	f7ff fcd5 	bl	800a574 <_Balloc>
 800abca:	4604      	mov	r4, r0
 800abcc:	b930      	cbnz	r0, 800abdc <__d2b+0x24>
 800abce:	4602      	mov	r2, r0
 800abd0:	4b23      	ldr	r3, [pc, #140]	@ (800ac60 <__d2b+0xa8>)
 800abd2:	4824      	ldr	r0, [pc, #144]	@ (800ac64 <__d2b+0xac>)
 800abd4:	f240 310f 	movw	r1, #783	@ 0x30f
 800abd8:	f000 fa06 	bl	800afe8 <__assert_func>
 800abdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abe4:	b10d      	cbz	r5, 800abea <__d2b+0x32>
 800abe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abea:	9301      	str	r3, [sp, #4]
 800abec:	f1b8 0300 	subs.w	r3, r8, #0
 800abf0:	d023      	beq.n	800ac3a <__d2b+0x82>
 800abf2:	4668      	mov	r0, sp
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	f7ff fd84 	bl	800a702 <__lo0bits>
 800abfa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abfe:	b1d0      	cbz	r0, 800ac36 <__d2b+0x7e>
 800ac00:	f1c0 0320 	rsb	r3, r0, #32
 800ac04:	fa02 f303 	lsl.w	r3, r2, r3
 800ac08:	430b      	orrs	r3, r1
 800ac0a:	40c2      	lsrs	r2, r0
 800ac0c:	6163      	str	r3, [r4, #20]
 800ac0e:	9201      	str	r2, [sp, #4]
 800ac10:	9b01      	ldr	r3, [sp, #4]
 800ac12:	61a3      	str	r3, [r4, #24]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	bf0c      	ite	eq
 800ac18:	2201      	moveq	r2, #1
 800ac1a:	2202      	movne	r2, #2
 800ac1c:	6122      	str	r2, [r4, #16]
 800ac1e:	b1a5      	cbz	r5, 800ac4a <__d2b+0x92>
 800ac20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ac24:	4405      	add	r5, r0
 800ac26:	603d      	str	r5, [r7, #0]
 800ac28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ac2c:	6030      	str	r0, [r6, #0]
 800ac2e:	4620      	mov	r0, r4
 800ac30:	b003      	add	sp, #12
 800ac32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac36:	6161      	str	r1, [r4, #20]
 800ac38:	e7ea      	b.n	800ac10 <__d2b+0x58>
 800ac3a:	a801      	add	r0, sp, #4
 800ac3c:	f7ff fd61 	bl	800a702 <__lo0bits>
 800ac40:	9b01      	ldr	r3, [sp, #4]
 800ac42:	6163      	str	r3, [r4, #20]
 800ac44:	3020      	adds	r0, #32
 800ac46:	2201      	movs	r2, #1
 800ac48:	e7e8      	b.n	800ac1c <__d2b+0x64>
 800ac4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac52:	6038      	str	r0, [r7, #0]
 800ac54:	6918      	ldr	r0, [r3, #16]
 800ac56:	f7ff fd35 	bl	800a6c4 <__hi0bits>
 800ac5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac5e:	e7e5      	b.n	800ac2c <__d2b+0x74>
 800ac60:	0800b2c4 	.word	0x0800b2c4
 800ac64:	0800b2e6 	.word	0x0800b2e6

0800ac68 <__sread>:
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac70:	f000 f956 	bl	800af20 <_read_r>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	bfab      	itete	ge
 800ac78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac7c:	181b      	addge	r3, r3, r0
 800ac7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac82:	bfac      	ite	ge
 800ac84:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac86:	81a3      	strhlt	r3, [r4, #12]
 800ac88:	bd10      	pop	{r4, pc}

0800ac8a <__swrite>:
 800ac8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8e:	461f      	mov	r7, r3
 800ac90:	898b      	ldrh	r3, [r1, #12]
 800ac92:	05db      	lsls	r3, r3, #23
 800ac94:	4605      	mov	r5, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	4616      	mov	r6, r2
 800ac9a:	d505      	bpl.n	800aca8 <__swrite+0x1e>
 800ac9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca0:	2302      	movs	r3, #2
 800aca2:	2200      	movs	r2, #0
 800aca4:	f000 f92a 	bl	800aefc <_lseek_r>
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	4632      	mov	r2, r6
 800acb6:	463b      	mov	r3, r7
 800acb8:	4628      	mov	r0, r5
 800acba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acbe:	f000 b951 	b.w	800af64 <_write_r>

0800acc2 <__sseek>:
 800acc2:	b510      	push	{r4, lr}
 800acc4:	460c      	mov	r4, r1
 800acc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acca:	f000 f917 	bl	800aefc <_lseek_r>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	bf15      	itete	ne
 800acd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800acd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800acda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800acde:	81a3      	strheq	r3, [r4, #12]
 800ace0:	bf18      	it	ne
 800ace2:	81a3      	strhne	r3, [r4, #12]
 800ace4:	bd10      	pop	{r4, pc}

0800ace6 <__sclose>:
 800ace6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acea:	f000 b94d 	b.w	800af88 <_close_r>

0800acee <__swbuf_r>:
 800acee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf0:	460e      	mov	r6, r1
 800acf2:	4614      	mov	r4, r2
 800acf4:	4605      	mov	r5, r0
 800acf6:	b118      	cbz	r0, 800ad00 <__swbuf_r+0x12>
 800acf8:	6a03      	ldr	r3, [r0, #32]
 800acfa:	b90b      	cbnz	r3, 800ad00 <__swbuf_r+0x12>
 800acfc:	f7fe fb2e 	bl	800935c <__sinit>
 800ad00:	69a3      	ldr	r3, [r4, #24]
 800ad02:	60a3      	str	r3, [r4, #8]
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	071a      	lsls	r2, r3, #28
 800ad08:	d501      	bpl.n	800ad0e <__swbuf_r+0x20>
 800ad0a:	6923      	ldr	r3, [r4, #16]
 800ad0c:	b943      	cbnz	r3, 800ad20 <__swbuf_r+0x32>
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4628      	mov	r0, r5
 800ad12:	f000 f82b 	bl	800ad6c <__swsetup_r>
 800ad16:	b118      	cbz	r0, 800ad20 <__swbuf_r+0x32>
 800ad18:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad20:	6823      	ldr	r3, [r4, #0]
 800ad22:	6922      	ldr	r2, [r4, #16]
 800ad24:	1a98      	subs	r0, r3, r2
 800ad26:	6963      	ldr	r3, [r4, #20]
 800ad28:	b2f6      	uxtb	r6, r6
 800ad2a:	4283      	cmp	r3, r0
 800ad2c:	4637      	mov	r7, r6
 800ad2e:	dc05      	bgt.n	800ad3c <__swbuf_r+0x4e>
 800ad30:	4621      	mov	r1, r4
 800ad32:	4628      	mov	r0, r5
 800ad34:	f7ff fbea 	bl	800a50c <_fflush_r>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d1ed      	bne.n	800ad18 <__swbuf_r+0x2a>
 800ad3c:	68a3      	ldr	r3, [r4, #8]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	60a3      	str	r3, [r4, #8]
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	6022      	str	r2, [r4, #0]
 800ad48:	701e      	strb	r6, [r3, #0]
 800ad4a:	6962      	ldr	r2, [r4, #20]
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d004      	beq.n	800ad5c <__swbuf_r+0x6e>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	07db      	lsls	r3, r3, #31
 800ad56:	d5e1      	bpl.n	800ad1c <__swbuf_r+0x2e>
 800ad58:	2e0a      	cmp	r6, #10
 800ad5a:	d1df      	bne.n	800ad1c <__swbuf_r+0x2e>
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f7ff fbd4 	bl	800a50c <_fflush_r>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d0d9      	beq.n	800ad1c <__swbuf_r+0x2e>
 800ad68:	e7d6      	b.n	800ad18 <__swbuf_r+0x2a>
	...

0800ad6c <__swsetup_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4b29      	ldr	r3, [pc, #164]	@ (800ae14 <__swsetup_r+0xa8>)
 800ad70:	4605      	mov	r5, r0
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	460c      	mov	r4, r1
 800ad76:	b118      	cbz	r0, 800ad80 <__swsetup_r+0x14>
 800ad78:	6a03      	ldr	r3, [r0, #32]
 800ad7a:	b90b      	cbnz	r3, 800ad80 <__swsetup_r+0x14>
 800ad7c:	f7fe faee 	bl	800935c <__sinit>
 800ad80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad84:	0719      	lsls	r1, r3, #28
 800ad86:	d422      	bmi.n	800adce <__swsetup_r+0x62>
 800ad88:	06da      	lsls	r2, r3, #27
 800ad8a:	d407      	bmi.n	800ad9c <__swsetup_r+0x30>
 800ad8c:	2209      	movs	r2, #9
 800ad8e:	602a      	str	r2, [r5, #0]
 800ad90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad94:	81a3      	strh	r3, [r4, #12]
 800ad96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad9a:	e033      	b.n	800ae04 <__swsetup_r+0x98>
 800ad9c:	0758      	lsls	r0, r3, #29
 800ad9e:	d512      	bpl.n	800adc6 <__swsetup_r+0x5a>
 800ada0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ada2:	b141      	cbz	r1, 800adb6 <__swsetup_r+0x4a>
 800ada4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ada8:	4299      	cmp	r1, r3
 800adaa:	d002      	beq.n	800adb2 <__swsetup_r+0x46>
 800adac:	4628      	mov	r0, r5
 800adae:	f000 f94d 	bl	800b04c <_free_r>
 800adb2:	2300      	movs	r3, #0
 800adb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800adbc:	81a3      	strh	r3, [r4, #12]
 800adbe:	2300      	movs	r3, #0
 800adc0:	6063      	str	r3, [r4, #4]
 800adc2:	6923      	ldr	r3, [r4, #16]
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	89a3      	ldrh	r3, [r4, #12]
 800adc8:	f043 0308 	orr.w	r3, r3, #8
 800adcc:	81a3      	strh	r3, [r4, #12]
 800adce:	6923      	ldr	r3, [r4, #16]
 800add0:	b94b      	cbnz	r3, 800ade6 <__swsetup_r+0x7a>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800add8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800addc:	d003      	beq.n	800ade6 <__swsetup_r+0x7a>
 800adde:	4621      	mov	r1, r4
 800ade0:	4628      	mov	r0, r5
 800ade2:	f000 f83f 	bl	800ae64 <__smakebuf_r>
 800ade6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adea:	f013 0201 	ands.w	r2, r3, #1
 800adee:	d00a      	beq.n	800ae06 <__swsetup_r+0x9a>
 800adf0:	2200      	movs	r2, #0
 800adf2:	60a2      	str	r2, [r4, #8]
 800adf4:	6962      	ldr	r2, [r4, #20]
 800adf6:	4252      	negs	r2, r2
 800adf8:	61a2      	str	r2, [r4, #24]
 800adfa:	6922      	ldr	r2, [r4, #16]
 800adfc:	b942      	cbnz	r2, 800ae10 <__swsetup_r+0xa4>
 800adfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae02:	d1c5      	bne.n	800ad90 <__swsetup_r+0x24>
 800ae04:	bd38      	pop	{r3, r4, r5, pc}
 800ae06:	0799      	lsls	r1, r3, #30
 800ae08:	bf58      	it	pl
 800ae0a:	6962      	ldrpl	r2, [r4, #20]
 800ae0c:	60a2      	str	r2, [r4, #8]
 800ae0e:	e7f4      	b.n	800adfa <__swsetup_r+0x8e>
 800ae10:	2000      	movs	r0, #0
 800ae12:	e7f7      	b.n	800ae04 <__swsetup_r+0x98>
 800ae14:	2400001c 	.word	0x2400001c

0800ae18 <__swhatbuf_r>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae20:	2900      	cmp	r1, #0
 800ae22:	b096      	sub	sp, #88	@ 0x58
 800ae24:	4615      	mov	r5, r2
 800ae26:	461e      	mov	r6, r3
 800ae28:	da0d      	bge.n	800ae46 <__swhatbuf_r+0x2e>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae30:	f04f 0100 	mov.w	r1, #0
 800ae34:	bf14      	ite	ne
 800ae36:	2340      	movne	r3, #64	@ 0x40
 800ae38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	6031      	str	r1, [r6, #0]
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	b016      	add	sp, #88	@ 0x58
 800ae44:	bd70      	pop	{r4, r5, r6, pc}
 800ae46:	466a      	mov	r2, sp
 800ae48:	f000 f8ae 	bl	800afa8 <_fstat_r>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	dbec      	blt.n	800ae2a <__swhatbuf_r+0x12>
 800ae50:	9901      	ldr	r1, [sp, #4]
 800ae52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae5a:	4259      	negs	r1, r3
 800ae5c:	4159      	adcs	r1, r3
 800ae5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae62:	e7eb      	b.n	800ae3c <__swhatbuf_r+0x24>

0800ae64 <__smakebuf_r>:
 800ae64:	898b      	ldrh	r3, [r1, #12]
 800ae66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae68:	079d      	lsls	r5, r3, #30
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	d507      	bpl.n	800ae80 <__smakebuf_r+0x1c>
 800ae70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	6123      	str	r3, [r4, #16]
 800ae78:	2301      	movs	r3, #1
 800ae7a:	6163      	str	r3, [r4, #20]
 800ae7c:	b003      	add	sp, #12
 800ae7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae80:	ab01      	add	r3, sp, #4
 800ae82:	466a      	mov	r2, sp
 800ae84:	f7ff ffc8 	bl	800ae18 <__swhatbuf_r>
 800ae88:	9f00      	ldr	r7, [sp, #0]
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f7ff fa38 	bl	800a304 <_malloc_r>
 800ae94:	b948      	cbnz	r0, 800aeaa <__smakebuf_r+0x46>
 800ae96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae9a:	059a      	lsls	r2, r3, #22
 800ae9c:	d4ee      	bmi.n	800ae7c <__smakebuf_r+0x18>
 800ae9e:	f023 0303 	bic.w	r3, r3, #3
 800aea2:	f043 0302 	orr.w	r3, r3, #2
 800aea6:	81a3      	strh	r3, [r4, #12]
 800aea8:	e7e2      	b.n	800ae70 <__smakebuf_r+0xc>
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	6020      	str	r0, [r4, #0]
 800aeae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	9b01      	ldr	r3, [sp, #4]
 800aeb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aeba:	b15b      	cbz	r3, 800aed4 <__smakebuf_r+0x70>
 800aebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aec0:	4630      	mov	r0, r6
 800aec2:	f000 f80b 	bl	800aedc <_isatty_r>
 800aec6:	b128      	cbz	r0, 800aed4 <__smakebuf_r+0x70>
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	f023 0303 	bic.w	r3, r3, #3
 800aece:	f043 0301 	orr.w	r3, r3, #1
 800aed2:	81a3      	strh	r3, [r4, #12]
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	431d      	orrs	r5, r3
 800aed8:	81a5      	strh	r5, [r4, #12]
 800aeda:	e7cf      	b.n	800ae7c <__smakebuf_r+0x18>

0800aedc <_isatty_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4d06      	ldr	r5, [pc, #24]	@ (800aef8 <_isatty_r+0x1c>)
 800aee0:	2300      	movs	r3, #0
 800aee2:	4604      	mov	r4, r0
 800aee4:	4608      	mov	r0, r1
 800aee6:	602b      	str	r3, [r5, #0]
 800aee8:	f7f5 ff22 	bl	8000d30 <_isatty>
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	d102      	bne.n	800aef6 <_isatty_r+0x1a>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	b103      	cbz	r3, 800aef6 <_isatty_r+0x1a>
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	240006f0 	.word	0x240006f0

0800aefc <_lseek_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4d07      	ldr	r5, [pc, #28]	@ (800af1c <_lseek_r+0x20>)
 800af00:	4604      	mov	r4, r0
 800af02:	4608      	mov	r0, r1
 800af04:	4611      	mov	r1, r2
 800af06:	2200      	movs	r2, #0
 800af08:	602a      	str	r2, [r5, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	f7f5 ff1b 	bl	8000d46 <_lseek>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_lseek_r+0x1e>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	b103      	cbz	r3, 800af1a <_lseek_r+0x1e>
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	240006f0 	.word	0x240006f0

0800af20 <_read_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4d07      	ldr	r5, [pc, #28]	@ (800af40 <_read_r+0x20>)
 800af24:	4604      	mov	r4, r0
 800af26:	4608      	mov	r0, r1
 800af28:	4611      	mov	r1, r2
 800af2a:	2200      	movs	r2, #0
 800af2c:	602a      	str	r2, [r5, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	f7f5 fec5 	bl	8000cbe <_read>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_read_r+0x1e>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_read_r+0x1e>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	240006f0 	.word	0x240006f0

0800af44 <_sbrk_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4d06      	ldr	r5, [pc, #24]	@ (800af60 <_sbrk_r+0x1c>)
 800af48:	2300      	movs	r3, #0
 800af4a:	4604      	mov	r4, r0
 800af4c:	4608      	mov	r0, r1
 800af4e:	602b      	str	r3, [r5, #0]
 800af50:	f7f5 ff06 	bl	8000d60 <_sbrk>
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	d102      	bne.n	800af5e <_sbrk_r+0x1a>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	b103      	cbz	r3, 800af5e <_sbrk_r+0x1a>
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	bd38      	pop	{r3, r4, r5, pc}
 800af60:	240006f0 	.word	0x240006f0

0800af64 <_write_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4d07      	ldr	r5, [pc, #28]	@ (800af84 <_write_r+0x20>)
 800af68:	4604      	mov	r4, r0
 800af6a:	4608      	mov	r0, r1
 800af6c:	4611      	mov	r1, r2
 800af6e:	2200      	movs	r2, #0
 800af70:	602a      	str	r2, [r5, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	f7f5 fe04 	bl	8000b80 <_write>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_write_r+0x1e>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_write_r+0x1e>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	240006f0 	.word	0x240006f0

0800af88 <_close_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4d06      	ldr	r5, [pc, #24]	@ (800afa4 <_close_r+0x1c>)
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	4608      	mov	r0, r1
 800af92:	602b      	str	r3, [r5, #0]
 800af94:	f7f5 feb0 	bl	8000cf8 <_close>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_close_r+0x1a>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_close_r+0x1a>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	240006f0 	.word	0x240006f0

0800afa8 <_fstat_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4d07      	ldr	r5, [pc, #28]	@ (800afc8 <_fstat_r+0x20>)
 800afac:	2300      	movs	r3, #0
 800afae:	4604      	mov	r4, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	4611      	mov	r1, r2
 800afb4:	602b      	str	r3, [r5, #0]
 800afb6:	f7f5 feab 	bl	8000d10 <_fstat>
 800afba:	1c43      	adds	r3, r0, #1
 800afbc:	d102      	bne.n	800afc4 <_fstat_r+0x1c>
 800afbe:	682b      	ldr	r3, [r5, #0]
 800afc0:	b103      	cbz	r3, 800afc4 <_fstat_r+0x1c>
 800afc2:	6023      	str	r3, [r4, #0]
 800afc4:	bd38      	pop	{r3, r4, r5, pc}
 800afc6:	bf00      	nop
 800afc8:	240006f0 	.word	0x240006f0

0800afcc <memcpy>:
 800afcc:	440a      	add	r2, r1
 800afce:	4291      	cmp	r1, r2
 800afd0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800afd4:	d100      	bne.n	800afd8 <memcpy+0xc>
 800afd6:	4770      	bx	lr
 800afd8:	b510      	push	{r4, lr}
 800afda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afe2:	4291      	cmp	r1, r2
 800afe4:	d1f9      	bne.n	800afda <memcpy+0xe>
 800afe6:	bd10      	pop	{r4, pc}

0800afe8 <__assert_func>:
 800afe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afea:	4614      	mov	r4, r2
 800afec:	461a      	mov	r2, r3
 800afee:	4b09      	ldr	r3, [pc, #36]	@ (800b014 <__assert_func+0x2c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4605      	mov	r5, r0
 800aff4:	68d8      	ldr	r0, [r3, #12]
 800aff6:	b14c      	cbz	r4, 800b00c <__assert_func+0x24>
 800aff8:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <__assert_func+0x30>)
 800affa:	9100      	str	r1, [sp, #0]
 800affc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b000:	4906      	ldr	r1, [pc, #24]	@ (800b01c <__assert_func+0x34>)
 800b002:	462b      	mov	r3, r5
 800b004:	f000 f87e 	bl	800b104 <fiprintf>
 800b008:	f000 f89b 	bl	800b142 <abort>
 800b00c:	4b04      	ldr	r3, [pc, #16]	@ (800b020 <__assert_func+0x38>)
 800b00e:	461c      	mov	r4, r3
 800b010:	e7f3      	b.n	800affa <__assert_func+0x12>
 800b012:	bf00      	nop
 800b014:	2400001c 	.word	0x2400001c
 800b018:	0800b349 	.word	0x0800b349
 800b01c:	0800b356 	.word	0x0800b356
 800b020:	0800b384 	.word	0x0800b384

0800b024 <_calloc_r>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	fba1 5402 	umull	r5, r4, r1, r2
 800b02a:	b934      	cbnz	r4, 800b03a <_calloc_r+0x16>
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7ff f969 	bl	800a304 <_malloc_r>
 800b032:	4606      	mov	r6, r0
 800b034:	b928      	cbnz	r0, 800b042 <_calloc_r+0x1e>
 800b036:	4630      	mov	r0, r6
 800b038:	bd70      	pop	{r4, r5, r6, pc}
 800b03a:	220c      	movs	r2, #12
 800b03c:	6002      	str	r2, [r0, #0]
 800b03e:	2600      	movs	r6, #0
 800b040:	e7f9      	b.n	800b036 <_calloc_r+0x12>
 800b042:	462a      	mov	r2, r5
 800b044:	4621      	mov	r1, r4
 800b046:	f7fe f9d1 	bl	80093ec <memset>
 800b04a:	e7f4      	b.n	800b036 <_calloc_r+0x12>

0800b04c <_free_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4605      	mov	r5, r0
 800b050:	2900      	cmp	r1, #0
 800b052:	d041      	beq.n	800b0d8 <_free_r+0x8c>
 800b054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b058:	1f0c      	subs	r4, r1, #4
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	bfb8      	it	lt
 800b05e:	18e4      	addlt	r4, r4, r3
 800b060:	f7ff fa7c 	bl	800a55c <__malloc_lock>
 800b064:	4a1d      	ldr	r2, [pc, #116]	@ (800b0dc <_free_r+0x90>)
 800b066:	6813      	ldr	r3, [r2, #0]
 800b068:	b933      	cbnz	r3, 800b078 <_free_r+0x2c>
 800b06a:	6063      	str	r3, [r4, #4]
 800b06c:	6014      	str	r4, [r2, #0]
 800b06e:	4628      	mov	r0, r5
 800b070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b074:	f7ff ba78 	b.w	800a568 <__malloc_unlock>
 800b078:	42a3      	cmp	r3, r4
 800b07a:	d908      	bls.n	800b08e <_free_r+0x42>
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	1821      	adds	r1, r4, r0
 800b080:	428b      	cmp	r3, r1
 800b082:	bf01      	itttt	eq
 800b084:	6819      	ldreq	r1, [r3, #0]
 800b086:	685b      	ldreq	r3, [r3, #4]
 800b088:	1809      	addeq	r1, r1, r0
 800b08a:	6021      	streq	r1, [r4, #0]
 800b08c:	e7ed      	b.n	800b06a <_free_r+0x1e>
 800b08e:	461a      	mov	r2, r3
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	b10b      	cbz	r3, 800b098 <_free_r+0x4c>
 800b094:	42a3      	cmp	r3, r4
 800b096:	d9fa      	bls.n	800b08e <_free_r+0x42>
 800b098:	6811      	ldr	r1, [r2, #0]
 800b09a:	1850      	adds	r0, r2, r1
 800b09c:	42a0      	cmp	r0, r4
 800b09e:	d10b      	bne.n	800b0b8 <_free_r+0x6c>
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	4401      	add	r1, r0
 800b0a4:	1850      	adds	r0, r2, r1
 800b0a6:	4283      	cmp	r3, r0
 800b0a8:	6011      	str	r1, [r2, #0]
 800b0aa:	d1e0      	bne.n	800b06e <_free_r+0x22>
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	6053      	str	r3, [r2, #4]
 800b0b2:	4408      	add	r0, r1
 800b0b4:	6010      	str	r0, [r2, #0]
 800b0b6:	e7da      	b.n	800b06e <_free_r+0x22>
 800b0b8:	d902      	bls.n	800b0c0 <_free_r+0x74>
 800b0ba:	230c      	movs	r3, #12
 800b0bc:	602b      	str	r3, [r5, #0]
 800b0be:	e7d6      	b.n	800b06e <_free_r+0x22>
 800b0c0:	6820      	ldr	r0, [r4, #0]
 800b0c2:	1821      	adds	r1, r4, r0
 800b0c4:	428b      	cmp	r3, r1
 800b0c6:	bf04      	itt	eq
 800b0c8:	6819      	ldreq	r1, [r3, #0]
 800b0ca:	685b      	ldreq	r3, [r3, #4]
 800b0cc:	6063      	str	r3, [r4, #4]
 800b0ce:	bf04      	itt	eq
 800b0d0:	1809      	addeq	r1, r1, r0
 800b0d2:	6021      	streq	r1, [r4, #0]
 800b0d4:	6054      	str	r4, [r2, #4]
 800b0d6:	e7ca      	b.n	800b06e <_free_r+0x22>
 800b0d8:	bd38      	pop	{r3, r4, r5, pc}
 800b0da:	bf00      	nop
 800b0dc:	240006ec 	.word	0x240006ec

0800b0e0 <__ascii_mbtowc>:
 800b0e0:	b082      	sub	sp, #8
 800b0e2:	b901      	cbnz	r1, 800b0e6 <__ascii_mbtowc+0x6>
 800b0e4:	a901      	add	r1, sp, #4
 800b0e6:	b142      	cbz	r2, 800b0fa <__ascii_mbtowc+0x1a>
 800b0e8:	b14b      	cbz	r3, 800b0fe <__ascii_mbtowc+0x1e>
 800b0ea:	7813      	ldrb	r3, [r2, #0]
 800b0ec:	600b      	str	r3, [r1, #0]
 800b0ee:	7812      	ldrb	r2, [r2, #0]
 800b0f0:	1e10      	subs	r0, r2, #0
 800b0f2:	bf18      	it	ne
 800b0f4:	2001      	movne	r0, #1
 800b0f6:	b002      	add	sp, #8
 800b0f8:	4770      	bx	lr
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	e7fb      	b.n	800b0f6 <__ascii_mbtowc+0x16>
 800b0fe:	f06f 0001 	mvn.w	r0, #1
 800b102:	e7f8      	b.n	800b0f6 <__ascii_mbtowc+0x16>

0800b104 <fiprintf>:
 800b104:	b40e      	push	{r1, r2, r3}
 800b106:	b503      	push	{r0, r1, lr}
 800b108:	4601      	mov	r1, r0
 800b10a:	ab03      	add	r3, sp, #12
 800b10c:	4805      	ldr	r0, [pc, #20]	@ (800b124 <fiprintf+0x20>)
 800b10e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b112:	6800      	ldr	r0, [r0, #0]
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	f7fe ffb3 	bl	800a080 <_vfiprintf_r>
 800b11a:	b002      	add	sp, #8
 800b11c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b120:	b003      	add	sp, #12
 800b122:	4770      	bx	lr
 800b124:	2400001c 	.word	0x2400001c

0800b128 <__ascii_wctomb>:
 800b128:	4603      	mov	r3, r0
 800b12a:	4608      	mov	r0, r1
 800b12c:	b141      	cbz	r1, 800b140 <__ascii_wctomb+0x18>
 800b12e:	2aff      	cmp	r2, #255	@ 0xff
 800b130:	d904      	bls.n	800b13c <__ascii_wctomb+0x14>
 800b132:	228a      	movs	r2, #138	@ 0x8a
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b13a:	4770      	bx	lr
 800b13c:	700a      	strb	r2, [r1, #0]
 800b13e:	2001      	movs	r0, #1
 800b140:	4770      	bx	lr

0800b142 <abort>:
 800b142:	b508      	push	{r3, lr}
 800b144:	2006      	movs	r0, #6
 800b146:	f000 f82b 	bl	800b1a0 <raise>
 800b14a:	2001      	movs	r0, #1
 800b14c:	f7f5 fdac 	bl	8000ca8 <_exit>

0800b150 <_raise_r>:
 800b150:	291f      	cmp	r1, #31
 800b152:	b538      	push	{r3, r4, r5, lr}
 800b154:	4605      	mov	r5, r0
 800b156:	460c      	mov	r4, r1
 800b158:	d904      	bls.n	800b164 <_raise_r+0x14>
 800b15a:	2316      	movs	r3, #22
 800b15c:	6003      	str	r3, [r0, #0]
 800b15e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b166:	b112      	cbz	r2, 800b16e <_raise_r+0x1e>
 800b168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b16c:	b94b      	cbnz	r3, 800b182 <_raise_r+0x32>
 800b16e:	4628      	mov	r0, r5
 800b170:	f000 f830 	bl	800b1d4 <_getpid_r>
 800b174:	4622      	mov	r2, r4
 800b176:	4601      	mov	r1, r0
 800b178:	4628      	mov	r0, r5
 800b17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b17e:	f000 b817 	b.w	800b1b0 <_kill_r>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d00a      	beq.n	800b19c <_raise_r+0x4c>
 800b186:	1c59      	adds	r1, r3, #1
 800b188:	d103      	bne.n	800b192 <_raise_r+0x42>
 800b18a:	2316      	movs	r3, #22
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	2001      	movs	r0, #1
 800b190:	e7e7      	b.n	800b162 <_raise_r+0x12>
 800b192:	2100      	movs	r1, #0
 800b194:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b198:	4620      	mov	r0, r4
 800b19a:	4798      	blx	r3
 800b19c:	2000      	movs	r0, #0
 800b19e:	e7e0      	b.n	800b162 <_raise_r+0x12>

0800b1a0 <raise>:
 800b1a0:	4b02      	ldr	r3, [pc, #8]	@ (800b1ac <raise+0xc>)
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f7ff bfd3 	b.w	800b150 <_raise_r>
 800b1aa:	bf00      	nop
 800b1ac:	2400001c 	.word	0x2400001c

0800b1b0 <_kill_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4d07      	ldr	r5, [pc, #28]	@ (800b1d0 <_kill_r+0x20>)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	602b      	str	r3, [r5, #0]
 800b1be:	f7f5 fd63 	bl	8000c88 <_kill>
 800b1c2:	1c43      	adds	r3, r0, #1
 800b1c4:	d102      	bne.n	800b1cc <_kill_r+0x1c>
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	b103      	cbz	r3, 800b1cc <_kill_r+0x1c>
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	bd38      	pop	{r3, r4, r5, pc}
 800b1ce:	bf00      	nop
 800b1d0:	240006f0 	.word	0x240006f0

0800b1d4 <_getpid_r>:
 800b1d4:	f7f5 bd50 	b.w	8000c78 <_getpid>

0800b1d8 <_init>:
 800b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1da:	bf00      	nop
 800b1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1de:	bc08      	pop	{r3}
 800b1e0:	469e      	mov	lr, r3
 800b1e2:	4770      	bx	lr

0800b1e4 <_fini>:
 800b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e6:	bf00      	nop
 800b1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ea:	bc08      	pop	{r3}
 800b1ec:	469e      	mov	lr, r3
 800b1ee:	4770      	bx	lr
