
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc90  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800cf30  0800cf30  0000df30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d49c  0800d49c  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d49c  0800d49c  0000e49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4a4  0800d4a4  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4a4  0800d4a4  0000e4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d4a8  0800d4a8  0000e4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800d4ac  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b18  240001d8  0800d684  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000cf0  0800d684  0000fcf0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001457e  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002949  00000000  00000000  00023784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  000260d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3f  00000000  00000000  00026f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004052d  00000000  00000000  00027a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001681c  00000000  00000000  00067fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019add2  00000000  00000000  0007e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002195ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c58  00000000  00000000  00219600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0021e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cf18 	.word	0x0800cf18

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800cf18 	.word	0x0800cf18

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b3d      	ldr	r3, [pc, #244]	@ (80007b8 <SystemInit+0xfc>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a3c      	ldr	r2, [pc, #240]	@ (80007b8 <SystemInit+0xfc>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b39      	ldr	r3, [pc, #228]	@ (80007b8 <SystemInit+0xfc>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a38      	ldr	r2, [pc, #224]	@ (80007b8 <SystemInit+0xfc>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b37      	ldr	r3, [pc, #220]	@ (80007bc <SystemInit+0x100>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b34      	ldr	r3, [pc, #208]	@ (80007bc <SystemInit+0x100>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a32      	ldr	r2, [pc, #200]	@ (80007bc <SystemInit+0x100>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b31      	ldr	r3, [pc, #196]	@ (80007c0 <SystemInit+0x104>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a30      	ldr	r2, [pc, #192]	@ (80007c0 <SystemInit+0x104>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <SystemInit+0x104>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <SystemInit+0x104>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	492c      	ldr	r1, [pc, #176]	@ (80007c0 <SystemInit+0x104>)
 8000710:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <SystemInit+0x108>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <SystemInit+0x100>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <SystemInit+0x100>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a24      	ldr	r2, [pc, #144]	@ (80007bc <SystemInit+0x100>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <SystemInit+0x104>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <SystemInit+0x104>)
 8000746:	4a20      	ldr	r2, [pc, #128]	@ (80007c8 <SystemInit+0x10c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x104>)
 800074c:	4a1f      	ldr	r2, [pc, #124]	@ (80007cc <SystemInit+0x110>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <SystemInit+0x104>)
 8000752:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <SystemInit+0x114>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <SystemInit+0x104>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <SystemInit+0x104>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	@ (80007d0 <SystemInit+0x114>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <SystemInit+0x104>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <SystemInit+0x104>)
 800076a:	4a19      	ldr	r2, [pc, #100]	@ (80007d0 <SystemInit+0x114>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <SystemInit+0x104>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <SystemInit+0x104>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a11      	ldr	r2, [pc, #68]	@ (80007c0 <SystemInit+0x104>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <SystemInit+0x104>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <SystemInit+0x118>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <SystemInit+0x118>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <SystemInit+0x11c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <SystemInit+0x120>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <SystemInit+0x124>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <SystemInit+0x128>)
 80007a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ac:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	52002000 	.word	0x52002000
 80007c0:	58024400 	.word	0x58024400
 80007c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c8:	02020200 	.word	0x02020200
 80007cc:	01ff0000 	.word	0x01ff0000
 80007d0:	01010280 	.word	0x01010280
 80007d4:	580000c0 	.word	0x580000c0
 80007d8:	5c001000 	.word	0x5c001000
 80007dc:	ffff0000 	.word	0xffff0000
 80007e0:	51008108 	.word	0x51008108
 80007e4:	52004000 	.word	0x52004000

080007e8 <calculate_decibel>:
/* USER CODE BEGIN 0 */

int16_t audio_buffer[BUFFER_SIZE];

float calculate_decibel(int16_t *buffer, size_t size)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
    float sum = 0.0f;
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]

    for (size_t i = 0; i < size; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	e01c      	b.n	8000838 <calculate_decibel+0x50>
    {
        float voltage = (float)buffer[i] / 32768.0f; // Normalize 16-bit value
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800080a:	ee07 3a90 	vmov	s15, r3
 800080e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000812:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000894 <calculate_decibel+0xac>
 8000816:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800081a:	edc7 7a03 	vstr	s15, [r7, #12]
        sum += voltage * voltage;
 800081e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000822:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000826:	ed97 7a07 	vldr	s14, [r7, #28]
 800082a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800082e:	edc7 7a07 	vstr	s15, [r7, #28]
    for (size_t i = 0; i < size; i++)
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	3301      	adds	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	429a      	cmp	r2, r3
 800083e:	d3de      	bcc.n	80007fe <calculate_decibel+0x16>
    }

    float rms = sqrtf(sum / size);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	ee07 3a90 	vmov	s15, r3
 8000846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800084a:	ed97 7a07 	vldr	s14, [r7, #28]
 800084e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000852:	eeb0 0a66 	vmov.f32	s0, s13
 8000856:	f009 fdeb 	bl	800a430 <sqrtf>
 800085a:	ed87 0a05 	vstr	s0, [r7, #20]
    float spl = 20.0f * log10f(rms / REFERENCE_VOLTAGE);
 800085e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000862:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000898 <calculate_decibel+0xb0>
 8000866:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800086a:	eeb0 0a47 	vmov.f32	s0, s14
 800086e:	f009 fdb1 	bl	800a3d4 <log10f>
 8000872:	eef0 7a40 	vmov.f32	s15, s0
 8000876:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800087a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800087e:	edc7 7a04 	vstr	s15, [r7, #16]

    return spl;
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	ee07 3a90 	vmov	s15, r3
}
 8000888:	eeb0 0a67 	vmov.f32	s0, s15
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	47000000 	.word	0x47000000
 8000898:	37a7c5ac 	.word	0x37a7c5ac

0800089c <_write>:

int _write(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <_write+0x28>)
 80008b4:	f008 fc74 	bl	80091a0 <HAL_UART_Transmit>
    return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	24000304 	.word	0x24000304

080008c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN 1 */
    memset(audio_buffer, 0xAA, sizeof(audio_buffer)); // Initialize buffer
 80008ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008d2:	21aa      	movs	r1, #170	@ 0xaa
 80008d4:	4848      	ldr	r0, [pc, #288]	@ (80009f8 <main+0x130>)
 80008d6:	f00a fc27 	bl	800b128 <memset>
    /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* MPU Configuration--------------------------------------------------------*/
    MPU_Config();
 80008da:	f000 fa4d 	bl	8000d78 <MPU_Config>

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 80008de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008e2:	60fb      	str	r3, [r7, #12]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80008e4:	bf00      	nop
 80008e6:	4b45      	ldr	r3, [pc, #276]	@ (80009fc <main+0x134>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d004      	beq.n	80008fc <main+0x34>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	1e5a      	subs	r2, r3, #1
 80008f6:	60fa      	str	r2, [r7, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	dcf4      	bgt.n	80008e6 <main+0x1e>
        ;
    if (timeout < 0)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	da01      	bge.n	8000906 <main+0x3e>
    {
        Error_Handler();
 8000902:	f000 fa65 	bl	8000dd0 <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000906:	f000 fc8d 	bl	8001224 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800090a:	f000 f887 	bl	8000a1c <SystemClock_Config>

    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
 800090e:	f000 f8f9 	bl	8000b04 <PeriphCommonClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 8000912:	4b3a      	ldr	r3, [pc, #232]	@ (80009fc <main+0x134>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000918:	4a38      	ldr	r2, [pc, #224]	@ (80009fc <main+0x134>)
 800091a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000922:	4b36      	ldr	r3, [pc, #216]	@ (80009fc <main+0x134>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 8000930:	2000      	movs	r0, #0
 8000932:	f003 ff7f 	bl	8004834 <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f003 ff95 	bl	8004868 <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 800093e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000942:	60fb      	str	r3, [r7, #12]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000944:	bf00      	nop
 8000946:	4b2d      	ldr	r3, [pc, #180]	@ (80009fc <main+0x134>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d104      	bne.n	800095c <main+0x94>
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	60fa      	str	r2, [r7, #12]
 8000958:	2b00      	cmp	r3, #0
 800095a:	dcf4      	bgt.n	8000946 <main+0x7e>
        ;
    if (timeout < 0)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	da01      	bge.n	8000966 <main+0x9e>
    {
        Error_Handler();
 8000962:	f000 fa35 	bl	8000dd0 <Error_Handler>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000966:	f000 f9cf 	bl	8000d08 <MX_GPIO_Init>
    MX_BDMA_Init();
 800096a:	f000 f9ad 	bl	8000cc8 <MX_BDMA_Init>
    MX_USART1_UART_Init();
 800096e:	f000 f95f 	bl	8000c30 <MX_USART1_UART_Init>
    MX_SAI4_Init();
 8000972:	f000 f8fd 	bl	8000b70 <MX_SAI4_Init>
    /* USER CODE BEGIN 2 */
    printf("Starting SAI DMA...\r\n");
 8000976:	4822      	ldr	r0, [pc, #136]	@ (8000a00 <main+0x138>)
 8000978:	f00a fbce 	bl	800b118 <puts>
    if (HAL_SAI_Receive_DMA(&hsai_BlockA4, (uint8_t *)audio_buffer, BUFFER_SIZE) != HAL_OK)
 800097c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000980:	491d      	ldr	r1, [pc, #116]	@ (80009f8 <main+0x130>)
 8000982:	4820      	ldr	r0, [pc, #128]	@ (8000a04 <main+0x13c>)
 8000984:	f008 f83c 	bl	8008a00 <HAL_SAI_Receive_DMA>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <main+0xd6>
    {
        printf("SAI DMA initialization failed! Error: %ld\r\n", hsai_BlockA4.ErrorCode);
 800098e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <main+0x13c>)
 8000990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000994:	4619      	mov	r1, r3
 8000996:	481c      	ldr	r0, [pc, #112]	@ (8000a08 <main+0x140>)
 8000998:	f00a fb56 	bl	800b048 <iprintf>
 800099c:	e002      	b.n	80009a4 <main+0xdc>
    }
    else
    {
        printf("SAI DMA started successfully.\r\n");
 800099e:	481b      	ldr	r0, [pc, #108]	@ (8000a0c <main+0x144>)
 80009a0:	f00a fbba 	bl	800b118 <puts>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        printf("Audio Buffer Data:\r\n");
 80009a4:	481a      	ldr	r0, [pc, #104]	@ (8000a10 <main+0x148>)
 80009a6:	f00a fbb7 	bl	800b118 <puts>
        for (int i = 0; i < 10; i++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	e00b      	b.n	80009c8 <main+0x100>
        {
            printf("[%d]: %d\r\n", i, audio_buffer[i]);
 80009b0:	4a11      	ldr	r2, [pc, #68]	@ (80009f8 <main+0x130>)
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009b8:	461a      	mov	r2, r3
 80009ba:	68b9      	ldr	r1, [r7, #8]
 80009bc:	4815      	ldr	r0, [pc, #84]	@ (8000a14 <main+0x14c>)
 80009be:	f00a fb43 	bl	800b048 <iprintf>
        for (int i = 0; i < 10; i++)
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	2b09      	cmp	r3, #9
 80009cc:	ddf0      	ble.n	80009b0 <main+0xe8>
        }
        float decibel_level = calculate_decibel(audio_buffer, BUFFER_SIZE);
 80009ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009d2:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <main+0x130>)
 80009d4:	f7ff ff08 	bl	80007e8 <calculate_decibel>
 80009d8:	ed87 0a01 	vstr	s0, [r7, #4]
        printf("SPL: %.2f dB\r\n", decibel_level);
 80009dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80009e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e4:	ec53 2b17 	vmov	r2, r3, d7
 80009e8:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <main+0x150>)
 80009ea:	f00a fb2d 	bl	800b048 <iprintf>
        HAL_Delay(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f2:	f000 fca9 	bl	8001348 <HAL_Delay>
    {
 80009f6:	e7d5      	b.n	80009a4 <main+0xdc>
 80009f8:	24000398 	.word	0x24000398
 80009fc:	58024400 	.word	0x58024400
 8000a00:	0800cf30 	.word	0x0800cf30
 8000a04:	240001f4 	.word	0x240001f4
 8000a08:	0800cf48 	.word	0x0800cf48
 8000a0c:	0800cf74 	.word	0x0800cf74
 8000a10:	0800cf94 	.word	0x0800cf94
 8000a14:	0800cfa8 	.word	0x0800cfa8
 8000a18:	0800cfb4 	.word	0x0800cfb4

08000a1c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09c      	sub	sp, #112	@ 0x70
 8000a20:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a26:	224c      	movs	r2, #76	@ 0x4c
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f00a fb7c 	bl	800b128 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2220      	movs	r2, #32
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00a fb76 	bl	800b128 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a3c:	2004      	movs	r0, #4
 8000a3e:	f003 ff27 	bl	8004890 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <SystemClock_Config+0xdc>)
 8000a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000af8 <SystemClock_Config+0xdc>)
 8000a4c:	f023 0301 	bic.w	r3, r3, #1
 8000a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a52:	4b29      	ldr	r3, [pc, #164]	@ (8000af8 <SystemClock_Config+0xdc>)
 8000a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <SystemClock_Config+0xe0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a64:	4a25      	ldr	r2, [pc, #148]	@ (8000afc <SystemClock_Config+0xe0>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <SystemClock_Config+0xe0>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000a78:	bf00      	nop
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <SystemClock_Config+0xe0>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a86:	d1f8      	bne.n	8000a7a <SystemClock_Config+0x5e>
    {
    }

    /** Macro to configure the PLL clock source
     */
    __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000a88:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <SystemClock_Config+0xe4>)
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <SystemClock_Config+0xe4>)
 8000a8e:	f023 0303 	bic.w	r3, r3, #3
 8000a92:	6293      	str	r3, [r2, #40]	@ 0x28

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9c:	2340      	movs	r3, #64	@ 0x40
 8000a9e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 ff4b 	bl	8004944 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x9c>
    {
        Error_Handler();
 8000ab4:	f000 f98c 	bl	8000dd0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 8000ab8:	233f      	movs	r3, #63	@ 0x3f
 8000aba:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 |
                                  RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2101      	movs	r1, #1
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f004 fb8a 	bl	80051f8 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xd2>
    {
        Error_Handler();
 8000aea:	f000 f971 	bl	8000dd0 <Error_Handler>
    }
}
 8000aee:	bf00      	nop
 8000af0:	3770      	adds	r7, #112	@ 0x70
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	58000400 	.word	0x58000400
 8000afc:	58024800 	.word	0x58024800
 8000b00:	58024400 	.word	0x58024400

08000b04 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0b2      	sub	sp, #200	@ 0xc8
 8000b08:	af00      	add	r7, sp, #0
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	22c8      	movs	r2, #200	@ 0xc8
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f00a fb09 	bl	800b128 <memset>

    /** Initializes the peripherals clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A | RCC_PERIPHCLK_USART1;
 8000b16:	f240 4201 	movw	r2, #1025	@ 0x401
 8000b1a:	f04f 0300 	mov.w	r3, #0
 8000b1e:	e9c7 2300 	strd	r2, r3, [r7]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8000b22:	2304      	movs	r3, #4
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8000b26:	230a      	movs	r3, #10
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000b36:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000b3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b40:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8000b46:	2310      	movs	r3, #16
 8000b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL3;
 8000b4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 feda 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <PeriphCommonClock_Config+0x62>
    {
        Error_Handler();
 8000b62:	f000 f935 	bl	8000dd0 <Error_Handler>
    }
}
 8000b66:	bf00      	nop
 8000b68:	37c8      	adds	r7, #200	@ 0xc8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <MX_SAI4_Init>:
 * @brief SAI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    /* USER CODE END SAI4_Init 0 */

    /* USER CODE BEGIN SAI4_Init 1 */

    /* USER CODE END SAI4_Init 1 */
    hsai_BlockA4.Instance = SAI4_Block_A;
 8000b74:	4b2b      	ldr	r3, [pc, #172]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000b76:	4a2c      	ldr	r2, [pc, #176]	@ (8000c28 <MX_SAI4_Init+0xb8>)
 8000b78:	601a      	str	r2, [r3, #0]
    hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	645a      	str	r2, [r3, #68]	@ 0x44
    hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8000b80:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	605a      	str	r2, [r3, #4]
    hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 8000b86:	4b27      	ldr	r3, [pc, #156]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000b88:	2280      	movs	r2, #128	@ 0x80
 8000b8a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b8c:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b92:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
    hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
    hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
    hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000baa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
    hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c2c <MX_SAI4_Init+0xbc>)
 8000bb4:	621a      	str	r2, [r3, #32]
    hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 8000bca:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bd6:	641a      	str	r2, [r3, #64]	@ 0x40
    hsai_BlockA4.FrameInit.FrameLength = 16;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bda:	2210      	movs	r2, #16
 8000bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	659a      	str	r2, [r3, #88]	@ 0x58
    hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	669a      	str	r2, [r3, #104]	@ 0x68
    hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	66da      	str	r2, [r3, #108]	@ 0x6c
    hsai_BlockA4.SlotInit.SlotNumber = 1;
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	671a      	str	r2, [r3, #112]	@ 0x70
    hsai_BlockA4.SlotInit.SlotActive = 0x00000000;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	675a      	str	r2, [r3, #116]	@ 0x74
    if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_SAI4_Init+0xb4>)
 8000c10:	f007 fbbc 	bl	800838c <HAL_SAI_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_SAI4_Init+0xae>
    {
        Error_Handler();
 8000c1a:	f000 f8d9 	bl	8000dd0 <Error_Handler>
    }
    /* USER CODE BEGIN SAI4_Init 2 */

    /* USER CODE END SAI4_Init 2 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	240001f4 	.word	0x240001f4
 8000c28:	58005404 	.word	0x58005404
 8000c2c:	0002ee00 	.word	0x0002ee00

08000c30 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c36:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <MX_USART1_UART_Init+0x94>)
 8000c38:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c78:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c7a:	f008 fa41 	bl	8009100 <HAL_UART_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART1_UART_Init+0x58>
    {
        Error_Handler();
 8000c84:	f000 f8a4 	bl	8000dd0 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c8c:	f009 fad7 	bl	800a23e <HAL_UARTEx_SetTxFifoThreshold>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART1_UART_Init+0x6a>
    {
        Error_Handler();
 8000c96:	f000 f89b 	bl	8000dd0 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4808      	ldr	r0, [pc, #32]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000c9e:	f009 fb0c 	bl	800a2ba <HAL_UARTEx_SetRxFifoThreshold>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART1_UART_Init+0x7c>
    {
        Error_Handler();
 8000ca8:	f000 f892 	bl	8000dd0 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <MX_USART1_UART_Init+0x90>)
 8000cae:	f009 fa8d 	bl	800a1cc <HAL_UARTEx_DisableFifoMode>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART1_UART_Init+0x8c>
    {
        Error_Handler();
 8000cb8:	f000 f88a 	bl	8000dd0 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	24000304 	.word	0x24000304
 8000cc4:	40011000 	.word	0x40011000

08000cc8 <MX_BDMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_BDMA_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_BDMA_CLK_ENABLE();
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <MX_BDMA_Init+0x3c>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d04 <MX_BDMA_Init+0x3c>)
 8000cd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <MX_BDMA_Init+0x3c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* BDMA_Channel0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2081      	movs	r0, #129	@ 0x81
 8000cf2:	f000 fc34 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000cf6:	2081      	movs	r0, #129	@ 0x81
 8000cf8:	f000 fc4b 	bl	8001592 <HAL_NVIC_EnableIRQ>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	58024400 	.word	0x58024400

08000d08 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <MX_GPIO_Init+0x6c>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	4a17      	ldr	r2, [pc, #92]	@ (8000d74 <MX_GPIO_Init+0x6c>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_GPIO_Init+0x6c>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_GPIO_Init+0x6c>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d32:	4a10      	ldr	r2, [pc, #64]	@ (8000d74 <MX_GPIO_Init+0x6c>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <MX_GPIO_Init+0x6c>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_GPIO_Init+0x6c>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <MX_GPIO_Init+0x6c>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_GPIO_Init+0x6c>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	58024400 	.word	0x58024400

08000d78 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 8000d8a:	f000 fc1d 	bl	80015c8 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d9a:	231f      	movs	r3, #31
 8000d9c:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 8000d9e:	2387      	movs	r3, #135	@ 0x87
 8000da0:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000da6:	2300      	movs	r3, #0
 8000da8:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dae:	2301      	movs	r3, #1
 8000db0:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fc3b 	bl	8001638 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dc2:	2004      	movs	r0, #4
 8000dc4:	f000 fc18 	bl	80015f8 <HAL_MPU_Enable>
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <HAL_MspInit+0x30>)
 8000de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de8:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <HAL_MspInit+0x30>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_MspInit+0x30>)
 8000df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	58024400 	.word	0x58024400

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12e      	bne.n	8000e90 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e32:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e38:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	4a11      	ldr	r2, [pc, #68]	@ (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e60:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000e6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e80:	2307      	movs	r3, #7
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <HAL_UART_MspInit+0x90>)
 8000e8c:	f003 fb22 	bl	80044d4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	@ 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40011000 	.word	0x40011000
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	58020000 	.word	0x58020000

08000ea4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai4_a;

static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	@ 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a49      	ldr	r2, [pc, #292]	@ (8000fd8 <HAL_SAI_MspInit+0x134>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	f040 808b 	bne.w	8000fce <HAL_SAI_MspInit+0x12a>
    {
    /* Peripheral clock enable */
    if (SAI4_client == 0)
 8000eb8:	4b48      	ldr	r3, [pc, #288]	@ (8000fdc <HAL_SAI_MspInit+0x138>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d116      	bne.n	8000eee <HAL_SAI_MspInit+0x4a>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8000ec0:	4b47      	ldr	r3, [pc, #284]	@ (8000fe0 <HAL_SAI_MspInit+0x13c>)
 8000ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ec6:	4a46      	ldr	r2, [pc, #280]	@ (8000fe0 <HAL_SAI_MspInit+0x13c>)
 8000ec8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ecc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ed0:	4b43      	ldr	r3, [pc, #268]	@ (8000fe0 <HAL_SAI_MspInit+0x13c>)
 8000ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI4_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2092      	movs	r0, #146	@ 0x92
 8000ee4:	f000 fb3b 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI4_IRQn);
 8000ee8:	2092      	movs	r0, #146	@ 0x92
 8000eea:	f000 fb52 	bl	8001592 <HAL_NVIC_EnableIRQ>
    }
    SAI4_client ++;
 8000eee:	4b3b      	ldr	r3, [pc, #236]	@ (8000fdc <HAL_SAI_MspInit+0x138>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a39      	ldr	r2, [pc, #228]	@ (8000fdc <HAL_SAI_MspInit+0x138>)
 8000ef6:	6013      	str	r3, [r2, #0]

    /**SAI4_A_Block_A GPIO Configuration
    PE2     ------> SAI4_CK1
    PC1     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4834      	ldr	r0, [pc, #208]	@ (8000fe4 <HAL_SAI_MspInit+0x140>)
 8000f14:	f003 fade 	bl	80044d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000f28:	230a      	movs	r3, #10
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	482d      	ldr	r0, [pc, #180]	@ (8000fe8 <HAL_SAI_MspInit+0x144>)
 8000f34:	f003 face 	bl	80044d4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8000f38:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff0 <HAL_SAI_MspInit+0x14c>)
 8000f3c:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000f40:	220f      	movs	r2, #15
 8000f42:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f44:	4b29      	ldr	r3, [pc, #164]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4a:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8000f50:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000f52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f56:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f58:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000f5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f5e:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f60:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000f62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f66:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8000f68:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000f6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f6e:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000f72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8000f78:	481c      	ldr	r0, [pc, #112]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000f7a:	f000 fb9d 	bl	80016b8 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8000f84:	f7ff ff24 	bl	8000dd0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8000f88:	230e      	movs	r3, #14
 8000f8a:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = ENABLE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4812      	ldr	r0, [pc, #72]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000fa4:	f003 f9d0 	bl	8004348 <HAL_DMAEx_ConfigMuxSync>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_SAI_MspInit+0x10e>
    {
      Error_Handler();
 8000fae:	f7ff ff0f 	bl	8000dd0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000fba:	4a0c      	ldr	r2, [pc, #48]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000fc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000fc8:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <HAL_SAI_MspInit+0x148>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6393      	str	r3, [r2, #56]	@ 0x38

    }
}
 8000fce:	bf00      	nop
 8000fd0:	3730      	adds	r7, #48	@ 0x30
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	58005404 	.word	0x58005404
 8000fdc:	24000b98 	.word	0x24000b98
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58021000 	.word	0x58021000
 8000fe8:	58020800 	.word	0x58020800
 8000fec:	2400028c 	.word	0x2400028c
 8000ff0:	58025408 	.word	0x58025408

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <UsageFault_Handler+0x4>

0800101c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104a:	f000 f95d 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <BDMA_Channel0_IRQHandler+0x10>)
 800105a:	f001 fe57 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2400028c 	.word	0x2400028c

08001068 <SAI4_IRQHandler>:

/**
  * @brief This function handles SAI4 global interrupt.
  */
void SAI4_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI4_IRQn 0 */
	HAL_SAI_IRQHandler(&hsai_BlockA4);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <SAI4_IRQHandler+0x10>)
 800106e:	f007 fd5b 	bl	8008b28 <HAL_SAI_IRQHandler>
  /* USER CODE END SAI4_IRQn 0 */

  /* USER CODE BEGIN SAI4_IRQn 1 */

  /* USER CODE END SAI4_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	240001f4 	.word	0x240001f4

0800107c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return 1;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_kill>:

int _kill(int pid, int sig)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001096:	f00a f84f 	bl	800b138 <__errno>
 800109a:	4603      	mov	r3, r0
 800109c:	2216      	movs	r2, #22
 800109e:	601a      	str	r2, [r3, #0]
  return -1;
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_exit>:

void _exit (int status)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ffe7 	bl	800108c <_kill>
  while (1) {}    /* Make sure we hang here */
 80010be:	bf00      	nop
 80010c0:	e7fd      	b.n	80010be <_exit+0x12>

080010c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e00a      	b.n	80010ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010d4:	f3af 8000 	nop.w
 80010d8:	4601      	mov	r1, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	60ba      	str	r2, [r7, #8]
 80010e0:	b2ca      	uxtb	r2, r1
 80010e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dbf0      	blt.n	80010d4 <_read+0x12>
  }

  return len;
 80010f2:	687b      	ldr	r3, [r7, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001124:	605a      	str	r2, [r3, #4]
  return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_isatty>:

int _isatty(int file)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f009 ffd0 	bl	800b138 <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	24080000 	.word	0x24080000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	24000b9c 	.word	0x24000b9c
 80011cc:	24000cf0 	.word	0x24000cf0

080011d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001208 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d4:	f7ff fa72 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	@ (800120c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	@ (8001210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	@ (800121c <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fe:	f009 ffa1 	bl	800b144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001202:	f7ff fb61 	bl	80008c8 <main>
  bx  lr
 8001206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001208:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800120c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001210:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001214:	0800d4ac 	.word	0x0800d4ac
  ldr r2, =_sbss
 8001218:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800121c:	24000cf0 	.word	0x24000cf0

08001220 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC3_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122a:	2003      	movs	r0, #3
 800122c:	f000 f98c 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001230:	f004 f998 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8001234:	4602      	mov	r2, r0
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <HAL_Init+0x68>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	f003 030f 	and.w	r3, r3, #15
 8001240:	4913      	ldr	r1, [pc, #76]	@ (8001290 <HAL_Init+0x6c>)
 8001242:	5ccb      	ldrb	r3, [r1, r3]
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_Init+0x68>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	4a0e      	ldr	r2, [pc, #56]	@ (8001290 <HAL_Init+0x6c>)
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	f003 031f 	and.w	r3, r3, #31
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	4a0b      	ldr	r2, [pc, #44]	@ (8001294 <HAL_Init+0x70>)
 8001266:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001268:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <HAL_Init+0x74>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126e:	200f      	movs	r0, #15
 8001270:	f000 f814 	bl	800129c <HAL_InitTick>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e002      	b.n	8001284 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800127e:	f7ff fdad 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	58024400 	.word	0x58024400
 8001290:	0800cfc4 	.word	0x0800cfc4
 8001294:	24000004 	.word	0x24000004
 8001298:	24000000 	.word	0x24000000

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_InitTick+0x60>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e021      	b.n	80012f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <HAL_InitTick+0x64>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_InitTick+0x60>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f971 	bl	80015ae <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e4:	f000 f93b 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <HAL_InitTick+0x68>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2400000c 	.word	0x2400000c
 8001300:	24000000 	.word	0x24000000
 8001304:	24000008 	.word	0x24000008

08001308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	@ (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	2400000c 	.word	0x2400000c
 800132c:	24000ba0 	.word	0x24000ba0

08001330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	24000ba0 	.word	0x24000ba0

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff ffee 	bl	8001330 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_Delay+0x44>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffde 	bl	8001330 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2400000c 	.word	0x2400000c

08001390 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <HAL_GetREVID+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	0c1b      	lsrs	r3, r3, #16
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	5c001000 	.word	0x5c001000

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <__NVIC_SetPriorityGrouping+0x40>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <__NVIC_SetPriorityGrouping+0x40>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00
 80013ec:	05fa0000 	.word	0x05fa0000

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	@ (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	@ (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	@ (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	@ 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	@ 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff29 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff40 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff90 	bl	800149c <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5f 	bl	8001448 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff33 	bl	800140c <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffa4 	bl	8001504 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015cc:	f3bf 8f5f 	dmb	sy
}
 80015d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <HAL_MPU_Disable+0x28>)
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <HAL_MPU_Disable+0x28>)
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015dc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <HAL_MPU_Disable+0x2c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00
 80015f4:	e000ed90 	.word	0xe000ed90

080015f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001600:	4a0b      	ldr	r2, [pc, #44]	@ (8001630 <HAL_MPU_Enable+0x38>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_MPU_Enable+0x3c>)
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	4a09      	ldr	r2, [pc, #36]	@ (8001634 <HAL_MPU_Enable+0x3c>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001614:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001616:	f3bf 8f4f 	dsb	sy
}
 800161a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800161c:	f3bf 8f6f 	isb	sy
}
 8001620:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed90 	.word	0xe000ed90
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	785a      	ldrb	r2, [r3, #1]
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_MPU_ConfigRegion+0x7c>)
 8001646:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_MPU_ConfigRegion+0x7c>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	4a19      	ldr	r2, [pc, #100]	@ (80016b4 <HAL_MPU_ConfigRegion+0x7c>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001654:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <HAL_MPU_ConfigRegion+0x7c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7b1b      	ldrb	r3, [r3, #12]
 8001660:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7adb      	ldrb	r3, [r3, #11]
 8001666:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001668:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7a9b      	ldrb	r3, [r3, #10]
 800166e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001670:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7b5b      	ldrb	r3, [r3, #13]
 8001676:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001678:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b9b      	ldrb	r3, [r3, #14]
 800167e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001680:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7bdb      	ldrb	r3, [r3, #15]
 8001686:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001688:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7a5b      	ldrb	r3, [r3, #9]
 800168e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001690:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7a1b      	ldrb	r3, [r3, #8]
 8001696:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001698:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016a0:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016a2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016a4:	6113      	str	r3, [r2, #16]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed90 	.word	0xe000ed90

080016b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff fe36 	bl	8001330 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e316      	b.n	8001cfe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a66      	ldr	r2, [pc, #408]	@ (8001870 <HAL_DMA_Init+0x1b8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d04a      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a65      	ldr	r2, [pc, #404]	@ (8001874 <HAL_DMA_Init+0x1bc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d045      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a63      	ldr	r2, [pc, #396]	@ (8001878 <HAL_DMA_Init+0x1c0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d040      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a62      	ldr	r2, [pc, #392]	@ (800187c <HAL_DMA_Init+0x1c4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d03b      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a60      	ldr	r2, [pc, #384]	@ (8001880 <HAL_DMA_Init+0x1c8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d036      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a5f      	ldr	r2, [pc, #380]	@ (8001884 <HAL_DMA_Init+0x1cc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d031      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a5d      	ldr	r2, [pc, #372]	@ (8001888 <HAL_DMA_Init+0x1d0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d02c      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a5c      	ldr	r2, [pc, #368]	@ (800188c <HAL_DMA_Init+0x1d4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d027      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a5a      	ldr	r2, [pc, #360]	@ (8001890 <HAL_DMA_Init+0x1d8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d022      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a59      	ldr	r2, [pc, #356]	@ (8001894 <HAL_DMA_Init+0x1dc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d01d      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a57      	ldr	r2, [pc, #348]	@ (8001898 <HAL_DMA_Init+0x1e0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d018      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a56      	ldr	r2, [pc, #344]	@ (800189c <HAL_DMA_Init+0x1e4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d013      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a54      	ldr	r2, [pc, #336]	@ (80018a0 <HAL_DMA_Init+0x1e8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00e      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a53      	ldr	r2, [pc, #332]	@ (80018a4 <HAL_DMA_Init+0x1ec>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d009      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a51      	ldr	r2, [pc, #324]	@ (80018a8 <HAL_DMA_Init+0x1f0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d004      	beq.n	8001770 <HAL_DMA_Init+0xb8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a50      	ldr	r2, [pc, #320]	@ (80018ac <HAL_DMA_Init+0x1f4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_DMA_Init+0xbc>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_DMA_Init+0xbe>
 8001774:	2300      	movs	r3, #0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 813b 	beq.w	80019f2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a37      	ldr	r2, [pc, #220]	@ (8001870 <HAL_DMA_Init+0x1b8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d04a      	beq.n	800182c <HAL_DMA_Init+0x174>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a36      	ldr	r2, [pc, #216]	@ (8001874 <HAL_DMA_Init+0x1bc>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d045      	beq.n	800182c <HAL_DMA_Init+0x174>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a34      	ldr	r2, [pc, #208]	@ (8001878 <HAL_DMA_Init+0x1c0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d040      	beq.n	800182c <HAL_DMA_Init+0x174>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a33      	ldr	r2, [pc, #204]	@ (800187c <HAL_DMA_Init+0x1c4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d03b      	beq.n	800182c <HAL_DMA_Init+0x174>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a31      	ldr	r2, [pc, #196]	@ (8001880 <HAL_DMA_Init+0x1c8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d036      	beq.n	800182c <HAL_DMA_Init+0x174>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a30      	ldr	r2, [pc, #192]	@ (8001884 <HAL_DMA_Init+0x1cc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d031      	beq.n	800182c <HAL_DMA_Init+0x174>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001888 <HAL_DMA_Init+0x1d0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d02c      	beq.n	800182c <HAL_DMA_Init+0x174>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a2d      	ldr	r2, [pc, #180]	@ (800188c <HAL_DMA_Init+0x1d4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d027      	beq.n	800182c <HAL_DMA_Init+0x174>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001890 <HAL_DMA_Init+0x1d8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d022      	beq.n	800182c <HAL_DMA_Init+0x174>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001894 <HAL_DMA_Init+0x1dc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d01d      	beq.n	800182c <HAL_DMA_Init+0x174>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a28      	ldr	r2, [pc, #160]	@ (8001898 <HAL_DMA_Init+0x1e0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d018      	beq.n	800182c <HAL_DMA_Init+0x174>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a27      	ldr	r2, [pc, #156]	@ (800189c <HAL_DMA_Init+0x1e4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d013      	beq.n	800182c <HAL_DMA_Init+0x174>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a25      	ldr	r2, [pc, #148]	@ (80018a0 <HAL_DMA_Init+0x1e8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00e      	beq.n	800182c <HAL_DMA_Init+0x174>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a24      	ldr	r2, [pc, #144]	@ (80018a4 <HAL_DMA_Init+0x1ec>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d009      	beq.n	800182c <HAL_DMA_Init+0x174>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a22      	ldr	r2, [pc, #136]	@ (80018a8 <HAL_DMA_Init+0x1f0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d004      	beq.n	800182c <HAL_DMA_Init+0x174>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <HAL_DMA_Init+0x1f4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d108      	bne.n	800183e <HAL_DMA_Init+0x186>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e007      	b.n	800184e <HAL_DMA_Init+0x196>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0201 	bic.w	r2, r2, #1
 800184c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800184e:	e02f      	b.n	80018b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001850:	f7ff fd6e 	bl	8001330 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b05      	cmp	r3, #5
 800185c:	d928      	bls.n	80018b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2220      	movs	r2, #32
 8001862:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2203      	movs	r2, #3
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e246      	b.n	8001cfe <HAL_DMA_Init+0x646>
 8001870:	40020010 	.word	0x40020010
 8001874:	40020028 	.word	0x40020028
 8001878:	40020040 	.word	0x40020040
 800187c:	40020058 	.word	0x40020058
 8001880:	40020070 	.word	0x40020070
 8001884:	40020088 	.word	0x40020088
 8001888:	400200a0 	.word	0x400200a0
 800188c:	400200b8 	.word	0x400200b8
 8001890:	40020410 	.word	0x40020410
 8001894:	40020428 	.word	0x40020428
 8001898:	40020440 	.word	0x40020440
 800189c:	40020458 	.word	0x40020458
 80018a0:	40020470 	.word	0x40020470
 80018a4:	40020488 	.word	0x40020488
 80018a8:	400204a0 	.word	0x400204a0
 80018ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1c8      	bne.n	8001850 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4b83      	ldr	r3, [pc, #524]	@ (8001ad8 <HAL_DMA_Init+0x420>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80018d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	2b04      	cmp	r3, #4
 8001902:	d107      	bne.n	8001914 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190c:	4313      	orrs	r3, r2
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4313      	orrs	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001914:	4b71      	ldr	r3, [pc, #452]	@ (8001adc <HAL_DMA_Init+0x424>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b71      	ldr	r3, [pc, #452]	@ (8001ae0 <HAL_DMA_Init+0x428>)
 800191a:	4013      	ands	r3, r2
 800191c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001920:	d328      	bcc.n	8001974 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b28      	cmp	r3, #40	@ 0x28
 8001928:	d903      	bls.n	8001932 <HAL_DMA_Init+0x27a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001930:	d917      	bls.n	8001962 <HAL_DMA_Init+0x2aa>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b3e      	cmp	r3, #62	@ 0x3e
 8001938:	d903      	bls.n	8001942 <HAL_DMA_Init+0x28a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b42      	cmp	r3, #66	@ 0x42
 8001940:	d90f      	bls.n	8001962 <HAL_DMA_Init+0x2aa>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b46      	cmp	r3, #70	@ 0x46
 8001948:	d903      	bls.n	8001952 <HAL_DMA_Init+0x29a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b48      	cmp	r3, #72	@ 0x48
 8001950:	d907      	bls.n	8001962 <HAL_DMA_Init+0x2aa>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b4e      	cmp	r3, #78	@ 0x4e
 8001958:	d905      	bls.n	8001966 <HAL_DMA_Init+0x2ae>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b52      	cmp	r3, #82	@ 0x52
 8001960:	d801      	bhi.n	8001966 <HAL_DMA_Init+0x2ae>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_DMA_Init+0x2b0>
 8001966:	2300      	movs	r3, #0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001972:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f023 0307 	bic.w	r3, r3, #7
 800198a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	2b04      	cmp	r3, #4
 800199c:	d117      	bne.n	80019ce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f002 fb3f 	bl	8004034 <DMA_CheckFifoParam>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2240      	movs	r2, #64	@ 0x40
 80019c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e197      	b.n	8001cfe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f002 fa7a 	bl	8003ed0 <DMA_CalcBaseAndBitshift>
 80019dc:	4603      	mov	r3, r0
 80019de:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	223f      	movs	r2, #63	@ 0x3f
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	e0cd      	b.n	8001b8e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ae4 <HAL_DMA_Init+0x42c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d022      	beq.n	8001a42 <HAL_DMA_Init+0x38a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a39      	ldr	r2, [pc, #228]	@ (8001ae8 <HAL_DMA_Init+0x430>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01d      	beq.n	8001a42 <HAL_DMA_Init+0x38a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a38      	ldr	r2, [pc, #224]	@ (8001aec <HAL_DMA_Init+0x434>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d018      	beq.n	8001a42 <HAL_DMA_Init+0x38a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a36      	ldr	r2, [pc, #216]	@ (8001af0 <HAL_DMA_Init+0x438>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_DMA_Init+0x38a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a35      	ldr	r2, [pc, #212]	@ (8001af4 <HAL_DMA_Init+0x43c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00e      	beq.n	8001a42 <HAL_DMA_Init+0x38a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a33      	ldr	r2, [pc, #204]	@ (8001af8 <HAL_DMA_Init+0x440>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d009      	beq.n	8001a42 <HAL_DMA_Init+0x38a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a32      	ldr	r2, [pc, #200]	@ (8001afc <HAL_DMA_Init+0x444>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d004      	beq.n	8001a42 <HAL_DMA_Init+0x38a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a30      	ldr	r2, [pc, #192]	@ (8001b00 <HAL_DMA_Init+0x448>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_DMA_Init+0x38e>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_DMA_Init+0x390>
 8001a46:	2300      	movs	r3, #0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 8097 	beq.w	8001b7c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a24      	ldr	r2, [pc, #144]	@ (8001ae4 <HAL_DMA_Init+0x42c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d021      	beq.n	8001a9c <HAL_DMA_Init+0x3e4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ae8 <HAL_DMA_Init+0x430>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01c      	beq.n	8001a9c <HAL_DMA_Init+0x3e4>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <HAL_DMA_Init+0x434>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d017      	beq.n	8001a9c <HAL_DMA_Init+0x3e4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1f      	ldr	r2, [pc, #124]	@ (8001af0 <HAL_DMA_Init+0x438>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d012      	beq.n	8001a9c <HAL_DMA_Init+0x3e4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001af4 <HAL_DMA_Init+0x43c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00d      	beq.n	8001a9c <HAL_DMA_Init+0x3e4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <HAL_DMA_Init+0x440>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d008      	beq.n	8001a9c <HAL_DMA_Init+0x3e4>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001afc <HAL_DMA_Init+0x444>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d003      	beq.n	8001a9c <HAL_DMA_Init+0x3e4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a19      	ldr	r2, [pc, #100]	@ (8001b00 <HAL_DMA_Init+0x448>)
 8001a9a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <HAL_DMA_Init+0x44c>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b40      	cmp	r3, #64	@ 0x40
 8001ac2:	d021      	beq.n	8001b08 <HAL_DMA_Init+0x450>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b80      	cmp	r3, #128	@ 0x80
 8001aca:	d102      	bne.n	8001ad2 <HAL_DMA_Init+0x41a>
 8001acc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ad0:	e01b      	b.n	8001b0a <HAL_DMA_Init+0x452>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e019      	b.n	8001b0a <HAL_DMA_Init+0x452>
 8001ad6:	bf00      	nop
 8001ad8:	fe10803f 	.word	0xfe10803f
 8001adc:	5c001000 	.word	0x5c001000
 8001ae0:	ffff0000 	.word	0xffff0000
 8001ae4:	58025408 	.word	0x58025408
 8001ae8:	5802541c 	.word	0x5802541c
 8001aec:	58025430 	.word	0x58025430
 8001af0:	58025444 	.word	0x58025444
 8001af4:	58025458 	.word	0x58025458
 8001af8:	5802546c 	.word	0x5802546c
 8001afc:	58025480 	.word	0x58025480
 8001b00:	58025494 	.word	0x58025494
 8001b04:	fffe000f 	.word	0xfffe000f
 8001b08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68d2      	ldr	r2, [r2, #12]
 8001b0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d08 <HAL_DMA_Init+0x650>)
 8001b50:	4413      	add	r3, r2
 8001b52:	4a6e      	ldr	r2, [pc, #440]	@ (8001d0c <HAL_DMA_Init+0x654>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	009a      	lsls	r2, r3, #2
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f002 f9b5 	bl	8003ed0 <DMA_CalcBaseAndBitshift>
 8001b66:	4603      	mov	r3, r0
 8001b68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	2201      	movs	r2, #1
 8001b74:	409a      	lsls	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	e008      	b.n	8001b8e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2240      	movs	r2, #64	@ 0x40
 8001b80:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2203      	movs	r2, #3
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0b7      	b.n	8001cfe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5f      	ldr	r2, [pc, #380]	@ (8001d10 <HAL_DMA_Init+0x658>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d072      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001d14 <HAL_DMA_Init+0x65c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d06d      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d18 <HAL_DMA_Init+0x660>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d068      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a5a      	ldr	r2, [pc, #360]	@ (8001d1c <HAL_DMA_Init+0x664>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d063      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a59      	ldr	r2, [pc, #356]	@ (8001d20 <HAL_DMA_Init+0x668>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d05e      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a57      	ldr	r2, [pc, #348]	@ (8001d24 <HAL_DMA_Init+0x66c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d059      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a56      	ldr	r2, [pc, #344]	@ (8001d28 <HAL_DMA_Init+0x670>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d054      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a54      	ldr	r2, [pc, #336]	@ (8001d2c <HAL_DMA_Init+0x674>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d04f      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a53      	ldr	r2, [pc, #332]	@ (8001d30 <HAL_DMA_Init+0x678>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d04a      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a51      	ldr	r2, [pc, #324]	@ (8001d34 <HAL_DMA_Init+0x67c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d045      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a50      	ldr	r2, [pc, #320]	@ (8001d38 <HAL_DMA_Init+0x680>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d040      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a4e      	ldr	r2, [pc, #312]	@ (8001d3c <HAL_DMA_Init+0x684>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d03b      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4d      	ldr	r2, [pc, #308]	@ (8001d40 <HAL_DMA_Init+0x688>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d036      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a4b      	ldr	r2, [pc, #300]	@ (8001d44 <HAL_DMA_Init+0x68c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d031      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8001d48 <HAL_DMA_Init+0x690>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d02c      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a48      	ldr	r2, [pc, #288]	@ (8001d4c <HAL_DMA_Init+0x694>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d027      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a47      	ldr	r2, [pc, #284]	@ (8001d50 <HAL_DMA_Init+0x698>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d022      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a45      	ldr	r2, [pc, #276]	@ (8001d54 <HAL_DMA_Init+0x69c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01d      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a44      	ldr	r2, [pc, #272]	@ (8001d58 <HAL_DMA_Init+0x6a0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d018      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a42      	ldr	r2, [pc, #264]	@ (8001d5c <HAL_DMA_Init+0x6a4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a41      	ldr	r2, [pc, #260]	@ (8001d60 <HAL_DMA_Init+0x6a8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00e      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a3f      	ldr	r2, [pc, #252]	@ (8001d64 <HAL_DMA_Init+0x6ac>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d68 <HAL_DMA_Init+0x6b0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d004      	beq.n	8001c7e <HAL_DMA_Init+0x5c6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a3c      	ldr	r2, [pc, #240]	@ (8001d6c <HAL_DMA_Init+0x6b4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_DMA_Init+0x5ca>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_DMA_Init+0x5cc>
 8001c82:	2300      	movs	r3, #0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d032      	beq.n	8001cee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f002 fa4f 	bl	800412c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b80      	cmp	r3, #128	@ 0x80
 8001c94:	d102      	bne.n	8001c9c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001cb0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d010      	beq.n	8001cdc <HAL_DMA_Init+0x624>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d80c      	bhi.n	8001cdc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f002 facc 	bl	8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	e008      	b.n	8001cee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	a7fdabf8 	.word	0xa7fdabf8
 8001d0c:	cccccccd 	.word	0xcccccccd
 8001d10:	40020010 	.word	0x40020010
 8001d14:	40020028 	.word	0x40020028
 8001d18:	40020040 	.word	0x40020040
 8001d1c:	40020058 	.word	0x40020058
 8001d20:	40020070 	.word	0x40020070
 8001d24:	40020088 	.word	0x40020088
 8001d28:	400200a0 	.word	0x400200a0
 8001d2c:	400200b8 	.word	0x400200b8
 8001d30:	40020410 	.word	0x40020410
 8001d34:	40020428 	.word	0x40020428
 8001d38:	40020440 	.word	0x40020440
 8001d3c:	40020458 	.word	0x40020458
 8001d40:	40020470 	.word	0x40020470
 8001d44:	40020488 	.word	0x40020488
 8001d48:	400204a0 	.word	0x400204a0
 8001d4c:	400204b8 	.word	0x400204b8
 8001d50:	58025408 	.word	0x58025408
 8001d54:	5802541c 	.word	0x5802541c
 8001d58:	58025430 	.word	0x58025430
 8001d5c:	58025444 	.word	0x58025444
 8001d60:	58025458 	.word	0x58025458
 8001d64:	5802546c 	.word	0x5802546c
 8001d68:	58025480 	.word	0x58025480
 8001d6c:	58025494 	.word	0x58025494

08001d70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e226      	b.n	80021da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_DMA_Start_IT+0x2a>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e21f      	b.n	80021da <HAL_DMA_Start_IT+0x46a>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	f040 820a 	bne.w	80021c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a68      	ldr	r2, [pc, #416]	@ (8001f64 <HAL_DMA_Start_IT+0x1f4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d04a      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a66      	ldr	r2, [pc, #408]	@ (8001f68 <HAL_DMA_Start_IT+0x1f8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d045      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a65      	ldr	r2, [pc, #404]	@ (8001f6c <HAL_DMA_Start_IT+0x1fc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d040      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a63      	ldr	r2, [pc, #396]	@ (8001f70 <HAL_DMA_Start_IT+0x200>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d03b      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a62      	ldr	r2, [pc, #392]	@ (8001f74 <HAL_DMA_Start_IT+0x204>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d036      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a60      	ldr	r2, [pc, #384]	@ (8001f78 <HAL_DMA_Start_IT+0x208>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d031      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8001f7c <HAL_DMA_Start_IT+0x20c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d02c      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a5d      	ldr	r2, [pc, #372]	@ (8001f80 <HAL_DMA_Start_IT+0x210>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d027      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a5c      	ldr	r2, [pc, #368]	@ (8001f84 <HAL_DMA_Start_IT+0x214>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d022      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8001f88 <HAL_DMA_Start_IT+0x218>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01d      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a59      	ldr	r2, [pc, #356]	@ (8001f8c <HAL_DMA_Start_IT+0x21c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d018      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a57      	ldr	r2, [pc, #348]	@ (8001f90 <HAL_DMA_Start_IT+0x220>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a56      	ldr	r2, [pc, #344]	@ (8001f94 <HAL_DMA_Start_IT+0x224>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00e      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a54      	ldr	r2, [pc, #336]	@ (8001f98 <HAL_DMA_Start_IT+0x228>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a53      	ldr	r2, [pc, #332]	@ (8001f9c <HAL_DMA_Start_IT+0x22c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d004      	beq.n	8001e5e <HAL_DMA_Start_IT+0xee>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a51      	ldr	r2, [pc, #324]	@ (8001fa0 <HAL_DMA_Start_IT+0x230>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d108      	bne.n	8001e70 <HAL_DMA_Start_IT+0x100>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0201 	bic.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e007      	b.n	8001e80 <HAL_DMA_Start_IT+0x110>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f001 fe76 	bl	8003b78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a34      	ldr	r2, [pc, #208]	@ (8001f64 <HAL_DMA_Start_IT+0x1f4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d04a      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a33      	ldr	r2, [pc, #204]	@ (8001f68 <HAL_DMA_Start_IT+0x1f8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d045      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a31      	ldr	r2, [pc, #196]	@ (8001f6c <HAL_DMA_Start_IT+0x1fc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d040      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a30      	ldr	r2, [pc, #192]	@ (8001f70 <HAL_DMA_Start_IT+0x200>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d03b      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2e      	ldr	r2, [pc, #184]	@ (8001f74 <HAL_DMA_Start_IT+0x204>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d036      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f78 <HAL_DMA_Start_IT+0x208>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d031      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f7c <HAL_DMA_Start_IT+0x20c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02c      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f80 <HAL_DMA_Start_IT+0x210>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d027      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a28      	ldr	r2, [pc, #160]	@ (8001f84 <HAL_DMA_Start_IT+0x214>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d022      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <HAL_DMA_Start_IT+0x218>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d01d      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a25      	ldr	r2, [pc, #148]	@ (8001f8c <HAL_DMA_Start_IT+0x21c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d018      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a24      	ldr	r2, [pc, #144]	@ (8001f90 <HAL_DMA_Start_IT+0x220>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d013      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a22      	ldr	r2, [pc, #136]	@ (8001f94 <HAL_DMA_Start_IT+0x224>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00e      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a21      	ldr	r2, [pc, #132]	@ (8001f98 <HAL_DMA_Start_IT+0x228>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f9c <HAL_DMA_Start_IT+0x22c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d004      	beq.n	8001f2c <HAL_DMA_Start_IT+0x1bc>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_DMA_Start_IT+0x230>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_DMA_Start_IT+0x1c0>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_DMA_Start_IT+0x1c2>
 8001f30:	2300      	movs	r3, #0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d036      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 021e 	bic.w	r2, r3, #30
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0216 	orr.w	r2, r2, #22
 8001f48:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d03e      	beq.n	8001fd0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0208 	orr.w	r2, r2, #8
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e035      	b.n	8001fd0 <HAL_DMA_Start_IT+0x260>
 8001f64:	40020010 	.word	0x40020010
 8001f68:	40020028 	.word	0x40020028
 8001f6c:	40020040 	.word	0x40020040
 8001f70:	40020058 	.word	0x40020058
 8001f74:	40020070 	.word	0x40020070
 8001f78:	40020088 	.word	0x40020088
 8001f7c:	400200a0 	.word	0x400200a0
 8001f80:	400200b8 	.word	0x400200b8
 8001f84:	40020410 	.word	0x40020410
 8001f88:	40020428 	.word	0x40020428
 8001f8c:	40020440 	.word	0x40020440
 8001f90:	40020458 	.word	0x40020458
 8001f94:	40020470 	.word	0x40020470
 8001f98:	40020488 	.word	0x40020488
 8001f9c:	400204a0 	.word	0x400204a0
 8001fa0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 020e 	bic.w	r2, r3, #14
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 020a 	orr.w	r2, r2, #10
 8001fb6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0204 	orr.w	r2, r2, #4
 8001fce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a83      	ldr	r2, [pc, #524]	@ (80021e4 <HAL_DMA_Start_IT+0x474>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d072      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a82      	ldr	r2, [pc, #520]	@ (80021e8 <HAL_DMA_Start_IT+0x478>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d06d      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a80      	ldr	r2, [pc, #512]	@ (80021ec <HAL_DMA_Start_IT+0x47c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d068      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7f      	ldr	r2, [pc, #508]	@ (80021f0 <HAL_DMA_Start_IT+0x480>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d063      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a7d      	ldr	r2, [pc, #500]	@ (80021f4 <HAL_DMA_Start_IT+0x484>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d05e      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7c      	ldr	r2, [pc, #496]	@ (80021f8 <HAL_DMA_Start_IT+0x488>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d059      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a7a      	ldr	r2, [pc, #488]	@ (80021fc <HAL_DMA_Start_IT+0x48c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d054      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a79      	ldr	r2, [pc, #484]	@ (8002200 <HAL_DMA_Start_IT+0x490>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d04f      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a77      	ldr	r2, [pc, #476]	@ (8002204 <HAL_DMA_Start_IT+0x494>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d04a      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a76      	ldr	r2, [pc, #472]	@ (8002208 <HAL_DMA_Start_IT+0x498>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d045      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a74      	ldr	r2, [pc, #464]	@ (800220c <HAL_DMA_Start_IT+0x49c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d040      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a73      	ldr	r2, [pc, #460]	@ (8002210 <HAL_DMA_Start_IT+0x4a0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d03b      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a71      	ldr	r2, [pc, #452]	@ (8002214 <HAL_DMA_Start_IT+0x4a4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d036      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a70      	ldr	r2, [pc, #448]	@ (8002218 <HAL_DMA_Start_IT+0x4a8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d031      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6e      	ldr	r2, [pc, #440]	@ (800221c <HAL_DMA_Start_IT+0x4ac>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d02c      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6d      	ldr	r2, [pc, #436]	@ (8002220 <HAL_DMA_Start_IT+0x4b0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d027      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6b      	ldr	r2, [pc, #428]	@ (8002224 <HAL_DMA_Start_IT+0x4b4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d022      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6a      	ldr	r2, [pc, #424]	@ (8002228 <HAL_DMA_Start_IT+0x4b8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d01d      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a68      	ldr	r2, [pc, #416]	@ (800222c <HAL_DMA_Start_IT+0x4bc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d018      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a67      	ldr	r2, [pc, #412]	@ (8002230 <HAL_DMA_Start_IT+0x4c0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a65      	ldr	r2, [pc, #404]	@ (8002234 <HAL_DMA_Start_IT+0x4c4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00e      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a64      	ldr	r2, [pc, #400]	@ (8002238 <HAL_DMA_Start_IT+0x4c8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d009      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a62      	ldr	r2, [pc, #392]	@ (800223c <HAL_DMA_Start_IT+0x4cc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d004      	beq.n	80020c0 <HAL_DMA_Start_IT+0x350>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a61      	ldr	r2, [pc, #388]	@ (8002240 <HAL_DMA_Start_IT+0x4d0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d101      	bne.n	80020c4 <HAL_DMA_Start_IT+0x354>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_DMA_Start_IT+0x356>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01a      	beq.n	8002100 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a37      	ldr	r2, [pc, #220]	@ (80021e4 <HAL_DMA_Start_IT+0x474>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d04a      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a36      	ldr	r2, [pc, #216]	@ (80021e8 <HAL_DMA_Start_IT+0x478>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d045      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a34      	ldr	r2, [pc, #208]	@ (80021ec <HAL_DMA_Start_IT+0x47c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d040      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a33      	ldr	r2, [pc, #204]	@ (80021f0 <HAL_DMA_Start_IT+0x480>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d03b      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a31      	ldr	r2, [pc, #196]	@ (80021f4 <HAL_DMA_Start_IT+0x484>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d036      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a30      	ldr	r2, [pc, #192]	@ (80021f8 <HAL_DMA_Start_IT+0x488>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d031      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2e      	ldr	r2, [pc, #184]	@ (80021fc <HAL_DMA_Start_IT+0x48c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02c      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2d      	ldr	r2, [pc, #180]	@ (8002200 <HAL_DMA_Start_IT+0x490>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d027      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2b      	ldr	r2, [pc, #172]	@ (8002204 <HAL_DMA_Start_IT+0x494>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d022      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a2a      	ldr	r2, [pc, #168]	@ (8002208 <HAL_DMA_Start_IT+0x498>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d01d      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a28      	ldr	r2, [pc, #160]	@ (800220c <HAL_DMA_Start_IT+0x49c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d018      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a27      	ldr	r2, [pc, #156]	@ (8002210 <HAL_DMA_Start_IT+0x4a0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a25      	ldr	r2, [pc, #148]	@ (8002214 <HAL_DMA_Start_IT+0x4a4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00e      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a24      	ldr	r2, [pc, #144]	@ (8002218 <HAL_DMA_Start_IT+0x4a8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d009      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a22      	ldr	r2, [pc, #136]	@ (800221c <HAL_DMA_Start_IT+0x4ac>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_DMA_Start_IT+0x430>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a21      	ldr	r2, [pc, #132]	@ (8002220 <HAL_DMA_Start_IT+0x4b0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d108      	bne.n	80021b2 <HAL_DMA_Start_IT+0x442>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e012      	b.n	80021d8 <HAL_DMA_Start_IT+0x468>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e009      	b.n	80021d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40020010 	.word	0x40020010
 80021e8:	40020028 	.word	0x40020028
 80021ec:	40020040 	.word	0x40020040
 80021f0:	40020058 	.word	0x40020058
 80021f4:	40020070 	.word	0x40020070
 80021f8:	40020088 	.word	0x40020088
 80021fc:	400200a0 	.word	0x400200a0
 8002200:	400200b8 	.word	0x400200b8
 8002204:	40020410 	.word	0x40020410
 8002208:	40020428 	.word	0x40020428
 800220c:	40020440 	.word	0x40020440
 8002210:	40020458 	.word	0x40020458
 8002214:	40020470 	.word	0x40020470
 8002218:	40020488 	.word	0x40020488
 800221c:	400204a0 	.word	0x400204a0
 8002220:	400204b8 	.word	0x400204b8
 8002224:	58025408 	.word	0x58025408
 8002228:	5802541c 	.word	0x5802541c
 800222c:	58025430 	.word	0x58025430
 8002230:	58025444 	.word	0x58025444
 8002234:	58025458 	.word	0x58025458
 8002238:	5802546c 	.word	0x5802546c
 800223c:	58025480 	.word	0x58025480
 8002240:	58025494 	.word	0x58025494

08002244 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff f870 	bl	8001330 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e2dc      	b.n	8002816 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d008      	beq.n	800227a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2280      	movs	r2, #128	@ 0x80
 800226c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e2cd      	b.n	8002816 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a76      	ldr	r2, [pc, #472]	@ (8002458 <HAL_DMA_Abort+0x214>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d04a      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a74      	ldr	r2, [pc, #464]	@ (800245c <HAL_DMA_Abort+0x218>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d045      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a73      	ldr	r2, [pc, #460]	@ (8002460 <HAL_DMA_Abort+0x21c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d040      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a71      	ldr	r2, [pc, #452]	@ (8002464 <HAL_DMA_Abort+0x220>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d03b      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a70      	ldr	r2, [pc, #448]	@ (8002468 <HAL_DMA_Abort+0x224>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d036      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6e      	ldr	r2, [pc, #440]	@ (800246c <HAL_DMA_Abort+0x228>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d031      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6d      	ldr	r2, [pc, #436]	@ (8002470 <HAL_DMA_Abort+0x22c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d02c      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002474 <HAL_DMA_Abort+0x230>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d027      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a6a      	ldr	r2, [pc, #424]	@ (8002478 <HAL_DMA_Abort+0x234>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d022      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a68      	ldr	r2, [pc, #416]	@ (800247c <HAL_DMA_Abort+0x238>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01d      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a67      	ldr	r2, [pc, #412]	@ (8002480 <HAL_DMA_Abort+0x23c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d018      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a65      	ldr	r2, [pc, #404]	@ (8002484 <HAL_DMA_Abort+0x240>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a64      	ldr	r2, [pc, #400]	@ (8002488 <HAL_DMA_Abort+0x244>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00e      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a62      	ldr	r2, [pc, #392]	@ (800248c <HAL_DMA_Abort+0x248>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d009      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a61      	ldr	r2, [pc, #388]	@ (8002490 <HAL_DMA_Abort+0x24c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d004      	beq.n	800231a <HAL_DMA_Abort+0xd6>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a5f      	ldr	r2, [pc, #380]	@ (8002494 <HAL_DMA_Abort+0x250>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_DMA_Abort+0xda>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_DMA_Abort+0xdc>
 800231e:	2300      	movs	r3, #0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 021e 	bic.w	r2, r2, #30
 8002332:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002342:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e00a      	b.n	8002362 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 020e 	bic.w	r2, r2, #14
 800235a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a3c      	ldr	r2, [pc, #240]	@ (8002458 <HAL_DMA_Abort+0x214>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d072      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3a      	ldr	r2, [pc, #232]	@ (800245c <HAL_DMA_Abort+0x218>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d06d      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a39      	ldr	r2, [pc, #228]	@ (8002460 <HAL_DMA_Abort+0x21c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d068      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a37      	ldr	r2, [pc, #220]	@ (8002464 <HAL_DMA_Abort+0x220>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d063      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a36      	ldr	r2, [pc, #216]	@ (8002468 <HAL_DMA_Abort+0x224>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d05e      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a34      	ldr	r2, [pc, #208]	@ (800246c <HAL_DMA_Abort+0x228>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d059      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a33      	ldr	r2, [pc, #204]	@ (8002470 <HAL_DMA_Abort+0x22c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d054      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a31      	ldr	r2, [pc, #196]	@ (8002474 <HAL_DMA_Abort+0x230>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d04f      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a30      	ldr	r2, [pc, #192]	@ (8002478 <HAL_DMA_Abort+0x234>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d04a      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2e      	ldr	r2, [pc, #184]	@ (800247c <HAL_DMA_Abort+0x238>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d045      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002480 <HAL_DMA_Abort+0x23c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d040      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002484 <HAL_DMA_Abort+0x240>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d03b      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2a      	ldr	r2, [pc, #168]	@ (8002488 <HAL_DMA_Abort+0x244>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d036      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a28      	ldr	r2, [pc, #160]	@ (800248c <HAL_DMA_Abort+0x248>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d031      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a27      	ldr	r2, [pc, #156]	@ (8002490 <HAL_DMA_Abort+0x24c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d02c      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a25      	ldr	r2, [pc, #148]	@ (8002494 <HAL_DMA_Abort+0x250>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d027      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a24      	ldr	r2, [pc, #144]	@ (8002498 <HAL_DMA_Abort+0x254>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d022      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a22      	ldr	r2, [pc, #136]	@ (800249c <HAL_DMA_Abort+0x258>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01d      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a21      	ldr	r2, [pc, #132]	@ (80024a0 <HAL_DMA_Abort+0x25c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d018      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1f      	ldr	r2, [pc, #124]	@ (80024a4 <HAL_DMA_Abort+0x260>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <HAL_DMA_Abort+0x264>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00e      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1c      	ldr	r2, [pc, #112]	@ (80024ac <HAL_DMA_Abort+0x268>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <HAL_DMA_Abort+0x26c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d004      	beq.n	8002452 <HAL_DMA_Abort+0x20e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a19      	ldr	r2, [pc, #100]	@ (80024b4 <HAL_DMA_Abort+0x270>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d132      	bne.n	80024b8 <HAL_DMA_Abort+0x274>
 8002452:	2301      	movs	r3, #1
 8002454:	e031      	b.n	80024ba <HAL_DMA_Abort+0x276>
 8002456:	bf00      	nop
 8002458:	40020010 	.word	0x40020010
 800245c:	40020028 	.word	0x40020028
 8002460:	40020040 	.word	0x40020040
 8002464:	40020058 	.word	0x40020058
 8002468:	40020070 	.word	0x40020070
 800246c:	40020088 	.word	0x40020088
 8002470:	400200a0 	.word	0x400200a0
 8002474:	400200b8 	.word	0x400200b8
 8002478:	40020410 	.word	0x40020410
 800247c:	40020428 	.word	0x40020428
 8002480:	40020440 	.word	0x40020440
 8002484:	40020458 	.word	0x40020458
 8002488:	40020470 	.word	0x40020470
 800248c:	40020488 	.word	0x40020488
 8002490:	400204a0 	.word	0x400204a0
 8002494:	400204b8 	.word	0x400204b8
 8002498:	58025408 	.word	0x58025408
 800249c:	5802541c 	.word	0x5802541c
 80024a0:	58025430 	.word	0x58025430
 80024a4:	58025444 	.word	0x58025444
 80024a8:	58025458 	.word	0x58025458
 80024ac:	5802546c 	.word	0x5802546c
 80024b0:	58025480 	.word	0x58025480
 80024b4:	58025494 	.word	0x58025494
 80024b8:	2300      	movs	r3, #0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6d      	ldr	r2, [pc, #436]	@ (8002688 <HAL_DMA_Abort+0x444>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d04a      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a6b      	ldr	r2, [pc, #428]	@ (800268c <HAL_DMA_Abort+0x448>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d045      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002690 <HAL_DMA_Abort+0x44c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d040      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a68      	ldr	r2, [pc, #416]	@ (8002694 <HAL_DMA_Abort+0x450>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d03b      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a67      	ldr	r2, [pc, #412]	@ (8002698 <HAL_DMA_Abort+0x454>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d036      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a65      	ldr	r2, [pc, #404]	@ (800269c <HAL_DMA_Abort+0x458>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d031      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a64      	ldr	r2, [pc, #400]	@ (80026a0 <HAL_DMA_Abort+0x45c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d02c      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a62      	ldr	r2, [pc, #392]	@ (80026a4 <HAL_DMA_Abort+0x460>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d027      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a61      	ldr	r2, [pc, #388]	@ (80026a8 <HAL_DMA_Abort+0x464>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d022      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a5f      	ldr	r2, [pc, #380]	@ (80026ac <HAL_DMA_Abort+0x468>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01d      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a5e      	ldr	r2, [pc, #376]	@ (80026b0 <HAL_DMA_Abort+0x46c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d018      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a5c      	ldr	r2, [pc, #368]	@ (80026b4 <HAL_DMA_Abort+0x470>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a5b      	ldr	r2, [pc, #364]	@ (80026b8 <HAL_DMA_Abort+0x474>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00e      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a59      	ldr	r2, [pc, #356]	@ (80026bc <HAL_DMA_Abort+0x478>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a58      	ldr	r2, [pc, #352]	@ (80026c0 <HAL_DMA_Abort+0x47c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d004      	beq.n	800256e <HAL_DMA_Abort+0x32a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a56      	ldr	r2, [pc, #344]	@ (80026c4 <HAL_DMA_Abort+0x480>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d108      	bne.n	8002580 <HAL_DMA_Abort+0x33c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e007      	b.n	8002590 <HAL_DMA_Abort+0x34c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002590:	e013      	b.n	80025ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002592:	f7fe fecd 	bl	8001330 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b05      	cmp	r3, #5
 800259e:	d90c      	bls.n	80025ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2203      	movs	r2, #3
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e12d      	b.n	8002816 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1e5      	bne.n	8002592 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002688 <HAL_DMA_Abort+0x444>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d04a      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2d      	ldr	r2, [pc, #180]	@ (800268c <HAL_DMA_Abort+0x448>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d045      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2c      	ldr	r2, [pc, #176]	@ (8002690 <HAL_DMA_Abort+0x44c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d040      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002694 <HAL_DMA_Abort+0x450>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d03b      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a29      	ldr	r2, [pc, #164]	@ (8002698 <HAL_DMA_Abort+0x454>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d036      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a27      	ldr	r2, [pc, #156]	@ (800269c <HAL_DMA_Abort+0x458>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d031      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a26      	ldr	r2, [pc, #152]	@ (80026a0 <HAL_DMA_Abort+0x45c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d02c      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a24      	ldr	r2, [pc, #144]	@ (80026a4 <HAL_DMA_Abort+0x460>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d027      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a23      	ldr	r2, [pc, #140]	@ (80026a8 <HAL_DMA_Abort+0x464>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a21      	ldr	r2, [pc, #132]	@ (80026ac <HAL_DMA_Abort+0x468>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01d      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a20      	ldr	r2, [pc, #128]	@ (80026b0 <HAL_DMA_Abort+0x46c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d018      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1e      	ldr	r2, [pc, #120]	@ (80026b4 <HAL_DMA_Abort+0x470>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1d      	ldr	r2, [pc, #116]	@ (80026b8 <HAL_DMA_Abort+0x474>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1b      	ldr	r2, [pc, #108]	@ (80026bc <HAL_DMA_Abort+0x478>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1a      	ldr	r2, [pc, #104]	@ (80026c0 <HAL_DMA_Abort+0x47c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_Abort+0x422>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a18      	ldr	r2, [pc, #96]	@ (80026c4 <HAL_DMA_Abort+0x480>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_DMA_Abort+0x426>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_DMA_Abort+0x428>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d02b      	beq.n	80026c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	223f      	movs	r2, #63	@ 0x3f
 8002680:	409a      	lsls	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	e02a      	b.n	80026de <HAL_DMA_Abort+0x49a>
 8002688:	40020010 	.word	0x40020010
 800268c:	40020028 	.word	0x40020028
 8002690:	40020040 	.word	0x40020040
 8002694:	40020058 	.word	0x40020058
 8002698:	40020070 	.word	0x40020070
 800269c:	40020088 	.word	0x40020088
 80026a0:	400200a0 	.word	0x400200a0
 80026a4:	400200b8 	.word	0x400200b8
 80026a8:	40020410 	.word	0x40020410
 80026ac:	40020428 	.word	0x40020428
 80026b0:	40020440 	.word	0x40020440
 80026b4:	40020458 	.word	0x40020458
 80026b8:	40020470 	.word	0x40020470
 80026bc:	40020488 	.word	0x40020488
 80026c0:	400204a0 	.word	0x400204a0
 80026c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2201      	movs	r2, #1
 80026d8:	409a      	lsls	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002820 <HAL_DMA_Abort+0x5dc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d072      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002824 <HAL_DMA_Abort+0x5e0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d06d      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002828 <HAL_DMA_Abort+0x5e4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d068      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a4a      	ldr	r2, [pc, #296]	@ (800282c <HAL_DMA_Abort+0x5e8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d063      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a49      	ldr	r2, [pc, #292]	@ (8002830 <HAL_DMA_Abort+0x5ec>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d05e      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a47      	ldr	r2, [pc, #284]	@ (8002834 <HAL_DMA_Abort+0x5f0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d059      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a46      	ldr	r2, [pc, #280]	@ (8002838 <HAL_DMA_Abort+0x5f4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d054      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a44      	ldr	r2, [pc, #272]	@ (800283c <HAL_DMA_Abort+0x5f8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d04f      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a43      	ldr	r2, [pc, #268]	@ (8002840 <HAL_DMA_Abort+0x5fc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d04a      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a41      	ldr	r2, [pc, #260]	@ (8002844 <HAL_DMA_Abort+0x600>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d045      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a40      	ldr	r2, [pc, #256]	@ (8002848 <HAL_DMA_Abort+0x604>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d040      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a3e      	ldr	r2, [pc, #248]	@ (800284c <HAL_DMA_Abort+0x608>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d03b      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3d      	ldr	r2, [pc, #244]	@ (8002850 <HAL_DMA_Abort+0x60c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d036      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a3b      	ldr	r2, [pc, #236]	@ (8002854 <HAL_DMA_Abort+0x610>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d031      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a3a      	ldr	r2, [pc, #232]	@ (8002858 <HAL_DMA_Abort+0x614>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d02c      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a38      	ldr	r2, [pc, #224]	@ (800285c <HAL_DMA_Abort+0x618>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d027      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a37      	ldr	r2, [pc, #220]	@ (8002860 <HAL_DMA_Abort+0x61c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d022      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a35      	ldr	r2, [pc, #212]	@ (8002864 <HAL_DMA_Abort+0x620>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01d      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a34      	ldr	r2, [pc, #208]	@ (8002868 <HAL_DMA_Abort+0x624>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d018      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a32      	ldr	r2, [pc, #200]	@ (800286c <HAL_DMA_Abort+0x628>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a31      	ldr	r2, [pc, #196]	@ (8002870 <HAL_DMA_Abort+0x62c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00e      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002874 <HAL_DMA_Abort+0x630>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a2e      	ldr	r2, [pc, #184]	@ (8002878 <HAL_DMA_Abort+0x634>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_Abort+0x58a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2c      	ldr	r2, [pc, #176]	@ (800287c <HAL_DMA_Abort+0x638>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_DMA_Abort+0x58e>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_DMA_Abort+0x590>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80027e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00c      	beq.n	8002804 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002802:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40020010 	.word	0x40020010
 8002824:	40020028 	.word	0x40020028
 8002828:	40020040 	.word	0x40020040
 800282c:	40020058 	.word	0x40020058
 8002830:	40020070 	.word	0x40020070
 8002834:	40020088 	.word	0x40020088
 8002838:	400200a0 	.word	0x400200a0
 800283c:	400200b8 	.word	0x400200b8
 8002840:	40020410 	.word	0x40020410
 8002844:	40020428 	.word	0x40020428
 8002848:	40020440 	.word	0x40020440
 800284c:	40020458 	.word	0x40020458
 8002850:	40020470 	.word	0x40020470
 8002854:	40020488 	.word	0x40020488
 8002858:	400204a0 	.word	0x400204a0
 800285c:	400204b8 	.word	0x400204b8
 8002860:	58025408 	.word	0x58025408
 8002864:	5802541c 	.word	0x5802541c
 8002868:	58025430 	.word	0x58025430
 800286c:	58025444 	.word	0x58025444
 8002870:	58025458 	.word	0x58025458
 8002874:	5802546c 	.word	0x5802546c
 8002878:	58025480 	.word	0x58025480
 800287c:	58025494 	.word	0x58025494

08002880 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e237      	b.n	8002d02 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d004      	beq.n	80028a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e22c      	b.n	8002d02 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a5c      	ldr	r2, [pc, #368]	@ (8002a20 <HAL_DMA_Abort_IT+0x1a0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d04a      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a24 <HAL_DMA_Abort_IT+0x1a4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d045      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a59      	ldr	r2, [pc, #356]	@ (8002a28 <HAL_DMA_Abort_IT+0x1a8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d040      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a58      	ldr	r2, [pc, #352]	@ (8002a2c <HAL_DMA_Abort_IT+0x1ac>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d03b      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a56      	ldr	r2, [pc, #344]	@ (8002a30 <HAL_DMA_Abort_IT+0x1b0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d036      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a55      	ldr	r2, [pc, #340]	@ (8002a34 <HAL_DMA_Abort_IT+0x1b4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d031      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a53      	ldr	r2, [pc, #332]	@ (8002a38 <HAL_DMA_Abort_IT+0x1b8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02c      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a52      	ldr	r2, [pc, #328]	@ (8002a3c <HAL_DMA_Abort_IT+0x1bc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d027      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a50      	ldr	r2, [pc, #320]	@ (8002a40 <HAL_DMA_Abort_IT+0x1c0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d022      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a4f      	ldr	r2, [pc, #316]	@ (8002a44 <HAL_DMA_Abort_IT+0x1c4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d01d      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a4d      	ldr	r2, [pc, #308]	@ (8002a48 <HAL_DMA_Abort_IT+0x1c8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d018      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a4c <HAL_DMA_Abort_IT+0x1cc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a4a      	ldr	r2, [pc, #296]	@ (8002a50 <HAL_DMA_Abort_IT+0x1d0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00e      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a49      	ldr	r2, [pc, #292]	@ (8002a54 <HAL_DMA_Abort_IT+0x1d4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a47      	ldr	r2, [pc, #284]	@ (8002a58 <HAL_DMA_Abort_IT+0x1d8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_DMA_Abort_IT+0xc8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a46      	ldr	r2, [pc, #280]	@ (8002a5c <HAL_DMA_Abort_IT+0x1dc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_DMA_Abort_IT+0xcc>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_DMA_Abort_IT+0xce>
 800294c:	2300      	movs	r3, #0
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8086 	beq.w	8002a60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2f      	ldr	r2, [pc, #188]	@ (8002a20 <HAL_DMA_Abort_IT+0x1a0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d04a      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2e      	ldr	r2, [pc, #184]	@ (8002a24 <HAL_DMA_Abort_IT+0x1a4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d045      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2c      	ldr	r2, [pc, #176]	@ (8002a28 <HAL_DMA_Abort_IT+0x1a8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d040      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a2c <HAL_DMA_Abort_IT+0x1ac>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d03b      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a29      	ldr	r2, [pc, #164]	@ (8002a30 <HAL_DMA_Abort_IT+0x1b0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d036      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a28      	ldr	r2, [pc, #160]	@ (8002a34 <HAL_DMA_Abort_IT+0x1b4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d031      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a26      	ldr	r2, [pc, #152]	@ (8002a38 <HAL_DMA_Abort_IT+0x1b8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02c      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a25      	ldr	r2, [pc, #148]	@ (8002a3c <HAL_DMA_Abort_IT+0x1bc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d027      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a23      	ldr	r2, [pc, #140]	@ (8002a40 <HAL_DMA_Abort_IT+0x1c0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d022      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a22      	ldr	r2, [pc, #136]	@ (8002a44 <HAL_DMA_Abort_IT+0x1c4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d01d      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a20      	ldr	r2, [pc, #128]	@ (8002a48 <HAL_DMA_Abort_IT+0x1c8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d018      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1f      	ldr	r2, [pc, #124]	@ (8002a4c <HAL_DMA_Abort_IT+0x1cc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a50 <HAL_DMA_Abort_IT+0x1d0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00e      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a54 <HAL_DMA_Abort_IT+0x1d4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d009      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002a58 <HAL_DMA_Abort_IT+0x1d8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_DMA_Abort_IT+0x17c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a19      	ldr	r2, [pc, #100]	@ (8002a5c <HAL_DMA_Abort_IT+0x1dc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d108      	bne.n	8002a0e <HAL_DMA_Abort_IT+0x18e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e178      	b.n	8002d00 <HAL_DMA_Abort_IT+0x480>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e16f      	b.n	8002d00 <HAL_DMA_Abort_IT+0x480>
 8002a20:	40020010 	.word	0x40020010
 8002a24:	40020028 	.word	0x40020028
 8002a28:	40020040 	.word	0x40020040
 8002a2c:	40020058 	.word	0x40020058
 8002a30:	40020070 	.word	0x40020070
 8002a34:	40020088 	.word	0x40020088
 8002a38:	400200a0 	.word	0x400200a0
 8002a3c:	400200b8 	.word	0x400200b8
 8002a40:	40020410 	.word	0x40020410
 8002a44:	40020428 	.word	0x40020428
 8002a48:	40020440 	.word	0x40020440
 8002a4c:	40020458 	.word	0x40020458
 8002a50:	40020470 	.word	0x40020470
 8002a54:	40020488 	.word	0x40020488
 8002a58:	400204a0 	.word	0x400204a0
 8002a5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 020e 	bic.w	r2, r2, #14
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6c      	ldr	r2, [pc, #432]	@ (8002c28 <HAL_DMA_Abort_IT+0x3a8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d04a      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6b      	ldr	r2, [pc, #428]	@ (8002c2c <HAL_DMA_Abort_IT+0x3ac>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d045      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a69      	ldr	r2, [pc, #420]	@ (8002c30 <HAL_DMA_Abort_IT+0x3b0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d040      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a68      	ldr	r2, [pc, #416]	@ (8002c34 <HAL_DMA_Abort_IT+0x3b4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d03b      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a66      	ldr	r2, [pc, #408]	@ (8002c38 <HAL_DMA_Abort_IT+0x3b8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d036      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a65      	ldr	r2, [pc, #404]	@ (8002c3c <HAL_DMA_Abort_IT+0x3bc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d031      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a63      	ldr	r2, [pc, #396]	@ (8002c40 <HAL_DMA_Abort_IT+0x3c0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d02c      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a62      	ldr	r2, [pc, #392]	@ (8002c44 <HAL_DMA_Abort_IT+0x3c4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d027      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a60      	ldr	r2, [pc, #384]	@ (8002c48 <HAL_DMA_Abort_IT+0x3c8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d022      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5f      	ldr	r2, [pc, #380]	@ (8002c4c <HAL_DMA_Abort_IT+0x3cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d01d      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c50 <HAL_DMA_Abort_IT+0x3d0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d018      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c54 <HAL_DMA_Abort_IT+0x3d4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a5a      	ldr	r2, [pc, #360]	@ (8002c58 <HAL_DMA_Abort_IT+0x3d8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00e      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a59      	ldr	r2, [pc, #356]	@ (8002c5c <HAL_DMA_Abort_IT+0x3dc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d009      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a57      	ldr	r2, [pc, #348]	@ (8002c60 <HAL_DMA_Abort_IT+0x3e0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d004      	beq.n	8002b10 <HAL_DMA_Abort_IT+0x290>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a56      	ldr	r2, [pc, #344]	@ (8002c64 <HAL_DMA_Abort_IT+0x3e4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d108      	bne.n	8002b22 <HAL_DMA_Abort_IT+0x2a2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e007      	b.n	8002b32 <HAL_DMA_Abort_IT+0x2b2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a3c      	ldr	r2, [pc, #240]	@ (8002c28 <HAL_DMA_Abort_IT+0x3a8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d072      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a3a      	ldr	r2, [pc, #232]	@ (8002c2c <HAL_DMA_Abort_IT+0x3ac>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d06d      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a39      	ldr	r2, [pc, #228]	@ (8002c30 <HAL_DMA_Abort_IT+0x3b0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d068      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a37      	ldr	r2, [pc, #220]	@ (8002c34 <HAL_DMA_Abort_IT+0x3b4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d063      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a36      	ldr	r2, [pc, #216]	@ (8002c38 <HAL_DMA_Abort_IT+0x3b8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d05e      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a34      	ldr	r2, [pc, #208]	@ (8002c3c <HAL_DMA_Abort_IT+0x3bc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d059      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a33      	ldr	r2, [pc, #204]	@ (8002c40 <HAL_DMA_Abort_IT+0x3c0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d054      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a31      	ldr	r2, [pc, #196]	@ (8002c44 <HAL_DMA_Abort_IT+0x3c4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d04f      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a30      	ldr	r2, [pc, #192]	@ (8002c48 <HAL_DMA_Abort_IT+0x3c8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d04a      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2e      	ldr	r2, [pc, #184]	@ (8002c4c <HAL_DMA_Abort_IT+0x3cc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d045      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c50 <HAL_DMA_Abort_IT+0x3d0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d040      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c54 <HAL_DMA_Abort_IT+0x3d4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d03b      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2a      	ldr	r2, [pc, #168]	@ (8002c58 <HAL_DMA_Abort_IT+0x3d8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d036      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a28      	ldr	r2, [pc, #160]	@ (8002c5c <HAL_DMA_Abort_IT+0x3dc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d031      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a27      	ldr	r2, [pc, #156]	@ (8002c60 <HAL_DMA_Abort_IT+0x3e0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d02c      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a25      	ldr	r2, [pc, #148]	@ (8002c64 <HAL_DMA_Abort_IT+0x3e4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d027      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a24      	ldr	r2, [pc, #144]	@ (8002c68 <HAL_DMA_Abort_IT+0x3e8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d022      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a22      	ldr	r2, [pc, #136]	@ (8002c6c <HAL_DMA_Abort_IT+0x3ec>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01d      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a21      	ldr	r2, [pc, #132]	@ (8002c70 <HAL_DMA_Abort_IT+0x3f0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d018      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c74 <HAL_DMA_Abort_IT+0x3f4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c78 <HAL_DMA_Abort_IT+0x3f8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <HAL_DMA_Abort_IT+0x3fc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d009      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1b      	ldr	r2, [pc, #108]	@ (8002c80 <HAL_DMA_Abort_IT+0x400>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x3a2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <HAL_DMA_Abort_IT+0x404>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d132      	bne.n	8002c88 <HAL_DMA_Abort_IT+0x408>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e031      	b.n	8002c8a <HAL_DMA_Abort_IT+0x40a>
 8002c26:	bf00      	nop
 8002c28:	40020010 	.word	0x40020010
 8002c2c:	40020028 	.word	0x40020028
 8002c30:	40020040 	.word	0x40020040
 8002c34:	40020058 	.word	0x40020058
 8002c38:	40020070 	.word	0x40020070
 8002c3c:	40020088 	.word	0x40020088
 8002c40:	400200a0 	.word	0x400200a0
 8002c44:	400200b8 	.word	0x400200b8
 8002c48:	40020410 	.word	0x40020410
 8002c4c:	40020428 	.word	0x40020428
 8002c50:	40020440 	.word	0x40020440
 8002c54:	40020458 	.word	0x40020458
 8002c58:	40020470 	.word	0x40020470
 8002c5c:	40020488 	.word	0x40020488
 8002c60:	400204a0 	.word	0x400204a0
 8002c64:	400204b8 	.word	0x400204b8
 8002c68:	58025408 	.word	0x58025408
 8002c6c:	5802541c 	.word	0x5802541c
 8002c70:	58025430 	.word	0x58025430
 8002c74:	58025444 	.word	0x58025444
 8002c78:	58025458 	.word	0x58025458
 8002c7c:	5802546c 	.word	0x5802546c
 8002c80:	58025480 	.word	0x58025480
 8002c84:	58025494 	.word	0x58025494
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d028      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2201      	movs	r2, #1
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cbc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cd4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cde:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop

08002d0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	@ 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d18:	4b67      	ldr	r3, [pc, #412]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a67      	ldr	r2, [pc, #412]	@ (8002ebc <HAL_DMA_IRQHandler+0x1b0>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0a9b      	lsrs	r3, r3, #10
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a5f      	ldr	r2, [pc, #380]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1b4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d04a      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec4 <HAL_DMA_IRQHandler+0x1b8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d045      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a5c      	ldr	r2, [pc, #368]	@ (8002ec8 <HAL_DMA_IRQHandler+0x1bc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d040      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a5a      	ldr	r2, [pc, #360]	@ (8002ecc <HAL_DMA_IRQHandler+0x1c0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d03b      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a59      	ldr	r2, [pc, #356]	@ (8002ed0 <HAL_DMA_IRQHandler+0x1c4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d036      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a57      	ldr	r2, [pc, #348]	@ (8002ed4 <HAL_DMA_IRQHandler+0x1c8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d031      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a56      	ldr	r2, [pc, #344]	@ (8002ed8 <HAL_DMA_IRQHandler+0x1cc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d02c      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a54      	ldr	r2, [pc, #336]	@ (8002edc <HAL_DMA_IRQHandler+0x1d0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d027      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a53      	ldr	r2, [pc, #332]	@ (8002ee0 <HAL_DMA_IRQHandler+0x1d4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d022      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a51      	ldr	r2, [pc, #324]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01d      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a50      	ldr	r2, [pc, #320]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1dc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d018      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a4e      	ldr	r2, [pc, #312]	@ (8002eec <HAL_DMA_IRQHandler+0x1e0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a4d      	ldr	r2, [pc, #308]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1e4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00e      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1e8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d009      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1ec>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_DMA_IRQHandler+0xd2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a48      	ldr	r2, [pc, #288]	@ (8002efc <HAL_DMA_IRQHandler+0x1f0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_DMA_IRQHandler+0xd6>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_DMA_IRQHandler+0xd8>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 842b 	beq.w	8003640 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2208      	movs	r2, #8
 8002df4:	409a      	lsls	r2, r3
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80a2 	beq.w	8002f44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2e      	ldr	r2, [pc, #184]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1b4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d04a      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8002ec4 <HAL_DMA_IRQHandler+0x1b8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d045      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec8 <HAL_DMA_IRQHandler+0x1bc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d040      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2a      	ldr	r2, [pc, #168]	@ (8002ecc <HAL_DMA_IRQHandler+0x1c0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d03b      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a28      	ldr	r2, [pc, #160]	@ (8002ed0 <HAL_DMA_IRQHandler+0x1c4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d036      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a27      	ldr	r2, [pc, #156]	@ (8002ed4 <HAL_DMA_IRQHandler+0x1c8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d031      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a25      	ldr	r2, [pc, #148]	@ (8002ed8 <HAL_DMA_IRQHandler+0x1cc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d02c      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a24      	ldr	r2, [pc, #144]	@ (8002edc <HAL_DMA_IRQHandler+0x1d0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d027      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a22      	ldr	r2, [pc, #136]	@ (8002ee0 <HAL_DMA_IRQHandler+0x1d4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d022      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a21      	ldr	r2, [pc, #132]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d01d      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1dc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d018      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1e      	ldr	r2, [pc, #120]	@ (8002eec <HAL_DMA_IRQHandler+0x1e0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1e4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1e8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a19      	ldr	r2, [pc, #100]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1ec>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x194>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a18      	ldr	r2, [pc, #96]	@ (8002efc <HAL_DMA_IRQHandler+0x1f0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d12f      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x1f4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	e02e      	b.n	8002f14 <HAL_DMA_IRQHandler+0x208>
 8002eb6:	bf00      	nop
 8002eb8:	24000000 	.word	0x24000000
 8002ebc:	1b4e81b5 	.word	0x1b4e81b5
 8002ec0:	40020010 	.word	0x40020010
 8002ec4:	40020028 	.word	0x40020028
 8002ec8:	40020040 	.word	0x40020040
 8002ecc:	40020058 	.word	0x40020058
 8002ed0:	40020070 	.word	0x40020070
 8002ed4:	40020088 	.word	0x40020088
 8002ed8:	400200a0 	.word	0x400200a0
 8002edc:	400200b8 	.word	0x400200b8
 8002ee0:	40020410 	.word	0x40020410
 8002ee4:	40020428 	.word	0x40020428
 8002ee8:	40020440 	.word	0x40020440
 8002eec:	40020458 	.word	0x40020458
 8002ef0:	40020470 	.word	0x40020470
 8002ef4:	40020488 	.word	0x40020488
 8002ef8:	400204a0 	.word	0x400204a0
 8002efc:	400204b8 	.word	0x400204b8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bf14      	ite	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	2300      	moveq	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0204 	bic.w	r2, r2, #4
 8002f26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2208      	movs	r2, #8
 8002f32:	409a      	lsls	r2, r3
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d06e      	beq.n	8003038 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a69      	ldr	r2, [pc, #420]	@ (8003104 <HAL_DMA_IRQHandler+0x3f8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d04a      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a67      	ldr	r2, [pc, #412]	@ (8003108 <HAL_DMA_IRQHandler+0x3fc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d045      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a66      	ldr	r2, [pc, #408]	@ (800310c <HAL_DMA_IRQHandler+0x400>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d040      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a64      	ldr	r2, [pc, #400]	@ (8003110 <HAL_DMA_IRQHandler+0x404>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d03b      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a63      	ldr	r2, [pc, #396]	@ (8003114 <HAL_DMA_IRQHandler+0x408>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d036      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a61      	ldr	r2, [pc, #388]	@ (8003118 <HAL_DMA_IRQHandler+0x40c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d031      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a60      	ldr	r2, [pc, #384]	@ (800311c <HAL_DMA_IRQHandler+0x410>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d02c      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a5e      	ldr	r2, [pc, #376]	@ (8003120 <HAL_DMA_IRQHandler+0x414>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d027      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5d      	ldr	r2, [pc, #372]	@ (8003124 <HAL_DMA_IRQHandler+0x418>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a5b      	ldr	r2, [pc, #364]	@ (8003128 <HAL_DMA_IRQHandler+0x41c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01d      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800312c <HAL_DMA_IRQHandler+0x420>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d018      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a58      	ldr	r2, [pc, #352]	@ (8003130 <HAL_DMA_IRQHandler+0x424>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a57      	ldr	r2, [pc, #348]	@ (8003134 <HAL_DMA_IRQHandler+0x428>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00e      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a55      	ldr	r2, [pc, #340]	@ (8003138 <HAL_DMA_IRQHandler+0x42c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d009      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a54      	ldr	r2, [pc, #336]	@ (800313c <HAL_DMA_IRQHandler+0x430>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2ee>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	@ (8003140 <HAL_DMA_IRQHandler+0x434>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10a      	bne.n	8003010 <HAL_DMA_IRQHandler+0x304>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e003      	b.n	8003018 <HAL_DMA_IRQHandler+0x30c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2300      	movs	r3, #0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2201      	movs	r2, #1
 8003026:	409a      	lsls	r2, r3
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	f043 0202 	orr.w	r2, r3, #2
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2204      	movs	r2, #4
 8003042:	409a      	lsls	r2, r3
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 808f 	beq.w	800316c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2c      	ldr	r2, [pc, #176]	@ (8003104 <HAL_DMA_IRQHandler+0x3f8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d04a      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2a      	ldr	r2, [pc, #168]	@ (8003108 <HAL_DMA_IRQHandler+0x3fc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d045      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a29      	ldr	r2, [pc, #164]	@ (800310c <HAL_DMA_IRQHandler+0x400>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d040      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a27      	ldr	r2, [pc, #156]	@ (8003110 <HAL_DMA_IRQHandler+0x404>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d03b      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a26      	ldr	r2, [pc, #152]	@ (8003114 <HAL_DMA_IRQHandler+0x408>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d036      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a24      	ldr	r2, [pc, #144]	@ (8003118 <HAL_DMA_IRQHandler+0x40c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d031      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a23      	ldr	r2, [pc, #140]	@ (800311c <HAL_DMA_IRQHandler+0x410>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d02c      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a21      	ldr	r2, [pc, #132]	@ (8003120 <HAL_DMA_IRQHandler+0x414>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d027      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a20      	ldr	r2, [pc, #128]	@ (8003124 <HAL_DMA_IRQHandler+0x418>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003128 <HAL_DMA_IRQHandler+0x41c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01d      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	@ (800312c <HAL_DMA_IRQHandler+0x420>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d018      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003130 <HAL_DMA_IRQHandler+0x424>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003134 <HAL_DMA_IRQHandler+0x428>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00e      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a18      	ldr	r2, [pc, #96]	@ (8003138 <HAL_DMA_IRQHandler+0x42c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a17      	ldr	r2, [pc, #92]	@ (800313c <HAL_DMA_IRQHandler+0x430>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_IRQHandler+0x3e2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <HAL_DMA_IRQHandler+0x434>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d12a      	bne.n	8003144 <HAL_DMA_IRQHandler+0x438>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e023      	b.n	800314c <HAL_DMA_IRQHandler+0x440>
 8003104:	40020010 	.word	0x40020010
 8003108:	40020028 	.word	0x40020028
 800310c:	40020040 	.word	0x40020040
 8003110:	40020058 	.word	0x40020058
 8003114:	40020070 	.word	0x40020070
 8003118:	40020088 	.word	0x40020088
 800311c:	400200a0 	.word	0x400200a0
 8003120:	400200b8 	.word	0x400200b8
 8003124:	40020410 	.word	0x40020410
 8003128:	40020428 	.word	0x40020428
 800312c:	40020440 	.word	0x40020440
 8003130:	40020458 	.word	0x40020458
 8003134:	40020470 	.word	0x40020470
 8003138:	40020488 	.word	0x40020488
 800313c:	400204a0 	.word	0x400204a0
 8003140:	400204b8 	.word	0x400204b8
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	2204      	movs	r2, #4
 800315a:	409a      	lsls	r2, r3
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	f043 0204 	orr.w	r2, r3, #4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2210      	movs	r2, #16
 8003176:	409a      	lsls	r2, r3
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a6 	beq.w	80032ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a85      	ldr	r2, [pc, #532]	@ (800339c <HAL_DMA_IRQHandler+0x690>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d04a      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a83      	ldr	r2, [pc, #524]	@ (80033a0 <HAL_DMA_IRQHandler+0x694>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d045      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a82      	ldr	r2, [pc, #520]	@ (80033a4 <HAL_DMA_IRQHandler+0x698>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d040      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a80      	ldr	r2, [pc, #512]	@ (80033a8 <HAL_DMA_IRQHandler+0x69c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d03b      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a7f      	ldr	r2, [pc, #508]	@ (80033ac <HAL_DMA_IRQHandler+0x6a0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d036      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a7d      	ldr	r2, [pc, #500]	@ (80033b0 <HAL_DMA_IRQHandler+0x6a4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d031      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a7c      	ldr	r2, [pc, #496]	@ (80033b4 <HAL_DMA_IRQHandler+0x6a8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d02c      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a7a      	ldr	r2, [pc, #488]	@ (80033b8 <HAL_DMA_IRQHandler+0x6ac>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d027      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a79      	ldr	r2, [pc, #484]	@ (80033bc <HAL_DMA_IRQHandler+0x6b0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d022      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a77      	ldr	r2, [pc, #476]	@ (80033c0 <HAL_DMA_IRQHandler+0x6b4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01d      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a76      	ldr	r2, [pc, #472]	@ (80033c4 <HAL_DMA_IRQHandler+0x6b8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d018      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a74      	ldr	r2, [pc, #464]	@ (80033c8 <HAL_DMA_IRQHandler+0x6bc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a73      	ldr	r2, [pc, #460]	@ (80033cc <HAL_DMA_IRQHandler+0x6c0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00e      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a71      	ldr	r2, [pc, #452]	@ (80033d0 <HAL_DMA_IRQHandler+0x6c4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a70      	ldr	r2, [pc, #448]	@ (80033d4 <HAL_DMA_IRQHandler+0x6c8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_DMA_IRQHandler+0x516>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a6e      	ldr	r2, [pc, #440]	@ (80033d8 <HAL_DMA_IRQHandler+0x6cc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10a      	bne.n	8003238 <HAL_DMA_IRQHandler+0x52c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e009      	b.n	800324c <HAL_DMA_IRQHandler+0x540>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	bf14      	ite	ne
 8003246:	2301      	movne	r3, #1
 8003248:	2300      	moveq	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d03e      	beq.n	80032ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2210      	movs	r2, #16
 800325a:	409a      	lsls	r2, r3
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d018      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d108      	bne.n	800328e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d024      	beq.n	80032ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
 800328c:	e01f      	b.n	80032ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01b      	beq.n	80032ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
 800329e:	e016      	b.n	80032ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0208 	bic.w	r2, r2, #8
 80032bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2220      	movs	r2, #32
 80032d8:	409a      	lsls	r2, r3
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8110 	beq.w	8003504 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2c      	ldr	r2, [pc, #176]	@ (800339c <HAL_DMA_IRQHandler+0x690>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d04a      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2b      	ldr	r2, [pc, #172]	@ (80033a0 <HAL_DMA_IRQHandler+0x694>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d045      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a29      	ldr	r2, [pc, #164]	@ (80033a4 <HAL_DMA_IRQHandler+0x698>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d040      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a28      	ldr	r2, [pc, #160]	@ (80033a8 <HAL_DMA_IRQHandler+0x69c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d03b      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a26      	ldr	r2, [pc, #152]	@ (80033ac <HAL_DMA_IRQHandler+0x6a0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d036      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a25      	ldr	r2, [pc, #148]	@ (80033b0 <HAL_DMA_IRQHandler+0x6a4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d031      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a23      	ldr	r2, [pc, #140]	@ (80033b4 <HAL_DMA_IRQHandler+0x6a8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d02c      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a22      	ldr	r2, [pc, #136]	@ (80033b8 <HAL_DMA_IRQHandler+0x6ac>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d027      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a20      	ldr	r2, [pc, #128]	@ (80033bc <HAL_DMA_IRQHandler+0x6b0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d022      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1f      	ldr	r2, [pc, #124]	@ (80033c0 <HAL_DMA_IRQHandler+0x6b4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d01d      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1d      	ldr	r2, [pc, #116]	@ (80033c4 <HAL_DMA_IRQHandler+0x6b8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d018      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1c      	ldr	r2, [pc, #112]	@ (80033c8 <HAL_DMA_IRQHandler+0x6bc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1a      	ldr	r2, [pc, #104]	@ (80033cc <HAL_DMA_IRQHandler+0x6c0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a19      	ldr	r2, [pc, #100]	@ (80033d0 <HAL_DMA_IRQHandler+0x6c4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a17      	ldr	r2, [pc, #92]	@ (80033d4 <HAL_DMA_IRQHandler+0x6c8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_DMA_IRQHandler+0x678>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a16      	ldr	r2, [pc, #88]	@ (80033d8 <HAL_DMA_IRQHandler+0x6cc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d12b      	bne.n	80033dc <HAL_DMA_IRQHandler+0x6d0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	bf14      	ite	ne
 8003392:	2301      	movne	r3, #1
 8003394:	2300      	moveq	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	e02a      	b.n	80033f0 <HAL_DMA_IRQHandler+0x6e4>
 800339a:	bf00      	nop
 800339c:	40020010 	.word	0x40020010
 80033a0:	40020028 	.word	0x40020028
 80033a4:	40020040 	.word	0x40020040
 80033a8:	40020058 	.word	0x40020058
 80033ac:	40020070 	.word	0x40020070
 80033b0:	40020088 	.word	0x40020088
 80033b4:	400200a0 	.word	0x400200a0
 80033b8:	400200b8 	.word	0x400200b8
 80033bc:	40020410 	.word	0x40020410
 80033c0:	40020428 	.word	0x40020428
 80033c4:	40020440 	.word	0x40020440
 80033c8:	40020458 	.word	0x40020458
 80033cc:	40020470 	.word	0x40020470
 80033d0:	40020488 	.word	0x40020488
 80033d4:	400204a0 	.word	0x400204a0
 80033d8:	400204b8 	.word	0x400204b8
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8087 	beq.w	8003504 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2220      	movs	r2, #32
 8003400:	409a      	lsls	r2, r3
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b04      	cmp	r3, #4
 8003410:	d139      	bne.n	8003486 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0216 	bic.w	r2, r2, #22
 8003420:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003430:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <HAL_DMA_IRQHandler+0x736>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0208 	bic.w	r2, r2, #8
 8003450:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	223f      	movs	r2, #63	@ 0x3f
 800345c:	409a      	lsls	r2, r3
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 834a 	beq.w	8003b10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
          }
          return;
 8003484:	e344      	b.n	8003b10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d018      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d02c      	beq.n	8003504 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
 80034b2:	e027      	b.n	8003504 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d023      	beq.n	8003504 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
 80034c4:	e01e      	b.n	8003504 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10f      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0210 	bic.w	r2, r2, #16
 80034e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8306 	beq.w	8003b1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8088 	beq.w	800362c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2204      	movs	r2, #4
 8003520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a7a      	ldr	r2, [pc, #488]	@ (8003714 <HAL_DMA_IRQHandler+0xa08>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d04a      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a79      	ldr	r2, [pc, #484]	@ (8003718 <HAL_DMA_IRQHandler+0xa0c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d045      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a77      	ldr	r2, [pc, #476]	@ (800371c <HAL_DMA_IRQHandler+0xa10>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d040      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a76      	ldr	r2, [pc, #472]	@ (8003720 <HAL_DMA_IRQHandler+0xa14>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d03b      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a74      	ldr	r2, [pc, #464]	@ (8003724 <HAL_DMA_IRQHandler+0xa18>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d036      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a73      	ldr	r2, [pc, #460]	@ (8003728 <HAL_DMA_IRQHandler+0xa1c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d031      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a71      	ldr	r2, [pc, #452]	@ (800372c <HAL_DMA_IRQHandler+0xa20>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d02c      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a70      	ldr	r2, [pc, #448]	@ (8003730 <HAL_DMA_IRQHandler+0xa24>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d027      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a6e      	ldr	r2, [pc, #440]	@ (8003734 <HAL_DMA_IRQHandler+0xa28>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d022      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6d      	ldr	r2, [pc, #436]	@ (8003738 <HAL_DMA_IRQHandler+0xa2c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d01d      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6b      	ldr	r2, [pc, #428]	@ (800373c <HAL_DMA_IRQHandler+0xa30>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d018      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6a      	ldr	r2, [pc, #424]	@ (8003740 <HAL_DMA_IRQHandler+0xa34>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a68      	ldr	r2, [pc, #416]	@ (8003744 <HAL_DMA_IRQHandler+0xa38>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00e      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a67      	ldr	r2, [pc, #412]	@ (8003748 <HAL_DMA_IRQHandler+0xa3c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d009      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a65      	ldr	r2, [pc, #404]	@ (800374c <HAL_DMA_IRQHandler+0xa40>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x8b8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a64      	ldr	r2, [pc, #400]	@ (8003750 <HAL_DMA_IRQHandler+0xa44>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d108      	bne.n	80035d6 <HAL_DMA_IRQHandler+0x8ca>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e007      	b.n	80035e6 <HAL_DMA_IRQHandler+0x8da>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3301      	adds	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d307      	bcc.n	8003602 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f2      	bne.n	80035e6 <HAL_DMA_IRQHandler+0x8da>
 8003600:	e000      	b.n	8003604 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003602:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2203      	movs	r2, #3
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800361a:	e003      	b.n	8003624 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8272 	beq.w	8003b1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
 800363e:	e26c      	b.n	8003b1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a43      	ldr	r2, [pc, #268]	@ (8003754 <HAL_DMA_IRQHandler+0xa48>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d022      	beq.n	8003690 <HAL_DMA_IRQHandler+0x984>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a42      	ldr	r2, [pc, #264]	@ (8003758 <HAL_DMA_IRQHandler+0xa4c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d01d      	beq.n	8003690 <HAL_DMA_IRQHandler+0x984>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a40      	ldr	r2, [pc, #256]	@ (800375c <HAL_DMA_IRQHandler+0xa50>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d018      	beq.n	8003690 <HAL_DMA_IRQHandler+0x984>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3f      	ldr	r2, [pc, #252]	@ (8003760 <HAL_DMA_IRQHandler+0xa54>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <HAL_DMA_IRQHandler+0x984>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3d      	ldr	r2, [pc, #244]	@ (8003764 <HAL_DMA_IRQHandler+0xa58>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00e      	beq.n	8003690 <HAL_DMA_IRQHandler+0x984>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a3c      	ldr	r2, [pc, #240]	@ (8003768 <HAL_DMA_IRQHandler+0xa5c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d009      	beq.n	8003690 <HAL_DMA_IRQHandler+0x984>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a3a      	ldr	r2, [pc, #232]	@ (800376c <HAL_DMA_IRQHandler+0xa60>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_DMA_IRQHandler+0x984>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a39      	ldr	r2, [pc, #228]	@ (8003770 <HAL_DMA_IRQHandler+0xa64>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d101      	bne.n	8003694 <HAL_DMA_IRQHandler+0x988>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_DMA_IRQHandler+0x98a>
 8003694:	2300      	movs	r3, #0
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 823f 	beq.w	8003b1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2204      	movs	r2, #4
 80036ae:	409a      	lsls	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80cd 	beq.w	8003854 <HAL_DMA_IRQHandler+0xb48>
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80c7 	beq.w	8003854 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2204      	movs	r2, #4
 80036d0:	409a      	lsls	r2, r3
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d049      	beq.n	8003774 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8210 	beq.w	8003b14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036fc:	e20a      	b.n	8003b14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8206 	beq.w	8003b14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003710:	e200      	b.n	8003b14 <HAL_DMA_IRQHandler+0xe08>
 8003712:	bf00      	nop
 8003714:	40020010 	.word	0x40020010
 8003718:	40020028 	.word	0x40020028
 800371c:	40020040 	.word	0x40020040
 8003720:	40020058 	.word	0x40020058
 8003724:	40020070 	.word	0x40020070
 8003728:	40020088 	.word	0x40020088
 800372c:	400200a0 	.word	0x400200a0
 8003730:	400200b8 	.word	0x400200b8
 8003734:	40020410 	.word	0x40020410
 8003738:	40020428 	.word	0x40020428
 800373c:	40020440 	.word	0x40020440
 8003740:	40020458 	.word	0x40020458
 8003744:	40020470 	.word	0x40020470
 8003748:	40020488 	.word	0x40020488
 800374c:	400204a0 	.word	0x400204a0
 8003750:	400204b8 	.word	0x400204b8
 8003754:	58025408 	.word	0x58025408
 8003758:	5802541c 	.word	0x5802541c
 800375c:	58025430 	.word	0x58025430
 8003760:	58025444 	.word	0x58025444
 8003764:	58025458 	.word	0x58025458
 8003768:	5802546c 	.word	0x5802546c
 800376c:	58025480 	.word	0x58025480
 8003770:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d160      	bne.n	8003840 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7f      	ldr	r2, [pc, #508]	@ (8003980 <HAL_DMA_IRQHandler+0xc74>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a7d      	ldr	r2, [pc, #500]	@ (8003984 <HAL_DMA_IRQHandler+0xc78>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a7c      	ldr	r2, [pc, #496]	@ (8003988 <HAL_DMA_IRQHandler+0xc7c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a7a      	ldr	r2, [pc, #488]	@ (800398c <HAL_DMA_IRQHandler+0xc80>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a79      	ldr	r2, [pc, #484]	@ (8003990 <HAL_DMA_IRQHandler+0xc84>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a77      	ldr	r2, [pc, #476]	@ (8003994 <HAL_DMA_IRQHandler+0xc88>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a76      	ldr	r2, [pc, #472]	@ (8003998 <HAL_DMA_IRQHandler+0xc8c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a74      	ldr	r2, [pc, #464]	@ (800399c <HAL_DMA_IRQHandler+0xc90>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a73      	ldr	r2, [pc, #460]	@ (80039a0 <HAL_DMA_IRQHandler+0xc94>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a71      	ldr	r2, [pc, #452]	@ (80039a4 <HAL_DMA_IRQHandler+0xc98>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a70      	ldr	r2, [pc, #448]	@ (80039a8 <HAL_DMA_IRQHandler+0xc9c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6e      	ldr	r2, [pc, #440]	@ (80039ac <HAL_DMA_IRQHandler+0xca0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a6d      	ldr	r2, [pc, #436]	@ (80039b0 <HAL_DMA_IRQHandler+0xca4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6b      	ldr	r2, [pc, #428]	@ (80039b4 <HAL_DMA_IRQHandler+0xca8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6a      	ldr	r2, [pc, #424]	@ (80039b8 <HAL_DMA_IRQHandler+0xcac>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_DMA_IRQHandler+0xb12>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a68      	ldr	r2, [pc, #416]	@ (80039bc <HAL_DMA_IRQHandler+0xcb0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d108      	bne.n	8003830 <HAL_DMA_IRQHandler+0xb24>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0208 	bic.w	r2, r2, #8
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e007      	b.n	8003840 <HAL_DMA_IRQHandler+0xb34>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0204 	bic.w	r2, r2, #4
 800383e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8165 	beq.w	8003b14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003852:	e15f      	b.n	8003b14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	2202      	movs	r2, #2
 800385e:	409a      	lsls	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80c5 	beq.w	80039f4 <HAL_DMA_IRQHandler+0xce8>
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80bf 	beq.w	80039f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2202      	movs	r2, #2
 8003880:	409a      	lsls	r2, r3
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d018      	beq.n	80038c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 813a 	beq.w	8003b18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038ac:	e134      	b.n	8003b18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8130 	beq.w	8003b18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c0:	e12a      	b.n	8003b18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f040 8089 	bne.w	80039e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <HAL_DMA_IRQHandler+0xc74>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d04a      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a29      	ldr	r2, [pc, #164]	@ (8003984 <HAL_DMA_IRQHandler+0xc78>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d045      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a28      	ldr	r2, [pc, #160]	@ (8003988 <HAL_DMA_IRQHandler+0xc7c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d040      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a26      	ldr	r2, [pc, #152]	@ (800398c <HAL_DMA_IRQHandler+0xc80>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d03b      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a25      	ldr	r2, [pc, #148]	@ (8003990 <HAL_DMA_IRQHandler+0xc84>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d036      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a23      	ldr	r2, [pc, #140]	@ (8003994 <HAL_DMA_IRQHandler+0xc88>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d031      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a22      	ldr	r2, [pc, #136]	@ (8003998 <HAL_DMA_IRQHandler+0xc8c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d02c      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a20      	ldr	r2, [pc, #128]	@ (800399c <HAL_DMA_IRQHandler+0xc90>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d027      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1f      	ldr	r2, [pc, #124]	@ (80039a0 <HAL_DMA_IRQHandler+0xc94>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d022      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1d      	ldr	r2, [pc, #116]	@ (80039a4 <HAL_DMA_IRQHandler+0xc98>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01d      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1c      	ldr	r2, [pc, #112]	@ (80039a8 <HAL_DMA_IRQHandler+0xc9c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d018      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1a      	ldr	r2, [pc, #104]	@ (80039ac <HAL_DMA_IRQHandler+0xca0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a19      	ldr	r2, [pc, #100]	@ (80039b0 <HAL_DMA_IRQHandler+0xca4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00e      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a17      	ldr	r2, [pc, #92]	@ (80039b4 <HAL_DMA_IRQHandler+0xca8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d009      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a16      	ldr	r2, [pc, #88]	@ (80039b8 <HAL_DMA_IRQHandler+0xcac>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d004      	beq.n	800396e <HAL_DMA_IRQHandler+0xc62>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a14      	ldr	r2, [pc, #80]	@ (80039bc <HAL_DMA_IRQHandler+0xcb0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d128      	bne.n	80039c0 <HAL_DMA_IRQHandler+0xcb4>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0214 	bic.w	r2, r2, #20
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e027      	b.n	80039d0 <HAL_DMA_IRQHandler+0xcc4>
 8003980:	40020010 	.word	0x40020010
 8003984:	40020028 	.word	0x40020028
 8003988:	40020040 	.word	0x40020040
 800398c:	40020058 	.word	0x40020058
 8003990:	40020070 	.word	0x40020070
 8003994:	40020088 	.word	0x40020088
 8003998:	400200a0 	.word	0x400200a0
 800399c:	400200b8 	.word	0x400200b8
 80039a0:	40020410 	.word	0x40020410
 80039a4:	40020428 	.word	0x40020428
 80039a8:	40020440 	.word	0x40020440
 80039ac:	40020458 	.word	0x40020458
 80039b0:	40020470 	.word	0x40020470
 80039b4:	40020488 	.word	0x40020488
 80039b8:	400204a0 	.word	0x400204a0
 80039bc:	400204b8 	.word	0x400204b8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 020a 	bic.w	r2, r2, #10
 80039ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8097 	beq.w	8003b18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f2:	e091      	b.n	8003b18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	2208      	movs	r2, #8
 80039fe:	409a      	lsls	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8088 	beq.w	8003b1a <HAL_DMA_IRQHandler+0xe0e>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8082 	beq.w	8003b1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a41      	ldr	r2, [pc, #260]	@ (8003b20 <HAL_DMA_IRQHandler+0xe14>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d04a      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a3f      	ldr	r2, [pc, #252]	@ (8003b24 <HAL_DMA_IRQHandler+0xe18>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d045      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b28 <HAL_DMA_IRQHandler+0xe1c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d040      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a3c      	ldr	r2, [pc, #240]	@ (8003b2c <HAL_DMA_IRQHandler+0xe20>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d03b      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a3b      	ldr	r2, [pc, #236]	@ (8003b30 <HAL_DMA_IRQHandler+0xe24>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d036      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a39      	ldr	r2, [pc, #228]	@ (8003b34 <HAL_DMA_IRQHandler+0xe28>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d031      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a38      	ldr	r2, [pc, #224]	@ (8003b38 <HAL_DMA_IRQHandler+0xe2c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d02c      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a36      	ldr	r2, [pc, #216]	@ (8003b3c <HAL_DMA_IRQHandler+0xe30>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d027      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a35      	ldr	r2, [pc, #212]	@ (8003b40 <HAL_DMA_IRQHandler+0xe34>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d022      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a33      	ldr	r2, [pc, #204]	@ (8003b44 <HAL_DMA_IRQHandler+0xe38>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01d      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a32      	ldr	r2, [pc, #200]	@ (8003b48 <HAL_DMA_IRQHandler+0xe3c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d018      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a30      	ldr	r2, [pc, #192]	@ (8003b4c <HAL_DMA_IRQHandler+0xe40>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2f      	ldr	r2, [pc, #188]	@ (8003b50 <HAL_DMA_IRQHandler+0xe44>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b54 <HAL_DMA_IRQHandler+0xe48>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b58 <HAL_DMA_IRQHandler+0xe4c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xdaa>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b5c <HAL_DMA_IRQHandler+0xe50>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0xdbc>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 021c 	bic.w	r2, r2, #28
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e007      	b.n	8003ad8 <HAL_DMA_IRQHandler+0xdcc>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 020e 	bic.w	r2, r2, #14
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
 8003b0e:	e004      	b.n	8003b1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b10:	bf00      	nop
 8003b12:	e002      	b.n	8003b1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b14:	bf00      	nop
 8003b16:	e000      	b.n	8003b1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b1a:	3728      	adds	r7, #40	@ 0x28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40020010 	.word	0x40020010
 8003b24:	40020028 	.word	0x40020028
 8003b28:	40020040 	.word	0x40020040
 8003b2c:	40020058 	.word	0x40020058
 8003b30:	40020070 	.word	0x40020070
 8003b34:	40020088 	.word	0x40020088
 8003b38:	400200a0 	.word	0x400200a0
 8003b3c:	400200b8 	.word	0x400200b8
 8003b40:	40020410 	.word	0x40020410
 8003b44:	40020428 	.word	0x40020428
 8003b48:	40020440 	.word	0x40020440
 8003b4c:	40020458 	.word	0x40020458
 8003b50:	40020470 	.word	0x40020470
 8003b54:	40020488 	.word	0x40020488
 8003b58:	400204a0 	.word	0x400204a0
 8003b5c:	400204b8 	.word	0x400204b8

08003b60 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a7f      	ldr	r2, [pc, #508]	@ (8003d94 <DMA_SetConfig+0x21c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d072      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a7d      	ldr	r2, [pc, #500]	@ (8003d98 <DMA_SetConfig+0x220>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d06d      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a7c      	ldr	r2, [pc, #496]	@ (8003d9c <DMA_SetConfig+0x224>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d068      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a7a      	ldr	r2, [pc, #488]	@ (8003da0 <DMA_SetConfig+0x228>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d063      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a79      	ldr	r2, [pc, #484]	@ (8003da4 <DMA_SetConfig+0x22c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d05e      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a77      	ldr	r2, [pc, #476]	@ (8003da8 <DMA_SetConfig+0x230>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d059      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a76      	ldr	r2, [pc, #472]	@ (8003dac <DMA_SetConfig+0x234>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d054      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a74      	ldr	r2, [pc, #464]	@ (8003db0 <DMA_SetConfig+0x238>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d04f      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a73      	ldr	r2, [pc, #460]	@ (8003db4 <DMA_SetConfig+0x23c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d04a      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a71      	ldr	r2, [pc, #452]	@ (8003db8 <DMA_SetConfig+0x240>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d045      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a70      	ldr	r2, [pc, #448]	@ (8003dbc <DMA_SetConfig+0x244>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d040      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a6e      	ldr	r2, [pc, #440]	@ (8003dc0 <DMA_SetConfig+0x248>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d03b      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a6d      	ldr	r2, [pc, #436]	@ (8003dc4 <DMA_SetConfig+0x24c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d036      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a6b      	ldr	r2, [pc, #428]	@ (8003dc8 <DMA_SetConfig+0x250>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d031      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6a      	ldr	r2, [pc, #424]	@ (8003dcc <DMA_SetConfig+0x254>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d02c      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a68      	ldr	r2, [pc, #416]	@ (8003dd0 <DMA_SetConfig+0x258>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d027      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a67      	ldr	r2, [pc, #412]	@ (8003dd4 <DMA_SetConfig+0x25c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d022      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a65      	ldr	r2, [pc, #404]	@ (8003dd8 <DMA_SetConfig+0x260>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01d      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a64      	ldr	r2, [pc, #400]	@ (8003ddc <DMA_SetConfig+0x264>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d018      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a62      	ldr	r2, [pc, #392]	@ (8003de0 <DMA_SetConfig+0x268>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a61      	ldr	r2, [pc, #388]	@ (8003de4 <DMA_SetConfig+0x26c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00e      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a5f      	ldr	r2, [pc, #380]	@ (8003de8 <DMA_SetConfig+0x270>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a5e      	ldr	r2, [pc, #376]	@ (8003dec <DMA_SetConfig+0x274>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8003df0 <DMA_SetConfig+0x278>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <DMA_SetConfig+0x10e>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <DMA_SetConfig+0x110>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ca6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a39      	ldr	r2, [pc, #228]	@ (8003d94 <DMA_SetConfig+0x21c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d04a      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a38      	ldr	r2, [pc, #224]	@ (8003d98 <DMA_SetConfig+0x220>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d045      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a36      	ldr	r2, [pc, #216]	@ (8003d9c <DMA_SetConfig+0x224>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d040      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a35      	ldr	r2, [pc, #212]	@ (8003da0 <DMA_SetConfig+0x228>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d03b      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a33      	ldr	r2, [pc, #204]	@ (8003da4 <DMA_SetConfig+0x22c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d036      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a32      	ldr	r2, [pc, #200]	@ (8003da8 <DMA_SetConfig+0x230>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d031      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a30      	ldr	r2, [pc, #192]	@ (8003dac <DMA_SetConfig+0x234>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d02c      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8003db0 <DMA_SetConfig+0x238>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d027      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8003db4 <DMA_SetConfig+0x23c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d022      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2c      	ldr	r2, [pc, #176]	@ (8003db8 <DMA_SetConfig+0x240>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d01d      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2a      	ldr	r2, [pc, #168]	@ (8003dbc <DMA_SetConfig+0x244>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d018      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a29      	ldr	r2, [pc, #164]	@ (8003dc0 <DMA_SetConfig+0x248>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a27      	ldr	r2, [pc, #156]	@ (8003dc4 <DMA_SetConfig+0x24c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00e      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a26      	ldr	r2, [pc, #152]	@ (8003dc8 <DMA_SetConfig+0x250>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d009      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a24      	ldr	r2, [pc, #144]	@ (8003dcc <DMA_SetConfig+0x254>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d004      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a23      	ldr	r2, [pc, #140]	@ (8003dd0 <DMA_SetConfig+0x258>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <DMA_SetConfig+0x1d4>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <DMA_SetConfig+0x1d6>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d059      	beq.n	8003e06 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	223f      	movs	r2, #63	@ 0x3f
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	d138      	bne.n	8003df4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d92:	e086      	b.n	8003ea2 <DMA_SetConfig+0x32a>
 8003d94:	40020010 	.word	0x40020010
 8003d98:	40020028 	.word	0x40020028
 8003d9c:	40020040 	.word	0x40020040
 8003da0:	40020058 	.word	0x40020058
 8003da4:	40020070 	.word	0x40020070
 8003da8:	40020088 	.word	0x40020088
 8003dac:	400200a0 	.word	0x400200a0
 8003db0:	400200b8 	.word	0x400200b8
 8003db4:	40020410 	.word	0x40020410
 8003db8:	40020428 	.word	0x40020428
 8003dbc:	40020440 	.word	0x40020440
 8003dc0:	40020458 	.word	0x40020458
 8003dc4:	40020470 	.word	0x40020470
 8003dc8:	40020488 	.word	0x40020488
 8003dcc:	400204a0 	.word	0x400204a0
 8003dd0:	400204b8 	.word	0x400204b8
 8003dd4:	58025408 	.word	0x58025408
 8003dd8:	5802541c 	.word	0x5802541c
 8003ddc:	58025430 	.word	0x58025430
 8003de0:	58025444 	.word	0x58025444
 8003de4:	58025458 	.word	0x58025458
 8003de8:	5802546c 	.word	0x5802546c
 8003dec:	58025480 	.word	0x58025480
 8003df0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	60da      	str	r2, [r3, #12]
}
 8003e04:	e04d      	b.n	8003ea2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a29      	ldr	r2, [pc, #164]	@ (8003eb0 <DMA_SetConfig+0x338>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d022      	beq.n	8003e56 <DMA_SetConfig+0x2de>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a27      	ldr	r2, [pc, #156]	@ (8003eb4 <DMA_SetConfig+0x33c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01d      	beq.n	8003e56 <DMA_SetConfig+0x2de>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a26      	ldr	r2, [pc, #152]	@ (8003eb8 <DMA_SetConfig+0x340>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d018      	beq.n	8003e56 <DMA_SetConfig+0x2de>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a24      	ldr	r2, [pc, #144]	@ (8003ebc <DMA_SetConfig+0x344>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <DMA_SetConfig+0x2de>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a23      	ldr	r2, [pc, #140]	@ (8003ec0 <DMA_SetConfig+0x348>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <DMA_SetConfig+0x2de>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a21      	ldr	r2, [pc, #132]	@ (8003ec4 <DMA_SetConfig+0x34c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d009      	beq.n	8003e56 <DMA_SetConfig+0x2de>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a20      	ldr	r2, [pc, #128]	@ (8003ec8 <DMA_SetConfig+0x350>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <DMA_SetConfig+0x2de>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1e      	ldr	r2, [pc, #120]	@ (8003ecc <DMA_SetConfig+0x354>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <DMA_SetConfig+0x2e2>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <DMA_SetConfig+0x2e4>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	2201      	movs	r2, #1
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b40      	cmp	r3, #64	@ 0x40
 8003e7e:	d108      	bne.n	8003e92 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	60da      	str	r2, [r3, #12]
}
 8003e90:	e007      	b.n	8003ea2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	60da      	str	r2, [r3, #12]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	58025408 	.word	0x58025408
 8003eb4:	5802541c 	.word	0x5802541c
 8003eb8:	58025430 	.word	0x58025430
 8003ebc:	58025444 	.word	0x58025444
 8003ec0:	58025458 	.word	0x58025458
 8003ec4:	5802546c 	.word	0x5802546c
 8003ec8:	58025480 	.word	0x58025480
 8003ecc:	58025494 	.word	0x58025494

08003ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a42      	ldr	r2, [pc, #264]	@ (8003fe8 <DMA_CalcBaseAndBitshift+0x118>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d04a      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a41      	ldr	r2, [pc, #260]	@ (8003fec <DMA_CalcBaseAndBitshift+0x11c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d045      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ff0 <DMA_CalcBaseAndBitshift+0x120>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d040      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a3e      	ldr	r2, [pc, #248]	@ (8003ff4 <DMA_CalcBaseAndBitshift+0x124>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d03b      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a3c      	ldr	r2, [pc, #240]	@ (8003ff8 <DMA_CalcBaseAndBitshift+0x128>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d036      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003ffc <DMA_CalcBaseAndBitshift+0x12c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d031      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a39      	ldr	r2, [pc, #228]	@ (8004000 <DMA_CalcBaseAndBitshift+0x130>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d02c      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a38      	ldr	r2, [pc, #224]	@ (8004004 <DMA_CalcBaseAndBitshift+0x134>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d027      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a36      	ldr	r2, [pc, #216]	@ (8004008 <DMA_CalcBaseAndBitshift+0x138>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a35      	ldr	r2, [pc, #212]	@ (800400c <DMA_CalcBaseAndBitshift+0x13c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d01d      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a33      	ldr	r2, [pc, #204]	@ (8004010 <DMA_CalcBaseAndBitshift+0x140>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a32      	ldr	r2, [pc, #200]	@ (8004014 <DMA_CalcBaseAndBitshift+0x144>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a30      	ldr	r2, [pc, #192]	@ (8004018 <DMA_CalcBaseAndBitshift+0x148>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800401c <DMA_CalcBaseAndBitshift+0x14c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2d      	ldr	r2, [pc, #180]	@ (8004020 <DMA_CalcBaseAndBitshift+0x150>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2c      	ldr	r2, [pc, #176]	@ (8004024 <DMA_CalcBaseAndBitshift+0x154>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d101      	bne.n	8003f7c <DMA_CalcBaseAndBitshift+0xac>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <DMA_CalcBaseAndBitshift+0xae>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d024      	beq.n	8003fcc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	3b10      	subs	r3, #16
 8003f8a:	4a27      	ldr	r2, [pc, #156]	@ (8004028 <DMA_CalcBaseAndBitshift+0x158>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	4a24      	ldr	r2, [pc, #144]	@ (800402c <DMA_CalcBaseAndBitshift+0x15c>)
 8003f9c:	5cd3      	ldrb	r3, [r2, r3]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d908      	bls.n	8003fbc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004030 <DMA_CalcBaseAndBitshift+0x160>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	1d1a      	adds	r2, r3, #4
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fba:	e00d      	b.n	8003fd8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004030 <DMA_CalcBaseAndBitshift+0x160>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fca:	e005      	b.n	8003fd8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40020010 	.word	0x40020010
 8003fec:	40020028 	.word	0x40020028
 8003ff0:	40020040 	.word	0x40020040
 8003ff4:	40020058 	.word	0x40020058
 8003ff8:	40020070 	.word	0x40020070
 8003ffc:	40020088 	.word	0x40020088
 8004000:	400200a0 	.word	0x400200a0
 8004004:	400200b8 	.word	0x400200b8
 8004008:	40020410 	.word	0x40020410
 800400c:	40020428 	.word	0x40020428
 8004010:	40020440 	.word	0x40020440
 8004014:	40020458 	.word	0x40020458
 8004018:	40020470 	.word	0x40020470
 800401c:	40020488 	.word	0x40020488
 8004020:	400204a0 	.word	0x400204a0
 8004024:	400204b8 	.word	0x400204b8
 8004028:	aaaaaaab 	.word	0xaaaaaaab
 800402c:	0800cfd4 	.word	0x0800cfd4
 8004030:	fffffc00 	.word	0xfffffc00

08004034 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d120      	bne.n	800408a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404c:	2b03      	cmp	r3, #3
 800404e:	d858      	bhi.n	8004102 <DMA_CheckFifoParam+0xce>
 8004050:	a201      	add	r2, pc, #4	@ (adr r2, 8004058 <DMA_CheckFifoParam+0x24>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	08004069 	.word	0x08004069
 800405c:	0800407b 	.word	0x0800407b
 8004060:	08004069 	.word	0x08004069
 8004064:	08004103 	.word	0x08004103
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d048      	beq.n	8004106 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004078:	e045      	b.n	8004106 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004082:	d142      	bne.n	800410a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004088:	e03f      	b.n	800410a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004092:	d123      	bne.n	80040dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	2b03      	cmp	r3, #3
 800409a:	d838      	bhi.n	800410e <DMA_CheckFifoParam+0xda>
 800409c:	a201      	add	r2, pc, #4	@ (adr r2, 80040a4 <DMA_CheckFifoParam+0x70>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040bb 	.word	0x080040bb
 80040ac:	080040b5 	.word	0x080040b5
 80040b0:	080040cd 	.word	0x080040cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
        break;
 80040b8:	e030      	b.n	800411c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d025      	beq.n	8004112 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040ca:	e022      	b.n	8004112 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040d4:	d11f      	bne.n	8004116 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040da:	e01c      	b.n	8004116 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d902      	bls.n	80040ea <DMA_CheckFifoParam+0xb6>
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d003      	beq.n	80040f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040e8:	e018      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	73fb      	strb	r3, [r7, #15]
        break;
 80040ee:	e015      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00e      	beq.n	800411a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
    break;
 8004100:	e00b      	b.n	800411a <DMA_CheckFifoParam+0xe6>
        break;
 8004102:	bf00      	nop
 8004104:	e00a      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        break;
 8004106:	bf00      	nop
 8004108:	e008      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        break;
 800410a:	bf00      	nop
 800410c:	e006      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        break;
 800410e:	bf00      	nop
 8004110:	e004      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        break;
 8004112:	bf00      	nop
 8004114:	e002      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <DMA_CheckFifoParam+0xe8>
    break;
 800411a:	bf00      	nop
    }
  }

  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop

0800412c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a38      	ldr	r2, [pc, #224]	@ (8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a36      	ldr	r2, [pc, #216]	@ (8004224 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a35      	ldr	r2, [pc, #212]	@ (8004228 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a33      	ldr	r2, [pc, #204]	@ (800422c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a32      	ldr	r2, [pc, #200]	@ (8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a30      	ldr	r2, [pc, #192]	@ (8004234 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2f      	ldr	r2, [pc, #188]	@ (8004238 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a2d      	ldr	r2, [pc, #180]	@ (800423c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800418e:	2300      	movs	r3, #0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01a      	beq.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	3b08      	subs	r3, #8
 800419c:	4a28      	ldr	r2, [pc, #160]	@ (8004240 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4b26      	ldr	r3, [pc, #152]	@ (8004244 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	461a      	mov	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a24      	ldr	r2, [pc, #144]	@ (8004248 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80041b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2201      	movs	r2, #1
 80041c2:	409a      	lsls	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80041c8:	e024      	b.n	8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3b10      	subs	r3, #16
 80041d2:	4a1e      	ldr	r2, [pc, #120]	@ (800424c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4a1c      	ldr	r2, [pc, #112]	@ (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d806      	bhi.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d902      	bls.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3308      	adds	r3, #8
 80041f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4b18      	ldr	r3, [pc, #96]	@ (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a16      	ldr	r2, [pc, #88]	@ (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004204:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2201      	movs	r2, #1
 800420e:	409a      	lsls	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	58025408 	.word	0x58025408
 8004224:	5802541c 	.word	0x5802541c
 8004228:	58025430 	.word	0x58025430
 800422c:	58025444 	.word	0x58025444
 8004230:	58025458 	.word	0x58025458
 8004234:	5802546c 	.word	0x5802546c
 8004238:	58025480 	.word	0x58025480
 800423c:	58025494 	.word	0x58025494
 8004240:	cccccccd 	.word	0xcccccccd
 8004244:	16009600 	.word	0x16009600
 8004248:	58025880 	.word	0x58025880
 800424c:	aaaaaaab 	.word	0xaaaaaaab
 8004250:	400204b8 	.word	0x400204b8
 8004254:	4002040f 	.word	0x4002040f
 8004258:	10008200 	.word	0x10008200
 800425c:	40020880 	.word	0x40020880

08004260 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d04a      	beq.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d847      	bhi.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a25      	ldr	r2, [pc, #148]	@ (8004318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d022      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a24      	ldr	r2, [pc, #144]	@ (800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d01d      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a22      	ldr	r2, [pc, #136]	@ (8004320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d018      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a21      	ldr	r2, [pc, #132]	@ (8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1e      	ldr	r2, [pc, #120]	@ (800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d009      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042d0:	2300      	movs	r3, #0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4b17      	ldr	r3, [pc, #92]	@ (8004338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	461a      	mov	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a15      	ldr	r2, [pc, #84]	@ (800433c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80042ea:	e009      	b.n	8004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4b14      	ldr	r3, [pc, #80]	@ (8004340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a11      	ldr	r2, [pc, #68]	@ (8004344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3b01      	subs	r3, #1
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	58025408 	.word	0x58025408
 800431c:	5802541c 	.word	0x5802541c
 8004320:	58025430 	.word	0x58025430
 8004324:	58025444 	.word	0x58025444
 8004328:	58025458 	.word	0x58025458
 800432c:	5802546c 	.word	0x5802546c
 8004330:	58025480 	.word	0x58025480
 8004334:	58025494 	.word	0x58025494
 8004338:	1600963f 	.word	0x1600963f
 800433c:	58025940 	.word	0x58025940
 8004340:	1000823f 	.word	0x1000823f
 8004344:	40020940 	.word	0x40020940

08004348 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	7a1b      	ldrb	r3, [r3, #8]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d154      	bne.n	800440c <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a4b      	ldr	r2, [pc, #300]	@ (8004494 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d049      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a49      	ldr	r2, [pc, #292]	@ (8004498 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d044      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a48      	ldr	r2, [pc, #288]	@ (800449c <HAL_DMAEx_ConfigMuxSync+0x154>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d03f      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a46      	ldr	r2, [pc, #280]	@ (80044a0 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d03a      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a45      	ldr	r2, [pc, #276]	@ (80044a4 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d035      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a43      	ldr	r2, [pc, #268]	@ (80044a8 <HAL_DMAEx_ConfigMuxSync+0x160>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d030      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a42      	ldr	r2, [pc, #264]	@ (80044ac <HAL_DMAEx_ConfigMuxSync+0x164>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d02b      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a40      	ldr	r2, [pc, #256]	@ (80044b0 <HAL_DMAEx_ConfigMuxSync+0x168>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d026      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a3f      	ldr	r2, [pc, #252]	@ (80044b4 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d021      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3d      	ldr	r2, [pc, #244]	@ (80044b8 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01c      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3c      	ldr	r2, [pc, #240]	@ (80044bc <HAL_DMAEx_ConfigMuxSync+0x174>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d017      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3a      	ldr	r2, [pc, #232]	@ (80044c0 <HAL_DMAEx_ConfigMuxSync+0x178>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d012      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a39      	ldr	r2, [pc, #228]	@ (80044c4 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00d      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a37      	ldr	r2, [pc, #220]	@ (80044c8 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d008      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a36      	ldr	r2, [pc, #216]	@ (80044cc <HAL_DMAEx_ConfigMuxSync+0x184>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a34      	ldr	r2, [pc, #208]	@ (80044d0 <HAL_DMAEx_ConfigMuxSync+0x188>)
 80043fe:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d131      	bne.n	800447c <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_DMAEx_ConfigMuxSync+0xde>
 8004422:	2302      	movs	r3, #2
 8004424:	e02f      	b.n	8004486 <HAL_DMAEx_ConfigMuxSync+0x13e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004438:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 800443c:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b2d9      	uxtb	r1, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	061a      	lsls	r2, r3, #24
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	3b01      	subs	r3, #1
 8004450:	04db      	lsls	r3, r3, #19
 8004452:	431a      	orrs	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	431a      	orrs	r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	7a1b      	ldrb	r3, [r3, #8]
 800445c:	041b      	lsls	r3, r3, #16
 800445e:	431a      	orrs	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	7a5b      	ldrb	r3, [r3, #9]
 8004464:	025b      	lsls	r3, r3, #9
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	e004      	b.n	8004486 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004482:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40020010 	.word	0x40020010
 8004498:	40020028 	.word	0x40020028
 800449c:	40020040 	.word	0x40020040
 80044a0:	40020058 	.word	0x40020058
 80044a4:	40020070 	.word	0x40020070
 80044a8:	40020088 	.word	0x40020088
 80044ac:	400200a0 	.word	0x400200a0
 80044b0:	400200b8 	.word	0x400200b8
 80044b4:	40020410 	.word	0x40020410
 80044b8:	40020428 	.word	0x40020428
 80044bc:	40020440 	.word	0x40020440
 80044c0:	40020458 	.word	0x40020458
 80044c4:	40020470 	.word	0x40020470
 80044c8:	40020488 	.word	0x40020488
 80044cc:	400204a0 	.word	0x400204a0
 80044d0:	400204b8 	.word	0x400204b8

080044d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b089      	sub	sp, #36	@ 0x24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044e2:	4b89      	ldr	r3, [pc, #548]	@ (8004708 <HAL_GPIO_Init+0x234>)
 80044e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044e6:	e194      	b.n	8004812 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	2101      	movs	r1, #1
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	fa01 f303 	lsl.w	r3, r1, r3
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8186 	beq.w	800480c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d005      	beq.n	8004518 <HAL_GPIO_Init+0x44>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d130      	bne.n	800457a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	2203      	movs	r2, #3
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800454e:	2201      	movs	r2, #1
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4013      	ands	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 0201 	and.w	r2, r3, #1
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b03      	cmp	r3, #3
 8004584:	d017      	beq.n	80045b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	2203      	movs	r2, #3
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d123      	bne.n	800460a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	08da      	lsrs	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3208      	adds	r2, #8
 80045ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	220f      	movs	r2, #15
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	08da      	lsrs	r2, r3, #3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3208      	adds	r2, #8
 8004604:	69b9      	ldr	r1, [r7, #24]
 8004606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	2203      	movs	r2, #3
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0203 	and.w	r2, r3, #3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80e0 	beq.w	800480c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464c:	4b2f      	ldr	r3, [pc, #188]	@ (800470c <HAL_GPIO_Init+0x238>)
 800464e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004652:	4a2e      	ldr	r2, [pc, #184]	@ (800470c <HAL_GPIO_Init+0x238>)
 8004654:	f043 0302 	orr.w	r3, r3, #2
 8004658:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800465c:	4b2b      	ldr	r3, [pc, #172]	@ (800470c <HAL_GPIO_Init+0x238>)
 800465e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800466a:	4a29      	ldr	r2, [pc, #164]	@ (8004710 <HAL_GPIO_Init+0x23c>)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a20      	ldr	r2, [pc, #128]	@ (8004714 <HAL_GPIO_Init+0x240>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d052      	beq.n	800473c <HAL_GPIO_Init+0x268>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1f      	ldr	r2, [pc, #124]	@ (8004718 <HAL_GPIO_Init+0x244>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <HAL_GPIO_Init+0x22e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1e      	ldr	r2, [pc, #120]	@ (800471c <HAL_GPIO_Init+0x248>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d02b      	beq.n	80046fe <HAL_GPIO_Init+0x22a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <HAL_GPIO_Init+0x24c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d025      	beq.n	80046fa <HAL_GPIO_Init+0x226>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004724 <HAL_GPIO_Init+0x250>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01f      	beq.n	80046f6 <HAL_GPIO_Init+0x222>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <HAL_GPIO_Init+0x254>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d019      	beq.n	80046f2 <HAL_GPIO_Init+0x21e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1a      	ldr	r2, [pc, #104]	@ (800472c <HAL_GPIO_Init+0x258>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_GPIO_Init+0x21a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <HAL_GPIO_Init+0x25c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00d      	beq.n	80046ea <HAL_GPIO_Init+0x216>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <HAL_GPIO_Init+0x260>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <HAL_GPIO_Init+0x212>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <HAL_GPIO_Init+0x264>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <HAL_GPIO_Init+0x20e>
 80046de:	2309      	movs	r3, #9
 80046e0:	e02d      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046e2:	230a      	movs	r3, #10
 80046e4:	e02b      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046e6:	2308      	movs	r3, #8
 80046e8:	e029      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046ea:	2307      	movs	r3, #7
 80046ec:	e027      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046ee:	2306      	movs	r3, #6
 80046f0:	e025      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046f2:	2305      	movs	r3, #5
 80046f4:	e023      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046f6:	2304      	movs	r3, #4
 80046f8:	e021      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046fa:	2303      	movs	r3, #3
 80046fc:	e01f      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046fe:	2302      	movs	r3, #2
 8004700:	e01d      	b.n	800473e <HAL_GPIO_Init+0x26a>
 8004702:	2301      	movs	r3, #1
 8004704:	e01b      	b.n	800473e <HAL_GPIO_Init+0x26a>
 8004706:	bf00      	nop
 8004708:	58000080 	.word	0x58000080
 800470c:	58024400 	.word	0x58024400
 8004710:	58000400 	.word	0x58000400
 8004714:	58020000 	.word	0x58020000
 8004718:	58020400 	.word	0x58020400
 800471c:	58020800 	.word	0x58020800
 8004720:	58020c00 	.word	0x58020c00
 8004724:	58021000 	.word	0x58021000
 8004728:	58021400 	.word	0x58021400
 800472c:	58021800 	.word	0x58021800
 8004730:	58021c00 	.word	0x58021c00
 8004734:	58022000 	.word	0x58022000
 8004738:	58022400 	.word	0x58022400
 800473c:	2300      	movs	r3, #0
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	f002 0203 	and.w	r2, r2, #3
 8004744:	0092      	lsls	r2, r2, #2
 8004746:	4093      	lsls	r3, r2
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800474e:	4938      	ldr	r1, [pc, #224]	@ (8004830 <HAL_GPIO_Init+0x35c>)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	3302      	adds	r3, #2
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800475c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	43db      	mvns	r3, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4013      	ands	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004782:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800478a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80047b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	43db      	mvns	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4013      	ands	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	3301      	adds	r3, #1
 8004810:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	f47f ae63 	bne.w	80044e8 <HAL_GPIO_Init+0x14>
  }
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	3724      	adds	r7, #36	@ 0x24
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	58000400 	.word	0x58000400

08004834 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800483c:	4a08      	ldr	r2, [pc, #32]	@ (8004860 <HAL_HSEM_FastTake+0x2c>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3320      	adds	r3, #32
 8004842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004846:	4a07      	ldr	r2, [pc, #28]	@ (8004864 <HAL_HSEM_FastTake+0x30>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	e000      	b.n	8004852 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
}
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	58026400 	.word	0x58026400
 8004864:	80000300 	.word	0x80000300

08004868 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004872:	4906      	ldr	r1, [pc, #24]	@ (800488c <HAL_HSEM_Release+0x24>)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	58026400 	.word	0x58026400

08004890 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004898:	4b29      	ldr	r3, [pc, #164]	@ (8004940 <HAL_PWREx_ConfigSupply+0xb0>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	2b06      	cmp	r3, #6
 80048a2:	d00a      	beq.n	80048ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048a4:	4b26      	ldr	r3, [pc, #152]	@ (8004940 <HAL_PWREx_ConfigSupply+0xb0>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d001      	beq.n	80048b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e040      	b.n	8004938 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e03e      	b.n	8004938 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048ba:	4b21      	ldr	r3, [pc, #132]	@ (8004940 <HAL_PWREx_ConfigSupply+0xb0>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80048c2:	491f      	ldr	r1, [pc, #124]	@ (8004940 <HAL_PWREx_ConfigSupply+0xb0>)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048ca:	f7fc fd31 	bl	8001330 <HAL_GetTick>
 80048ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048d0:	e009      	b.n	80048e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048d2:	f7fc fd2d 	bl	8001330 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048e0:	d901      	bls.n	80048e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e028      	b.n	8004938 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048e6:	4b16      	ldr	r3, [pc, #88]	@ (8004940 <HAL_PWREx_ConfigSupply+0xb0>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048f2:	d1ee      	bne.n	80048d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b1e      	cmp	r3, #30
 80048f8:	d008      	beq.n	800490c <HAL_PWREx_ConfigSupply+0x7c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80048fe:	d005      	beq.n	800490c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b1d      	cmp	r3, #29
 8004904:	d002      	beq.n	800490c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b2d      	cmp	r3, #45	@ 0x2d
 800490a:	d114      	bne.n	8004936 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800490c:	f7fc fd10 	bl	8001330 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004912:	e009      	b.n	8004928 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004914:	f7fc fd0c 	bl	8001330 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004922:	d901      	bls.n	8004928 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e007      	b.n	8004938 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004928:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <HAL_PWREx_ConfigSupply+0xb0>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004934:	d1ee      	bne.n	8004914 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	58024800 	.word	0x58024800

08004944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08c      	sub	sp, #48	@ 0x30
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f000 bc48 	b.w	80051e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 8088 	beq.w	8004a76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004966:	4b99      	ldr	r3, [pc, #612]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800496e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004970:	4b96      	ldr	r3, [pc, #600]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004978:	2b10      	cmp	r3, #16
 800497a:	d007      	beq.n	800498c <HAL_RCC_OscConfig+0x48>
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497e:	2b18      	cmp	r3, #24
 8004980:	d111      	bne.n	80049a6 <HAL_RCC_OscConfig+0x62>
 8004982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d10c      	bne.n	80049a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498c:	4b8f      	ldr	r3, [pc, #572]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d06d      	beq.n	8004a74 <HAL_RCC_OscConfig+0x130>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d169      	bne.n	8004a74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f000 bc21 	b.w	80051e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x7a>
 80049b0:	4b86      	ldr	r3, [pc, #536]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a85      	ldr	r2, [pc, #532]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 80049b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e02e      	b.n	8004a1c <HAL_RCC_OscConfig+0xd8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x9c>
 80049c6:	4b81      	ldr	r3, [pc, #516]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a80      	ldr	r2, [pc, #512]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 80049cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	4b7e      	ldr	r3, [pc, #504]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7d      	ldr	r2, [pc, #500]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 80049d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	e01d      	b.n	8004a1c <HAL_RCC_OscConfig+0xd8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCC_OscConfig+0xc0>
 80049ea:	4b78      	ldr	r3, [pc, #480]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a77      	ldr	r2, [pc, #476]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 80049f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b75      	ldr	r3, [pc, #468]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a74      	ldr	r2, [pc, #464]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e00b      	b.n	8004a1c <HAL_RCC_OscConfig+0xd8>
 8004a04:	4b71      	ldr	r3, [pc, #452]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a70      	ldr	r2, [pc, #448]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b6e      	ldr	r3, [pc, #440]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a6d      	ldr	r2, [pc, #436]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d013      	beq.n	8004a4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fc fc84 	bl	8001330 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fc fc80 	bl	8001330 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	@ 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e3d4      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a3e:	4b63      	ldr	r3, [pc, #396]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0xe8>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fc fc70 	bl	8001330 <HAL_GetTick>
 8004a50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fc fc6c 	bl	8001330 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	@ 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e3c0      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a66:	4b59      	ldr	r3, [pc, #356]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x110>
 8004a72:	e000      	b.n	8004a76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80ca 	beq.w	8004c18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a84:	4b51      	ldr	r3, [pc, #324]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_RCC_OscConfig+0x166>
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	2b18      	cmp	r3, #24
 8004a9e:	d156      	bne.n	8004b4e <HAL_RCC_OscConfig+0x20a>
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d151      	bne.n	8004b4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aaa:	4b48      	ldr	r3, [pc, #288]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x17e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e392      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ac2:	4b42      	ldr	r3, [pc, #264]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 0219 	bic.w	r2, r3, #25
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	493f      	ldr	r1, [pc, #252]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fc fc2c 	bl	8001330 <HAL_GetTick>
 8004ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004adc:	f7fc fc28 	bl	8001330 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e37c      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aee:	4b37      	ldr	r3, [pc, #220]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afa:	f7fc fc49 	bl	8001390 <HAL_GetREVID>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d817      	bhi.n	8004b38 <HAL_RCC_OscConfig+0x1f4>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b40      	cmp	r3, #64	@ 0x40
 8004b0e:	d108      	bne.n	8004b22 <HAL_RCC_OscConfig+0x1de>
 8004b10:	4b2e      	ldr	r3, [pc, #184]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b18:	4a2c      	ldr	r2, [pc, #176]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b20:	e07a      	b.n	8004c18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b22:	4b2a      	ldr	r3, [pc, #168]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	031b      	lsls	r3, r3, #12
 8004b30:	4926      	ldr	r1, [pc, #152]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b36:	e06f      	b.n	8004c18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	4b24      	ldr	r3, [pc, #144]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	4921      	ldr	r1, [pc, #132]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b4c:	e064      	b.n	8004c18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d047      	beq.n	8004be6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b56:	4b1d      	ldr	r3, [pc, #116]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 0219 	bic.w	r2, r3, #25
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	491a      	ldr	r1, [pc, #104]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fc fbe2 	bl	8001330 <HAL_GetTick>
 8004b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b70:	f7fc fbde 	bl	8001330 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e332      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b82:	4b12      	ldr	r3, [pc, #72]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8e:	f7fc fbff 	bl	8001390 <HAL_GetREVID>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d819      	bhi.n	8004bd0 <HAL_RCC_OscConfig+0x28c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b40      	cmp	r3, #64	@ 0x40
 8004ba2:	d108      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x272>
 8004ba4:	4b09      	ldr	r3, [pc, #36]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004bac:	4a07      	ldr	r2, [pc, #28]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb2:	6053      	str	r3, [r2, #4]
 8004bb4:	e030      	b.n	8004c18 <HAL_RCC_OscConfig+0x2d4>
 8004bb6:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	031b      	lsls	r3, r3, #12
 8004bc4:	4901      	ldr	r1, [pc, #4]	@ (8004bcc <HAL_RCC_OscConfig+0x288>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	604b      	str	r3, [r1, #4]
 8004bca:	e025      	b.n	8004c18 <HAL_RCC_OscConfig+0x2d4>
 8004bcc:	58024400 	.word	0x58024400
 8004bd0:	4b9a      	ldr	r3, [pc, #616]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	4997      	ldr	r1, [pc, #604]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
 8004be4:	e018      	b.n	8004c18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be6:	4b95      	ldr	r3, [pc, #596]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a94      	ldr	r2, [pc, #592]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fc fb9d 	bl	8001330 <HAL_GetTick>
 8004bf6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfa:	f7fc fb99 	bl	8001330 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e2ed      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c0c:	4b8b      	ldr	r3, [pc, #556]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f0      	bne.n	8004bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80a9 	beq.w	8004d78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c26:	4b85      	ldr	r3, [pc, #532]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c30:	4b82      	ldr	r3, [pc, #520]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d007      	beq.n	8004c4c <HAL_RCC_OscConfig+0x308>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b18      	cmp	r3, #24
 8004c40:	d13a      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x374>
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d135      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c4c:	4b7b      	ldr	r3, [pc, #492]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <HAL_RCC_OscConfig+0x320>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	2b80      	cmp	r3, #128	@ 0x80
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e2c1      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c64:	f7fc fb94 	bl	8001390 <HAL_GetREVID>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d817      	bhi.n	8004ca2 <HAL_RCC_OscConfig+0x35e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d108      	bne.n	8004c8c <HAL_RCC_OscConfig+0x348>
 8004c7a:	4b70      	ldr	r3, [pc, #448]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c82:	4a6e      	ldr	r2, [pc, #440]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004c84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c8a:	e075      	b.n	8004d78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	069b      	lsls	r3, r3, #26
 8004c9a:	4968      	ldr	r1, [pc, #416]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ca0:	e06a      	b.n	8004d78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ca2:	4b66      	ldr	r3, [pc, #408]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	061b      	lsls	r3, r3, #24
 8004cb0:	4962      	ldr	r1, [pc, #392]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cb6:	e05f      	b.n	8004d78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d042      	beq.n	8004d46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a5d      	ldr	r2, [pc, #372]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fc fb30 	bl	8001330 <HAL_GetTick>
 8004cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004cd4:	f7fc fb2c 	bl	8001330 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e280      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ce6:	4b55      	ldr	r3, [pc, #340]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cf2:	f7fc fb4d 	bl	8001390 <HAL_GetREVID>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d817      	bhi.n	8004d30 <HAL_RCC_OscConfig+0x3ec>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d108      	bne.n	8004d1a <HAL_RCC_OscConfig+0x3d6>
 8004d08:	4b4c      	ldr	r3, [pc, #304]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d10:	4a4a      	ldr	r2, [pc, #296]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d16:	6053      	str	r3, [r2, #4]
 8004d18:	e02e      	b.n	8004d78 <HAL_RCC_OscConfig+0x434>
 8004d1a:	4b48      	ldr	r3, [pc, #288]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	069b      	lsls	r3, r3, #26
 8004d28:	4944      	ldr	r1, [pc, #272]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	604b      	str	r3, [r1, #4]
 8004d2e:	e023      	b.n	8004d78 <HAL_RCC_OscConfig+0x434>
 8004d30:	4b42      	ldr	r3, [pc, #264]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	061b      	lsls	r3, r3, #24
 8004d3e:	493f      	ldr	r1, [pc, #252]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60cb      	str	r3, [r1, #12]
 8004d44:	e018      	b.n	8004d78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d46:	4b3d      	ldr	r3, [pc, #244]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fc faed 	bl	8001330 <HAL_GetTick>
 8004d56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d5a:	f7fc fae9 	bl	8001330 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e23d      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d6c:	4b33      	ldr	r3, [pc, #204]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f0      	bne.n	8004d5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d036      	beq.n	8004df2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d019      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d90:	4a2a      	ldr	r2, [pc, #168]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fc faca 	bl	8001330 <HAL_GetTick>
 8004d9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da0:	f7fc fac6 	bl	8001330 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e21a      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004db2:	4b22      	ldr	r3, [pc, #136]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x45c>
 8004dbe:	e018      	b.n	8004df2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fc fab0 	bl	8001330 <HAL_GetTick>
 8004dd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd4:	f7fc faac 	bl	8001330 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e200      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004de6:	4b15      	ldr	r3, [pc, #84]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d039      	beq.n	8004e72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01c      	beq.n	8004e40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e06:	4b0d      	ldr	r3, [pc, #52]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004e0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e12:	f7fc fa8d 	bl	8001330 <HAL_GetTick>
 8004e16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e1a:	f7fc fa89 	bl	8001330 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e1dd      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e2c:	4b03      	ldr	r3, [pc, #12]	@ (8004e3c <HAL_RCC_OscConfig+0x4f8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x4d6>
 8004e38:	e01b      	b.n	8004e72 <HAL_RCC_OscConfig+0x52e>
 8004e3a:	bf00      	nop
 8004e3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e40:	4b9b      	ldr	r3, [pc, #620]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a9a      	ldr	r2, [pc, #616]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004e46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e4c:	f7fc fa70 	bl	8001330 <HAL_GetTick>
 8004e50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e54:	f7fc fa6c 	bl	8001330 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e1c0      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e66:	4b92      	ldr	r3, [pc, #584]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8081 	beq.w	8004f82 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e80:	4b8c      	ldr	r3, [pc, #560]	@ (80050b4 <HAL_RCC_OscConfig+0x770>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a8b      	ldr	r2, [pc, #556]	@ (80050b4 <HAL_RCC_OscConfig+0x770>)
 8004e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e8c:	f7fc fa50 	bl	8001330 <HAL_GetTick>
 8004e90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e94:	f7fc fa4c 	bl	8001330 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e1a0      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ea6:	4b83      	ldr	r3, [pc, #524]	@ (80050b4 <HAL_RCC_OscConfig+0x770>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d106      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x584>
 8004eba:	4b7d      	ldr	r3, [pc, #500]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebe:	4a7c      	ldr	r2, [pc, #496]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec6:	e02d      	b.n	8004f24 <HAL_RCC_OscConfig+0x5e0>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10c      	bne.n	8004eea <HAL_RCC_OscConfig+0x5a6>
 8004ed0:	4b77      	ldr	r3, [pc, #476]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed4:	4a76      	ldr	r2, [pc, #472]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004edc:	4b74      	ldr	r3, [pc, #464]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee0:	4a73      	ldr	r2, [pc, #460]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee8:	e01c      	b.n	8004f24 <HAL_RCC_OscConfig+0x5e0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0x5c8>
 8004ef2:	4b6f      	ldr	r3, [pc, #444]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef6:	4a6e      	ldr	r2, [pc, #440]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004efe:	4b6c      	ldr	r3, [pc, #432]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f02:	4a6b      	ldr	r2, [pc, #428]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f0a:	e00b      	b.n	8004f24 <HAL_RCC_OscConfig+0x5e0>
 8004f0c:	4b68      	ldr	r3, [pc, #416]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f10:	4a67      	ldr	r2, [pc, #412]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f18:	4b65      	ldr	r3, [pc, #404]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1c:	4a64      	ldr	r2, [pc, #400]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004f1e:	f023 0304 	bic.w	r3, r3, #4
 8004f22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d015      	beq.n	8004f58 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2c:	f7fc fa00 	bl	8001330 <HAL_GetTick>
 8004f30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f34:	f7fc f9fc 	bl	8001330 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e14e      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f4a:	4b59      	ldr	r3, [pc, #356]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ee      	beq.n	8004f34 <HAL_RCC_OscConfig+0x5f0>
 8004f56:	e014      	b.n	8004f82 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fc f9ea 	bl	8001330 <HAL_GetTick>
 8004f5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fc f9e6 	bl	8001330 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e138      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f76:	4b4e      	ldr	r3, [pc, #312]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1ee      	bne.n	8004f60 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 812d 	beq.w	80051e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f8c:	4b48      	ldr	r3, [pc, #288]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f94:	2b18      	cmp	r3, #24
 8004f96:	f000 80bd 	beq.w	8005114 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	f040 809e 	bne.w	80050e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa4:	4b42      	ldr	r3, [pc, #264]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a41      	ldr	r2, [pc, #260]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fc f9be 	bl	8001330 <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fc f9ba 	bl	8001330 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e10e      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fca:	4b39      	ldr	r3, [pc, #228]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fd6:	4b36      	ldr	r3, [pc, #216]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fda:	4b37      	ldr	r3, [pc, #220]	@ (80050b8 <HAL_RCC_OscConfig+0x774>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fe6:	0112      	lsls	r2, r2, #4
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	4931      	ldr	r1, [pc, #196]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffe:	3b01      	subs	r3, #1
 8005000:	025b      	lsls	r3, r3, #9
 8005002:	b29b      	uxth	r3, r3
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500a:	3b01      	subs	r3, #1
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005018:	3b01      	subs	r3, #1
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005020:	4923      	ldr	r1, [pc, #140]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005022:	4313      	orrs	r3, r2
 8005024:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005026:	4b22      	ldr	r3, [pc, #136]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	4a21      	ldr	r2, [pc, #132]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005032:	4b1f      	ldr	r3, [pc, #124]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005036:	4b21      	ldr	r3, [pc, #132]	@ (80050bc <HAL_RCC_OscConfig+0x778>)
 8005038:	4013      	ands	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800503e:	00d2      	lsls	r2, r2, #3
 8005040:	491b      	ldr	r1, [pc, #108]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005042:	4313      	orrs	r3, r2
 8005044:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005046:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	f023 020c 	bic.w	r2, r3, #12
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	4917      	ldr	r1, [pc, #92]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005054:	4313      	orrs	r3, r2
 8005056:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005058:	4b15      	ldr	r3, [pc, #84]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	f023 0202 	bic.w	r2, r3, #2
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005064:	4912      	ldr	r1, [pc, #72]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005066:	4313      	orrs	r3, r2
 8005068:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800506a:	4b11      	ldr	r3, [pc, #68]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	4a10      	ldr	r2, [pc, #64]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005076:	4b0e      	ldr	r3, [pc, #56]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	4a0d      	ldr	r2, [pc, #52]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 800507c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005082:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	4a0a      	ldr	r2, [pc, #40]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800508c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800508e:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	4a07      	ldr	r2, [pc, #28]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800509a:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a04      	ldr	r2, [pc, #16]	@ (80050b0 <HAL_RCC_OscConfig+0x76c>)
 80050a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fc f943 	bl	8001330 <HAL_GetTick>
 80050aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050ac:	e011      	b.n	80050d2 <HAL_RCC_OscConfig+0x78e>
 80050ae:	bf00      	nop
 80050b0:	58024400 	.word	0x58024400
 80050b4:	58024800 	.word	0x58024800
 80050b8:	fffffc0c 	.word	0xfffffc0c
 80050bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c0:	f7fc f936 	bl	8001330 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e08a      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050d2:	4b47      	ldr	r3, [pc, #284]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0x77c>
 80050de:	e082      	b.n	80051e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e0:	4b43      	ldr	r3, [pc, #268]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a42      	ldr	r2, [pc, #264]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 80050e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fc f920 	bl	8001330 <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f4:	f7fc f91c 	bl	8001330 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e070      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005106:	4b3a      	ldr	r3, [pc, #232]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x7b0>
 8005112:	e068      	b.n	80051e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005114:	4b36      	ldr	r3, [pc, #216]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005118:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800511a:	4b35      	ldr	r3, [pc, #212]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005124:	2b01      	cmp	r3, #1
 8005126:	d031      	beq.n	800518c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f003 0203 	and.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d12a      	bne.n	800518c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	091b      	lsrs	r3, r3, #4
 800513a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005142:	429a      	cmp	r2, r3
 8005144:	d122      	bne.n	800518c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005152:	429a      	cmp	r2, r3
 8005154:	d11a      	bne.n	800518c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	0a5b      	lsrs	r3, r3, #9
 800515a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005162:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d111      	bne.n	800518c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	0c1b      	lsrs	r3, r3, #16
 800516c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d108      	bne.n	800518c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	0e1b      	lsrs	r3, r3, #24
 800517e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005186:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e02b      	b.n	80051e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005190:	4b17      	ldr	r3, [pc, #92]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 8005192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005194:	08db      	lsrs	r3, r3, #3
 8005196:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800519a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d01f      	beq.n	80051e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80051a6:	4b12      	ldr	r3, [pc, #72]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 80051a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051aa:	4a11      	ldr	r2, [pc, #68]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051b2:	f7fc f8bd 	bl	8001330 <HAL_GetTick>
 80051b6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80051b8:	bf00      	nop
 80051ba:	f7fc f8b9 	bl	8001330 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d0f9      	beq.n	80051ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051c6:	4b0a      	ldr	r3, [pc, #40]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 80051c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051ca:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <HAL_RCC_OscConfig+0x8b0>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051d2:	00d2      	lsls	r2, r2, #3
 80051d4:	4906      	ldr	r1, [pc, #24]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80051da:	4b05      	ldr	r3, [pc, #20]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051de:	4a04      	ldr	r2, [pc, #16]	@ (80051f0 <HAL_RCC_OscConfig+0x8ac>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3730      	adds	r7, #48	@ 0x30
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	58024400 	.word	0x58024400
 80051f4:	ffff0007 	.word	0xffff0007

080051f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e19c      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800520c:	4b8a      	ldr	r3, [pc, #552]	@ (8005438 <HAL_RCC_ClockConfig+0x240>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d910      	bls.n	800523c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b87      	ldr	r3, [pc, #540]	@ (8005438 <HAL_RCC_ClockConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 020f 	bic.w	r2, r3, #15
 8005222:	4985      	ldr	r1, [pc, #532]	@ (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b83      	ldr	r3, [pc, #524]	@ (8005438 <HAL_RCC_ClockConfig+0x240>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e184      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d010      	beq.n	800526a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	4b7b      	ldr	r3, [pc, #492]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005254:	429a      	cmp	r2, r3
 8005256:	d908      	bls.n	800526a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005258:	4b78      	ldr	r3, [pc, #480]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	4975      	ldr	r1, [pc, #468]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 8005266:	4313      	orrs	r3, r2
 8005268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d010      	beq.n	8005298 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	4b70      	ldr	r3, [pc, #448]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005282:	429a      	cmp	r2, r3
 8005284:	d908      	bls.n	8005298 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005286:	4b6d      	ldr	r3, [pc, #436]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	496a      	ldr	r1, [pc, #424]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 8005294:	4313      	orrs	r3, r2
 8005296:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d010      	beq.n	80052c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	4b64      	ldr	r3, [pc, #400]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d908      	bls.n	80052c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052b4:	4b61      	ldr	r3, [pc, #388]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	495e      	ldr	r1, [pc, #376]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d010      	beq.n	80052f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	4b59      	ldr	r3, [pc, #356]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052de:	429a      	cmp	r2, r3
 80052e0:	d908      	bls.n	80052f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052e2:	4b56      	ldr	r3, [pc, #344]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	4953      	ldr	r1, [pc, #332]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d010      	beq.n	8005322 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	4b4d      	ldr	r3, [pc, #308]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	429a      	cmp	r2, r3
 800530e:	d908      	bls.n	8005322 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005310:	4b4a      	ldr	r3, [pc, #296]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f023 020f 	bic.w	r2, r3, #15
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4947      	ldr	r1, [pc, #284]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 800531e:	4313      	orrs	r3, r2
 8005320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d055      	beq.n	80053da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800532e:	4b43      	ldr	r3, [pc, #268]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4940      	ldr	r1, [pc, #256]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 800533c:	4313      	orrs	r3, r2
 800533e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d107      	bne.n	8005358 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005348:	4b3c      	ldr	r3, [pc, #240]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d121      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0f6      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d107      	bne.n	8005370 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005360:	4b36      	ldr	r3, [pc, #216]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d115      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0ea      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d107      	bne.n	8005388 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005378:	4b30      	ldr	r3, [pc, #192]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0de      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005388:	4b2c      	ldr	r3, [pc, #176]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0d6      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005398:	4b28      	ldr	r3, [pc, #160]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f023 0207 	bic.w	r2, r3, #7
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4925      	ldr	r1, [pc, #148]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053aa:	f7fb ffc1 	bl	8001330 <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b0:	e00a      	b.n	80053c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b2:	f7fb ffbd 	bl	8001330 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0be      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c8:	4b1c      	ldr	r3, [pc, #112]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d1eb      	bne.n	80053b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d010      	beq.n	8005408 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	4b14      	ldr	r3, [pc, #80]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d208      	bcs.n	8005408 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f6:	4b11      	ldr	r3, [pc, #68]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f023 020f 	bic.w	r2, r3, #15
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	490e      	ldr	r1, [pc, #56]	@ (800543c <HAL_RCC_ClockConfig+0x244>)
 8005404:	4313      	orrs	r3, r2
 8005406:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005408:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <HAL_RCC_ClockConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d214      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005416:	4b08      	ldr	r3, [pc, #32]	@ (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f023 020f 	bic.w	r2, r3, #15
 800541e:	4906      	ldr	r1, [pc, #24]	@ (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005426:	4b04      	ldr	r3, [pc, #16]	@ (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d005      	beq.n	8005440 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e086      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
 8005438:	52002000 	.word	0x52002000
 800543c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d010      	beq.n	800546e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	4b3f      	ldr	r3, [pc, #252]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005458:	429a      	cmp	r2, r3
 800545a:	d208      	bcs.n	800546e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800545c:	4b3c      	ldr	r3, [pc, #240]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	4939      	ldr	r1, [pc, #228]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 800546a:	4313      	orrs	r3, r2
 800546c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d010      	beq.n	800549c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	4b34      	ldr	r3, [pc, #208]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005486:	429a      	cmp	r2, r3
 8005488:	d208      	bcs.n	800549c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800548a:	4b31      	ldr	r3, [pc, #196]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	492e      	ldr	r1, [pc, #184]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005498:	4313      	orrs	r3, r2
 800549a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	4b28      	ldr	r3, [pc, #160]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d208      	bcs.n	80054ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054b8:	4b25      	ldr	r3, [pc, #148]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	4922      	ldr	r1, [pc, #136]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69da      	ldr	r2, [r3, #28]
 80054da:	4b1d      	ldr	r3, [pc, #116]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d208      	bcs.n	80054f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4917      	ldr	r1, [pc, #92]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054f8:	f000 f834 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	4912      	ldr	r1, [pc, #72]	@ (8005554 <HAL_RCC_ClockConfig+0x35c>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005516:	4b0e      	ldr	r3, [pc, #56]	@ (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	4a0d      	ldr	r2, [pc, #52]	@ (8005554 <HAL_RCC_ClockConfig+0x35c>)
 8005520:	5cd3      	ldrb	r3, [r2, r3]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
 800552c:	4a0a      	ldr	r2, [pc, #40]	@ (8005558 <HAL_RCC_ClockConfig+0x360>)
 800552e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005530:	4a0a      	ldr	r2, [pc, #40]	@ (800555c <HAL_RCC_ClockConfig+0x364>)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005536:	4b0a      	ldr	r3, [pc, #40]	@ (8005560 <HAL_RCC_ClockConfig+0x368>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fb feae 	bl	800129c <HAL_InitTick>
 8005540:	4603      	mov	r3, r0
 8005542:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	58024400 	.word	0x58024400
 8005554:	0800cfc4 	.word	0x0800cfc4
 8005558:	24000004 	.word	0x24000004
 800555c:	24000000 	.word	0x24000000
 8005560:	24000008 	.word	0x24000008

08005564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005564:	b480      	push	{r7}
 8005566:	b089      	sub	sp, #36	@ 0x24
 8005568:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800556a:	4bb3      	ldr	r3, [pc, #716]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005572:	2b18      	cmp	r3, #24
 8005574:	f200 8155 	bhi.w	8005822 <HAL_RCC_GetSysClockFreq+0x2be>
 8005578:	a201      	add	r2, pc, #4	@ (adr r2, 8005580 <HAL_RCC_GetSysClockFreq+0x1c>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055e5 	.word	0x080055e5
 8005584:	08005823 	.word	0x08005823
 8005588:	08005823 	.word	0x08005823
 800558c:	08005823 	.word	0x08005823
 8005590:	08005823 	.word	0x08005823
 8005594:	08005823 	.word	0x08005823
 8005598:	08005823 	.word	0x08005823
 800559c:	08005823 	.word	0x08005823
 80055a0:	0800560b 	.word	0x0800560b
 80055a4:	08005823 	.word	0x08005823
 80055a8:	08005823 	.word	0x08005823
 80055ac:	08005823 	.word	0x08005823
 80055b0:	08005823 	.word	0x08005823
 80055b4:	08005823 	.word	0x08005823
 80055b8:	08005823 	.word	0x08005823
 80055bc:	08005823 	.word	0x08005823
 80055c0:	08005611 	.word	0x08005611
 80055c4:	08005823 	.word	0x08005823
 80055c8:	08005823 	.word	0x08005823
 80055cc:	08005823 	.word	0x08005823
 80055d0:	08005823 	.word	0x08005823
 80055d4:	08005823 	.word	0x08005823
 80055d8:	08005823 	.word	0x08005823
 80055dc:	08005823 	.word	0x08005823
 80055e0:	08005617 	.word	0x08005617
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e4:	4b94      	ldr	r3, [pc, #592]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055f0:	4b91      	ldr	r3, [pc, #580]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	4a90      	ldr	r2, [pc, #576]	@ (800583c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005600:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005602:	e111      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005604:	4b8d      	ldr	r3, [pc, #564]	@ (800583c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005606:	61bb      	str	r3, [r7, #24]
      break;
 8005608:	e10e      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800560a:	4b8d      	ldr	r3, [pc, #564]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800560c:	61bb      	str	r3, [r7, #24]
      break;
 800560e:	e10b      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005610:	4b8c      	ldr	r3, [pc, #560]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005612:	61bb      	str	r3, [r7, #24]
      break;
 8005614:	e108      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005616:	4b88      	ldr	r3, [pc, #544]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005620:	4b85      	ldr	r3, [pc, #532]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800562a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800562c:	4b82      	ldr	r3, [pc, #520]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005636:	4b80      	ldr	r3, [pc, #512]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563a:	08db      	lsrs	r3, r3, #3
 800563c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80e1 	beq.w	800581c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b02      	cmp	r3, #2
 800565e:	f000 8083 	beq.w	8005768 <HAL_RCC_GetSysClockFreq+0x204>
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b02      	cmp	r3, #2
 8005666:	f200 80a1 	bhi.w	80057ac <HAL_RCC_GetSysClockFreq+0x248>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x114>
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d056      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005676:	e099      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005678:	4b6f      	ldr	r3, [pc, #444]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02d      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005684:	4b6c      	ldr	r3, [pc, #432]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	08db      	lsrs	r3, r3, #3
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	4a6b      	ldr	r2, [pc, #428]	@ (800583c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b62      	ldr	r3, [pc, #392]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80056de:	e087      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800584c <HAL_RCC_GetSysClockFreq+0x2e8>
 80056ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f2:	4b51      	ldr	r3, [pc, #324]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a02 	vldr	s12, [r7, #8]
 8005706:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005722:	e065      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005736:	4b40      	ldr	r3, [pc, #256]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005746:	ed97 6a02 	vldr	s12, [r7, #8]
 800574a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800574e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005766:	e043      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005854 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577a:	4b2f      	ldr	r3, [pc, #188]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578a:	ed97 6a02 	vldr	s12, [r7, #8]
 800578e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800579e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057aa:	e021      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b1e      	ldr	r3, [pc, #120]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80057f0:	4b11      	ldr	r3, [pc, #68]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f4:	0a5b      	lsrs	r3, r3, #9
 80057f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057fa:	3301      	adds	r3, #1
 80057fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005808:	edd7 6a07 	vldr	s13, [r7, #28]
 800580c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005814:	ee17 3a90 	vmov	r3, s15
 8005818:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800581a:	e005      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]
      break;
 8005820:	e002      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005824:	61bb      	str	r3, [r7, #24]
      break;
 8005826:	bf00      	nop
  }

  return sysclockfreq;
 8005828:	69bb      	ldr	r3, [r7, #24]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3724      	adds	r7, #36	@ 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
 800583c:	03d09000 	.word	0x03d09000
 8005840:	003d0900 	.word	0x003d0900
 8005844:	017d7840 	.word	0x017d7840
 8005848:	46000000 	.word	0x46000000
 800584c:	4c742400 	.word	0x4c742400
 8005850:	4a742400 	.word	0x4a742400
 8005854:	4bbebc20 	.word	0x4bbebc20

08005858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800585e:	f7ff fe81 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8005862:	4602      	mov	r2, r0
 8005864:	4b10      	ldr	r3, [pc, #64]	@ (80058a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	490f      	ldr	r1, [pc, #60]	@ (80058ac <HAL_RCC_GetHCLKFreq+0x54>)
 8005870:	5ccb      	ldrb	r3, [r1, r3]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	fa22 f303 	lsr.w	r3, r2, r3
 800587a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800587c:	4b0a      	ldr	r3, [pc, #40]	@ (80058a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	4a09      	ldr	r2, [pc, #36]	@ (80058ac <HAL_RCC_GetHCLKFreq+0x54>)
 8005886:	5cd3      	ldrb	r3, [r2, r3]
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	4a07      	ldr	r2, [pc, #28]	@ (80058b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005894:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005896:	4a07      	ldr	r2, [pc, #28]	@ (80058b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800589c:	4b04      	ldr	r3, [pc, #16]	@ (80058b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	58024400 	.word	0x58024400
 80058ac:	0800cfc4 	.word	0x0800cfc4
 80058b0:	24000004 	.word	0x24000004
 80058b4:	24000000 	.word	0x24000000

080058b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058bc:	f7ff ffcc 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80058c0:	4602      	mov	r2, r0
 80058c2:	4b06      	ldr	r3, [pc, #24]	@ (80058dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	4904      	ldr	r1, [pc, #16]	@ (80058e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ce:	5ccb      	ldrb	r3, [r1, r3]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80058d8:	4618      	mov	r0, r3
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	58024400 	.word	0x58024400
 80058e0:	0800cfc4 	.word	0x0800cfc4

080058e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058e8:	f7ff ffb6 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80058ec:	4602      	mov	r2, r0
 80058ee:	4b06      	ldr	r3, [pc, #24]	@ (8005908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	0a1b      	lsrs	r3, r3, #8
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	4904      	ldr	r1, [pc, #16]	@ (800590c <HAL_RCC_GetPCLK2Freq+0x28>)
 80058fa:	5ccb      	ldrb	r3, [r1, r3]
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	58024400 	.word	0x58024400
 800590c:	0800cfc4 	.word	0x0800cfc4

08005910 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005914:	b0cc      	sub	sp, #304	@ 0x130
 8005916:	af00      	add	r7, sp, #0
 8005918:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800591c:	2300      	movs	r3, #0
 800591e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005922:	2300      	movs	r3, #0
 8005924:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005928:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005934:	2500      	movs	r5, #0
 8005936:	ea54 0305 	orrs.w	r3, r4, r5
 800593a:	d049      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800593c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005942:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005946:	d02f      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005948:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800594c:	d828      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800594e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005952:	d01a      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005954:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005958:	d822      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800595e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005962:	d007      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005964:	e01c      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005966:	4bb8      	ldr	r3, [pc, #736]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	4ab7      	ldr	r2, [pc, #732]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800596c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005972:	e01a      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005974:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005978:	3308      	adds	r3, #8
 800597a:	2102      	movs	r1, #2
 800597c:	4618      	mov	r0, r3
 800597e:	f002 fba1 	bl	80080c4 <RCCEx_PLL2_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005988:	e00f      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800598a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800598e:	3328      	adds	r3, #40	@ 0x28
 8005990:	2102      	movs	r1, #2
 8005992:	4618      	mov	r0, r3
 8005994:	f002 fc48 	bl	8008228 <RCCEx_PLL3_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800599e:	e004      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059a6:	e000      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80059a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059b2:	4ba5      	ldr	r3, [pc, #660]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80059ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c0:	4aa1      	ldr	r2, [pc, #644]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059c2:	430b      	orrs	r3, r1
 80059c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80059c6:	e003      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80059dc:	f04f 0900 	mov.w	r9, #0
 80059e0:	ea58 0309 	orrs.w	r3, r8, r9
 80059e4:	d047      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80059e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d82a      	bhi.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80059f0:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a0d 	.word	0x08005a0d
 80059fc:	08005a1b 	.word	0x08005a1b
 8005a00:	08005a31 	.word	0x08005a31
 8005a04:	08005a4f 	.word	0x08005a4f
 8005a08:	08005a4f 	.word	0x08005a4f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0c:	4b8e      	ldr	r3, [pc, #568]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	4a8d      	ldr	r2, [pc, #564]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a18:	e01a      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a1e:	3308      	adds	r3, #8
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f002 fb4e 	bl	80080c4 <RCCEx_PLL2_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a2e:	e00f      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a34:	3328      	adds	r3, #40	@ 0x28
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f002 fbf5 	bl	8008228 <RCCEx_PLL3_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a44:	e004      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a4c:	e000      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a58:	4b7b      	ldr	r3, [pc, #492]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a5c:	f023 0107 	bic.w	r1, r3, #7
 8005a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a66:	4a78      	ldr	r2, [pc, #480]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a6c:	e003      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005a82:	f04f 0b00 	mov.w	fp, #0
 8005a86:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a8a:	d04c      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a96:	d030      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a9c:	d829      	bhi.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005aa0:	d02d      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005aa4:	d825      	bhi.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005aa6:	2b80      	cmp	r3, #128	@ 0x80
 8005aa8:	d018      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005aaa:	2b80      	cmp	r3, #128	@ 0x80
 8005aac:	d821      	bhi.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005ab2:	2b40      	cmp	r3, #64	@ 0x40
 8005ab4:	d007      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005ab6:	e01c      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab8:	4b63      	ldr	r3, [pc, #396]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	4a62      	ldr	r2, [pc, #392]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ac4:	e01c      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aca:	3308      	adds	r3, #8
 8005acc:	2100      	movs	r1, #0
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f002 faf8 	bl	80080c4 <RCCEx_PLL2_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ada:	e011      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ae0:	3328      	adds	r3, #40	@ 0x28
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f002 fb9f 	bl	8008228 <RCCEx_PLL3_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005af0:	e006      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005af8:	e002      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005afa:	bf00      	nop
 8005afc:	e000      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10a      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b08:	4b4f      	ldr	r3, [pc, #316]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b0c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b16:	4a4c      	ldr	r2, [pc, #304]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b1c:	e003      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005b32:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005b36:	2300      	movs	r3, #0
 8005b38:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005b3c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005b40:	460b      	mov	r3, r1
 8005b42:	4313      	orrs	r3, r2
 8005b44:	d053      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b52:	d035      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005b54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b58:	d82e      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b5a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b5e:	d031      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005b60:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b64:	d828      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b6a:	d01a      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005b6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b70:	d822      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005b76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b7a:	d007      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005b7c:	e01c      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7e:	4b32      	ldr	r3, [pc, #200]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b82:	4a31      	ldr	r2, [pc, #196]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b8a:	e01c      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b90:	3308      	adds	r3, #8
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f002 fa95 	bl	80080c4 <RCCEx_PLL2_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ba0:	e011      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ba6:	3328      	adds	r3, #40	@ 0x28
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f002 fb3c 	bl	8008228 <RCCEx_PLL3_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb6:	e006      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005bbe:	e002      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005bc0:	bf00      	nop
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005bce:	4b1e      	ldr	r3, [pc, #120]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bde:	4a1a      	ldr	r2, [pc, #104]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be0:	430b      	orrs	r3, r1
 8005be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005be4:	e003      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005bfa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c04:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	d056      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c1a:	d038      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c20:	d831      	bhi.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c26:	d034      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005c28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c2c:	d82b      	bhi.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c32:	d01d      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005c34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c38:	d825      	bhi.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d006      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c42:	d00a      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c44:	e01f      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c46:	bf00      	nop
 8005c48:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c4c:	4ba2      	ldr	r3, [pc, #648]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c50:	4aa1      	ldr	r2, [pc, #644]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c58:	e01c      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c5e:	3308      	adds	r3, #8
 8005c60:	2100      	movs	r1, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f002 fa2e 	bl	80080c4 <RCCEx_PLL2_Config>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c6e:	e011      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c74:	3328      	adds	r3, #40	@ 0x28
 8005c76:	2100      	movs	r1, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f002 fad5 	bl	8008228 <RCCEx_PLL3_Config>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c84:	e006      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c8c:	e002      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c8e:	bf00      	nop
 8005c90:	e000      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c9c:	4b8e      	ldr	r3, [pc, #568]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ca4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cac:	4a8a      	ldr	r2, [pc, #552]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cb2:	e003      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cb8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005cc8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005cd2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	d03a      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce2:	2b30      	cmp	r3, #48	@ 0x30
 8005ce4:	d01f      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005ce6:	2b30      	cmp	r3, #48	@ 0x30
 8005ce8:	d819      	bhi.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d00c      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d815      	bhi.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d019      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d111      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfa:	4b77      	ldr	r3, [pc, #476]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfe:	4a76      	ldr	r2, [pc, #472]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d06:	e011      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	2102      	movs	r1, #2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f002 f9d7 	bl	80080c4 <RCCEx_PLL2_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d1c:	e006      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d24:	e002      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d34:	4b68      	ldr	r3, [pc, #416]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d38:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d42:	4a65      	ldr	r2, [pc, #404]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d44:	430b      	orrs	r3, r1
 8005d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d48:	e003      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d4e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005d5e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d62:	2300      	movs	r3, #0
 8005d64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d68:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	d051      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d7c:	d035      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d82:	d82e      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d88:	d031      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d8e:	d828      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d94:	d01a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d9a:	d822      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da4:	d007      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005da6:	e01c      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da8:	4b4b      	ldr	r3, [pc, #300]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dac:	4a4a      	ldr	r2, [pc, #296]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005db4:	e01c      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dba:	3308      	adds	r3, #8
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f002 f980 	bl	80080c4 <RCCEx_PLL2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005dca:	e011      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dd0:	3328      	adds	r3, #40	@ 0x28
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f002 fa27 	bl	8008228 <RCCEx_PLL3_Config>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005de0:	e006      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005de8:	e002      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005dea:	bf00      	nop
 8005dec:	e000      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005df8:	4b37      	ldr	r3, [pc, #220]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e06:	4a34      	ldr	r2, [pc, #208]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e0c:	e003      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005e22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e26:	2300      	movs	r3, #0
 8005e28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4313      	orrs	r3, r2
 8005e34:	d056      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e40:	d033      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005e42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e46:	d82c      	bhi.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e4c:	d02f      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005e4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e52:	d826      	bhi.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e58:	d02b      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005e5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e5e:	d820      	bhi.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e64:	d012      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e6a:	d81a      	bhi.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d022      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e74:	d115      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f002 f920 	bl	80080c4 <RCCEx_PLL2_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e8a:	e015      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e90:	3328      	adds	r3, #40	@ 0x28
 8005e92:	2101      	movs	r1, #1
 8005e94:	4618      	mov	r0, r3
 8005e96:	f002 f9c7 	bl	8008228 <RCCEx_PLL3_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ea0:	e00a      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ea8:	e006      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005eaa:	bf00      	nop
 8005eac:	e004      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005eae:	bf00      	nop
 8005eb0:	e002      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005eb2:	bf00      	nop
 8005eb4:	e000      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10d      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ec0:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ece:	4a02      	ldr	r2, [pc, #8]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ed6:	bf00      	nop
 8005ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005edc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ee0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ef0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005efa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005efe:	460b      	mov	r3, r1
 8005f00:	4313      	orrs	r3, r2
 8005f02:	d055      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f10:	d033      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f16:	d82c      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1c:	d02f      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f22:	d826      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f28:	d02b      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005f2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f2e:	d820      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f34:	d012      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f3a:	d81a      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d022      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f44:	d115      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f002 f8b8 	bl	80080c4 <RCCEx_PLL2_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f5a:	e015      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f60:	3328      	adds	r3, #40	@ 0x28
 8005f62:	2101      	movs	r1, #1
 8005f64:	4618      	mov	r0, r3
 8005f66:	f002 f95f 	bl	8008228 <RCCEx_PLL3_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f70:	e00a      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f78:	e006      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e004      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f7e:	bf00      	nop
 8005f80:	e002      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10b      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f90:	4bb6      	ldr	r3, [pc, #728]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f94:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fa0:	4ab2      	ldr	r2, [pc, #712]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fa6:	e003      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fc6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	d02a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d011      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fde:	d10a      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f002 f86b 	bl	80080c4 <RCCEx_PLL2_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005ff4:	e004      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ffc:	e000      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006000:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006008:	4b98      	ldr	r3, [pc, #608]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800600a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006010:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006016:	4a95      	ldr	r2, [pc, #596]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006018:	430b      	orrs	r3, r1
 800601a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800601c:	e003      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006022:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006026:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006036:	2300      	movs	r3, #0
 8006038:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800603c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006040:	460b      	mov	r3, r1
 8006042:	4313      	orrs	r3, r2
 8006044:	d037      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006046:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800604a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006050:	d00e      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8006052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006056:	d816      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d018      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800605c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006060:	d111      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006062:	4b82      	ldr	r3, [pc, #520]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	4a81      	ldr	r2, [pc, #516]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800606c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800606e:	e00f      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006070:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006074:	3308      	adds	r3, #8
 8006076:	2101      	movs	r1, #1
 8006078:	4618      	mov	r0, r3
 800607a:	f002 f823 	bl	80080c4 <RCCEx_PLL2_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006084:	e004      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800608c:	e000      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800608e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006090:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006098:	4b74      	ldr	r3, [pc, #464]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800609a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a6:	4a71      	ldr	r2, [pc, #452]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060a8:	430b      	orrs	r3, r1
 80060aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80060ac:	e003      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80060c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060c6:	2300      	movs	r3, #0
 80060c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060cc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4313      	orrs	r3, r2
 80060d4:	d03a      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80060d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d81d      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80060e0:	a201      	add	r2, pc, #4	@ (adr r2, 80060e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	08006125 	.word	0x08006125
 80060ec:	080060f9 	.word	0x080060f9
 80060f0:	08006107 	.word	0x08006107
 80060f4:	08006125 	.word	0x08006125
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f8:	4b5c      	ldr	r3, [pc, #368]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fc:	4a5b      	ldr	r2, [pc, #364]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006104:	e00f      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006106:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800610a:	3308      	adds	r3, #8
 800610c:	2102      	movs	r1, #2
 800610e:	4618      	mov	r0, r3
 8006110:	f001 ffd8 	bl	80080c4 <RCCEx_PLL2_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800611a:	e004      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006122:	e000      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006126:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800612e:	4b4f      	ldr	r3, [pc, #316]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006132:	f023 0103 	bic.w	r1, r3, #3
 8006136:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800613a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800613c:	4a4b      	ldr	r2, [pc, #300]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800613e:	430b      	orrs	r3, r1
 8006140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006142:	e003      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006148:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800614c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006158:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800615c:	2300      	movs	r3, #0
 800615e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006162:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006166:	460b      	mov	r3, r1
 8006168:	4313      	orrs	r3, r2
 800616a:	f000 80a0 	beq.w	80062ae <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800616e:	4b40      	ldr	r3, [pc, #256]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a3f      	ldr	r2, [pc, #252]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006178:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800617a:	f7fb f8d9 	bl	8001330 <HAL_GetTick>
 800617e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006182:	e00b      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006184:	f7fb f8d4 	bl	8001330 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b64      	cmp	r3, #100	@ 0x64
 8006192:	d903      	bls.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800619a:	e005      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800619c:	4b34      	ldr	r3, [pc, #208]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0ed      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80061a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d17a      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061b0:	4b2e      	ldr	r3, [pc, #184]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061bc:	4053      	eors	r3, r2
 80061be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d015      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061c6:	4b29      	ldr	r3, [pc, #164]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061d2:	4b26      	ldr	r3, [pc, #152]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d6:	4a25      	ldr	r2, [pc, #148]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061dc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061de:	4b23      	ldr	r3, [pc, #140]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e2:	4a22      	ldr	r2, [pc, #136]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061ea:	4a20      	ldr	r2, [pc, #128]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80061f0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061fe:	d118      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006200:	f7fb f896 	bl	8001330 <HAL_GetTick>
 8006204:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006208:	e00d      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620a:	f7fb f891 	bl	8001330 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006214:	1ad2      	subs	r2, r2, r3
 8006216:	f241 3388 	movw	r3, #5000	@ 0x1388
 800621a:	429a      	cmp	r2, r3
 800621c:	d903      	bls.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8006224:	e005      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006226:	4b11      	ldr	r3, [pc, #68]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0eb      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8006232:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006236:	2b00      	cmp	r3, #0
 8006238:	d130      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800623a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800623e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800624a:	d115      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800624c:	4b07      	ldr	r3, [pc, #28]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006254:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006258:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800625c:	091a      	lsrs	r2, r3, #4
 800625e:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8006260:	4013      	ands	r3, r2
 8006262:	4a02      	ldr	r2, [pc, #8]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006264:	430b      	orrs	r3, r1
 8006266:	6113      	str	r3, [r2, #16]
 8006268:	e00c      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800626a:	bf00      	nop
 800626c:	58024400 	.word	0x58024400
 8006270:	58024800 	.word	0x58024800
 8006274:	00ffffcf 	.word	0x00ffffcf
 8006278:	4bd4      	ldr	r3, [pc, #848]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	4ad3      	ldr	r2, [pc, #844]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800627e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006282:	6113      	str	r3, [r2, #16]
 8006284:	4bd1      	ldr	r3, [pc, #836]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006286:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800628c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006294:	4acd      	ldr	r2, [pc, #820]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006296:	430b      	orrs	r3, r1
 8006298:	6713      	str	r3, [r2, #112]	@ 0x70
 800629a:	e008      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800629c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80062a4:	e003      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	f002 0301 	and.w	r3, r2, #1
 80062ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062be:	2300      	movs	r3, #0
 80062c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f000 808b 	beq.w	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80062d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062d8:	2b28      	cmp	r3, #40	@ 0x28
 80062da:	d86b      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80062dc:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	080063bd 	.word	0x080063bd
 80062e8:	080063b5 	.word	0x080063b5
 80062ec:	080063b5 	.word	0x080063b5
 80062f0:	080063b5 	.word	0x080063b5
 80062f4:	080063b5 	.word	0x080063b5
 80062f8:	080063b5 	.word	0x080063b5
 80062fc:	080063b5 	.word	0x080063b5
 8006300:	080063b5 	.word	0x080063b5
 8006304:	08006389 	.word	0x08006389
 8006308:	080063b5 	.word	0x080063b5
 800630c:	080063b5 	.word	0x080063b5
 8006310:	080063b5 	.word	0x080063b5
 8006314:	080063b5 	.word	0x080063b5
 8006318:	080063b5 	.word	0x080063b5
 800631c:	080063b5 	.word	0x080063b5
 8006320:	080063b5 	.word	0x080063b5
 8006324:	0800639f 	.word	0x0800639f
 8006328:	080063b5 	.word	0x080063b5
 800632c:	080063b5 	.word	0x080063b5
 8006330:	080063b5 	.word	0x080063b5
 8006334:	080063b5 	.word	0x080063b5
 8006338:	080063b5 	.word	0x080063b5
 800633c:	080063b5 	.word	0x080063b5
 8006340:	080063b5 	.word	0x080063b5
 8006344:	080063bd 	.word	0x080063bd
 8006348:	080063b5 	.word	0x080063b5
 800634c:	080063b5 	.word	0x080063b5
 8006350:	080063b5 	.word	0x080063b5
 8006354:	080063b5 	.word	0x080063b5
 8006358:	080063b5 	.word	0x080063b5
 800635c:	080063b5 	.word	0x080063b5
 8006360:	080063b5 	.word	0x080063b5
 8006364:	080063bd 	.word	0x080063bd
 8006368:	080063b5 	.word	0x080063b5
 800636c:	080063b5 	.word	0x080063b5
 8006370:	080063b5 	.word	0x080063b5
 8006374:	080063b5 	.word	0x080063b5
 8006378:	080063b5 	.word	0x080063b5
 800637c:	080063b5 	.word	0x080063b5
 8006380:	080063b5 	.word	0x080063b5
 8006384:	080063bd 	.word	0x080063bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800638c:	3308      	adds	r3, #8
 800638e:	2101      	movs	r1, #1
 8006390:	4618      	mov	r0, r3
 8006392:	f001 fe97 	bl	80080c4 <RCCEx_PLL2_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800639c:	e00f      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800639e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a2:	3328      	adds	r3, #40	@ 0x28
 80063a4:	2101      	movs	r1, #1
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 ff3e 	bl	8008228 <RCCEx_PLL3_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063b2:	e004      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80063ba:	e000      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80063bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063c6:	4b81      	ldr	r3, [pc, #516]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80063c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80063ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063d6:	4a7d      	ldr	r2, [pc, #500]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80063d8:	430b      	orrs	r3, r1
 80063da:	6553      	str	r3, [r2, #84]	@ 0x54
 80063dc:	e003      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f002 0302 	and.w	r3, r2, #2
 80063f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063f6:	2300      	movs	r3, #0
 80063f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063fc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006400:	460b      	mov	r3, r1
 8006402:	4313      	orrs	r3, r2
 8006404:	d042      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006406:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800640a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800640c:	2b05      	cmp	r3, #5
 800640e:	d825      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006410:	a201      	add	r2, pc, #4	@ (adr r2, 8006418 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	08006465 	.word	0x08006465
 800641c:	08006431 	.word	0x08006431
 8006420:	08006447 	.word	0x08006447
 8006424:	08006465 	.word	0x08006465
 8006428:	08006465 	.word	0x08006465
 800642c:	08006465 	.word	0x08006465
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006434:	3308      	adds	r3, #8
 8006436:	2101      	movs	r1, #1
 8006438:	4618      	mov	r0, r3
 800643a:	f001 fe43 	bl	80080c4 <RCCEx_PLL2_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006444:	e00f      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800644a:	3328      	adds	r3, #40	@ 0x28
 800644c:	2101      	movs	r1, #1
 800644e:	4618      	mov	r0, r3
 8006450:	f001 feea 	bl	8008228 <RCCEx_PLL3_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800645a:	e004      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006462:	e000      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006466:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800646e:	4b57      	ldr	r3, [pc, #348]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006472:	f023 0107 	bic.w	r1, r3, #7
 8006476:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800647a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800647c:	4a53      	ldr	r2, [pc, #332]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800647e:	430b      	orrs	r3, r1
 8006480:	6553      	str	r3, [r2, #84]	@ 0x54
 8006482:	e003      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006484:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006488:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800648c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f002 0304 	and.w	r3, r2, #4
 8006498:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800649c:	2300      	movs	r3, #0
 800649e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4313      	orrs	r3, r2
 80064aa:	d044      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064b4:	2b05      	cmp	r3, #5
 80064b6:	d825      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80064b8:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	0800650d 	.word	0x0800650d
 80064c4:	080064d9 	.word	0x080064d9
 80064c8:	080064ef 	.word	0x080064ef
 80064cc:	0800650d 	.word	0x0800650d
 80064d0:	0800650d 	.word	0x0800650d
 80064d4:	0800650d 	.word	0x0800650d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064dc:	3308      	adds	r3, #8
 80064de:	2101      	movs	r1, #1
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 fdef 	bl	80080c4 <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064ec:	e00f      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064f2:	3328      	adds	r3, #40	@ 0x28
 80064f4:	2101      	movs	r1, #1
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 fe96 	bl	8008228 <RCCEx_PLL3_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006502:	e004      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800650a:	e000      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800650c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006516:	4b2d      	ldr	r3, [pc, #180]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800651a:	f023 0107 	bic.w	r1, r3, #7
 800651e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006522:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006526:	4a29      	ldr	r2, [pc, #164]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006528:	430b      	orrs	r3, r1
 800652a:	6593      	str	r3, [r2, #88]	@ 0x58
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006532:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	f002 0320 	and.w	r3, r2, #32
 8006542:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006546:	2300      	movs	r3, #0
 8006548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800654c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006550:	460b      	mov	r3, r1
 8006552:	4313      	orrs	r3, r2
 8006554:	d057      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800655a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800655e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006562:	d035      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006568:	d82c      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656e:	d031      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006574:	d826      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006576:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800657a:	d02d      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800657c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006580:	d820      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006586:	d012      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800658c:	d81a      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d024      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006596:	d115      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800659c:	3308      	adds	r3, #8
 800659e:	2100      	movs	r1, #0
 80065a0:	4618      	mov	r0, r3
 80065a2:	f001 fd8f 	bl	80080c4 <RCCEx_PLL2_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065ac:	e017      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065b2:	3328      	adds	r3, #40	@ 0x28
 80065b4:	2102      	movs	r1, #2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 fe36 	bl	8008228 <RCCEx_PLL3_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065c2:	e00c      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80065ca:	e008      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80065cc:	58024400 	.word	0x58024400
        break;
 80065d0:	bf00      	nop
 80065d2:	e004      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80065d4:	bf00      	nop
 80065d6:	e002      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80065dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10b      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065e6:	4bc2      	ldr	r3, [pc, #776]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065f6:	4abe      	ldr	r2, [pc, #760]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065f8:	430b      	orrs	r3, r1
 80065fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80065fc:	e003      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006602:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006606:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006616:	2300      	movs	r3, #0
 8006618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800661c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006620:	460b      	mov	r3, r1
 8006622:	4313      	orrs	r3, r2
 8006624:	d055      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006626:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800662a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800662e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006632:	d033      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006634:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006638:	d82c      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663e:	d02f      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006644:	d826      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006646:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800664a:	d02b      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800664c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006650:	d820      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006656:	d012      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800665c:	d81a      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d022      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006666:	d115      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800666c:	3308      	adds	r3, #8
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f001 fd27 	bl	80080c4 <RCCEx_PLL2_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800667c:	e015      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800667e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006682:	3328      	adds	r3, #40	@ 0x28
 8006684:	2102      	movs	r1, #2
 8006686:	4618      	mov	r0, r3
 8006688:	f001 fdce 	bl	8008228 <RCCEx_PLL3_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006692:	e00a      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800669a:	e006      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800669c:	bf00      	nop
 800669e:	e004      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80066a0:	bf00      	nop
 80066a2:	e002      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80066a4:	bf00      	nop
 80066a6:	e000      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80066a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10b      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066b2:	4b8f      	ldr	r3, [pc, #572]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066c2:	4a8b      	ldr	r2, [pc, #556]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80066c8:	e003      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80066de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066e2:	2300      	movs	r3, #0
 80066e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066e8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066ec:	460b      	mov	r3, r1
 80066ee:	4313      	orrs	r3, r2
 80066f0:	d055      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80066f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066fa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066fe:	d033      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006700:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006704:	d82c      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800670a:	d02f      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800670c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006710:	d826      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006712:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006716:	d02b      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006718:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800671c:	d820      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800671e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006722:	d012      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006728:	d81a      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d022      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800672e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006732:	d115      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006734:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006738:	3308      	adds	r3, #8
 800673a:	2100      	movs	r1, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f001 fcc1 	bl	80080c4 <RCCEx_PLL2_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006748:	e015      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800674a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800674e:	3328      	adds	r3, #40	@ 0x28
 8006750:	2102      	movs	r1, #2
 8006752:	4618      	mov	r0, r3
 8006754:	f001 fd68 	bl	8008228 <RCCEx_PLL3_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800675e:	e00a      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006766:	e006      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006768:	bf00      	nop
 800676a:	e004      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800676c:	bf00      	nop
 800676e:	e002      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006770:	bf00      	nop
 8006772:	e000      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006776:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800677e:	4b5c      	ldr	r3, [pc, #368]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006782:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006786:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800678a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800678e:	4a58      	ldr	r2, [pc, #352]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006790:	430b      	orrs	r3, r1
 8006792:	6593      	str	r3, [r2, #88]	@ 0x58
 8006794:	e003      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006796:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800679a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800679e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f002 0308 	and.w	r3, r2, #8
 80067aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067ae:	2300      	movs	r3, #0
 80067b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067b4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d01e      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80067be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ca:	d10c      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067d0:	3328      	adds	r3, #40	@ 0x28
 80067d2:	2102      	movs	r1, #2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 fd27 	bl	8008228 <RCCEx_PLL3_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80067e6:	4b42      	ldr	r3, [pc, #264]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f6:	4a3e      	ldr	r2, [pc, #248]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067f8:	430b      	orrs	r3, r1
 80067fa:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f002 0310 	and.w	r3, r2, #16
 8006808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800680c:	2300      	movs	r3, #0
 800680e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006812:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006816:	460b      	mov	r3, r1
 8006818:	4313      	orrs	r3, r2
 800681a:	d01e      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800681c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006820:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006828:	d10c      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800682a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800682e:	3328      	adds	r3, #40	@ 0x28
 8006830:	2102      	movs	r1, #2
 8006832:	4618      	mov	r0, r3
 8006834:	f001 fcf8 	bl	8008228 <RCCEx_PLL3_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006844:	4b2a      	ldr	r3, [pc, #168]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006848:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800684c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006854:	4a26      	ldr	r2, [pc, #152]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006856:	430b      	orrs	r3, r1
 8006858:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800685a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006866:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800686a:	2300      	movs	r3, #0
 800686c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006870:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006874:	460b      	mov	r3, r1
 8006876:	4313      	orrs	r3, r2
 8006878:	d040      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800687a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800687e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006886:	d022      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800688c:	d81b      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006896:	d00b      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006898:	e015      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800689a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800689e:	3308      	adds	r3, #8
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 fc0e 	bl	80080c4 <RCCEx_PLL2_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068ae:	e00f      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068b4:	3328      	adds	r3, #40	@ 0x28
 80068b6:	2102      	movs	r1, #2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 fcb5 	bl	8008228 <RCCEx_PLL3_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068c4:	e004      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80068cc:	e000      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80068ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10d      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068d8:	4b05      	ldr	r3, [pc, #20]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068dc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80068e8:	4a01      	ldr	r2, [pc, #4]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068ea:	430b      	orrs	r3, r1
 80068ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80068ee:	e005      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80068f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006908:	67bb      	str	r3, [r7, #120]	@ 0x78
 800690a:	2300      	movs	r3, #0
 800690c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800690e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d03b      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800691c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006920:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006924:	d01f      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006926:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800692a:	d818      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800692c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006930:	d003      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006936:	d007      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006938:	e011      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693a:	4b64      	ldr	r3, [pc, #400]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800693c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693e:	4a63      	ldr	r2, [pc, #396]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006944:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006946:	e00f      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006948:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800694c:	3328      	adds	r3, #40	@ 0x28
 800694e:	2101      	movs	r1, #1
 8006950:	4618      	mov	r0, r3
 8006952:	f001 fc69 	bl	8008228 <RCCEx_PLL3_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800695c:	e004      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006964:	e000      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006968:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10b      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006970:	4b56      	ldr	r3, [pc, #344]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006974:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006978:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800697c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006980:	4a52      	ldr	r2, [pc, #328]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006982:	430b      	orrs	r3, r1
 8006984:	6553      	str	r3, [r2, #84]	@ 0x54
 8006986:	e003      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006988:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800698c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800699c:	673b      	str	r3, [r7, #112]	@ 0x70
 800699e:	2300      	movs	r3, #0
 80069a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80069a2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069a6:	460b      	mov	r3, r1
 80069a8:	4313      	orrs	r3, r2
 80069aa:	d031      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80069b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ba:	d007      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80069bc:	e011      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069be:	4b43      	ldr	r3, [pc, #268]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80069c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c2:	4a42      	ldr	r2, [pc, #264]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80069c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069ca:	e00e      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069d0:	3308      	adds	r3, #8
 80069d2:	2102      	movs	r1, #2
 80069d4:	4618      	mov	r0, r3
 80069d6:	f001 fb75 	bl	80080c4 <RCCEx_PLL2_Config>
 80069da:	4603      	mov	r3, r0
 80069dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069e0:	e003      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80069e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069f2:	4b36      	ldr	r3, [pc, #216]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80069f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a00:	4a32      	ldr	r2, [pc, #200]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a02:	430b      	orrs	r3, r1
 8006a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a06:	e003      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a0c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a1e:	2300      	movs	r3, #0
 8006a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a22:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a26:	460b      	mov	r3, r1
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	d00c      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a30:	3328      	adds	r3, #40	@ 0x28
 8006a32:	2102      	movs	r1, #2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 fbf7 	bl	8008228 <RCCEx_PLL3_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a52:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a54:	2300      	movs	r3, #0
 8006a56:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	d03a      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a6e:	d018      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006a70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a74:	d811      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a7a:	d014      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a80:	d80b      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d011      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a8a:	d106      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a90:	4a0e      	ldr	r2, [pc, #56]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006a98:	e008      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006aa0:	e004      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006aa2:	bf00      	nop
 8006aa4:	e002      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006aa6:	bf00      	nop
 8006aa8:	e000      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10d      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ab4:	4b05      	ldr	r3, [pc, #20]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ac4:	4a01      	ldr	r2, [pc, #4]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006aca:	e005      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ad4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006aee:	460b      	mov	r3, r1
 8006af0:	4313      	orrs	r3, r2
 8006af2:	d009      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006af4:	4baa      	ldr	r3, [pc, #680]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b02:	4aa7      	ldr	r2, [pc, #668]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b14:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b16:	2300      	movs	r3, #0
 8006b18:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4313      	orrs	r3, r2
 8006b22:	d00a      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b24:	4b9e      	ldr	r3, [pc, #632]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b34:	4a9a      	ldr	r2, [pc, #616]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b36:	430b      	orrs	r3, r1
 8006b38:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b48:	2300      	movs	r3, #0
 8006b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b4c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b50:	460b      	mov	r3, r1
 8006b52:	4313      	orrs	r3, r2
 8006b54:	d009      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b56:	4b92      	ldr	r3, [pc, #584]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b5a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b64:	4a8e      	ldr	r2, [pc, #568]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b66:	430b      	orrs	r3, r1
 8006b68:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b76:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b78:	2300      	movs	r3, #0
 8006b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b7c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b80:	460b      	mov	r3, r1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	d00e      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b86:	4b86      	ldr	r3, [pc, #536]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	4a85      	ldr	r2, [pc, #532]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b8c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b90:	6113      	str	r3, [r2, #16]
 8006b92:	4b83      	ldr	r3, [pc, #524]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b94:	6919      	ldr	r1, [r3, #16]
 8006b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b9e:	4a80      	ldr	r2, [pc, #512]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bb6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	d009      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bc0:	4b77      	ldr	r3, [pc, #476]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bce:	4a74      	ldr	r2, [pc, #464]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006be2:	2300      	movs	r3, #0
 8006be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006bea:	460b      	mov	r3, r1
 8006bec:	4313      	orrs	r3, r2
 8006bee:	d00a      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c00:	4a67      	ldr	r2, [pc, #412]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	2100      	movs	r1, #0
 8006c10:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d011      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c26:	3308      	adds	r3, #8
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f001 fa4a 	bl	80080c4 <RCCEx_PLL2_Config>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006c36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c42:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	2100      	movs	r1, #0
 8006c50:	6239      	str	r1, [r7, #32]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	d011      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c66:	3308      	adds	r3, #8
 8006c68:	2101      	movs	r1, #1
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 fa2a 	bl	80080c4 <RCCEx_PLL2_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006c76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c82:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	2100      	movs	r1, #0
 8006c90:	61b9      	str	r1, [r7, #24]
 8006c92:	f003 0304 	and.w	r3, r3, #4
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	d011      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	2102      	movs	r1, #2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f001 fa0a 	bl	80080c4 <RCCEx_PLL2_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006cb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006cc2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	2100      	movs	r1, #0
 8006cd0:	6139      	str	r1, [r7, #16]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	d011      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ce6:	3328      	adds	r3, #40	@ 0x28
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 fa9c 	bl	8008228 <RCCEx_PLL3_Config>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006cf6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	2100      	movs	r1, #0
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	d011      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d26:	3328      	adds	r3, #40	@ 0x28
 8006d28:	2101      	movs	r1, #1
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 fa7c 	bl	8008228 <RCCEx_PLL3_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006d36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d42:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	2100      	movs	r1, #0
 8006d50:	6039      	str	r1, [r7, #0]
 8006d52:	f003 0320 	and.w	r3, r3, #32
 8006d56:	607b      	str	r3, [r7, #4]
 8006d58:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	d011      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d66:	3328      	adds	r3, #40	@ 0x28
 8006d68:	2102      	movs	r1, #2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 fa5c 	bl	8008228 <RCCEx_PLL3_Config>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006d76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d82:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006d86:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e000      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da0:	58024400 	.word	0x58024400

08006da4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b090      	sub	sp, #64	@ 0x40
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006db6:	430b      	orrs	r3, r1
 8006db8:	f040 8094 	bne.w	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006dbc:	4b9e      	ldr	r3, [pc, #632]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	f200 8087 	bhi.w	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006dce:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006de9 	.word	0x08006de9
 8006dd8:	08006e11 	.word	0x08006e11
 8006ddc:	08006e39 	.word	0x08006e39
 8006de0:	08006ed5 	.word	0x08006ed5
 8006de4:	08006e61 	.word	0x08006e61
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006de8:	4b93      	ldr	r3, [pc, #588]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006df0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006df4:	d108      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 f810 	bl	8007e20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e04:	f000 bd45 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e0c:	f000 bd41 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e10:	4b89      	ldr	r3, [pc, #548]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e1c:	d108      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e1e:	f107 0318 	add.w	r3, r7, #24
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fd54 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e2c:	f000 bd31 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e34:	f000 bd2d 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e38:	4b7f      	ldr	r3, [pc, #508]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e44:	d108      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e46:	f107 030c 	add.w	r3, r7, #12
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fe94 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e54:	f000 bd1d 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e5c:	f000 bd19 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e60:	4b75      	ldr	r3, [pc, #468]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e68:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e6a:	4b73      	ldr	r3, [pc, #460]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d10c      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d109      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e7c:	4b6e      	ldr	r3, [pc, #440]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	08db      	lsrs	r3, r3, #3
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	4a6d      	ldr	r2, [pc, #436]	@ (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e8e:	e01f      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e90:	4b69      	ldr	r3, [pc, #420]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e9c:	d106      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ea4:	d102      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ea6:	4b66      	ldr	r3, [pc, #408]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eaa:	e011      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006eac:	4b62      	ldr	r3, [pc, #392]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb8:	d106      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ec0:	d102      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ec2:	4b60      	ldr	r3, [pc, #384]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ec6:	e003      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ecc:	f000 bce1 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ed0:	f000 bcdf 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed8:	f000 bcdb 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee0:	f000 bcd7 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006eec:	430b      	orrs	r3, r1
 8006eee:	f040 80ad 	bne.w	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006ef2:	4b51      	ldr	r3, [pc, #324]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006efa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f02:	d056      	beq.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f0a:	f200 8090 	bhi.w	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f12:	f000 8088 	beq.w	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f1a:	f200 8088 	bhi.w	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	2b80      	cmp	r3, #128	@ 0x80
 8006f22:	d032      	beq.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f26:	2b80      	cmp	r3, #128	@ 0x80
 8006f28:	f200 8081 	bhi.w	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	2b40      	cmp	r3, #64	@ 0x40
 8006f36:	d014      	beq.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006f38:	e079      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f46:	d108      	bne.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 ff67 	bl	8007e20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f56:	f000 bc9c 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f5e:	f000 bc98 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f62:	4b35      	ldr	r3, [pc, #212]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f6e:	d108      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f70:	f107 0318 	add.w	r3, r7, #24
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fcab 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f7e:	f000 bc88 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f86:	f000 bc84 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f96:	d108      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f98:	f107 030c 	add.w	r3, r7, #12
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fdeb 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa6:	f000 bc74 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fae:	f000 bc70 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fb2:	4b21      	ldr	r3, [pc, #132]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d10c      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fce:	4b1a      	ldr	r3, [pc, #104]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	08db      	lsrs	r3, r3, #3
 8006fd4:	f003 0303 	and.w	r3, r3, #3
 8006fd8:	4a18      	ldr	r2, [pc, #96]	@ (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fda:	fa22 f303 	lsr.w	r3, r2, r3
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fe0:	e01f      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fe2:	4b15      	ldr	r3, [pc, #84]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fee:	d106      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ff6:	d102      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ff8:	4b11      	ldr	r3, [pc, #68]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ffc:	e011      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800700a:	d106      	bne.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800700c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007012:	d102      	bne.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007014:	4b0b      	ldr	r3, [pc, #44]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007018:	e003      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800701e:	f000 bc38 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007022:	f000 bc36 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007026:	4b08      	ldr	r3, [pc, #32]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800702a:	f000 bc32 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800702e:	2300      	movs	r3, #0
 8007030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007032:	f000 bc2e 	b.w	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007036:	bf00      	nop
 8007038:	58024400 	.word	0x58024400
 800703c:	03d09000 	.word	0x03d09000
 8007040:	003d0900 	.word	0x003d0900
 8007044:	017d7840 	.word	0x017d7840
 8007048:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800704c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007050:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007054:	430b      	orrs	r3, r1
 8007056:	f040 809c 	bne.w	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800705a:	4b9e      	ldr	r3, [pc, #632]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800705c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800705e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007062:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800706a:	d054      	beq.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800706c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007072:	f200 808b 	bhi.w	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800707c:	f000 8083 	beq.w	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007086:	f200 8081 	bhi.w	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007090:	d02f      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007098:	d878      	bhi.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	2b00      	cmp	r3, #0
 800709e:	d004      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80070a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070a6:	d012      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80070a8:	e070      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070aa:	4b8a      	ldr	r3, [pc, #552]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070b6:	d107      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 feaf 	bl	8007e20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c6:	e3e4      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070cc:	e3e1      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ce:	4b81      	ldr	r3, [pc, #516]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070da:	d107      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070dc:	f107 0318 	add.w	r3, r7, #24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fbf5 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ea:	e3d2      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f0:	e3cf      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070f2:	4b78      	ldr	r3, [pc, #480]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070fe:	d107      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007100:	f107 030c 	add.w	r3, r7, #12
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fd37 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800710e:	e3c0      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007114:	e3bd      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007116:	4b6f      	ldr	r3, [pc, #444]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800711a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007120:	4b6c      	ldr	r3, [pc, #432]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b04      	cmp	r3, #4
 800712a:	d10c      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800712c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712e:	2b00      	cmp	r3, #0
 8007130:	d109      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007132:	4b68      	ldr	r3, [pc, #416]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	08db      	lsrs	r3, r3, #3
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	4a66      	ldr	r2, [pc, #408]	@ (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800713e:	fa22 f303 	lsr.w	r3, r2, r3
 8007142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007144:	e01e      	b.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007146:	4b63      	ldr	r3, [pc, #396]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007152:	d106      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800715a:	d102      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800715c:	4b5f      	ldr	r3, [pc, #380]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800715e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007160:	e010      	b.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007162:	4b5c      	ldr	r3, [pc, #368]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800716a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800716e:	d106      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007176:	d102      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007178:	4b59      	ldr	r3, [pc, #356]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800717a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800717c:	e002      	b.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007182:	e386      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007184:	e385      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007186:	4b57      	ldr	r3, [pc, #348]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800718a:	e382      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007190:	e37f      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007196:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800719a:	430b      	orrs	r3, r1
 800719c:	f040 80a7 	bne.w	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80071a0:	4b4c      	ldr	r3, [pc, #304]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80071a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071b0:	d055      	beq.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071b8:	f200 8096 	bhi.w	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071c2:	f000 8084 	beq.w	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071cc:	f200 808c 	bhi.w	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071d6:	d030      	beq.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071de:	f200 8083 	bhi.w	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071ee:	d012      	beq.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80071f0:	e07a      	b.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071f2:	4b38      	ldr	r3, [pc, #224]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071fe:	d107      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007200:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fe0b 	bl	8007e20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800720e:	e340      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007210:	2300      	movs	r3, #0
 8007212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007214:	e33d      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007216:	4b2f      	ldr	r3, [pc, #188]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800721e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007222:	d107      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007224:	f107 0318 	add.w	r3, r7, #24
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fb51 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007232:	e32e      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007238:	e32b      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800723a:	4b26      	ldr	r3, [pc, #152]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007246:	d107      	bne.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007248:	f107 030c 	add.w	r3, r7, #12
 800724c:	4618      	mov	r0, r3
 800724e:	f000 fc93 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007256:	e31c      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800725c:	e319      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800725e:	4b1d      	ldr	r3, [pc, #116]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007262:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007268:	4b1a      	ldr	r3, [pc, #104]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b04      	cmp	r3, #4
 8007272:	d10c      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800727a:	4b16      	ldr	r3, [pc, #88]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	08db      	lsrs	r3, r3, #3
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	4a14      	ldr	r2, [pc, #80]	@ (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007286:	fa22 f303 	lsr.w	r3, r2, r3
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800728c:	e01e      	b.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800728e:	4b11      	ldr	r3, [pc, #68]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800729a:	d106      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800729c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072a2:	d102      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072a4:	4b0d      	ldr	r3, [pc, #52]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80072a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072a8:	e010      	b.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072aa:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072b6:	d106      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80072b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072be:	d102      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072c0:	4b07      	ldr	r3, [pc, #28]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072c4:	e002      	b.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072ca:	e2e2      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072cc:	e2e1      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072ce:	4b05      	ldr	r3, [pc, #20]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80072d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d2:	e2de      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072d4:	58024400 	.word	0x58024400
 80072d8:	03d09000 	.word	0x03d09000
 80072dc:	003d0900 	.word	0x003d0900
 80072e0:	017d7840 	.word	0x017d7840
 80072e4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ec:	e2d1      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80072f6:	430b      	orrs	r3, r1
 80072f8:	f040 809c 	bne.w	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80072fc:	4b93      	ldr	r3, [pc, #588]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007300:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007304:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007308:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800730c:	d054      	beq.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800730e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007314:	f200 808b 	bhi.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800731e:	f000 8083 	beq.w	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007324:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007328:	f200 8081 	bhi.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007332:	d02f      	beq.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800733a:	d878      	bhi.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800733c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733e:	2b00      	cmp	r3, #0
 8007340:	d004      	beq.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007348:	d012      	beq.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800734a:	e070      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800734c:	4b7f      	ldr	r3, [pc, #508]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007354:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007358:	d107      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800735a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fd5e 	bl	8007e20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007368:	e293      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800736e:	e290      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007370:	4b76      	ldr	r3, [pc, #472]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007378:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800737c:	d107      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800737e:	f107 0318 	add.w	r3, r7, #24
 8007382:	4618      	mov	r0, r3
 8007384:	f000 faa4 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800738c:	e281      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007392:	e27e      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007394:	4b6d      	ldr	r3, [pc, #436]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800739c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073a0:	d107      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073a2:	f107 030c 	add.w	r3, r7, #12
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fbe6 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073b0:	e26f      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073b6:	e26c      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073b8:	4b64      	ldr	r3, [pc, #400]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073c2:	4b62      	ldr	r3, [pc, #392]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d10c      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80073ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d109      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073d4:	4b5d      	ldr	r3, [pc, #372]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	08db      	lsrs	r3, r3, #3
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	4a5c      	ldr	r2, [pc, #368]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
 80073e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073e6:	e01e      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073e8:	4b58      	ldr	r3, [pc, #352]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073f4:	d106      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80073f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073fc:	d102      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073fe:	4b55      	ldr	r3, [pc, #340]	@ (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007402:	e010      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007404:	4b51      	ldr	r3, [pc, #324]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800740c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007410:	d106      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007418:	d102      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800741a:	4b4f      	ldr	r3, [pc, #316]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800741c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800741e:	e002      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007424:	e235      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007426:	e234      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007428:	4b4c      	ldr	r3, [pc, #304]	@ (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800742c:	e231      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007432:	e22e      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007438:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800743c:	430b      	orrs	r3, r1
 800743e:	f040 808f 	bne.w	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007442:	4b42      	ldr	r3, [pc, #264]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007446:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800744a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800744c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007452:	d06b      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800745a:	d874      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800745c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007462:	d056      	beq.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800746a:	d86c      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007472:	d03b      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800747a:	d864      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007482:	d021      	beq.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800748a:	d85c      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800748c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748e:	2b00      	cmp	r3, #0
 8007490:	d004      	beq.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007498:	d004      	beq.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800749a:	e054      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800749c:	f7fe fa0c 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 80074a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074a2:	e1f6      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074a4:	4b29      	ldr	r3, [pc, #164]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074b0:	d107      	bne.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074b2:	f107 0318 	add.w	r3, r7, #24
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fa0a 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074c0:	e1e7      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c6:	e1e4      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074c8:	4b20      	ldr	r3, [pc, #128]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074d4:	d107      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d6:	f107 030c 	add.w	r3, r7, #12
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fb4c 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074e4:	e1d5      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ea:	e1d2      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074ec:	4b17      	ldr	r3, [pc, #92]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d109      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074f8:	4b14      	ldr	r3, [pc, #80]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	08db      	lsrs	r3, r3, #3
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	4a13      	ldr	r2, [pc, #76]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
 8007508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800750a:	e1c2      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007510:	e1bf      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007512:	4b0e      	ldr	r3, [pc, #56]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800751a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800751e:	d102      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007520:	4b0c      	ldr	r3, [pc, #48]	@ (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007524:	e1b5      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752a:	e1b2      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800752c:	4b07      	ldr	r3, [pc, #28]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007538:	d102      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800753a:	4b07      	ldr	r3, [pc, #28]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800753c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800753e:	e1a8      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007544:	e1a5      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754a:	e1a2      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800754c:	58024400 	.word	0x58024400
 8007550:	03d09000 	.word	0x03d09000
 8007554:	003d0900 	.word	0x003d0900
 8007558:	017d7840 	.word	0x017d7840
 800755c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007564:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007568:	430b      	orrs	r3, r1
 800756a:	d173      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800756c:	4b9c      	ldr	r3, [pc, #624]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800756e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007570:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007574:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800757c:	d02f      	beq.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800757e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007584:	d863      	bhi.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800758c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007592:	d012      	beq.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007594:	e05b      	b.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007596:	4b92      	ldr	r3, [pc, #584]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800759e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075a2:	d107      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a4:	f107 0318 	add.w	r3, r7, #24
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f991 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b2:	e16e      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075b8:	e16b      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075ba:	4b89      	ldr	r3, [pc, #548]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075c6:	d107      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075c8:	f107 030c 	add.w	r3, r7, #12
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fad3 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d6:	e15c      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075dc:	e159      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075de:	4b80      	ldr	r3, [pc, #512]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075e8:	4b7d      	ldr	r3, [pc, #500]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d10c      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80075f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075fa:	4b79      	ldr	r3, [pc, #484]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	08db      	lsrs	r3, r3, #3
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	4a77      	ldr	r2, [pc, #476]	@ (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007606:	fa22 f303 	lsr.w	r3, r2, r3
 800760a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800760c:	e01e      	b.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800760e:	4b74      	ldr	r3, [pc, #464]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800761a:	d106      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800761c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007622:	d102      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007624:	4b70      	ldr	r3, [pc, #448]	@ (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007628:	e010      	b.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800762a:	4b6d      	ldr	r3, [pc, #436]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007636:	d106      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800763a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800763e:	d102      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007640:	4b6a      	ldr	r3, [pc, #424]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007644:	e002      	b.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800764a:	e122      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800764c:	e121      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007652:	e11e      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007658:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800765c:	430b      	orrs	r3, r1
 800765e:	d133      	bne.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007660:	4b5f      	ldr	r3, [pc, #380]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007668:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800766a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766c:	2b00      	cmp	r3, #0
 800766e:	d004      	beq.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007676:	d012      	beq.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007678:	e023      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800767a:	4b59      	ldr	r3, [pc, #356]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007682:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007686:	d107      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fbc7 	bl	8007e20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007696:	e0fc      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800769c:	e0f9      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800769e:	4b50      	ldr	r3, [pc, #320]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076aa:	d107      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ac:	f107 0318 	add.w	r3, r7, #24
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 f90d 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ba:	e0ea      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c0:	e0e7      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c6:	e0e4      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80076c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076cc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80076d0:	430b      	orrs	r3, r1
 80076d2:	f040 808d 	bne.w	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80076d6:	4b42      	ldr	r3, [pc, #264]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076da:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80076de:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076e6:	d06b      	beq.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076ee:	d874      	bhi.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80076f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f6:	d056      	beq.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076fe:	d86c      	bhi.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007702:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007706:	d03b      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800770e:	d864      	bhi.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007716:	d021      	beq.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800771e:	d85c      	bhi.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007722:	2b00      	cmp	r3, #0
 8007724:	d004      	beq.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800772c:	d004      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800772e:	e054      	b.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007730:	f000 f8b8 	bl	80078a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007734:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007736:	e0ac      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007738:	4b29      	ldr	r3, [pc, #164]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007740:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007744:	d107      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007746:	f107 0318 	add.w	r3, r7, #24
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f8c0 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007754:	e09d      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800775a:	e09a      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800775c:	4b20      	ldr	r3, [pc, #128]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007768:	d107      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800776a:	f107 030c 	add.w	r3, r7, #12
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fa02 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007778:	e08b      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800777e:	e088      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007780:	4b17      	ldr	r3, [pc, #92]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b04      	cmp	r3, #4
 800778a:	d109      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800778c:	4b14      	ldr	r3, [pc, #80]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	08db      	lsrs	r3, r3, #3
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	4a13      	ldr	r2, [pc, #76]	@ (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
 800779c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800779e:	e078      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a4:	e075      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80077a6:	4b0e      	ldr	r3, [pc, #56]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077b2:	d102      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80077b4:	4b0c      	ldr	r3, [pc, #48]	@ (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b8:	e06b      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077be:	e068      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077c0:	4b07      	ldr	r3, [pc, #28]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077cc:	d102      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80077ce:	4b07      	ldr	r3, [pc, #28]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80077d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077d2:	e05e      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d8:	e05b      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077de:	e058      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077e0:	58024400 	.word	0x58024400
 80077e4:	03d09000 	.word	0x03d09000
 80077e8:	003d0900 	.word	0x003d0900
 80077ec:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80077f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80077f8:	430b      	orrs	r3, r1
 80077fa:	d148      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80077fc:	4b27      	ldr	r3, [pc, #156]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80077fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007800:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007804:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800780c:	d02a      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800780e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007814:	d838      	bhi.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800781c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007822:	d00d      	beq.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007824:	e030      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007826:	4b1d      	ldr	r3, [pc, #116]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800782e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007832:	d102      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007834:	4b1a      	ldr	r3, [pc, #104]	@ (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007838:	e02b      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800783e:	e028      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007840:	4b16      	ldr	r3, [pc, #88]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007848:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800784c:	d107      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800784e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fae4 	bl	8007e20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800785c:	e019      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007862:	e016      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007864:	4b0d      	ldr	r3, [pc, #52]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800786c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007870:	d107      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007872:	f107 0318 	add.w	r3, r7, #24
 8007876:	4618      	mov	r0, r3
 8007878:	f000 f82a 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007880:	e007      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007886:	e004      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800788c:	e001      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007894:	4618      	mov	r0, r3
 8007896:	3740      	adds	r7, #64	@ 0x40
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	58024400 	.word	0x58024400
 80078a0:	017d7840 	.word	0x017d7840

080078a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80078a8:	f7fd ffd6 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80078ac:	4602      	mov	r2, r0
 80078ae:	4b06      	ldr	r3, [pc, #24]	@ (80078c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	091b      	lsrs	r3, r3, #4
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	4904      	ldr	r1, [pc, #16]	@ (80078cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80078ba:	5ccb      	ldrb	r3, [r1, r3]
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	58024400 	.word	0x58024400
 80078cc:	0800cfc4 	.word	0x0800cfc4

080078d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b089      	sub	sp, #36	@ 0x24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078d8:	4ba1      	ldr	r3, [pc, #644]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80078e2:	4b9f      	ldr	r3, [pc, #636]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e6:	0b1b      	lsrs	r3, r3, #12
 80078e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80078ee:	4b9c      	ldr	r3, [pc, #624]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f2:	091b      	lsrs	r3, r3, #4
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80078fa:	4b99      	ldr	r3, [pc, #612]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078fe:	08db      	lsrs	r3, r3, #3
 8007900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	fb02 f303 	mul.w	r3, r2, r3
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 8111 	beq.w	8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b02      	cmp	r3, #2
 8007922:	f000 8083 	beq.w	8007a2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b02      	cmp	r3, #2
 800792a:	f200 80a1 	bhi.w	8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d056      	beq.n	80079e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800793a:	e099      	b.n	8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800793c:	4b88      	ldr	r3, [pc, #544]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d02d      	beq.n	80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007948:	4b85      	ldr	r3, [pc, #532]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	08db      	lsrs	r3, r3, #3
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	4a84      	ldr	r2, [pc, #528]	@ (8007b64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007954:	fa22 f303 	lsr.w	r3, r2, r3
 8007958:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	ee07 3a90 	vmov	s15, r3
 8007960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007972:	4b7b      	ldr	r3, [pc, #492]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007982:	ed97 6a03 	vldr	s12, [r7, #12]
 8007986:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800798a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80079a2:	e087      	b.n	8007ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80079b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079e6:	e065      	b.n	8007ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079fa:	4b59      	ldr	r3, [pc, #356]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a2a:	e043      	b.n	8007ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a3e:	4b48      	ldr	r3, [pc, #288]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a6e:	e021      	b.n	8007ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a82:	4b37      	ldr	r3, [pc, #220]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ab2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab8:	0a5b      	lsrs	r3, r3, #9
 8007aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ada:	ee17 2a90 	vmov	r2, s15
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae6:	0c1b      	lsrs	r3, r3, #16
 8007ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aec:	ee07 3a90 	vmov	s15, r3
 8007af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007af8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b08:	ee17 2a90 	vmov	r2, s15
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b10:	4b13      	ldr	r3, [pc, #76]	@ (8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b14:	0e1b      	lsrs	r3, r3, #24
 8007b16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b36:	ee17 2a90 	vmov	r2, s15
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b3e:	e008      	b.n	8007b52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	609a      	str	r2, [r3, #8]
}
 8007b52:	bf00      	nop
 8007b54:	3724      	adds	r7, #36	@ 0x24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	58024400 	.word	0x58024400
 8007b64:	03d09000 	.word	0x03d09000
 8007b68:	46000000 	.word	0x46000000
 8007b6c:	4c742400 	.word	0x4c742400
 8007b70:	4a742400 	.word	0x4a742400
 8007b74:	4bbebc20 	.word	0x4bbebc20

08007b78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b089      	sub	sp, #36	@ 0x24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b80:	4ba1      	ldr	r3, [pc, #644]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007b8a:	4b9f      	ldr	r3, [pc, #636]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8e:	0d1b      	lsrs	r3, r3, #20
 8007b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b96:	4b9c      	ldr	r3, [pc, #624]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9a:	0a1b      	lsrs	r3, r3, #8
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007ba2:	4b99      	ldr	r3, [pc, #612]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba6:	08db      	lsrs	r3, r3, #3
 8007ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	fb02 f303 	mul.w	r3, r2, r3
 8007bb2:	ee07 3a90 	vmov	s15, r3
 8007bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8111 	beq.w	8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	f000 8083 	beq.w	8007cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	f200 80a1 	bhi.w	8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d056      	beq.n	8007c90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007be2:	e099      	b.n	8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007be4:	4b88      	ldr	r3, [pc, #544]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d02d      	beq.n	8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bf0:	4b85      	ldr	r3, [pc, #532]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	08db      	lsrs	r3, r3, #3
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	4a84      	ldr	r2, [pc, #528]	@ (8007e0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8007c00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	ee07 3a90 	vmov	s15, r3
 8007c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c4a:	e087      	b.n	8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c66:	ee07 3a90 	vmov	s15, r3
 8007c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c8e:	e065      	b.n	8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca2:	4b59      	ldr	r3, [pc, #356]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cd2:	e043      	b.n	8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce6:	4b48      	ldr	r3, [pc, #288]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d16:	e021      	b.n	8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d2a:	4b37      	ldr	r3, [pc, #220]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d60:	0a5b      	lsrs	r3, r3, #9
 8007d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d82:	ee17 2a90 	vmov	r2, s15
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8e:	0c1b      	lsrs	r3, r3, #16
 8007d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d94:	ee07 3a90 	vmov	s15, r3
 8007d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007da0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007db0:	ee17 2a90 	vmov	r2, s15
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007db8:	4b13      	ldr	r3, [pc, #76]	@ (8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dbc:	0e1b      	lsrs	r3, r3, #24
 8007dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dde:	ee17 2a90 	vmov	r2, s15
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007de6:	e008      	b.n	8007dfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	609a      	str	r2, [r3, #8]
}
 8007dfa:	bf00      	nop
 8007dfc:	3724      	adds	r7, #36	@ 0x24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	58024400 	.word	0x58024400
 8007e0c:	03d09000 	.word	0x03d09000
 8007e10:	46000000 	.word	0x46000000
 8007e14:	4c742400 	.word	0x4c742400
 8007e18:	4a742400 	.word	0x4a742400
 8007e1c:	4bbebc20 	.word	0x4bbebc20

08007e20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b089      	sub	sp, #36	@ 0x24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e28:	4ba0      	ldr	r3, [pc, #640]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2c:	f003 0303 	and.w	r3, r3, #3
 8007e30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007e32:	4b9e      	ldr	r3, [pc, #632]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e36:	091b      	lsrs	r3, r3, #4
 8007e38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007e3e:	4b9b      	ldr	r3, [pc, #620]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e48:	4b98      	ldr	r3, [pc, #608]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4c:	08db      	lsrs	r3, r3, #3
 8007e4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	fb02 f303 	mul.w	r3, r2, r3
 8007e58:	ee07 3a90 	vmov	s15, r3
 8007e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 8111 	beq.w	800808e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	f000 8083 	beq.w	8007f7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	f200 80a1 	bhi.w	8007fbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d056      	beq.n	8007f36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007e88:	e099      	b.n	8007fbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e8a:	4b88      	ldr	r3, [pc, #544]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0320 	and.w	r3, r3, #32
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d02d      	beq.n	8007ef2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e96:	4b85      	ldr	r3, [pc, #532]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	08db      	lsrs	r3, r3, #3
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	4a83      	ldr	r2, [pc, #524]	@ (80080b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	ee07 3a90 	vmov	s15, r3
 8007eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec0:	4b7a      	ldr	r3, [pc, #488]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ed4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80080b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ef0:	e087      	b.n	8008002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80080b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f04:	4b69      	ldr	r3, [pc, #420]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f18:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80080b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f34:	e065      	b.n	8008002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	ee07 3a90 	vmov	s15, r3
 8007f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f40:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80080bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f48:	4b58      	ldr	r3, [pc, #352]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f50:	ee07 3a90 	vmov	s15, r3
 8007f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f5c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80080b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f78:	e043      	b.n	8008002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	ee07 3a90 	vmov	s15, r3
 8007f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f84:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80080c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f8c:	4b47      	ldr	r3, [pc, #284]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fa0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80080b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fbc:	e021      	b.n	8008002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	ee07 3a90 	vmov	s15, r3
 8007fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80080b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fd0:	4b36      	ldr	r3, [pc, #216]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd8:	ee07 3a90 	vmov	s15, r3
 8007fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80080b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008000:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008002:	4b2a      	ldr	r3, [pc, #168]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008006:	0a5b      	lsrs	r3, r3, #9
 8008008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800800c:	ee07 3a90 	vmov	s15, r3
 8008010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008014:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800801c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008028:	ee17 2a90 	vmov	r2, s15
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008030:	4b1e      	ldr	r3, [pc, #120]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800804a:	edd7 6a07 	vldr	s13, [r7, #28]
 800804e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008056:	ee17 2a90 	vmov	r2, s15
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800805e:	4b13      	ldr	r3, [pc, #76]	@ (80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008062:	0e1b      	lsrs	r3, r3, #24
 8008064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008068:	ee07 3a90 	vmov	s15, r3
 800806c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008078:	edd7 6a07 	vldr	s13, [r7, #28]
 800807c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008084:	ee17 2a90 	vmov	r2, s15
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800808c:	e008      	b.n	80080a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	609a      	str	r2, [r3, #8]
}
 80080a0:	bf00      	nop
 80080a2:	3724      	adds	r7, #36	@ 0x24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	58024400 	.word	0x58024400
 80080b0:	03d09000 	.word	0x03d09000
 80080b4:	46000000 	.word	0x46000000
 80080b8:	4c742400 	.word	0x4c742400
 80080bc:	4a742400 	.word	0x4a742400
 80080c0:	4bbebc20 	.word	0x4bbebc20

080080c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080d2:	4b53      	ldr	r3, [pc, #332]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80080d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d101      	bne.n	80080e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e099      	b.n	8008216 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80080e2:	4b4f      	ldr	r3, [pc, #316]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80080e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ee:	f7f9 f91f 	bl	8001330 <HAL_GetTick>
 80080f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080f4:	e008      	b.n	8008108 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080f6:	f7f9 f91b 	bl	8001330 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d901      	bls.n	8008108 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e086      	b.n	8008216 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008108:	4b45      	ldr	r3, [pc, #276]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1f0      	bne.n	80080f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008114:	4b42      	ldr	r3, [pc, #264]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 8008116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008118:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	031b      	lsls	r3, r3, #12
 8008122:	493f      	ldr	r1, [pc, #252]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 8008124:	4313      	orrs	r3, r2
 8008126:	628b      	str	r3, [r1, #40]	@ 0x28
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	3b01      	subs	r3, #1
 800812e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	3b01      	subs	r3, #1
 8008138:	025b      	lsls	r3, r3, #9
 800813a:	b29b      	uxth	r3, r3
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	3b01      	subs	r3, #1
 8008144:	041b      	lsls	r3, r3, #16
 8008146:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	3b01      	subs	r3, #1
 8008152:	061b      	lsls	r3, r3, #24
 8008154:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008158:	4931      	ldr	r1, [pc, #196]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 800815a:	4313      	orrs	r3, r2
 800815c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800815e:	4b30      	ldr	r3, [pc, #192]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 8008160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008162:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	492d      	ldr	r1, [pc, #180]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 800816c:	4313      	orrs	r3, r2
 800816e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008170:	4b2b      	ldr	r3, [pc, #172]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	f023 0220 	bic.w	r2, r3, #32
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	4928      	ldr	r1, [pc, #160]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 800817e:	4313      	orrs	r3, r2
 8008180:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008182:	4b27      	ldr	r3, [pc, #156]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 8008184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008186:	4a26      	ldr	r2, [pc, #152]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 8008188:	f023 0310 	bic.w	r3, r3, #16
 800818c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800818e:	4b24      	ldr	r3, [pc, #144]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 8008190:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008192:	4b24      	ldr	r3, [pc, #144]	@ (8008224 <RCCEx_PLL2_Config+0x160>)
 8008194:	4013      	ands	r3, r2
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	69d2      	ldr	r2, [r2, #28]
 800819a:	00d2      	lsls	r2, r2, #3
 800819c:	4920      	ldr	r1, [pc, #128]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80081a8:	f043 0310 	orr.w	r3, r3, #16
 80081ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d106      	bne.n	80081c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80081b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b8:	4a19      	ldr	r2, [pc, #100]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80081ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081c0:	e00f      	b.n	80081e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d106      	bne.n	80081d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80081c8:	4b15      	ldr	r3, [pc, #84]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80081ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081cc:	4a14      	ldr	r2, [pc, #80]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80081ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081d4:	e005      	b.n	80081e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80081d6:	4b12      	ldr	r3, [pc, #72]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80081d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081da:	4a11      	ldr	r2, [pc, #68]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80081dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80081e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a0e      	ldr	r2, [pc, #56]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 80081e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ee:	f7f9 f89f 	bl	8001330 <HAL_GetTick>
 80081f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081f4:	e008      	b.n	8008208 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081f6:	f7f9 f89b 	bl	8001330 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d901      	bls.n	8008208 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e006      	b.n	8008216 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008208:	4b05      	ldr	r3, [pc, #20]	@ (8008220 <RCCEx_PLL2_Config+0x15c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0f0      	beq.n	80081f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	58024400 	.word	0x58024400
 8008224:	ffff0007 	.word	0xffff0007

08008228 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008236:	4b53      	ldr	r3, [pc, #332]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 8008238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	2b03      	cmp	r3, #3
 8008240:	d101      	bne.n	8008246 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e099      	b.n	800837a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008246:	4b4f      	ldr	r3, [pc, #316]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a4e      	ldr	r2, [pc, #312]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 800824c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008252:	f7f9 f86d 	bl	8001330 <HAL_GetTick>
 8008256:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008258:	e008      	b.n	800826c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800825a:	f7f9 f869 	bl	8001330 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e086      	b.n	800837a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800826c:	4b45      	ldr	r3, [pc, #276]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1f0      	bne.n	800825a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008278:	4b42      	ldr	r3, [pc, #264]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 800827a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	051b      	lsls	r3, r3, #20
 8008286:	493f      	ldr	r1, [pc, #252]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 8008288:	4313      	orrs	r3, r2
 800828a:	628b      	str	r3, [r1, #40]	@ 0x28
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	3b01      	subs	r3, #1
 8008292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	3b01      	subs	r3, #1
 800829c:	025b      	lsls	r3, r3, #9
 800829e:	b29b      	uxth	r3, r3
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	041b      	lsls	r3, r3, #16
 80082aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	061b      	lsls	r3, r3, #24
 80082b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082bc:	4931      	ldr	r1, [pc, #196]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082c2:	4b30      	ldr	r3, [pc, #192]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 80082c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	492d      	ldr	r1, [pc, #180]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80082d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	4928      	ldr	r1, [pc, #160]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082e6:	4b27      	ldr	r3, [pc, #156]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ea:	4a26      	ldr	r2, [pc, #152]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 80082ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082f2:	4b24      	ldr	r3, [pc, #144]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 80082f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082f6:	4b24      	ldr	r3, [pc, #144]	@ (8008388 <RCCEx_PLL3_Config+0x160>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	69d2      	ldr	r2, [r2, #28]
 80082fe:	00d2      	lsls	r2, r2, #3
 8008300:	4920      	ldr	r1, [pc, #128]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 8008302:	4313      	orrs	r3, r2
 8008304:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008306:	4b1f      	ldr	r3, [pc, #124]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 8008308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830a:	4a1e      	ldr	r2, [pc, #120]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 800830c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008310:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008318:	4b1a      	ldr	r3, [pc, #104]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 800831a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831c:	4a19      	ldr	r2, [pc, #100]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 800831e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008322:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008324:	e00f      	b.n	8008346 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d106      	bne.n	800833a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800832c:	4b15      	ldr	r3, [pc, #84]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 800832e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008330:	4a14      	ldr	r2, [pc, #80]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 8008332:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008336:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008338:	e005      	b.n	8008346 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800833a:	4b12      	ldr	r3, [pc, #72]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 800833c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833e:	4a11      	ldr	r2, [pc, #68]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 8008340:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008344:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008346:	4b0f      	ldr	r3, [pc, #60]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a0e      	ldr	r2, [pc, #56]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 800834c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008352:	f7f8 ffed 	bl	8001330 <HAL_GetTick>
 8008356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008358:	e008      	b.n	800836c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800835a:	f7f8 ffe9 	bl	8001330 <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d901      	bls.n	800836c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e006      	b.n	800837a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800836c:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <RCCEx_PLL3_Config+0x15c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0f0      	beq.n	800835a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	58024400 	.word	0x58024400
 8008388:	ffff0007 	.word	0xffff0007

0800838c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b08a      	sub	sp, #40	@ 0x28
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e28e      	b.n	80088bc <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800839e:	f7f8 fff7 	bl	8001390 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d113      	bne.n	80083d4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a96      	ldr	r2, [pc, #600]	@ (800860c <HAL_SAI_Init+0x280>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d004      	beq.n	80083c0 <HAL_SAI_Init+0x34>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a95      	ldr	r2, [pc, #596]	@ (8008610 <HAL_SAI_Init+0x284>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d107      	bne.n	80083d0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d103      	bne.n	80083d0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e273      	b.n	80088bc <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a8c      	ldr	r2, [pc, #560]	@ (800860c <HAL_SAI_Init+0x280>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d004      	beq.n	80083e8 <HAL_SAI_Init+0x5c>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a8c      	ldr	r2, [pc, #560]	@ (8008614 <HAL_SAI_Init+0x288>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d102      	bne.n	80083ee <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80083e8:	4b8b      	ldr	r3, [pc, #556]	@ (8008618 <HAL_SAI_Init+0x28c>)
 80083ea:	61bb      	str	r3, [r7, #24]
 80083ec:	e028      	b.n	8008440 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a8a      	ldr	r2, [pc, #552]	@ (800861c <HAL_SAI_Init+0x290>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d004      	beq.n	8008402 <HAL_SAI_Init+0x76>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a88      	ldr	r2, [pc, #544]	@ (8008620 <HAL_SAI_Init+0x294>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d102      	bne.n	8008408 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8008402:	4b88      	ldr	r3, [pc, #544]	@ (8008624 <HAL_SAI_Init+0x298>)
 8008404:	61bb      	str	r3, [r7, #24]
 8008406:	e01b      	b.n	8008440 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a86      	ldr	r2, [pc, #536]	@ (8008628 <HAL_SAI_Init+0x29c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d004      	beq.n	800841c <HAL_SAI_Init+0x90>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a85      	ldr	r2, [pc, #532]	@ (800862c <HAL_SAI_Init+0x2a0>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d102      	bne.n	8008422 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800841c:	4b84      	ldr	r3, [pc, #528]	@ (8008630 <HAL_SAI_Init+0x2a4>)
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	e00e      	b.n	8008440 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a7a      	ldr	r2, [pc, #488]	@ (8008610 <HAL_SAI_Init+0x284>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d004      	beq.n	8008436 <HAL_SAI_Init+0xaa>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a80      	ldr	r2, [pc, #512]	@ (8008634 <HAL_SAI_Init+0x2a8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d102      	bne.n	800843c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8008436:	4b80      	ldr	r3, [pc, #512]	@ (8008638 <HAL_SAI_Init+0x2ac>)
 8008438:	61bb      	str	r3, [r7, #24]
 800843a:	e001      	b.n	8008440 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e23d      	b.n	80088bc <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7f8 fd25 	bl	8000ea4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fd72 	bl	8008f44 <SAI_Disable>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e228      	b.n	80088bc <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2202      	movs	r2, #2
 800846e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	2b02      	cmp	r3, #2
 8008478:	d00c      	beq.n	8008494 <HAL_SAI_Init+0x108>
 800847a:	2b02      	cmp	r3, #2
 800847c:	d80d      	bhi.n	800849a <HAL_SAI_Init+0x10e>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <HAL_SAI_Init+0xfc>
 8008482:	2b01      	cmp	r3, #1
 8008484:	d003      	beq.n	800848e <HAL_SAI_Init+0x102>
 8008486:	e008      	b.n	800849a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800848c:	e008      	b.n	80084a0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800848e:	2310      	movs	r3, #16
 8008490:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008492:	e005      	b.n	80084a0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008494:	2320      	movs	r3, #32
 8008496:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008498:	e002      	b.n	80084a0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800849e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	2b05      	cmp	r3, #5
 80084a6:	d832      	bhi.n	800850e <HAL_SAI_Init+0x182>
 80084a8:	a201      	add	r2, pc, #4	@ (adr r2, 80084b0 <HAL_SAI_Init+0x124>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084cf 	.word	0x080084cf
 80084b8:	080084d7 	.word	0x080084d7
 80084bc:	080084df 	.word	0x080084df
 80084c0:	080084ef 	.word	0x080084ef
 80084c4:	080084ff 	.word	0x080084ff
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61fb      	str	r3, [r7, #28]
      break;
 80084cc:	e022      	b.n	8008514 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80084ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084d2:	61fb      	str	r3, [r7, #28]
      break;
 80084d4:	e01e      	b.n	8008514 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80084d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084da:	61fb      	str	r3, [r7, #28]
      break;
 80084dc:	e01a      	b.n	8008514 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80084de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084e2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80084e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e6:	f043 0301 	orr.w	r3, r3, #1
 80084ea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80084ec:	e012      	b.n	8008514 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80084ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084f2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	f043 0302 	orr.w	r3, r3, #2
 80084fa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80084fc:	e00a      	b.n	8008514 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80084fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008502:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	f043 0303 	orr.w	r3, r3, #3
 800850a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800850c:	e002      	b.n	8008514 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	61fb      	str	r3, [r7, #28]
      break;
 8008512:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008518:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 80c5 	beq.w	80086ae <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a37      	ldr	r2, [pc, #220]	@ (800860c <HAL_SAI_Init+0x280>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d004      	beq.n	800853c <HAL_SAI_Init+0x1b0>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a37      	ldr	r2, [pc, #220]	@ (8008614 <HAL_SAI_Init+0x288>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d106      	bne.n	800854a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800853c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008540:	f04f 0100 	mov.w	r1, #0
 8008544:	f7fe fc2e 	bl	8006da4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008548:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a33      	ldr	r2, [pc, #204]	@ (800861c <HAL_SAI_Init+0x290>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d004      	beq.n	800855e <HAL_SAI_Init+0x1d2>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a31      	ldr	r2, [pc, #196]	@ (8008620 <HAL_SAI_Init+0x294>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d106      	bne.n	800856c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800855e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008562:	f04f 0100 	mov.w	r1, #0
 8008566:	f7fe fc1d 	bl	8006da4 <HAL_RCCEx_GetPeriphCLKFreq>
 800856a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a2d      	ldr	r2, [pc, #180]	@ (8008628 <HAL_SAI_Init+0x29c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d004      	beq.n	8008580 <HAL_SAI_Init+0x1f4>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a2c      	ldr	r2, [pc, #176]	@ (800862c <HAL_SAI_Init+0x2a0>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d106      	bne.n	800858e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008580:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008584:	f04f 0100 	mov.w	r1, #0
 8008588:	f7fe fc0c 	bl	8006da4 <HAL_RCCEx_GetPeriphCLKFreq>
 800858c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1f      	ldr	r2, [pc, #124]	@ (8008610 <HAL_SAI_Init+0x284>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d106      	bne.n	80085a6 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008598:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800859c:	f04f 0100 	mov.w	r1, #0
 80085a0:	f7fe fc00 	bl	8006da4 <HAL_RCCEx_GetPeriphCLKFreq>
 80085a4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a22      	ldr	r2, [pc, #136]	@ (8008634 <HAL_SAI_Init+0x2a8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d106      	bne.n	80085be <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80085b0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80085b4:	f04f 0100 	mov.w	r1, #0
 80085b8:	f7fe fbf4 	bl	8006da4 <HAL_RCCEx_GetPeriphCLKFreq>
 80085bc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80085c6:	d139      	bne.n	800863c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	d102      	bne.n	80085d6 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80085d0:	2340      	movs	r3, #64	@ 0x40
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e00a      	b.n	80085ec <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085da:	2b08      	cmp	r3, #8
 80085dc:	d103      	bne.n	80085e6 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80085de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	e002      	b.n	80085ec <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ea:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	4613      	mov	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	4619      	mov	r1, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	fb02 f303 	mul.w	r3, r2, r3
 8008602:	fbb1 f3f3 	udiv	r3, r1, r3
 8008606:	613b      	str	r3, [r7, #16]
 8008608:	e030      	b.n	800866c <HAL_SAI_Init+0x2e0>
 800860a:	bf00      	nop
 800860c:	40015804 	.word	0x40015804
 8008610:	58005404 	.word	0x58005404
 8008614:	40015824 	.word	0x40015824
 8008618:	40015800 	.word	0x40015800
 800861c:	40015c04 	.word	0x40015c04
 8008620:	40015c24 	.word	0x40015c24
 8008624:	40015c00 	.word	0x40015c00
 8008628:	40016004 	.word	0x40016004
 800862c:	40016024 	.word	0x40016024
 8008630:	40016000 	.word	0x40016000
 8008634:	58005424 	.word	0x58005424
 8008638:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008640:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008644:	d101      	bne.n	800864a <HAL_SAI_Init+0x2be>
 8008646:	2302      	movs	r3, #2
 8008648:	e000      	b.n	800864c <HAL_SAI_Init+0x2c0>
 800864a:	2301      	movs	r3, #1
 800864c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	4619      	mov	r1, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	fb02 f303 	mul.w	r3, r2, r3
 8008664:	021b      	lsls	r3, r3, #8
 8008666:	fbb1 f3f3 	udiv	r3, r1, r3
 800866a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	4a95      	ldr	r2, [pc, #596]	@ (80088c4 <HAL_SAI_Init+0x538>)
 8008670:	fba2 2303 	umull	r2, r3, r2, r3
 8008674:	08da      	lsrs	r2, r3, #3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800867a:	6939      	ldr	r1, [r7, #16]
 800867c:	4b91      	ldr	r3, [pc, #580]	@ (80088c4 <HAL_SAI_Init+0x538>)
 800867e:	fba3 2301 	umull	r2, r3, r3, r1
 8008682:	08da      	lsrs	r2, r3, #3
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	1aca      	subs	r2, r1, r3
 800868e:	2a08      	cmp	r2, #8
 8008690:	d904      	bls.n	800869c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d104      	bne.n	80086ae <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a8:	085a      	lsrs	r2, r3, #1
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_SAI_Init+0x332>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d109      	bne.n	80086d2 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d101      	bne.n	80086ca <HAL_SAI_Init+0x33e>
 80086c6:	2300      	movs	r3, #0
 80086c8:	e001      	b.n	80086ce <HAL_SAI_Init+0x342>
 80086ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086ce:	623b      	str	r3, [r7, #32]
 80086d0:	e008      	b.n	80086e4 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d102      	bne.n	80086e0 <HAL_SAI_Init+0x354>
 80086da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086de:	e000      	b.n	80086e2 <HAL_SAI_Init+0x356>
 80086e0:	2300      	movs	r3, #0
 80086e2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80086e4:	f7f8 fe54 	bl	8001390 <HAL_GetREVID>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086ee:	d331      	bcc.n	8008754 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6819      	ldr	r1, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4b73      	ldr	r3, [pc, #460]	@ (80088c8 <HAL_SAI_Init+0x53c>)
 80086fc:	400b      	ands	r3, r1
 80086fe:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6819      	ldr	r1, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800870e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008714:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800871a:	431a      	orrs	r2, r3
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008728:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008734:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873a:	051b      	lsls	r3, r3, #20
 800873c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008742:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e02d      	b.n	80087b0 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6819      	ldr	r1, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b5b      	ldr	r3, [pc, #364]	@ (80088cc <HAL_SAI_Init+0x540>)
 8008760:	400b      	ands	r3, r1
 8008762:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6819      	ldr	r1, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008772:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008778:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800877e:	431a      	orrs	r2, r3
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800878c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008798:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879e:	051b      	lsls	r3, r3, #20
 80087a0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80087a6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6859      	ldr	r1, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	4b45      	ldr	r3, [pc, #276]	@ (80088d0 <HAL_SAI_Init+0x544>)
 80087bc:	400b      	ands	r3, r1
 80087be:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6859      	ldr	r1, [r3, #4]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69da      	ldr	r2, [r3, #28]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6899      	ldr	r1, [r3, #8]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	4b3a      	ldr	r3, [pc, #232]	@ (80088d4 <HAL_SAI_Init+0x548>)
 80087ea:	400b      	ands	r3, r1
 80087ec:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6899      	ldr	r1, [r3, #8]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80087fe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8008804:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800880a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008810:	3b01      	subs	r3, #1
 8008812:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008814:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68d9      	ldr	r1, [r3, #12]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800882c:	400b      	ands	r3, r1
 800882e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68d9      	ldr	r1, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800883e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008844:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008846:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800884c:	3b01      	subs	r3, #1
 800884e:	021b      	lsls	r3, r3, #8
 8008850:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1e      	ldr	r2, [pc, #120]	@ (80088d8 <HAL_SAI_Init+0x54c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d004      	beq.n	800886e <HAL_SAI_Init+0x4e2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1c      	ldr	r2, [pc, #112]	@ (80088dc <HAL_SAI_Init+0x550>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d119      	bne.n	80088a2 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008872:	f023 0201 	bic.w	r2, r3, #1
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008880:	2b01      	cmp	r3, #1
 8008882:	d10e      	bne.n	80088a2 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800888c:	3b01      	subs	r3, #1
 800888e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008890:	431a      	orrs	r2, r3
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889a:	f043 0201 	orr.w	r2, r3, #1
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3728      	adds	r7, #40	@ 0x28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	cccccccd 	.word	0xcccccccd
 80088c8:	f005c010 	.word	0xf005c010
 80088cc:	f805c010 	.word	0xf805c010
 80088d0:	ffff1ff0 	.word	0xffff1ff0
 80088d4:	fff88000 	.word	0xfff88000
 80088d8:	40015804 	.word	0x40015804
 80088dc:	58005404 	.word	0x58005404

080088e0 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d101      	bne.n	80088fa <HAL_SAI_Abort+0x1a>
 80088f6:	2302      	movs	r3, #2
 80088f8:	e07d      	b.n	80089f6 <HAL_SAI_Abort+0x116>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fb1e 	bl	8008f44 <SAI_Disable>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800891c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008920:	d14f      	bne.n	80089c2 <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008930:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b12      	cmp	r3, #18
 800893c:	d11d      	bne.n	800897a <HAL_SAI_Abort+0x9a>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008944:	2b00      	cmp	r3, #0
 8008946:	d018      	beq.n	800897a <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894e:	4618      	mov	r0, r3
 8008950:	f7f9 fc78 	bl	8002244 <HAL_DMA_Abort>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00f      	beq.n	800897a <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008962:	2b80      	cmp	r3, #128	@ 0x80
 8008964:	d009      	beq.n	800897a <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008970:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b22      	cmp	r3, #34	@ 0x22
 8008984:	d11d      	bne.n	80089c2 <HAL_SAI_Abort+0xe2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800898c:	2b00      	cmp	r3, #0
 800898e:	d018      	beq.n	80089c2 <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008996:	4618      	mov	r0, r3
 8008998:	f7f9 fc54 	bl	8002244 <HAL_DMA_Abort>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00f      	beq.n	80089c2 <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089aa:	2b80      	cmp	r3, #128	@ 0x80
 80089ac:	d009      	beq.n	80089c2 <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2200      	movs	r2, #0
 80089c8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089d2:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0208 	orr.w	r2, r2, #8
 80089e2:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <HAL_SAI_Receive_DMA+0x1a>
 8008a14:	88fb      	ldrh	r3, [r7, #6]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e079      	b.n	8008b12 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d172      	bne.n	8008b10 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d101      	bne.n	8008a38 <HAL_SAI_Receive_DMA+0x38>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e06c      	b.n	8008b12 <HAL_SAI_Receive_DMA+0x112>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	88fa      	ldrh	r2, [r7, #6]
 8008a4a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	88fa      	ldrh	r2, [r7, #6]
 8008a52:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2222      	movs	r2, #34	@ 0x22
 8008a62:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8008b1c <HAL_SAI_Receive_DMA+0x11c>)
 8008a6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a76:	4a2a      	ldr	r2, [pc, #168]	@ (8008b20 <HAL_SAI_Receive_DMA+0x120>)
 8008a78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a80:	4a28      	ldr	r2, [pc, #160]	@ (8008b24 <HAL_SAI_Receive_DMA+0x124>)
 8008a82:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	331c      	adds	r3, #28
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008aa8:	f7f9 f962 	bl	8001d70 <HAL_DMA_Start_IT>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e029      	b.n	8008b12 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008abe:	2100      	movs	r1, #0
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 fa07 	bl	8008ed4 <SAI_InterruptFlag>
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691a      	ldr	r2, [r3, #16]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008ae4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d107      	bne.n	8008b04 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008b02:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	e000      	b.n	8008b12 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008b10:	2302      	movs	r3, #2
  }
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	08009019 	.word	0x08009019
 8008b20:	08008fb9 	.word	0x08008fb9
 8008b24:	08009035 	.word	0x08009035

08008b28 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 81a7 	beq.w	8008e8c <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f003 0308 	and.w	r3, r3, #8
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00a      	beq.n	8008b76 <HAL_SAI_IRQHandler+0x4e>
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f003 0308 	and.w	r3, r3, #8
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	4798      	blx	r3
 8008b74:	e18a      	b.n	8008e8c <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01e      	beq.n	8008bbe <HAL_SAI_IRQHandler+0x96>
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d019      	beq.n	8008bbe <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b22      	cmp	r3, #34	@ 0x22
 8008b9c:	d101      	bne.n	8008ba2 <HAL_SAI_IRQHandler+0x7a>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <HAL_SAI_IRQHandler+0x7c>
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f982 	bl	8008ec0 <HAL_SAI_ErrorCallback>
 8008bbc:	e166      	b.n	8008e8c <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d013      	beq.n	8008bf0 <HAL_SAI_IRQHandler+0xc8>
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00e      	beq.n	8008bf0 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 8153 	beq.w	8008e8c <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bec:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8008bee:	e14d      	b.n	8008e8c <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d05b      	beq.n	8008cb2 <HAL_SAI_IRQHandler+0x18a>
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f003 0320 	and.w	r3, r3, #32
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d056      	beq.n	8008cb2 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c12:	f043 0204 	orr.w	r2, r3, #4
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d03e      	beq.n	8008ca4 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d018      	beq.n	8008c62 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c36:	4a97      	ldr	r2, [pc, #604]	@ (8008e94 <HAL_SAI_IRQHandler+0x36c>)
 8008c38:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7f9 fe1d 	bl	8002880 <HAL_DMA_Abort_IT>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00a      	beq.n	8008c62 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f92f 	bl	8008ec0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 810a 	beq.w	8008e82 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c74:	4a87      	ldr	r2, [pc, #540]	@ (8008e94 <HAL_SAI_IRQHandler+0x36c>)
 8008c76:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7f9 fdfe 	bl	8002880 <HAL_DMA_Abort_IT>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80fb 	beq.w	8008e82 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f90f 	bl	8008ec0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008ca2:	e0ee      	b.n	8008e82 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff fe1b 	bl	80088e0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f908 	bl	8008ec0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008cb0:	e0e7      	b.n	8008e82 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d05b      	beq.n	8008d74 <HAL_SAI_IRQHandler+0x24c>
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d056      	beq.n	8008d74 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2240      	movs	r2, #64	@ 0x40
 8008ccc:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cd4:	f043 0208 	orr.w	r2, r3, #8
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d03e      	beq.n	8008d66 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d018      	beq.n	8008d24 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cf8:	4a66      	ldr	r2, [pc, #408]	@ (8008e94 <HAL_SAI_IRQHandler+0x36c>)
 8008cfa:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f9 fdbc 	bl	8002880 <HAL_DMA_Abort_IT>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f8ce 	bl	8008ec0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 80ab 	beq.w	8008e86 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d36:	4a57      	ldr	r2, [pc, #348]	@ (8008e94 <HAL_SAI_IRQHandler+0x36c>)
 8008d38:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7f9 fd9d 	bl	8002880 <HAL_DMA_Abort_IT>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f000 809c 	beq.w	8008e86 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f8ae 	bl	8008ec0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008d64:	e08f      	b.n	8008e86 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff fdba 	bl	80088e0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f8a7 	bl	8008ec0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008d72:	e088      	b.n	8008e86 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d067      	beq.n	8008e4e <HAL_SAI_IRQHandler+0x326>
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f003 0304 	and.w	r3, r3, #4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d062      	beq.n	8008e4e <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2204      	movs	r2, #4
 8008d8e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d96:	f043 0220 	orr.w	r2, r3, #32
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d03c      	beq.n	8008e24 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d018      	beq.n	8008de6 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dba:	4a36      	ldr	r2, [pc, #216]	@ (8008e94 <HAL_SAI_IRQHandler+0x36c>)
 8008dbc:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7f9 fd5b 	bl	8002880 <HAL_DMA_Abort_IT>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00a      	beq.n	8008de6 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dd6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f86d 	bl	8008ec0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d04c      	beq.n	8008e8a <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008df6:	4a27      	ldr	r2, [pc, #156]	@ (8008e94 <HAL_SAI_IRQHandler+0x36c>)
 8008df8:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7f9 fd3d 	bl	8002880 <HAL_DMA_Abort_IT>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d03e      	beq.n	8008e8a <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f84f 	bl	8008ec0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e22:	e032      	b.n	8008e8a <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e34:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f83a 	bl	8008ec0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e4c:	e01d      	b.n	8008e8a <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f003 0310 	and.w	r3, r3, #16
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d019      	beq.n	8008e8c <HAL_SAI_IRQHandler+0x364>
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f003 0310 	and.w	r3, r3, #16
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d014      	beq.n	8008e8c <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2210      	movs	r2, #16
 8008e68:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e70:	f043 0210 	orr.w	r2, r3, #16
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f820 	bl	8008ec0 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8008e80:	e004      	b.n	8008e8c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e82:	bf00      	nop
 8008e84:	e002      	b.n	8008e8c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e86:	bf00      	nop
 8008e88:	e000      	b.n	8008e8c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e8a:	bf00      	nop
}
 8008e8c:	bf00      	nop
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	08009093 	.word	0x08009093

08008e98 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d103      	bne.n	8008ef2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f043 0308 	orr.w	r3, r3, #8
 8008ef0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	d10b      	bne.n	8008f12 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d003      	beq.n	8008f0a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d103      	bne.n	8008f12 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f043 0310 	orr.w	r3, r3, #16
 8008f10:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d003      	beq.n	8008f22 <SAI_InterruptFlag+0x4e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d104      	bne.n	8008f2c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	e003      	b.n	8008f34 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f043 0304 	orr.w	r3, r3, #4
 8008f32:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008f34:	68fb      	ldr	r3, [r7, #12]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
	...

08008f44 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008f4c:	4b18      	ldr	r3, [pc, #96]	@ (8008fb0 <SAI_Disable+0x6c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a18      	ldr	r2, [pc, #96]	@ (8008fb4 <SAI_Disable+0x70>)
 8008f52:	fba2 2303 	umull	r2, r3, r2, r3
 8008f56:	0b1b      	lsrs	r3, r3, #12
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008f6e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10a      	bne.n	8008f8c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	72fb      	strb	r3, [r7, #11]
      break;
 8008f8a:	e009      	b.n	8008fa0 <SAI_Disable+0x5c>
    }
    count--;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e7      	bne.n	8008f70 <SAI_Disable+0x2c>

  return status;
 8008fa0:	7afb      	ldrb	r3, [r7, #11]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	24000000 	.word	0x24000000
 8008fb4:	95cbec1b 	.word	0x95cbec1b

08008fb8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fce:	d01c      	beq.n	800900a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008fde:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008fe8:	2100      	movs	r1, #0
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f7ff ff72 	bl	8008ed4 <SAI_InterruptFlag>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	43d9      	mvns	r1, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691a      	ldr	r2, [r3, #16]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	400a      	ands	r2, r1
 8009000:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff ff44 	bl	8008e98 <HAL_SAI_RxCpltCallback>
#endif
}
 8009010:	bf00      	nop
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f7ff ff40 	bl	8008eac <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800902c:	bf00      	nop
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009040:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7fa fd8c 	bl	8003b60 <HAL_DMA_GetError>
 8009048:	4603      	mov	r3, r0
 800904a:	2b02      	cmp	r3, #2
 800904c:	d01d      	beq.n	800908a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009054:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800906c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff ff68 	bl	8008f44 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7ff ff1b 	bl	8008ec0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80090ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2200      	movs	r2, #0
 80090b6:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090c0:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090c8:	2b20      	cmp	r3, #32
 80090ca:	d00a      	beq.n	80090e2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f7ff ff39 	bl	8008f44 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 0208 	orr.w	r2, r2, #8
 80090e0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff fee4 	bl	8008ec0 <HAL_SAI_ErrorCallback>
#endif
}
 80090f8:	bf00      	nop
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e042      	b.n	8009198 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009118:	2b00      	cmp	r3, #0
 800911a:	d106      	bne.n	800912a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f7f7 fe73 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2224      	movs	r2, #36	@ 0x24
 800912e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f022 0201 	bic.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fe1e 	bl	8009d8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f8b3 	bl	80092bc <UART_SetConfig>
 8009156:	4603      	mov	r3, r0
 8009158:	2b01      	cmp	r3, #1
 800915a:	d101      	bne.n	8009160 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e01b      	b.n	8009198 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800916e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689a      	ldr	r2, [r3, #8]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800917e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f042 0201 	orr.w	r2, r2, #1
 800918e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fe9d 	bl	8009ed0 <UART_CheckIdleState>
 8009196:	4603      	mov	r3, r0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	@ 0x28
 80091a4:	af02      	add	r7, sp, #8
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	4613      	mov	r3, r2
 80091ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	d17b      	bne.n	80092b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d002      	beq.n	80091c6 <HAL_UART_Transmit+0x26>
 80091c0:	88fb      	ldrh	r3, [r7, #6]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e074      	b.n	80092b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2221      	movs	r2, #33	@ 0x21
 80091d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091da:	f7f8 f8a9 	bl	8001330 <HAL_GetTick>
 80091de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	88fa      	ldrh	r2, [r7, #6]
 80091e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	88fa      	ldrh	r2, [r7, #6]
 80091ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091f8:	d108      	bne.n	800920c <HAL_UART_Transmit+0x6c>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d104      	bne.n	800920c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	61bb      	str	r3, [r7, #24]
 800920a:	e003      	b.n	8009214 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009210:	2300      	movs	r3, #0
 8009212:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009214:	e030      	b.n	8009278 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2200      	movs	r2, #0
 800921e:	2180      	movs	r1, #128	@ 0x80
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 feff 	bl	800a024 <UART_WaitOnFlagUntilTimeout>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d005      	beq.n	8009238 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2220      	movs	r2, #32
 8009230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e03d      	b.n	80092b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10b      	bne.n	8009256 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800924c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	3302      	adds	r3, #2
 8009252:	61bb      	str	r3, [r7, #24]
 8009254:	e007      	b.n	8009266 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	781a      	ldrb	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	3301      	adds	r3, #1
 8009264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800926c:	b29b      	uxth	r3, r3
 800926e:	3b01      	subs	r3, #1
 8009270:	b29a      	uxth	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800927e:	b29b      	uxth	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1c8      	bne.n	8009216 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2200      	movs	r2, #0
 800928c:	2140      	movs	r1, #64	@ 0x40
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 fec8 	bl	800a024 <UART_WaitOnFlagUntilTimeout>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d005      	beq.n	80092a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e006      	b.n	80092b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	e000      	b.n	80092b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80092b2:	2302      	movs	r3, #2
  }
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3720      	adds	r7, #32
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092c0:	b092      	sub	sp, #72	@ 0x48
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	431a      	orrs	r2, r3
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	431a      	orrs	r2, r3
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	4bbe      	ldr	r3, [pc, #760]	@ (80095e4 <UART_SetConfig+0x328>)
 80092ec:	4013      	ands	r3, r2
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	6812      	ldr	r2, [r2, #0]
 80092f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092f4:	430b      	orrs	r3, r1
 80092f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	68da      	ldr	r2, [r3, #12]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4ab3      	ldr	r2, [pc, #716]	@ (80095e8 <UART_SetConfig+0x32c>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d004      	beq.n	8009328 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009324:	4313      	orrs	r3, r2
 8009326:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	4baf      	ldr	r3, [pc, #700]	@ (80095ec <UART_SetConfig+0x330>)
 8009330:	4013      	ands	r3, r2
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	6812      	ldr	r2, [r2, #0]
 8009336:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009338:	430b      	orrs	r3, r1
 800933a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009342:	f023 010f 	bic.w	r1, r3, #15
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4aa6      	ldr	r2, [pc, #664]	@ (80095f0 <UART_SetConfig+0x334>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d177      	bne.n	800944c <UART_SetConfig+0x190>
 800935c:	4ba5      	ldr	r3, [pc, #660]	@ (80095f4 <UART_SetConfig+0x338>)
 800935e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009360:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009364:	2b28      	cmp	r3, #40	@ 0x28
 8009366:	d86d      	bhi.n	8009444 <UART_SetConfig+0x188>
 8009368:	a201      	add	r2, pc, #4	@ (adr r2, 8009370 <UART_SetConfig+0xb4>)
 800936a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936e:	bf00      	nop
 8009370:	08009415 	.word	0x08009415
 8009374:	08009445 	.word	0x08009445
 8009378:	08009445 	.word	0x08009445
 800937c:	08009445 	.word	0x08009445
 8009380:	08009445 	.word	0x08009445
 8009384:	08009445 	.word	0x08009445
 8009388:	08009445 	.word	0x08009445
 800938c:	08009445 	.word	0x08009445
 8009390:	0800941d 	.word	0x0800941d
 8009394:	08009445 	.word	0x08009445
 8009398:	08009445 	.word	0x08009445
 800939c:	08009445 	.word	0x08009445
 80093a0:	08009445 	.word	0x08009445
 80093a4:	08009445 	.word	0x08009445
 80093a8:	08009445 	.word	0x08009445
 80093ac:	08009445 	.word	0x08009445
 80093b0:	08009425 	.word	0x08009425
 80093b4:	08009445 	.word	0x08009445
 80093b8:	08009445 	.word	0x08009445
 80093bc:	08009445 	.word	0x08009445
 80093c0:	08009445 	.word	0x08009445
 80093c4:	08009445 	.word	0x08009445
 80093c8:	08009445 	.word	0x08009445
 80093cc:	08009445 	.word	0x08009445
 80093d0:	0800942d 	.word	0x0800942d
 80093d4:	08009445 	.word	0x08009445
 80093d8:	08009445 	.word	0x08009445
 80093dc:	08009445 	.word	0x08009445
 80093e0:	08009445 	.word	0x08009445
 80093e4:	08009445 	.word	0x08009445
 80093e8:	08009445 	.word	0x08009445
 80093ec:	08009445 	.word	0x08009445
 80093f0:	08009435 	.word	0x08009435
 80093f4:	08009445 	.word	0x08009445
 80093f8:	08009445 	.word	0x08009445
 80093fc:	08009445 	.word	0x08009445
 8009400:	08009445 	.word	0x08009445
 8009404:	08009445 	.word	0x08009445
 8009408:	08009445 	.word	0x08009445
 800940c:	08009445 	.word	0x08009445
 8009410:	0800943d 	.word	0x0800943d
 8009414:	2301      	movs	r3, #1
 8009416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941a:	e222      	b.n	8009862 <UART_SetConfig+0x5a6>
 800941c:	2304      	movs	r3, #4
 800941e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009422:	e21e      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009424:	2308      	movs	r3, #8
 8009426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942a:	e21a      	b.n	8009862 <UART_SetConfig+0x5a6>
 800942c:	2310      	movs	r3, #16
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009432:	e216      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009434:	2320      	movs	r3, #32
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943a:	e212      	b.n	8009862 <UART_SetConfig+0x5a6>
 800943c:	2340      	movs	r3, #64	@ 0x40
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e20e      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009444:	2380      	movs	r3, #128	@ 0x80
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e20a      	b.n	8009862 <UART_SetConfig+0x5a6>
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a69      	ldr	r2, [pc, #420]	@ (80095f8 <UART_SetConfig+0x33c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d130      	bne.n	80094b8 <UART_SetConfig+0x1fc>
 8009456:	4b67      	ldr	r3, [pc, #412]	@ (80095f4 <UART_SetConfig+0x338>)
 8009458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800945a:	f003 0307 	and.w	r3, r3, #7
 800945e:	2b05      	cmp	r3, #5
 8009460:	d826      	bhi.n	80094b0 <UART_SetConfig+0x1f4>
 8009462:	a201      	add	r2, pc, #4	@ (adr r2, 8009468 <UART_SetConfig+0x1ac>)
 8009464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009468:	08009481 	.word	0x08009481
 800946c:	08009489 	.word	0x08009489
 8009470:	08009491 	.word	0x08009491
 8009474:	08009499 	.word	0x08009499
 8009478:	080094a1 	.word	0x080094a1
 800947c:	080094a9 	.word	0x080094a9
 8009480:	2300      	movs	r3, #0
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009486:	e1ec      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009488:	2304      	movs	r3, #4
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948e:	e1e8      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009490:	2308      	movs	r3, #8
 8009492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009496:	e1e4      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009498:	2310      	movs	r3, #16
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949e:	e1e0      	b.n	8009862 <UART_SetConfig+0x5a6>
 80094a0:	2320      	movs	r3, #32
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e1dc      	b.n	8009862 <UART_SetConfig+0x5a6>
 80094a8:	2340      	movs	r3, #64	@ 0x40
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e1d8      	b.n	8009862 <UART_SetConfig+0x5a6>
 80094b0:	2380      	movs	r3, #128	@ 0x80
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e1d4      	b.n	8009862 <UART_SetConfig+0x5a6>
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a4f      	ldr	r2, [pc, #316]	@ (80095fc <UART_SetConfig+0x340>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d130      	bne.n	8009524 <UART_SetConfig+0x268>
 80094c2:	4b4c      	ldr	r3, [pc, #304]	@ (80095f4 <UART_SetConfig+0x338>)
 80094c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	2b05      	cmp	r3, #5
 80094cc:	d826      	bhi.n	800951c <UART_SetConfig+0x260>
 80094ce:	a201      	add	r2, pc, #4	@ (adr r2, 80094d4 <UART_SetConfig+0x218>)
 80094d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d4:	080094ed 	.word	0x080094ed
 80094d8:	080094f5 	.word	0x080094f5
 80094dc:	080094fd 	.word	0x080094fd
 80094e0:	08009505 	.word	0x08009505
 80094e4:	0800950d 	.word	0x0800950d
 80094e8:	08009515 	.word	0x08009515
 80094ec:	2300      	movs	r3, #0
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f2:	e1b6      	b.n	8009862 <UART_SetConfig+0x5a6>
 80094f4:	2304      	movs	r3, #4
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fa:	e1b2      	b.n	8009862 <UART_SetConfig+0x5a6>
 80094fc:	2308      	movs	r3, #8
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009502:	e1ae      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009504:	2310      	movs	r3, #16
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950a:	e1aa      	b.n	8009862 <UART_SetConfig+0x5a6>
 800950c:	2320      	movs	r3, #32
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e1a6      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009514:	2340      	movs	r3, #64	@ 0x40
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e1a2      	b.n	8009862 <UART_SetConfig+0x5a6>
 800951c:	2380      	movs	r3, #128	@ 0x80
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e19e      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a35      	ldr	r2, [pc, #212]	@ (8009600 <UART_SetConfig+0x344>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d130      	bne.n	8009590 <UART_SetConfig+0x2d4>
 800952e:	4b31      	ldr	r3, [pc, #196]	@ (80095f4 <UART_SetConfig+0x338>)
 8009530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009532:	f003 0307 	and.w	r3, r3, #7
 8009536:	2b05      	cmp	r3, #5
 8009538:	d826      	bhi.n	8009588 <UART_SetConfig+0x2cc>
 800953a:	a201      	add	r2, pc, #4	@ (adr r2, 8009540 <UART_SetConfig+0x284>)
 800953c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009540:	08009559 	.word	0x08009559
 8009544:	08009561 	.word	0x08009561
 8009548:	08009569 	.word	0x08009569
 800954c:	08009571 	.word	0x08009571
 8009550:	08009579 	.word	0x08009579
 8009554:	08009581 	.word	0x08009581
 8009558:	2300      	movs	r3, #0
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955e:	e180      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009560:	2304      	movs	r3, #4
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e17c      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009568:	2308      	movs	r3, #8
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e178      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009570:	2310      	movs	r3, #16
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e174      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009578:	2320      	movs	r3, #32
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e170      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009580:	2340      	movs	r3, #64	@ 0x40
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e16c      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009588:	2380      	movs	r3, #128	@ 0x80
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e168      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a1b      	ldr	r2, [pc, #108]	@ (8009604 <UART_SetConfig+0x348>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d142      	bne.n	8009620 <UART_SetConfig+0x364>
 800959a:	4b16      	ldr	r3, [pc, #88]	@ (80095f4 <UART_SetConfig+0x338>)
 800959c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800959e:	f003 0307 	and.w	r3, r3, #7
 80095a2:	2b05      	cmp	r3, #5
 80095a4:	d838      	bhi.n	8009618 <UART_SetConfig+0x35c>
 80095a6:	a201      	add	r2, pc, #4	@ (adr r2, 80095ac <UART_SetConfig+0x2f0>)
 80095a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ac:	080095c5 	.word	0x080095c5
 80095b0:	080095cd 	.word	0x080095cd
 80095b4:	080095d5 	.word	0x080095d5
 80095b8:	080095dd 	.word	0x080095dd
 80095bc:	08009609 	.word	0x08009609
 80095c0:	08009611 	.word	0x08009611
 80095c4:	2300      	movs	r3, #0
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e14a      	b.n	8009862 <UART_SetConfig+0x5a6>
 80095cc:	2304      	movs	r3, #4
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d2:	e146      	b.n	8009862 <UART_SetConfig+0x5a6>
 80095d4:	2308      	movs	r3, #8
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e142      	b.n	8009862 <UART_SetConfig+0x5a6>
 80095dc:	2310      	movs	r3, #16
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e13e      	b.n	8009862 <UART_SetConfig+0x5a6>
 80095e4:	cfff69f3 	.word	0xcfff69f3
 80095e8:	58000c00 	.word	0x58000c00
 80095ec:	11fff4ff 	.word	0x11fff4ff
 80095f0:	40011000 	.word	0x40011000
 80095f4:	58024400 	.word	0x58024400
 80095f8:	40004400 	.word	0x40004400
 80095fc:	40004800 	.word	0x40004800
 8009600:	40004c00 	.word	0x40004c00
 8009604:	40005000 	.word	0x40005000
 8009608:	2320      	movs	r3, #32
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960e:	e128      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009610:	2340      	movs	r3, #64	@ 0x40
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009616:	e124      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009618:	2380      	movs	r3, #128	@ 0x80
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961e:	e120      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4acb      	ldr	r2, [pc, #812]	@ (8009954 <UART_SetConfig+0x698>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d176      	bne.n	8009718 <UART_SetConfig+0x45c>
 800962a:	4bcb      	ldr	r3, [pc, #812]	@ (8009958 <UART_SetConfig+0x69c>)
 800962c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800962e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009632:	2b28      	cmp	r3, #40	@ 0x28
 8009634:	d86c      	bhi.n	8009710 <UART_SetConfig+0x454>
 8009636:	a201      	add	r2, pc, #4	@ (adr r2, 800963c <UART_SetConfig+0x380>)
 8009638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963c:	080096e1 	.word	0x080096e1
 8009640:	08009711 	.word	0x08009711
 8009644:	08009711 	.word	0x08009711
 8009648:	08009711 	.word	0x08009711
 800964c:	08009711 	.word	0x08009711
 8009650:	08009711 	.word	0x08009711
 8009654:	08009711 	.word	0x08009711
 8009658:	08009711 	.word	0x08009711
 800965c:	080096e9 	.word	0x080096e9
 8009660:	08009711 	.word	0x08009711
 8009664:	08009711 	.word	0x08009711
 8009668:	08009711 	.word	0x08009711
 800966c:	08009711 	.word	0x08009711
 8009670:	08009711 	.word	0x08009711
 8009674:	08009711 	.word	0x08009711
 8009678:	08009711 	.word	0x08009711
 800967c:	080096f1 	.word	0x080096f1
 8009680:	08009711 	.word	0x08009711
 8009684:	08009711 	.word	0x08009711
 8009688:	08009711 	.word	0x08009711
 800968c:	08009711 	.word	0x08009711
 8009690:	08009711 	.word	0x08009711
 8009694:	08009711 	.word	0x08009711
 8009698:	08009711 	.word	0x08009711
 800969c:	080096f9 	.word	0x080096f9
 80096a0:	08009711 	.word	0x08009711
 80096a4:	08009711 	.word	0x08009711
 80096a8:	08009711 	.word	0x08009711
 80096ac:	08009711 	.word	0x08009711
 80096b0:	08009711 	.word	0x08009711
 80096b4:	08009711 	.word	0x08009711
 80096b8:	08009711 	.word	0x08009711
 80096bc:	08009701 	.word	0x08009701
 80096c0:	08009711 	.word	0x08009711
 80096c4:	08009711 	.word	0x08009711
 80096c8:	08009711 	.word	0x08009711
 80096cc:	08009711 	.word	0x08009711
 80096d0:	08009711 	.word	0x08009711
 80096d4:	08009711 	.word	0x08009711
 80096d8:	08009711 	.word	0x08009711
 80096dc:	08009709 	.word	0x08009709
 80096e0:	2301      	movs	r3, #1
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e6:	e0bc      	b.n	8009862 <UART_SetConfig+0x5a6>
 80096e8:	2304      	movs	r3, #4
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ee:	e0b8      	b.n	8009862 <UART_SetConfig+0x5a6>
 80096f0:	2308      	movs	r3, #8
 80096f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f6:	e0b4      	b.n	8009862 <UART_SetConfig+0x5a6>
 80096f8:	2310      	movs	r3, #16
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fe:	e0b0      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009700:	2320      	movs	r3, #32
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009706:	e0ac      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009708:	2340      	movs	r3, #64	@ 0x40
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970e:	e0a8      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009710:	2380      	movs	r3, #128	@ 0x80
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009716:	e0a4      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a8f      	ldr	r2, [pc, #572]	@ (800995c <UART_SetConfig+0x6a0>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d130      	bne.n	8009784 <UART_SetConfig+0x4c8>
 8009722:	4b8d      	ldr	r3, [pc, #564]	@ (8009958 <UART_SetConfig+0x69c>)
 8009724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	2b05      	cmp	r3, #5
 800972c:	d826      	bhi.n	800977c <UART_SetConfig+0x4c0>
 800972e:	a201      	add	r2, pc, #4	@ (adr r2, 8009734 <UART_SetConfig+0x478>)
 8009730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009734:	0800974d 	.word	0x0800974d
 8009738:	08009755 	.word	0x08009755
 800973c:	0800975d 	.word	0x0800975d
 8009740:	08009765 	.word	0x08009765
 8009744:	0800976d 	.word	0x0800976d
 8009748:	08009775 	.word	0x08009775
 800974c:	2300      	movs	r3, #0
 800974e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009752:	e086      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009754:	2304      	movs	r3, #4
 8009756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975a:	e082      	b.n	8009862 <UART_SetConfig+0x5a6>
 800975c:	2308      	movs	r3, #8
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009762:	e07e      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009764:	2310      	movs	r3, #16
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976a:	e07a      	b.n	8009862 <UART_SetConfig+0x5a6>
 800976c:	2320      	movs	r3, #32
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e076      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009774:	2340      	movs	r3, #64	@ 0x40
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e072      	b.n	8009862 <UART_SetConfig+0x5a6>
 800977c:	2380      	movs	r3, #128	@ 0x80
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e06e      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a75      	ldr	r2, [pc, #468]	@ (8009960 <UART_SetConfig+0x6a4>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d130      	bne.n	80097f0 <UART_SetConfig+0x534>
 800978e:	4b72      	ldr	r3, [pc, #456]	@ (8009958 <UART_SetConfig+0x69c>)
 8009790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	2b05      	cmp	r3, #5
 8009798:	d826      	bhi.n	80097e8 <UART_SetConfig+0x52c>
 800979a:	a201      	add	r2, pc, #4	@ (adr r2, 80097a0 <UART_SetConfig+0x4e4>)
 800979c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a0:	080097b9 	.word	0x080097b9
 80097a4:	080097c1 	.word	0x080097c1
 80097a8:	080097c9 	.word	0x080097c9
 80097ac:	080097d1 	.word	0x080097d1
 80097b0:	080097d9 	.word	0x080097d9
 80097b4:	080097e1 	.word	0x080097e1
 80097b8:	2300      	movs	r3, #0
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097be:	e050      	b.n	8009862 <UART_SetConfig+0x5a6>
 80097c0:	2304      	movs	r3, #4
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c6:	e04c      	b.n	8009862 <UART_SetConfig+0x5a6>
 80097c8:	2308      	movs	r3, #8
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ce:	e048      	b.n	8009862 <UART_SetConfig+0x5a6>
 80097d0:	2310      	movs	r3, #16
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d6:	e044      	b.n	8009862 <UART_SetConfig+0x5a6>
 80097d8:	2320      	movs	r3, #32
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097de:	e040      	b.n	8009862 <UART_SetConfig+0x5a6>
 80097e0:	2340      	movs	r3, #64	@ 0x40
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e03c      	b.n	8009862 <UART_SetConfig+0x5a6>
 80097e8:	2380      	movs	r3, #128	@ 0x80
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e038      	b.n	8009862 <UART_SetConfig+0x5a6>
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a5b      	ldr	r2, [pc, #364]	@ (8009964 <UART_SetConfig+0x6a8>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d130      	bne.n	800985c <UART_SetConfig+0x5a0>
 80097fa:	4b57      	ldr	r3, [pc, #348]	@ (8009958 <UART_SetConfig+0x69c>)
 80097fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097fe:	f003 0307 	and.w	r3, r3, #7
 8009802:	2b05      	cmp	r3, #5
 8009804:	d826      	bhi.n	8009854 <UART_SetConfig+0x598>
 8009806:	a201      	add	r2, pc, #4	@ (adr r2, 800980c <UART_SetConfig+0x550>)
 8009808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980c:	08009825 	.word	0x08009825
 8009810:	0800982d 	.word	0x0800982d
 8009814:	08009835 	.word	0x08009835
 8009818:	0800983d 	.word	0x0800983d
 800981c:	08009845 	.word	0x08009845
 8009820:	0800984d 	.word	0x0800984d
 8009824:	2302      	movs	r3, #2
 8009826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982a:	e01a      	b.n	8009862 <UART_SetConfig+0x5a6>
 800982c:	2304      	movs	r3, #4
 800982e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009832:	e016      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009834:	2308      	movs	r3, #8
 8009836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983a:	e012      	b.n	8009862 <UART_SetConfig+0x5a6>
 800983c:	2310      	movs	r3, #16
 800983e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009842:	e00e      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009844:	2320      	movs	r3, #32
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984a:	e00a      	b.n	8009862 <UART_SetConfig+0x5a6>
 800984c:	2340      	movs	r3, #64	@ 0x40
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009852:	e006      	b.n	8009862 <UART_SetConfig+0x5a6>
 8009854:	2380      	movs	r3, #128	@ 0x80
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985a:	e002      	b.n	8009862 <UART_SetConfig+0x5a6>
 800985c:	2380      	movs	r3, #128	@ 0x80
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a3f      	ldr	r2, [pc, #252]	@ (8009964 <UART_SetConfig+0x6a8>)
 8009868:	4293      	cmp	r3, r2
 800986a:	f040 80f8 	bne.w	8009a5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800986e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009872:	2b20      	cmp	r3, #32
 8009874:	dc46      	bgt.n	8009904 <UART_SetConfig+0x648>
 8009876:	2b02      	cmp	r3, #2
 8009878:	f2c0 8082 	blt.w	8009980 <UART_SetConfig+0x6c4>
 800987c:	3b02      	subs	r3, #2
 800987e:	2b1e      	cmp	r3, #30
 8009880:	d87e      	bhi.n	8009980 <UART_SetConfig+0x6c4>
 8009882:	a201      	add	r2, pc, #4	@ (adr r2, 8009888 <UART_SetConfig+0x5cc>)
 8009884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009888:	0800990b 	.word	0x0800990b
 800988c:	08009981 	.word	0x08009981
 8009890:	08009913 	.word	0x08009913
 8009894:	08009981 	.word	0x08009981
 8009898:	08009981 	.word	0x08009981
 800989c:	08009981 	.word	0x08009981
 80098a0:	08009923 	.word	0x08009923
 80098a4:	08009981 	.word	0x08009981
 80098a8:	08009981 	.word	0x08009981
 80098ac:	08009981 	.word	0x08009981
 80098b0:	08009981 	.word	0x08009981
 80098b4:	08009981 	.word	0x08009981
 80098b8:	08009981 	.word	0x08009981
 80098bc:	08009981 	.word	0x08009981
 80098c0:	08009933 	.word	0x08009933
 80098c4:	08009981 	.word	0x08009981
 80098c8:	08009981 	.word	0x08009981
 80098cc:	08009981 	.word	0x08009981
 80098d0:	08009981 	.word	0x08009981
 80098d4:	08009981 	.word	0x08009981
 80098d8:	08009981 	.word	0x08009981
 80098dc:	08009981 	.word	0x08009981
 80098e0:	08009981 	.word	0x08009981
 80098e4:	08009981 	.word	0x08009981
 80098e8:	08009981 	.word	0x08009981
 80098ec:	08009981 	.word	0x08009981
 80098f0:	08009981 	.word	0x08009981
 80098f4:	08009981 	.word	0x08009981
 80098f8:	08009981 	.word	0x08009981
 80098fc:	08009981 	.word	0x08009981
 8009900:	08009973 	.word	0x08009973
 8009904:	2b40      	cmp	r3, #64	@ 0x40
 8009906:	d037      	beq.n	8009978 <UART_SetConfig+0x6bc>
 8009908:	e03a      	b.n	8009980 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800990a:	f7fd ffcb 	bl	80078a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800990e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009910:	e03c      	b.n	800998c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009916:	4618      	mov	r0, r3
 8009918:	f7fd ffda 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800991c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009920:	e034      	b.n	800998c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009922:	f107 0318 	add.w	r3, r7, #24
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe f926 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009930:	e02c      	b.n	800998c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009932:	4b09      	ldr	r3, [pc, #36]	@ (8009958 <UART_SetConfig+0x69c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	2b00      	cmp	r3, #0
 800993c:	d016      	beq.n	800996c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800993e:	4b06      	ldr	r3, [pc, #24]	@ (8009958 <UART_SetConfig+0x69c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	08db      	lsrs	r3, r3, #3
 8009944:	f003 0303 	and.w	r3, r3, #3
 8009948:	4a07      	ldr	r2, [pc, #28]	@ (8009968 <UART_SetConfig+0x6ac>)
 800994a:	fa22 f303 	lsr.w	r3, r2, r3
 800994e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009950:	e01c      	b.n	800998c <UART_SetConfig+0x6d0>
 8009952:	bf00      	nop
 8009954:	40011400 	.word	0x40011400
 8009958:	58024400 	.word	0x58024400
 800995c:	40007800 	.word	0x40007800
 8009960:	40007c00 	.word	0x40007c00
 8009964:	58000c00 	.word	0x58000c00
 8009968:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800996c:	4b9d      	ldr	r3, [pc, #628]	@ (8009be4 <UART_SetConfig+0x928>)
 800996e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009970:	e00c      	b.n	800998c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009972:	4b9d      	ldr	r3, [pc, #628]	@ (8009be8 <UART_SetConfig+0x92c>)
 8009974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009976:	e009      	b.n	800998c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009978:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800997c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800997e:	e005      	b.n	800998c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009980:	2300      	movs	r3, #0
 8009982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800998a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800998c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 81de 	beq.w	8009d50 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009998:	4a94      	ldr	r2, [pc, #592]	@ (8009bec <UART_SetConfig+0x930>)
 800999a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800999e:	461a      	mov	r2, r3
 80099a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80099a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	4613      	mov	r3, r2
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	4413      	add	r3, r2
 80099b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d305      	bcc.n	80099c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d903      	bls.n	80099cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099ca:	e1c1      	b.n	8009d50 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ce:	2200      	movs	r2, #0
 80099d0:	60bb      	str	r3, [r7, #8]
 80099d2:	60fa      	str	r2, [r7, #12]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d8:	4a84      	ldr	r2, [pc, #528]	@ (8009bec <UART_SetConfig+0x930>)
 80099da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	2200      	movs	r2, #0
 80099e2:	603b      	str	r3, [r7, #0]
 80099e4:	607a      	str	r2, [r7, #4]
 80099e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099ee:	f7f6 fccf 	bl	8000390 <__aeabi_uldivmod>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4610      	mov	r0, r2
 80099f8:	4619      	mov	r1, r3
 80099fa:	f04f 0200 	mov.w	r2, #0
 80099fe:	f04f 0300 	mov.w	r3, #0
 8009a02:	020b      	lsls	r3, r1, #8
 8009a04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a08:	0202      	lsls	r2, r0, #8
 8009a0a:	6979      	ldr	r1, [r7, #20]
 8009a0c:	6849      	ldr	r1, [r1, #4]
 8009a0e:	0849      	lsrs	r1, r1, #1
 8009a10:	2000      	movs	r0, #0
 8009a12:	460c      	mov	r4, r1
 8009a14:	4605      	mov	r5, r0
 8009a16:	eb12 0804 	adds.w	r8, r2, r4
 8009a1a:	eb43 0905 	adc.w	r9, r3, r5
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	469a      	mov	sl, r3
 8009a26:	4693      	mov	fp, r2
 8009a28:	4652      	mov	r2, sl
 8009a2a:	465b      	mov	r3, fp
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	4649      	mov	r1, r9
 8009a30:	f7f6 fcae 	bl	8000390 <__aeabi_uldivmod>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4613      	mov	r3, r2
 8009a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a42:	d308      	bcc.n	8009a56 <UART_SetConfig+0x79a>
 8009a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a4a:	d204      	bcs.n	8009a56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a52:	60da      	str	r2, [r3, #12]
 8009a54:	e17c      	b.n	8009d50 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a5c:	e178      	b.n	8009d50 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a66:	f040 80c5 	bne.w	8009bf4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009a6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	dc48      	bgt.n	8009b04 <UART_SetConfig+0x848>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	db7b      	blt.n	8009b6e <UART_SetConfig+0x8b2>
 8009a76:	2b20      	cmp	r3, #32
 8009a78:	d879      	bhi.n	8009b6e <UART_SetConfig+0x8b2>
 8009a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a80 <UART_SetConfig+0x7c4>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009b0b 	.word	0x08009b0b
 8009a84:	08009b13 	.word	0x08009b13
 8009a88:	08009b6f 	.word	0x08009b6f
 8009a8c:	08009b6f 	.word	0x08009b6f
 8009a90:	08009b1b 	.word	0x08009b1b
 8009a94:	08009b6f 	.word	0x08009b6f
 8009a98:	08009b6f 	.word	0x08009b6f
 8009a9c:	08009b6f 	.word	0x08009b6f
 8009aa0:	08009b2b 	.word	0x08009b2b
 8009aa4:	08009b6f 	.word	0x08009b6f
 8009aa8:	08009b6f 	.word	0x08009b6f
 8009aac:	08009b6f 	.word	0x08009b6f
 8009ab0:	08009b6f 	.word	0x08009b6f
 8009ab4:	08009b6f 	.word	0x08009b6f
 8009ab8:	08009b6f 	.word	0x08009b6f
 8009abc:	08009b6f 	.word	0x08009b6f
 8009ac0:	08009b3b 	.word	0x08009b3b
 8009ac4:	08009b6f 	.word	0x08009b6f
 8009ac8:	08009b6f 	.word	0x08009b6f
 8009acc:	08009b6f 	.word	0x08009b6f
 8009ad0:	08009b6f 	.word	0x08009b6f
 8009ad4:	08009b6f 	.word	0x08009b6f
 8009ad8:	08009b6f 	.word	0x08009b6f
 8009adc:	08009b6f 	.word	0x08009b6f
 8009ae0:	08009b6f 	.word	0x08009b6f
 8009ae4:	08009b6f 	.word	0x08009b6f
 8009ae8:	08009b6f 	.word	0x08009b6f
 8009aec:	08009b6f 	.word	0x08009b6f
 8009af0:	08009b6f 	.word	0x08009b6f
 8009af4:	08009b6f 	.word	0x08009b6f
 8009af8:	08009b6f 	.word	0x08009b6f
 8009afc:	08009b6f 	.word	0x08009b6f
 8009b00:	08009b61 	.word	0x08009b61
 8009b04:	2b40      	cmp	r3, #64	@ 0x40
 8009b06:	d02e      	beq.n	8009b66 <UART_SetConfig+0x8aa>
 8009b08:	e031      	b.n	8009b6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b0a:	f7fb fed5 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8009b0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b10:	e033      	b.n	8009b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b12:	f7fb fee7 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8009b16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b18:	e02f      	b.n	8009b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fd fed6 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b28:	e027      	b.n	8009b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b2a:	f107 0318 	add.w	r3, r7, #24
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe f822 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b38:	e01f      	b.n	8009b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8009bf0 <UART_SetConfig+0x934>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0320 	and.w	r3, r3, #32
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d009      	beq.n	8009b5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b46:	4b2a      	ldr	r3, [pc, #168]	@ (8009bf0 <UART_SetConfig+0x934>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	08db      	lsrs	r3, r3, #3
 8009b4c:	f003 0303 	and.w	r3, r3, #3
 8009b50:	4a24      	ldr	r2, [pc, #144]	@ (8009be4 <UART_SetConfig+0x928>)
 8009b52:	fa22 f303 	lsr.w	r3, r2, r3
 8009b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b58:	e00f      	b.n	8009b7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b5a:	4b22      	ldr	r3, [pc, #136]	@ (8009be4 <UART_SetConfig+0x928>)
 8009b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b5e:	e00c      	b.n	8009b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b60:	4b21      	ldr	r3, [pc, #132]	@ (8009be8 <UART_SetConfig+0x92c>)
 8009b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b64:	e009      	b.n	8009b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b6c:	e005      	b.n	8009b7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 80e7 	beq.w	8009d50 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b86:	4a19      	ldr	r2, [pc, #100]	@ (8009bec <UART_SetConfig+0x930>)
 8009b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b94:	005a      	lsls	r2, r3, #1
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	085b      	lsrs	r3, r3, #1
 8009b9c:	441a      	add	r2, r3
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009baa:	2b0f      	cmp	r3, #15
 8009bac:	d916      	bls.n	8009bdc <UART_SetConfig+0x920>
 8009bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bb4:	d212      	bcs.n	8009bdc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	f023 030f 	bic.w	r3, r3, #15
 8009bbe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009bd8:	60da      	str	r2, [r3, #12]
 8009bda:	e0b9      	b.n	8009d50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009be2:	e0b5      	b.n	8009d50 <UART_SetConfig+0xa94>
 8009be4:	03d09000 	.word	0x03d09000
 8009be8:	003d0900 	.word	0x003d0900
 8009bec:	0800cfdc 	.word	0x0800cfdc
 8009bf0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bf4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bf8:	2b20      	cmp	r3, #32
 8009bfa:	dc49      	bgt.n	8009c90 <UART_SetConfig+0x9d4>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	db7c      	blt.n	8009cfa <UART_SetConfig+0xa3e>
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	d87a      	bhi.n	8009cfa <UART_SetConfig+0xa3e>
 8009c04:	a201      	add	r2, pc, #4	@ (adr r2, 8009c0c <UART_SetConfig+0x950>)
 8009c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0a:	bf00      	nop
 8009c0c:	08009c97 	.word	0x08009c97
 8009c10:	08009c9f 	.word	0x08009c9f
 8009c14:	08009cfb 	.word	0x08009cfb
 8009c18:	08009cfb 	.word	0x08009cfb
 8009c1c:	08009ca7 	.word	0x08009ca7
 8009c20:	08009cfb 	.word	0x08009cfb
 8009c24:	08009cfb 	.word	0x08009cfb
 8009c28:	08009cfb 	.word	0x08009cfb
 8009c2c:	08009cb7 	.word	0x08009cb7
 8009c30:	08009cfb 	.word	0x08009cfb
 8009c34:	08009cfb 	.word	0x08009cfb
 8009c38:	08009cfb 	.word	0x08009cfb
 8009c3c:	08009cfb 	.word	0x08009cfb
 8009c40:	08009cfb 	.word	0x08009cfb
 8009c44:	08009cfb 	.word	0x08009cfb
 8009c48:	08009cfb 	.word	0x08009cfb
 8009c4c:	08009cc7 	.word	0x08009cc7
 8009c50:	08009cfb 	.word	0x08009cfb
 8009c54:	08009cfb 	.word	0x08009cfb
 8009c58:	08009cfb 	.word	0x08009cfb
 8009c5c:	08009cfb 	.word	0x08009cfb
 8009c60:	08009cfb 	.word	0x08009cfb
 8009c64:	08009cfb 	.word	0x08009cfb
 8009c68:	08009cfb 	.word	0x08009cfb
 8009c6c:	08009cfb 	.word	0x08009cfb
 8009c70:	08009cfb 	.word	0x08009cfb
 8009c74:	08009cfb 	.word	0x08009cfb
 8009c78:	08009cfb 	.word	0x08009cfb
 8009c7c:	08009cfb 	.word	0x08009cfb
 8009c80:	08009cfb 	.word	0x08009cfb
 8009c84:	08009cfb 	.word	0x08009cfb
 8009c88:	08009cfb 	.word	0x08009cfb
 8009c8c:	08009ced 	.word	0x08009ced
 8009c90:	2b40      	cmp	r3, #64	@ 0x40
 8009c92:	d02e      	beq.n	8009cf2 <UART_SetConfig+0xa36>
 8009c94:	e031      	b.n	8009cfa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c96:	f7fb fe0f 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8009c9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c9c:	e033      	b.n	8009d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c9e:	f7fb fe21 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8009ca2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ca4:	e02f      	b.n	8009d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fd fe10 	bl	80078d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb4:	e027      	b.n	8009d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb6:	f107 0318 	add.w	r3, r7, #24
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fd ff5c 	bl	8007b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc4:	e01f      	b.n	8009d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8009d7c <UART_SetConfig+0xac0>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 0320 	and.w	r3, r3, #32
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8009d7c <UART_SetConfig+0xac0>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	08db      	lsrs	r3, r3, #3
 8009cd8:	f003 0303 	and.w	r3, r3, #3
 8009cdc:	4a28      	ldr	r2, [pc, #160]	@ (8009d80 <UART_SetConfig+0xac4>)
 8009cde:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ce4:	e00f      	b.n	8009d06 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009ce6:	4b26      	ldr	r3, [pc, #152]	@ (8009d80 <UART_SetConfig+0xac4>)
 8009ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cea:	e00c      	b.n	8009d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cec:	4b25      	ldr	r3, [pc, #148]	@ (8009d84 <UART_SetConfig+0xac8>)
 8009cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cf0:	e009      	b.n	8009d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cf8:	e005      	b.n	8009d06 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d04:	bf00      	nop
    }

    if (pclk != 0U)
 8009d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d021      	beq.n	8009d50 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d10:	4a1d      	ldr	r2, [pc, #116]	@ (8009d88 <UART_SetConfig+0xacc>)
 8009d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d16:	461a      	mov	r2, r3
 8009d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	085b      	lsrs	r3, r3, #1
 8009d24:	441a      	add	r2, r3
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d32:	2b0f      	cmp	r3, #15
 8009d34:	d909      	bls.n	8009d4a <UART_SetConfig+0xa8e>
 8009d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d3c:	d205      	bcs.n	8009d4a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	60da      	str	r2, [r3, #12]
 8009d48:	e002      	b.n	8009d50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	2200      	movs	r2, #0
 8009d64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d6c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3748      	adds	r7, #72	@ 0x48
 8009d74:	46bd      	mov	sp, r7
 8009d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d7a:	bf00      	nop
 8009d7c:	58024400 	.word	0x58024400
 8009d80:	03d09000 	.word	0x03d09000
 8009d84:	003d0900 	.word	0x003d0900
 8009d88:	0800cfdc 	.word	0x0800cfdc

08009d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d98:	f003 0308 	and.w	r3, r3, #8
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ddc:	f003 0302 	and.w	r3, r3, #2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfe:	f003 0304 	and.w	r3, r3, #4
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01a      	beq.n	8009ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e8a:	d10a      	bne.n	8009ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	605a      	str	r2, [r3, #4]
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b098      	sub	sp, #96	@ 0x60
 8009ed4:	af02      	add	r7, sp, #8
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ee0:	f7f7 fa26 	bl	8001330 <HAL_GetTick>
 8009ee4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b08      	cmp	r3, #8
 8009ef2:	d12f      	bne.n	8009f54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009efc:	2200      	movs	r2, #0
 8009efe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f88e 	bl	800a024 <UART_WaitOnFlagUntilTimeout>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d022      	beq.n	8009f54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e6      	bne.n	8009f0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e063      	b.n	800a01c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 0304 	and.w	r3, r3, #4
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d149      	bne.n	8009ff6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f857 	bl	800a024 <UART_WaitOnFlagUntilTimeout>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d03c      	beq.n	8009ff6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	623b      	str	r3, [r7, #32]
   return(result);
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e6      	bne.n	8009f7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	e853 3f00 	ldrex	r3, [r3]
 8009fbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3308      	adds	r3, #8
 8009fcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fce:	61fa      	str	r2, [r7, #28]
 8009fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	69b9      	ldr	r1, [r7, #24]
 8009fd4:	69fa      	ldr	r2, [r7, #28]
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	617b      	str	r3, [r7, #20]
   return(result);
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1e5      	bne.n	8009fae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e012      	b.n	800a01c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2220      	movs	r2, #32
 800a002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3758      	adds	r7, #88	@ 0x58
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	4613      	mov	r3, r2
 800a032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a034:	e04f      	b.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a03c:	d04b      	beq.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a03e:	f7f7 f977 	bl	8001330 <HAL_GetTick>
 800a042:	4602      	mov	r2, r0
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d302      	bcc.n	800a054 <UART_WaitOnFlagUntilTimeout+0x30>
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e04e      	b.n	800a0f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0304 	and.w	r3, r3, #4
 800a062:	2b00      	cmp	r3, #0
 800a064:	d037      	beq.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b80      	cmp	r3, #128	@ 0x80
 800a06a:	d034      	beq.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2b40      	cmp	r3, #64	@ 0x40
 800a070:	d031      	beq.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	f003 0308 	and.w	r3, r3, #8
 800a07c:	2b08      	cmp	r3, #8
 800a07e:	d110      	bne.n	800a0a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2208      	movs	r2, #8
 800a086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 f839 	bl	800a100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2208      	movs	r2, #8
 800a092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e029      	b.n	800a0f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0b0:	d111      	bne.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f000 f81f 	bl	800a100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e00f      	b.n	800a0f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	4013      	ands	r3, r2
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	bf0c      	ite	eq
 800a0e6:	2301      	moveq	r3, #1
 800a0e8:	2300      	movne	r3, #0
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d0a0      	beq.n	800a036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a100:	b480      	push	{r7}
 800a102:	b095      	sub	sp, #84	@ 0x54
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a11c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a126:	643b      	str	r3, [r7, #64]	@ 0x40
 800a128:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a12c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e6      	bne.n	800a108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3308      	adds	r3, #8
 800a140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	e853 3f00 	ldrex	r3, [r3]
 800a148:	61fb      	str	r3, [r7, #28]
   return(result);
 800a14a:	69fa      	ldr	r2, [r7, #28]
 800a14c:	4b1e      	ldr	r3, [pc, #120]	@ (800a1c8 <UART_EndRxTransfer+0xc8>)
 800a14e:	4013      	ands	r3, r2
 800a150:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3308      	adds	r3, #8
 800a158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a15a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a15c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a162:	e841 2300 	strex	r3, r2, [r1]
 800a166:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1e5      	bne.n	800a13a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a172:	2b01      	cmp	r3, #1
 800a174:	d118      	bne.n	800a1a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	e853 3f00 	ldrex	r3, [r3]
 800a182:	60bb      	str	r3, [r7, #8]
   return(result);
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f023 0310 	bic.w	r3, r3, #16
 800a18a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	461a      	mov	r2, r3
 800a192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a194:	61bb      	str	r3, [r7, #24]
 800a196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a198:	6979      	ldr	r1, [r7, #20]
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	e841 2300 	strex	r3, r2, [r1]
 800a1a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e6      	bne.n	800a176 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a1bc:	bf00      	nop
 800a1be:	3754      	adds	r7, #84	@ 0x54
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	effffffe 	.word	0xeffffffe

0800a1cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e027      	b.n	800a232 <HAL_UARTEx_DisableFifoMode+0x66>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2224      	movs	r2, #36	@ 0x24
 800a1ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f022 0201 	bic.w	r2, r2, #1
 800a208:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a210:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2220      	movs	r2, #32
 800a224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d101      	bne.n	800a256 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a252:	2302      	movs	r3, #2
 800a254:	e02d      	b.n	800a2b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2224      	movs	r2, #36	@ 0x24
 800a262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f022 0201 	bic.w	r2, r2, #1
 800a27c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	430a      	orrs	r2, r1
 800a290:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f850 	bl	800a338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2220      	movs	r2, #32
 800a2a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d101      	bne.n	800a2d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e02d      	b.n	800a32e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2224      	movs	r2, #36	@ 0x24
 800a2de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f022 0201 	bic.w	r2, r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	430a      	orrs	r2, r1
 800a30c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f812 	bl	800a338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2220      	movs	r2, #32
 800a320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a344:	2b00      	cmp	r3, #0
 800a346:	d108      	bne.n	800a35a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a358:	e031      	b.n	800a3be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a35a:	2310      	movs	r3, #16
 800a35c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a35e:	2310      	movs	r3, #16
 800a360:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	0e5b      	lsrs	r3, r3, #25
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	0f5b      	lsrs	r3, r3, #29
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	f003 0307 	and.w	r3, r3, #7
 800a380:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a382:	7bbb      	ldrb	r3, [r7, #14]
 800a384:	7b3a      	ldrb	r2, [r7, #12]
 800a386:	4911      	ldr	r1, [pc, #68]	@ (800a3cc <UARTEx_SetNbDataToProcess+0x94>)
 800a388:	5c8a      	ldrb	r2, [r1, r2]
 800a38a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a38e:	7b3a      	ldrb	r2, [r7, #12]
 800a390:	490f      	ldr	r1, [pc, #60]	@ (800a3d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a392:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a394:	fb93 f3f2 	sdiv	r3, r3, r2
 800a398:	b29a      	uxth	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	7b7a      	ldrb	r2, [r7, #13]
 800a3a4:	4909      	ldr	r1, [pc, #36]	@ (800a3cc <UARTEx_SetNbDataToProcess+0x94>)
 800a3a6:	5c8a      	ldrb	r2, [r1, r2]
 800a3a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3ac:	7b7a      	ldrb	r2, [r7, #13]
 800a3ae:	4908      	ldr	r1, [pc, #32]	@ (800a3d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a3b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a3be:	bf00      	nop
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	0800cff4 	.word	0x0800cff4
 800a3d0:	0800cffc 	.word	0x0800cffc

0800a3d4 <log10f>:
 800a3d4:	b508      	push	{r3, lr}
 800a3d6:	ed2d 8b02 	vpush	{d8}
 800a3da:	eeb0 8a40 	vmov.f32	s16, s0
 800a3de:	f000 f84f 	bl	800a480 <__ieee754_log10f>
 800a3e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800a3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ea:	d60f      	bvs.n	800a40c <log10f+0x38>
 800a3ec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f4:	d80a      	bhi.n	800a40c <log10f+0x38>
 800a3f6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3fe:	d108      	bne.n	800a412 <log10f+0x3e>
 800a400:	f000 fe9a 	bl	800b138 <__errno>
 800a404:	2322      	movs	r3, #34	@ 0x22
 800a406:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a428 <log10f+0x54>
 800a40a:	6003      	str	r3, [r0, #0]
 800a40c:	ecbd 8b02 	vpop	{d8}
 800a410:	bd08      	pop	{r3, pc}
 800a412:	f000 fe91 	bl	800b138 <__errno>
 800a416:	ecbd 8b02 	vpop	{d8}
 800a41a:	2321      	movs	r3, #33	@ 0x21
 800a41c:	6003      	str	r3, [r0, #0]
 800a41e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a422:	4802      	ldr	r0, [pc, #8]	@ (800a42c <log10f+0x58>)
 800a424:	f000 b822 	b.w	800a46c <nanf>
 800a428:	ff800000 	.word	0xff800000
 800a42c:	0800d174 	.word	0x0800d174

0800a430 <sqrtf>:
 800a430:	b508      	push	{r3, lr}
 800a432:	ed2d 8b02 	vpush	{d8}
 800a436:	eeb0 8a40 	vmov.f32	s16, s0
 800a43a:	f000 f81d 	bl	800a478 <__ieee754_sqrtf>
 800a43e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a446:	d60c      	bvs.n	800a462 <sqrtf+0x32>
 800a448:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a468 <sqrtf+0x38>
 800a44c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a454:	d505      	bpl.n	800a462 <sqrtf+0x32>
 800a456:	f000 fe6f 	bl	800b138 <__errno>
 800a45a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a45e:	2321      	movs	r3, #33	@ 0x21
 800a460:	6003      	str	r3, [r0, #0]
 800a462:	ecbd 8b02 	vpop	{d8}
 800a466:	bd08      	pop	{r3, pc}
 800a468:	00000000 	.word	0x00000000

0800a46c <nanf>:
 800a46c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a474 <nanf+0x8>
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	7fc00000 	.word	0x7fc00000

0800a478 <__ieee754_sqrtf>:
 800a478:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a47c:	4770      	bx	lr
	...

0800a480 <__ieee754_log10f>:
 800a480:	b508      	push	{r3, lr}
 800a482:	ee10 3a10 	vmov	r3, s0
 800a486:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a48a:	ed2d 8b02 	vpush	{d8}
 800a48e:	d108      	bne.n	800a4a2 <__ieee754_log10f+0x22>
 800a490:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a518 <__ieee754_log10f+0x98>
 800a494:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800a51c <__ieee754_log10f+0x9c>
 800a498:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a49c:	ecbd 8b02 	vpop	{d8}
 800a4a0:	bd08      	pop	{r3, pc}
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	da02      	bge.n	800a4ae <__ieee754_log10f+0x2e>
 800a4a8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a4ac:	e7f2      	b.n	800a494 <__ieee754_log10f+0x14>
 800a4ae:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a4b2:	db02      	blt.n	800a4ba <__ieee754_log10f+0x3a>
 800a4b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a4b8:	e7f0      	b.n	800a49c <__ieee754_log10f+0x1c>
 800a4ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a4be:	bfbf      	itttt	lt
 800a4c0:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800a520 <__ieee754_log10f+0xa0>
 800a4c4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a4c8:	f06f 0118 	mvnlt.w	r1, #24
 800a4cc:	ee17 2a90 	vmovlt	r2, s15
 800a4d0:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a4d4:	bfa8      	it	ge
 800a4d6:	2100      	movge	r1, #0
 800a4d8:	3b7f      	subs	r3, #127	@ 0x7f
 800a4da:	440b      	add	r3, r1
 800a4dc:	0fd9      	lsrs	r1, r3, #31
 800a4de:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a4e2:	ee07 3a90 	vmov	s15, r3
 800a4e6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a4ea:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800a4ee:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a4f2:	ee00 3a10 	vmov	s0, r3
 800a4f6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a4fa:	f000 f819 	bl	800a530 <logf>
 800a4fe:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800a524 <__ieee754_log10f+0xa4>
 800a502:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a506:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a528 <__ieee754_log10f+0xa8>
 800a50a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a50e:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800a52c <__ieee754_log10f+0xac>
 800a512:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a516:	e7c1      	b.n	800a49c <__ieee754_log10f+0x1c>
 800a518:	cc000000 	.word	0xcc000000
 800a51c:	00000000 	.word	0x00000000
 800a520:	4c000000 	.word	0x4c000000
 800a524:	3ede5bd9 	.word	0x3ede5bd9
 800a528:	355427db 	.word	0x355427db
 800a52c:	3e9a2080 	.word	0x3e9a2080

0800a530 <logf>:
 800a530:	ee10 3a10 	vmov	r3, s0
 800a534:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a538:	b410      	push	{r4}
 800a53a:	d055      	beq.n	800a5e8 <logf+0xb8>
 800a53c:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 800a540:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800a544:	d31a      	bcc.n	800a57c <logf+0x4c>
 800a546:	005a      	lsls	r2, r3, #1
 800a548:	d104      	bne.n	800a554 <logf+0x24>
 800a54a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a54e:	2001      	movs	r0, #1
 800a550:	f000 b862 	b.w	800a618 <__math_divzerof>
 800a554:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a558:	d043      	beq.n	800a5e2 <logf+0xb2>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	db02      	blt.n	800a564 <logf+0x34>
 800a55e:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 800a562:	d303      	bcc.n	800a56c <logf+0x3c>
 800a564:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a568:	f000 b868 	b.w	800a63c <__math_invalidf>
 800a56c:	eddf 7a20 	vldr	s15, [pc, #128]	@ 800a5f0 <logf+0xc0>
 800a570:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a574:	ee10 3a10 	vmov	r3, s0
 800a578:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 800a57c:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 800a580:	491c      	ldr	r1, [pc, #112]	@ (800a5f4 <logf+0xc4>)
 800a582:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 800a586:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 800a58a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800a58e:	0dd4      	lsrs	r4, r2, #23
 800a590:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800a594:	05e4      	lsls	r4, r4, #23
 800a596:	ed90 5b00 	vldr	d5, [r0]
 800a59a:	1b1b      	subs	r3, r3, r4
 800a59c:	ee07 3a90 	vmov	s15, r3
 800a5a0:	ed90 6b02 	vldr	d6, [r0, #8]
 800a5a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a5a8:	15d2      	asrs	r2, r2, #23
 800a5aa:	eea5 0b07 	vfma.f64	d0, d5, d7
 800a5ae:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 800a5b2:	ee20 4b00 	vmul.f64	d4, d0, d0
 800a5b6:	ee07 2a90 	vmov	s15, r2
 800a5ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a5be:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a5c2:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 800a5c6:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 800a5ca:	eea5 7b00 	vfma.f64	d7, d5, d0
 800a5ce:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 800a5d2:	ee30 0b06 	vadd.f64	d0, d0, d6
 800a5d6:	eea5 7b04 	vfma.f64	d7, d5, d4
 800a5da:	eea4 0b07 	vfma.f64	d0, d4, d7
 800a5de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800a5f8 <logf+0xc8>
 800a5ec:	e7f9      	b.n	800a5e2 <logf+0xb2>
 800a5ee:	bf00      	nop
 800a5f0:	4b000000 	.word	0x4b000000
 800a5f4:	0800d178 	.word	0x0800d178
 800a5f8:	00000000 	.word	0x00000000

0800a5fc <with_errnof>:
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	ed2d 8b02 	vpush	{d8}
 800a602:	eeb0 8a40 	vmov.f32	s16, s0
 800a606:	4604      	mov	r4, r0
 800a608:	f000 fd96 	bl	800b138 <__errno>
 800a60c:	eeb0 0a48 	vmov.f32	s0, s16
 800a610:	ecbd 8b02 	vpop	{d8}
 800a614:	6004      	str	r4, [r0, #0]
 800a616:	bd10      	pop	{r4, pc}

0800a618 <__math_divzerof>:
 800a618:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800a638 <__math_divzerof+0x20>
 800a61c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a620:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a624:	2800      	cmp	r0, #0
 800a626:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800a62a:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800a62e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a632:	f7ff bfe3 	b.w	800a5fc <with_errnof>
 800a636:	bf00      	nop
 800a638:	00000000 	.word	0x00000000

0800a63c <__math_invalidf>:
 800a63c:	eef0 7a40 	vmov.f32	s15, s0
 800a640:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a644:	eef4 7a67 	vcmp.f32	s15, s15
 800a648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a650:	d602      	bvs.n	800a658 <__math_invalidf+0x1c>
 800a652:	2021      	movs	r0, #33	@ 0x21
 800a654:	f7ff bfd2 	b.w	800a5fc <with_errnof>
 800a658:	4770      	bx	lr

0800a65a <__cvt>:
 800a65a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a65c:	ed2d 8b02 	vpush	{d8}
 800a660:	eeb0 8b40 	vmov.f64	d8, d0
 800a664:	b085      	sub	sp, #20
 800a666:	4617      	mov	r7, r2
 800a668:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a66a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a66c:	ee18 2a90 	vmov	r2, s17
 800a670:	f025 0520 	bic.w	r5, r5, #32
 800a674:	2a00      	cmp	r2, #0
 800a676:	bfb6      	itet	lt
 800a678:	222d      	movlt	r2, #45	@ 0x2d
 800a67a:	2200      	movge	r2, #0
 800a67c:	eeb1 8b40 	vneglt.f64	d8, d0
 800a680:	2d46      	cmp	r5, #70	@ 0x46
 800a682:	460c      	mov	r4, r1
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	d004      	beq.n	800a692 <__cvt+0x38>
 800a688:	2d45      	cmp	r5, #69	@ 0x45
 800a68a:	d100      	bne.n	800a68e <__cvt+0x34>
 800a68c:	3401      	adds	r4, #1
 800a68e:	2102      	movs	r1, #2
 800a690:	e000      	b.n	800a694 <__cvt+0x3a>
 800a692:	2103      	movs	r1, #3
 800a694:	ab03      	add	r3, sp, #12
 800a696:	9301      	str	r3, [sp, #4]
 800a698:	ab02      	add	r3, sp, #8
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	4622      	mov	r2, r4
 800a69e:	4633      	mov	r3, r6
 800a6a0:	eeb0 0b48 	vmov.f64	d0, d8
 800a6a4:	f000 fe04 	bl	800b2b0 <_dtoa_r>
 800a6a8:	2d47      	cmp	r5, #71	@ 0x47
 800a6aa:	d114      	bne.n	800a6d6 <__cvt+0x7c>
 800a6ac:	07fb      	lsls	r3, r7, #31
 800a6ae:	d50a      	bpl.n	800a6c6 <__cvt+0x6c>
 800a6b0:	1902      	adds	r2, r0, r4
 800a6b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ba:	bf08      	it	eq
 800a6bc:	9203      	streq	r2, [sp, #12]
 800a6be:	2130      	movs	r1, #48	@ 0x30
 800a6c0:	9b03      	ldr	r3, [sp, #12]
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d319      	bcc.n	800a6fa <__cvt+0xa0>
 800a6c6:	9b03      	ldr	r3, [sp, #12]
 800a6c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6ca:	1a1b      	subs	r3, r3, r0
 800a6cc:	6013      	str	r3, [r2, #0]
 800a6ce:	b005      	add	sp, #20
 800a6d0:	ecbd 8b02 	vpop	{d8}
 800a6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d6:	2d46      	cmp	r5, #70	@ 0x46
 800a6d8:	eb00 0204 	add.w	r2, r0, r4
 800a6dc:	d1e9      	bne.n	800a6b2 <__cvt+0x58>
 800a6de:	7803      	ldrb	r3, [r0, #0]
 800a6e0:	2b30      	cmp	r3, #48	@ 0x30
 800a6e2:	d107      	bne.n	800a6f4 <__cvt+0x9a>
 800a6e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ec:	bf1c      	itt	ne
 800a6ee:	f1c4 0401 	rsbne	r4, r4, #1
 800a6f2:	6034      	strne	r4, [r6, #0]
 800a6f4:	6833      	ldr	r3, [r6, #0]
 800a6f6:	441a      	add	r2, r3
 800a6f8:	e7db      	b.n	800a6b2 <__cvt+0x58>
 800a6fa:	1c5c      	adds	r4, r3, #1
 800a6fc:	9403      	str	r4, [sp, #12]
 800a6fe:	7019      	strb	r1, [r3, #0]
 800a700:	e7de      	b.n	800a6c0 <__cvt+0x66>

0800a702 <__exponent>:
 800a702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a704:	2900      	cmp	r1, #0
 800a706:	bfba      	itte	lt
 800a708:	4249      	neglt	r1, r1
 800a70a:	232d      	movlt	r3, #45	@ 0x2d
 800a70c:	232b      	movge	r3, #43	@ 0x2b
 800a70e:	2909      	cmp	r1, #9
 800a710:	7002      	strb	r2, [r0, #0]
 800a712:	7043      	strb	r3, [r0, #1]
 800a714:	dd29      	ble.n	800a76a <__exponent+0x68>
 800a716:	f10d 0307 	add.w	r3, sp, #7
 800a71a:	461d      	mov	r5, r3
 800a71c:	270a      	movs	r7, #10
 800a71e:	461a      	mov	r2, r3
 800a720:	fbb1 f6f7 	udiv	r6, r1, r7
 800a724:	fb07 1416 	mls	r4, r7, r6, r1
 800a728:	3430      	adds	r4, #48	@ 0x30
 800a72a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a72e:	460c      	mov	r4, r1
 800a730:	2c63      	cmp	r4, #99	@ 0x63
 800a732:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a736:	4631      	mov	r1, r6
 800a738:	dcf1      	bgt.n	800a71e <__exponent+0x1c>
 800a73a:	3130      	adds	r1, #48	@ 0x30
 800a73c:	1e94      	subs	r4, r2, #2
 800a73e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a742:	1c41      	adds	r1, r0, #1
 800a744:	4623      	mov	r3, r4
 800a746:	42ab      	cmp	r3, r5
 800a748:	d30a      	bcc.n	800a760 <__exponent+0x5e>
 800a74a:	f10d 0309 	add.w	r3, sp, #9
 800a74e:	1a9b      	subs	r3, r3, r2
 800a750:	42ac      	cmp	r4, r5
 800a752:	bf88      	it	hi
 800a754:	2300      	movhi	r3, #0
 800a756:	3302      	adds	r3, #2
 800a758:	4403      	add	r3, r0
 800a75a:	1a18      	subs	r0, r3, r0
 800a75c:	b003      	add	sp, #12
 800a75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a760:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a764:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a768:	e7ed      	b.n	800a746 <__exponent+0x44>
 800a76a:	2330      	movs	r3, #48	@ 0x30
 800a76c:	3130      	adds	r1, #48	@ 0x30
 800a76e:	7083      	strb	r3, [r0, #2]
 800a770:	70c1      	strb	r1, [r0, #3]
 800a772:	1d03      	adds	r3, r0, #4
 800a774:	e7f1      	b.n	800a75a <__exponent+0x58>
	...

0800a778 <_printf_float>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	b08d      	sub	sp, #52	@ 0x34
 800a77e:	460c      	mov	r4, r1
 800a780:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a784:	4616      	mov	r6, r2
 800a786:	461f      	mov	r7, r3
 800a788:	4605      	mov	r5, r0
 800a78a:	f000 fd03 	bl	800b194 <_localeconv_r>
 800a78e:	f8d0 b000 	ldr.w	fp, [r0]
 800a792:	4658      	mov	r0, fp
 800a794:	f7f5 fdf4 	bl	8000380 <strlen>
 800a798:	2300      	movs	r3, #0
 800a79a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a79c:	f8d8 3000 	ldr.w	r3, [r8]
 800a7a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a7a4:	6822      	ldr	r2, [r4, #0]
 800a7a6:	9005      	str	r0, [sp, #20]
 800a7a8:	3307      	adds	r3, #7
 800a7aa:	f023 0307 	bic.w	r3, r3, #7
 800a7ae:	f103 0108 	add.w	r1, r3, #8
 800a7b2:	f8c8 1000 	str.w	r1, [r8]
 800a7b6:	ed93 0b00 	vldr	d0, [r3]
 800a7ba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800aa18 <_printf_float+0x2a0>
 800a7be:	eeb0 7bc0 	vabs.f64	d7, d0
 800a7c2:	eeb4 7b46 	vcmp.f64	d7, d6
 800a7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a7ce:	dd24      	ble.n	800a81a <_printf_float+0xa2>
 800a7d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d8:	d502      	bpl.n	800a7e0 <_printf_float+0x68>
 800a7da:	232d      	movs	r3, #45	@ 0x2d
 800a7dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7e0:	498f      	ldr	r1, [pc, #572]	@ (800aa20 <_printf_float+0x2a8>)
 800a7e2:	4b90      	ldr	r3, [pc, #576]	@ (800aa24 <_printf_float+0x2ac>)
 800a7e4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a7e8:	bf8c      	ite	hi
 800a7ea:	4688      	movhi	r8, r1
 800a7ec:	4698      	movls	r8, r3
 800a7ee:	f022 0204 	bic.w	r2, r2, #4
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	6123      	str	r3, [r4, #16]
 800a7f6:	6022      	str	r2, [r4, #0]
 800a7f8:	f04f 0a00 	mov.w	sl, #0
 800a7fc:	9700      	str	r7, [sp, #0]
 800a7fe:	4633      	mov	r3, r6
 800a800:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a802:	4621      	mov	r1, r4
 800a804:	4628      	mov	r0, r5
 800a806:	f000 f9d1 	bl	800abac <_printf_common>
 800a80a:	3001      	adds	r0, #1
 800a80c:	f040 8089 	bne.w	800a922 <_printf_float+0x1aa>
 800a810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a814:	b00d      	add	sp, #52	@ 0x34
 800a816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a822:	d709      	bvc.n	800a838 <_printf_float+0xc0>
 800a824:	ee10 3a90 	vmov	r3, s1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bfbc      	itt	lt
 800a82c:	232d      	movlt	r3, #45	@ 0x2d
 800a82e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a832:	497d      	ldr	r1, [pc, #500]	@ (800aa28 <_printf_float+0x2b0>)
 800a834:	4b7d      	ldr	r3, [pc, #500]	@ (800aa2c <_printf_float+0x2b4>)
 800a836:	e7d5      	b.n	800a7e4 <_printf_float+0x6c>
 800a838:	6863      	ldr	r3, [r4, #4]
 800a83a:	1c59      	adds	r1, r3, #1
 800a83c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a840:	d139      	bne.n	800a8b6 <_printf_float+0x13e>
 800a842:	2306      	movs	r3, #6
 800a844:	6063      	str	r3, [r4, #4]
 800a846:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a84a:	2300      	movs	r3, #0
 800a84c:	6022      	str	r2, [r4, #0]
 800a84e:	9303      	str	r3, [sp, #12]
 800a850:	ab0a      	add	r3, sp, #40	@ 0x28
 800a852:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a856:	ab09      	add	r3, sp, #36	@ 0x24
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	6861      	ldr	r1, [r4, #4]
 800a85c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a860:	4628      	mov	r0, r5
 800a862:	f7ff fefa 	bl	800a65a <__cvt>
 800a866:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a86a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a86c:	4680      	mov	r8, r0
 800a86e:	d129      	bne.n	800a8c4 <_printf_float+0x14c>
 800a870:	1cc8      	adds	r0, r1, #3
 800a872:	db02      	blt.n	800a87a <_printf_float+0x102>
 800a874:	6863      	ldr	r3, [r4, #4]
 800a876:	4299      	cmp	r1, r3
 800a878:	dd41      	ble.n	800a8fe <_printf_float+0x186>
 800a87a:	f1a9 0902 	sub.w	r9, r9, #2
 800a87e:	fa5f f989 	uxtb.w	r9, r9
 800a882:	3901      	subs	r1, #1
 800a884:	464a      	mov	r2, r9
 800a886:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a88a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a88c:	f7ff ff39 	bl	800a702 <__exponent>
 800a890:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a892:	1813      	adds	r3, r2, r0
 800a894:	2a01      	cmp	r2, #1
 800a896:	4682      	mov	sl, r0
 800a898:	6123      	str	r3, [r4, #16]
 800a89a:	dc02      	bgt.n	800a8a2 <_printf_float+0x12a>
 800a89c:	6822      	ldr	r2, [r4, #0]
 800a89e:	07d2      	lsls	r2, r2, #31
 800a8a0:	d501      	bpl.n	800a8a6 <_printf_float+0x12e>
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0a6      	beq.n	800a7fc <_printf_float+0x84>
 800a8ae:	232d      	movs	r3, #45	@ 0x2d
 800a8b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8b4:	e7a2      	b.n	800a7fc <_printf_float+0x84>
 800a8b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a8ba:	d1c4      	bne.n	800a846 <_printf_float+0xce>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1c2      	bne.n	800a846 <_printf_float+0xce>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e7bf      	b.n	800a844 <_printf_float+0xcc>
 800a8c4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a8c8:	d9db      	bls.n	800a882 <_printf_float+0x10a>
 800a8ca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a8ce:	d118      	bne.n	800a902 <_printf_float+0x18a>
 800a8d0:	2900      	cmp	r1, #0
 800a8d2:	6863      	ldr	r3, [r4, #4]
 800a8d4:	dd0b      	ble.n	800a8ee <_printf_float+0x176>
 800a8d6:	6121      	str	r1, [r4, #16]
 800a8d8:	b913      	cbnz	r3, 800a8e0 <_printf_float+0x168>
 800a8da:	6822      	ldr	r2, [r4, #0]
 800a8dc:	07d0      	lsls	r0, r2, #31
 800a8de:	d502      	bpl.n	800a8e6 <_printf_float+0x16e>
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	440b      	add	r3, r1
 800a8e4:	6123      	str	r3, [r4, #16]
 800a8e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a8e8:	f04f 0a00 	mov.w	sl, #0
 800a8ec:	e7db      	b.n	800a8a6 <_printf_float+0x12e>
 800a8ee:	b913      	cbnz	r3, 800a8f6 <_printf_float+0x17e>
 800a8f0:	6822      	ldr	r2, [r4, #0]
 800a8f2:	07d2      	lsls	r2, r2, #31
 800a8f4:	d501      	bpl.n	800a8fa <_printf_float+0x182>
 800a8f6:	3302      	adds	r3, #2
 800a8f8:	e7f4      	b.n	800a8e4 <_printf_float+0x16c>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e7f2      	b.n	800a8e4 <_printf_float+0x16c>
 800a8fe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a904:	4299      	cmp	r1, r3
 800a906:	db05      	blt.n	800a914 <_printf_float+0x19c>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	6121      	str	r1, [r4, #16]
 800a90c:	07d8      	lsls	r0, r3, #31
 800a90e:	d5ea      	bpl.n	800a8e6 <_printf_float+0x16e>
 800a910:	1c4b      	adds	r3, r1, #1
 800a912:	e7e7      	b.n	800a8e4 <_printf_float+0x16c>
 800a914:	2900      	cmp	r1, #0
 800a916:	bfd4      	ite	le
 800a918:	f1c1 0202 	rsble	r2, r1, #2
 800a91c:	2201      	movgt	r2, #1
 800a91e:	4413      	add	r3, r2
 800a920:	e7e0      	b.n	800a8e4 <_printf_float+0x16c>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	055a      	lsls	r2, r3, #21
 800a926:	d407      	bmi.n	800a938 <_printf_float+0x1c0>
 800a928:	6923      	ldr	r3, [r4, #16]
 800a92a:	4642      	mov	r2, r8
 800a92c:	4631      	mov	r1, r6
 800a92e:	4628      	mov	r0, r5
 800a930:	47b8      	blx	r7
 800a932:	3001      	adds	r0, #1
 800a934:	d12a      	bne.n	800a98c <_printf_float+0x214>
 800a936:	e76b      	b.n	800a810 <_printf_float+0x98>
 800a938:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a93c:	f240 80e0 	bls.w	800ab00 <_printf_float+0x388>
 800a940:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a944:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94c:	d133      	bne.n	800a9b6 <_printf_float+0x23e>
 800a94e:	4a38      	ldr	r2, [pc, #224]	@ (800aa30 <_printf_float+0x2b8>)
 800a950:	2301      	movs	r3, #1
 800a952:	4631      	mov	r1, r6
 800a954:	4628      	mov	r0, r5
 800a956:	47b8      	blx	r7
 800a958:	3001      	adds	r0, #1
 800a95a:	f43f af59 	beq.w	800a810 <_printf_float+0x98>
 800a95e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a962:	4543      	cmp	r3, r8
 800a964:	db02      	blt.n	800a96c <_printf_float+0x1f4>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	07d8      	lsls	r0, r3, #31
 800a96a:	d50f      	bpl.n	800a98c <_printf_float+0x214>
 800a96c:	9b05      	ldr	r3, [sp, #20]
 800a96e:	465a      	mov	r2, fp
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f af4a 	beq.w	800a810 <_printf_float+0x98>
 800a97c:	f04f 0900 	mov.w	r9, #0
 800a980:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a984:	f104 0a1a 	add.w	sl, r4, #26
 800a988:	45c8      	cmp	r8, r9
 800a98a:	dc09      	bgt.n	800a9a0 <_printf_float+0x228>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	079b      	lsls	r3, r3, #30
 800a990:	f100 8107 	bmi.w	800aba2 <_printf_float+0x42a>
 800a994:	68e0      	ldr	r0, [r4, #12]
 800a996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a998:	4298      	cmp	r0, r3
 800a99a:	bfb8      	it	lt
 800a99c:	4618      	movlt	r0, r3
 800a99e:	e739      	b.n	800a814 <_printf_float+0x9c>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	4652      	mov	r2, sl
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	47b8      	blx	r7
 800a9aa:	3001      	adds	r0, #1
 800a9ac:	f43f af30 	beq.w	800a810 <_printf_float+0x98>
 800a9b0:	f109 0901 	add.w	r9, r9, #1
 800a9b4:	e7e8      	b.n	800a988 <_printf_float+0x210>
 800a9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	dc3b      	bgt.n	800aa34 <_printf_float+0x2bc>
 800a9bc:	4a1c      	ldr	r2, [pc, #112]	@ (800aa30 <_printf_float+0x2b8>)
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	47b8      	blx	r7
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	f43f af22 	beq.w	800a810 <_printf_float+0x98>
 800a9cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a9d0:	ea59 0303 	orrs.w	r3, r9, r3
 800a9d4:	d102      	bne.n	800a9dc <_printf_float+0x264>
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	07d9      	lsls	r1, r3, #31
 800a9da:	d5d7      	bpl.n	800a98c <_printf_float+0x214>
 800a9dc:	9b05      	ldr	r3, [sp, #20]
 800a9de:	465a      	mov	r2, fp
 800a9e0:	4631      	mov	r1, r6
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	47b8      	blx	r7
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	f43f af12 	beq.w	800a810 <_printf_float+0x98>
 800a9ec:	f04f 0a00 	mov.w	sl, #0
 800a9f0:	f104 0b1a 	add.w	fp, r4, #26
 800a9f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f6:	425b      	negs	r3, r3
 800a9f8:	4553      	cmp	r3, sl
 800a9fa:	dc01      	bgt.n	800aa00 <_printf_float+0x288>
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	e794      	b.n	800a92a <_printf_float+0x1b2>
 800aa00:	2301      	movs	r3, #1
 800aa02:	465a      	mov	r2, fp
 800aa04:	4631      	mov	r1, r6
 800aa06:	4628      	mov	r0, r5
 800aa08:	47b8      	blx	r7
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	f43f af00 	beq.w	800a810 <_printf_float+0x98>
 800aa10:	f10a 0a01 	add.w	sl, sl, #1
 800aa14:	e7ee      	b.n	800a9f4 <_printf_float+0x27c>
 800aa16:	bf00      	nop
 800aa18:	ffffffff 	.word	0xffffffff
 800aa1c:	7fefffff 	.word	0x7fefffff
 800aa20:	0800d008 	.word	0x0800d008
 800aa24:	0800d004 	.word	0x0800d004
 800aa28:	0800d010 	.word	0x0800d010
 800aa2c:	0800d00c 	.word	0x0800d00c
 800aa30:	0800d014 	.word	0x0800d014
 800aa34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa3a:	4553      	cmp	r3, sl
 800aa3c:	bfa8      	it	ge
 800aa3e:	4653      	movge	r3, sl
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	4699      	mov	r9, r3
 800aa44:	dc37      	bgt.n	800aab6 <_printf_float+0x33e>
 800aa46:	2300      	movs	r3, #0
 800aa48:	9307      	str	r3, [sp, #28]
 800aa4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa4e:	f104 021a 	add.w	r2, r4, #26
 800aa52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa54:	9907      	ldr	r1, [sp, #28]
 800aa56:	9306      	str	r3, [sp, #24]
 800aa58:	eba3 0309 	sub.w	r3, r3, r9
 800aa5c:	428b      	cmp	r3, r1
 800aa5e:	dc31      	bgt.n	800aac4 <_printf_float+0x34c>
 800aa60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa62:	459a      	cmp	sl, r3
 800aa64:	dc3b      	bgt.n	800aade <_printf_float+0x366>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	07da      	lsls	r2, r3, #31
 800aa6a:	d438      	bmi.n	800aade <_printf_float+0x366>
 800aa6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6e:	ebaa 0903 	sub.w	r9, sl, r3
 800aa72:	9b06      	ldr	r3, [sp, #24]
 800aa74:	ebaa 0303 	sub.w	r3, sl, r3
 800aa78:	4599      	cmp	r9, r3
 800aa7a:	bfa8      	it	ge
 800aa7c:	4699      	movge	r9, r3
 800aa7e:	f1b9 0f00 	cmp.w	r9, #0
 800aa82:	dc34      	bgt.n	800aaee <_printf_float+0x376>
 800aa84:	f04f 0800 	mov.w	r8, #0
 800aa88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa8c:	f104 0b1a 	add.w	fp, r4, #26
 800aa90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa92:	ebaa 0303 	sub.w	r3, sl, r3
 800aa96:	eba3 0309 	sub.w	r3, r3, r9
 800aa9a:	4543      	cmp	r3, r8
 800aa9c:	f77f af76 	ble.w	800a98c <_printf_float+0x214>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	465a      	mov	r2, fp
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b8      	blx	r7
 800aaaa:	3001      	adds	r0, #1
 800aaac:	f43f aeb0 	beq.w	800a810 <_printf_float+0x98>
 800aab0:	f108 0801 	add.w	r8, r8, #1
 800aab4:	e7ec      	b.n	800aa90 <_printf_float+0x318>
 800aab6:	4642      	mov	r2, r8
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	47b8      	blx	r7
 800aabe:	3001      	adds	r0, #1
 800aac0:	d1c1      	bne.n	800aa46 <_printf_float+0x2ce>
 800aac2:	e6a5      	b.n	800a810 <_printf_float+0x98>
 800aac4:	2301      	movs	r3, #1
 800aac6:	4631      	mov	r1, r6
 800aac8:	4628      	mov	r0, r5
 800aaca:	9206      	str	r2, [sp, #24]
 800aacc:	47b8      	blx	r7
 800aace:	3001      	adds	r0, #1
 800aad0:	f43f ae9e 	beq.w	800a810 <_printf_float+0x98>
 800aad4:	9b07      	ldr	r3, [sp, #28]
 800aad6:	9a06      	ldr	r2, [sp, #24]
 800aad8:	3301      	adds	r3, #1
 800aada:	9307      	str	r3, [sp, #28]
 800aadc:	e7b9      	b.n	800aa52 <_printf_float+0x2da>
 800aade:	9b05      	ldr	r3, [sp, #20]
 800aae0:	465a      	mov	r2, fp
 800aae2:	4631      	mov	r1, r6
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b8      	blx	r7
 800aae8:	3001      	adds	r0, #1
 800aaea:	d1bf      	bne.n	800aa6c <_printf_float+0x2f4>
 800aaec:	e690      	b.n	800a810 <_printf_float+0x98>
 800aaee:	9a06      	ldr	r2, [sp, #24]
 800aaf0:	464b      	mov	r3, r9
 800aaf2:	4442      	add	r2, r8
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	47b8      	blx	r7
 800aafa:	3001      	adds	r0, #1
 800aafc:	d1c2      	bne.n	800aa84 <_printf_float+0x30c>
 800aafe:	e687      	b.n	800a810 <_printf_float+0x98>
 800ab00:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ab04:	f1b9 0f01 	cmp.w	r9, #1
 800ab08:	dc01      	bgt.n	800ab0e <_printf_float+0x396>
 800ab0a:	07db      	lsls	r3, r3, #31
 800ab0c:	d536      	bpl.n	800ab7c <_printf_float+0x404>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	4642      	mov	r2, r8
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b8      	blx	r7
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f43f ae79 	beq.w	800a810 <_printf_float+0x98>
 800ab1e:	9b05      	ldr	r3, [sp, #20]
 800ab20:	465a      	mov	r2, fp
 800ab22:	4631      	mov	r1, r6
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b8      	blx	r7
 800ab28:	3001      	adds	r0, #1
 800ab2a:	f43f ae71 	beq.w	800a810 <_printf_float+0x98>
 800ab2e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ab32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800ab3e:	d018      	beq.n	800ab72 <_printf_float+0x3fa>
 800ab40:	464b      	mov	r3, r9
 800ab42:	f108 0201 	add.w	r2, r8, #1
 800ab46:	4631      	mov	r1, r6
 800ab48:	4628      	mov	r0, r5
 800ab4a:	47b8      	blx	r7
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	d10c      	bne.n	800ab6a <_printf_float+0x3f2>
 800ab50:	e65e      	b.n	800a810 <_printf_float+0x98>
 800ab52:	2301      	movs	r3, #1
 800ab54:	465a      	mov	r2, fp
 800ab56:	4631      	mov	r1, r6
 800ab58:	4628      	mov	r0, r5
 800ab5a:	47b8      	blx	r7
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	f43f ae57 	beq.w	800a810 <_printf_float+0x98>
 800ab62:	f108 0801 	add.w	r8, r8, #1
 800ab66:	45c8      	cmp	r8, r9
 800ab68:	dbf3      	blt.n	800ab52 <_printf_float+0x3da>
 800ab6a:	4653      	mov	r3, sl
 800ab6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab70:	e6dc      	b.n	800a92c <_printf_float+0x1b4>
 800ab72:	f04f 0800 	mov.w	r8, #0
 800ab76:	f104 0b1a 	add.w	fp, r4, #26
 800ab7a:	e7f4      	b.n	800ab66 <_printf_float+0x3ee>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	4642      	mov	r2, r8
 800ab80:	e7e1      	b.n	800ab46 <_printf_float+0x3ce>
 800ab82:	2301      	movs	r3, #1
 800ab84:	464a      	mov	r2, r9
 800ab86:	4631      	mov	r1, r6
 800ab88:	4628      	mov	r0, r5
 800ab8a:	47b8      	blx	r7
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	f43f ae3f 	beq.w	800a810 <_printf_float+0x98>
 800ab92:	f108 0801 	add.w	r8, r8, #1
 800ab96:	68e3      	ldr	r3, [r4, #12]
 800ab98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab9a:	1a5b      	subs	r3, r3, r1
 800ab9c:	4543      	cmp	r3, r8
 800ab9e:	dcf0      	bgt.n	800ab82 <_printf_float+0x40a>
 800aba0:	e6f8      	b.n	800a994 <_printf_float+0x21c>
 800aba2:	f04f 0800 	mov.w	r8, #0
 800aba6:	f104 0919 	add.w	r9, r4, #25
 800abaa:	e7f4      	b.n	800ab96 <_printf_float+0x41e>

0800abac <_printf_common>:
 800abac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb0:	4616      	mov	r6, r2
 800abb2:	4698      	mov	r8, r3
 800abb4:	688a      	ldr	r2, [r1, #8]
 800abb6:	690b      	ldr	r3, [r1, #16]
 800abb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abbc:	4293      	cmp	r3, r2
 800abbe:	bfb8      	it	lt
 800abc0:	4613      	movlt	r3, r2
 800abc2:	6033      	str	r3, [r6, #0]
 800abc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abc8:	4607      	mov	r7, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	b10a      	cbz	r2, 800abd2 <_printf_common+0x26>
 800abce:	3301      	adds	r3, #1
 800abd0:	6033      	str	r3, [r6, #0]
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	0699      	lsls	r1, r3, #26
 800abd6:	bf42      	ittt	mi
 800abd8:	6833      	ldrmi	r3, [r6, #0]
 800abda:	3302      	addmi	r3, #2
 800abdc:	6033      	strmi	r3, [r6, #0]
 800abde:	6825      	ldr	r5, [r4, #0]
 800abe0:	f015 0506 	ands.w	r5, r5, #6
 800abe4:	d106      	bne.n	800abf4 <_printf_common+0x48>
 800abe6:	f104 0a19 	add.w	sl, r4, #25
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	6832      	ldr	r2, [r6, #0]
 800abee:	1a9b      	subs	r3, r3, r2
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	dc26      	bgt.n	800ac42 <_printf_common+0x96>
 800abf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	3b00      	subs	r3, #0
 800abfc:	bf18      	it	ne
 800abfe:	2301      	movne	r3, #1
 800ac00:	0692      	lsls	r2, r2, #26
 800ac02:	d42b      	bmi.n	800ac5c <_printf_common+0xb0>
 800ac04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac08:	4641      	mov	r1, r8
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	47c8      	blx	r9
 800ac0e:	3001      	adds	r0, #1
 800ac10:	d01e      	beq.n	800ac50 <_printf_common+0xa4>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	6922      	ldr	r2, [r4, #16]
 800ac16:	f003 0306 	and.w	r3, r3, #6
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	bf02      	ittt	eq
 800ac1e:	68e5      	ldreq	r5, [r4, #12]
 800ac20:	6833      	ldreq	r3, [r6, #0]
 800ac22:	1aed      	subeq	r5, r5, r3
 800ac24:	68a3      	ldr	r3, [r4, #8]
 800ac26:	bf0c      	ite	eq
 800ac28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac2c:	2500      	movne	r5, #0
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	bfc4      	itt	gt
 800ac32:	1a9b      	subgt	r3, r3, r2
 800ac34:	18ed      	addgt	r5, r5, r3
 800ac36:	2600      	movs	r6, #0
 800ac38:	341a      	adds	r4, #26
 800ac3a:	42b5      	cmp	r5, r6
 800ac3c:	d11a      	bne.n	800ac74 <_printf_common+0xc8>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e008      	b.n	800ac54 <_printf_common+0xa8>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4652      	mov	r2, sl
 800ac46:	4641      	mov	r1, r8
 800ac48:	4638      	mov	r0, r7
 800ac4a:	47c8      	blx	r9
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	d103      	bne.n	800ac58 <_printf_common+0xac>
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac58:	3501      	adds	r5, #1
 800ac5a:	e7c6      	b.n	800abea <_printf_common+0x3e>
 800ac5c:	18e1      	adds	r1, r4, r3
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	2030      	movs	r0, #48	@ 0x30
 800ac62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac66:	4422      	add	r2, r4
 800ac68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac70:	3302      	adds	r3, #2
 800ac72:	e7c7      	b.n	800ac04 <_printf_common+0x58>
 800ac74:	2301      	movs	r3, #1
 800ac76:	4622      	mov	r2, r4
 800ac78:	4641      	mov	r1, r8
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	47c8      	blx	r9
 800ac7e:	3001      	adds	r0, #1
 800ac80:	d0e6      	beq.n	800ac50 <_printf_common+0xa4>
 800ac82:	3601      	adds	r6, #1
 800ac84:	e7d9      	b.n	800ac3a <_printf_common+0x8e>
	...

0800ac88 <_printf_i>:
 800ac88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	7e0f      	ldrb	r7, [r1, #24]
 800ac8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac90:	2f78      	cmp	r7, #120	@ 0x78
 800ac92:	4691      	mov	r9, r2
 800ac94:	4680      	mov	r8, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	469a      	mov	sl, r3
 800ac9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac9e:	d807      	bhi.n	800acb0 <_printf_i+0x28>
 800aca0:	2f62      	cmp	r7, #98	@ 0x62
 800aca2:	d80a      	bhi.n	800acba <_printf_i+0x32>
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	f000 80d1 	beq.w	800ae4c <_printf_i+0x1c4>
 800acaa:	2f58      	cmp	r7, #88	@ 0x58
 800acac:	f000 80b8 	beq.w	800ae20 <_printf_i+0x198>
 800acb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800acb8:	e03a      	b.n	800ad30 <_printf_i+0xa8>
 800acba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acbe:	2b15      	cmp	r3, #21
 800acc0:	d8f6      	bhi.n	800acb0 <_printf_i+0x28>
 800acc2:	a101      	add	r1, pc, #4	@ (adr r1, 800acc8 <_printf_i+0x40>)
 800acc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acc8:	0800ad21 	.word	0x0800ad21
 800accc:	0800ad35 	.word	0x0800ad35
 800acd0:	0800acb1 	.word	0x0800acb1
 800acd4:	0800acb1 	.word	0x0800acb1
 800acd8:	0800acb1 	.word	0x0800acb1
 800acdc:	0800acb1 	.word	0x0800acb1
 800ace0:	0800ad35 	.word	0x0800ad35
 800ace4:	0800acb1 	.word	0x0800acb1
 800ace8:	0800acb1 	.word	0x0800acb1
 800acec:	0800acb1 	.word	0x0800acb1
 800acf0:	0800acb1 	.word	0x0800acb1
 800acf4:	0800ae33 	.word	0x0800ae33
 800acf8:	0800ad5f 	.word	0x0800ad5f
 800acfc:	0800aded 	.word	0x0800aded
 800ad00:	0800acb1 	.word	0x0800acb1
 800ad04:	0800acb1 	.word	0x0800acb1
 800ad08:	0800ae55 	.word	0x0800ae55
 800ad0c:	0800acb1 	.word	0x0800acb1
 800ad10:	0800ad5f 	.word	0x0800ad5f
 800ad14:	0800acb1 	.word	0x0800acb1
 800ad18:	0800acb1 	.word	0x0800acb1
 800ad1c:	0800adf5 	.word	0x0800adf5
 800ad20:	6833      	ldr	r3, [r6, #0]
 800ad22:	1d1a      	adds	r2, r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6032      	str	r2, [r6, #0]
 800ad28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad30:	2301      	movs	r3, #1
 800ad32:	e09c      	b.n	800ae6e <_printf_i+0x1e6>
 800ad34:	6833      	ldr	r3, [r6, #0]
 800ad36:	6820      	ldr	r0, [r4, #0]
 800ad38:	1d19      	adds	r1, r3, #4
 800ad3a:	6031      	str	r1, [r6, #0]
 800ad3c:	0606      	lsls	r6, r0, #24
 800ad3e:	d501      	bpl.n	800ad44 <_printf_i+0xbc>
 800ad40:	681d      	ldr	r5, [r3, #0]
 800ad42:	e003      	b.n	800ad4c <_printf_i+0xc4>
 800ad44:	0645      	lsls	r5, r0, #25
 800ad46:	d5fb      	bpl.n	800ad40 <_printf_i+0xb8>
 800ad48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad4c:	2d00      	cmp	r5, #0
 800ad4e:	da03      	bge.n	800ad58 <_printf_i+0xd0>
 800ad50:	232d      	movs	r3, #45	@ 0x2d
 800ad52:	426d      	negs	r5, r5
 800ad54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad58:	4858      	ldr	r0, [pc, #352]	@ (800aebc <_printf_i+0x234>)
 800ad5a:	230a      	movs	r3, #10
 800ad5c:	e011      	b.n	800ad82 <_printf_i+0xfa>
 800ad5e:	6821      	ldr	r1, [r4, #0]
 800ad60:	6833      	ldr	r3, [r6, #0]
 800ad62:	0608      	lsls	r0, r1, #24
 800ad64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad68:	d402      	bmi.n	800ad70 <_printf_i+0xe8>
 800ad6a:	0649      	lsls	r1, r1, #25
 800ad6c:	bf48      	it	mi
 800ad6e:	b2ad      	uxthmi	r5, r5
 800ad70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad72:	4852      	ldr	r0, [pc, #328]	@ (800aebc <_printf_i+0x234>)
 800ad74:	6033      	str	r3, [r6, #0]
 800ad76:	bf14      	ite	ne
 800ad78:	230a      	movne	r3, #10
 800ad7a:	2308      	moveq	r3, #8
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad82:	6866      	ldr	r6, [r4, #4]
 800ad84:	60a6      	str	r6, [r4, #8]
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	db05      	blt.n	800ad96 <_printf_i+0x10e>
 800ad8a:	6821      	ldr	r1, [r4, #0]
 800ad8c:	432e      	orrs	r6, r5
 800ad8e:	f021 0104 	bic.w	r1, r1, #4
 800ad92:	6021      	str	r1, [r4, #0]
 800ad94:	d04b      	beq.n	800ae2e <_printf_i+0x1a6>
 800ad96:	4616      	mov	r6, r2
 800ad98:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad9c:	fb03 5711 	mls	r7, r3, r1, r5
 800ada0:	5dc7      	ldrb	r7, [r0, r7]
 800ada2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ada6:	462f      	mov	r7, r5
 800ada8:	42bb      	cmp	r3, r7
 800adaa:	460d      	mov	r5, r1
 800adac:	d9f4      	bls.n	800ad98 <_printf_i+0x110>
 800adae:	2b08      	cmp	r3, #8
 800adb0:	d10b      	bne.n	800adca <_printf_i+0x142>
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	07df      	lsls	r7, r3, #31
 800adb6:	d508      	bpl.n	800adca <_printf_i+0x142>
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	6861      	ldr	r1, [r4, #4]
 800adbc:	4299      	cmp	r1, r3
 800adbe:	bfde      	ittt	le
 800adc0:	2330      	movle	r3, #48	@ 0x30
 800adc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adc6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800adca:	1b92      	subs	r2, r2, r6
 800adcc:	6122      	str	r2, [r4, #16]
 800adce:	f8cd a000 	str.w	sl, [sp]
 800add2:	464b      	mov	r3, r9
 800add4:	aa03      	add	r2, sp, #12
 800add6:	4621      	mov	r1, r4
 800add8:	4640      	mov	r0, r8
 800adda:	f7ff fee7 	bl	800abac <_printf_common>
 800adde:	3001      	adds	r0, #1
 800ade0:	d14a      	bne.n	800ae78 <_printf_i+0x1f0>
 800ade2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ade6:	b004      	add	sp, #16
 800ade8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	f043 0320 	orr.w	r3, r3, #32
 800adf2:	6023      	str	r3, [r4, #0]
 800adf4:	4832      	ldr	r0, [pc, #200]	@ (800aec0 <_printf_i+0x238>)
 800adf6:	2778      	movs	r7, #120	@ 0x78
 800adf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	6831      	ldr	r1, [r6, #0]
 800ae00:	061f      	lsls	r7, r3, #24
 800ae02:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae06:	d402      	bmi.n	800ae0e <_printf_i+0x186>
 800ae08:	065f      	lsls	r7, r3, #25
 800ae0a:	bf48      	it	mi
 800ae0c:	b2ad      	uxthmi	r5, r5
 800ae0e:	6031      	str	r1, [r6, #0]
 800ae10:	07d9      	lsls	r1, r3, #31
 800ae12:	bf44      	itt	mi
 800ae14:	f043 0320 	orrmi.w	r3, r3, #32
 800ae18:	6023      	strmi	r3, [r4, #0]
 800ae1a:	b11d      	cbz	r5, 800ae24 <_printf_i+0x19c>
 800ae1c:	2310      	movs	r3, #16
 800ae1e:	e7ad      	b.n	800ad7c <_printf_i+0xf4>
 800ae20:	4826      	ldr	r0, [pc, #152]	@ (800aebc <_printf_i+0x234>)
 800ae22:	e7e9      	b.n	800adf8 <_printf_i+0x170>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	f023 0320 	bic.w	r3, r3, #32
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	e7f6      	b.n	800ae1c <_printf_i+0x194>
 800ae2e:	4616      	mov	r6, r2
 800ae30:	e7bd      	b.n	800adae <_printf_i+0x126>
 800ae32:	6833      	ldr	r3, [r6, #0]
 800ae34:	6825      	ldr	r5, [r4, #0]
 800ae36:	6961      	ldr	r1, [r4, #20]
 800ae38:	1d18      	adds	r0, r3, #4
 800ae3a:	6030      	str	r0, [r6, #0]
 800ae3c:	062e      	lsls	r6, r5, #24
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	d501      	bpl.n	800ae46 <_printf_i+0x1be>
 800ae42:	6019      	str	r1, [r3, #0]
 800ae44:	e002      	b.n	800ae4c <_printf_i+0x1c4>
 800ae46:	0668      	lsls	r0, r5, #25
 800ae48:	d5fb      	bpl.n	800ae42 <_printf_i+0x1ba>
 800ae4a:	8019      	strh	r1, [r3, #0]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	6123      	str	r3, [r4, #16]
 800ae50:	4616      	mov	r6, r2
 800ae52:	e7bc      	b.n	800adce <_printf_i+0x146>
 800ae54:	6833      	ldr	r3, [r6, #0]
 800ae56:	1d1a      	adds	r2, r3, #4
 800ae58:	6032      	str	r2, [r6, #0]
 800ae5a:	681e      	ldr	r6, [r3, #0]
 800ae5c:	6862      	ldr	r2, [r4, #4]
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7f5 fa3d 	bl	80002e0 <memchr>
 800ae66:	b108      	cbz	r0, 800ae6c <_printf_i+0x1e4>
 800ae68:	1b80      	subs	r0, r0, r6
 800ae6a:	6060      	str	r0, [r4, #4]
 800ae6c:	6863      	ldr	r3, [r4, #4]
 800ae6e:	6123      	str	r3, [r4, #16]
 800ae70:	2300      	movs	r3, #0
 800ae72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae76:	e7aa      	b.n	800adce <_printf_i+0x146>
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	4632      	mov	r2, r6
 800ae7c:	4649      	mov	r1, r9
 800ae7e:	4640      	mov	r0, r8
 800ae80:	47d0      	blx	sl
 800ae82:	3001      	adds	r0, #1
 800ae84:	d0ad      	beq.n	800ade2 <_printf_i+0x15a>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	079b      	lsls	r3, r3, #30
 800ae8a:	d413      	bmi.n	800aeb4 <_printf_i+0x22c>
 800ae8c:	68e0      	ldr	r0, [r4, #12]
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	4298      	cmp	r0, r3
 800ae92:	bfb8      	it	lt
 800ae94:	4618      	movlt	r0, r3
 800ae96:	e7a6      	b.n	800ade6 <_printf_i+0x15e>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	4632      	mov	r2, r6
 800ae9c:	4649      	mov	r1, r9
 800ae9e:	4640      	mov	r0, r8
 800aea0:	47d0      	blx	sl
 800aea2:	3001      	adds	r0, #1
 800aea4:	d09d      	beq.n	800ade2 <_printf_i+0x15a>
 800aea6:	3501      	adds	r5, #1
 800aea8:	68e3      	ldr	r3, [r4, #12]
 800aeaa:	9903      	ldr	r1, [sp, #12]
 800aeac:	1a5b      	subs	r3, r3, r1
 800aeae:	42ab      	cmp	r3, r5
 800aeb0:	dcf2      	bgt.n	800ae98 <_printf_i+0x210>
 800aeb2:	e7eb      	b.n	800ae8c <_printf_i+0x204>
 800aeb4:	2500      	movs	r5, #0
 800aeb6:	f104 0619 	add.w	r6, r4, #25
 800aeba:	e7f5      	b.n	800aea8 <_printf_i+0x220>
 800aebc:	0800d016 	.word	0x0800d016
 800aec0:	0800d027 	.word	0x0800d027

0800aec4 <std>:
 800aec4:	2300      	movs	r3, #0
 800aec6:	b510      	push	{r4, lr}
 800aec8:	4604      	mov	r4, r0
 800aeca:	e9c0 3300 	strd	r3, r3, [r0]
 800aece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aed2:	6083      	str	r3, [r0, #8]
 800aed4:	8181      	strh	r1, [r0, #12]
 800aed6:	6643      	str	r3, [r0, #100]	@ 0x64
 800aed8:	81c2      	strh	r2, [r0, #14]
 800aeda:	6183      	str	r3, [r0, #24]
 800aedc:	4619      	mov	r1, r3
 800aede:	2208      	movs	r2, #8
 800aee0:	305c      	adds	r0, #92	@ 0x5c
 800aee2:	f000 f921 	bl	800b128 <memset>
 800aee6:	4b0d      	ldr	r3, [pc, #52]	@ (800af1c <std+0x58>)
 800aee8:	6263      	str	r3, [r4, #36]	@ 0x24
 800aeea:	4b0d      	ldr	r3, [pc, #52]	@ (800af20 <std+0x5c>)
 800aeec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aeee:	4b0d      	ldr	r3, [pc, #52]	@ (800af24 <std+0x60>)
 800aef0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aef2:	4b0d      	ldr	r3, [pc, #52]	@ (800af28 <std+0x64>)
 800aef4:	6323      	str	r3, [r4, #48]	@ 0x30
 800aef6:	4b0d      	ldr	r3, [pc, #52]	@ (800af2c <std+0x68>)
 800aef8:	6224      	str	r4, [r4, #32]
 800aefa:	429c      	cmp	r4, r3
 800aefc:	d006      	beq.n	800af0c <std+0x48>
 800aefe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af02:	4294      	cmp	r4, r2
 800af04:	d002      	beq.n	800af0c <std+0x48>
 800af06:	33d0      	adds	r3, #208	@ 0xd0
 800af08:	429c      	cmp	r4, r3
 800af0a:	d105      	bne.n	800af18 <std+0x54>
 800af0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af14:	f000 b93a 	b.w	800b18c <__retarget_lock_init_recursive>
 800af18:	bd10      	pop	{r4, pc}
 800af1a:	bf00      	nop
 800af1c:	0800c9a9 	.word	0x0800c9a9
 800af20:	0800c9cb 	.word	0x0800c9cb
 800af24:	0800ca03 	.word	0x0800ca03
 800af28:	0800ca27 	.word	0x0800ca27
 800af2c:	24000ba4 	.word	0x24000ba4

0800af30 <stdio_exit_handler>:
 800af30:	4a02      	ldr	r2, [pc, #8]	@ (800af3c <stdio_exit_handler+0xc>)
 800af32:	4903      	ldr	r1, [pc, #12]	@ (800af40 <stdio_exit_handler+0x10>)
 800af34:	4803      	ldr	r0, [pc, #12]	@ (800af44 <stdio_exit_handler+0x14>)
 800af36:	f000 b869 	b.w	800b00c <_fwalk_sglue>
 800af3a:	bf00      	nop
 800af3c:	24000010 	.word	0x24000010
 800af40:	0800c24d 	.word	0x0800c24d
 800af44:	24000020 	.word	0x24000020

0800af48 <cleanup_stdio>:
 800af48:	6841      	ldr	r1, [r0, #4]
 800af4a:	4b0c      	ldr	r3, [pc, #48]	@ (800af7c <cleanup_stdio+0x34>)
 800af4c:	4299      	cmp	r1, r3
 800af4e:	b510      	push	{r4, lr}
 800af50:	4604      	mov	r4, r0
 800af52:	d001      	beq.n	800af58 <cleanup_stdio+0x10>
 800af54:	f001 f97a 	bl	800c24c <_fflush_r>
 800af58:	68a1      	ldr	r1, [r4, #8]
 800af5a:	4b09      	ldr	r3, [pc, #36]	@ (800af80 <cleanup_stdio+0x38>)
 800af5c:	4299      	cmp	r1, r3
 800af5e:	d002      	beq.n	800af66 <cleanup_stdio+0x1e>
 800af60:	4620      	mov	r0, r4
 800af62:	f001 f973 	bl	800c24c <_fflush_r>
 800af66:	68e1      	ldr	r1, [r4, #12]
 800af68:	4b06      	ldr	r3, [pc, #24]	@ (800af84 <cleanup_stdio+0x3c>)
 800af6a:	4299      	cmp	r1, r3
 800af6c:	d004      	beq.n	800af78 <cleanup_stdio+0x30>
 800af6e:	4620      	mov	r0, r4
 800af70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af74:	f001 b96a 	b.w	800c24c <_fflush_r>
 800af78:	bd10      	pop	{r4, pc}
 800af7a:	bf00      	nop
 800af7c:	24000ba4 	.word	0x24000ba4
 800af80:	24000c0c 	.word	0x24000c0c
 800af84:	24000c74 	.word	0x24000c74

0800af88 <global_stdio_init.part.0>:
 800af88:	b510      	push	{r4, lr}
 800af8a:	4b0b      	ldr	r3, [pc, #44]	@ (800afb8 <global_stdio_init.part.0+0x30>)
 800af8c:	4c0b      	ldr	r4, [pc, #44]	@ (800afbc <global_stdio_init.part.0+0x34>)
 800af8e:	4a0c      	ldr	r2, [pc, #48]	@ (800afc0 <global_stdio_init.part.0+0x38>)
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	4620      	mov	r0, r4
 800af94:	2200      	movs	r2, #0
 800af96:	2104      	movs	r1, #4
 800af98:	f7ff ff94 	bl	800aec4 <std>
 800af9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afa0:	2201      	movs	r2, #1
 800afa2:	2109      	movs	r1, #9
 800afa4:	f7ff ff8e 	bl	800aec4 <std>
 800afa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800afac:	2202      	movs	r2, #2
 800afae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb2:	2112      	movs	r1, #18
 800afb4:	f7ff bf86 	b.w	800aec4 <std>
 800afb8:	24000cdc 	.word	0x24000cdc
 800afbc:	24000ba4 	.word	0x24000ba4
 800afc0:	0800af31 	.word	0x0800af31

0800afc4 <__sfp_lock_acquire>:
 800afc4:	4801      	ldr	r0, [pc, #4]	@ (800afcc <__sfp_lock_acquire+0x8>)
 800afc6:	f000 b8e2 	b.w	800b18e <__retarget_lock_acquire_recursive>
 800afca:	bf00      	nop
 800afcc:	24000ce1 	.word	0x24000ce1

0800afd0 <__sfp_lock_release>:
 800afd0:	4801      	ldr	r0, [pc, #4]	@ (800afd8 <__sfp_lock_release+0x8>)
 800afd2:	f000 b8dd 	b.w	800b190 <__retarget_lock_release_recursive>
 800afd6:	bf00      	nop
 800afd8:	24000ce1 	.word	0x24000ce1

0800afdc <__sinit>:
 800afdc:	b510      	push	{r4, lr}
 800afde:	4604      	mov	r4, r0
 800afe0:	f7ff fff0 	bl	800afc4 <__sfp_lock_acquire>
 800afe4:	6a23      	ldr	r3, [r4, #32]
 800afe6:	b11b      	cbz	r3, 800aff0 <__sinit+0x14>
 800afe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afec:	f7ff bff0 	b.w	800afd0 <__sfp_lock_release>
 800aff0:	4b04      	ldr	r3, [pc, #16]	@ (800b004 <__sinit+0x28>)
 800aff2:	6223      	str	r3, [r4, #32]
 800aff4:	4b04      	ldr	r3, [pc, #16]	@ (800b008 <__sinit+0x2c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1f5      	bne.n	800afe8 <__sinit+0xc>
 800affc:	f7ff ffc4 	bl	800af88 <global_stdio_init.part.0>
 800b000:	e7f2      	b.n	800afe8 <__sinit+0xc>
 800b002:	bf00      	nop
 800b004:	0800af49 	.word	0x0800af49
 800b008:	24000cdc 	.word	0x24000cdc

0800b00c <_fwalk_sglue>:
 800b00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b010:	4607      	mov	r7, r0
 800b012:	4688      	mov	r8, r1
 800b014:	4614      	mov	r4, r2
 800b016:	2600      	movs	r6, #0
 800b018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b01c:	f1b9 0901 	subs.w	r9, r9, #1
 800b020:	d505      	bpl.n	800b02e <_fwalk_sglue+0x22>
 800b022:	6824      	ldr	r4, [r4, #0]
 800b024:	2c00      	cmp	r4, #0
 800b026:	d1f7      	bne.n	800b018 <_fwalk_sglue+0xc>
 800b028:	4630      	mov	r0, r6
 800b02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b02e:	89ab      	ldrh	r3, [r5, #12]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d907      	bls.n	800b044 <_fwalk_sglue+0x38>
 800b034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b038:	3301      	adds	r3, #1
 800b03a:	d003      	beq.n	800b044 <_fwalk_sglue+0x38>
 800b03c:	4629      	mov	r1, r5
 800b03e:	4638      	mov	r0, r7
 800b040:	47c0      	blx	r8
 800b042:	4306      	orrs	r6, r0
 800b044:	3568      	adds	r5, #104	@ 0x68
 800b046:	e7e9      	b.n	800b01c <_fwalk_sglue+0x10>

0800b048 <iprintf>:
 800b048:	b40f      	push	{r0, r1, r2, r3}
 800b04a:	b507      	push	{r0, r1, r2, lr}
 800b04c:	4906      	ldr	r1, [pc, #24]	@ (800b068 <iprintf+0x20>)
 800b04e:	ab04      	add	r3, sp, #16
 800b050:	6808      	ldr	r0, [r1, #0]
 800b052:	f853 2b04 	ldr.w	r2, [r3], #4
 800b056:	6881      	ldr	r1, [r0, #8]
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	f000 feb1 	bl	800bdc0 <_vfiprintf_r>
 800b05e:	b003      	add	sp, #12
 800b060:	f85d eb04 	ldr.w	lr, [sp], #4
 800b064:	b004      	add	sp, #16
 800b066:	4770      	bx	lr
 800b068:	2400001c 	.word	0x2400001c

0800b06c <_puts_r>:
 800b06c:	6a03      	ldr	r3, [r0, #32]
 800b06e:	b570      	push	{r4, r5, r6, lr}
 800b070:	6884      	ldr	r4, [r0, #8]
 800b072:	4605      	mov	r5, r0
 800b074:	460e      	mov	r6, r1
 800b076:	b90b      	cbnz	r3, 800b07c <_puts_r+0x10>
 800b078:	f7ff ffb0 	bl	800afdc <__sinit>
 800b07c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b07e:	07db      	lsls	r3, r3, #31
 800b080:	d405      	bmi.n	800b08e <_puts_r+0x22>
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	0598      	lsls	r0, r3, #22
 800b086:	d402      	bmi.n	800b08e <_puts_r+0x22>
 800b088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b08a:	f000 f880 	bl	800b18e <__retarget_lock_acquire_recursive>
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	0719      	lsls	r1, r3, #28
 800b092:	d502      	bpl.n	800b09a <_puts_r+0x2e>
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d135      	bne.n	800b106 <_puts_r+0x9a>
 800b09a:	4621      	mov	r1, r4
 800b09c:	4628      	mov	r0, r5
 800b09e:	f001 fd05 	bl	800caac <__swsetup_r>
 800b0a2:	b380      	cbz	r0, 800b106 <_puts_r+0x9a>
 800b0a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b0a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0aa:	07da      	lsls	r2, r3, #31
 800b0ac:	d405      	bmi.n	800b0ba <_puts_r+0x4e>
 800b0ae:	89a3      	ldrh	r3, [r4, #12]
 800b0b0:	059b      	lsls	r3, r3, #22
 800b0b2:	d402      	bmi.n	800b0ba <_puts_r+0x4e>
 800b0b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0b6:	f000 f86b 	bl	800b190 <__retarget_lock_release_recursive>
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	bd70      	pop	{r4, r5, r6, pc}
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	da04      	bge.n	800b0cc <_puts_r+0x60>
 800b0c2:	69a2      	ldr	r2, [r4, #24]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	dc17      	bgt.n	800b0f8 <_puts_r+0x8c>
 800b0c8:	290a      	cmp	r1, #10
 800b0ca:	d015      	beq.n	800b0f8 <_puts_r+0x8c>
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	1c5a      	adds	r2, r3, #1
 800b0d0:	6022      	str	r2, [r4, #0]
 800b0d2:	7019      	strb	r1, [r3, #0]
 800b0d4:	68a3      	ldr	r3, [r4, #8]
 800b0d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	60a3      	str	r3, [r4, #8]
 800b0de:	2900      	cmp	r1, #0
 800b0e0:	d1ed      	bne.n	800b0be <_puts_r+0x52>
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	da11      	bge.n	800b10a <_puts_r+0x9e>
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	210a      	movs	r1, #10
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f001 fc9f 	bl	800ca2e <__swbuf_r>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d0d7      	beq.n	800b0a4 <_puts_r+0x38>
 800b0f4:	250a      	movs	r5, #10
 800b0f6:	e7d7      	b.n	800b0a8 <_puts_r+0x3c>
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f001 fc97 	bl	800ca2e <__swbuf_r>
 800b100:	3001      	adds	r0, #1
 800b102:	d1e7      	bne.n	800b0d4 <_puts_r+0x68>
 800b104:	e7ce      	b.n	800b0a4 <_puts_r+0x38>
 800b106:	3e01      	subs	r6, #1
 800b108:	e7e4      	b.n	800b0d4 <_puts_r+0x68>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	1c5a      	adds	r2, r3, #1
 800b10e:	6022      	str	r2, [r4, #0]
 800b110:	220a      	movs	r2, #10
 800b112:	701a      	strb	r2, [r3, #0]
 800b114:	e7ee      	b.n	800b0f4 <_puts_r+0x88>
	...

0800b118 <puts>:
 800b118:	4b02      	ldr	r3, [pc, #8]	@ (800b124 <puts+0xc>)
 800b11a:	4601      	mov	r1, r0
 800b11c:	6818      	ldr	r0, [r3, #0]
 800b11e:	f7ff bfa5 	b.w	800b06c <_puts_r>
 800b122:	bf00      	nop
 800b124:	2400001c 	.word	0x2400001c

0800b128 <memset>:
 800b128:	4402      	add	r2, r0
 800b12a:	4603      	mov	r3, r0
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d100      	bne.n	800b132 <memset+0xa>
 800b130:	4770      	bx	lr
 800b132:	f803 1b01 	strb.w	r1, [r3], #1
 800b136:	e7f9      	b.n	800b12c <memset+0x4>

0800b138 <__errno>:
 800b138:	4b01      	ldr	r3, [pc, #4]	@ (800b140 <__errno+0x8>)
 800b13a:	6818      	ldr	r0, [r3, #0]
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	2400001c 	.word	0x2400001c

0800b144 <__libc_init_array>:
 800b144:	b570      	push	{r4, r5, r6, lr}
 800b146:	4d0d      	ldr	r5, [pc, #52]	@ (800b17c <__libc_init_array+0x38>)
 800b148:	4c0d      	ldr	r4, [pc, #52]	@ (800b180 <__libc_init_array+0x3c>)
 800b14a:	1b64      	subs	r4, r4, r5
 800b14c:	10a4      	asrs	r4, r4, #2
 800b14e:	2600      	movs	r6, #0
 800b150:	42a6      	cmp	r6, r4
 800b152:	d109      	bne.n	800b168 <__libc_init_array+0x24>
 800b154:	4d0b      	ldr	r5, [pc, #44]	@ (800b184 <__libc_init_array+0x40>)
 800b156:	4c0c      	ldr	r4, [pc, #48]	@ (800b188 <__libc_init_array+0x44>)
 800b158:	f001 fede 	bl	800cf18 <_init>
 800b15c:	1b64      	subs	r4, r4, r5
 800b15e:	10a4      	asrs	r4, r4, #2
 800b160:	2600      	movs	r6, #0
 800b162:	42a6      	cmp	r6, r4
 800b164:	d105      	bne.n	800b172 <__libc_init_array+0x2e>
 800b166:	bd70      	pop	{r4, r5, r6, pc}
 800b168:	f855 3b04 	ldr.w	r3, [r5], #4
 800b16c:	4798      	blx	r3
 800b16e:	3601      	adds	r6, #1
 800b170:	e7ee      	b.n	800b150 <__libc_init_array+0xc>
 800b172:	f855 3b04 	ldr.w	r3, [r5], #4
 800b176:	4798      	blx	r3
 800b178:	3601      	adds	r6, #1
 800b17a:	e7f2      	b.n	800b162 <__libc_init_array+0x1e>
 800b17c:	0800d4a4 	.word	0x0800d4a4
 800b180:	0800d4a4 	.word	0x0800d4a4
 800b184:	0800d4a4 	.word	0x0800d4a4
 800b188:	0800d4a8 	.word	0x0800d4a8

0800b18c <__retarget_lock_init_recursive>:
 800b18c:	4770      	bx	lr

0800b18e <__retarget_lock_acquire_recursive>:
 800b18e:	4770      	bx	lr

0800b190 <__retarget_lock_release_recursive>:
 800b190:	4770      	bx	lr
	...

0800b194 <_localeconv_r>:
 800b194:	4800      	ldr	r0, [pc, #0]	@ (800b198 <_localeconv_r+0x4>)
 800b196:	4770      	bx	lr
 800b198:	2400015c 	.word	0x2400015c

0800b19c <quorem>:
 800b19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	6903      	ldr	r3, [r0, #16]
 800b1a2:	690c      	ldr	r4, [r1, #16]
 800b1a4:	42a3      	cmp	r3, r4
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	db7e      	blt.n	800b2a8 <quorem+0x10c>
 800b1aa:	3c01      	subs	r4, #1
 800b1ac:	f101 0814 	add.w	r8, r1, #20
 800b1b0:	00a3      	lsls	r3, r4, #2
 800b1b2:	f100 0514 	add.w	r5, r0, #20
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1d2:	d32e      	bcc.n	800b232 <quorem+0x96>
 800b1d4:	f04f 0a00 	mov.w	sl, #0
 800b1d8:	46c4      	mov	ip, r8
 800b1da:	46ae      	mov	lr, r5
 800b1dc:	46d3      	mov	fp, sl
 800b1de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1e2:	b298      	uxth	r0, r3
 800b1e4:	fb06 a000 	mla	r0, r6, r0, sl
 800b1e8:	0c02      	lsrs	r2, r0, #16
 800b1ea:	0c1b      	lsrs	r3, r3, #16
 800b1ec:	fb06 2303 	mla	r3, r6, r3, r2
 800b1f0:	f8de 2000 	ldr.w	r2, [lr]
 800b1f4:	b280      	uxth	r0, r0
 800b1f6:	b292      	uxth	r2, r2
 800b1f8:	1a12      	subs	r2, r2, r0
 800b1fa:	445a      	add	r2, fp
 800b1fc:	f8de 0000 	ldr.w	r0, [lr]
 800b200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b204:	b29b      	uxth	r3, r3
 800b206:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b20a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b20e:	b292      	uxth	r2, r2
 800b210:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b214:	45e1      	cmp	r9, ip
 800b216:	f84e 2b04 	str.w	r2, [lr], #4
 800b21a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b21e:	d2de      	bcs.n	800b1de <quorem+0x42>
 800b220:	9b00      	ldr	r3, [sp, #0]
 800b222:	58eb      	ldr	r3, [r5, r3]
 800b224:	b92b      	cbnz	r3, 800b232 <quorem+0x96>
 800b226:	9b01      	ldr	r3, [sp, #4]
 800b228:	3b04      	subs	r3, #4
 800b22a:	429d      	cmp	r5, r3
 800b22c:	461a      	mov	r2, r3
 800b22e:	d32f      	bcc.n	800b290 <quorem+0xf4>
 800b230:	613c      	str	r4, [r7, #16]
 800b232:	4638      	mov	r0, r7
 800b234:	f001 fab0 	bl	800c798 <__mcmp>
 800b238:	2800      	cmp	r0, #0
 800b23a:	db25      	blt.n	800b288 <quorem+0xec>
 800b23c:	4629      	mov	r1, r5
 800b23e:	2000      	movs	r0, #0
 800b240:	f858 2b04 	ldr.w	r2, [r8], #4
 800b244:	f8d1 c000 	ldr.w	ip, [r1]
 800b248:	fa1f fe82 	uxth.w	lr, r2
 800b24c:	fa1f f38c 	uxth.w	r3, ip
 800b250:	eba3 030e 	sub.w	r3, r3, lr
 800b254:	4403      	add	r3, r0
 800b256:	0c12      	lsrs	r2, r2, #16
 800b258:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b25c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b260:	b29b      	uxth	r3, r3
 800b262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b266:	45c1      	cmp	r9, r8
 800b268:	f841 3b04 	str.w	r3, [r1], #4
 800b26c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b270:	d2e6      	bcs.n	800b240 <quorem+0xa4>
 800b272:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b27a:	b922      	cbnz	r2, 800b286 <quorem+0xea>
 800b27c:	3b04      	subs	r3, #4
 800b27e:	429d      	cmp	r5, r3
 800b280:	461a      	mov	r2, r3
 800b282:	d30b      	bcc.n	800b29c <quorem+0x100>
 800b284:	613c      	str	r4, [r7, #16]
 800b286:	3601      	adds	r6, #1
 800b288:	4630      	mov	r0, r6
 800b28a:	b003      	add	sp, #12
 800b28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b290:	6812      	ldr	r2, [r2, #0]
 800b292:	3b04      	subs	r3, #4
 800b294:	2a00      	cmp	r2, #0
 800b296:	d1cb      	bne.n	800b230 <quorem+0x94>
 800b298:	3c01      	subs	r4, #1
 800b29a:	e7c6      	b.n	800b22a <quorem+0x8e>
 800b29c:	6812      	ldr	r2, [r2, #0]
 800b29e:	3b04      	subs	r3, #4
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	d1ef      	bne.n	800b284 <quorem+0xe8>
 800b2a4:	3c01      	subs	r4, #1
 800b2a6:	e7ea      	b.n	800b27e <quorem+0xe2>
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	e7ee      	b.n	800b28a <quorem+0xee>
 800b2ac:	0000      	movs	r0, r0
	...

0800b2b0 <_dtoa_r>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	ed2d 8b02 	vpush	{d8}
 800b2b8:	69c7      	ldr	r7, [r0, #28]
 800b2ba:	b091      	sub	sp, #68	@ 0x44
 800b2bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b2c0:	ec55 4b10 	vmov	r4, r5, d0
 800b2c4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b2c6:	9107      	str	r1, [sp, #28]
 800b2c8:	4681      	mov	r9, r0
 800b2ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2cc:	930d      	str	r3, [sp, #52]	@ 0x34
 800b2ce:	b97f      	cbnz	r7, 800b2f0 <_dtoa_r+0x40>
 800b2d0:	2010      	movs	r0, #16
 800b2d2:	f000 fe8d 	bl	800bff0 <malloc>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	f8c9 001c 	str.w	r0, [r9, #28]
 800b2dc:	b920      	cbnz	r0, 800b2e8 <_dtoa_r+0x38>
 800b2de:	4ba0      	ldr	r3, [pc, #640]	@ (800b560 <_dtoa_r+0x2b0>)
 800b2e0:	21ef      	movs	r1, #239	@ 0xef
 800b2e2:	48a0      	ldr	r0, [pc, #640]	@ (800b564 <_dtoa_r+0x2b4>)
 800b2e4:	f001 fd20 	bl	800cd28 <__assert_func>
 800b2e8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b2ec:	6007      	str	r7, [r0, #0]
 800b2ee:	60c7      	str	r7, [r0, #12]
 800b2f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b2f4:	6819      	ldr	r1, [r3, #0]
 800b2f6:	b159      	cbz	r1, 800b310 <_dtoa_r+0x60>
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	604a      	str	r2, [r1, #4]
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	4093      	lsls	r3, r2
 800b300:	608b      	str	r3, [r1, #8]
 800b302:	4648      	mov	r0, r9
 800b304:	f001 f816 	bl	800c334 <_Bfree>
 800b308:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b30c:	2200      	movs	r2, #0
 800b30e:	601a      	str	r2, [r3, #0]
 800b310:	1e2b      	subs	r3, r5, #0
 800b312:	bfbb      	ittet	lt
 800b314:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b318:	9303      	strlt	r3, [sp, #12]
 800b31a:	2300      	movge	r3, #0
 800b31c:	2201      	movlt	r2, #1
 800b31e:	bfac      	ite	ge
 800b320:	6033      	strge	r3, [r6, #0]
 800b322:	6032      	strlt	r2, [r6, #0]
 800b324:	4b90      	ldr	r3, [pc, #576]	@ (800b568 <_dtoa_r+0x2b8>)
 800b326:	9e03      	ldr	r6, [sp, #12]
 800b328:	43b3      	bics	r3, r6
 800b32a:	d110      	bne.n	800b34e <_dtoa_r+0x9e>
 800b32c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b32e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b338:	4323      	orrs	r3, r4
 800b33a:	f000 84e6 	beq.w	800bd0a <_dtoa_r+0xa5a>
 800b33e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b340:	4f8a      	ldr	r7, [pc, #552]	@ (800b56c <_dtoa_r+0x2bc>)
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 84e8 	beq.w	800bd18 <_dtoa_r+0xa68>
 800b348:	1cfb      	adds	r3, r7, #3
 800b34a:	f000 bce3 	b.w	800bd14 <_dtoa_r+0xa64>
 800b34e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b352:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35a:	d10a      	bne.n	800b372 <_dtoa_r+0xc2>
 800b35c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b35e:	2301      	movs	r3, #1
 800b360:	6013      	str	r3, [r2, #0]
 800b362:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b364:	b113      	cbz	r3, 800b36c <_dtoa_r+0xbc>
 800b366:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b368:	4b81      	ldr	r3, [pc, #516]	@ (800b570 <_dtoa_r+0x2c0>)
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	4f81      	ldr	r7, [pc, #516]	@ (800b574 <_dtoa_r+0x2c4>)
 800b36e:	f000 bcd3 	b.w	800bd18 <_dtoa_r+0xa68>
 800b372:	aa0e      	add	r2, sp, #56	@ 0x38
 800b374:	a90f      	add	r1, sp, #60	@ 0x3c
 800b376:	4648      	mov	r0, r9
 800b378:	eeb0 0b48 	vmov.f64	d0, d8
 800b37c:	f001 fabc 	bl	800c8f8 <__d2b>
 800b380:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b386:	9001      	str	r0, [sp, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d045      	beq.n	800b418 <_dtoa_r+0x168>
 800b38c:	eeb0 7b48 	vmov.f64	d7, d8
 800b390:	ee18 1a90 	vmov	r1, s17
 800b394:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b398:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b39c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b3a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b3a4:	2500      	movs	r5, #0
 800b3a6:	ee07 1a90 	vmov	s15, r1
 800b3aa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b3ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b548 <_dtoa_r+0x298>
 800b3b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b3b6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b550 <_dtoa_r+0x2a0>
 800b3ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b3be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b558 <_dtoa_r+0x2a8>
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b3ca:	eeb0 7b46 	vmov.f64	d7, d6
 800b3ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b3d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b3d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3de:	ee16 8a90 	vmov	r8, s13
 800b3e2:	d508      	bpl.n	800b3f6 <_dtoa_r+0x146>
 800b3e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b3e8:	eeb4 6b47 	vcmp.f64	d6, d7
 800b3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f0:	bf18      	it	ne
 800b3f2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800b3f6:	f1b8 0f16 	cmp.w	r8, #22
 800b3fa:	d82b      	bhi.n	800b454 <_dtoa_r+0x1a4>
 800b3fc:	495e      	ldr	r1, [pc, #376]	@ (800b578 <_dtoa_r+0x2c8>)
 800b3fe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b402:	ed91 7b00 	vldr	d7, [r1]
 800b406:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40e:	d501      	bpl.n	800b414 <_dtoa_r+0x164>
 800b410:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b414:	2100      	movs	r1, #0
 800b416:	e01e      	b.n	800b456 <_dtoa_r+0x1a6>
 800b418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b41a:	4413      	add	r3, r2
 800b41c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b420:	2920      	cmp	r1, #32
 800b422:	bfc1      	itttt	gt
 800b424:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b428:	408e      	lslgt	r6, r1
 800b42a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b42e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b432:	bfd6      	itet	le
 800b434:	f1c1 0120 	rsble	r1, r1, #32
 800b438:	4331      	orrgt	r1, r6
 800b43a:	fa04 f101 	lslle.w	r1, r4, r1
 800b43e:	ee07 1a90 	vmov	s15, r1
 800b442:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b446:	3b01      	subs	r3, #1
 800b448:	ee17 1a90 	vmov	r1, s15
 800b44c:	2501      	movs	r5, #1
 800b44e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b452:	e7a8      	b.n	800b3a6 <_dtoa_r+0xf6>
 800b454:	2101      	movs	r1, #1
 800b456:	1ad2      	subs	r2, r2, r3
 800b458:	1e53      	subs	r3, r2, #1
 800b45a:	9306      	str	r3, [sp, #24]
 800b45c:	bf45      	ittet	mi
 800b45e:	f1c2 0301 	rsbmi	r3, r2, #1
 800b462:	9304      	strmi	r3, [sp, #16]
 800b464:	2300      	movpl	r3, #0
 800b466:	2300      	movmi	r3, #0
 800b468:	bf4c      	ite	mi
 800b46a:	9306      	strmi	r3, [sp, #24]
 800b46c:	9304      	strpl	r3, [sp, #16]
 800b46e:	f1b8 0f00 	cmp.w	r8, #0
 800b472:	910c      	str	r1, [sp, #48]	@ 0x30
 800b474:	db18      	blt.n	800b4a8 <_dtoa_r+0x1f8>
 800b476:	9b06      	ldr	r3, [sp, #24]
 800b478:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b47c:	4443      	add	r3, r8
 800b47e:	9306      	str	r3, [sp, #24]
 800b480:	2300      	movs	r3, #0
 800b482:	9a07      	ldr	r2, [sp, #28]
 800b484:	2a09      	cmp	r2, #9
 800b486:	d845      	bhi.n	800b514 <_dtoa_r+0x264>
 800b488:	2a05      	cmp	r2, #5
 800b48a:	bfc4      	itt	gt
 800b48c:	3a04      	subgt	r2, #4
 800b48e:	9207      	strgt	r2, [sp, #28]
 800b490:	9a07      	ldr	r2, [sp, #28]
 800b492:	f1a2 0202 	sub.w	r2, r2, #2
 800b496:	bfcc      	ite	gt
 800b498:	2400      	movgt	r4, #0
 800b49a:	2401      	movle	r4, #1
 800b49c:	2a03      	cmp	r2, #3
 800b49e:	d844      	bhi.n	800b52a <_dtoa_r+0x27a>
 800b4a0:	e8df f002 	tbb	[pc, r2]
 800b4a4:	0b173634 	.word	0x0b173634
 800b4a8:	9b04      	ldr	r3, [sp, #16]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	eba3 0308 	sub.w	r3, r3, r8
 800b4b0:	9304      	str	r3, [sp, #16]
 800b4b2:	920a      	str	r2, [sp, #40]	@ 0x28
 800b4b4:	f1c8 0300 	rsb	r3, r8, #0
 800b4b8:	e7e3      	b.n	800b482 <_dtoa_r+0x1d2>
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	9208      	str	r2, [sp, #32]
 800b4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4c0:	eb08 0b02 	add.w	fp, r8, r2
 800b4c4:	f10b 0a01 	add.w	sl, fp, #1
 800b4c8:	4652      	mov	r2, sl
 800b4ca:	2a01      	cmp	r2, #1
 800b4cc:	bfb8      	it	lt
 800b4ce:	2201      	movlt	r2, #1
 800b4d0:	e006      	b.n	800b4e0 <_dtoa_r+0x230>
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	9208      	str	r2, [sp, #32]
 800b4d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4d8:	2a00      	cmp	r2, #0
 800b4da:	dd29      	ble.n	800b530 <_dtoa_r+0x280>
 800b4dc:	4693      	mov	fp, r2
 800b4de:	4692      	mov	sl, r2
 800b4e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	2004      	movs	r0, #4
 800b4e8:	f100 0614 	add.w	r6, r0, #20
 800b4ec:	4296      	cmp	r6, r2
 800b4ee:	d926      	bls.n	800b53e <_dtoa_r+0x28e>
 800b4f0:	6079      	str	r1, [r7, #4]
 800b4f2:	4648      	mov	r0, r9
 800b4f4:	9305      	str	r3, [sp, #20]
 800b4f6:	f000 fedd 	bl	800c2b4 <_Balloc>
 800b4fa:	9b05      	ldr	r3, [sp, #20]
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d13e      	bne.n	800b580 <_dtoa_r+0x2d0>
 800b502:	4b1e      	ldr	r3, [pc, #120]	@ (800b57c <_dtoa_r+0x2cc>)
 800b504:	4602      	mov	r2, r0
 800b506:	f240 11af 	movw	r1, #431	@ 0x1af
 800b50a:	e6ea      	b.n	800b2e2 <_dtoa_r+0x32>
 800b50c:	2200      	movs	r2, #0
 800b50e:	e7e1      	b.n	800b4d4 <_dtoa_r+0x224>
 800b510:	2200      	movs	r2, #0
 800b512:	e7d3      	b.n	800b4bc <_dtoa_r+0x20c>
 800b514:	2401      	movs	r4, #1
 800b516:	2200      	movs	r2, #0
 800b518:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b51c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b520:	2100      	movs	r1, #0
 800b522:	46da      	mov	sl, fp
 800b524:	2212      	movs	r2, #18
 800b526:	9109      	str	r1, [sp, #36]	@ 0x24
 800b528:	e7da      	b.n	800b4e0 <_dtoa_r+0x230>
 800b52a:	2201      	movs	r2, #1
 800b52c:	9208      	str	r2, [sp, #32]
 800b52e:	e7f5      	b.n	800b51c <_dtoa_r+0x26c>
 800b530:	f04f 0b01 	mov.w	fp, #1
 800b534:	46da      	mov	sl, fp
 800b536:	465a      	mov	r2, fp
 800b538:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b53c:	e7d0      	b.n	800b4e0 <_dtoa_r+0x230>
 800b53e:	3101      	adds	r1, #1
 800b540:	0040      	lsls	r0, r0, #1
 800b542:	e7d1      	b.n	800b4e8 <_dtoa_r+0x238>
 800b544:	f3af 8000 	nop.w
 800b548:	636f4361 	.word	0x636f4361
 800b54c:	3fd287a7 	.word	0x3fd287a7
 800b550:	8b60c8b3 	.word	0x8b60c8b3
 800b554:	3fc68a28 	.word	0x3fc68a28
 800b558:	509f79fb 	.word	0x509f79fb
 800b55c:	3fd34413 	.word	0x3fd34413
 800b560:	0800d045 	.word	0x0800d045
 800b564:	0800d05c 	.word	0x0800d05c
 800b568:	7ff00000 	.word	0x7ff00000
 800b56c:	0800d041 	.word	0x0800d041
 800b570:	0800d015 	.word	0x0800d015
 800b574:	0800d014 	.word	0x0800d014
 800b578:	0800d2d0 	.word	0x0800d2d0
 800b57c:	0800d0b4 	.word	0x0800d0b4
 800b580:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b584:	f1ba 0f0e 	cmp.w	sl, #14
 800b588:	6010      	str	r0, [r2, #0]
 800b58a:	d86e      	bhi.n	800b66a <_dtoa_r+0x3ba>
 800b58c:	2c00      	cmp	r4, #0
 800b58e:	d06c      	beq.n	800b66a <_dtoa_r+0x3ba>
 800b590:	f1b8 0f00 	cmp.w	r8, #0
 800b594:	f340 80b4 	ble.w	800b700 <_dtoa_r+0x450>
 800b598:	4ac8      	ldr	r2, [pc, #800]	@ (800b8bc <_dtoa_r+0x60c>)
 800b59a:	f008 010f 	and.w	r1, r8, #15
 800b59e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b5a2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b5a6:	ed92 7b00 	vldr	d7, [r2]
 800b5aa:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b5ae:	f000 809b 	beq.w	800b6e8 <_dtoa_r+0x438>
 800b5b2:	4ac3      	ldr	r2, [pc, #780]	@ (800b8c0 <_dtoa_r+0x610>)
 800b5b4:	ed92 6b08 	vldr	d6, [r2, #32]
 800b5b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b5bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b5c0:	f001 010f 	and.w	r1, r1, #15
 800b5c4:	2203      	movs	r2, #3
 800b5c6:	48be      	ldr	r0, [pc, #760]	@ (800b8c0 <_dtoa_r+0x610>)
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	f040 808f 	bne.w	800b6ec <_dtoa_r+0x43c>
 800b5ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b5d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b5d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b5da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b5dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5e0:	2900      	cmp	r1, #0
 800b5e2:	f000 80b3 	beq.w	800b74c <_dtoa_r+0x49c>
 800b5e6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b5ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f2:	f140 80ab 	bpl.w	800b74c <_dtoa_r+0x49c>
 800b5f6:	f1ba 0f00 	cmp.w	sl, #0
 800b5fa:	f000 80a7 	beq.w	800b74c <_dtoa_r+0x49c>
 800b5fe:	f1bb 0f00 	cmp.w	fp, #0
 800b602:	dd30      	ble.n	800b666 <_dtoa_r+0x3b6>
 800b604:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b608:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b60c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b610:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800b614:	9105      	str	r1, [sp, #20]
 800b616:	3201      	adds	r2, #1
 800b618:	465c      	mov	r4, fp
 800b61a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b61e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b622:	ee07 2a90 	vmov	s15, r2
 800b626:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b62a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b62e:	ee15 2a90 	vmov	r2, s11
 800b632:	ec51 0b15 	vmov	r0, r1, d5
 800b636:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b63a:	2c00      	cmp	r4, #0
 800b63c:	f040 808a 	bne.w	800b754 <_dtoa_r+0x4a4>
 800b640:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b644:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b648:	ec41 0b17 	vmov	d7, r0, r1
 800b64c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b654:	f300 826a 	bgt.w	800bb2c <_dtoa_r+0x87c>
 800b658:	eeb1 7b47 	vneg.f64	d7, d7
 800b65c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b664:	d423      	bmi.n	800b6ae <_dtoa_r+0x3fe>
 800b666:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b66a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b66c:	2a00      	cmp	r2, #0
 800b66e:	f2c0 8129 	blt.w	800b8c4 <_dtoa_r+0x614>
 800b672:	f1b8 0f0e 	cmp.w	r8, #14
 800b676:	f300 8125 	bgt.w	800b8c4 <_dtoa_r+0x614>
 800b67a:	4b90      	ldr	r3, [pc, #576]	@ (800b8bc <_dtoa_r+0x60c>)
 800b67c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b680:	ed93 6b00 	vldr	d6, [r3]
 800b684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b686:	2b00      	cmp	r3, #0
 800b688:	f280 80c8 	bge.w	800b81c <_dtoa_r+0x56c>
 800b68c:	f1ba 0f00 	cmp.w	sl, #0
 800b690:	f300 80c4 	bgt.w	800b81c <_dtoa_r+0x56c>
 800b694:	d10b      	bne.n	800b6ae <_dtoa_r+0x3fe>
 800b696:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b69a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b69e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6aa:	f2c0 823c 	blt.w	800bb26 <_dtoa_r+0x876>
 800b6ae:	2400      	movs	r4, #0
 800b6b0:	4625      	mov	r5, r4
 800b6b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b4:	43db      	mvns	r3, r3
 800b6b6:	9305      	str	r3, [sp, #20]
 800b6b8:	463e      	mov	r6, r7
 800b6ba:	f04f 0800 	mov.w	r8, #0
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4648      	mov	r0, r9
 800b6c2:	f000 fe37 	bl	800c334 <_Bfree>
 800b6c6:	2d00      	cmp	r5, #0
 800b6c8:	f000 80a2 	beq.w	800b810 <_dtoa_r+0x560>
 800b6cc:	f1b8 0f00 	cmp.w	r8, #0
 800b6d0:	d005      	beq.n	800b6de <_dtoa_r+0x42e>
 800b6d2:	45a8      	cmp	r8, r5
 800b6d4:	d003      	beq.n	800b6de <_dtoa_r+0x42e>
 800b6d6:	4641      	mov	r1, r8
 800b6d8:	4648      	mov	r0, r9
 800b6da:	f000 fe2b 	bl	800c334 <_Bfree>
 800b6de:	4629      	mov	r1, r5
 800b6e0:	4648      	mov	r0, r9
 800b6e2:	f000 fe27 	bl	800c334 <_Bfree>
 800b6e6:	e093      	b.n	800b810 <_dtoa_r+0x560>
 800b6e8:	2202      	movs	r2, #2
 800b6ea:	e76c      	b.n	800b5c6 <_dtoa_r+0x316>
 800b6ec:	07cc      	lsls	r4, r1, #31
 800b6ee:	d504      	bpl.n	800b6fa <_dtoa_r+0x44a>
 800b6f0:	ed90 6b00 	vldr	d6, [r0]
 800b6f4:	3201      	adds	r2, #1
 800b6f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b6fa:	1049      	asrs	r1, r1, #1
 800b6fc:	3008      	adds	r0, #8
 800b6fe:	e763      	b.n	800b5c8 <_dtoa_r+0x318>
 800b700:	d022      	beq.n	800b748 <_dtoa_r+0x498>
 800b702:	f1c8 0100 	rsb	r1, r8, #0
 800b706:	4a6d      	ldr	r2, [pc, #436]	@ (800b8bc <_dtoa_r+0x60c>)
 800b708:	f001 000f 	and.w	r0, r1, #15
 800b70c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b710:	ed92 7b00 	vldr	d7, [r2]
 800b714:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b718:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b71c:	4868      	ldr	r0, [pc, #416]	@ (800b8c0 <_dtoa_r+0x610>)
 800b71e:	1109      	asrs	r1, r1, #4
 800b720:	2400      	movs	r4, #0
 800b722:	2202      	movs	r2, #2
 800b724:	b929      	cbnz	r1, 800b732 <_dtoa_r+0x482>
 800b726:	2c00      	cmp	r4, #0
 800b728:	f43f af57 	beq.w	800b5da <_dtoa_r+0x32a>
 800b72c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b730:	e753      	b.n	800b5da <_dtoa_r+0x32a>
 800b732:	07ce      	lsls	r6, r1, #31
 800b734:	d505      	bpl.n	800b742 <_dtoa_r+0x492>
 800b736:	ed90 6b00 	vldr	d6, [r0]
 800b73a:	3201      	adds	r2, #1
 800b73c:	2401      	movs	r4, #1
 800b73e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b742:	1049      	asrs	r1, r1, #1
 800b744:	3008      	adds	r0, #8
 800b746:	e7ed      	b.n	800b724 <_dtoa_r+0x474>
 800b748:	2202      	movs	r2, #2
 800b74a:	e746      	b.n	800b5da <_dtoa_r+0x32a>
 800b74c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b750:	4654      	mov	r4, sl
 800b752:	e762      	b.n	800b61a <_dtoa_r+0x36a>
 800b754:	4a59      	ldr	r2, [pc, #356]	@ (800b8bc <_dtoa_r+0x60c>)
 800b756:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b75a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b75e:	9a08      	ldr	r2, [sp, #32]
 800b760:	ec41 0b17 	vmov	d7, r0, r1
 800b764:	443c      	add	r4, r7
 800b766:	b34a      	cbz	r2, 800b7bc <_dtoa_r+0x50c>
 800b768:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b76c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b770:	463e      	mov	r6, r7
 800b772:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b776:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b77a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b77e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b782:	ee14 2a90 	vmov	r2, s9
 800b786:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b78a:	3230      	adds	r2, #48	@ 0x30
 800b78c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b790:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b798:	f806 2b01 	strb.w	r2, [r6], #1
 800b79c:	d438      	bmi.n	800b810 <_dtoa_r+0x560>
 800b79e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b7a2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7aa:	d46e      	bmi.n	800b88a <_dtoa_r+0x5da>
 800b7ac:	42a6      	cmp	r6, r4
 800b7ae:	f43f af5a 	beq.w	800b666 <_dtoa_r+0x3b6>
 800b7b2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b7b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b7ba:	e7e0      	b.n	800b77e <_dtoa_r+0x4ce>
 800b7bc:	4621      	mov	r1, r4
 800b7be:	463e      	mov	r6, r7
 800b7c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b7c4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b7c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b7cc:	ee14 2a90 	vmov	r2, s9
 800b7d0:	3230      	adds	r2, #48	@ 0x30
 800b7d2:	f806 2b01 	strb.w	r2, [r6], #1
 800b7d6:	42a6      	cmp	r6, r4
 800b7d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b7dc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b7e0:	d119      	bne.n	800b816 <_dtoa_r+0x566>
 800b7e2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b7e6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b7ea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f2:	dc4a      	bgt.n	800b88a <_dtoa_r+0x5da>
 800b7f4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b7f8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b800:	f57f af31 	bpl.w	800b666 <_dtoa_r+0x3b6>
 800b804:	460e      	mov	r6, r1
 800b806:	3901      	subs	r1, #1
 800b808:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b80c:	2b30      	cmp	r3, #48	@ 0x30
 800b80e:	d0f9      	beq.n	800b804 <_dtoa_r+0x554>
 800b810:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b814:	e027      	b.n	800b866 <_dtoa_r+0x5b6>
 800b816:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b81a:	e7d5      	b.n	800b7c8 <_dtoa_r+0x518>
 800b81c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b820:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b824:	463e      	mov	r6, r7
 800b826:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b82a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b82e:	ee15 3a10 	vmov	r3, s10
 800b832:	3330      	adds	r3, #48	@ 0x30
 800b834:	f806 3b01 	strb.w	r3, [r6], #1
 800b838:	1bf3      	subs	r3, r6, r7
 800b83a:	459a      	cmp	sl, r3
 800b83c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b840:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b844:	d132      	bne.n	800b8ac <_dtoa_r+0x5fc>
 800b846:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b84a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b852:	dc18      	bgt.n	800b886 <_dtoa_r+0x5d6>
 800b854:	eeb4 7b46 	vcmp.f64	d7, d6
 800b858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b85c:	d103      	bne.n	800b866 <_dtoa_r+0x5b6>
 800b85e:	ee15 3a10 	vmov	r3, s10
 800b862:	07db      	lsls	r3, r3, #31
 800b864:	d40f      	bmi.n	800b886 <_dtoa_r+0x5d6>
 800b866:	9901      	ldr	r1, [sp, #4]
 800b868:	4648      	mov	r0, r9
 800b86a:	f000 fd63 	bl	800c334 <_Bfree>
 800b86e:	2300      	movs	r3, #0
 800b870:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b872:	7033      	strb	r3, [r6, #0]
 800b874:	f108 0301 	add.w	r3, r8, #1
 800b878:	6013      	str	r3, [r2, #0]
 800b87a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 824b 	beq.w	800bd18 <_dtoa_r+0xa68>
 800b882:	601e      	str	r6, [r3, #0]
 800b884:	e248      	b.n	800bd18 <_dtoa_r+0xa68>
 800b886:	f8cd 8014 	str.w	r8, [sp, #20]
 800b88a:	4633      	mov	r3, r6
 800b88c:	461e      	mov	r6, r3
 800b88e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b892:	2a39      	cmp	r2, #57	@ 0x39
 800b894:	d106      	bne.n	800b8a4 <_dtoa_r+0x5f4>
 800b896:	429f      	cmp	r7, r3
 800b898:	d1f8      	bne.n	800b88c <_dtoa_r+0x5dc>
 800b89a:	9a05      	ldr	r2, [sp, #20]
 800b89c:	3201      	adds	r2, #1
 800b89e:	9205      	str	r2, [sp, #20]
 800b8a0:	2230      	movs	r2, #48	@ 0x30
 800b8a2:	703a      	strb	r2, [r7, #0]
 800b8a4:	781a      	ldrb	r2, [r3, #0]
 800b8a6:	3201      	adds	r2, #1
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	e7b1      	b.n	800b810 <_dtoa_r+0x560>
 800b8ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b8b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b8:	d1b5      	bne.n	800b826 <_dtoa_r+0x576>
 800b8ba:	e7d4      	b.n	800b866 <_dtoa_r+0x5b6>
 800b8bc:	0800d2d0 	.word	0x0800d2d0
 800b8c0:	0800d2a8 	.word	0x0800d2a8
 800b8c4:	9908      	ldr	r1, [sp, #32]
 800b8c6:	2900      	cmp	r1, #0
 800b8c8:	f000 80e9 	beq.w	800ba9e <_dtoa_r+0x7ee>
 800b8cc:	9907      	ldr	r1, [sp, #28]
 800b8ce:	2901      	cmp	r1, #1
 800b8d0:	f300 80cb 	bgt.w	800ba6a <_dtoa_r+0x7ba>
 800b8d4:	2d00      	cmp	r5, #0
 800b8d6:	f000 80c4 	beq.w	800ba62 <_dtoa_r+0x7b2>
 800b8da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b8de:	9e04      	ldr	r6, [sp, #16]
 800b8e0:	461c      	mov	r4, r3
 800b8e2:	9305      	str	r3, [sp, #20]
 800b8e4:	9b04      	ldr	r3, [sp, #16]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	9304      	str	r3, [sp, #16]
 800b8ea:	9b06      	ldr	r3, [sp, #24]
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	4413      	add	r3, r2
 800b8f0:	4648      	mov	r0, r9
 800b8f2:	9306      	str	r3, [sp, #24]
 800b8f4:	f000 fdd2 	bl	800c49c <__i2b>
 800b8f8:	9b05      	ldr	r3, [sp, #20]
 800b8fa:	4605      	mov	r5, r0
 800b8fc:	b166      	cbz	r6, 800b918 <_dtoa_r+0x668>
 800b8fe:	9a06      	ldr	r2, [sp, #24]
 800b900:	2a00      	cmp	r2, #0
 800b902:	dd09      	ble.n	800b918 <_dtoa_r+0x668>
 800b904:	42b2      	cmp	r2, r6
 800b906:	9904      	ldr	r1, [sp, #16]
 800b908:	bfa8      	it	ge
 800b90a:	4632      	movge	r2, r6
 800b90c:	1a89      	subs	r1, r1, r2
 800b90e:	9104      	str	r1, [sp, #16]
 800b910:	9906      	ldr	r1, [sp, #24]
 800b912:	1ab6      	subs	r6, r6, r2
 800b914:	1a8a      	subs	r2, r1, r2
 800b916:	9206      	str	r2, [sp, #24]
 800b918:	b30b      	cbz	r3, 800b95e <_dtoa_r+0x6ae>
 800b91a:	9a08      	ldr	r2, [sp, #32]
 800b91c:	2a00      	cmp	r2, #0
 800b91e:	f000 80c5 	beq.w	800baac <_dtoa_r+0x7fc>
 800b922:	2c00      	cmp	r4, #0
 800b924:	f000 80bf 	beq.w	800baa6 <_dtoa_r+0x7f6>
 800b928:	4629      	mov	r1, r5
 800b92a:	4622      	mov	r2, r4
 800b92c:	4648      	mov	r0, r9
 800b92e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b930:	f000 fe6c 	bl	800c60c <__pow5mult>
 800b934:	9a01      	ldr	r2, [sp, #4]
 800b936:	4601      	mov	r1, r0
 800b938:	4605      	mov	r5, r0
 800b93a:	4648      	mov	r0, r9
 800b93c:	f000 fdc4 	bl	800c4c8 <__multiply>
 800b940:	9901      	ldr	r1, [sp, #4]
 800b942:	9005      	str	r0, [sp, #20]
 800b944:	4648      	mov	r0, r9
 800b946:	f000 fcf5 	bl	800c334 <_Bfree>
 800b94a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b94c:	1b1b      	subs	r3, r3, r4
 800b94e:	f000 80b0 	beq.w	800bab2 <_dtoa_r+0x802>
 800b952:	9905      	ldr	r1, [sp, #20]
 800b954:	461a      	mov	r2, r3
 800b956:	4648      	mov	r0, r9
 800b958:	f000 fe58 	bl	800c60c <__pow5mult>
 800b95c:	9001      	str	r0, [sp, #4]
 800b95e:	2101      	movs	r1, #1
 800b960:	4648      	mov	r0, r9
 800b962:	f000 fd9b 	bl	800c49c <__i2b>
 800b966:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b968:	4604      	mov	r4, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 81da 	beq.w	800bd24 <_dtoa_r+0xa74>
 800b970:	461a      	mov	r2, r3
 800b972:	4601      	mov	r1, r0
 800b974:	4648      	mov	r0, r9
 800b976:	f000 fe49 	bl	800c60c <__pow5mult>
 800b97a:	9b07      	ldr	r3, [sp, #28]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	4604      	mov	r4, r0
 800b980:	f300 80a0 	bgt.w	800bac4 <_dtoa_r+0x814>
 800b984:	9b02      	ldr	r3, [sp, #8]
 800b986:	2b00      	cmp	r3, #0
 800b988:	f040 8096 	bne.w	800bab8 <_dtoa_r+0x808>
 800b98c:	9b03      	ldr	r3, [sp, #12]
 800b98e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b992:	2a00      	cmp	r2, #0
 800b994:	f040 8092 	bne.w	800babc <_dtoa_r+0x80c>
 800b998:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b99c:	0d12      	lsrs	r2, r2, #20
 800b99e:	0512      	lsls	r2, r2, #20
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	f000 808d 	beq.w	800bac0 <_dtoa_r+0x810>
 800b9a6:	9b04      	ldr	r3, [sp, #16]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	9304      	str	r3, [sp, #16]
 800b9ac:	9b06      	ldr	r3, [sp, #24]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	9306      	str	r3, [sp, #24]
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 81b9 	beq.w	800bd30 <_dtoa_r+0xa80>
 800b9be:	6922      	ldr	r2, [r4, #16]
 800b9c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b9c4:	6910      	ldr	r0, [r2, #16]
 800b9c6:	f000 fd1d 	bl	800c404 <__hi0bits>
 800b9ca:	f1c0 0020 	rsb	r0, r0, #32
 800b9ce:	9b06      	ldr	r3, [sp, #24]
 800b9d0:	4418      	add	r0, r3
 800b9d2:	f010 001f 	ands.w	r0, r0, #31
 800b9d6:	f000 8081 	beq.w	800badc <_dtoa_r+0x82c>
 800b9da:	f1c0 0220 	rsb	r2, r0, #32
 800b9de:	2a04      	cmp	r2, #4
 800b9e0:	dd73      	ble.n	800baca <_dtoa_r+0x81a>
 800b9e2:	9b04      	ldr	r3, [sp, #16]
 800b9e4:	f1c0 001c 	rsb	r0, r0, #28
 800b9e8:	4403      	add	r3, r0
 800b9ea:	9304      	str	r3, [sp, #16]
 800b9ec:	9b06      	ldr	r3, [sp, #24]
 800b9ee:	4406      	add	r6, r0
 800b9f0:	4403      	add	r3, r0
 800b9f2:	9306      	str	r3, [sp, #24]
 800b9f4:	9b04      	ldr	r3, [sp, #16]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	dd05      	ble.n	800ba06 <_dtoa_r+0x756>
 800b9fa:	9901      	ldr	r1, [sp, #4]
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	4648      	mov	r0, r9
 800ba00:	f000 fe5e 	bl	800c6c0 <__lshift>
 800ba04:	9001      	str	r0, [sp, #4]
 800ba06:	9b06      	ldr	r3, [sp, #24]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	dd05      	ble.n	800ba18 <_dtoa_r+0x768>
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	461a      	mov	r2, r3
 800ba10:	4648      	mov	r0, r9
 800ba12:	f000 fe55 	bl	800c6c0 <__lshift>
 800ba16:	4604      	mov	r4, r0
 800ba18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d060      	beq.n	800bae0 <_dtoa_r+0x830>
 800ba1e:	9801      	ldr	r0, [sp, #4]
 800ba20:	4621      	mov	r1, r4
 800ba22:	f000 feb9 	bl	800c798 <__mcmp>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	da5a      	bge.n	800bae0 <_dtoa_r+0x830>
 800ba2a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800ba2e:	9305      	str	r3, [sp, #20]
 800ba30:	9901      	ldr	r1, [sp, #4]
 800ba32:	2300      	movs	r3, #0
 800ba34:	220a      	movs	r2, #10
 800ba36:	4648      	mov	r0, r9
 800ba38:	f000 fc9e 	bl	800c378 <__multadd>
 800ba3c:	9b08      	ldr	r3, [sp, #32]
 800ba3e:	9001      	str	r0, [sp, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f000 8177 	beq.w	800bd34 <_dtoa_r+0xa84>
 800ba46:	4629      	mov	r1, r5
 800ba48:	2300      	movs	r3, #0
 800ba4a:	220a      	movs	r2, #10
 800ba4c:	4648      	mov	r0, r9
 800ba4e:	f000 fc93 	bl	800c378 <__multadd>
 800ba52:	f1bb 0f00 	cmp.w	fp, #0
 800ba56:	4605      	mov	r5, r0
 800ba58:	dc6e      	bgt.n	800bb38 <_dtoa_r+0x888>
 800ba5a:	9b07      	ldr	r3, [sp, #28]
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	dc48      	bgt.n	800baf2 <_dtoa_r+0x842>
 800ba60:	e06a      	b.n	800bb38 <_dtoa_r+0x888>
 800ba62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ba68:	e739      	b.n	800b8de <_dtoa_r+0x62e>
 800ba6a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800ba6e:	42a3      	cmp	r3, r4
 800ba70:	db07      	blt.n	800ba82 <_dtoa_r+0x7d2>
 800ba72:	f1ba 0f00 	cmp.w	sl, #0
 800ba76:	eba3 0404 	sub.w	r4, r3, r4
 800ba7a:	db0b      	blt.n	800ba94 <_dtoa_r+0x7e4>
 800ba7c:	9e04      	ldr	r6, [sp, #16]
 800ba7e:	4652      	mov	r2, sl
 800ba80:	e72f      	b.n	800b8e2 <_dtoa_r+0x632>
 800ba82:	1ae2      	subs	r2, r4, r3
 800ba84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba86:	9e04      	ldr	r6, [sp, #16]
 800ba88:	4413      	add	r3, r2
 800ba8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba8c:	4652      	mov	r2, sl
 800ba8e:	4623      	mov	r3, r4
 800ba90:	2400      	movs	r4, #0
 800ba92:	e726      	b.n	800b8e2 <_dtoa_r+0x632>
 800ba94:	9a04      	ldr	r2, [sp, #16]
 800ba96:	eba2 060a 	sub.w	r6, r2, sl
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	e721      	b.n	800b8e2 <_dtoa_r+0x632>
 800ba9e:	9e04      	ldr	r6, [sp, #16]
 800baa0:	9d08      	ldr	r5, [sp, #32]
 800baa2:	461c      	mov	r4, r3
 800baa4:	e72a      	b.n	800b8fc <_dtoa_r+0x64c>
 800baa6:	9a01      	ldr	r2, [sp, #4]
 800baa8:	9205      	str	r2, [sp, #20]
 800baaa:	e752      	b.n	800b952 <_dtoa_r+0x6a2>
 800baac:	9901      	ldr	r1, [sp, #4]
 800baae:	461a      	mov	r2, r3
 800bab0:	e751      	b.n	800b956 <_dtoa_r+0x6a6>
 800bab2:	9b05      	ldr	r3, [sp, #20]
 800bab4:	9301      	str	r3, [sp, #4]
 800bab6:	e752      	b.n	800b95e <_dtoa_r+0x6ae>
 800bab8:	2300      	movs	r3, #0
 800baba:	e77b      	b.n	800b9b4 <_dtoa_r+0x704>
 800babc:	9b02      	ldr	r3, [sp, #8]
 800babe:	e779      	b.n	800b9b4 <_dtoa_r+0x704>
 800bac0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bac2:	e778      	b.n	800b9b6 <_dtoa_r+0x706>
 800bac4:	2300      	movs	r3, #0
 800bac6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bac8:	e779      	b.n	800b9be <_dtoa_r+0x70e>
 800baca:	d093      	beq.n	800b9f4 <_dtoa_r+0x744>
 800bacc:	9b04      	ldr	r3, [sp, #16]
 800bace:	321c      	adds	r2, #28
 800bad0:	4413      	add	r3, r2
 800bad2:	9304      	str	r3, [sp, #16]
 800bad4:	9b06      	ldr	r3, [sp, #24]
 800bad6:	4416      	add	r6, r2
 800bad8:	4413      	add	r3, r2
 800bada:	e78a      	b.n	800b9f2 <_dtoa_r+0x742>
 800badc:	4602      	mov	r2, r0
 800bade:	e7f5      	b.n	800bacc <_dtoa_r+0x81c>
 800bae0:	f1ba 0f00 	cmp.w	sl, #0
 800bae4:	f8cd 8014 	str.w	r8, [sp, #20]
 800bae8:	46d3      	mov	fp, sl
 800baea:	dc21      	bgt.n	800bb30 <_dtoa_r+0x880>
 800baec:	9b07      	ldr	r3, [sp, #28]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	dd1e      	ble.n	800bb30 <_dtoa_r+0x880>
 800baf2:	f1bb 0f00 	cmp.w	fp, #0
 800baf6:	f47f addc 	bne.w	800b6b2 <_dtoa_r+0x402>
 800bafa:	4621      	mov	r1, r4
 800bafc:	465b      	mov	r3, fp
 800bafe:	2205      	movs	r2, #5
 800bb00:	4648      	mov	r0, r9
 800bb02:	f000 fc39 	bl	800c378 <__multadd>
 800bb06:	4601      	mov	r1, r0
 800bb08:	4604      	mov	r4, r0
 800bb0a:	9801      	ldr	r0, [sp, #4]
 800bb0c:	f000 fe44 	bl	800c798 <__mcmp>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	f77f adce 	ble.w	800b6b2 <_dtoa_r+0x402>
 800bb16:	463e      	mov	r6, r7
 800bb18:	2331      	movs	r3, #49	@ 0x31
 800bb1a:	f806 3b01 	strb.w	r3, [r6], #1
 800bb1e:	9b05      	ldr	r3, [sp, #20]
 800bb20:	3301      	adds	r3, #1
 800bb22:	9305      	str	r3, [sp, #20]
 800bb24:	e5c9      	b.n	800b6ba <_dtoa_r+0x40a>
 800bb26:	f8cd 8014 	str.w	r8, [sp, #20]
 800bb2a:	4654      	mov	r4, sl
 800bb2c:	4625      	mov	r5, r4
 800bb2e:	e7f2      	b.n	800bb16 <_dtoa_r+0x866>
 800bb30:	9b08      	ldr	r3, [sp, #32]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 8102 	beq.w	800bd3c <_dtoa_r+0xa8c>
 800bb38:	2e00      	cmp	r6, #0
 800bb3a:	dd05      	ble.n	800bb48 <_dtoa_r+0x898>
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	4632      	mov	r2, r6
 800bb40:	4648      	mov	r0, r9
 800bb42:	f000 fdbd 	bl	800c6c0 <__lshift>
 800bb46:	4605      	mov	r5, r0
 800bb48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d058      	beq.n	800bc00 <_dtoa_r+0x950>
 800bb4e:	6869      	ldr	r1, [r5, #4]
 800bb50:	4648      	mov	r0, r9
 800bb52:	f000 fbaf 	bl	800c2b4 <_Balloc>
 800bb56:	4606      	mov	r6, r0
 800bb58:	b928      	cbnz	r0, 800bb66 <_dtoa_r+0x8b6>
 800bb5a:	4b82      	ldr	r3, [pc, #520]	@ (800bd64 <_dtoa_r+0xab4>)
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb62:	f7ff bbbe 	b.w	800b2e2 <_dtoa_r+0x32>
 800bb66:	692a      	ldr	r2, [r5, #16]
 800bb68:	3202      	adds	r2, #2
 800bb6a:	0092      	lsls	r2, r2, #2
 800bb6c:	f105 010c 	add.w	r1, r5, #12
 800bb70:	300c      	adds	r0, #12
 800bb72:	f001 f8cb 	bl	800cd0c <memcpy>
 800bb76:	2201      	movs	r2, #1
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4648      	mov	r0, r9
 800bb7c:	f000 fda0 	bl	800c6c0 <__lshift>
 800bb80:	1c7b      	adds	r3, r7, #1
 800bb82:	9304      	str	r3, [sp, #16]
 800bb84:	eb07 030b 	add.w	r3, r7, fp
 800bb88:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb8a:	9b02      	ldr	r3, [sp, #8]
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	46a8      	mov	r8, r5
 800bb92:	9308      	str	r3, [sp, #32]
 800bb94:	4605      	mov	r5, r0
 800bb96:	9b04      	ldr	r3, [sp, #16]
 800bb98:	9801      	ldr	r0, [sp, #4]
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bba0:	f7ff fafc 	bl	800b19c <quorem>
 800bba4:	4641      	mov	r1, r8
 800bba6:	9002      	str	r0, [sp, #8]
 800bba8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bbac:	9801      	ldr	r0, [sp, #4]
 800bbae:	f000 fdf3 	bl	800c798 <__mcmp>
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	9006      	str	r0, [sp, #24]
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	4648      	mov	r0, r9
 800bbba:	f000 fe09 	bl	800c7d0 <__mdiff>
 800bbbe:	68c2      	ldr	r2, [r0, #12]
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	b9fa      	cbnz	r2, 800bc04 <_dtoa_r+0x954>
 800bbc4:	4601      	mov	r1, r0
 800bbc6:	9801      	ldr	r0, [sp, #4]
 800bbc8:	f000 fde6 	bl	800c798 <__mcmp>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4648      	mov	r0, r9
 800bbd2:	920a      	str	r2, [sp, #40]	@ 0x28
 800bbd4:	f000 fbae 	bl	800c334 <_Bfree>
 800bbd8:	9b07      	ldr	r3, [sp, #28]
 800bbda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbdc:	9e04      	ldr	r6, [sp, #16]
 800bbde:	ea42 0103 	orr.w	r1, r2, r3
 800bbe2:	9b08      	ldr	r3, [sp, #32]
 800bbe4:	4319      	orrs	r1, r3
 800bbe6:	d10f      	bne.n	800bc08 <_dtoa_r+0x958>
 800bbe8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bbec:	d028      	beq.n	800bc40 <_dtoa_r+0x990>
 800bbee:	9b06      	ldr	r3, [sp, #24]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dd02      	ble.n	800bbfa <_dtoa_r+0x94a>
 800bbf4:	9b02      	ldr	r3, [sp, #8]
 800bbf6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bbfa:	f88b a000 	strb.w	sl, [fp]
 800bbfe:	e55e      	b.n	800b6be <_dtoa_r+0x40e>
 800bc00:	4628      	mov	r0, r5
 800bc02:	e7bd      	b.n	800bb80 <_dtoa_r+0x8d0>
 800bc04:	2201      	movs	r2, #1
 800bc06:	e7e2      	b.n	800bbce <_dtoa_r+0x91e>
 800bc08:	9b06      	ldr	r3, [sp, #24]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	db04      	blt.n	800bc18 <_dtoa_r+0x968>
 800bc0e:	9907      	ldr	r1, [sp, #28]
 800bc10:	430b      	orrs	r3, r1
 800bc12:	9908      	ldr	r1, [sp, #32]
 800bc14:	430b      	orrs	r3, r1
 800bc16:	d120      	bne.n	800bc5a <_dtoa_r+0x9aa>
 800bc18:	2a00      	cmp	r2, #0
 800bc1a:	ddee      	ble.n	800bbfa <_dtoa_r+0x94a>
 800bc1c:	9901      	ldr	r1, [sp, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	4648      	mov	r0, r9
 800bc22:	f000 fd4d 	bl	800c6c0 <__lshift>
 800bc26:	4621      	mov	r1, r4
 800bc28:	9001      	str	r0, [sp, #4]
 800bc2a:	f000 fdb5 	bl	800c798 <__mcmp>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	dc03      	bgt.n	800bc3a <_dtoa_r+0x98a>
 800bc32:	d1e2      	bne.n	800bbfa <_dtoa_r+0x94a>
 800bc34:	f01a 0f01 	tst.w	sl, #1
 800bc38:	d0df      	beq.n	800bbfa <_dtoa_r+0x94a>
 800bc3a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bc3e:	d1d9      	bne.n	800bbf4 <_dtoa_r+0x944>
 800bc40:	2339      	movs	r3, #57	@ 0x39
 800bc42:	f88b 3000 	strb.w	r3, [fp]
 800bc46:	4633      	mov	r3, r6
 800bc48:	461e      	mov	r6, r3
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc50:	2a39      	cmp	r2, #57	@ 0x39
 800bc52:	d052      	beq.n	800bcfa <_dtoa_r+0xa4a>
 800bc54:	3201      	adds	r2, #1
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	e531      	b.n	800b6be <_dtoa_r+0x40e>
 800bc5a:	2a00      	cmp	r2, #0
 800bc5c:	dd07      	ble.n	800bc6e <_dtoa_r+0x9be>
 800bc5e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bc62:	d0ed      	beq.n	800bc40 <_dtoa_r+0x990>
 800bc64:	f10a 0301 	add.w	r3, sl, #1
 800bc68:	f88b 3000 	strb.w	r3, [fp]
 800bc6c:	e527      	b.n	800b6be <_dtoa_r+0x40e>
 800bc6e:	9b04      	ldr	r3, [sp, #16]
 800bc70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc72:	f803 ac01 	strb.w	sl, [r3, #-1]
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d029      	beq.n	800bcce <_dtoa_r+0xa1e>
 800bc7a:	9901      	ldr	r1, [sp, #4]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	220a      	movs	r2, #10
 800bc80:	4648      	mov	r0, r9
 800bc82:	f000 fb79 	bl	800c378 <__multadd>
 800bc86:	45a8      	cmp	r8, r5
 800bc88:	9001      	str	r0, [sp, #4]
 800bc8a:	f04f 0300 	mov.w	r3, #0
 800bc8e:	f04f 020a 	mov.w	r2, #10
 800bc92:	4641      	mov	r1, r8
 800bc94:	4648      	mov	r0, r9
 800bc96:	d107      	bne.n	800bca8 <_dtoa_r+0x9f8>
 800bc98:	f000 fb6e 	bl	800c378 <__multadd>
 800bc9c:	4680      	mov	r8, r0
 800bc9e:	4605      	mov	r5, r0
 800bca0:	9b04      	ldr	r3, [sp, #16]
 800bca2:	3301      	adds	r3, #1
 800bca4:	9304      	str	r3, [sp, #16]
 800bca6:	e776      	b.n	800bb96 <_dtoa_r+0x8e6>
 800bca8:	f000 fb66 	bl	800c378 <__multadd>
 800bcac:	4629      	mov	r1, r5
 800bcae:	4680      	mov	r8, r0
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	220a      	movs	r2, #10
 800bcb4:	4648      	mov	r0, r9
 800bcb6:	f000 fb5f 	bl	800c378 <__multadd>
 800bcba:	4605      	mov	r5, r0
 800bcbc:	e7f0      	b.n	800bca0 <_dtoa_r+0x9f0>
 800bcbe:	f1bb 0f00 	cmp.w	fp, #0
 800bcc2:	bfcc      	ite	gt
 800bcc4:	465e      	movgt	r6, fp
 800bcc6:	2601      	movle	r6, #1
 800bcc8:	443e      	add	r6, r7
 800bcca:	f04f 0800 	mov.w	r8, #0
 800bcce:	9901      	ldr	r1, [sp, #4]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	4648      	mov	r0, r9
 800bcd4:	f000 fcf4 	bl	800c6c0 <__lshift>
 800bcd8:	4621      	mov	r1, r4
 800bcda:	9001      	str	r0, [sp, #4]
 800bcdc:	f000 fd5c 	bl	800c798 <__mcmp>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	dcb0      	bgt.n	800bc46 <_dtoa_r+0x996>
 800bce4:	d102      	bne.n	800bcec <_dtoa_r+0xa3c>
 800bce6:	f01a 0f01 	tst.w	sl, #1
 800bcea:	d1ac      	bne.n	800bc46 <_dtoa_r+0x996>
 800bcec:	4633      	mov	r3, r6
 800bcee:	461e      	mov	r6, r3
 800bcf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcf4:	2a30      	cmp	r2, #48	@ 0x30
 800bcf6:	d0fa      	beq.n	800bcee <_dtoa_r+0xa3e>
 800bcf8:	e4e1      	b.n	800b6be <_dtoa_r+0x40e>
 800bcfa:	429f      	cmp	r7, r3
 800bcfc:	d1a4      	bne.n	800bc48 <_dtoa_r+0x998>
 800bcfe:	9b05      	ldr	r3, [sp, #20]
 800bd00:	3301      	adds	r3, #1
 800bd02:	9305      	str	r3, [sp, #20]
 800bd04:	2331      	movs	r3, #49	@ 0x31
 800bd06:	703b      	strb	r3, [r7, #0]
 800bd08:	e4d9      	b.n	800b6be <_dtoa_r+0x40e>
 800bd0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bd0c:	4f16      	ldr	r7, [pc, #88]	@ (800bd68 <_dtoa_r+0xab8>)
 800bd0e:	b11b      	cbz	r3, 800bd18 <_dtoa_r+0xa68>
 800bd10:	f107 0308 	add.w	r3, r7, #8
 800bd14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bd16:	6013      	str	r3, [r2, #0]
 800bd18:	4638      	mov	r0, r7
 800bd1a:	b011      	add	sp, #68	@ 0x44
 800bd1c:	ecbd 8b02 	vpop	{d8}
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	9b07      	ldr	r3, [sp, #28]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	f77f ae2c 	ble.w	800b984 <_dtoa_r+0x6d4>
 800bd2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd30:	2001      	movs	r0, #1
 800bd32:	e64c      	b.n	800b9ce <_dtoa_r+0x71e>
 800bd34:	f1bb 0f00 	cmp.w	fp, #0
 800bd38:	f77f aed8 	ble.w	800baec <_dtoa_r+0x83c>
 800bd3c:	463e      	mov	r6, r7
 800bd3e:	9801      	ldr	r0, [sp, #4]
 800bd40:	4621      	mov	r1, r4
 800bd42:	f7ff fa2b 	bl	800b19c <quorem>
 800bd46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bd4a:	f806 ab01 	strb.w	sl, [r6], #1
 800bd4e:	1bf2      	subs	r2, r6, r7
 800bd50:	4593      	cmp	fp, r2
 800bd52:	ddb4      	ble.n	800bcbe <_dtoa_r+0xa0e>
 800bd54:	9901      	ldr	r1, [sp, #4]
 800bd56:	2300      	movs	r3, #0
 800bd58:	220a      	movs	r2, #10
 800bd5a:	4648      	mov	r0, r9
 800bd5c:	f000 fb0c 	bl	800c378 <__multadd>
 800bd60:	9001      	str	r0, [sp, #4]
 800bd62:	e7ec      	b.n	800bd3e <_dtoa_r+0xa8e>
 800bd64:	0800d0b4 	.word	0x0800d0b4
 800bd68:	0800d038 	.word	0x0800d038

0800bd6c <__sfputc_r>:
 800bd6c:	6893      	ldr	r3, [r2, #8]
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	b410      	push	{r4}
 800bd74:	6093      	str	r3, [r2, #8]
 800bd76:	da08      	bge.n	800bd8a <__sfputc_r+0x1e>
 800bd78:	6994      	ldr	r4, [r2, #24]
 800bd7a:	42a3      	cmp	r3, r4
 800bd7c:	db01      	blt.n	800bd82 <__sfputc_r+0x16>
 800bd7e:	290a      	cmp	r1, #10
 800bd80:	d103      	bne.n	800bd8a <__sfputc_r+0x1e>
 800bd82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd86:	f000 be52 	b.w	800ca2e <__swbuf_r>
 800bd8a:	6813      	ldr	r3, [r2, #0]
 800bd8c:	1c58      	adds	r0, r3, #1
 800bd8e:	6010      	str	r0, [r2, #0]
 800bd90:	7019      	strb	r1, [r3, #0]
 800bd92:	4608      	mov	r0, r1
 800bd94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <__sfputs_r>:
 800bd9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	460f      	mov	r7, r1
 800bda0:	4614      	mov	r4, r2
 800bda2:	18d5      	adds	r5, r2, r3
 800bda4:	42ac      	cmp	r4, r5
 800bda6:	d101      	bne.n	800bdac <__sfputs_r+0x12>
 800bda8:	2000      	movs	r0, #0
 800bdaa:	e007      	b.n	800bdbc <__sfputs_r+0x22>
 800bdac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb0:	463a      	mov	r2, r7
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f7ff ffda 	bl	800bd6c <__sfputc_r>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d1f3      	bne.n	800bda4 <__sfputs_r+0xa>
 800bdbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdc0 <_vfiprintf_r>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	460d      	mov	r5, r1
 800bdc6:	b09d      	sub	sp, #116	@ 0x74
 800bdc8:	4614      	mov	r4, r2
 800bdca:	4698      	mov	r8, r3
 800bdcc:	4606      	mov	r6, r0
 800bdce:	b118      	cbz	r0, 800bdd8 <_vfiprintf_r+0x18>
 800bdd0:	6a03      	ldr	r3, [r0, #32]
 800bdd2:	b90b      	cbnz	r3, 800bdd8 <_vfiprintf_r+0x18>
 800bdd4:	f7ff f902 	bl	800afdc <__sinit>
 800bdd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdda:	07d9      	lsls	r1, r3, #31
 800bddc:	d405      	bmi.n	800bdea <_vfiprintf_r+0x2a>
 800bdde:	89ab      	ldrh	r3, [r5, #12]
 800bde0:	059a      	lsls	r2, r3, #22
 800bde2:	d402      	bmi.n	800bdea <_vfiprintf_r+0x2a>
 800bde4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bde6:	f7ff f9d2 	bl	800b18e <__retarget_lock_acquire_recursive>
 800bdea:	89ab      	ldrh	r3, [r5, #12]
 800bdec:	071b      	lsls	r3, r3, #28
 800bdee:	d501      	bpl.n	800bdf4 <_vfiprintf_r+0x34>
 800bdf0:	692b      	ldr	r3, [r5, #16]
 800bdf2:	b99b      	cbnz	r3, 800be1c <_vfiprintf_r+0x5c>
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f000 fe58 	bl	800caac <__swsetup_r>
 800bdfc:	b170      	cbz	r0, 800be1c <_vfiprintf_r+0x5c>
 800bdfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be00:	07dc      	lsls	r4, r3, #31
 800be02:	d504      	bpl.n	800be0e <_vfiprintf_r+0x4e>
 800be04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be08:	b01d      	add	sp, #116	@ 0x74
 800be0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0e:	89ab      	ldrh	r3, [r5, #12]
 800be10:	0598      	lsls	r0, r3, #22
 800be12:	d4f7      	bmi.n	800be04 <_vfiprintf_r+0x44>
 800be14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be16:	f7ff f9bb 	bl	800b190 <__retarget_lock_release_recursive>
 800be1a:	e7f3      	b.n	800be04 <_vfiprintf_r+0x44>
 800be1c:	2300      	movs	r3, #0
 800be1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be20:	2320      	movs	r3, #32
 800be22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be26:	f8cd 800c 	str.w	r8, [sp, #12]
 800be2a:	2330      	movs	r3, #48	@ 0x30
 800be2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bfdc <_vfiprintf_r+0x21c>
 800be30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be34:	f04f 0901 	mov.w	r9, #1
 800be38:	4623      	mov	r3, r4
 800be3a:	469a      	mov	sl, r3
 800be3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be40:	b10a      	cbz	r2, 800be46 <_vfiprintf_r+0x86>
 800be42:	2a25      	cmp	r2, #37	@ 0x25
 800be44:	d1f9      	bne.n	800be3a <_vfiprintf_r+0x7a>
 800be46:	ebba 0b04 	subs.w	fp, sl, r4
 800be4a:	d00b      	beq.n	800be64 <_vfiprintf_r+0xa4>
 800be4c:	465b      	mov	r3, fp
 800be4e:	4622      	mov	r2, r4
 800be50:	4629      	mov	r1, r5
 800be52:	4630      	mov	r0, r6
 800be54:	f7ff ffa1 	bl	800bd9a <__sfputs_r>
 800be58:	3001      	adds	r0, #1
 800be5a:	f000 80a7 	beq.w	800bfac <_vfiprintf_r+0x1ec>
 800be5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be60:	445a      	add	r2, fp
 800be62:	9209      	str	r2, [sp, #36]	@ 0x24
 800be64:	f89a 3000 	ldrb.w	r3, [sl]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 809f 	beq.w	800bfac <_vfiprintf_r+0x1ec>
 800be6e:	2300      	movs	r3, #0
 800be70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be78:	f10a 0a01 	add.w	sl, sl, #1
 800be7c:	9304      	str	r3, [sp, #16]
 800be7e:	9307      	str	r3, [sp, #28]
 800be80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be84:	931a      	str	r3, [sp, #104]	@ 0x68
 800be86:	4654      	mov	r4, sl
 800be88:	2205      	movs	r2, #5
 800be8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8e:	4853      	ldr	r0, [pc, #332]	@ (800bfdc <_vfiprintf_r+0x21c>)
 800be90:	f7f4 fa26 	bl	80002e0 <memchr>
 800be94:	9a04      	ldr	r2, [sp, #16]
 800be96:	b9d8      	cbnz	r0, 800bed0 <_vfiprintf_r+0x110>
 800be98:	06d1      	lsls	r1, r2, #27
 800be9a:	bf44      	itt	mi
 800be9c:	2320      	movmi	r3, #32
 800be9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bea2:	0713      	lsls	r3, r2, #28
 800bea4:	bf44      	itt	mi
 800bea6:	232b      	movmi	r3, #43	@ 0x2b
 800bea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800beac:	f89a 3000 	ldrb.w	r3, [sl]
 800beb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800beb2:	d015      	beq.n	800bee0 <_vfiprintf_r+0x120>
 800beb4:	9a07      	ldr	r2, [sp, #28]
 800beb6:	4654      	mov	r4, sl
 800beb8:	2000      	movs	r0, #0
 800beba:	f04f 0c0a 	mov.w	ip, #10
 800bebe:	4621      	mov	r1, r4
 800bec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bec4:	3b30      	subs	r3, #48	@ 0x30
 800bec6:	2b09      	cmp	r3, #9
 800bec8:	d94b      	bls.n	800bf62 <_vfiprintf_r+0x1a2>
 800beca:	b1b0      	cbz	r0, 800befa <_vfiprintf_r+0x13a>
 800becc:	9207      	str	r2, [sp, #28]
 800bece:	e014      	b.n	800befa <_vfiprintf_r+0x13a>
 800bed0:	eba0 0308 	sub.w	r3, r0, r8
 800bed4:	fa09 f303 	lsl.w	r3, r9, r3
 800bed8:	4313      	orrs	r3, r2
 800beda:	9304      	str	r3, [sp, #16]
 800bedc:	46a2      	mov	sl, r4
 800bede:	e7d2      	b.n	800be86 <_vfiprintf_r+0xc6>
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	1d19      	adds	r1, r3, #4
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	9103      	str	r1, [sp, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bfbb      	ittet	lt
 800beec:	425b      	neglt	r3, r3
 800beee:	f042 0202 	orrlt.w	r2, r2, #2
 800bef2:	9307      	strge	r3, [sp, #28]
 800bef4:	9307      	strlt	r3, [sp, #28]
 800bef6:	bfb8      	it	lt
 800bef8:	9204      	strlt	r2, [sp, #16]
 800befa:	7823      	ldrb	r3, [r4, #0]
 800befc:	2b2e      	cmp	r3, #46	@ 0x2e
 800befe:	d10a      	bne.n	800bf16 <_vfiprintf_r+0x156>
 800bf00:	7863      	ldrb	r3, [r4, #1]
 800bf02:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf04:	d132      	bne.n	800bf6c <_vfiprintf_r+0x1ac>
 800bf06:	9b03      	ldr	r3, [sp, #12]
 800bf08:	1d1a      	adds	r2, r3, #4
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	9203      	str	r2, [sp, #12]
 800bf0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf12:	3402      	adds	r4, #2
 800bf14:	9305      	str	r3, [sp, #20]
 800bf16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bfec <_vfiprintf_r+0x22c>
 800bf1a:	7821      	ldrb	r1, [r4, #0]
 800bf1c:	2203      	movs	r2, #3
 800bf1e:	4650      	mov	r0, sl
 800bf20:	f7f4 f9de 	bl	80002e0 <memchr>
 800bf24:	b138      	cbz	r0, 800bf36 <_vfiprintf_r+0x176>
 800bf26:	9b04      	ldr	r3, [sp, #16]
 800bf28:	eba0 000a 	sub.w	r0, r0, sl
 800bf2c:	2240      	movs	r2, #64	@ 0x40
 800bf2e:	4082      	lsls	r2, r0
 800bf30:	4313      	orrs	r3, r2
 800bf32:	3401      	adds	r4, #1
 800bf34:	9304      	str	r3, [sp, #16]
 800bf36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf3a:	4829      	ldr	r0, [pc, #164]	@ (800bfe0 <_vfiprintf_r+0x220>)
 800bf3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf40:	2206      	movs	r2, #6
 800bf42:	f7f4 f9cd 	bl	80002e0 <memchr>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d03f      	beq.n	800bfca <_vfiprintf_r+0x20a>
 800bf4a:	4b26      	ldr	r3, [pc, #152]	@ (800bfe4 <_vfiprintf_r+0x224>)
 800bf4c:	bb1b      	cbnz	r3, 800bf96 <_vfiprintf_r+0x1d6>
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	3307      	adds	r3, #7
 800bf52:	f023 0307 	bic.w	r3, r3, #7
 800bf56:	3308      	adds	r3, #8
 800bf58:	9303      	str	r3, [sp, #12]
 800bf5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf5c:	443b      	add	r3, r7
 800bf5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf60:	e76a      	b.n	800be38 <_vfiprintf_r+0x78>
 800bf62:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf66:	460c      	mov	r4, r1
 800bf68:	2001      	movs	r0, #1
 800bf6a:	e7a8      	b.n	800bebe <_vfiprintf_r+0xfe>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	3401      	adds	r4, #1
 800bf70:	9305      	str	r3, [sp, #20]
 800bf72:	4619      	mov	r1, r3
 800bf74:	f04f 0c0a 	mov.w	ip, #10
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf7e:	3a30      	subs	r2, #48	@ 0x30
 800bf80:	2a09      	cmp	r2, #9
 800bf82:	d903      	bls.n	800bf8c <_vfiprintf_r+0x1cc>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0c6      	beq.n	800bf16 <_vfiprintf_r+0x156>
 800bf88:	9105      	str	r1, [sp, #20]
 800bf8a:	e7c4      	b.n	800bf16 <_vfiprintf_r+0x156>
 800bf8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf90:	4604      	mov	r4, r0
 800bf92:	2301      	movs	r3, #1
 800bf94:	e7f0      	b.n	800bf78 <_vfiprintf_r+0x1b8>
 800bf96:	ab03      	add	r3, sp, #12
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	462a      	mov	r2, r5
 800bf9c:	4b12      	ldr	r3, [pc, #72]	@ (800bfe8 <_vfiprintf_r+0x228>)
 800bf9e:	a904      	add	r1, sp, #16
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f7fe fbe9 	bl	800a778 <_printf_float>
 800bfa6:	4607      	mov	r7, r0
 800bfa8:	1c78      	adds	r0, r7, #1
 800bfaa:	d1d6      	bne.n	800bf5a <_vfiprintf_r+0x19a>
 800bfac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfae:	07d9      	lsls	r1, r3, #31
 800bfb0:	d405      	bmi.n	800bfbe <_vfiprintf_r+0x1fe>
 800bfb2:	89ab      	ldrh	r3, [r5, #12]
 800bfb4:	059a      	lsls	r2, r3, #22
 800bfb6:	d402      	bmi.n	800bfbe <_vfiprintf_r+0x1fe>
 800bfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfba:	f7ff f8e9 	bl	800b190 <__retarget_lock_release_recursive>
 800bfbe:	89ab      	ldrh	r3, [r5, #12]
 800bfc0:	065b      	lsls	r3, r3, #25
 800bfc2:	f53f af1f 	bmi.w	800be04 <_vfiprintf_r+0x44>
 800bfc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfc8:	e71e      	b.n	800be08 <_vfiprintf_r+0x48>
 800bfca:	ab03      	add	r3, sp, #12
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	462a      	mov	r2, r5
 800bfd0:	4b05      	ldr	r3, [pc, #20]	@ (800bfe8 <_vfiprintf_r+0x228>)
 800bfd2:	a904      	add	r1, sp, #16
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	f7fe fe57 	bl	800ac88 <_printf_i>
 800bfda:	e7e4      	b.n	800bfa6 <_vfiprintf_r+0x1e6>
 800bfdc:	0800d0c5 	.word	0x0800d0c5
 800bfe0:	0800d0cf 	.word	0x0800d0cf
 800bfe4:	0800a779 	.word	0x0800a779
 800bfe8:	0800bd9b 	.word	0x0800bd9b
 800bfec:	0800d0cb 	.word	0x0800d0cb

0800bff0 <malloc>:
 800bff0:	4b02      	ldr	r3, [pc, #8]	@ (800bffc <malloc+0xc>)
 800bff2:	4601      	mov	r1, r0
 800bff4:	6818      	ldr	r0, [r3, #0]
 800bff6:	f000 b825 	b.w	800c044 <_malloc_r>
 800bffa:	bf00      	nop
 800bffc:	2400001c 	.word	0x2400001c

0800c000 <sbrk_aligned>:
 800c000:	b570      	push	{r4, r5, r6, lr}
 800c002:	4e0f      	ldr	r6, [pc, #60]	@ (800c040 <sbrk_aligned+0x40>)
 800c004:	460c      	mov	r4, r1
 800c006:	6831      	ldr	r1, [r6, #0]
 800c008:	4605      	mov	r5, r0
 800c00a:	b911      	cbnz	r1, 800c012 <sbrk_aligned+0x12>
 800c00c:	f000 fe3a 	bl	800cc84 <_sbrk_r>
 800c010:	6030      	str	r0, [r6, #0]
 800c012:	4621      	mov	r1, r4
 800c014:	4628      	mov	r0, r5
 800c016:	f000 fe35 	bl	800cc84 <_sbrk_r>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	d103      	bne.n	800c026 <sbrk_aligned+0x26>
 800c01e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c022:	4620      	mov	r0, r4
 800c024:	bd70      	pop	{r4, r5, r6, pc}
 800c026:	1cc4      	adds	r4, r0, #3
 800c028:	f024 0403 	bic.w	r4, r4, #3
 800c02c:	42a0      	cmp	r0, r4
 800c02e:	d0f8      	beq.n	800c022 <sbrk_aligned+0x22>
 800c030:	1a21      	subs	r1, r4, r0
 800c032:	4628      	mov	r0, r5
 800c034:	f000 fe26 	bl	800cc84 <_sbrk_r>
 800c038:	3001      	adds	r0, #1
 800c03a:	d1f2      	bne.n	800c022 <sbrk_aligned+0x22>
 800c03c:	e7ef      	b.n	800c01e <sbrk_aligned+0x1e>
 800c03e:	bf00      	nop
 800c040:	24000ce4 	.word	0x24000ce4

0800c044 <_malloc_r>:
 800c044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c048:	1ccd      	adds	r5, r1, #3
 800c04a:	f025 0503 	bic.w	r5, r5, #3
 800c04e:	3508      	adds	r5, #8
 800c050:	2d0c      	cmp	r5, #12
 800c052:	bf38      	it	cc
 800c054:	250c      	movcc	r5, #12
 800c056:	2d00      	cmp	r5, #0
 800c058:	4606      	mov	r6, r0
 800c05a:	db01      	blt.n	800c060 <_malloc_r+0x1c>
 800c05c:	42a9      	cmp	r1, r5
 800c05e:	d904      	bls.n	800c06a <_malloc_r+0x26>
 800c060:	230c      	movs	r3, #12
 800c062:	6033      	str	r3, [r6, #0]
 800c064:	2000      	movs	r0, #0
 800c066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c06a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c140 <_malloc_r+0xfc>
 800c06e:	f000 f915 	bl	800c29c <__malloc_lock>
 800c072:	f8d8 3000 	ldr.w	r3, [r8]
 800c076:	461c      	mov	r4, r3
 800c078:	bb44      	cbnz	r4, 800c0cc <_malloc_r+0x88>
 800c07a:	4629      	mov	r1, r5
 800c07c:	4630      	mov	r0, r6
 800c07e:	f7ff ffbf 	bl	800c000 <sbrk_aligned>
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	4604      	mov	r4, r0
 800c086:	d158      	bne.n	800c13a <_malloc_r+0xf6>
 800c088:	f8d8 4000 	ldr.w	r4, [r8]
 800c08c:	4627      	mov	r7, r4
 800c08e:	2f00      	cmp	r7, #0
 800c090:	d143      	bne.n	800c11a <_malloc_r+0xd6>
 800c092:	2c00      	cmp	r4, #0
 800c094:	d04b      	beq.n	800c12e <_malloc_r+0xea>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	4639      	mov	r1, r7
 800c09a:	4630      	mov	r0, r6
 800c09c:	eb04 0903 	add.w	r9, r4, r3
 800c0a0:	f000 fdf0 	bl	800cc84 <_sbrk_r>
 800c0a4:	4581      	cmp	r9, r0
 800c0a6:	d142      	bne.n	800c12e <_malloc_r+0xea>
 800c0a8:	6821      	ldr	r1, [r4, #0]
 800c0aa:	1a6d      	subs	r5, r5, r1
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f7ff ffa6 	bl	800c000 <sbrk_aligned>
 800c0b4:	3001      	adds	r0, #1
 800c0b6:	d03a      	beq.n	800c12e <_malloc_r+0xea>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	442b      	add	r3, r5
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	f8d8 3000 	ldr.w	r3, [r8]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	bb62      	cbnz	r2, 800c120 <_malloc_r+0xdc>
 800c0c6:	f8c8 7000 	str.w	r7, [r8]
 800c0ca:	e00f      	b.n	800c0ec <_malloc_r+0xa8>
 800c0cc:	6822      	ldr	r2, [r4, #0]
 800c0ce:	1b52      	subs	r2, r2, r5
 800c0d0:	d420      	bmi.n	800c114 <_malloc_r+0xd0>
 800c0d2:	2a0b      	cmp	r2, #11
 800c0d4:	d917      	bls.n	800c106 <_malloc_r+0xc2>
 800c0d6:	1961      	adds	r1, r4, r5
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	6025      	str	r5, [r4, #0]
 800c0dc:	bf18      	it	ne
 800c0de:	6059      	strne	r1, [r3, #4]
 800c0e0:	6863      	ldr	r3, [r4, #4]
 800c0e2:	bf08      	it	eq
 800c0e4:	f8c8 1000 	streq.w	r1, [r8]
 800c0e8:	5162      	str	r2, [r4, r5]
 800c0ea:	604b      	str	r3, [r1, #4]
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	f000 f8db 	bl	800c2a8 <__malloc_unlock>
 800c0f2:	f104 000b 	add.w	r0, r4, #11
 800c0f6:	1d23      	adds	r3, r4, #4
 800c0f8:	f020 0007 	bic.w	r0, r0, #7
 800c0fc:	1ac2      	subs	r2, r0, r3
 800c0fe:	bf1c      	itt	ne
 800c100:	1a1b      	subne	r3, r3, r0
 800c102:	50a3      	strne	r3, [r4, r2]
 800c104:	e7af      	b.n	800c066 <_malloc_r+0x22>
 800c106:	6862      	ldr	r2, [r4, #4]
 800c108:	42a3      	cmp	r3, r4
 800c10a:	bf0c      	ite	eq
 800c10c:	f8c8 2000 	streq.w	r2, [r8]
 800c110:	605a      	strne	r2, [r3, #4]
 800c112:	e7eb      	b.n	800c0ec <_malloc_r+0xa8>
 800c114:	4623      	mov	r3, r4
 800c116:	6864      	ldr	r4, [r4, #4]
 800c118:	e7ae      	b.n	800c078 <_malloc_r+0x34>
 800c11a:	463c      	mov	r4, r7
 800c11c:	687f      	ldr	r7, [r7, #4]
 800c11e:	e7b6      	b.n	800c08e <_malloc_r+0x4a>
 800c120:	461a      	mov	r2, r3
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	42a3      	cmp	r3, r4
 800c126:	d1fb      	bne.n	800c120 <_malloc_r+0xdc>
 800c128:	2300      	movs	r3, #0
 800c12a:	6053      	str	r3, [r2, #4]
 800c12c:	e7de      	b.n	800c0ec <_malloc_r+0xa8>
 800c12e:	230c      	movs	r3, #12
 800c130:	6033      	str	r3, [r6, #0]
 800c132:	4630      	mov	r0, r6
 800c134:	f000 f8b8 	bl	800c2a8 <__malloc_unlock>
 800c138:	e794      	b.n	800c064 <_malloc_r+0x20>
 800c13a:	6005      	str	r5, [r0, #0]
 800c13c:	e7d6      	b.n	800c0ec <_malloc_r+0xa8>
 800c13e:	bf00      	nop
 800c140:	24000ce8 	.word	0x24000ce8

0800c144 <__sflush_r>:
 800c144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c14c:	0716      	lsls	r6, r2, #28
 800c14e:	4605      	mov	r5, r0
 800c150:	460c      	mov	r4, r1
 800c152:	d454      	bmi.n	800c1fe <__sflush_r+0xba>
 800c154:	684b      	ldr	r3, [r1, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	dc02      	bgt.n	800c160 <__sflush_r+0x1c>
 800c15a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	dd48      	ble.n	800c1f2 <__sflush_r+0xae>
 800c160:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c162:	2e00      	cmp	r6, #0
 800c164:	d045      	beq.n	800c1f2 <__sflush_r+0xae>
 800c166:	2300      	movs	r3, #0
 800c168:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c16c:	682f      	ldr	r7, [r5, #0]
 800c16e:	6a21      	ldr	r1, [r4, #32]
 800c170:	602b      	str	r3, [r5, #0]
 800c172:	d030      	beq.n	800c1d6 <__sflush_r+0x92>
 800c174:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	0759      	lsls	r1, r3, #29
 800c17a:	d505      	bpl.n	800c188 <__sflush_r+0x44>
 800c17c:	6863      	ldr	r3, [r4, #4]
 800c17e:	1ad2      	subs	r2, r2, r3
 800c180:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c182:	b10b      	cbz	r3, 800c188 <__sflush_r+0x44>
 800c184:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c186:	1ad2      	subs	r2, r2, r3
 800c188:	2300      	movs	r3, #0
 800c18a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c18c:	6a21      	ldr	r1, [r4, #32]
 800c18e:	4628      	mov	r0, r5
 800c190:	47b0      	blx	r6
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	d106      	bne.n	800c1a6 <__sflush_r+0x62>
 800c198:	6829      	ldr	r1, [r5, #0]
 800c19a:	291d      	cmp	r1, #29
 800c19c:	d82b      	bhi.n	800c1f6 <__sflush_r+0xb2>
 800c19e:	4a2a      	ldr	r2, [pc, #168]	@ (800c248 <__sflush_r+0x104>)
 800c1a0:	40ca      	lsrs	r2, r1
 800c1a2:	07d6      	lsls	r6, r2, #31
 800c1a4:	d527      	bpl.n	800c1f6 <__sflush_r+0xb2>
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	6062      	str	r2, [r4, #4]
 800c1aa:	04d9      	lsls	r1, r3, #19
 800c1ac:	6922      	ldr	r2, [r4, #16]
 800c1ae:	6022      	str	r2, [r4, #0]
 800c1b0:	d504      	bpl.n	800c1bc <__sflush_r+0x78>
 800c1b2:	1c42      	adds	r2, r0, #1
 800c1b4:	d101      	bne.n	800c1ba <__sflush_r+0x76>
 800c1b6:	682b      	ldr	r3, [r5, #0]
 800c1b8:	b903      	cbnz	r3, 800c1bc <__sflush_r+0x78>
 800c1ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800c1bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1be:	602f      	str	r7, [r5, #0]
 800c1c0:	b1b9      	cbz	r1, 800c1f2 <__sflush_r+0xae>
 800c1c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1c6:	4299      	cmp	r1, r3
 800c1c8:	d002      	beq.n	800c1d0 <__sflush_r+0x8c>
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f000 fdde 	bl	800cd8c <_free_r>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1d4:	e00d      	b.n	800c1f2 <__sflush_r+0xae>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	4628      	mov	r0, r5
 800c1da:	47b0      	blx	r6
 800c1dc:	4602      	mov	r2, r0
 800c1de:	1c50      	adds	r0, r2, #1
 800c1e0:	d1c9      	bne.n	800c176 <__sflush_r+0x32>
 800c1e2:	682b      	ldr	r3, [r5, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d0c6      	beq.n	800c176 <__sflush_r+0x32>
 800c1e8:	2b1d      	cmp	r3, #29
 800c1ea:	d001      	beq.n	800c1f0 <__sflush_r+0xac>
 800c1ec:	2b16      	cmp	r3, #22
 800c1ee:	d11e      	bne.n	800c22e <__sflush_r+0xea>
 800c1f0:	602f      	str	r7, [r5, #0]
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	e022      	b.n	800c23c <__sflush_r+0xf8>
 800c1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1fa:	b21b      	sxth	r3, r3
 800c1fc:	e01b      	b.n	800c236 <__sflush_r+0xf2>
 800c1fe:	690f      	ldr	r7, [r1, #16]
 800c200:	2f00      	cmp	r7, #0
 800c202:	d0f6      	beq.n	800c1f2 <__sflush_r+0xae>
 800c204:	0793      	lsls	r3, r2, #30
 800c206:	680e      	ldr	r6, [r1, #0]
 800c208:	bf08      	it	eq
 800c20a:	694b      	ldreq	r3, [r1, #20]
 800c20c:	600f      	str	r7, [r1, #0]
 800c20e:	bf18      	it	ne
 800c210:	2300      	movne	r3, #0
 800c212:	eba6 0807 	sub.w	r8, r6, r7
 800c216:	608b      	str	r3, [r1, #8]
 800c218:	f1b8 0f00 	cmp.w	r8, #0
 800c21c:	dde9      	ble.n	800c1f2 <__sflush_r+0xae>
 800c21e:	6a21      	ldr	r1, [r4, #32]
 800c220:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c222:	4643      	mov	r3, r8
 800c224:	463a      	mov	r2, r7
 800c226:	4628      	mov	r0, r5
 800c228:	47b0      	blx	r6
 800c22a:	2800      	cmp	r0, #0
 800c22c:	dc08      	bgt.n	800c240 <__sflush_r+0xfc>
 800c22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c236:	81a3      	strh	r3, [r4, #12]
 800c238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c240:	4407      	add	r7, r0
 800c242:	eba8 0800 	sub.w	r8, r8, r0
 800c246:	e7e7      	b.n	800c218 <__sflush_r+0xd4>
 800c248:	20400001 	.word	0x20400001

0800c24c <_fflush_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	690b      	ldr	r3, [r1, #16]
 800c250:	4605      	mov	r5, r0
 800c252:	460c      	mov	r4, r1
 800c254:	b913      	cbnz	r3, 800c25c <_fflush_r+0x10>
 800c256:	2500      	movs	r5, #0
 800c258:	4628      	mov	r0, r5
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	b118      	cbz	r0, 800c266 <_fflush_r+0x1a>
 800c25e:	6a03      	ldr	r3, [r0, #32]
 800c260:	b90b      	cbnz	r3, 800c266 <_fflush_r+0x1a>
 800c262:	f7fe febb 	bl	800afdc <__sinit>
 800c266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0f3      	beq.n	800c256 <_fflush_r+0xa>
 800c26e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c270:	07d0      	lsls	r0, r2, #31
 800c272:	d404      	bmi.n	800c27e <_fflush_r+0x32>
 800c274:	0599      	lsls	r1, r3, #22
 800c276:	d402      	bmi.n	800c27e <_fflush_r+0x32>
 800c278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c27a:	f7fe ff88 	bl	800b18e <__retarget_lock_acquire_recursive>
 800c27e:	4628      	mov	r0, r5
 800c280:	4621      	mov	r1, r4
 800c282:	f7ff ff5f 	bl	800c144 <__sflush_r>
 800c286:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c288:	07da      	lsls	r2, r3, #31
 800c28a:	4605      	mov	r5, r0
 800c28c:	d4e4      	bmi.n	800c258 <_fflush_r+0xc>
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	059b      	lsls	r3, r3, #22
 800c292:	d4e1      	bmi.n	800c258 <_fflush_r+0xc>
 800c294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c296:	f7fe ff7b 	bl	800b190 <__retarget_lock_release_recursive>
 800c29a:	e7dd      	b.n	800c258 <_fflush_r+0xc>

0800c29c <__malloc_lock>:
 800c29c:	4801      	ldr	r0, [pc, #4]	@ (800c2a4 <__malloc_lock+0x8>)
 800c29e:	f7fe bf76 	b.w	800b18e <__retarget_lock_acquire_recursive>
 800c2a2:	bf00      	nop
 800c2a4:	24000ce0 	.word	0x24000ce0

0800c2a8 <__malloc_unlock>:
 800c2a8:	4801      	ldr	r0, [pc, #4]	@ (800c2b0 <__malloc_unlock+0x8>)
 800c2aa:	f7fe bf71 	b.w	800b190 <__retarget_lock_release_recursive>
 800c2ae:	bf00      	nop
 800c2b0:	24000ce0 	.word	0x24000ce0

0800c2b4 <_Balloc>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	69c6      	ldr	r6, [r0, #28]
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	b976      	cbnz	r6, 800c2dc <_Balloc+0x28>
 800c2be:	2010      	movs	r0, #16
 800c2c0:	f7ff fe96 	bl	800bff0 <malloc>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	61e0      	str	r0, [r4, #28]
 800c2c8:	b920      	cbnz	r0, 800c2d4 <_Balloc+0x20>
 800c2ca:	4b18      	ldr	r3, [pc, #96]	@ (800c32c <_Balloc+0x78>)
 800c2cc:	4818      	ldr	r0, [pc, #96]	@ (800c330 <_Balloc+0x7c>)
 800c2ce:	216b      	movs	r1, #107	@ 0x6b
 800c2d0:	f000 fd2a 	bl	800cd28 <__assert_func>
 800c2d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2d8:	6006      	str	r6, [r0, #0]
 800c2da:	60c6      	str	r6, [r0, #12]
 800c2dc:	69e6      	ldr	r6, [r4, #28]
 800c2de:	68f3      	ldr	r3, [r6, #12]
 800c2e0:	b183      	cbz	r3, 800c304 <_Balloc+0x50>
 800c2e2:	69e3      	ldr	r3, [r4, #28]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2ea:	b9b8      	cbnz	r0, 800c31c <_Balloc+0x68>
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	fa01 f605 	lsl.w	r6, r1, r5
 800c2f2:	1d72      	adds	r2, r6, #5
 800c2f4:	0092      	lsls	r2, r2, #2
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f000 fd34 	bl	800cd64 <_calloc_r>
 800c2fc:	b160      	cbz	r0, 800c318 <_Balloc+0x64>
 800c2fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c302:	e00e      	b.n	800c322 <_Balloc+0x6e>
 800c304:	2221      	movs	r2, #33	@ 0x21
 800c306:	2104      	movs	r1, #4
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 fd2b 	bl	800cd64 <_calloc_r>
 800c30e:	69e3      	ldr	r3, [r4, #28]
 800c310:	60f0      	str	r0, [r6, #12]
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1e4      	bne.n	800c2e2 <_Balloc+0x2e>
 800c318:	2000      	movs	r0, #0
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	6802      	ldr	r2, [r0, #0]
 800c31e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c322:	2300      	movs	r3, #0
 800c324:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c328:	e7f7      	b.n	800c31a <_Balloc+0x66>
 800c32a:	bf00      	nop
 800c32c:	0800d045 	.word	0x0800d045
 800c330:	0800d0d6 	.word	0x0800d0d6

0800c334 <_Bfree>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	69c6      	ldr	r6, [r0, #28]
 800c338:	4605      	mov	r5, r0
 800c33a:	460c      	mov	r4, r1
 800c33c:	b976      	cbnz	r6, 800c35c <_Bfree+0x28>
 800c33e:	2010      	movs	r0, #16
 800c340:	f7ff fe56 	bl	800bff0 <malloc>
 800c344:	4602      	mov	r2, r0
 800c346:	61e8      	str	r0, [r5, #28]
 800c348:	b920      	cbnz	r0, 800c354 <_Bfree+0x20>
 800c34a:	4b09      	ldr	r3, [pc, #36]	@ (800c370 <_Bfree+0x3c>)
 800c34c:	4809      	ldr	r0, [pc, #36]	@ (800c374 <_Bfree+0x40>)
 800c34e:	218f      	movs	r1, #143	@ 0x8f
 800c350:	f000 fcea 	bl	800cd28 <__assert_func>
 800c354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c358:	6006      	str	r6, [r0, #0]
 800c35a:	60c6      	str	r6, [r0, #12]
 800c35c:	b13c      	cbz	r4, 800c36e <_Bfree+0x3a>
 800c35e:	69eb      	ldr	r3, [r5, #28]
 800c360:	6862      	ldr	r2, [r4, #4]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c368:	6021      	str	r1, [r4, #0]
 800c36a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c36e:	bd70      	pop	{r4, r5, r6, pc}
 800c370:	0800d045 	.word	0x0800d045
 800c374:	0800d0d6 	.word	0x0800d0d6

0800c378 <__multadd>:
 800c378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37c:	690d      	ldr	r5, [r1, #16]
 800c37e:	4607      	mov	r7, r0
 800c380:	460c      	mov	r4, r1
 800c382:	461e      	mov	r6, r3
 800c384:	f101 0c14 	add.w	ip, r1, #20
 800c388:	2000      	movs	r0, #0
 800c38a:	f8dc 3000 	ldr.w	r3, [ip]
 800c38e:	b299      	uxth	r1, r3
 800c390:	fb02 6101 	mla	r1, r2, r1, r6
 800c394:	0c1e      	lsrs	r6, r3, #16
 800c396:	0c0b      	lsrs	r3, r1, #16
 800c398:	fb02 3306 	mla	r3, r2, r6, r3
 800c39c:	b289      	uxth	r1, r1
 800c39e:	3001      	adds	r0, #1
 800c3a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3a4:	4285      	cmp	r5, r0
 800c3a6:	f84c 1b04 	str.w	r1, [ip], #4
 800c3aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3ae:	dcec      	bgt.n	800c38a <__multadd+0x12>
 800c3b0:	b30e      	cbz	r6, 800c3f6 <__multadd+0x7e>
 800c3b2:	68a3      	ldr	r3, [r4, #8]
 800c3b4:	42ab      	cmp	r3, r5
 800c3b6:	dc19      	bgt.n	800c3ec <__multadd+0x74>
 800c3b8:	6861      	ldr	r1, [r4, #4]
 800c3ba:	4638      	mov	r0, r7
 800c3bc:	3101      	adds	r1, #1
 800c3be:	f7ff ff79 	bl	800c2b4 <_Balloc>
 800c3c2:	4680      	mov	r8, r0
 800c3c4:	b928      	cbnz	r0, 800c3d2 <__multadd+0x5a>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c3fc <__multadd+0x84>)
 800c3ca:	480d      	ldr	r0, [pc, #52]	@ (800c400 <__multadd+0x88>)
 800c3cc:	21ba      	movs	r1, #186	@ 0xba
 800c3ce:	f000 fcab 	bl	800cd28 <__assert_func>
 800c3d2:	6922      	ldr	r2, [r4, #16]
 800c3d4:	3202      	adds	r2, #2
 800c3d6:	f104 010c 	add.w	r1, r4, #12
 800c3da:	0092      	lsls	r2, r2, #2
 800c3dc:	300c      	adds	r0, #12
 800c3de:	f000 fc95 	bl	800cd0c <memcpy>
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	f7ff ffa5 	bl	800c334 <_Bfree>
 800c3ea:	4644      	mov	r4, r8
 800c3ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3f0:	3501      	adds	r5, #1
 800c3f2:	615e      	str	r6, [r3, #20]
 800c3f4:	6125      	str	r5, [r4, #16]
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3fc:	0800d0b4 	.word	0x0800d0b4
 800c400:	0800d0d6 	.word	0x0800d0d6

0800c404 <__hi0bits>:
 800c404:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c408:	4603      	mov	r3, r0
 800c40a:	bf36      	itet	cc
 800c40c:	0403      	lslcc	r3, r0, #16
 800c40e:	2000      	movcs	r0, #0
 800c410:	2010      	movcc	r0, #16
 800c412:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c416:	bf3c      	itt	cc
 800c418:	021b      	lslcc	r3, r3, #8
 800c41a:	3008      	addcc	r0, #8
 800c41c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c420:	bf3c      	itt	cc
 800c422:	011b      	lslcc	r3, r3, #4
 800c424:	3004      	addcc	r0, #4
 800c426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c42a:	bf3c      	itt	cc
 800c42c:	009b      	lslcc	r3, r3, #2
 800c42e:	3002      	addcc	r0, #2
 800c430:	2b00      	cmp	r3, #0
 800c432:	db05      	blt.n	800c440 <__hi0bits+0x3c>
 800c434:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c438:	f100 0001 	add.w	r0, r0, #1
 800c43c:	bf08      	it	eq
 800c43e:	2020      	moveq	r0, #32
 800c440:	4770      	bx	lr

0800c442 <__lo0bits>:
 800c442:	6803      	ldr	r3, [r0, #0]
 800c444:	4602      	mov	r2, r0
 800c446:	f013 0007 	ands.w	r0, r3, #7
 800c44a:	d00b      	beq.n	800c464 <__lo0bits+0x22>
 800c44c:	07d9      	lsls	r1, r3, #31
 800c44e:	d421      	bmi.n	800c494 <__lo0bits+0x52>
 800c450:	0798      	lsls	r0, r3, #30
 800c452:	bf49      	itett	mi
 800c454:	085b      	lsrmi	r3, r3, #1
 800c456:	089b      	lsrpl	r3, r3, #2
 800c458:	2001      	movmi	r0, #1
 800c45a:	6013      	strmi	r3, [r2, #0]
 800c45c:	bf5c      	itt	pl
 800c45e:	6013      	strpl	r3, [r2, #0]
 800c460:	2002      	movpl	r0, #2
 800c462:	4770      	bx	lr
 800c464:	b299      	uxth	r1, r3
 800c466:	b909      	cbnz	r1, 800c46c <__lo0bits+0x2a>
 800c468:	0c1b      	lsrs	r3, r3, #16
 800c46a:	2010      	movs	r0, #16
 800c46c:	b2d9      	uxtb	r1, r3
 800c46e:	b909      	cbnz	r1, 800c474 <__lo0bits+0x32>
 800c470:	3008      	adds	r0, #8
 800c472:	0a1b      	lsrs	r3, r3, #8
 800c474:	0719      	lsls	r1, r3, #28
 800c476:	bf04      	itt	eq
 800c478:	091b      	lsreq	r3, r3, #4
 800c47a:	3004      	addeq	r0, #4
 800c47c:	0799      	lsls	r1, r3, #30
 800c47e:	bf04      	itt	eq
 800c480:	089b      	lsreq	r3, r3, #2
 800c482:	3002      	addeq	r0, #2
 800c484:	07d9      	lsls	r1, r3, #31
 800c486:	d403      	bmi.n	800c490 <__lo0bits+0x4e>
 800c488:	085b      	lsrs	r3, r3, #1
 800c48a:	f100 0001 	add.w	r0, r0, #1
 800c48e:	d003      	beq.n	800c498 <__lo0bits+0x56>
 800c490:	6013      	str	r3, [r2, #0]
 800c492:	4770      	bx	lr
 800c494:	2000      	movs	r0, #0
 800c496:	4770      	bx	lr
 800c498:	2020      	movs	r0, #32
 800c49a:	4770      	bx	lr

0800c49c <__i2b>:
 800c49c:	b510      	push	{r4, lr}
 800c49e:	460c      	mov	r4, r1
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	f7ff ff07 	bl	800c2b4 <_Balloc>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	b928      	cbnz	r0, 800c4b6 <__i2b+0x1a>
 800c4aa:	4b05      	ldr	r3, [pc, #20]	@ (800c4c0 <__i2b+0x24>)
 800c4ac:	4805      	ldr	r0, [pc, #20]	@ (800c4c4 <__i2b+0x28>)
 800c4ae:	f240 1145 	movw	r1, #325	@ 0x145
 800c4b2:	f000 fc39 	bl	800cd28 <__assert_func>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	6144      	str	r4, [r0, #20]
 800c4ba:	6103      	str	r3, [r0, #16]
 800c4bc:	bd10      	pop	{r4, pc}
 800c4be:	bf00      	nop
 800c4c0:	0800d0b4 	.word	0x0800d0b4
 800c4c4:	0800d0d6 	.word	0x0800d0d6

0800c4c8 <__multiply>:
 800c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	4617      	mov	r7, r2
 800c4ce:	690a      	ldr	r2, [r1, #16]
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	bfa8      	it	ge
 800c4d6:	463b      	movge	r3, r7
 800c4d8:	4689      	mov	r9, r1
 800c4da:	bfa4      	itt	ge
 800c4dc:	460f      	movge	r7, r1
 800c4de:	4699      	movge	r9, r3
 800c4e0:	693d      	ldr	r5, [r7, #16]
 800c4e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	6879      	ldr	r1, [r7, #4]
 800c4ea:	eb05 060a 	add.w	r6, r5, sl
 800c4ee:	42b3      	cmp	r3, r6
 800c4f0:	b085      	sub	sp, #20
 800c4f2:	bfb8      	it	lt
 800c4f4:	3101      	addlt	r1, #1
 800c4f6:	f7ff fedd 	bl	800c2b4 <_Balloc>
 800c4fa:	b930      	cbnz	r0, 800c50a <__multiply+0x42>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	4b41      	ldr	r3, [pc, #260]	@ (800c604 <__multiply+0x13c>)
 800c500:	4841      	ldr	r0, [pc, #260]	@ (800c608 <__multiply+0x140>)
 800c502:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c506:	f000 fc0f 	bl	800cd28 <__assert_func>
 800c50a:	f100 0414 	add.w	r4, r0, #20
 800c50e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c512:	4623      	mov	r3, r4
 800c514:	2200      	movs	r2, #0
 800c516:	4573      	cmp	r3, lr
 800c518:	d320      	bcc.n	800c55c <__multiply+0x94>
 800c51a:	f107 0814 	add.w	r8, r7, #20
 800c51e:	f109 0114 	add.w	r1, r9, #20
 800c522:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c526:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c52a:	9302      	str	r3, [sp, #8]
 800c52c:	1beb      	subs	r3, r5, r7
 800c52e:	3b15      	subs	r3, #21
 800c530:	f023 0303 	bic.w	r3, r3, #3
 800c534:	3304      	adds	r3, #4
 800c536:	3715      	adds	r7, #21
 800c538:	42bd      	cmp	r5, r7
 800c53a:	bf38      	it	cc
 800c53c:	2304      	movcc	r3, #4
 800c53e:	9301      	str	r3, [sp, #4]
 800c540:	9b02      	ldr	r3, [sp, #8]
 800c542:	9103      	str	r1, [sp, #12]
 800c544:	428b      	cmp	r3, r1
 800c546:	d80c      	bhi.n	800c562 <__multiply+0x9a>
 800c548:	2e00      	cmp	r6, #0
 800c54a:	dd03      	ble.n	800c554 <__multiply+0x8c>
 800c54c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c550:	2b00      	cmp	r3, #0
 800c552:	d055      	beq.n	800c600 <__multiply+0x138>
 800c554:	6106      	str	r6, [r0, #16]
 800c556:	b005      	add	sp, #20
 800c558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55c:	f843 2b04 	str.w	r2, [r3], #4
 800c560:	e7d9      	b.n	800c516 <__multiply+0x4e>
 800c562:	f8b1 a000 	ldrh.w	sl, [r1]
 800c566:	f1ba 0f00 	cmp.w	sl, #0
 800c56a:	d01f      	beq.n	800c5ac <__multiply+0xe4>
 800c56c:	46c4      	mov	ip, r8
 800c56e:	46a1      	mov	r9, r4
 800c570:	2700      	movs	r7, #0
 800c572:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c576:	f8d9 3000 	ldr.w	r3, [r9]
 800c57a:	fa1f fb82 	uxth.w	fp, r2
 800c57e:	b29b      	uxth	r3, r3
 800c580:	fb0a 330b 	mla	r3, sl, fp, r3
 800c584:	443b      	add	r3, r7
 800c586:	f8d9 7000 	ldr.w	r7, [r9]
 800c58a:	0c12      	lsrs	r2, r2, #16
 800c58c:	0c3f      	lsrs	r7, r7, #16
 800c58e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c592:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c596:	b29b      	uxth	r3, r3
 800c598:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c59c:	4565      	cmp	r5, ip
 800c59e:	f849 3b04 	str.w	r3, [r9], #4
 800c5a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c5a6:	d8e4      	bhi.n	800c572 <__multiply+0xaa>
 800c5a8:	9b01      	ldr	r3, [sp, #4]
 800c5aa:	50e7      	str	r7, [r4, r3]
 800c5ac:	9b03      	ldr	r3, [sp, #12]
 800c5ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c5b2:	3104      	adds	r1, #4
 800c5b4:	f1b9 0f00 	cmp.w	r9, #0
 800c5b8:	d020      	beq.n	800c5fc <__multiply+0x134>
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	4647      	mov	r7, r8
 800c5be:	46a4      	mov	ip, r4
 800c5c0:	f04f 0a00 	mov.w	sl, #0
 800c5c4:	f8b7 b000 	ldrh.w	fp, [r7]
 800c5c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c5cc:	fb09 220b 	mla	r2, r9, fp, r2
 800c5d0:	4452      	add	r2, sl
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5d8:	f84c 3b04 	str.w	r3, [ip], #4
 800c5dc:	f857 3b04 	ldr.w	r3, [r7], #4
 800c5e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5e4:	f8bc 3000 	ldrh.w	r3, [ip]
 800c5e8:	fb09 330a 	mla	r3, r9, sl, r3
 800c5ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c5f0:	42bd      	cmp	r5, r7
 800c5f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5f6:	d8e5      	bhi.n	800c5c4 <__multiply+0xfc>
 800c5f8:	9a01      	ldr	r2, [sp, #4]
 800c5fa:	50a3      	str	r3, [r4, r2]
 800c5fc:	3404      	adds	r4, #4
 800c5fe:	e79f      	b.n	800c540 <__multiply+0x78>
 800c600:	3e01      	subs	r6, #1
 800c602:	e7a1      	b.n	800c548 <__multiply+0x80>
 800c604:	0800d0b4 	.word	0x0800d0b4
 800c608:	0800d0d6 	.word	0x0800d0d6

0800c60c <__pow5mult>:
 800c60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c610:	4615      	mov	r5, r2
 800c612:	f012 0203 	ands.w	r2, r2, #3
 800c616:	4607      	mov	r7, r0
 800c618:	460e      	mov	r6, r1
 800c61a:	d007      	beq.n	800c62c <__pow5mult+0x20>
 800c61c:	4c25      	ldr	r4, [pc, #148]	@ (800c6b4 <__pow5mult+0xa8>)
 800c61e:	3a01      	subs	r2, #1
 800c620:	2300      	movs	r3, #0
 800c622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c626:	f7ff fea7 	bl	800c378 <__multadd>
 800c62a:	4606      	mov	r6, r0
 800c62c:	10ad      	asrs	r5, r5, #2
 800c62e:	d03d      	beq.n	800c6ac <__pow5mult+0xa0>
 800c630:	69fc      	ldr	r4, [r7, #28]
 800c632:	b97c      	cbnz	r4, 800c654 <__pow5mult+0x48>
 800c634:	2010      	movs	r0, #16
 800c636:	f7ff fcdb 	bl	800bff0 <malloc>
 800c63a:	4602      	mov	r2, r0
 800c63c:	61f8      	str	r0, [r7, #28]
 800c63e:	b928      	cbnz	r0, 800c64c <__pow5mult+0x40>
 800c640:	4b1d      	ldr	r3, [pc, #116]	@ (800c6b8 <__pow5mult+0xac>)
 800c642:	481e      	ldr	r0, [pc, #120]	@ (800c6bc <__pow5mult+0xb0>)
 800c644:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c648:	f000 fb6e 	bl	800cd28 <__assert_func>
 800c64c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c650:	6004      	str	r4, [r0, #0]
 800c652:	60c4      	str	r4, [r0, #12]
 800c654:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c65c:	b94c      	cbnz	r4, 800c672 <__pow5mult+0x66>
 800c65e:	f240 2171 	movw	r1, #625	@ 0x271
 800c662:	4638      	mov	r0, r7
 800c664:	f7ff ff1a 	bl	800c49c <__i2b>
 800c668:	2300      	movs	r3, #0
 800c66a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c66e:	4604      	mov	r4, r0
 800c670:	6003      	str	r3, [r0, #0]
 800c672:	f04f 0900 	mov.w	r9, #0
 800c676:	07eb      	lsls	r3, r5, #31
 800c678:	d50a      	bpl.n	800c690 <__pow5mult+0x84>
 800c67a:	4631      	mov	r1, r6
 800c67c:	4622      	mov	r2, r4
 800c67e:	4638      	mov	r0, r7
 800c680:	f7ff ff22 	bl	800c4c8 <__multiply>
 800c684:	4631      	mov	r1, r6
 800c686:	4680      	mov	r8, r0
 800c688:	4638      	mov	r0, r7
 800c68a:	f7ff fe53 	bl	800c334 <_Bfree>
 800c68e:	4646      	mov	r6, r8
 800c690:	106d      	asrs	r5, r5, #1
 800c692:	d00b      	beq.n	800c6ac <__pow5mult+0xa0>
 800c694:	6820      	ldr	r0, [r4, #0]
 800c696:	b938      	cbnz	r0, 800c6a8 <__pow5mult+0x9c>
 800c698:	4622      	mov	r2, r4
 800c69a:	4621      	mov	r1, r4
 800c69c:	4638      	mov	r0, r7
 800c69e:	f7ff ff13 	bl	800c4c8 <__multiply>
 800c6a2:	6020      	str	r0, [r4, #0]
 800c6a4:	f8c0 9000 	str.w	r9, [r0]
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	e7e4      	b.n	800c676 <__pow5mult+0x6a>
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6b2:	bf00      	nop
 800c6b4:	0800d298 	.word	0x0800d298
 800c6b8:	0800d045 	.word	0x0800d045
 800c6bc:	0800d0d6 	.word	0x0800d0d6

0800c6c0 <__lshift>:
 800c6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	6849      	ldr	r1, [r1, #4]
 800c6c8:	6923      	ldr	r3, [r4, #16]
 800c6ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6ce:	68a3      	ldr	r3, [r4, #8]
 800c6d0:	4607      	mov	r7, r0
 800c6d2:	4691      	mov	r9, r2
 800c6d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6d8:	f108 0601 	add.w	r6, r8, #1
 800c6dc:	42b3      	cmp	r3, r6
 800c6de:	db0b      	blt.n	800c6f8 <__lshift+0x38>
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	f7ff fde7 	bl	800c2b4 <_Balloc>
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	b948      	cbnz	r0, 800c6fe <__lshift+0x3e>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	4b28      	ldr	r3, [pc, #160]	@ (800c790 <__lshift+0xd0>)
 800c6ee:	4829      	ldr	r0, [pc, #164]	@ (800c794 <__lshift+0xd4>)
 800c6f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c6f4:	f000 fb18 	bl	800cd28 <__assert_func>
 800c6f8:	3101      	adds	r1, #1
 800c6fa:	005b      	lsls	r3, r3, #1
 800c6fc:	e7ee      	b.n	800c6dc <__lshift+0x1c>
 800c6fe:	2300      	movs	r3, #0
 800c700:	f100 0114 	add.w	r1, r0, #20
 800c704:	f100 0210 	add.w	r2, r0, #16
 800c708:	4618      	mov	r0, r3
 800c70a:	4553      	cmp	r3, sl
 800c70c:	db33      	blt.n	800c776 <__lshift+0xb6>
 800c70e:	6920      	ldr	r0, [r4, #16]
 800c710:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c714:	f104 0314 	add.w	r3, r4, #20
 800c718:	f019 091f 	ands.w	r9, r9, #31
 800c71c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c720:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c724:	d02b      	beq.n	800c77e <__lshift+0xbe>
 800c726:	f1c9 0e20 	rsb	lr, r9, #32
 800c72a:	468a      	mov	sl, r1
 800c72c:	2200      	movs	r2, #0
 800c72e:	6818      	ldr	r0, [r3, #0]
 800c730:	fa00 f009 	lsl.w	r0, r0, r9
 800c734:	4310      	orrs	r0, r2
 800c736:	f84a 0b04 	str.w	r0, [sl], #4
 800c73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c73e:	459c      	cmp	ip, r3
 800c740:	fa22 f20e 	lsr.w	r2, r2, lr
 800c744:	d8f3      	bhi.n	800c72e <__lshift+0x6e>
 800c746:	ebac 0304 	sub.w	r3, ip, r4
 800c74a:	3b15      	subs	r3, #21
 800c74c:	f023 0303 	bic.w	r3, r3, #3
 800c750:	3304      	adds	r3, #4
 800c752:	f104 0015 	add.w	r0, r4, #21
 800c756:	4560      	cmp	r0, ip
 800c758:	bf88      	it	hi
 800c75a:	2304      	movhi	r3, #4
 800c75c:	50ca      	str	r2, [r1, r3]
 800c75e:	b10a      	cbz	r2, 800c764 <__lshift+0xa4>
 800c760:	f108 0602 	add.w	r6, r8, #2
 800c764:	3e01      	subs	r6, #1
 800c766:	4638      	mov	r0, r7
 800c768:	612e      	str	r6, [r5, #16]
 800c76a:	4621      	mov	r1, r4
 800c76c:	f7ff fde2 	bl	800c334 <_Bfree>
 800c770:	4628      	mov	r0, r5
 800c772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c776:	f842 0f04 	str.w	r0, [r2, #4]!
 800c77a:	3301      	adds	r3, #1
 800c77c:	e7c5      	b.n	800c70a <__lshift+0x4a>
 800c77e:	3904      	subs	r1, #4
 800c780:	f853 2b04 	ldr.w	r2, [r3], #4
 800c784:	f841 2f04 	str.w	r2, [r1, #4]!
 800c788:	459c      	cmp	ip, r3
 800c78a:	d8f9      	bhi.n	800c780 <__lshift+0xc0>
 800c78c:	e7ea      	b.n	800c764 <__lshift+0xa4>
 800c78e:	bf00      	nop
 800c790:	0800d0b4 	.word	0x0800d0b4
 800c794:	0800d0d6 	.word	0x0800d0d6

0800c798 <__mcmp>:
 800c798:	690a      	ldr	r2, [r1, #16]
 800c79a:	4603      	mov	r3, r0
 800c79c:	6900      	ldr	r0, [r0, #16]
 800c79e:	1a80      	subs	r0, r0, r2
 800c7a0:	b530      	push	{r4, r5, lr}
 800c7a2:	d10e      	bne.n	800c7c2 <__mcmp+0x2a>
 800c7a4:	3314      	adds	r3, #20
 800c7a6:	3114      	adds	r1, #20
 800c7a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c7ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c7b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c7b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7b8:	4295      	cmp	r5, r2
 800c7ba:	d003      	beq.n	800c7c4 <__mcmp+0x2c>
 800c7bc:	d205      	bcs.n	800c7ca <__mcmp+0x32>
 800c7be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7c2:	bd30      	pop	{r4, r5, pc}
 800c7c4:	42a3      	cmp	r3, r4
 800c7c6:	d3f3      	bcc.n	800c7b0 <__mcmp+0x18>
 800c7c8:	e7fb      	b.n	800c7c2 <__mcmp+0x2a>
 800c7ca:	2001      	movs	r0, #1
 800c7cc:	e7f9      	b.n	800c7c2 <__mcmp+0x2a>
	...

0800c7d0 <__mdiff>:
 800c7d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	4689      	mov	r9, r1
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	4611      	mov	r1, r2
 800c7da:	4648      	mov	r0, r9
 800c7dc:	4614      	mov	r4, r2
 800c7de:	f7ff ffdb 	bl	800c798 <__mcmp>
 800c7e2:	1e05      	subs	r5, r0, #0
 800c7e4:	d112      	bne.n	800c80c <__mdiff+0x3c>
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f7ff fd63 	bl	800c2b4 <_Balloc>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	b928      	cbnz	r0, 800c7fe <__mdiff+0x2e>
 800c7f2:	4b3f      	ldr	r3, [pc, #252]	@ (800c8f0 <__mdiff+0x120>)
 800c7f4:	f240 2137 	movw	r1, #567	@ 0x237
 800c7f8:	483e      	ldr	r0, [pc, #248]	@ (800c8f4 <__mdiff+0x124>)
 800c7fa:	f000 fa95 	bl	800cd28 <__assert_func>
 800c7fe:	2301      	movs	r3, #1
 800c800:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c804:	4610      	mov	r0, r2
 800c806:	b003      	add	sp, #12
 800c808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80c:	bfbc      	itt	lt
 800c80e:	464b      	movlt	r3, r9
 800c810:	46a1      	movlt	r9, r4
 800c812:	4630      	mov	r0, r6
 800c814:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c818:	bfba      	itte	lt
 800c81a:	461c      	movlt	r4, r3
 800c81c:	2501      	movlt	r5, #1
 800c81e:	2500      	movge	r5, #0
 800c820:	f7ff fd48 	bl	800c2b4 <_Balloc>
 800c824:	4602      	mov	r2, r0
 800c826:	b918      	cbnz	r0, 800c830 <__mdiff+0x60>
 800c828:	4b31      	ldr	r3, [pc, #196]	@ (800c8f0 <__mdiff+0x120>)
 800c82a:	f240 2145 	movw	r1, #581	@ 0x245
 800c82e:	e7e3      	b.n	800c7f8 <__mdiff+0x28>
 800c830:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c834:	6926      	ldr	r6, [r4, #16]
 800c836:	60c5      	str	r5, [r0, #12]
 800c838:	f109 0310 	add.w	r3, r9, #16
 800c83c:	f109 0514 	add.w	r5, r9, #20
 800c840:	f104 0e14 	add.w	lr, r4, #20
 800c844:	f100 0b14 	add.w	fp, r0, #20
 800c848:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c84c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c850:	9301      	str	r3, [sp, #4]
 800c852:	46d9      	mov	r9, fp
 800c854:	f04f 0c00 	mov.w	ip, #0
 800c858:	9b01      	ldr	r3, [sp, #4]
 800c85a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c85e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c862:	9301      	str	r3, [sp, #4]
 800c864:	fa1f f38a 	uxth.w	r3, sl
 800c868:	4619      	mov	r1, r3
 800c86a:	b283      	uxth	r3, r0
 800c86c:	1acb      	subs	r3, r1, r3
 800c86e:	0c00      	lsrs	r0, r0, #16
 800c870:	4463      	add	r3, ip
 800c872:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c876:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c880:	4576      	cmp	r6, lr
 800c882:	f849 3b04 	str.w	r3, [r9], #4
 800c886:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c88a:	d8e5      	bhi.n	800c858 <__mdiff+0x88>
 800c88c:	1b33      	subs	r3, r6, r4
 800c88e:	3b15      	subs	r3, #21
 800c890:	f023 0303 	bic.w	r3, r3, #3
 800c894:	3415      	adds	r4, #21
 800c896:	3304      	adds	r3, #4
 800c898:	42a6      	cmp	r6, r4
 800c89a:	bf38      	it	cc
 800c89c:	2304      	movcc	r3, #4
 800c89e:	441d      	add	r5, r3
 800c8a0:	445b      	add	r3, fp
 800c8a2:	461e      	mov	r6, r3
 800c8a4:	462c      	mov	r4, r5
 800c8a6:	4544      	cmp	r4, r8
 800c8a8:	d30e      	bcc.n	800c8c8 <__mdiff+0xf8>
 800c8aa:	f108 0103 	add.w	r1, r8, #3
 800c8ae:	1b49      	subs	r1, r1, r5
 800c8b0:	f021 0103 	bic.w	r1, r1, #3
 800c8b4:	3d03      	subs	r5, #3
 800c8b6:	45a8      	cmp	r8, r5
 800c8b8:	bf38      	it	cc
 800c8ba:	2100      	movcc	r1, #0
 800c8bc:	440b      	add	r3, r1
 800c8be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8c2:	b191      	cbz	r1, 800c8ea <__mdiff+0x11a>
 800c8c4:	6117      	str	r7, [r2, #16]
 800c8c6:	e79d      	b.n	800c804 <__mdiff+0x34>
 800c8c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c8cc:	46e6      	mov	lr, ip
 800c8ce:	0c08      	lsrs	r0, r1, #16
 800c8d0:	fa1c fc81 	uxtah	ip, ip, r1
 800c8d4:	4471      	add	r1, lr
 800c8d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c8da:	b289      	uxth	r1, r1
 800c8dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c8e0:	f846 1b04 	str.w	r1, [r6], #4
 800c8e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8e8:	e7dd      	b.n	800c8a6 <__mdiff+0xd6>
 800c8ea:	3f01      	subs	r7, #1
 800c8ec:	e7e7      	b.n	800c8be <__mdiff+0xee>
 800c8ee:	bf00      	nop
 800c8f0:	0800d0b4 	.word	0x0800d0b4
 800c8f4:	0800d0d6 	.word	0x0800d0d6

0800c8f8 <__d2b>:
 800c8f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8fc:	460f      	mov	r7, r1
 800c8fe:	2101      	movs	r1, #1
 800c900:	ec59 8b10 	vmov	r8, r9, d0
 800c904:	4616      	mov	r6, r2
 800c906:	f7ff fcd5 	bl	800c2b4 <_Balloc>
 800c90a:	4604      	mov	r4, r0
 800c90c:	b930      	cbnz	r0, 800c91c <__d2b+0x24>
 800c90e:	4602      	mov	r2, r0
 800c910:	4b23      	ldr	r3, [pc, #140]	@ (800c9a0 <__d2b+0xa8>)
 800c912:	4824      	ldr	r0, [pc, #144]	@ (800c9a4 <__d2b+0xac>)
 800c914:	f240 310f 	movw	r1, #783	@ 0x30f
 800c918:	f000 fa06 	bl	800cd28 <__assert_func>
 800c91c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c924:	b10d      	cbz	r5, 800c92a <__d2b+0x32>
 800c926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c92a:	9301      	str	r3, [sp, #4]
 800c92c:	f1b8 0300 	subs.w	r3, r8, #0
 800c930:	d023      	beq.n	800c97a <__d2b+0x82>
 800c932:	4668      	mov	r0, sp
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	f7ff fd84 	bl	800c442 <__lo0bits>
 800c93a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c93e:	b1d0      	cbz	r0, 800c976 <__d2b+0x7e>
 800c940:	f1c0 0320 	rsb	r3, r0, #32
 800c944:	fa02 f303 	lsl.w	r3, r2, r3
 800c948:	430b      	orrs	r3, r1
 800c94a:	40c2      	lsrs	r2, r0
 800c94c:	6163      	str	r3, [r4, #20]
 800c94e:	9201      	str	r2, [sp, #4]
 800c950:	9b01      	ldr	r3, [sp, #4]
 800c952:	61a3      	str	r3, [r4, #24]
 800c954:	2b00      	cmp	r3, #0
 800c956:	bf0c      	ite	eq
 800c958:	2201      	moveq	r2, #1
 800c95a:	2202      	movne	r2, #2
 800c95c:	6122      	str	r2, [r4, #16]
 800c95e:	b1a5      	cbz	r5, 800c98a <__d2b+0x92>
 800c960:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c964:	4405      	add	r5, r0
 800c966:	603d      	str	r5, [r7, #0]
 800c968:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c96c:	6030      	str	r0, [r6, #0]
 800c96e:	4620      	mov	r0, r4
 800c970:	b003      	add	sp, #12
 800c972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c976:	6161      	str	r1, [r4, #20]
 800c978:	e7ea      	b.n	800c950 <__d2b+0x58>
 800c97a:	a801      	add	r0, sp, #4
 800c97c:	f7ff fd61 	bl	800c442 <__lo0bits>
 800c980:	9b01      	ldr	r3, [sp, #4]
 800c982:	6163      	str	r3, [r4, #20]
 800c984:	3020      	adds	r0, #32
 800c986:	2201      	movs	r2, #1
 800c988:	e7e8      	b.n	800c95c <__d2b+0x64>
 800c98a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c98e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c992:	6038      	str	r0, [r7, #0]
 800c994:	6918      	ldr	r0, [r3, #16]
 800c996:	f7ff fd35 	bl	800c404 <__hi0bits>
 800c99a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c99e:	e7e5      	b.n	800c96c <__d2b+0x74>
 800c9a0:	0800d0b4 	.word	0x0800d0b4
 800c9a4:	0800d0d6 	.word	0x0800d0d6

0800c9a8 <__sread>:
 800c9a8:	b510      	push	{r4, lr}
 800c9aa:	460c      	mov	r4, r1
 800c9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b0:	f000 f956 	bl	800cc60 <_read_r>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	bfab      	itete	ge
 800c9b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c9ba:	89a3      	ldrhlt	r3, [r4, #12]
 800c9bc:	181b      	addge	r3, r3, r0
 800c9be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c9c2:	bfac      	ite	ge
 800c9c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c9c6:	81a3      	strhlt	r3, [r4, #12]
 800c9c8:	bd10      	pop	{r4, pc}

0800c9ca <__swrite>:
 800c9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ce:	461f      	mov	r7, r3
 800c9d0:	898b      	ldrh	r3, [r1, #12]
 800c9d2:	05db      	lsls	r3, r3, #23
 800c9d4:	4605      	mov	r5, r0
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	4616      	mov	r6, r2
 800c9da:	d505      	bpl.n	800c9e8 <__swrite+0x1e>
 800c9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f000 f92a 	bl	800cc3c <_lseek_r>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c9f2:	81a3      	strh	r3, [r4, #12]
 800c9f4:	4632      	mov	r2, r6
 800c9f6:	463b      	mov	r3, r7
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fe:	f000 b951 	b.w	800cca4 <_write_r>

0800ca02 <__sseek>:
 800ca02:	b510      	push	{r4, lr}
 800ca04:	460c      	mov	r4, r1
 800ca06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca0a:	f000 f917 	bl	800cc3c <_lseek_r>
 800ca0e:	1c43      	adds	r3, r0, #1
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	bf15      	itete	ne
 800ca14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca1e:	81a3      	strheq	r3, [r4, #12]
 800ca20:	bf18      	it	ne
 800ca22:	81a3      	strhne	r3, [r4, #12]
 800ca24:	bd10      	pop	{r4, pc}

0800ca26 <__sclose>:
 800ca26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca2a:	f000 b94d 	b.w	800ccc8 <_close_r>

0800ca2e <__swbuf_r>:
 800ca2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca30:	460e      	mov	r6, r1
 800ca32:	4614      	mov	r4, r2
 800ca34:	4605      	mov	r5, r0
 800ca36:	b118      	cbz	r0, 800ca40 <__swbuf_r+0x12>
 800ca38:	6a03      	ldr	r3, [r0, #32]
 800ca3a:	b90b      	cbnz	r3, 800ca40 <__swbuf_r+0x12>
 800ca3c:	f7fe face 	bl	800afdc <__sinit>
 800ca40:	69a3      	ldr	r3, [r4, #24]
 800ca42:	60a3      	str	r3, [r4, #8]
 800ca44:	89a3      	ldrh	r3, [r4, #12]
 800ca46:	071a      	lsls	r2, r3, #28
 800ca48:	d501      	bpl.n	800ca4e <__swbuf_r+0x20>
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	b943      	cbnz	r3, 800ca60 <__swbuf_r+0x32>
 800ca4e:	4621      	mov	r1, r4
 800ca50:	4628      	mov	r0, r5
 800ca52:	f000 f82b 	bl	800caac <__swsetup_r>
 800ca56:	b118      	cbz	r0, 800ca60 <__swbuf_r+0x32>
 800ca58:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ca5c:	4638      	mov	r0, r7
 800ca5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	6922      	ldr	r2, [r4, #16]
 800ca64:	1a98      	subs	r0, r3, r2
 800ca66:	6963      	ldr	r3, [r4, #20]
 800ca68:	b2f6      	uxtb	r6, r6
 800ca6a:	4283      	cmp	r3, r0
 800ca6c:	4637      	mov	r7, r6
 800ca6e:	dc05      	bgt.n	800ca7c <__swbuf_r+0x4e>
 800ca70:	4621      	mov	r1, r4
 800ca72:	4628      	mov	r0, r5
 800ca74:	f7ff fbea 	bl	800c24c <_fflush_r>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d1ed      	bne.n	800ca58 <__swbuf_r+0x2a>
 800ca7c:	68a3      	ldr	r3, [r4, #8]
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	60a3      	str	r3, [r4, #8]
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	1c5a      	adds	r2, r3, #1
 800ca86:	6022      	str	r2, [r4, #0]
 800ca88:	701e      	strb	r6, [r3, #0]
 800ca8a:	6962      	ldr	r2, [r4, #20]
 800ca8c:	1c43      	adds	r3, r0, #1
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d004      	beq.n	800ca9c <__swbuf_r+0x6e>
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	07db      	lsls	r3, r3, #31
 800ca96:	d5e1      	bpl.n	800ca5c <__swbuf_r+0x2e>
 800ca98:	2e0a      	cmp	r6, #10
 800ca9a:	d1df      	bne.n	800ca5c <__swbuf_r+0x2e>
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f7ff fbd4 	bl	800c24c <_fflush_r>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	d0d9      	beq.n	800ca5c <__swbuf_r+0x2e>
 800caa8:	e7d6      	b.n	800ca58 <__swbuf_r+0x2a>
	...

0800caac <__swsetup_r>:
 800caac:	b538      	push	{r3, r4, r5, lr}
 800caae:	4b29      	ldr	r3, [pc, #164]	@ (800cb54 <__swsetup_r+0xa8>)
 800cab0:	4605      	mov	r5, r0
 800cab2:	6818      	ldr	r0, [r3, #0]
 800cab4:	460c      	mov	r4, r1
 800cab6:	b118      	cbz	r0, 800cac0 <__swsetup_r+0x14>
 800cab8:	6a03      	ldr	r3, [r0, #32]
 800caba:	b90b      	cbnz	r3, 800cac0 <__swsetup_r+0x14>
 800cabc:	f7fe fa8e 	bl	800afdc <__sinit>
 800cac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac4:	0719      	lsls	r1, r3, #28
 800cac6:	d422      	bmi.n	800cb0e <__swsetup_r+0x62>
 800cac8:	06da      	lsls	r2, r3, #27
 800caca:	d407      	bmi.n	800cadc <__swsetup_r+0x30>
 800cacc:	2209      	movs	r2, #9
 800cace:	602a      	str	r2, [r5, #0]
 800cad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cad4:	81a3      	strh	r3, [r4, #12]
 800cad6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cada:	e033      	b.n	800cb44 <__swsetup_r+0x98>
 800cadc:	0758      	lsls	r0, r3, #29
 800cade:	d512      	bpl.n	800cb06 <__swsetup_r+0x5a>
 800cae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cae2:	b141      	cbz	r1, 800caf6 <__swsetup_r+0x4a>
 800cae4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cae8:	4299      	cmp	r1, r3
 800caea:	d002      	beq.n	800caf2 <__swsetup_r+0x46>
 800caec:	4628      	mov	r0, r5
 800caee:	f000 f94d 	bl	800cd8c <_free_r>
 800caf2:	2300      	movs	r3, #0
 800caf4:	6363      	str	r3, [r4, #52]	@ 0x34
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cafc:	81a3      	strh	r3, [r4, #12]
 800cafe:	2300      	movs	r3, #0
 800cb00:	6063      	str	r3, [r4, #4]
 800cb02:	6923      	ldr	r3, [r4, #16]
 800cb04:	6023      	str	r3, [r4, #0]
 800cb06:	89a3      	ldrh	r3, [r4, #12]
 800cb08:	f043 0308 	orr.w	r3, r3, #8
 800cb0c:	81a3      	strh	r3, [r4, #12]
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	b94b      	cbnz	r3, 800cb26 <__swsetup_r+0x7a>
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb1c:	d003      	beq.n	800cb26 <__swsetup_r+0x7a>
 800cb1e:	4621      	mov	r1, r4
 800cb20:	4628      	mov	r0, r5
 800cb22:	f000 f83f 	bl	800cba4 <__smakebuf_r>
 800cb26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb2a:	f013 0201 	ands.w	r2, r3, #1
 800cb2e:	d00a      	beq.n	800cb46 <__swsetup_r+0x9a>
 800cb30:	2200      	movs	r2, #0
 800cb32:	60a2      	str	r2, [r4, #8]
 800cb34:	6962      	ldr	r2, [r4, #20]
 800cb36:	4252      	negs	r2, r2
 800cb38:	61a2      	str	r2, [r4, #24]
 800cb3a:	6922      	ldr	r2, [r4, #16]
 800cb3c:	b942      	cbnz	r2, 800cb50 <__swsetup_r+0xa4>
 800cb3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb42:	d1c5      	bne.n	800cad0 <__swsetup_r+0x24>
 800cb44:	bd38      	pop	{r3, r4, r5, pc}
 800cb46:	0799      	lsls	r1, r3, #30
 800cb48:	bf58      	it	pl
 800cb4a:	6962      	ldrpl	r2, [r4, #20]
 800cb4c:	60a2      	str	r2, [r4, #8]
 800cb4e:	e7f4      	b.n	800cb3a <__swsetup_r+0x8e>
 800cb50:	2000      	movs	r0, #0
 800cb52:	e7f7      	b.n	800cb44 <__swsetup_r+0x98>
 800cb54:	2400001c 	.word	0x2400001c

0800cb58 <__swhatbuf_r>:
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb60:	2900      	cmp	r1, #0
 800cb62:	b096      	sub	sp, #88	@ 0x58
 800cb64:	4615      	mov	r5, r2
 800cb66:	461e      	mov	r6, r3
 800cb68:	da0d      	bge.n	800cb86 <__swhatbuf_r+0x2e>
 800cb6a:	89a3      	ldrh	r3, [r4, #12]
 800cb6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb70:	f04f 0100 	mov.w	r1, #0
 800cb74:	bf14      	ite	ne
 800cb76:	2340      	movne	r3, #64	@ 0x40
 800cb78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	6031      	str	r1, [r6, #0]
 800cb80:	602b      	str	r3, [r5, #0]
 800cb82:	b016      	add	sp, #88	@ 0x58
 800cb84:	bd70      	pop	{r4, r5, r6, pc}
 800cb86:	466a      	mov	r2, sp
 800cb88:	f000 f8ae 	bl	800cce8 <_fstat_r>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	dbec      	blt.n	800cb6a <__swhatbuf_r+0x12>
 800cb90:	9901      	ldr	r1, [sp, #4]
 800cb92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb9a:	4259      	negs	r1, r3
 800cb9c:	4159      	adcs	r1, r3
 800cb9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cba2:	e7eb      	b.n	800cb7c <__swhatbuf_r+0x24>

0800cba4 <__smakebuf_r>:
 800cba4:	898b      	ldrh	r3, [r1, #12]
 800cba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cba8:	079d      	lsls	r5, r3, #30
 800cbaa:	4606      	mov	r6, r0
 800cbac:	460c      	mov	r4, r1
 800cbae:	d507      	bpl.n	800cbc0 <__smakebuf_r+0x1c>
 800cbb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	6123      	str	r3, [r4, #16]
 800cbb8:	2301      	movs	r3, #1
 800cbba:	6163      	str	r3, [r4, #20]
 800cbbc:	b003      	add	sp, #12
 800cbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc0:	ab01      	add	r3, sp, #4
 800cbc2:	466a      	mov	r2, sp
 800cbc4:	f7ff ffc8 	bl	800cb58 <__swhatbuf_r>
 800cbc8:	9f00      	ldr	r7, [sp, #0]
 800cbca:	4605      	mov	r5, r0
 800cbcc:	4639      	mov	r1, r7
 800cbce:	4630      	mov	r0, r6
 800cbd0:	f7ff fa38 	bl	800c044 <_malloc_r>
 800cbd4:	b948      	cbnz	r0, 800cbea <__smakebuf_r+0x46>
 800cbd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbda:	059a      	lsls	r2, r3, #22
 800cbdc:	d4ee      	bmi.n	800cbbc <__smakebuf_r+0x18>
 800cbde:	f023 0303 	bic.w	r3, r3, #3
 800cbe2:	f043 0302 	orr.w	r3, r3, #2
 800cbe6:	81a3      	strh	r3, [r4, #12]
 800cbe8:	e7e2      	b.n	800cbb0 <__smakebuf_r+0xc>
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	6020      	str	r0, [r4, #0]
 800cbee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbf2:	81a3      	strh	r3, [r4, #12]
 800cbf4:	9b01      	ldr	r3, [sp, #4]
 800cbf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbfa:	b15b      	cbz	r3, 800cc14 <__smakebuf_r+0x70>
 800cbfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc00:	4630      	mov	r0, r6
 800cc02:	f000 f80b 	bl	800cc1c <_isatty_r>
 800cc06:	b128      	cbz	r0, 800cc14 <__smakebuf_r+0x70>
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	f023 0303 	bic.w	r3, r3, #3
 800cc0e:	f043 0301 	orr.w	r3, r3, #1
 800cc12:	81a3      	strh	r3, [r4, #12]
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	431d      	orrs	r5, r3
 800cc18:	81a5      	strh	r5, [r4, #12]
 800cc1a:	e7cf      	b.n	800cbbc <__smakebuf_r+0x18>

0800cc1c <_isatty_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4d06      	ldr	r5, [pc, #24]	@ (800cc38 <_isatty_r+0x1c>)
 800cc20:	2300      	movs	r3, #0
 800cc22:	4604      	mov	r4, r0
 800cc24:	4608      	mov	r0, r1
 800cc26:	602b      	str	r3, [r5, #0]
 800cc28:	f7f4 fa84 	bl	8001134 <_isatty>
 800cc2c:	1c43      	adds	r3, r0, #1
 800cc2e:	d102      	bne.n	800cc36 <_isatty_r+0x1a>
 800cc30:	682b      	ldr	r3, [r5, #0]
 800cc32:	b103      	cbz	r3, 800cc36 <_isatty_r+0x1a>
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	bd38      	pop	{r3, r4, r5, pc}
 800cc38:	24000cec 	.word	0x24000cec

0800cc3c <_lseek_r>:
 800cc3c:	b538      	push	{r3, r4, r5, lr}
 800cc3e:	4d07      	ldr	r5, [pc, #28]	@ (800cc5c <_lseek_r+0x20>)
 800cc40:	4604      	mov	r4, r0
 800cc42:	4608      	mov	r0, r1
 800cc44:	4611      	mov	r1, r2
 800cc46:	2200      	movs	r2, #0
 800cc48:	602a      	str	r2, [r5, #0]
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	f7f4 fa7d 	bl	800114a <_lseek>
 800cc50:	1c43      	adds	r3, r0, #1
 800cc52:	d102      	bne.n	800cc5a <_lseek_r+0x1e>
 800cc54:	682b      	ldr	r3, [r5, #0]
 800cc56:	b103      	cbz	r3, 800cc5a <_lseek_r+0x1e>
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	bd38      	pop	{r3, r4, r5, pc}
 800cc5c:	24000cec 	.word	0x24000cec

0800cc60 <_read_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	4d07      	ldr	r5, [pc, #28]	@ (800cc80 <_read_r+0x20>)
 800cc64:	4604      	mov	r4, r0
 800cc66:	4608      	mov	r0, r1
 800cc68:	4611      	mov	r1, r2
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	602a      	str	r2, [r5, #0]
 800cc6e:	461a      	mov	r2, r3
 800cc70:	f7f4 fa27 	bl	80010c2 <_read>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	d102      	bne.n	800cc7e <_read_r+0x1e>
 800cc78:	682b      	ldr	r3, [r5, #0]
 800cc7a:	b103      	cbz	r3, 800cc7e <_read_r+0x1e>
 800cc7c:	6023      	str	r3, [r4, #0]
 800cc7e:	bd38      	pop	{r3, r4, r5, pc}
 800cc80:	24000cec 	.word	0x24000cec

0800cc84 <_sbrk_r>:
 800cc84:	b538      	push	{r3, r4, r5, lr}
 800cc86:	4d06      	ldr	r5, [pc, #24]	@ (800cca0 <_sbrk_r+0x1c>)
 800cc88:	2300      	movs	r3, #0
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	4608      	mov	r0, r1
 800cc8e:	602b      	str	r3, [r5, #0]
 800cc90:	f7f4 fa68 	bl	8001164 <_sbrk>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_sbrk_r+0x1a>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_sbrk_r+0x1a>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	24000cec 	.word	0x24000cec

0800cca4 <_write_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d07      	ldr	r5, [pc, #28]	@ (800ccc4 <_write_r+0x20>)
 800cca8:	4604      	mov	r4, r0
 800ccaa:	4608      	mov	r0, r1
 800ccac:	4611      	mov	r1, r2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	602a      	str	r2, [r5, #0]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	f7f3 fdf2 	bl	800089c <_write>
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	d102      	bne.n	800ccc2 <_write_r+0x1e>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	b103      	cbz	r3, 800ccc2 <_write_r+0x1e>
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	bd38      	pop	{r3, r4, r5, pc}
 800ccc4:	24000cec 	.word	0x24000cec

0800ccc8 <_close_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4d06      	ldr	r5, [pc, #24]	@ (800cce4 <_close_r+0x1c>)
 800cccc:	2300      	movs	r3, #0
 800ccce:	4604      	mov	r4, r0
 800ccd0:	4608      	mov	r0, r1
 800ccd2:	602b      	str	r3, [r5, #0]
 800ccd4:	f7f4 fa12 	bl	80010fc <_close>
 800ccd8:	1c43      	adds	r3, r0, #1
 800ccda:	d102      	bne.n	800cce2 <_close_r+0x1a>
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	b103      	cbz	r3, 800cce2 <_close_r+0x1a>
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	bd38      	pop	{r3, r4, r5, pc}
 800cce4:	24000cec 	.word	0x24000cec

0800cce8 <_fstat_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d07      	ldr	r5, [pc, #28]	@ (800cd08 <_fstat_r+0x20>)
 800ccec:	2300      	movs	r3, #0
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	602b      	str	r3, [r5, #0]
 800ccf6:	f7f4 fa0d 	bl	8001114 <_fstat>
 800ccfa:	1c43      	adds	r3, r0, #1
 800ccfc:	d102      	bne.n	800cd04 <_fstat_r+0x1c>
 800ccfe:	682b      	ldr	r3, [r5, #0]
 800cd00:	b103      	cbz	r3, 800cd04 <_fstat_r+0x1c>
 800cd02:	6023      	str	r3, [r4, #0]
 800cd04:	bd38      	pop	{r3, r4, r5, pc}
 800cd06:	bf00      	nop
 800cd08:	24000cec 	.word	0x24000cec

0800cd0c <memcpy>:
 800cd0c:	440a      	add	r2, r1
 800cd0e:	4291      	cmp	r1, r2
 800cd10:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cd14:	d100      	bne.n	800cd18 <memcpy+0xc>
 800cd16:	4770      	bx	lr
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd22:	4291      	cmp	r1, r2
 800cd24:	d1f9      	bne.n	800cd1a <memcpy+0xe>
 800cd26:	bd10      	pop	{r4, pc}

0800cd28 <__assert_func>:
 800cd28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd2a:	4614      	mov	r4, r2
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	4b09      	ldr	r3, [pc, #36]	@ (800cd54 <__assert_func+0x2c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4605      	mov	r5, r0
 800cd34:	68d8      	ldr	r0, [r3, #12]
 800cd36:	b14c      	cbz	r4, 800cd4c <__assert_func+0x24>
 800cd38:	4b07      	ldr	r3, [pc, #28]	@ (800cd58 <__assert_func+0x30>)
 800cd3a:	9100      	str	r1, [sp, #0]
 800cd3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd40:	4906      	ldr	r1, [pc, #24]	@ (800cd5c <__assert_func+0x34>)
 800cd42:	462b      	mov	r3, r5
 800cd44:	f000 f87e 	bl	800ce44 <fiprintf>
 800cd48:	f000 f89b 	bl	800ce82 <abort>
 800cd4c:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <__assert_func+0x38>)
 800cd4e:	461c      	mov	r4, r3
 800cd50:	e7f3      	b.n	800cd3a <__assert_func+0x12>
 800cd52:	bf00      	nop
 800cd54:	2400001c 	.word	0x2400001c
 800cd58:	0800d139 	.word	0x0800d139
 800cd5c:	0800d146 	.word	0x0800d146
 800cd60:	0800d174 	.word	0x0800d174

0800cd64 <_calloc_r>:
 800cd64:	b570      	push	{r4, r5, r6, lr}
 800cd66:	fba1 5402 	umull	r5, r4, r1, r2
 800cd6a:	b934      	cbnz	r4, 800cd7a <_calloc_r+0x16>
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	f7ff f969 	bl	800c044 <_malloc_r>
 800cd72:	4606      	mov	r6, r0
 800cd74:	b928      	cbnz	r0, 800cd82 <_calloc_r+0x1e>
 800cd76:	4630      	mov	r0, r6
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
 800cd7a:	220c      	movs	r2, #12
 800cd7c:	6002      	str	r2, [r0, #0]
 800cd7e:	2600      	movs	r6, #0
 800cd80:	e7f9      	b.n	800cd76 <_calloc_r+0x12>
 800cd82:	462a      	mov	r2, r5
 800cd84:	4621      	mov	r1, r4
 800cd86:	f7fe f9cf 	bl	800b128 <memset>
 800cd8a:	e7f4      	b.n	800cd76 <_calloc_r+0x12>

0800cd8c <_free_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4605      	mov	r5, r0
 800cd90:	2900      	cmp	r1, #0
 800cd92:	d041      	beq.n	800ce18 <_free_r+0x8c>
 800cd94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd98:	1f0c      	subs	r4, r1, #4
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	bfb8      	it	lt
 800cd9e:	18e4      	addlt	r4, r4, r3
 800cda0:	f7ff fa7c 	bl	800c29c <__malloc_lock>
 800cda4:	4a1d      	ldr	r2, [pc, #116]	@ (800ce1c <_free_r+0x90>)
 800cda6:	6813      	ldr	r3, [r2, #0]
 800cda8:	b933      	cbnz	r3, 800cdb8 <_free_r+0x2c>
 800cdaa:	6063      	str	r3, [r4, #4]
 800cdac:	6014      	str	r4, [r2, #0]
 800cdae:	4628      	mov	r0, r5
 800cdb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdb4:	f7ff ba78 	b.w	800c2a8 <__malloc_unlock>
 800cdb8:	42a3      	cmp	r3, r4
 800cdba:	d908      	bls.n	800cdce <_free_r+0x42>
 800cdbc:	6820      	ldr	r0, [r4, #0]
 800cdbe:	1821      	adds	r1, r4, r0
 800cdc0:	428b      	cmp	r3, r1
 800cdc2:	bf01      	itttt	eq
 800cdc4:	6819      	ldreq	r1, [r3, #0]
 800cdc6:	685b      	ldreq	r3, [r3, #4]
 800cdc8:	1809      	addeq	r1, r1, r0
 800cdca:	6021      	streq	r1, [r4, #0]
 800cdcc:	e7ed      	b.n	800cdaa <_free_r+0x1e>
 800cdce:	461a      	mov	r2, r3
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	b10b      	cbz	r3, 800cdd8 <_free_r+0x4c>
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	d9fa      	bls.n	800cdce <_free_r+0x42>
 800cdd8:	6811      	ldr	r1, [r2, #0]
 800cdda:	1850      	adds	r0, r2, r1
 800cddc:	42a0      	cmp	r0, r4
 800cdde:	d10b      	bne.n	800cdf8 <_free_r+0x6c>
 800cde0:	6820      	ldr	r0, [r4, #0]
 800cde2:	4401      	add	r1, r0
 800cde4:	1850      	adds	r0, r2, r1
 800cde6:	4283      	cmp	r3, r0
 800cde8:	6011      	str	r1, [r2, #0]
 800cdea:	d1e0      	bne.n	800cdae <_free_r+0x22>
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	6053      	str	r3, [r2, #4]
 800cdf2:	4408      	add	r0, r1
 800cdf4:	6010      	str	r0, [r2, #0]
 800cdf6:	e7da      	b.n	800cdae <_free_r+0x22>
 800cdf8:	d902      	bls.n	800ce00 <_free_r+0x74>
 800cdfa:	230c      	movs	r3, #12
 800cdfc:	602b      	str	r3, [r5, #0]
 800cdfe:	e7d6      	b.n	800cdae <_free_r+0x22>
 800ce00:	6820      	ldr	r0, [r4, #0]
 800ce02:	1821      	adds	r1, r4, r0
 800ce04:	428b      	cmp	r3, r1
 800ce06:	bf04      	itt	eq
 800ce08:	6819      	ldreq	r1, [r3, #0]
 800ce0a:	685b      	ldreq	r3, [r3, #4]
 800ce0c:	6063      	str	r3, [r4, #4]
 800ce0e:	bf04      	itt	eq
 800ce10:	1809      	addeq	r1, r1, r0
 800ce12:	6021      	streq	r1, [r4, #0]
 800ce14:	6054      	str	r4, [r2, #4]
 800ce16:	e7ca      	b.n	800cdae <_free_r+0x22>
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	bf00      	nop
 800ce1c:	24000ce8 	.word	0x24000ce8

0800ce20 <__ascii_mbtowc>:
 800ce20:	b082      	sub	sp, #8
 800ce22:	b901      	cbnz	r1, 800ce26 <__ascii_mbtowc+0x6>
 800ce24:	a901      	add	r1, sp, #4
 800ce26:	b142      	cbz	r2, 800ce3a <__ascii_mbtowc+0x1a>
 800ce28:	b14b      	cbz	r3, 800ce3e <__ascii_mbtowc+0x1e>
 800ce2a:	7813      	ldrb	r3, [r2, #0]
 800ce2c:	600b      	str	r3, [r1, #0]
 800ce2e:	7812      	ldrb	r2, [r2, #0]
 800ce30:	1e10      	subs	r0, r2, #0
 800ce32:	bf18      	it	ne
 800ce34:	2001      	movne	r0, #1
 800ce36:	b002      	add	sp, #8
 800ce38:	4770      	bx	lr
 800ce3a:	4610      	mov	r0, r2
 800ce3c:	e7fb      	b.n	800ce36 <__ascii_mbtowc+0x16>
 800ce3e:	f06f 0001 	mvn.w	r0, #1
 800ce42:	e7f8      	b.n	800ce36 <__ascii_mbtowc+0x16>

0800ce44 <fiprintf>:
 800ce44:	b40e      	push	{r1, r2, r3}
 800ce46:	b503      	push	{r0, r1, lr}
 800ce48:	4601      	mov	r1, r0
 800ce4a:	ab03      	add	r3, sp, #12
 800ce4c:	4805      	ldr	r0, [pc, #20]	@ (800ce64 <fiprintf+0x20>)
 800ce4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce52:	6800      	ldr	r0, [r0, #0]
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	f7fe ffb3 	bl	800bdc0 <_vfiprintf_r>
 800ce5a:	b002      	add	sp, #8
 800ce5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce60:	b003      	add	sp, #12
 800ce62:	4770      	bx	lr
 800ce64:	2400001c 	.word	0x2400001c

0800ce68 <__ascii_wctomb>:
 800ce68:	4603      	mov	r3, r0
 800ce6a:	4608      	mov	r0, r1
 800ce6c:	b141      	cbz	r1, 800ce80 <__ascii_wctomb+0x18>
 800ce6e:	2aff      	cmp	r2, #255	@ 0xff
 800ce70:	d904      	bls.n	800ce7c <__ascii_wctomb+0x14>
 800ce72:	228a      	movs	r2, #138	@ 0x8a
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce7a:	4770      	bx	lr
 800ce7c:	700a      	strb	r2, [r1, #0]
 800ce7e:	2001      	movs	r0, #1
 800ce80:	4770      	bx	lr

0800ce82 <abort>:
 800ce82:	b508      	push	{r3, lr}
 800ce84:	2006      	movs	r0, #6
 800ce86:	f000 f82b 	bl	800cee0 <raise>
 800ce8a:	2001      	movs	r0, #1
 800ce8c:	f7f4 f90e 	bl	80010ac <_exit>

0800ce90 <_raise_r>:
 800ce90:	291f      	cmp	r1, #31
 800ce92:	b538      	push	{r3, r4, r5, lr}
 800ce94:	4605      	mov	r5, r0
 800ce96:	460c      	mov	r4, r1
 800ce98:	d904      	bls.n	800cea4 <_raise_r+0x14>
 800ce9a:	2316      	movs	r3, #22
 800ce9c:	6003      	str	r3, [r0, #0]
 800ce9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cea2:	bd38      	pop	{r3, r4, r5, pc}
 800cea4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cea6:	b112      	cbz	r2, 800ceae <_raise_r+0x1e>
 800cea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ceac:	b94b      	cbnz	r3, 800cec2 <_raise_r+0x32>
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f000 f830 	bl	800cf14 <_getpid_r>
 800ceb4:	4622      	mov	r2, r4
 800ceb6:	4601      	mov	r1, r0
 800ceb8:	4628      	mov	r0, r5
 800ceba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cebe:	f000 b817 	b.w	800cef0 <_kill_r>
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d00a      	beq.n	800cedc <_raise_r+0x4c>
 800cec6:	1c59      	adds	r1, r3, #1
 800cec8:	d103      	bne.n	800ced2 <_raise_r+0x42>
 800ceca:	2316      	movs	r3, #22
 800cecc:	6003      	str	r3, [r0, #0]
 800cece:	2001      	movs	r0, #1
 800ced0:	e7e7      	b.n	800cea2 <_raise_r+0x12>
 800ced2:	2100      	movs	r1, #0
 800ced4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ced8:	4620      	mov	r0, r4
 800ceda:	4798      	blx	r3
 800cedc:	2000      	movs	r0, #0
 800cede:	e7e0      	b.n	800cea2 <_raise_r+0x12>

0800cee0 <raise>:
 800cee0:	4b02      	ldr	r3, [pc, #8]	@ (800ceec <raise+0xc>)
 800cee2:	4601      	mov	r1, r0
 800cee4:	6818      	ldr	r0, [r3, #0]
 800cee6:	f7ff bfd3 	b.w	800ce90 <_raise_r>
 800ceea:	bf00      	nop
 800ceec:	2400001c 	.word	0x2400001c

0800cef0 <_kill_r>:
 800cef0:	b538      	push	{r3, r4, r5, lr}
 800cef2:	4d07      	ldr	r5, [pc, #28]	@ (800cf10 <_kill_r+0x20>)
 800cef4:	2300      	movs	r3, #0
 800cef6:	4604      	mov	r4, r0
 800cef8:	4608      	mov	r0, r1
 800cefa:	4611      	mov	r1, r2
 800cefc:	602b      	str	r3, [r5, #0]
 800cefe:	f7f4 f8c5 	bl	800108c <_kill>
 800cf02:	1c43      	adds	r3, r0, #1
 800cf04:	d102      	bne.n	800cf0c <_kill_r+0x1c>
 800cf06:	682b      	ldr	r3, [r5, #0]
 800cf08:	b103      	cbz	r3, 800cf0c <_kill_r+0x1c>
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	bd38      	pop	{r3, r4, r5, pc}
 800cf0e:	bf00      	nop
 800cf10:	24000cec 	.word	0x24000cec

0800cf14 <_getpid_r>:
 800cf14:	f7f4 b8b2 	b.w	800107c <_getpid>

0800cf18 <_init>:
 800cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1a:	bf00      	nop
 800cf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf1e:	bc08      	pop	{r3}
 800cf20:	469e      	mov	lr, r3
 800cf22:	4770      	bx	lr

0800cf24 <_fini>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	bf00      	nop
 800cf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2a:	bc08      	pop	{r3}
 800cf2c:	469e      	mov	lr, r3
 800cf2e:	4770      	bx	lr
