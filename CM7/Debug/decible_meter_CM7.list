
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbd8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800ce78  0800ce78  0000de78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3e4  0800d3e4  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d3e4  0800d3e4  0000e3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3ec  0800d3ec  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3ec  0800d3ec  0000e3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3f0  0800d3f0  0000e3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800d3f4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b18  240001d8  0800d5cc  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000cf0  0800d5cc  0000fcf0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147d3  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298d  00000000  00000000  000239d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00026368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b45  00000000  00000000  00027200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004052d  00000000  00000000  00027d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001687e  00000000  00000000  00068272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019ae29  00000000  00000000  0007eaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00219919  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c80  00000000  00000000  0021995c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0021e5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ce60 	.word	0x0800ce60

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800ce60 	.word	0x0800ce60

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b3d      	ldr	r3, [pc, #244]	@ (80007b8 <SystemInit+0xfc>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a3c      	ldr	r2, [pc, #240]	@ (80007b8 <SystemInit+0xfc>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b39      	ldr	r3, [pc, #228]	@ (80007b8 <SystemInit+0xfc>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a38      	ldr	r2, [pc, #224]	@ (80007b8 <SystemInit+0xfc>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b37      	ldr	r3, [pc, #220]	@ (80007bc <SystemInit+0x100>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b34      	ldr	r3, [pc, #208]	@ (80007bc <SystemInit+0x100>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a32      	ldr	r2, [pc, #200]	@ (80007bc <SystemInit+0x100>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b31      	ldr	r3, [pc, #196]	@ (80007c0 <SystemInit+0x104>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a30      	ldr	r2, [pc, #192]	@ (80007c0 <SystemInit+0x104>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <SystemInit+0x104>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <SystemInit+0x104>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	492c      	ldr	r1, [pc, #176]	@ (80007c0 <SystemInit+0x104>)
 8000710:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <SystemInit+0x108>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <SystemInit+0x100>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <SystemInit+0x100>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a24      	ldr	r2, [pc, #144]	@ (80007bc <SystemInit+0x100>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <SystemInit+0x104>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <SystemInit+0x104>)
 8000746:	4a20      	ldr	r2, [pc, #128]	@ (80007c8 <SystemInit+0x10c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x104>)
 800074c:	4a1f      	ldr	r2, [pc, #124]	@ (80007cc <SystemInit+0x110>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <SystemInit+0x104>)
 8000752:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <SystemInit+0x114>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <SystemInit+0x104>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <SystemInit+0x104>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	@ (80007d0 <SystemInit+0x114>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <SystemInit+0x104>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <SystemInit+0x104>)
 800076a:	4a19      	ldr	r2, [pc, #100]	@ (80007d0 <SystemInit+0x114>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <SystemInit+0x104>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <SystemInit+0x104>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a11      	ldr	r2, [pc, #68]	@ (80007c0 <SystemInit+0x104>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <SystemInit+0x104>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <SystemInit+0x118>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <SystemInit+0x118>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <SystemInit+0x11c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <SystemInit+0x120>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <SystemInit+0x124>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <SystemInit+0x128>)
 80007a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ac:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	52002000 	.word	0x52002000
 80007c0:	58024400 	.word	0x58024400
 80007c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c8:	02020200 	.word	0x02020200
 80007cc:	01ff0000 	.word	0x01ff0000
 80007d0:	01010280 	.word	0x01010280
 80007d4:	580000c0 	.word	0x580000c0
 80007d8:	5c001000 	.word	0x5c001000
 80007dc:	ffff0000 	.word	0xffff0000
 80007e0:	51008108 	.word	0x51008108
 80007e4:	52004000 	.word	0x52004000

080007e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d013      	beq.n	8000828 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000800:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000804:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000808:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00b      	beq.n	8000828 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000810:	e000      	b.n	8000814 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000812:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000814:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0f9      	beq.n	8000812 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800081e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <calculate_decibel>:
 * @param  buffer: Pointer to audio sample buffer
 * @param  size: Number of samples in the buffer
 * @return Sound pressure level in decibels (dB)
 */
float calculate_decibel(int16_t *buffer, size_t size)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    float sum = 0.0f;
 8000842:	f04f 0300 	mov.w	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]

    for (size_t i = 0; i < size; i++)
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	e01c      	b.n	8000888 <calculate_decibel+0x50>
    {
        float voltage = (float)buffer[i] / 32768.0f; // Normalize 16-bit value
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000862:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80008e4 <calculate_decibel+0xac>
 8000866:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800086a:	edc7 7a03 	vstr	s15, [r7, #12]
        sum += voltage * voltage;
 800086e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000872:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000876:	ed97 7a07 	vldr	s14, [r7, #28]
 800087a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087e:	edc7 7a07 	vstr	s15, [r7, #28]
    for (size_t i = 0; i < size; i++)
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	3301      	adds	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d3de      	bcc.n	800084e <calculate_decibel+0x16>
    }

    float rms = sqrtf(sum / size);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	ee07 3a90 	vmov	s15, r3
 8000896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800089a:	ed97 7a07 	vldr	s14, [r7, #28]
 800089e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80008a2:	eeb0 0a66 	vmov.f32	s0, s13
 80008a6:	f009 fd65 	bl	800a374 <sqrtf>
 80008aa:	ed87 0a05 	vstr	s0, [r7, #20]
    float spl = 20.0f * log10f(rms / REFERENCE_VOLTAGE);
 80008ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80008b2:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80008e8 <calculate_decibel+0xb0>
 80008b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008ba:	eeb0 0a47 	vmov.f32	s0, s14
 80008be:	f009 fd2b 	bl	800a318 <log10f>
 80008c2:	eef0 7a40 	vmov.f32	s15, s0
 80008c6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80008ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ce:	edc7 7a04 	vstr	s15, [r7, #16]

    return spl;
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	ee07 3a90 	vmov	s15, r3
}
 80008d8:	eeb0 0a67 	vmov.f32	s0, s15
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	47000000 	.word	0x47000000
 80008e8:	37a7c5ac 	.word	0x37a7c5ac

080008ec <_write>:
// {
//     HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
//     return len;
// }
int _write(int file, char *ptr, int len)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
    int i = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	e009      	b.n	8000916 <_write+0x2a>
    {
        ITM_SendChar(*ptr++);
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	60ba      	str	r2, [r7, #8]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff6c 	bl	80007e8 <ITM_SendChar>
    for (i = 0; i < len; i++)
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	3301      	adds	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	429a      	cmp	r2, r3
 800091c:	dbf1      	blt.n	8000902 <_write+0x16>
    }
    return len;
 800091e:	687b      	ldr	r3, [r7, #4]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

    memset(audio_buffer, 0xAA, sizeof(audio_buffer)); // Initialize buffer with known pattern
 800092e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000932:	21aa      	movs	r1, #170	@ 0xaa
 8000934:	4848      	ldr	r0, [pc, #288]	@ (8000a58 <main+0x130>)
 8000936:	f00a fb9b 	bl	800b070 <memset>

    /* Wait until CPU2 (CM4) boots and enters in stop mode or timeout*/
    int32_t timeout = 0xFFFF;
 800093a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800093e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000940:	bf00      	nop
 8000942:	4b46      	ldr	r3, [pc, #280]	@ (8000a5c <main+0x134>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <main+0x30>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	60fa      	str	r2, [r7, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	dcf4      	bgt.n	8000942 <main+0x1a>
        ;
    if (timeout < 0)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	da01      	bge.n	8000962 <main+0x3a>
    {
        Error_Handler();
 800095e:	f000 fa67 	bl	8000e30 <Error_Handler>
    }

    /* Hardware initialization sequence */
    MPU_Config();
 8000962:	f000 fa39 	bl	8000dd8 <MPU_Config>
    HAL_Init();                 // Reset peripherals
 8000966:	f000 fc8d 	bl	8001284 <HAL_Init>
    SystemClock_Config();       // System clock configuration
 800096a:	f000 f887 	bl	8000a7c <SystemClock_Config>
    PeriphCommonClock_Config(); // Peripheral clocks configuration
 800096e:	f000 f8f9 	bl	8000b64 <PeriphCommonClock_Config>

    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    __HAL_RCC_HSEM_CLK_ENABLE();    // Enable semaphore clock
 8000972:	4b3a      	ldr	r3, [pc, #232]	@ (8000a5c <main+0x134>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000978:	4a38      	ldr	r2, [pc, #224]	@ (8000a5c <main+0x134>)
 800097a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000982:	4b36      	ldr	r3, [pc, #216]	@ (8000a5c <main+0x134>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]
    HAL_HSEM_FastTake(HSEM_ID_0);   // Take HSEM
 8000990:	2000      	movs	r0, #0
 8000992:	f003 ff7f 	bl	8004894 <HAL_HSEM_FastTake>
    HAL_HSEM_Release(HSEM_ID_0, 0); // Release HSEM to notify CM4
 8000996:	2100      	movs	r1, #0
 8000998:	2000      	movs	r0, #0
 800099a:	f003 ff95 	bl	80048c8 <HAL_HSEM_Release>

    /* Wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 800099e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009a2:	60fb      	str	r3, [r7, #12]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80009a4:	bf00      	nop
 80009a6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <main+0x134>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d104      	bne.n	80009bc <main+0x94>
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	60fa      	str	r2, [r7, #12]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dcf4      	bgt.n	80009a6 <main+0x7e>
        ;
    if (timeout < 0)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	da01      	bge.n	80009c6 <main+0x9e>
    {
        Error_Handler();
 80009c2:	f000 fa35 	bl	8000e30 <Error_Handler>
    }

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80009c6:	f000 f9cf 	bl	8000d68 <MX_GPIO_Init>
    MX_BDMA_Init();
 80009ca:	f000 f9ad 	bl	8000d28 <MX_BDMA_Init>
    MX_USART1_UART_Init();
 80009ce:	f000 f95f 	bl	8000c90 <MX_USART1_UART_Init>
    MX_SAI4_Init();
 80009d2:	f000 f8fd 	bl	8000bd0 <MX_SAI4_Init>

    /* Start audio capture using DMA */
    printf("Starting SAI DMA...\r\n");
 80009d6:	4822      	ldr	r0, [pc, #136]	@ (8000a60 <main+0x138>)
 80009d8:	f00a fb42 	bl	800b060 <puts>
    if (HAL_SAI_Receive_DMA(&hsai_BlockA4, (uint8_t *)audio_buffer, BUFFER_SIZE) != HAL_OK)
 80009dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009e0:	491d      	ldr	r1, [pc, #116]	@ (8000a58 <main+0x130>)
 80009e2:	4820      	ldr	r0, [pc, #128]	@ (8000a64 <main+0x13c>)
 80009e4:	f008 f83c 	bl	8008a60 <HAL_SAI_Receive_DMA>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d007      	beq.n	80009fe <main+0xd6>
    {
        printf("SAI DMA initialization failed! Error: %ld\r\n", hsai_BlockA4.ErrorCode);
 80009ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <main+0x13c>)
 80009f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009f4:	4619      	mov	r1, r3
 80009f6:	481c      	ldr	r0, [pc, #112]	@ (8000a68 <main+0x140>)
 80009f8:	f00a faca 	bl	800af90 <iprintf>
 80009fc:	e002      	b.n	8000a04 <main+0xdc>
    }
    else
    {
        printf("SAI DMA started successfully.\r\n");
 80009fe:	481b      	ldr	r0, [pc, #108]	@ (8000a6c <main+0x144>)
 8000a00:	f00a fb2e 	bl	800b060 <puts>
    }

    /* Main application loop */
    while (1)
    {
        printf("Audio Buffer Data:\r\n");
 8000a04:	481a      	ldr	r0, [pc, #104]	@ (8000a70 <main+0x148>)
 8000a06:	f00a fb2b 	bl	800b060 <puts>
        for (int i = 0; i < 10; i++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	e00b      	b.n	8000a28 <main+0x100>
        {
            printf("[%d]: %d\r\n", i, audio_buffer[i]);
 8000a10:	4a11      	ldr	r2, [pc, #68]	@ (8000a58 <main+0x130>)
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68b9      	ldr	r1, [r7, #8]
 8000a1c:	4815      	ldr	r0, [pc, #84]	@ (8000a74 <main+0x14c>)
 8000a1e:	f00a fab7 	bl	800af90 <iprintf>
        for (int i = 0; i < 10; i++)
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2b09      	cmp	r3, #9
 8000a2c:	ddf0      	ble.n	8000a10 <main+0xe8>
        }

        /* Calculate and display sound pressure level */
        float decibel_level = calculate_decibel(audio_buffer, BUFFER_SIZE);
 8000a2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a32:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <main+0x130>)
 8000a34:	f7ff ff00 	bl	8000838 <calculate_decibel>
 8000a38:	ed87 0a01 	vstr	s0, [r7, #4]
        printf("SPL: %.2f dB\r\n", decibel_level);
 8000a3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a44:	ec53 2b17 	vmov	r2, r3, d7
 8000a48:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <main+0x150>)
 8000a4a:	f00a faa1 	bl	800af90 <iprintf>

        /* Wait one second before next update */
        HAL_Delay(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a52:	f000 fca9 	bl	80013a8 <HAL_Delay>
    {
 8000a56:	e7d5      	b.n	8000a04 <main+0xdc>
 8000a58:	24000398 	.word	0x24000398
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	0800ce78 	.word	0x0800ce78
 8000a64:	240001f4 	.word	0x240001f4
 8000a68:	0800ce90 	.word	0x0800ce90
 8000a6c:	0800cebc 	.word	0x0800cebc
 8000a70:	0800cedc 	.word	0x0800cedc
 8000a74:	0800cef0 	.word	0x0800cef0
 8000a78:	0800cefc 	.word	0x0800cefc

08000a7c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09c      	sub	sp, #112	@ 0x70
 8000a80:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	224c      	movs	r2, #76	@ 0x4c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00a faf0 	bl	800b070 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2220      	movs	r2, #32
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00a faea 	bl	800b070 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a9c:	2004      	movs	r0, #4
 8000a9e:	f003 ff27 	bl	80048f0 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b58 <SystemClock_Config+0xdc>)
 8000aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8000b58 <SystemClock_Config+0xdc>)
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ab2:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <SystemClock_Config+0xdc>)
 8000ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	4b27      	ldr	r3, [pc, #156]	@ (8000b5c <SystemClock_Config+0xe0>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ac4:	4a25      	ldr	r2, [pc, #148]	@ (8000b5c <SystemClock_Config+0xe0>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <SystemClock_Config+0xe0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000ad8:	bf00      	nop
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <SystemClock_Config+0xe0>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ae6:	d1f8      	bne.n	8000ada <SystemClock_Config+0x5e>
    {
    }

    /** Macro to configure the PLL clock source
     */
    __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b60 <SystemClock_Config+0xe4>)
 8000aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aec:	4a1c      	ldr	r2, [pc, #112]	@ (8000b60 <SystemClock_Config+0xe4>)
 8000aee:	f023 0303 	bic.w	r3, r3, #3
 8000af2:	6293      	str	r3, [r2, #40]	@ 0x28

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2340      	movs	r3, #64	@ 0x40
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 ff4b 	bl	80049a4 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x9c>
    {
        Error_Handler();
 8000b14:	f000 f98c 	bl	8000e30 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 8000b18:	233f      	movs	r3, #63	@ 0x3f
 8000b1a:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 |
                                  RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b34:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fb8a 	bl	8005258 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xd2>
    {
        Error_Handler();
 8000b4a:	f000 f971 	bl	8000e30 <Error_Handler>
    }
}
 8000b4e:	bf00      	nop
 8000b50:	3770      	adds	r7, #112	@ 0x70
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	58000400 	.word	0x58000400
 8000b5c:	58024800 	.word	0x58024800
 8000b60:	58024400 	.word	0x58024400

08000b64 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0b2      	sub	sp, #200	@ 0xc8
 8000b68:	af00      	add	r7, sp, #0
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	22c8      	movs	r2, #200	@ 0xc8
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00a fa7d 	bl	800b070 <memset>

    /** Initializes the peripherals clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A | RCC_PERIPHCLK_USART1;
 8000b76:	f240 4201 	movw	r2, #1025	@ 0x401
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	e9c7 2300 	strd	r2, r3, [r7]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8000b82:	2304      	movs	r3, #4
 8000b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8000b86:	230a      	movs	r3, #10
 8000b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000b96:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL3;
 8000bac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 feda 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <PeriphCommonClock_Config+0x62>
    {
        Error_Handler();
 8000bc2:	f000 f935 	bl	8000e30 <Error_Handler>
    }
}
 8000bc6:	bf00      	nop
 8000bc8:	37c8      	adds	r7, #200	@ 0xc8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <MX_SAI4_Init>:
 * @brief SAI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI4_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    /* USER CODE END SAI4_Init 0 */

    /* USER CODE BEGIN SAI4_Init 1 */

    /* USER CODE END SAI4_Init 1 */
    hsai_BlockA4.Instance = SAI4_Block_A;
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c88 <MX_SAI4_Init+0xb8>)
 8000bd8:	601a      	str	r2, [r3, #0]
    hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8000bda:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	645a      	str	r2, [r3, #68]	@ 0x44
    hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8000be0:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	605a      	str	r2, [r3, #4]
    hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 8000be6:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	649a      	str	r2, [r3, #72]	@ 0x48
    hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000bec:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000bf2:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
    hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
    hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
    hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
    hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c12:	4a1e      	ldr	r2, [pc, #120]	@ (8000c8c <MX_SAI4_Init+0xbc>)
 8000c14:	621a      	str	r2, [r3, #32]
    hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	631a      	str	r2, [r3, #48]	@ 0x30
    hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c36:	641a      	str	r2, [r3, #64]	@ 0x40
    hsai_BlockA4.FrameInit.FrameLength = 16;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	659a      	str	r2, [r3, #88]	@ 0x58
    hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	669a      	str	r2, [r3, #104]	@ 0x68
    hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	66da      	str	r2, [r3, #108]	@ 0x6c
    hsai_BlockA4.SlotInit.SlotNumber = 1;
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	671a      	str	r2, [r3, #112]	@ 0x70
    hsai_BlockA4.SlotInit.SlotActive = 0x00000000;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	675a      	str	r2, [r3, #116]	@ 0x74
    if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_SAI4_Init+0xb4>)
 8000c70:	f007 fbbc 	bl	80083ec <HAL_SAI_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_SAI4_Init+0xae>
    {
        Error_Handler();
 8000c7a:	f000 f8d9 	bl	8000e30 <Error_Handler>
    }
    /* USER CODE BEGIN SAI4_Init 2 */

    /* USER CODE END SAI4_Init 2 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	240001f4 	.word	0x240001f4
 8000c88:	58005404 	.word	0x58005404
 8000c8c:	0002ee00 	.word	0x0002ee00

08000c90 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000c96:	4a23      	ldr	r2, [pc, #140]	@ (8000d24 <MX_USART1_UART_Init+0x94>)
 8000c98:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cd8:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cda:	f008 fa41 	bl	8009160 <HAL_UART_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART1_UART_Init+0x58>
    {
        Error_Handler();
 8000ce4:	f000 f8a4 	bl	8000e30 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cec:	f009 fa49 	bl	800a182 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART1_UART_Init+0x6a>
    {
        Error_Handler();
 8000cf6:	f000 f89b 	bl	8000e30 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cfe:	f009 fa7e 	bl	800a1fe <HAL_UARTEx_SetRxFifoThreshold>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART1_UART_Init+0x7c>
    {
        Error_Handler();
 8000d08:	f000 f892 	bl	8000e30 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000d0e:	f009 f9ff 	bl	800a110 <HAL_UARTEx_DisableFifoMode>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART1_UART_Init+0x8c>
    {
        Error_Handler();
 8000d18:	f000 f88a 	bl	8000e30 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000304 	.word	0x24000304
 8000d24:	40011000 	.word	0x40011000

08000d28 <MX_BDMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_BDMA_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_BDMA_CLK_ENABLE();
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <MX_BDMA_Init+0x3c>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	4a0b      	ldr	r2, [pc, #44]	@ (8000d64 <MX_BDMA_Init+0x3c>)
 8000d36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_BDMA_Init+0x3c>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* BDMA_Channel0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2081      	movs	r0, #129	@ 0x81
 8000d52:	f000 fc34 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000d56:	2081      	movs	r0, #129	@ 0x81
 8000d58:	f000 fc4b 	bl	80015f2 <HAL_NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	58024400 	.word	0x58024400

08000d68 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <MX_GPIO_Init+0x6c>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d74:	4a17      	ldr	r2, [pc, #92]	@ (8000dd4 <MX_GPIO_Init+0x6c>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <MX_GPIO_Init+0x6c>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <MX_GPIO_Init+0x6c>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d92:	4a10      	ldr	r2, [pc, #64]	@ (8000dd4 <MX_GPIO_Init+0x6c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <MX_GPIO_Init+0x6c>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <MX_GPIO_Init+0x6c>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db0:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <MX_GPIO_Init+0x6c>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <MX_GPIO_Init+0x6c>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	58024400 	.word	0x58024400

08000dd8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 8000dea:	f000 fc1d 	bl	8001628 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000dfa:	231f      	movs	r3, #31
 8000dfc:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 8000dfe:	2387      	movs	r3, #135	@ 0x87
 8000e00:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e06:	2300      	movs	r3, #0
 8000e08:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fc3b 	bl	8001698 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e22:	2004      	movs	r0, #4
 8000e24:	f000 fc18 	bl	8001658 <HAL_MPU_Enable>
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <Error_Handler+0x8>

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_MspInit+0x30>)
 8000e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e48:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_MspInit+0x30>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_MspInit+0x30>)
 8000e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	58024400 	.word	0x58024400

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12e      	bne.n	8000ef0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e92:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <HAL_UART_MspInit+0x8c>)
 8000e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e98:	4a18      	ldr	r2, [pc, #96]	@ (8000efc <HAL_UART_MspInit+0x8c>)
 8000e9a:	f043 0310 	orr.w	r3, r3, #16
 8000e9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <HAL_UART_MspInit+0x8c>)
 8000ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ea8:	f003 0310 	and.w	r3, r3, #16
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_UART_MspInit+0x8c>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb6:	4a11      	ldr	r2, [pc, #68]	@ (8000efc <HAL_UART_MspInit+0x8c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_UART_MspInit+0x8c>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000ece:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <HAL_UART_MspInit+0x90>)
 8000eec:	f003 fb22 	bl	8004534 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	@ 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020000 	.word	0x58020000

08000f04 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai4_a;

static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	@ 0x30
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a49      	ldr	r2, [pc, #292]	@ (8001038 <HAL_SAI_MspInit+0x134>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	f040 808b 	bne.w	800102e <HAL_SAI_MspInit+0x12a>
    {
    /* Peripheral clock enable */
    if (SAI4_client == 0)
 8000f18:	4b48      	ldr	r3, [pc, #288]	@ (800103c <HAL_SAI_MspInit+0x138>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d116      	bne.n	8000f4e <HAL_SAI_MspInit+0x4a>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8000f20:	4b47      	ldr	r3, [pc, #284]	@ (8001040 <HAL_SAI_MspInit+0x13c>)
 8000f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f26:	4a46      	ldr	r2, [pc, #280]	@ (8001040 <HAL_SAI_MspInit+0x13c>)
 8000f28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f30:	4b43      	ldr	r3, [pc, #268]	@ (8001040 <HAL_SAI_MspInit+0x13c>)
 8000f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI4_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2092      	movs	r0, #146	@ 0x92
 8000f44:	f000 fb3b 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI4_IRQn);
 8000f48:	2092      	movs	r0, #146	@ 0x92
 8000f4a:	f000 fb52 	bl	80015f2 <HAL_NVIC_EnableIRQ>
    }
    SAI4_client ++;
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800103c <HAL_SAI_MspInit+0x138>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	4a39      	ldr	r2, [pc, #228]	@ (800103c <HAL_SAI_MspInit+0x138>)
 8000f56:	6013      	str	r3, [r2, #0]

    /**SAI4_A_Block_A GPIO Configuration
    PE2     ------> SAI4_CK1
    PC1     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000f68:	230a      	movs	r3, #10
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4834      	ldr	r0, [pc, #208]	@ (8001044 <HAL_SAI_MspInit+0x140>)
 8000f74:	f003 fade 	bl	8004534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000f88:	230a      	movs	r3, #10
 8000f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	482d      	ldr	r0, [pc, #180]	@ (8001048 <HAL_SAI_MspInit+0x144>)
 8000f94:	f003 face 	bl	8004534 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8000f98:	4b2c      	ldr	r3, [pc, #176]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8000f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001050 <HAL_SAI_MspInit+0x14c>)
 8000f9c:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000faa:	4b28      	ldr	r3, [pc, #160]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8000fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fb6:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fb8:	4b24      	ldr	r3, [pc, #144]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8000fba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fbe:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc0:	4b22      	ldr	r3, [pc, #136]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8000fc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc6:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8000fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fce:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8000fd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8000fd8:	481c      	ldr	r0, [pc, #112]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8000fda:	f000 fb9d 	bl	8001718 <HAL_DMA_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8000fe4:	f7ff ff24 	bl	8000e30 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8000fe8:	230e      	movs	r3, #14
 8000fea:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = ENABLE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4619      	mov	r1, r3
 8001002:	4812      	ldr	r0, [pc, #72]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8001004:	f003 f9d0 	bl	80043a8 <HAL_DMAEx_ConfigMuxSync>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_SAI_MspInit+0x10e>
    {
      Error_Handler();
 800100e:	f7ff ff0f 	bl	8000e30 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8001016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800101a:	4a0c      	ldr	r2, [pc, #48]	@ (800104c <HAL_SAI_MspInit+0x148>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <HAL_SAI_MspInit+0x148>)
 8001024:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001028:	4a08      	ldr	r2, [pc, #32]	@ (800104c <HAL_SAI_MspInit+0x148>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6393      	str	r3, [r2, #56]	@ 0x38

    }
}
 800102e:	bf00      	nop
 8001030:	3730      	adds	r7, #48	@ 0x30
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	58005404 	.word	0x58005404
 800103c:	24000b98 	.word	0x24000b98
 8001040:	58024400 	.word	0x58024400
 8001044:	58021000 	.word	0x58021000
 8001048:	58020800 	.word	0x58020800
 800104c:	2400028c 	.word	0x2400028c
 8001050:	58025408 	.word	0x58025408

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <NMI_Handler+0x4>

0800105c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <MemManage_Handler+0x4>

0800106c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <UsageFault_Handler+0x4>

0800107c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010aa:	f000 f95d 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <BDMA_Channel0_IRQHandler+0x10>)
 80010ba:	f001 fe57 	bl	8002d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2400028c 	.word	0x2400028c

080010c8 <SAI4_IRQHandler>:

/**
  * @brief This function handles SAI4 global interrupt.
  */
void SAI4_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI4_IRQn 0 */
	HAL_SAI_IRQHandler(&hsai_BlockA4);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <SAI4_IRQHandler+0x10>)
 80010ce:	f007 fd5b 	bl	8008b88 <HAL_SAI_IRQHandler>
  /* USER CODE END SAI4_IRQn 0 */

  /* USER CODE BEGIN SAI4_IRQn 1 */

  /* USER CODE END SAI4_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	240001f4 	.word	0x240001f4

080010dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return 1;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_kill>:

int _kill(int pid, int sig)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010f6:	f009 ffc3 	bl	800b080 <__errno>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2216      	movs	r2, #22
 80010fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <_exit>:

void _exit (int status)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001114:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ffe7 	bl	80010ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800111e:	bf00      	nop
 8001120:	e7fd      	b.n	800111e <_exit+0x12>

08001122 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e00a      	b.n	800114a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001134:	f3af 8000 	nop.w
 8001138:	4601      	mov	r1, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	60ba      	str	r2, [r7, #8]
 8001140:	b2ca      	uxtb	r2, r1
 8001142:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	dbf0      	blt.n	8001134 <_read+0x12>
  }

  return len;
 8001152:	687b      	ldr	r3, [r7, #4]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <_close>:
  }
  return len;
}

int _close(int file)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001184:	605a      	str	r2, [r3, #4]
  return 0;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_isatty>:

int _isatty(int file)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b085      	sub	sp, #20
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	@ (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f009 ff44 	bl	800b080 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24080000 	.word	0x24080000
 8001224:	00000400 	.word	0x00000400
 8001228:	24000b9c 	.word	0x24000b9c
 800122c:	24000cf0 	.word	0x24000cf0

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001268 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001234:	f7ff fa42 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123a:	490d      	ldr	r1, [pc, #52]	@ (8001270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800123c:	4a0d      	ldr	r2, [pc, #52]	@ (8001274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001250:	4c0a      	ldr	r4, [pc, #40]	@ (800127c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125e:	f009 ff15 	bl	800b08c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fb61 	bl	8000928 <main>
  bx  lr
 8001266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800126c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001270:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001274:	0800d3f4 	.word	0x0800d3f4
  ldr r2, =_sbss
 8001278:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800127c:	24000cf0 	.word	0x24000cf0

08001280 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC3_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128a:	2003      	movs	r0, #3
 800128c:	f000 f98c 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001290:	f004 f998 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 8001294:	4602      	mov	r2, r0
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_Init+0x68>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	4913      	ldr	r1, [pc, #76]	@ (80012f0 <HAL_Init+0x6c>)
 80012a2:	5ccb      	ldrb	r3, [r1, r3]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <HAL_Init+0x68>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <HAL_Init+0x6c>)
 80012b8:	5cd3      	ldrb	r3, [r2, r3]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <HAL_Init+0x70>)
 80012c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012c8:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <HAL_Init+0x74>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ce:	200f      	movs	r0, #15
 80012d0:	f000 f814 	bl	80012fc <HAL_InitTick>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e002      	b.n	80012e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012de:	f7ff fdad 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	58024400 	.word	0x58024400
 80012f0:	0800cf0c 	.word	0x0800cf0c
 80012f4:	24000004 	.word	0x24000004
 80012f8:	24000000 	.word	0x24000000

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_InitTick+0x60>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e021      	b.n	8001354 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <HAL_InitTick+0x64>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <HAL_InitTick+0x60>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f971 	bl	800160e <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00e      	b.n	8001354 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d80a      	bhi.n	8001352 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001344:	f000 f93b 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001348:	4a06      	ldr	r2, [pc, #24]	@ (8001364 <HAL_InitTick+0x68>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2400000c 	.word	0x2400000c
 8001360:	24000000 	.word	0x24000000
 8001364:	24000008 	.word	0x24000008

08001368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	@ (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	2400000c 	.word	0x2400000c
 800138c:	24000ba0 	.word	0x24000ba0

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	24000ba0 	.word	0x24000ba0

080013a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff ffee 	bl	8001390 <HAL_GetTick>
 80013b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013c0:	d005      	beq.n	80013ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_Delay+0x44>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ce:	bf00      	nop
 80013d0:	f7ff ffde 	bl	8001390 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d8f7      	bhi.n	80013d0 <HAL_Delay+0x28>
  {
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2400000c 	.word	0x2400000c

080013f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <HAL_GetREVID+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	0c1b      	lsrs	r3, r3, #16
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	5c001000 	.word	0x5c001000

08001408 <__NVIC_SetPriorityGrouping>:
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <__NVIC_SetPriorityGrouping+0x40>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	4313      	orrs	r3, r2
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <__NVIC_SetPriorityGrouping+0x40>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00
 800144c:	05fa0000 	.word	0x05fa0000

08001450 <__NVIC_GetPriorityGrouping>:
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	@ (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	@ (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	@ (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	@ 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff29 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff40 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff90 	bl	80014fc <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5f 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff33 	bl	800146c <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa4 	bl	8001564 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800162c:	f3bf 8f5f 	dmb	sy
}
 8001630:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <HAL_MPU_Disable+0x28>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	4a06      	ldr	r2, [pc, #24]	@ (8001650 <HAL_MPU_Disable+0x28>)
 8001638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800163c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_MPU_Disable+0x2c>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	e000ed90 	.word	0xe000ed90

08001658 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001660:	4a0b      	ldr	r2, [pc, #44]	@ (8001690 <HAL_MPU_Enable+0x38>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800166a:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <HAL_MPU_Enable+0x3c>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <HAL_MPU_Enable+0x3c>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001674:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001676:	f3bf 8f4f 	dsb	sy
}
 800167a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800167c:	f3bf 8f6f 	isb	sy
}
 8001680:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed90 	.word	0xe000ed90
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	785a      	ldrb	r2, [r3, #1]
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_MPU_ConfigRegion+0x7c>)
 80016a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <HAL_MPU_ConfigRegion+0x7c>)
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	4a19      	ldr	r2, [pc, #100]	@ (8001714 <HAL_MPU_ConfigRegion+0x7c>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80016b4:	4a17      	ldr	r2, [pc, #92]	@ (8001714 <HAL_MPU_ConfigRegion+0x7c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7b1b      	ldrb	r3, [r3, #12]
 80016c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7adb      	ldrb	r3, [r3, #11]
 80016c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7a9b      	ldrb	r3, [r3, #10]
 80016ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7b5b      	ldrb	r3, [r3, #13]
 80016d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7b9b      	ldrb	r3, [r3, #14]
 80016de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7bdb      	ldrb	r3, [r3, #15]
 80016e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7a5b      	ldrb	r3, [r3, #9]
 80016ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7a1b      	ldrb	r3, [r3, #8]
 80016f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001700:	4a04      	ldr	r2, [pc, #16]	@ (8001714 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001702:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001704:	6113      	str	r3, [r2, #16]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed90 	.word	0xe000ed90

08001718 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff fe36 	bl	8001390 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e316      	b.n	8001d5e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a66      	ldr	r2, [pc, #408]	@ (80018d0 <HAL_DMA_Init+0x1b8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d04a      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a65      	ldr	r2, [pc, #404]	@ (80018d4 <HAL_DMA_Init+0x1bc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d045      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a63      	ldr	r2, [pc, #396]	@ (80018d8 <HAL_DMA_Init+0x1c0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d040      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a62      	ldr	r2, [pc, #392]	@ (80018dc <HAL_DMA_Init+0x1c4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d03b      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a60      	ldr	r2, [pc, #384]	@ (80018e0 <HAL_DMA_Init+0x1c8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d036      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a5f      	ldr	r2, [pc, #380]	@ (80018e4 <HAL_DMA_Init+0x1cc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d031      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a5d      	ldr	r2, [pc, #372]	@ (80018e8 <HAL_DMA_Init+0x1d0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d02c      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a5c      	ldr	r2, [pc, #368]	@ (80018ec <HAL_DMA_Init+0x1d4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d027      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a5a      	ldr	r2, [pc, #360]	@ (80018f0 <HAL_DMA_Init+0x1d8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d022      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a59      	ldr	r2, [pc, #356]	@ (80018f4 <HAL_DMA_Init+0x1dc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d01d      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a57      	ldr	r2, [pc, #348]	@ (80018f8 <HAL_DMA_Init+0x1e0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d018      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a56      	ldr	r2, [pc, #344]	@ (80018fc <HAL_DMA_Init+0x1e4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d013      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a54      	ldr	r2, [pc, #336]	@ (8001900 <HAL_DMA_Init+0x1e8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00e      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a53      	ldr	r2, [pc, #332]	@ (8001904 <HAL_DMA_Init+0x1ec>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d009      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a51      	ldr	r2, [pc, #324]	@ (8001908 <HAL_DMA_Init+0x1f0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d004      	beq.n	80017d0 <HAL_DMA_Init+0xb8>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a50      	ldr	r2, [pc, #320]	@ (800190c <HAL_DMA_Init+0x1f4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_DMA_Init+0xbc>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_DMA_Init+0xbe>
 80017d4:	2300      	movs	r3, #0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 813b 	beq.w	8001a52 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a37      	ldr	r2, [pc, #220]	@ (80018d0 <HAL_DMA_Init+0x1b8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d04a      	beq.n	800188c <HAL_DMA_Init+0x174>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a36      	ldr	r2, [pc, #216]	@ (80018d4 <HAL_DMA_Init+0x1bc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d045      	beq.n	800188c <HAL_DMA_Init+0x174>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a34      	ldr	r2, [pc, #208]	@ (80018d8 <HAL_DMA_Init+0x1c0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d040      	beq.n	800188c <HAL_DMA_Init+0x174>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a33      	ldr	r2, [pc, #204]	@ (80018dc <HAL_DMA_Init+0x1c4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d03b      	beq.n	800188c <HAL_DMA_Init+0x174>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a31      	ldr	r2, [pc, #196]	@ (80018e0 <HAL_DMA_Init+0x1c8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d036      	beq.n	800188c <HAL_DMA_Init+0x174>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a30      	ldr	r2, [pc, #192]	@ (80018e4 <HAL_DMA_Init+0x1cc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d031      	beq.n	800188c <HAL_DMA_Init+0x174>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a2e      	ldr	r2, [pc, #184]	@ (80018e8 <HAL_DMA_Init+0x1d0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d02c      	beq.n	800188c <HAL_DMA_Init+0x174>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a2d      	ldr	r2, [pc, #180]	@ (80018ec <HAL_DMA_Init+0x1d4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d027      	beq.n	800188c <HAL_DMA_Init+0x174>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2b      	ldr	r2, [pc, #172]	@ (80018f0 <HAL_DMA_Init+0x1d8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d022      	beq.n	800188c <HAL_DMA_Init+0x174>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2a      	ldr	r2, [pc, #168]	@ (80018f4 <HAL_DMA_Init+0x1dc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d01d      	beq.n	800188c <HAL_DMA_Init+0x174>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a28      	ldr	r2, [pc, #160]	@ (80018f8 <HAL_DMA_Init+0x1e0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d018      	beq.n	800188c <HAL_DMA_Init+0x174>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a27      	ldr	r2, [pc, #156]	@ (80018fc <HAL_DMA_Init+0x1e4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d013      	beq.n	800188c <HAL_DMA_Init+0x174>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a25      	ldr	r2, [pc, #148]	@ (8001900 <HAL_DMA_Init+0x1e8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00e      	beq.n	800188c <HAL_DMA_Init+0x174>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a24      	ldr	r2, [pc, #144]	@ (8001904 <HAL_DMA_Init+0x1ec>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d009      	beq.n	800188c <HAL_DMA_Init+0x174>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a22      	ldr	r2, [pc, #136]	@ (8001908 <HAL_DMA_Init+0x1f0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d004      	beq.n	800188c <HAL_DMA_Init+0x174>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a21      	ldr	r2, [pc, #132]	@ (800190c <HAL_DMA_Init+0x1f4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d108      	bne.n	800189e <HAL_DMA_Init+0x186>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e007      	b.n	80018ae <HAL_DMA_Init+0x196>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018ae:	e02f      	b.n	8001910 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018b0:	f7ff fd6e 	bl	8001390 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d928      	bls.n	8001910 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2220      	movs	r2, #32
 80018c2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e246      	b.n	8001d5e <HAL_DMA_Init+0x646>
 80018d0:	40020010 	.word	0x40020010
 80018d4:	40020028 	.word	0x40020028
 80018d8:	40020040 	.word	0x40020040
 80018dc:	40020058 	.word	0x40020058
 80018e0:	40020070 	.word	0x40020070
 80018e4:	40020088 	.word	0x40020088
 80018e8:	400200a0 	.word	0x400200a0
 80018ec:	400200b8 	.word	0x400200b8
 80018f0:	40020410 	.word	0x40020410
 80018f4:	40020428 	.word	0x40020428
 80018f8:	40020440 	.word	0x40020440
 80018fc:	40020458 	.word	0x40020458
 8001900:	40020470 	.word	0x40020470
 8001904:	40020488 	.word	0x40020488
 8001908:	400204a0 	.word	0x400204a0
 800190c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1c8      	bne.n	80018b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4b83      	ldr	r3, [pc, #524]	@ (8001b38 <HAL_DMA_Init+0x420>)
 800192a:	4013      	ands	r3, r2
 800192c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001936:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001942:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	2b04      	cmp	r3, #4
 8001962:	d107      	bne.n	8001974 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	4313      	orrs	r3, r2
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001974:	4b71      	ldr	r3, [pc, #452]	@ (8001b3c <HAL_DMA_Init+0x424>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b71      	ldr	r3, [pc, #452]	@ (8001b40 <HAL_DMA_Init+0x428>)
 800197a:	4013      	ands	r3, r2
 800197c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001980:	d328      	bcc.n	80019d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b28      	cmp	r3, #40	@ 0x28
 8001988:	d903      	bls.n	8001992 <HAL_DMA_Init+0x27a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001990:	d917      	bls.n	80019c2 <HAL_DMA_Init+0x2aa>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b3e      	cmp	r3, #62	@ 0x3e
 8001998:	d903      	bls.n	80019a2 <HAL_DMA_Init+0x28a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b42      	cmp	r3, #66	@ 0x42
 80019a0:	d90f      	bls.n	80019c2 <HAL_DMA_Init+0x2aa>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b46      	cmp	r3, #70	@ 0x46
 80019a8:	d903      	bls.n	80019b2 <HAL_DMA_Init+0x29a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b48      	cmp	r3, #72	@ 0x48
 80019b0:	d907      	bls.n	80019c2 <HAL_DMA_Init+0x2aa>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b4e      	cmp	r3, #78	@ 0x4e
 80019b8:	d905      	bls.n	80019c6 <HAL_DMA_Init+0x2ae>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b52      	cmp	r3, #82	@ 0x52
 80019c0:	d801      	bhi.n	80019c6 <HAL_DMA_Init+0x2ae>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_DMA_Init+0x2b0>
 80019c6:	2300      	movs	r3, #0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f023 0307 	bic.w	r3, r3, #7
 80019ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d117      	bne.n	8001a2e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00e      	beq.n	8001a2e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f002 fb3f 	bl	8004094 <DMA_CheckFifoParam>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2240      	movs	r2, #64	@ 0x40
 8001a20:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e197      	b.n	8001d5e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f002 fa7a 	bl	8003f30 <DMA_CalcBaseAndBitshift>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	223f      	movs	r2, #63	@ 0x3f
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	e0cd      	b.n	8001bee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a3b      	ldr	r2, [pc, #236]	@ (8001b44 <HAL_DMA_Init+0x42c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d022      	beq.n	8001aa2 <HAL_DMA_Init+0x38a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a39      	ldr	r2, [pc, #228]	@ (8001b48 <HAL_DMA_Init+0x430>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01d      	beq.n	8001aa2 <HAL_DMA_Init+0x38a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a38      	ldr	r2, [pc, #224]	@ (8001b4c <HAL_DMA_Init+0x434>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d018      	beq.n	8001aa2 <HAL_DMA_Init+0x38a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a36      	ldr	r2, [pc, #216]	@ (8001b50 <HAL_DMA_Init+0x438>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_DMA_Init+0x38a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a35      	ldr	r2, [pc, #212]	@ (8001b54 <HAL_DMA_Init+0x43c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00e      	beq.n	8001aa2 <HAL_DMA_Init+0x38a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a33      	ldr	r2, [pc, #204]	@ (8001b58 <HAL_DMA_Init+0x440>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d009      	beq.n	8001aa2 <HAL_DMA_Init+0x38a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a32      	ldr	r2, [pc, #200]	@ (8001b5c <HAL_DMA_Init+0x444>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d004      	beq.n	8001aa2 <HAL_DMA_Init+0x38a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a30      	ldr	r2, [pc, #192]	@ (8001b60 <HAL_DMA_Init+0x448>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_DMA_Init+0x38e>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_DMA_Init+0x390>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 8097 	beq.w	8001bdc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a24      	ldr	r2, [pc, #144]	@ (8001b44 <HAL_DMA_Init+0x42c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d021      	beq.n	8001afc <HAL_DMA_Init+0x3e4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a22      	ldr	r2, [pc, #136]	@ (8001b48 <HAL_DMA_Init+0x430>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d01c      	beq.n	8001afc <HAL_DMA_Init+0x3e4>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a21      	ldr	r2, [pc, #132]	@ (8001b4c <HAL_DMA_Init+0x434>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d017      	beq.n	8001afc <HAL_DMA_Init+0x3e4>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b50 <HAL_DMA_Init+0x438>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d012      	beq.n	8001afc <HAL_DMA_Init+0x3e4>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1e      	ldr	r2, [pc, #120]	@ (8001b54 <HAL_DMA_Init+0x43c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00d      	beq.n	8001afc <HAL_DMA_Init+0x3e4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b58 <HAL_DMA_Init+0x440>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d008      	beq.n	8001afc <HAL_DMA_Init+0x3e4>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1b      	ldr	r2, [pc, #108]	@ (8001b5c <HAL_DMA_Init+0x444>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d003      	beq.n	8001afc <HAL_DMA_Init+0x3e4>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <HAL_DMA_Init+0x448>)
 8001afa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <HAL_DMA_Init+0x44c>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b40      	cmp	r3, #64	@ 0x40
 8001b22:	d021      	beq.n	8001b68 <HAL_DMA_Init+0x450>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b80      	cmp	r3, #128	@ 0x80
 8001b2a:	d102      	bne.n	8001b32 <HAL_DMA_Init+0x41a>
 8001b2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b30:	e01b      	b.n	8001b6a <HAL_DMA_Init+0x452>
 8001b32:	2300      	movs	r3, #0
 8001b34:	e019      	b.n	8001b6a <HAL_DMA_Init+0x452>
 8001b36:	bf00      	nop
 8001b38:	fe10803f 	.word	0xfe10803f
 8001b3c:	5c001000 	.word	0x5c001000
 8001b40:	ffff0000 	.word	0xffff0000
 8001b44:	58025408 	.word	0x58025408
 8001b48:	5802541c 	.word	0x5802541c
 8001b4c:	58025430 	.word	0x58025430
 8001b50:	58025444 	.word	0x58025444
 8001b54:	58025458 	.word	0x58025458
 8001b58:	5802546c 	.word	0x5802546c
 8001b5c:	58025480 	.word	0x58025480
 8001b60:	58025494 	.word	0x58025494
 8001b64:	fffe000f 	.word	0xfffe000f
 8001b68:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68d2      	ldr	r2, [r2, #12]
 8001b6e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b98:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b6e      	ldr	r3, [pc, #440]	@ (8001d68 <HAL_DMA_Init+0x650>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	@ (8001d6c <HAL_DMA_Init+0x654>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	009a      	lsls	r2, r3, #2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f002 f9b5 	bl	8003f30 <DMA_CalcBaseAndBitshift>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	e008      	b.n	8001bee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2240      	movs	r2, #64	@ 0x40
 8001be0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2203      	movs	r2, #3
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0b7      	b.n	8001d5e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d70 <HAL_DMA_Init+0x658>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d072      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d74 <HAL_DMA_Init+0x65c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d06d      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a5c      	ldr	r2, [pc, #368]	@ (8001d78 <HAL_DMA_Init+0x660>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d068      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5a      	ldr	r2, [pc, #360]	@ (8001d7c <HAL_DMA_Init+0x664>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d063      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a59      	ldr	r2, [pc, #356]	@ (8001d80 <HAL_DMA_Init+0x668>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d05e      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a57      	ldr	r2, [pc, #348]	@ (8001d84 <HAL_DMA_Init+0x66c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d059      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a56      	ldr	r2, [pc, #344]	@ (8001d88 <HAL_DMA_Init+0x670>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d054      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a54      	ldr	r2, [pc, #336]	@ (8001d8c <HAL_DMA_Init+0x674>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d04f      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a53      	ldr	r2, [pc, #332]	@ (8001d90 <HAL_DMA_Init+0x678>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d04a      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a51      	ldr	r2, [pc, #324]	@ (8001d94 <HAL_DMA_Init+0x67c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d045      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a50      	ldr	r2, [pc, #320]	@ (8001d98 <HAL_DMA_Init+0x680>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d040      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a4e      	ldr	r2, [pc, #312]	@ (8001d9c <HAL_DMA_Init+0x684>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d03b      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8001da0 <HAL_DMA_Init+0x688>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d036      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a4b      	ldr	r2, [pc, #300]	@ (8001da4 <HAL_DMA_Init+0x68c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d031      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8001da8 <HAL_DMA_Init+0x690>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d02c      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a48      	ldr	r2, [pc, #288]	@ (8001dac <HAL_DMA_Init+0x694>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d027      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a47      	ldr	r2, [pc, #284]	@ (8001db0 <HAL_DMA_Init+0x698>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d022      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a45      	ldr	r2, [pc, #276]	@ (8001db4 <HAL_DMA_Init+0x69c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01d      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a44      	ldr	r2, [pc, #272]	@ (8001db8 <HAL_DMA_Init+0x6a0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d018      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a42      	ldr	r2, [pc, #264]	@ (8001dbc <HAL_DMA_Init+0x6a4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a41      	ldr	r2, [pc, #260]	@ (8001dc0 <HAL_DMA_Init+0x6a8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00e      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8001dc4 <HAL_DMA_Init+0x6ac>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d009      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc8 <HAL_DMA_Init+0x6b0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d004      	beq.n	8001cde <HAL_DMA_Init+0x5c6>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8001dcc <HAL_DMA_Init+0x6b4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_DMA_Init+0x5ca>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_DMA_Init+0x5cc>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d032      	beq.n	8001d4e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f002 fa4f 	bl	800418c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b80      	cmp	r3, #128	@ 0x80
 8001cf4:	d102      	bne.n	8001cfc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d010      	beq.n	8001d3c <HAL_DMA_Init+0x624>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d80c      	bhi.n	8001d3c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f002 facc 	bl	80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	e008      	b.n	8001d4e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	a7fdabf8 	.word	0xa7fdabf8
 8001d6c:	cccccccd 	.word	0xcccccccd
 8001d70:	40020010 	.word	0x40020010
 8001d74:	40020028 	.word	0x40020028
 8001d78:	40020040 	.word	0x40020040
 8001d7c:	40020058 	.word	0x40020058
 8001d80:	40020070 	.word	0x40020070
 8001d84:	40020088 	.word	0x40020088
 8001d88:	400200a0 	.word	0x400200a0
 8001d8c:	400200b8 	.word	0x400200b8
 8001d90:	40020410 	.word	0x40020410
 8001d94:	40020428 	.word	0x40020428
 8001d98:	40020440 	.word	0x40020440
 8001d9c:	40020458 	.word	0x40020458
 8001da0:	40020470 	.word	0x40020470
 8001da4:	40020488 	.word	0x40020488
 8001da8:	400204a0 	.word	0x400204a0
 8001dac:	400204b8 	.word	0x400204b8
 8001db0:	58025408 	.word	0x58025408
 8001db4:	5802541c 	.word	0x5802541c
 8001db8:	58025430 	.word	0x58025430
 8001dbc:	58025444 	.word	0x58025444
 8001dc0:	58025458 	.word	0x58025458
 8001dc4:	5802546c 	.word	0x5802546c
 8001dc8:	58025480 	.word	0x58025480
 8001dcc:	58025494 	.word	0x58025494

08001dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e226      	b.n	800223a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_DMA_Start_IT+0x2a>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e21f      	b.n	800223a <HAL_DMA_Start_IT+0x46a>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	f040 820a 	bne.w	8002224 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a68      	ldr	r2, [pc, #416]	@ (8001fc4 <HAL_DMA_Start_IT+0x1f4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d04a      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a66      	ldr	r2, [pc, #408]	@ (8001fc8 <HAL_DMA_Start_IT+0x1f8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d045      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a65      	ldr	r2, [pc, #404]	@ (8001fcc <HAL_DMA_Start_IT+0x1fc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d040      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a63      	ldr	r2, [pc, #396]	@ (8001fd0 <HAL_DMA_Start_IT+0x200>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d03b      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a62      	ldr	r2, [pc, #392]	@ (8001fd4 <HAL_DMA_Start_IT+0x204>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d036      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a60      	ldr	r2, [pc, #384]	@ (8001fd8 <HAL_DMA_Start_IT+0x208>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d031      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a5f      	ldr	r2, [pc, #380]	@ (8001fdc <HAL_DMA_Start_IT+0x20c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d02c      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe0 <HAL_DMA_Start_IT+0x210>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d027      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a5c      	ldr	r2, [pc, #368]	@ (8001fe4 <HAL_DMA_Start_IT+0x214>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d022      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001fe8 <HAL_DMA_Start_IT+0x218>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01d      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a59      	ldr	r2, [pc, #356]	@ (8001fec <HAL_DMA_Start_IT+0x21c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d018      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a57      	ldr	r2, [pc, #348]	@ (8001ff0 <HAL_DMA_Start_IT+0x220>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a56      	ldr	r2, [pc, #344]	@ (8001ff4 <HAL_DMA_Start_IT+0x224>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00e      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a54      	ldr	r2, [pc, #336]	@ (8001ff8 <HAL_DMA_Start_IT+0x228>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d009      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a53      	ldr	r2, [pc, #332]	@ (8001ffc <HAL_DMA_Start_IT+0x22c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d004      	beq.n	8001ebe <HAL_DMA_Start_IT+0xee>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a51      	ldr	r2, [pc, #324]	@ (8002000 <HAL_DMA_Start_IT+0x230>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d108      	bne.n	8001ed0 <HAL_DMA_Start_IT+0x100>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e007      	b.n	8001ee0 <HAL_DMA_Start_IT+0x110>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f001 fe76 	bl	8003bd8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a34      	ldr	r2, [pc, #208]	@ (8001fc4 <HAL_DMA_Start_IT+0x1f4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d04a      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a33      	ldr	r2, [pc, #204]	@ (8001fc8 <HAL_DMA_Start_IT+0x1f8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d045      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a31      	ldr	r2, [pc, #196]	@ (8001fcc <HAL_DMA_Start_IT+0x1fc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d040      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a30      	ldr	r2, [pc, #192]	@ (8001fd0 <HAL_DMA_Start_IT+0x200>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d03b      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd4 <HAL_DMA_Start_IT+0x204>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d036      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <HAL_DMA_Start_IT+0x208>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d031      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fdc <HAL_DMA_Start_IT+0x20c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d02c      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe0 <HAL_DMA_Start_IT+0x210>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d027      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a28      	ldr	r2, [pc, #160]	@ (8001fe4 <HAL_DMA_Start_IT+0x214>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d022      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a27      	ldr	r2, [pc, #156]	@ (8001fe8 <HAL_DMA_Start_IT+0x218>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01d      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a25      	ldr	r2, [pc, #148]	@ (8001fec <HAL_DMA_Start_IT+0x21c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d018      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a24      	ldr	r2, [pc, #144]	@ (8001ff0 <HAL_DMA_Start_IT+0x220>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d013      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a22      	ldr	r2, [pc, #136]	@ (8001ff4 <HAL_DMA_Start_IT+0x224>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00e      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a21      	ldr	r2, [pc, #132]	@ (8001ff8 <HAL_DMA_Start_IT+0x228>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ffc <HAL_DMA_Start_IT+0x22c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d004      	beq.n	8001f8c <HAL_DMA_Start_IT+0x1bc>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1e      	ldr	r2, [pc, #120]	@ (8002000 <HAL_DMA_Start_IT+0x230>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Start_IT+0x1c0>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_DMA_Start_IT+0x1c2>
 8001f90:	2300      	movs	r3, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d036      	beq.n	8002004 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 021e 	bic.w	r2, r3, #30
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0216 	orr.w	r2, r2, #22
 8001fa8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d03e      	beq.n	8002030 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0208 	orr.w	r2, r2, #8
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e035      	b.n	8002030 <HAL_DMA_Start_IT+0x260>
 8001fc4:	40020010 	.word	0x40020010
 8001fc8:	40020028 	.word	0x40020028
 8001fcc:	40020040 	.word	0x40020040
 8001fd0:	40020058 	.word	0x40020058
 8001fd4:	40020070 	.word	0x40020070
 8001fd8:	40020088 	.word	0x40020088
 8001fdc:	400200a0 	.word	0x400200a0
 8001fe0:	400200b8 	.word	0x400200b8
 8001fe4:	40020410 	.word	0x40020410
 8001fe8:	40020428 	.word	0x40020428
 8001fec:	40020440 	.word	0x40020440
 8001ff0:	40020458 	.word	0x40020458
 8001ff4:	40020470 	.word	0x40020470
 8001ff8:	40020488 	.word	0x40020488
 8001ffc:	400204a0 	.word	0x400204a0
 8002000:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 020e 	bic.w	r2, r3, #14
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 020a 	orr.w	r2, r2, #10
 8002016:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0204 	orr.w	r2, r2, #4
 800202e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a83      	ldr	r2, [pc, #524]	@ (8002244 <HAL_DMA_Start_IT+0x474>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d072      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a82      	ldr	r2, [pc, #520]	@ (8002248 <HAL_DMA_Start_IT+0x478>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d06d      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a80      	ldr	r2, [pc, #512]	@ (800224c <HAL_DMA_Start_IT+0x47c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d068      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7f      	ldr	r2, [pc, #508]	@ (8002250 <HAL_DMA_Start_IT+0x480>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d063      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a7d      	ldr	r2, [pc, #500]	@ (8002254 <HAL_DMA_Start_IT+0x484>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d05e      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7c      	ldr	r2, [pc, #496]	@ (8002258 <HAL_DMA_Start_IT+0x488>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d059      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a7a      	ldr	r2, [pc, #488]	@ (800225c <HAL_DMA_Start_IT+0x48c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d054      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a79      	ldr	r2, [pc, #484]	@ (8002260 <HAL_DMA_Start_IT+0x490>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d04f      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a77      	ldr	r2, [pc, #476]	@ (8002264 <HAL_DMA_Start_IT+0x494>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d04a      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a76      	ldr	r2, [pc, #472]	@ (8002268 <HAL_DMA_Start_IT+0x498>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d045      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a74      	ldr	r2, [pc, #464]	@ (800226c <HAL_DMA_Start_IT+0x49c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d040      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a73      	ldr	r2, [pc, #460]	@ (8002270 <HAL_DMA_Start_IT+0x4a0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d03b      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a71      	ldr	r2, [pc, #452]	@ (8002274 <HAL_DMA_Start_IT+0x4a4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d036      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a70      	ldr	r2, [pc, #448]	@ (8002278 <HAL_DMA_Start_IT+0x4a8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d031      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a6e      	ldr	r2, [pc, #440]	@ (800227c <HAL_DMA_Start_IT+0x4ac>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02c      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6d      	ldr	r2, [pc, #436]	@ (8002280 <HAL_DMA_Start_IT+0x4b0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d027      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002284 <HAL_DMA_Start_IT+0x4b4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d022      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6a      	ldr	r2, [pc, #424]	@ (8002288 <HAL_DMA_Start_IT+0x4b8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01d      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a68      	ldr	r2, [pc, #416]	@ (800228c <HAL_DMA_Start_IT+0x4bc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d018      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a67      	ldr	r2, [pc, #412]	@ (8002290 <HAL_DMA_Start_IT+0x4c0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a65      	ldr	r2, [pc, #404]	@ (8002294 <HAL_DMA_Start_IT+0x4c4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00e      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a64      	ldr	r2, [pc, #400]	@ (8002298 <HAL_DMA_Start_IT+0x4c8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a62      	ldr	r2, [pc, #392]	@ (800229c <HAL_DMA_Start_IT+0x4cc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_DMA_Start_IT+0x350>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a61      	ldr	r2, [pc, #388]	@ (80022a0 <HAL_DMA_Start_IT+0x4d0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_DMA_Start_IT+0x354>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_DMA_Start_IT+0x356>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01a      	beq.n	8002160 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002146:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800215a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800215e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a37      	ldr	r2, [pc, #220]	@ (8002244 <HAL_DMA_Start_IT+0x474>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d04a      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a36      	ldr	r2, [pc, #216]	@ (8002248 <HAL_DMA_Start_IT+0x478>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d045      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a34      	ldr	r2, [pc, #208]	@ (800224c <HAL_DMA_Start_IT+0x47c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d040      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a33      	ldr	r2, [pc, #204]	@ (8002250 <HAL_DMA_Start_IT+0x480>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d03b      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a31      	ldr	r2, [pc, #196]	@ (8002254 <HAL_DMA_Start_IT+0x484>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d036      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a30      	ldr	r2, [pc, #192]	@ (8002258 <HAL_DMA_Start_IT+0x488>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d031      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a2e      	ldr	r2, [pc, #184]	@ (800225c <HAL_DMA_Start_IT+0x48c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d02c      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002260 <HAL_DMA_Start_IT+0x490>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d027      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002264 <HAL_DMA_Start_IT+0x494>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d022      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2a      	ldr	r2, [pc, #168]	@ (8002268 <HAL_DMA_Start_IT+0x498>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d01d      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a28      	ldr	r2, [pc, #160]	@ (800226c <HAL_DMA_Start_IT+0x49c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d018      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a27      	ldr	r2, [pc, #156]	@ (8002270 <HAL_DMA_Start_IT+0x4a0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d013      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a25      	ldr	r2, [pc, #148]	@ (8002274 <HAL_DMA_Start_IT+0x4a4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00e      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a24      	ldr	r2, [pc, #144]	@ (8002278 <HAL_DMA_Start_IT+0x4a8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d009      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a22      	ldr	r2, [pc, #136]	@ (800227c <HAL_DMA_Start_IT+0x4ac>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_DMA_Start_IT+0x430>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a21      	ldr	r2, [pc, #132]	@ (8002280 <HAL_DMA_Start_IT+0x4b0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d108      	bne.n	8002212 <HAL_DMA_Start_IT+0x442>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e012      	b.n	8002238 <HAL_DMA_Start_IT+0x468>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e009      	b.n	8002238 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002238:	7dfb      	ldrb	r3, [r7, #23]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40020010 	.word	0x40020010
 8002248:	40020028 	.word	0x40020028
 800224c:	40020040 	.word	0x40020040
 8002250:	40020058 	.word	0x40020058
 8002254:	40020070 	.word	0x40020070
 8002258:	40020088 	.word	0x40020088
 800225c:	400200a0 	.word	0x400200a0
 8002260:	400200b8 	.word	0x400200b8
 8002264:	40020410 	.word	0x40020410
 8002268:	40020428 	.word	0x40020428
 800226c:	40020440 	.word	0x40020440
 8002270:	40020458 	.word	0x40020458
 8002274:	40020470 	.word	0x40020470
 8002278:	40020488 	.word	0x40020488
 800227c:	400204a0 	.word	0x400204a0
 8002280:	400204b8 	.word	0x400204b8
 8002284:	58025408 	.word	0x58025408
 8002288:	5802541c 	.word	0x5802541c
 800228c:	58025430 	.word	0x58025430
 8002290:	58025444 	.word	0x58025444
 8002294:	58025458 	.word	0x58025458
 8002298:	5802546c 	.word	0x5802546c
 800229c:	58025480 	.word	0x58025480
 80022a0:	58025494 	.word	0x58025494

080022a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff f870 	bl	8001390 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e2dc      	b.n	8002876 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d008      	beq.n	80022da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2280      	movs	r2, #128	@ 0x80
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e2cd      	b.n	8002876 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a76      	ldr	r2, [pc, #472]	@ (80024b8 <HAL_DMA_Abort+0x214>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d04a      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a74      	ldr	r2, [pc, #464]	@ (80024bc <HAL_DMA_Abort+0x218>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d045      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a73      	ldr	r2, [pc, #460]	@ (80024c0 <HAL_DMA_Abort+0x21c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d040      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a71      	ldr	r2, [pc, #452]	@ (80024c4 <HAL_DMA_Abort+0x220>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d03b      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a70      	ldr	r2, [pc, #448]	@ (80024c8 <HAL_DMA_Abort+0x224>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d036      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6e      	ldr	r2, [pc, #440]	@ (80024cc <HAL_DMA_Abort+0x228>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d031      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6d      	ldr	r2, [pc, #436]	@ (80024d0 <HAL_DMA_Abort+0x22c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d02c      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6b      	ldr	r2, [pc, #428]	@ (80024d4 <HAL_DMA_Abort+0x230>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d027      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6a      	ldr	r2, [pc, #424]	@ (80024d8 <HAL_DMA_Abort+0x234>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d022      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a68      	ldr	r2, [pc, #416]	@ (80024dc <HAL_DMA_Abort+0x238>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01d      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a67      	ldr	r2, [pc, #412]	@ (80024e0 <HAL_DMA_Abort+0x23c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d018      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a65      	ldr	r2, [pc, #404]	@ (80024e4 <HAL_DMA_Abort+0x240>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a64      	ldr	r2, [pc, #400]	@ (80024e8 <HAL_DMA_Abort+0x244>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00e      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a62      	ldr	r2, [pc, #392]	@ (80024ec <HAL_DMA_Abort+0x248>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a61      	ldr	r2, [pc, #388]	@ (80024f0 <HAL_DMA_Abort+0x24c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d004      	beq.n	800237a <HAL_DMA_Abort+0xd6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5f      	ldr	r2, [pc, #380]	@ (80024f4 <HAL_DMA_Abort+0x250>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_DMA_Abort+0xda>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_DMA_Abort+0xdc>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 021e 	bic.w	r2, r2, #30
 8002392:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e00a      	b.n	80023c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020e 	bic.w	r2, r2, #14
 80023ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a3c      	ldr	r2, [pc, #240]	@ (80024b8 <HAL_DMA_Abort+0x214>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d072      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a3a      	ldr	r2, [pc, #232]	@ (80024bc <HAL_DMA_Abort+0x218>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d06d      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a39      	ldr	r2, [pc, #228]	@ (80024c0 <HAL_DMA_Abort+0x21c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d068      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a37      	ldr	r2, [pc, #220]	@ (80024c4 <HAL_DMA_Abort+0x220>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d063      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a36      	ldr	r2, [pc, #216]	@ (80024c8 <HAL_DMA_Abort+0x224>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d05e      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a34      	ldr	r2, [pc, #208]	@ (80024cc <HAL_DMA_Abort+0x228>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d059      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a33      	ldr	r2, [pc, #204]	@ (80024d0 <HAL_DMA_Abort+0x22c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d054      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a31      	ldr	r2, [pc, #196]	@ (80024d4 <HAL_DMA_Abort+0x230>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d04f      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a30      	ldr	r2, [pc, #192]	@ (80024d8 <HAL_DMA_Abort+0x234>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d04a      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a2e      	ldr	r2, [pc, #184]	@ (80024dc <HAL_DMA_Abort+0x238>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d045      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a2d      	ldr	r2, [pc, #180]	@ (80024e0 <HAL_DMA_Abort+0x23c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d040      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2b      	ldr	r2, [pc, #172]	@ (80024e4 <HAL_DMA_Abort+0x240>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d03b      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2a      	ldr	r2, [pc, #168]	@ (80024e8 <HAL_DMA_Abort+0x244>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d036      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a28      	ldr	r2, [pc, #160]	@ (80024ec <HAL_DMA_Abort+0x248>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d031      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a27      	ldr	r2, [pc, #156]	@ (80024f0 <HAL_DMA_Abort+0x24c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d02c      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a25      	ldr	r2, [pc, #148]	@ (80024f4 <HAL_DMA_Abort+0x250>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d027      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a24      	ldr	r2, [pc, #144]	@ (80024f8 <HAL_DMA_Abort+0x254>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d022      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a22      	ldr	r2, [pc, #136]	@ (80024fc <HAL_DMA_Abort+0x258>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d01d      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a21      	ldr	r2, [pc, #132]	@ (8002500 <HAL_DMA_Abort+0x25c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d018      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1f      	ldr	r2, [pc, #124]	@ (8002504 <HAL_DMA_Abort+0x260>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d013      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1e      	ldr	r2, [pc, #120]	@ (8002508 <HAL_DMA_Abort+0x264>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00e      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1c      	ldr	r2, [pc, #112]	@ (800250c <HAL_DMA_Abort+0x268>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002510 <HAL_DMA_Abort+0x26c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_DMA_Abort+0x20e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	@ (8002514 <HAL_DMA_Abort+0x270>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d132      	bne.n	8002518 <HAL_DMA_Abort+0x274>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e031      	b.n	800251a <HAL_DMA_Abort+0x276>
 80024b6:	bf00      	nop
 80024b8:	40020010 	.word	0x40020010
 80024bc:	40020028 	.word	0x40020028
 80024c0:	40020040 	.word	0x40020040
 80024c4:	40020058 	.word	0x40020058
 80024c8:	40020070 	.word	0x40020070
 80024cc:	40020088 	.word	0x40020088
 80024d0:	400200a0 	.word	0x400200a0
 80024d4:	400200b8 	.word	0x400200b8
 80024d8:	40020410 	.word	0x40020410
 80024dc:	40020428 	.word	0x40020428
 80024e0:	40020440 	.word	0x40020440
 80024e4:	40020458 	.word	0x40020458
 80024e8:	40020470 	.word	0x40020470
 80024ec:	40020488 	.word	0x40020488
 80024f0:	400204a0 	.word	0x400204a0
 80024f4:	400204b8 	.word	0x400204b8
 80024f8:	58025408 	.word	0x58025408
 80024fc:	5802541c 	.word	0x5802541c
 8002500:	58025430 	.word	0x58025430
 8002504:	58025444 	.word	0x58025444
 8002508:	58025458 	.word	0x58025458
 800250c:	5802546c 	.word	0x5802546c
 8002510:	58025480 	.word	0x58025480
 8002514:	58025494 	.word	0x58025494
 8002518:	2300      	movs	r3, #0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800252c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6d      	ldr	r2, [pc, #436]	@ (80026e8 <HAL_DMA_Abort+0x444>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d04a      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6b      	ldr	r2, [pc, #428]	@ (80026ec <HAL_DMA_Abort+0x448>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d045      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a6a      	ldr	r2, [pc, #424]	@ (80026f0 <HAL_DMA_Abort+0x44c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d040      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a68      	ldr	r2, [pc, #416]	@ (80026f4 <HAL_DMA_Abort+0x450>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d03b      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a67      	ldr	r2, [pc, #412]	@ (80026f8 <HAL_DMA_Abort+0x454>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d036      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a65      	ldr	r2, [pc, #404]	@ (80026fc <HAL_DMA_Abort+0x458>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d031      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a64      	ldr	r2, [pc, #400]	@ (8002700 <HAL_DMA_Abort+0x45c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d02c      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a62      	ldr	r2, [pc, #392]	@ (8002704 <HAL_DMA_Abort+0x460>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d027      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a61      	ldr	r2, [pc, #388]	@ (8002708 <HAL_DMA_Abort+0x464>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d022      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a5f      	ldr	r2, [pc, #380]	@ (800270c <HAL_DMA_Abort+0x468>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01d      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a5e      	ldr	r2, [pc, #376]	@ (8002710 <HAL_DMA_Abort+0x46c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d018      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a5c      	ldr	r2, [pc, #368]	@ (8002714 <HAL_DMA_Abort+0x470>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002718 <HAL_DMA_Abort+0x474>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00e      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a59      	ldr	r2, [pc, #356]	@ (800271c <HAL_DMA_Abort+0x478>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d009      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a58      	ldr	r2, [pc, #352]	@ (8002720 <HAL_DMA_Abort+0x47c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_DMA_Abort+0x32a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a56      	ldr	r2, [pc, #344]	@ (8002724 <HAL_DMA_Abort+0x480>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d108      	bne.n	80025e0 <HAL_DMA_Abort+0x33c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e007      	b.n	80025f0 <HAL_DMA_Abort+0x34c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025f0:	e013      	b.n	800261a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f2:	f7fe fecd 	bl	8001390 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d90c      	bls.n	800261a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2203      	movs	r2, #3
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e12d      	b.n	8002876 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1e5      	bne.n	80025f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2f      	ldr	r2, [pc, #188]	@ (80026e8 <HAL_DMA_Abort+0x444>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04a      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2d      	ldr	r2, [pc, #180]	@ (80026ec <HAL_DMA_Abort+0x448>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d045      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2c      	ldr	r2, [pc, #176]	@ (80026f0 <HAL_DMA_Abort+0x44c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d040      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2a      	ldr	r2, [pc, #168]	@ (80026f4 <HAL_DMA_Abort+0x450>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d03b      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a29      	ldr	r2, [pc, #164]	@ (80026f8 <HAL_DMA_Abort+0x454>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d036      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a27      	ldr	r2, [pc, #156]	@ (80026fc <HAL_DMA_Abort+0x458>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d031      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a26      	ldr	r2, [pc, #152]	@ (8002700 <HAL_DMA_Abort+0x45c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d02c      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a24      	ldr	r2, [pc, #144]	@ (8002704 <HAL_DMA_Abort+0x460>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d027      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a23      	ldr	r2, [pc, #140]	@ (8002708 <HAL_DMA_Abort+0x464>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d022      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a21      	ldr	r2, [pc, #132]	@ (800270c <HAL_DMA_Abort+0x468>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01d      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a20      	ldr	r2, [pc, #128]	@ (8002710 <HAL_DMA_Abort+0x46c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d018      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <HAL_DMA_Abort+0x470>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002718 <HAL_DMA_Abort+0x474>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1b      	ldr	r2, [pc, #108]	@ (800271c <HAL_DMA_Abort+0x478>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002720 <HAL_DMA_Abort+0x47c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_DMA_Abort+0x422>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a18      	ldr	r2, [pc, #96]	@ (8002724 <HAL_DMA_Abort+0x480>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_DMA_Abort+0x426>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_DMA_Abort+0x428>
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d02b      	beq.n	8002728 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	223f      	movs	r2, #63	@ 0x3f
 80026e0:	409a      	lsls	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	e02a      	b.n	800273e <HAL_DMA_Abort+0x49a>
 80026e8:	40020010 	.word	0x40020010
 80026ec:	40020028 	.word	0x40020028
 80026f0:	40020040 	.word	0x40020040
 80026f4:	40020058 	.word	0x40020058
 80026f8:	40020070 	.word	0x40020070
 80026fc:	40020088 	.word	0x40020088
 8002700:	400200a0 	.word	0x400200a0
 8002704:	400200b8 	.word	0x400200b8
 8002708:	40020410 	.word	0x40020410
 800270c:	40020428 	.word	0x40020428
 8002710:	40020440 	.word	0x40020440
 8002714:	40020458 	.word	0x40020458
 8002718:	40020470 	.word	0x40020470
 800271c:	40020488 	.word	0x40020488
 8002720:	400204a0 	.word	0x400204a0
 8002724:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2201      	movs	r2, #1
 8002738:	409a      	lsls	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a4f      	ldr	r2, [pc, #316]	@ (8002880 <HAL_DMA_Abort+0x5dc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d072      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a4d      	ldr	r2, [pc, #308]	@ (8002884 <HAL_DMA_Abort+0x5e0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d06d      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a4c      	ldr	r2, [pc, #304]	@ (8002888 <HAL_DMA_Abort+0x5e4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d068      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a4a      	ldr	r2, [pc, #296]	@ (800288c <HAL_DMA_Abort+0x5e8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d063      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a49      	ldr	r2, [pc, #292]	@ (8002890 <HAL_DMA_Abort+0x5ec>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d05e      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a47      	ldr	r2, [pc, #284]	@ (8002894 <HAL_DMA_Abort+0x5f0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d059      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a46      	ldr	r2, [pc, #280]	@ (8002898 <HAL_DMA_Abort+0x5f4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d054      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a44      	ldr	r2, [pc, #272]	@ (800289c <HAL_DMA_Abort+0x5f8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d04f      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a43      	ldr	r2, [pc, #268]	@ (80028a0 <HAL_DMA_Abort+0x5fc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d04a      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a41      	ldr	r2, [pc, #260]	@ (80028a4 <HAL_DMA_Abort+0x600>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d045      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a40      	ldr	r2, [pc, #256]	@ (80028a8 <HAL_DMA_Abort+0x604>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d040      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a3e      	ldr	r2, [pc, #248]	@ (80028ac <HAL_DMA_Abort+0x608>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d03b      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a3d      	ldr	r2, [pc, #244]	@ (80028b0 <HAL_DMA_Abort+0x60c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d036      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3b      	ldr	r2, [pc, #236]	@ (80028b4 <HAL_DMA_Abort+0x610>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d031      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3a      	ldr	r2, [pc, #232]	@ (80028b8 <HAL_DMA_Abort+0x614>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d02c      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a38      	ldr	r2, [pc, #224]	@ (80028bc <HAL_DMA_Abort+0x618>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d027      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a37      	ldr	r2, [pc, #220]	@ (80028c0 <HAL_DMA_Abort+0x61c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a35      	ldr	r2, [pc, #212]	@ (80028c4 <HAL_DMA_Abort+0x620>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01d      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a34      	ldr	r2, [pc, #208]	@ (80028c8 <HAL_DMA_Abort+0x624>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d018      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a32      	ldr	r2, [pc, #200]	@ (80028cc <HAL_DMA_Abort+0x628>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a31      	ldr	r2, [pc, #196]	@ (80028d0 <HAL_DMA_Abort+0x62c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00e      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2f      	ldr	r2, [pc, #188]	@ (80028d4 <HAL_DMA_Abort+0x630>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2e      	ldr	r2, [pc, #184]	@ (80028d8 <HAL_DMA_Abort+0x634>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_DMA_Abort+0x58a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a2c      	ldr	r2, [pc, #176]	@ (80028dc <HAL_DMA_Abort+0x638>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_DMA_Abort+0x58e>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_DMA_Abort+0x590>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002840:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002858:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002862:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40020010 	.word	0x40020010
 8002884:	40020028 	.word	0x40020028
 8002888:	40020040 	.word	0x40020040
 800288c:	40020058 	.word	0x40020058
 8002890:	40020070 	.word	0x40020070
 8002894:	40020088 	.word	0x40020088
 8002898:	400200a0 	.word	0x400200a0
 800289c:	400200b8 	.word	0x400200b8
 80028a0:	40020410 	.word	0x40020410
 80028a4:	40020428 	.word	0x40020428
 80028a8:	40020440 	.word	0x40020440
 80028ac:	40020458 	.word	0x40020458
 80028b0:	40020470 	.word	0x40020470
 80028b4:	40020488 	.word	0x40020488
 80028b8:	400204a0 	.word	0x400204a0
 80028bc:	400204b8 	.word	0x400204b8
 80028c0:	58025408 	.word	0x58025408
 80028c4:	5802541c 	.word	0x5802541c
 80028c8:	58025430 	.word	0x58025430
 80028cc:	58025444 	.word	0x58025444
 80028d0:	58025458 	.word	0x58025458
 80028d4:	5802546c 	.word	0x5802546c
 80028d8:	58025480 	.word	0x58025480
 80028dc:	58025494 	.word	0x58025494

080028e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e237      	b.n	8002d62 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d004      	beq.n	8002908 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2280      	movs	r2, #128	@ 0x80
 8002902:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e22c      	b.n	8002d62 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5c      	ldr	r2, [pc, #368]	@ (8002a80 <HAL_DMA_Abort_IT+0x1a0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d04a      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5b      	ldr	r2, [pc, #364]	@ (8002a84 <HAL_DMA_Abort_IT+0x1a4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d045      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a59      	ldr	r2, [pc, #356]	@ (8002a88 <HAL_DMA_Abort_IT+0x1a8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d040      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a58      	ldr	r2, [pc, #352]	@ (8002a8c <HAL_DMA_Abort_IT+0x1ac>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d03b      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a56      	ldr	r2, [pc, #344]	@ (8002a90 <HAL_DMA_Abort_IT+0x1b0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d036      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a55      	ldr	r2, [pc, #340]	@ (8002a94 <HAL_DMA_Abort_IT+0x1b4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d031      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a53      	ldr	r2, [pc, #332]	@ (8002a98 <HAL_DMA_Abort_IT+0x1b8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d02c      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a52      	ldr	r2, [pc, #328]	@ (8002a9c <HAL_DMA_Abort_IT+0x1bc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d027      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a50      	ldr	r2, [pc, #320]	@ (8002aa0 <HAL_DMA_Abort_IT+0x1c0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d022      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a4f      	ldr	r2, [pc, #316]	@ (8002aa4 <HAL_DMA_Abort_IT+0x1c4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d01d      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa8 <HAL_DMA_Abort_IT+0x1c8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d018      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a4c      	ldr	r2, [pc, #304]	@ (8002aac <HAL_DMA_Abort_IT+0x1cc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d013      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a4a      	ldr	r2, [pc, #296]	@ (8002ab0 <HAL_DMA_Abort_IT+0x1d0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00e      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a49      	ldr	r2, [pc, #292]	@ (8002ab4 <HAL_DMA_Abort_IT+0x1d4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d009      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a47      	ldr	r2, [pc, #284]	@ (8002ab8 <HAL_DMA_Abort_IT+0x1d8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d004      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a46      	ldr	r2, [pc, #280]	@ (8002abc <HAL_DMA_Abort_IT+0x1dc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_DMA_Abort_IT+0xcc>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <HAL_DMA_Abort_IT+0xce>
 80029ac:	2300      	movs	r3, #0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8086 	beq.w	8002ac0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2204      	movs	r2, #4
 80029b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002a80 <HAL_DMA_Abort_IT+0x1a0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d04a      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002a84 <HAL_DMA_Abort_IT+0x1a4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d045      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002a88 <HAL_DMA_Abort_IT+0x1a8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d040      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2b      	ldr	r2, [pc, #172]	@ (8002a8c <HAL_DMA_Abort_IT+0x1ac>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d03b      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a29      	ldr	r2, [pc, #164]	@ (8002a90 <HAL_DMA_Abort_IT+0x1b0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d036      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a28      	ldr	r2, [pc, #160]	@ (8002a94 <HAL_DMA_Abort_IT+0x1b4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d031      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a26      	ldr	r2, [pc, #152]	@ (8002a98 <HAL_DMA_Abort_IT+0x1b8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d02c      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a25      	ldr	r2, [pc, #148]	@ (8002a9c <HAL_DMA_Abort_IT+0x1bc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d027      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a23      	ldr	r2, [pc, #140]	@ (8002aa0 <HAL_DMA_Abort_IT+0x1c0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d022      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a22      	ldr	r2, [pc, #136]	@ (8002aa4 <HAL_DMA_Abort_IT+0x1c4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d01d      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a20      	ldr	r2, [pc, #128]	@ (8002aa8 <HAL_DMA_Abort_IT+0x1c8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d018      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002aac <HAL_DMA_Abort_IT+0x1cc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab0 <HAL_DMA_Abort_IT+0x1d0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00e      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab4 <HAL_DMA_Abort_IT+0x1d4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d009      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab8 <HAL_DMA_Abort_IT+0x1d8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x17c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a19      	ldr	r2, [pc, #100]	@ (8002abc <HAL_DMA_Abort_IT+0x1dc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d108      	bne.n	8002a6e <HAL_DMA_Abort_IT+0x18e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e178      	b.n	8002d60 <HAL_DMA_Abort_IT+0x480>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e16f      	b.n	8002d60 <HAL_DMA_Abort_IT+0x480>
 8002a80:	40020010 	.word	0x40020010
 8002a84:	40020028 	.word	0x40020028
 8002a88:	40020040 	.word	0x40020040
 8002a8c:	40020058 	.word	0x40020058
 8002a90:	40020070 	.word	0x40020070
 8002a94:	40020088 	.word	0x40020088
 8002a98:	400200a0 	.word	0x400200a0
 8002a9c:	400200b8 	.word	0x400200b8
 8002aa0:	40020410 	.word	0x40020410
 8002aa4:	40020428 	.word	0x40020428
 8002aa8:	40020440 	.word	0x40020440
 8002aac:	40020458 	.word	0x40020458
 8002ab0:	40020470 	.word	0x40020470
 8002ab4:	40020488 	.word	0x40020488
 8002ab8:	400204a0 	.word	0x400204a0
 8002abc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 020e 	bic.w	r2, r2, #14
 8002ace:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6c      	ldr	r2, [pc, #432]	@ (8002c88 <HAL_DMA_Abort_IT+0x3a8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d04a      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6b      	ldr	r2, [pc, #428]	@ (8002c8c <HAL_DMA_Abort_IT+0x3ac>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d045      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a69      	ldr	r2, [pc, #420]	@ (8002c90 <HAL_DMA_Abort_IT+0x3b0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d040      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a68      	ldr	r2, [pc, #416]	@ (8002c94 <HAL_DMA_Abort_IT+0x3b4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d03b      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a66      	ldr	r2, [pc, #408]	@ (8002c98 <HAL_DMA_Abort_IT+0x3b8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d036      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a65      	ldr	r2, [pc, #404]	@ (8002c9c <HAL_DMA_Abort_IT+0x3bc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d031      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a63      	ldr	r2, [pc, #396]	@ (8002ca0 <HAL_DMA_Abort_IT+0x3c0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02c      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a62      	ldr	r2, [pc, #392]	@ (8002ca4 <HAL_DMA_Abort_IT+0x3c4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d027      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a60      	ldr	r2, [pc, #384]	@ (8002ca8 <HAL_DMA_Abort_IT+0x3c8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d022      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8002cac <HAL_DMA_Abort_IT+0x3cc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d01d      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a5d      	ldr	r2, [pc, #372]	@ (8002cb0 <HAL_DMA_Abort_IT+0x3d0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d018      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5c      	ldr	r2, [pc, #368]	@ (8002cb4 <HAL_DMA_Abort_IT+0x3d4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a5a      	ldr	r2, [pc, #360]	@ (8002cb8 <HAL_DMA_Abort_IT+0x3d8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00e      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a59      	ldr	r2, [pc, #356]	@ (8002cbc <HAL_DMA_Abort_IT+0x3dc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d009      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a57      	ldr	r2, [pc, #348]	@ (8002cc0 <HAL_DMA_Abort_IT+0x3e0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x290>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a56      	ldr	r2, [pc, #344]	@ (8002cc4 <HAL_DMA_Abort_IT+0x3e4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d108      	bne.n	8002b82 <HAL_DMA_Abort_IT+0x2a2>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e007      	b.n	8002b92 <HAL_DMA_Abort_IT+0x2b2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a3c      	ldr	r2, [pc, #240]	@ (8002c88 <HAL_DMA_Abort_IT+0x3a8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d072      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8002c8c <HAL_DMA_Abort_IT+0x3ac>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d06d      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a39      	ldr	r2, [pc, #228]	@ (8002c90 <HAL_DMA_Abort_IT+0x3b0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d068      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a37      	ldr	r2, [pc, #220]	@ (8002c94 <HAL_DMA_Abort_IT+0x3b4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d063      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a36      	ldr	r2, [pc, #216]	@ (8002c98 <HAL_DMA_Abort_IT+0x3b8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d05e      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a34      	ldr	r2, [pc, #208]	@ (8002c9c <HAL_DMA_Abort_IT+0x3bc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d059      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a33      	ldr	r2, [pc, #204]	@ (8002ca0 <HAL_DMA_Abort_IT+0x3c0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d054      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a31      	ldr	r2, [pc, #196]	@ (8002ca4 <HAL_DMA_Abort_IT+0x3c4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d04f      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a30      	ldr	r2, [pc, #192]	@ (8002ca8 <HAL_DMA_Abort_IT+0x3c8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04a      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8002cac <HAL_DMA_Abort_IT+0x3cc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d045      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8002cb0 <HAL_DMA_Abort_IT+0x3d0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d040      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a2b      	ldr	r2, [pc, #172]	@ (8002cb4 <HAL_DMA_Abort_IT+0x3d4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d03b      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002cb8 <HAL_DMA_Abort_IT+0x3d8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d036      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a28      	ldr	r2, [pc, #160]	@ (8002cbc <HAL_DMA_Abort_IT+0x3dc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d031      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a27      	ldr	r2, [pc, #156]	@ (8002cc0 <HAL_DMA_Abort_IT+0x3e0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d02c      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a25      	ldr	r2, [pc, #148]	@ (8002cc4 <HAL_DMA_Abort_IT+0x3e4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d027      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a24      	ldr	r2, [pc, #144]	@ (8002cc8 <HAL_DMA_Abort_IT+0x3e8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a22      	ldr	r2, [pc, #136]	@ (8002ccc <HAL_DMA_Abort_IT+0x3ec>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01d      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a21      	ldr	r2, [pc, #132]	@ (8002cd0 <HAL_DMA_Abort_IT+0x3f0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d018      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1f      	ldr	r2, [pc, #124]	@ (8002cd4 <HAL_DMA_Abort_IT+0x3f4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd8 <HAL_DMA_Abort_IT+0x3f8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1c      	ldr	r2, [pc, #112]	@ (8002cdc <HAL_DMA_Abort_IT+0x3fc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce0 <HAL_DMA_Abort_IT+0x400>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x3a2>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a19      	ldr	r2, [pc, #100]	@ (8002ce4 <HAL_DMA_Abort_IT+0x404>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d132      	bne.n	8002ce8 <HAL_DMA_Abort_IT+0x408>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e031      	b.n	8002cea <HAL_DMA_Abort_IT+0x40a>
 8002c86:	bf00      	nop
 8002c88:	40020010 	.word	0x40020010
 8002c8c:	40020028 	.word	0x40020028
 8002c90:	40020040 	.word	0x40020040
 8002c94:	40020058 	.word	0x40020058
 8002c98:	40020070 	.word	0x40020070
 8002c9c:	40020088 	.word	0x40020088
 8002ca0:	400200a0 	.word	0x400200a0
 8002ca4:	400200b8 	.word	0x400200b8
 8002ca8:	40020410 	.word	0x40020410
 8002cac:	40020428 	.word	0x40020428
 8002cb0:	40020440 	.word	0x40020440
 8002cb4:	40020458 	.word	0x40020458
 8002cb8:	40020470 	.word	0x40020470
 8002cbc:	40020488 	.word	0x40020488
 8002cc0:	400204a0 	.word	0x400204a0
 8002cc4:	400204b8 	.word	0x400204b8
 8002cc8:	58025408 	.word	0x58025408
 8002ccc:	5802541c 	.word	0x5802541c
 8002cd0:	58025430 	.word	0x58025430
 8002cd4:	58025444 	.word	0x58025444
 8002cd8:	58025458 	.word	0x58025458
 8002cdc:	5802546c 	.word	0x5802546c
 8002ce0:	58025480 	.word	0x58025480
 8002ce4:	58025494 	.word	0x58025494
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d028      	beq.n	8002d40 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop

08002d6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	@ 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d78:	4b67      	ldr	r3, [pc, #412]	@ (8002f18 <HAL_DMA_IRQHandler+0x1ac>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a67      	ldr	r2, [pc, #412]	@ (8002f1c <HAL_DMA_IRQHandler+0x1b0>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0a9b      	lsrs	r3, r3, #10
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5f      	ldr	r2, [pc, #380]	@ (8002f20 <HAL_DMA_IRQHandler+0x1b4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d04a      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a5d      	ldr	r2, [pc, #372]	@ (8002f24 <HAL_DMA_IRQHandler+0x1b8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d045      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5c      	ldr	r2, [pc, #368]	@ (8002f28 <HAL_DMA_IRQHandler+0x1bc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d040      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f2c <HAL_DMA_IRQHandler+0x1c0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d03b      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a59      	ldr	r2, [pc, #356]	@ (8002f30 <HAL_DMA_IRQHandler+0x1c4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d036      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a57      	ldr	r2, [pc, #348]	@ (8002f34 <HAL_DMA_IRQHandler+0x1c8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d031      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a56      	ldr	r2, [pc, #344]	@ (8002f38 <HAL_DMA_IRQHandler+0x1cc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d02c      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a54      	ldr	r2, [pc, #336]	@ (8002f3c <HAL_DMA_IRQHandler+0x1d0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d027      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a53      	ldr	r2, [pc, #332]	@ (8002f40 <HAL_DMA_IRQHandler+0x1d4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a51      	ldr	r2, [pc, #324]	@ (8002f44 <HAL_DMA_IRQHandler+0x1d8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01d      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a50      	ldr	r2, [pc, #320]	@ (8002f48 <HAL_DMA_IRQHandler+0x1dc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d018      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a4e      	ldr	r2, [pc, #312]	@ (8002f4c <HAL_DMA_IRQHandler+0x1e0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f50 <HAL_DMA_IRQHandler+0x1e4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a4b      	ldr	r2, [pc, #300]	@ (8002f54 <HAL_DMA_IRQHandler+0x1e8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8002f58 <HAL_DMA_IRQHandler+0x1ec>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xd2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a48      	ldr	r2, [pc, #288]	@ (8002f5c <HAL_DMA_IRQHandler+0x1f0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d101      	bne.n	8002e42 <HAL_DMA_IRQHandler+0xd6>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_DMA_IRQHandler+0xd8>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 842b 	beq.w	80036a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2208      	movs	r2, #8
 8002e54:	409a      	lsls	r2, r3
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80a2 	beq.w	8002fa4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a2e      	ldr	r2, [pc, #184]	@ (8002f20 <HAL_DMA_IRQHandler+0x1b4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d04a      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002f24 <HAL_DMA_IRQHandler+0x1b8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d045      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2b      	ldr	r2, [pc, #172]	@ (8002f28 <HAL_DMA_IRQHandler+0x1bc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d040      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2a      	ldr	r2, [pc, #168]	@ (8002f2c <HAL_DMA_IRQHandler+0x1c0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d03b      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a28      	ldr	r2, [pc, #160]	@ (8002f30 <HAL_DMA_IRQHandler+0x1c4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d036      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a27      	ldr	r2, [pc, #156]	@ (8002f34 <HAL_DMA_IRQHandler+0x1c8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d031      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a25      	ldr	r2, [pc, #148]	@ (8002f38 <HAL_DMA_IRQHandler+0x1cc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d02c      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a24      	ldr	r2, [pc, #144]	@ (8002f3c <HAL_DMA_IRQHandler+0x1d0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d027      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a22      	ldr	r2, [pc, #136]	@ (8002f40 <HAL_DMA_IRQHandler+0x1d4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d022      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a21      	ldr	r2, [pc, #132]	@ (8002f44 <HAL_DMA_IRQHandler+0x1d8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d01d      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <HAL_DMA_IRQHandler+0x1dc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d018      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f4c <HAL_DMA_IRQHandler+0x1e0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <HAL_DMA_IRQHandler+0x1e4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00e      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <HAL_DMA_IRQHandler+0x1e8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	@ (8002f58 <HAL_DMA_IRQHandler+0x1ec>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x194>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a18      	ldr	r2, [pc, #96]	@ (8002f5c <HAL_DMA_IRQHandler+0x1f0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d12f      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x1f4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bf14      	ite	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	2300      	moveq	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	e02e      	b.n	8002f74 <HAL_DMA_IRQHandler+0x208>
 8002f16:	bf00      	nop
 8002f18:	24000000 	.word	0x24000000
 8002f1c:	1b4e81b5 	.word	0x1b4e81b5
 8002f20:	40020010 	.word	0x40020010
 8002f24:	40020028 	.word	0x40020028
 8002f28:	40020040 	.word	0x40020040
 8002f2c:	40020058 	.word	0x40020058
 8002f30:	40020070 	.word	0x40020070
 8002f34:	40020088 	.word	0x40020088
 8002f38:	400200a0 	.word	0x400200a0
 8002f3c:	400200b8 	.word	0x400200b8
 8002f40:	40020410 	.word	0x40020410
 8002f44:	40020428 	.word	0x40020428
 8002f48:	40020440 	.word	0x40020440
 8002f4c:	40020458 	.word	0x40020458
 8002f50:	40020470 	.word	0x40020470
 8002f54:	40020488 	.word	0x40020488
 8002f58:	400204a0 	.word	0x400204a0
 8002f5c:	400204b8 	.word	0x400204b8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf14      	ite	ne
 8002f6e:	2301      	movne	r3, #1
 8002f70:	2300      	moveq	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d015      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	2208      	movs	r2, #8
 8002f92:	409a      	lsls	r2, r3
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d06e      	beq.n	8003098 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a69      	ldr	r2, [pc, #420]	@ (8003164 <HAL_DMA_IRQHandler+0x3f8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d04a      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a67      	ldr	r2, [pc, #412]	@ (8003168 <HAL_DMA_IRQHandler+0x3fc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d045      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a66      	ldr	r2, [pc, #408]	@ (800316c <HAL_DMA_IRQHandler+0x400>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d040      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a64      	ldr	r2, [pc, #400]	@ (8003170 <HAL_DMA_IRQHandler+0x404>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d03b      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a63      	ldr	r2, [pc, #396]	@ (8003174 <HAL_DMA_IRQHandler+0x408>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d036      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a61      	ldr	r2, [pc, #388]	@ (8003178 <HAL_DMA_IRQHandler+0x40c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d031      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a60      	ldr	r2, [pc, #384]	@ (800317c <HAL_DMA_IRQHandler+0x410>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d02c      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a5e      	ldr	r2, [pc, #376]	@ (8003180 <HAL_DMA_IRQHandler+0x414>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d027      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a5d      	ldr	r2, [pc, #372]	@ (8003184 <HAL_DMA_IRQHandler+0x418>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d022      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a5b      	ldr	r2, [pc, #364]	@ (8003188 <HAL_DMA_IRQHandler+0x41c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01d      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5a      	ldr	r2, [pc, #360]	@ (800318c <HAL_DMA_IRQHandler+0x420>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d018      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a58      	ldr	r2, [pc, #352]	@ (8003190 <HAL_DMA_IRQHandler+0x424>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a57      	ldr	r2, [pc, #348]	@ (8003194 <HAL_DMA_IRQHandler+0x428>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00e      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a55      	ldr	r2, [pc, #340]	@ (8003198 <HAL_DMA_IRQHandler+0x42c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a54      	ldr	r2, [pc, #336]	@ (800319c <HAL_DMA_IRQHandler+0x430>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_DMA_IRQHandler+0x2ee>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a52      	ldr	r2, [pc, #328]	@ (80031a0 <HAL_DMA_IRQHandler+0x434>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10a      	bne.n	8003070 <HAL_DMA_IRQHandler+0x304>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e003      	b.n	8003078 <HAL_DMA_IRQHandler+0x30c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00d      	beq.n	8003098 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	2201      	movs	r2, #1
 8003086:	409a      	lsls	r2, r3
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003090:	f043 0202 	orr.w	r2, r3, #2
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2204      	movs	r2, #4
 80030a2:	409a      	lsls	r2, r3
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 808f 	beq.w	80031cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003164 <HAL_DMA_IRQHandler+0x3f8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d04a      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003168 <HAL_DMA_IRQHandler+0x3fc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d045      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a29      	ldr	r2, [pc, #164]	@ (800316c <HAL_DMA_IRQHandler+0x400>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d040      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a27      	ldr	r2, [pc, #156]	@ (8003170 <HAL_DMA_IRQHandler+0x404>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d03b      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a26      	ldr	r2, [pc, #152]	@ (8003174 <HAL_DMA_IRQHandler+0x408>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d036      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a24      	ldr	r2, [pc, #144]	@ (8003178 <HAL_DMA_IRQHandler+0x40c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d031      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a23      	ldr	r2, [pc, #140]	@ (800317c <HAL_DMA_IRQHandler+0x410>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d02c      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a21      	ldr	r2, [pc, #132]	@ (8003180 <HAL_DMA_IRQHandler+0x414>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d027      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a20      	ldr	r2, [pc, #128]	@ (8003184 <HAL_DMA_IRQHandler+0x418>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1e      	ldr	r2, [pc, #120]	@ (8003188 <HAL_DMA_IRQHandler+0x41c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01d      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1d      	ldr	r2, [pc, #116]	@ (800318c <HAL_DMA_IRQHandler+0x420>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d018      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1b      	ldr	r2, [pc, #108]	@ (8003190 <HAL_DMA_IRQHandler+0x424>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1a      	ldr	r2, [pc, #104]	@ (8003194 <HAL_DMA_IRQHandler+0x428>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a18      	ldr	r2, [pc, #96]	@ (8003198 <HAL_DMA_IRQHandler+0x42c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a17      	ldr	r2, [pc, #92]	@ (800319c <HAL_DMA_IRQHandler+0x430>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_DMA_IRQHandler+0x3e2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a15      	ldr	r2, [pc, #84]	@ (80031a0 <HAL_DMA_IRQHandler+0x434>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d12a      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x438>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e023      	b.n	80031ac <HAL_DMA_IRQHandler+0x440>
 8003164:	40020010 	.word	0x40020010
 8003168:	40020028 	.word	0x40020028
 800316c:	40020040 	.word	0x40020040
 8003170:	40020058 	.word	0x40020058
 8003174:	40020070 	.word	0x40020070
 8003178:	40020088 	.word	0x40020088
 800317c:	400200a0 	.word	0x400200a0
 8003180:	400200b8 	.word	0x400200b8
 8003184:	40020410 	.word	0x40020410
 8003188:	40020428 	.word	0x40020428
 800318c:	40020440 	.word	0x40020440
 8003190:	40020458 	.word	0x40020458
 8003194:	40020470 	.word	0x40020470
 8003198:	40020488 	.word	0x40020488
 800319c:	400204a0 	.word	0x400204a0
 80031a0:	400204b8 	.word	0x400204b8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2204      	movs	r2, #4
 80031ba:	409a      	lsls	r2, r3
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c4:	f043 0204 	orr.w	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2210      	movs	r2, #16
 80031d6:	409a      	lsls	r2, r3
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80a6 	beq.w	800332e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a85      	ldr	r2, [pc, #532]	@ (80033fc <HAL_DMA_IRQHandler+0x690>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d04a      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a83      	ldr	r2, [pc, #524]	@ (8003400 <HAL_DMA_IRQHandler+0x694>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d045      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a82      	ldr	r2, [pc, #520]	@ (8003404 <HAL_DMA_IRQHandler+0x698>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d040      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a80      	ldr	r2, [pc, #512]	@ (8003408 <HAL_DMA_IRQHandler+0x69c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d03b      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a7f      	ldr	r2, [pc, #508]	@ (800340c <HAL_DMA_IRQHandler+0x6a0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d036      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a7d      	ldr	r2, [pc, #500]	@ (8003410 <HAL_DMA_IRQHandler+0x6a4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d031      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7c      	ldr	r2, [pc, #496]	@ (8003414 <HAL_DMA_IRQHandler+0x6a8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d02c      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a7a      	ldr	r2, [pc, #488]	@ (8003418 <HAL_DMA_IRQHandler+0x6ac>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d027      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a79      	ldr	r2, [pc, #484]	@ (800341c <HAL_DMA_IRQHandler+0x6b0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d022      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a77      	ldr	r2, [pc, #476]	@ (8003420 <HAL_DMA_IRQHandler+0x6b4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01d      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a76      	ldr	r2, [pc, #472]	@ (8003424 <HAL_DMA_IRQHandler+0x6b8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d018      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a74      	ldr	r2, [pc, #464]	@ (8003428 <HAL_DMA_IRQHandler+0x6bc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a73      	ldr	r2, [pc, #460]	@ (800342c <HAL_DMA_IRQHandler+0x6c0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00e      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a71      	ldr	r2, [pc, #452]	@ (8003430 <HAL_DMA_IRQHandler+0x6c4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d009      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a70      	ldr	r2, [pc, #448]	@ (8003434 <HAL_DMA_IRQHandler+0x6c8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d004      	beq.n	8003282 <HAL_DMA_IRQHandler+0x516>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6e      	ldr	r2, [pc, #440]	@ (8003438 <HAL_DMA_IRQHandler+0x6cc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10a      	bne.n	8003298 <HAL_DMA_IRQHandler+0x52c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e009      	b.n	80032ac <HAL_DMA_IRQHandler+0x540>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf14      	ite	ne
 80032a6:	2301      	movne	r3, #1
 80032a8:	2300      	moveq	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d03e      	beq.n	800332e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2210      	movs	r2, #16
 80032ba:	409a      	lsls	r2, r3
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d018      	beq.n	8003300 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d108      	bne.n	80032ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d024      	beq.n	800332e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
 80032ec:	e01f      	b.n	800332e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01b      	beq.n	800332e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
 80032fe:	e016      	b.n	800332e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0208 	bic.w	r2, r2, #8
 800331c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2220      	movs	r2, #32
 8003338:	409a      	lsls	r2, r3
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8110 	beq.w	8003564 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2c      	ldr	r2, [pc, #176]	@ (80033fc <HAL_DMA_IRQHandler+0x690>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d04a      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2b      	ldr	r2, [pc, #172]	@ (8003400 <HAL_DMA_IRQHandler+0x694>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d045      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a29      	ldr	r2, [pc, #164]	@ (8003404 <HAL_DMA_IRQHandler+0x698>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d040      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a28      	ldr	r2, [pc, #160]	@ (8003408 <HAL_DMA_IRQHandler+0x69c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d03b      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a26      	ldr	r2, [pc, #152]	@ (800340c <HAL_DMA_IRQHandler+0x6a0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d036      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a25      	ldr	r2, [pc, #148]	@ (8003410 <HAL_DMA_IRQHandler+0x6a4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d031      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a23      	ldr	r2, [pc, #140]	@ (8003414 <HAL_DMA_IRQHandler+0x6a8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02c      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a22      	ldr	r2, [pc, #136]	@ (8003418 <HAL_DMA_IRQHandler+0x6ac>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d027      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a20      	ldr	r2, [pc, #128]	@ (800341c <HAL_DMA_IRQHandler+0x6b0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d022      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003420 <HAL_DMA_IRQHandler+0x6b4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01d      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003424 <HAL_DMA_IRQHandler+0x6b8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d018      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <HAL_DMA_IRQHandler+0x6bc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d013      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1a      	ldr	r2, [pc, #104]	@ (800342c <HAL_DMA_IRQHandler+0x6c0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00e      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a19      	ldr	r2, [pc, #100]	@ (8003430 <HAL_DMA_IRQHandler+0x6c4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d009      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a17      	ldr	r2, [pc, #92]	@ (8003434 <HAL_DMA_IRQHandler+0x6c8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x678>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a16      	ldr	r2, [pc, #88]	@ (8003438 <HAL_DMA_IRQHandler+0x6cc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d12b      	bne.n	800343c <HAL_DMA_IRQHandler+0x6d0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bf14      	ite	ne
 80033f2:	2301      	movne	r3, #1
 80033f4:	2300      	moveq	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	e02a      	b.n	8003450 <HAL_DMA_IRQHandler+0x6e4>
 80033fa:	bf00      	nop
 80033fc:	40020010 	.word	0x40020010
 8003400:	40020028 	.word	0x40020028
 8003404:	40020040 	.word	0x40020040
 8003408:	40020058 	.word	0x40020058
 800340c:	40020070 	.word	0x40020070
 8003410:	40020088 	.word	0x40020088
 8003414:	400200a0 	.word	0x400200a0
 8003418:	400200b8 	.word	0x400200b8
 800341c:	40020410 	.word	0x40020410
 8003420:	40020428 	.word	0x40020428
 8003424:	40020440 	.word	0x40020440
 8003428:	40020458 	.word	0x40020458
 800342c:	40020470 	.word	0x40020470
 8003430:	40020488 	.word	0x40020488
 8003434:	400204a0 	.word	0x400204a0
 8003438:	400204b8 	.word	0x400204b8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8087 	beq.w	8003564 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	2220      	movs	r2, #32
 8003460:	409a      	lsls	r2, r3
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b04      	cmp	r3, #4
 8003470:	d139      	bne.n	80034e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0216 	bic.w	r2, r2, #22
 8003480:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003490:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d103      	bne.n	80034a2 <HAL_DMA_IRQHandler+0x736>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0208 	bic.w	r2, r2, #8
 80034b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	223f      	movs	r2, #63	@ 0x3f
 80034bc:	409a      	lsls	r2, r3
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 834a 	beq.w	8003b70 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
          }
          return;
 80034e4:	e344      	b.n	8003b70 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d018      	beq.n	8003526 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d108      	bne.n	8003514 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02c      	beq.n	8003564 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
 8003512:	e027      	b.n	8003564 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d023      	beq.n	8003564 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
 8003524:	e01e      	b.n	8003564 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10f      	bne.n	8003554 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0210 	bic.w	r2, r2, #16
 8003542:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8306 	beq.w	8003b7a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8088 	beq.w	800368c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2204      	movs	r2, #4
 8003580:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a7a      	ldr	r2, [pc, #488]	@ (8003774 <HAL_DMA_IRQHandler+0xa08>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04a      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a79      	ldr	r2, [pc, #484]	@ (8003778 <HAL_DMA_IRQHandler+0xa0c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d045      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a77      	ldr	r2, [pc, #476]	@ (800377c <HAL_DMA_IRQHandler+0xa10>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d040      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a76      	ldr	r2, [pc, #472]	@ (8003780 <HAL_DMA_IRQHandler+0xa14>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d03b      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a74      	ldr	r2, [pc, #464]	@ (8003784 <HAL_DMA_IRQHandler+0xa18>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a73      	ldr	r2, [pc, #460]	@ (8003788 <HAL_DMA_IRQHandler+0xa1c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d031      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a71      	ldr	r2, [pc, #452]	@ (800378c <HAL_DMA_IRQHandler+0xa20>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a70      	ldr	r2, [pc, #448]	@ (8003790 <HAL_DMA_IRQHandler+0xa24>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003794 <HAL_DMA_IRQHandler+0xa28>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003798 <HAL_DMA_IRQHandler+0xa2c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01d      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a6b      	ldr	r2, [pc, #428]	@ (800379c <HAL_DMA_IRQHandler+0xa30>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6a      	ldr	r2, [pc, #424]	@ (80037a0 <HAL_DMA_IRQHandler+0xa34>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a68      	ldr	r2, [pc, #416]	@ (80037a4 <HAL_DMA_IRQHandler+0xa38>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a67      	ldr	r2, [pc, #412]	@ (80037a8 <HAL_DMA_IRQHandler+0xa3c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a65      	ldr	r2, [pc, #404]	@ (80037ac <HAL_DMA_IRQHandler+0xa40>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_DMA_IRQHandler+0x8b8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a64      	ldr	r2, [pc, #400]	@ (80037b0 <HAL_DMA_IRQHandler+0xa44>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d108      	bne.n	8003636 <HAL_DMA_IRQHandler+0x8ca>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e007      	b.n	8003646 <HAL_DMA_IRQHandler+0x8da>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3301      	adds	r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364e:	429a      	cmp	r2, r3
 8003650:	d307      	bcc.n	8003662 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f2      	bne.n	8003646 <HAL_DMA_IRQHandler+0x8da>
 8003660:	e000      	b.n	8003664 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003662:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2203      	movs	r2, #3
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800367a:	e003      	b.n	8003684 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8272 	beq.w	8003b7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
 800369e:	e26c      	b.n	8003b7a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a43      	ldr	r2, [pc, #268]	@ (80037b4 <HAL_DMA_IRQHandler+0xa48>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d022      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x984>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a42      	ldr	r2, [pc, #264]	@ (80037b8 <HAL_DMA_IRQHandler+0xa4c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d01d      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x984>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a40      	ldr	r2, [pc, #256]	@ (80037bc <HAL_DMA_IRQHandler+0xa50>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d018      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x984>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3f      	ldr	r2, [pc, #252]	@ (80037c0 <HAL_DMA_IRQHandler+0xa54>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d013      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x984>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3d      	ldr	r2, [pc, #244]	@ (80037c4 <HAL_DMA_IRQHandler+0xa58>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00e      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x984>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a3c      	ldr	r2, [pc, #240]	@ (80037c8 <HAL_DMA_IRQHandler+0xa5c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d009      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x984>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a3a      	ldr	r2, [pc, #232]	@ (80037cc <HAL_DMA_IRQHandler+0xa60>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x984>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a39      	ldr	r2, [pc, #228]	@ (80037d0 <HAL_DMA_IRQHandler+0xa64>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d101      	bne.n	80036f4 <HAL_DMA_IRQHandler+0x988>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <HAL_DMA_IRQHandler+0x98a>
 80036f4:	2300      	movs	r3, #0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 823f 	beq.w	8003b7a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2204      	movs	r2, #4
 800370e:	409a      	lsls	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80cd 	beq.w	80038b4 <HAL_DMA_IRQHandler+0xb48>
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80c7 	beq.w	80038b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2204      	movs	r2, #4
 8003730:	409a      	lsls	r2, r3
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d049      	beq.n	80037d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8210 	beq.w	8003b74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800375c:	e20a      	b.n	8003b74 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8206 	beq.w	8003b74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003770:	e200      	b.n	8003b74 <HAL_DMA_IRQHandler+0xe08>
 8003772:	bf00      	nop
 8003774:	40020010 	.word	0x40020010
 8003778:	40020028 	.word	0x40020028
 800377c:	40020040 	.word	0x40020040
 8003780:	40020058 	.word	0x40020058
 8003784:	40020070 	.word	0x40020070
 8003788:	40020088 	.word	0x40020088
 800378c:	400200a0 	.word	0x400200a0
 8003790:	400200b8 	.word	0x400200b8
 8003794:	40020410 	.word	0x40020410
 8003798:	40020428 	.word	0x40020428
 800379c:	40020440 	.word	0x40020440
 80037a0:	40020458 	.word	0x40020458
 80037a4:	40020470 	.word	0x40020470
 80037a8:	40020488 	.word	0x40020488
 80037ac:	400204a0 	.word	0x400204a0
 80037b0:	400204b8 	.word	0x400204b8
 80037b4:	58025408 	.word	0x58025408
 80037b8:	5802541c 	.word	0x5802541c
 80037bc:	58025430 	.word	0x58025430
 80037c0:	58025444 	.word	0x58025444
 80037c4:	58025458 	.word	0x58025458
 80037c8:	5802546c 	.word	0x5802546c
 80037cc:	58025480 	.word	0x58025480
 80037d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d160      	bne.n	80038a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7f      	ldr	r2, [pc, #508]	@ (80039e0 <HAL_DMA_IRQHandler+0xc74>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d04a      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a7d      	ldr	r2, [pc, #500]	@ (80039e4 <HAL_DMA_IRQHandler+0xc78>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d045      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a7c      	ldr	r2, [pc, #496]	@ (80039e8 <HAL_DMA_IRQHandler+0xc7c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d040      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a7a      	ldr	r2, [pc, #488]	@ (80039ec <HAL_DMA_IRQHandler+0xc80>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d03b      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a79      	ldr	r2, [pc, #484]	@ (80039f0 <HAL_DMA_IRQHandler+0xc84>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d036      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a77      	ldr	r2, [pc, #476]	@ (80039f4 <HAL_DMA_IRQHandler+0xc88>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d031      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a76      	ldr	r2, [pc, #472]	@ (80039f8 <HAL_DMA_IRQHandler+0xc8c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d02c      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a74      	ldr	r2, [pc, #464]	@ (80039fc <HAL_DMA_IRQHandler+0xc90>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d027      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a73      	ldr	r2, [pc, #460]	@ (8003a00 <HAL_DMA_IRQHandler+0xc94>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d022      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a71      	ldr	r2, [pc, #452]	@ (8003a04 <HAL_DMA_IRQHandler+0xc98>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01d      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a70      	ldr	r2, [pc, #448]	@ (8003a08 <HAL_DMA_IRQHandler+0xc9c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d018      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a6e      	ldr	r2, [pc, #440]	@ (8003a0c <HAL_DMA_IRQHandler+0xca0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6d      	ldr	r2, [pc, #436]	@ (8003a10 <HAL_DMA_IRQHandler+0xca4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00e      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6b      	ldr	r2, [pc, #428]	@ (8003a14 <HAL_DMA_IRQHandler+0xca8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a6a      	ldr	r2, [pc, #424]	@ (8003a18 <HAL_DMA_IRQHandler+0xcac>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d004      	beq.n	800387e <HAL_DMA_IRQHandler+0xb12>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a68      	ldr	r2, [pc, #416]	@ (8003a1c <HAL_DMA_IRQHandler+0xcb0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <HAL_DMA_IRQHandler+0xb24>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0208 	bic.w	r2, r2, #8
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e007      	b.n	80038a0 <HAL_DMA_IRQHandler+0xb34>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0204 	bic.w	r2, r2, #4
 800389e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8165 	beq.w	8003b74 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038b2:	e15f      	b.n	8003b74 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2202      	movs	r2, #2
 80038be:	409a      	lsls	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80c5 	beq.w	8003a54 <HAL_DMA_IRQHandler+0xce8>
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80bf 	beq.w	8003a54 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	2202      	movs	r2, #2
 80038e0:	409a      	lsls	r2, r3
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d018      	beq.n	8003922 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 813a 	beq.w	8003b78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800390c:	e134      	b.n	8003b78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8130 	beq.w	8003b78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003920:	e12a      	b.n	8003b78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 8089 	bne.w	8003a40 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2b      	ldr	r2, [pc, #172]	@ (80039e0 <HAL_DMA_IRQHandler+0xc74>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d04a      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a29      	ldr	r2, [pc, #164]	@ (80039e4 <HAL_DMA_IRQHandler+0xc78>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d045      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a28      	ldr	r2, [pc, #160]	@ (80039e8 <HAL_DMA_IRQHandler+0xc7c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d040      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a26      	ldr	r2, [pc, #152]	@ (80039ec <HAL_DMA_IRQHandler+0xc80>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d03b      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a25      	ldr	r2, [pc, #148]	@ (80039f0 <HAL_DMA_IRQHandler+0xc84>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d036      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a23      	ldr	r2, [pc, #140]	@ (80039f4 <HAL_DMA_IRQHandler+0xc88>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d031      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a22      	ldr	r2, [pc, #136]	@ (80039f8 <HAL_DMA_IRQHandler+0xc8c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d02c      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a20      	ldr	r2, [pc, #128]	@ (80039fc <HAL_DMA_IRQHandler+0xc90>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d027      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1f      	ldr	r2, [pc, #124]	@ (8003a00 <HAL_DMA_IRQHandler+0xc94>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d022      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a04 <HAL_DMA_IRQHandler+0xc98>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01d      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1c      	ldr	r2, [pc, #112]	@ (8003a08 <HAL_DMA_IRQHandler+0xc9c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d018      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a0c <HAL_DMA_IRQHandler+0xca0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a19      	ldr	r2, [pc, #100]	@ (8003a10 <HAL_DMA_IRQHandler+0xca4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00e      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a17      	ldr	r2, [pc, #92]	@ (8003a14 <HAL_DMA_IRQHandler+0xca8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d009      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a16      	ldr	r2, [pc, #88]	@ (8003a18 <HAL_DMA_IRQHandler+0xcac>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <HAL_DMA_IRQHandler+0xc62>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a14      	ldr	r2, [pc, #80]	@ (8003a1c <HAL_DMA_IRQHandler+0xcb0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d128      	bne.n	8003a20 <HAL_DMA_IRQHandler+0xcb4>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0214 	bic.w	r2, r2, #20
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e027      	b.n	8003a30 <HAL_DMA_IRQHandler+0xcc4>
 80039e0:	40020010 	.word	0x40020010
 80039e4:	40020028 	.word	0x40020028
 80039e8:	40020040 	.word	0x40020040
 80039ec:	40020058 	.word	0x40020058
 80039f0:	40020070 	.word	0x40020070
 80039f4:	40020088 	.word	0x40020088
 80039f8:	400200a0 	.word	0x400200a0
 80039fc:	400200b8 	.word	0x400200b8
 8003a00:	40020410 	.word	0x40020410
 8003a04:	40020428 	.word	0x40020428
 8003a08:	40020440 	.word	0x40020440
 8003a0c:	40020458 	.word	0x40020458
 8003a10:	40020470 	.word	0x40020470
 8003a14:	40020488 	.word	0x40020488
 8003a18:	400204a0 	.word	0x400204a0
 8003a1c:	400204b8 	.word	0x400204b8
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 020a 	bic.w	r2, r2, #10
 8003a2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8097 	beq.w	8003b78 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a52:	e091      	b.n	8003b78 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8088 	beq.w	8003b7a <HAL_DMA_IRQHandler+0xe0e>
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8082 	beq.w	8003b7a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a41      	ldr	r2, [pc, #260]	@ (8003b80 <HAL_DMA_IRQHandler+0xe14>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d04a      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a3f      	ldr	r2, [pc, #252]	@ (8003b84 <HAL_DMA_IRQHandler+0xe18>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d045      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b88 <HAL_DMA_IRQHandler+0xe1c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d040      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a3c      	ldr	r2, [pc, #240]	@ (8003b8c <HAL_DMA_IRQHandler+0xe20>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d03b      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a3b      	ldr	r2, [pc, #236]	@ (8003b90 <HAL_DMA_IRQHandler+0xe24>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d036      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a39      	ldr	r2, [pc, #228]	@ (8003b94 <HAL_DMA_IRQHandler+0xe28>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d031      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a38      	ldr	r2, [pc, #224]	@ (8003b98 <HAL_DMA_IRQHandler+0xe2c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d02c      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a36      	ldr	r2, [pc, #216]	@ (8003b9c <HAL_DMA_IRQHandler+0xe30>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d027      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a35      	ldr	r2, [pc, #212]	@ (8003ba0 <HAL_DMA_IRQHandler+0xe34>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a33      	ldr	r2, [pc, #204]	@ (8003ba4 <HAL_DMA_IRQHandler+0xe38>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01d      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a32      	ldr	r2, [pc, #200]	@ (8003ba8 <HAL_DMA_IRQHandler+0xe3c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d018      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a30      	ldr	r2, [pc, #192]	@ (8003bac <HAL_DMA_IRQHandler+0xe40>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb0 <HAL_DMA_IRQHandler+0xe44>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00e      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb4 <HAL_DMA_IRQHandler+0xe48>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d009      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb8 <HAL_DMA_IRQHandler+0xe4c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xdaa>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2a      	ldr	r2, [pc, #168]	@ (8003bbc <HAL_DMA_IRQHandler+0xe50>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <HAL_DMA_IRQHandler+0xdbc>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 021c 	bic.w	r2, r2, #28
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e007      	b.n	8003b38 <HAL_DMA_IRQHandler+0xdcc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 020e 	bic.w	r2, r2, #14
 8003b36:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	2201      	movs	r2, #1
 8003b42:	409a      	lsls	r2, r3
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
 8003b6e:	e004      	b.n	8003b7a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b70:	bf00      	nop
 8003b72:	e002      	b.n	8003b7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b74:	bf00      	nop
 8003b76:	e000      	b.n	8003b7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b78:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b7a:	3728      	adds	r7, #40	@ 0x28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40020010 	.word	0x40020010
 8003b84:	40020028 	.word	0x40020028
 8003b88:	40020040 	.word	0x40020040
 8003b8c:	40020058 	.word	0x40020058
 8003b90:	40020070 	.word	0x40020070
 8003b94:	40020088 	.word	0x40020088
 8003b98:	400200a0 	.word	0x400200a0
 8003b9c:	400200b8 	.word	0x400200b8
 8003ba0:	40020410 	.word	0x40020410
 8003ba4:	40020428 	.word	0x40020428
 8003ba8:	40020440 	.word	0x40020440
 8003bac:	40020458 	.word	0x40020458
 8003bb0:	40020470 	.word	0x40020470
 8003bb4:	40020488 	.word	0x40020488
 8003bb8:	400204a0 	.word	0x400204a0
 8003bbc:	400204b8 	.word	0x400204b8

08003bc0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a7f      	ldr	r2, [pc, #508]	@ (8003df4 <DMA_SetConfig+0x21c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d072      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a7d      	ldr	r2, [pc, #500]	@ (8003df8 <DMA_SetConfig+0x220>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d06d      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003dfc <DMA_SetConfig+0x224>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d068      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a7a      	ldr	r2, [pc, #488]	@ (8003e00 <DMA_SetConfig+0x228>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d063      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a79      	ldr	r2, [pc, #484]	@ (8003e04 <DMA_SetConfig+0x22c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d05e      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a77      	ldr	r2, [pc, #476]	@ (8003e08 <DMA_SetConfig+0x230>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d059      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a76      	ldr	r2, [pc, #472]	@ (8003e0c <DMA_SetConfig+0x234>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d054      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a74      	ldr	r2, [pc, #464]	@ (8003e10 <DMA_SetConfig+0x238>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d04f      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a73      	ldr	r2, [pc, #460]	@ (8003e14 <DMA_SetConfig+0x23c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d04a      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a71      	ldr	r2, [pc, #452]	@ (8003e18 <DMA_SetConfig+0x240>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d045      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a70      	ldr	r2, [pc, #448]	@ (8003e1c <DMA_SetConfig+0x244>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d040      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a6e      	ldr	r2, [pc, #440]	@ (8003e20 <DMA_SetConfig+0x248>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d03b      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003e24 <DMA_SetConfig+0x24c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d036      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a6b      	ldr	r2, [pc, #428]	@ (8003e28 <DMA_SetConfig+0x250>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d031      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6a      	ldr	r2, [pc, #424]	@ (8003e2c <DMA_SetConfig+0x254>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d02c      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a68      	ldr	r2, [pc, #416]	@ (8003e30 <DMA_SetConfig+0x258>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d027      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a67      	ldr	r2, [pc, #412]	@ (8003e34 <DMA_SetConfig+0x25c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d022      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a65      	ldr	r2, [pc, #404]	@ (8003e38 <DMA_SetConfig+0x260>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01d      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a64      	ldr	r2, [pc, #400]	@ (8003e3c <DMA_SetConfig+0x264>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d018      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a62      	ldr	r2, [pc, #392]	@ (8003e40 <DMA_SetConfig+0x268>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a61      	ldr	r2, [pc, #388]	@ (8003e44 <DMA_SetConfig+0x26c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00e      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a5f      	ldr	r2, [pc, #380]	@ (8003e48 <DMA_SetConfig+0x270>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d009      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8003e4c <DMA_SetConfig+0x274>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <DMA_SetConfig+0x10a>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a5c      	ldr	r2, [pc, #368]	@ (8003e50 <DMA_SetConfig+0x278>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <DMA_SetConfig+0x10e>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <DMA_SetConfig+0x110>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cf4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d004      	beq.n	8003d08 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d06:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a39      	ldr	r2, [pc, #228]	@ (8003df4 <DMA_SetConfig+0x21c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d04a      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a38      	ldr	r2, [pc, #224]	@ (8003df8 <DMA_SetConfig+0x220>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d045      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a36      	ldr	r2, [pc, #216]	@ (8003dfc <DMA_SetConfig+0x224>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d040      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a35      	ldr	r2, [pc, #212]	@ (8003e00 <DMA_SetConfig+0x228>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d03b      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a33      	ldr	r2, [pc, #204]	@ (8003e04 <DMA_SetConfig+0x22c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d036      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a32      	ldr	r2, [pc, #200]	@ (8003e08 <DMA_SetConfig+0x230>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d031      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a30      	ldr	r2, [pc, #192]	@ (8003e0c <DMA_SetConfig+0x234>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d02c      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2f      	ldr	r2, [pc, #188]	@ (8003e10 <DMA_SetConfig+0x238>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d027      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e14 <DMA_SetConfig+0x23c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d022      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2c      	ldr	r2, [pc, #176]	@ (8003e18 <DMA_SetConfig+0x240>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d01d      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2a      	ldr	r2, [pc, #168]	@ (8003e1c <DMA_SetConfig+0x244>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d018      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a29      	ldr	r2, [pc, #164]	@ (8003e20 <DMA_SetConfig+0x248>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d013      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a27      	ldr	r2, [pc, #156]	@ (8003e24 <DMA_SetConfig+0x24c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00e      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a26      	ldr	r2, [pc, #152]	@ (8003e28 <DMA_SetConfig+0x250>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d009      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a24      	ldr	r2, [pc, #144]	@ (8003e2c <DMA_SetConfig+0x254>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <DMA_SetConfig+0x1d0>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a23      	ldr	r2, [pc, #140]	@ (8003e30 <DMA_SetConfig+0x258>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <DMA_SetConfig+0x1d4>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <DMA_SetConfig+0x1d6>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d059      	beq.n	8003e66 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	223f      	movs	r2, #63	@ 0x3f
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dd0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b40      	cmp	r3, #64	@ 0x40
 8003de0:	d138      	bne.n	8003e54 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003df2:	e086      	b.n	8003f02 <DMA_SetConfig+0x32a>
 8003df4:	40020010 	.word	0x40020010
 8003df8:	40020028 	.word	0x40020028
 8003dfc:	40020040 	.word	0x40020040
 8003e00:	40020058 	.word	0x40020058
 8003e04:	40020070 	.word	0x40020070
 8003e08:	40020088 	.word	0x40020088
 8003e0c:	400200a0 	.word	0x400200a0
 8003e10:	400200b8 	.word	0x400200b8
 8003e14:	40020410 	.word	0x40020410
 8003e18:	40020428 	.word	0x40020428
 8003e1c:	40020440 	.word	0x40020440
 8003e20:	40020458 	.word	0x40020458
 8003e24:	40020470 	.word	0x40020470
 8003e28:	40020488 	.word	0x40020488
 8003e2c:	400204a0 	.word	0x400204a0
 8003e30:	400204b8 	.word	0x400204b8
 8003e34:	58025408 	.word	0x58025408
 8003e38:	5802541c 	.word	0x5802541c
 8003e3c:	58025430 	.word	0x58025430
 8003e40:	58025444 	.word	0x58025444
 8003e44:	58025458 	.word	0x58025458
 8003e48:	5802546c 	.word	0x5802546c
 8003e4c:	58025480 	.word	0x58025480
 8003e50:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
}
 8003e64:	e04d      	b.n	8003f02 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a29      	ldr	r2, [pc, #164]	@ (8003f10 <DMA_SetConfig+0x338>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d022      	beq.n	8003eb6 <DMA_SetConfig+0x2de>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a27      	ldr	r2, [pc, #156]	@ (8003f14 <DMA_SetConfig+0x33c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01d      	beq.n	8003eb6 <DMA_SetConfig+0x2de>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a26      	ldr	r2, [pc, #152]	@ (8003f18 <DMA_SetConfig+0x340>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d018      	beq.n	8003eb6 <DMA_SetConfig+0x2de>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a24      	ldr	r2, [pc, #144]	@ (8003f1c <DMA_SetConfig+0x344>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <DMA_SetConfig+0x2de>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a23      	ldr	r2, [pc, #140]	@ (8003f20 <DMA_SetConfig+0x348>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <DMA_SetConfig+0x2de>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <DMA_SetConfig+0x34c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <DMA_SetConfig+0x2de>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a20      	ldr	r2, [pc, #128]	@ (8003f28 <DMA_SetConfig+0x350>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <DMA_SetConfig+0x2de>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <DMA_SetConfig+0x354>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <DMA_SetConfig+0x2e2>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <DMA_SetConfig+0x2e4>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d020      	beq.n	8003f02 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2201      	movs	r2, #1
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d108      	bne.n	8003ef2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	60da      	str	r2, [r3, #12]
}
 8003ef0:	e007      	b.n	8003f02 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	58025408 	.word	0x58025408
 8003f14:	5802541c 	.word	0x5802541c
 8003f18:	58025430 	.word	0x58025430
 8003f1c:	58025444 	.word	0x58025444
 8003f20:	58025458 	.word	0x58025458
 8003f24:	5802546c 	.word	0x5802546c
 8003f28:	58025480 	.word	0x58025480
 8003f2c:	58025494 	.word	0x58025494

08003f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a42      	ldr	r2, [pc, #264]	@ (8004048 <DMA_CalcBaseAndBitshift+0x118>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d04a      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a41      	ldr	r2, [pc, #260]	@ (800404c <DMA_CalcBaseAndBitshift+0x11c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d045      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a3f      	ldr	r2, [pc, #252]	@ (8004050 <DMA_CalcBaseAndBitshift+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d040      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8004054 <DMA_CalcBaseAndBitshift+0x124>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d03b      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3c      	ldr	r2, [pc, #240]	@ (8004058 <DMA_CalcBaseAndBitshift+0x128>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d036      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800405c <DMA_CalcBaseAndBitshift+0x12c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d031      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a39      	ldr	r2, [pc, #228]	@ (8004060 <DMA_CalcBaseAndBitshift+0x130>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d02c      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a38      	ldr	r2, [pc, #224]	@ (8004064 <DMA_CalcBaseAndBitshift+0x134>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d027      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a36      	ldr	r2, [pc, #216]	@ (8004068 <DMA_CalcBaseAndBitshift+0x138>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d022      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a35      	ldr	r2, [pc, #212]	@ (800406c <DMA_CalcBaseAndBitshift+0x13c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d01d      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a33      	ldr	r2, [pc, #204]	@ (8004070 <DMA_CalcBaseAndBitshift+0x140>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d018      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a32      	ldr	r2, [pc, #200]	@ (8004074 <DMA_CalcBaseAndBitshift+0x144>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d013      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a30      	ldr	r2, [pc, #192]	@ (8004078 <DMA_CalcBaseAndBitshift+0x148>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00e      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800407c <DMA_CalcBaseAndBitshift+0x14c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004080 <DMA_CalcBaseAndBitshift+0x150>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8004084 <DMA_CalcBaseAndBitshift+0x154>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d101      	bne.n	8003fdc <DMA_CalcBaseAndBitshift+0xac>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <DMA_CalcBaseAndBitshift+0xae>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d024      	beq.n	800402c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	3b10      	subs	r3, #16
 8003fea:	4a27      	ldr	r2, [pc, #156]	@ (8004088 <DMA_CalcBaseAndBitshift+0x158>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	4a24      	ldr	r2, [pc, #144]	@ (800408c <DMA_CalcBaseAndBitshift+0x15c>)
 8003ffc:	5cd3      	ldrb	r3, [r2, r3]
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d908      	bls.n	800401c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	4b1f      	ldr	r3, [pc, #124]	@ (8004090 <DMA_CalcBaseAndBitshift+0x160>)
 8004012:	4013      	ands	r3, r2
 8004014:	1d1a      	adds	r2, r3, #4
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	659a      	str	r2, [r3, #88]	@ 0x58
 800401a:	e00d      	b.n	8004038 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <DMA_CalcBaseAndBitshift+0x160>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6593      	str	r3, [r2, #88]	@ 0x58
 800402a:	e005      	b.n	8004038 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
 8004088:	aaaaaaab 	.word	0xaaaaaaab
 800408c:	0800cf1c 	.word	0x0800cf1c
 8004090:	fffffc00 	.word	0xfffffc00

08004094 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d120      	bne.n	80040ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d858      	bhi.n	8004162 <DMA_CheckFifoParam+0xce>
 80040b0:	a201      	add	r2, pc, #4	@ (adr r2, 80040b8 <DMA_CheckFifoParam+0x24>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040c9 	.word	0x080040c9
 80040bc:	080040db 	.word	0x080040db
 80040c0:	080040c9 	.word	0x080040c9
 80040c4:	08004163 	.word	0x08004163
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d048      	beq.n	8004166 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040d8:	e045      	b.n	8004166 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040e2:	d142      	bne.n	800416a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040e8:	e03f      	b.n	800416a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040f2:	d123      	bne.n	800413c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d838      	bhi.n	800416e <DMA_CheckFifoParam+0xda>
 80040fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004104 <DMA_CheckFifoParam+0x70>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004115 	.word	0x08004115
 8004108:	0800411b 	.word	0x0800411b
 800410c:	08004115 	.word	0x08004115
 8004110:	0800412d 	.word	0x0800412d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
        break;
 8004118:	e030      	b.n	800417c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d025      	beq.n	8004172 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800412a:	e022      	b.n	8004172 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004134:	d11f      	bne.n	8004176 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800413a:	e01c      	b.n	8004176 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004140:	2b02      	cmp	r3, #2
 8004142:	d902      	bls.n	800414a <DMA_CheckFifoParam+0xb6>
 8004144:	2b03      	cmp	r3, #3
 8004146:	d003      	beq.n	8004150 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004148:	e018      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
        break;
 800414e:	e015      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004154:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
    break;
 8004160:	e00b      	b.n	800417a <DMA_CheckFifoParam+0xe6>
        break;
 8004162:	bf00      	nop
 8004164:	e00a      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 8004166:	bf00      	nop
 8004168:	e008      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 800416a:	bf00      	nop
 800416c:	e006      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 800416e:	bf00      	nop
 8004170:	e004      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <DMA_CheckFifoParam+0xe8>
    break;
 800417a:	bf00      	nop
    }
  }

  return status;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop

0800418c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a38      	ldr	r2, [pc, #224]	@ (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d022      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a36      	ldr	r2, [pc, #216]	@ (8004284 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01d      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a35      	ldr	r2, [pc, #212]	@ (8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d018      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a33      	ldr	r2, [pc, #204]	@ (800428c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a32      	ldr	r2, [pc, #200]	@ (8004290 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a30      	ldr	r2, [pc, #192]	@ (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2f      	ldr	r2, [pc, #188]	@ (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2d      	ldr	r2, [pc, #180]	@ (800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01a      	beq.n	800422a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	3b08      	subs	r3, #8
 80041fc:	4a28      	ldr	r2, [pc, #160]	@ (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4b26      	ldr	r3, [pc, #152]	@ (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a24      	ldr	r2, [pc, #144]	@ (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004218:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2201      	movs	r2, #1
 8004222:	409a      	lsls	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004228:	e024      	b.n	8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	3b10      	subs	r3, #16
 8004232:	4a1e      	ldr	r2, [pc, #120]	@ (80042ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a1c      	ldr	r2, [pc, #112]	@ (80042b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d806      	bhi.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4a1b      	ldr	r2, [pc, #108]	@ (80042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d902      	bls.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3308      	adds	r3, #8
 8004250:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4b18      	ldr	r3, [pc, #96]	@ (80042b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a16      	ldr	r2, [pc, #88]	@ (80042bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004264:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	58025408 	.word	0x58025408
 8004284:	5802541c 	.word	0x5802541c
 8004288:	58025430 	.word	0x58025430
 800428c:	58025444 	.word	0x58025444
 8004290:	58025458 	.word	0x58025458
 8004294:	5802546c 	.word	0x5802546c
 8004298:	58025480 	.word	0x58025480
 800429c:	58025494 	.word	0x58025494
 80042a0:	cccccccd 	.word	0xcccccccd
 80042a4:	16009600 	.word	0x16009600
 80042a8:	58025880 	.word	0x58025880
 80042ac:	aaaaaaab 	.word	0xaaaaaaab
 80042b0:	400204b8 	.word	0x400204b8
 80042b4:	4002040f 	.word	0x4002040f
 80042b8:	10008200 	.word	0x10008200
 80042bc:	40020880 	.word	0x40020880

080042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04a      	beq.n	800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d847      	bhi.n	800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a25      	ldr	r2, [pc, #148]	@ (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a24      	ldr	r2, [pc, #144]	@ (800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d01d      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a22      	ldr	r2, [pc, #136]	@ (8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a21      	ldr	r2, [pc, #132]	@ (8004384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	@ (8004388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1e      	ldr	r2, [pc, #120]	@ (800438c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1c      	ldr	r2, [pc, #112]	@ (8004390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	@ (8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004330:	2300      	movs	r3, #0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4b17      	ldr	r3, [pc, #92]	@ (8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a15      	ldr	r2, [pc, #84]	@ (800439c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004348:	671a      	str	r2, [r3, #112]	@ 0x70
 800434a:	e009      	b.n	8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4b14      	ldr	r3, [pc, #80]	@ (80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	461a      	mov	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a11      	ldr	r2, [pc, #68]	@ (80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800435e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3b01      	subs	r3, #1
 8004364:	2201      	movs	r2, #1
 8004366:	409a      	lsls	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	58025408 	.word	0x58025408
 800437c:	5802541c 	.word	0x5802541c
 8004380:	58025430 	.word	0x58025430
 8004384:	58025444 	.word	0x58025444
 8004388:	58025458 	.word	0x58025458
 800438c:	5802546c 	.word	0x5802546c
 8004390:	58025480 	.word	0x58025480
 8004394:	58025494 	.word	0x58025494
 8004398:	1600963f 	.word	0x1600963f
 800439c:	58025940 	.word	0x58025940
 80043a0:	1000823f 	.word	0x1000823f
 80043a4:	40020940 	.word	0x40020940

080043a8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	7a1b      	ldrb	r3, [r3, #8]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d154      	bne.n	800446c <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4b      	ldr	r2, [pc, #300]	@ (80044f4 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d049      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a49      	ldr	r2, [pc, #292]	@ (80044f8 <HAL_DMAEx_ConfigMuxSync+0x150>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d044      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a48      	ldr	r2, [pc, #288]	@ (80044fc <HAL_DMAEx_ConfigMuxSync+0x154>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d03f      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a46      	ldr	r2, [pc, #280]	@ (8004500 <HAL_DMAEx_ConfigMuxSync+0x158>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d03a      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a45      	ldr	r2, [pc, #276]	@ (8004504 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d035      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a43      	ldr	r2, [pc, #268]	@ (8004508 <HAL_DMAEx_ConfigMuxSync+0x160>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d030      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a42      	ldr	r2, [pc, #264]	@ (800450c <HAL_DMAEx_ConfigMuxSync+0x164>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d02b      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a40      	ldr	r2, [pc, #256]	@ (8004510 <HAL_DMAEx_ConfigMuxSync+0x168>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d026      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a3f      	ldr	r2, [pc, #252]	@ (8004514 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d021      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a3d      	ldr	r2, [pc, #244]	@ (8004518 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d01c      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a3c      	ldr	r2, [pc, #240]	@ (800451c <HAL_DMAEx_ConfigMuxSync+0x174>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d017      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a3a      	ldr	r2, [pc, #232]	@ (8004520 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d012      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a39      	ldr	r2, [pc, #228]	@ (8004524 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00d      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a37      	ldr	r2, [pc, #220]	@ (8004528 <HAL_DMAEx_ConfigMuxSync+0x180>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d008      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a36      	ldr	r2, [pc, #216]	@ (800452c <HAL_DMAEx_ConfigMuxSync+0x184>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a34      	ldr	r2, [pc, #208]	@ (8004530 <HAL_DMAEx_ConfigMuxSync+0x188>)
 800445e:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	d131      	bne.n	80044dc <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_DMAEx_ConfigMuxSync+0xde>
 8004482:	2302      	movs	r3, #2
 8004484:	e02f      	b.n	80044e6 <HAL_DMAEx_ConfigMuxSync+0x13e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 800449c:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	b2d9      	uxtb	r1, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	061a      	lsls	r2, r3, #24
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	04db      	lsls	r3, r3, #19
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	7a1b      	ldrb	r3, [r3, #8]
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	431a      	orrs	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	7a5b      	ldrb	r3, [r3, #9]
 80044c4:	025b      	lsls	r3, r3, #9
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	430a      	orrs	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	e004      	b.n	80044e6 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40020010 	.word	0x40020010
 80044f8:	40020028 	.word	0x40020028
 80044fc:	40020040 	.word	0x40020040
 8004500:	40020058 	.word	0x40020058
 8004504:	40020070 	.word	0x40020070
 8004508:	40020088 	.word	0x40020088
 800450c:	400200a0 	.word	0x400200a0
 8004510:	400200b8 	.word	0x400200b8
 8004514:	40020410 	.word	0x40020410
 8004518:	40020428 	.word	0x40020428
 800451c:	40020440 	.word	0x40020440
 8004520:	40020458 	.word	0x40020458
 8004524:	40020470 	.word	0x40020470
 8004528:	40020488 	.word	0x40020488
 800452c:	400204a0 	.word	0x400204a0
 8004530:	400204b8 	.word	0x400204b8

08004534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004534:	b480      	push	{r7}
 8004536:	b089      	sub	sp, #36	@ 0x24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004542:	4b89      	ldr	r3, [pc, #548]	@ (8004768 <HAL_GPIO_Init+0x234>)
 8004544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004546:	e194      	b.n	8004872 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	2101      	movs	r1, #1
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	4013      	ands	r3, r2
 8004556:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 8186 	beq.w	800486c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d005      	beq.n	8004578 <HAL_GPIO_Init+0x44>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d130      	bne.n	80045da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	2203      	movs	r2, #3
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4013      	ands	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ae:	2201      	movs	r2, #1
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	f003 0201 	and.w	r2, r3, #1
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d017      	beq.n	8004616 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	2203      	movs	r2, #3
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d123      	bne.n	800466a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	08da      	lsrs	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3208      	adds	r2, #8
 800462a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	220f      	movs	r2, #15
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4313      	orrs	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	08da      	lsrs	r2, r3, #3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3208      	adds	r2, #8
 8004664:	69b9      	ldr	r1, [r7, #24]
 8004666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	2203      	movs	r2, #3
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0203 	and.w	r2, r3, #3
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4313      	orrs	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80e0 	beq.w	800486c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ac:	4b2f      	ldr	r3, [pc, #188]	@ (800476c <HAL_GPIO_Init+0x238>)
 80046ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046b2:	4a2e      	ldr	r2, [pc, #184]	@ (800476c <HAL_GPIO_Init+0x238>)
 80046b4:	f043 0302 	orr.w	r3, r3, #2
 80046b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80046bc:	4b2b      	ldr	r3, [pc, #172]	@ (800476c <HAL_GPIO_Init+0x238>)
 80046be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ca:	4a29      	ldr	r2, [pc, #164]	@ (8004770 <HAL_GPIO_Init+0x23c>)
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	089b      	lsrs	r3, r3, #2
 80046d0:	3302      	adds	r3, #2
 80046d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	220f      	movs	r2, #15
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a20      	ldr	r2, [pc, #128]	@ (8004774 <HAL_GPIO_Init+0x240>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d052      	beq.n	800479c <HAL_GPIO_Init+0x268>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004778 <HAL_GPIO_Init+0x244>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d031      	beq.n	8004762 <HAL_GPIO_Init+0x22e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1e      	ldr	r2, [pc, #120]	@ (800477c <HAL_GPIO_Init+0x248>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d02b      	beq.n	800475e <HAL_GPIO_Init+0x22a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1d      	ldr	r2, [pc, #116]	@ (8004780 <HAL_GPIO_Init+0x24c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d025      	beq.n	800475a <HAL_GPIO_Init+0x226>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1c      	ldr	r2, [pc, #112]	@ (8004784 <HAL_GPIO_Init+0x250>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01f      	beq.n	8004756 <HAL_GPIO_Init+0x222>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1b      	ldr	r2, [pc, #108]	@ (8004788 <HAL_GPIO_Init+0x254>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d019      	beq.n	8004752 <HAL_GPIO_Init+0x21e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1a      	ldr	r2, [pc, #104]	@ (800478c <HAL_GPIO_Init+0x258>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <HAL_GPIO_Init+0x21a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a19      	ldr	r2, [pc, #100]	@ (8004790 <HAL_GPIO_Init+0x25c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00d      	beq.n	800474a <HAL_GPIO_Init+0x216>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <HAL_GPIO_Init+0x260>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <HAL_GPIO_Init+0x212>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a17      	ldr	r2, [pc, #92]	@ (8004798 <HAL_GPIO_Init+0x264>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <HAL_GPIO_Init+0x20e>
 800473e:	2309      	movs	r3, #9
 8004740:	e02d      	b.n	800479e <HAL_GPIO_Init+0x26a>
 8004742:	230a      	movs	r3, #10
 8004744:	e02b      	b.n	800479e <HAL_GPIO_Init+0x26a>
 8004746:	2308      	movs	r3, #8
 8004748:	e029      	b.n	800479e <HAL_GPIO_Init+0x26a>
 800474a:	2307      	movs	r3, #7
 800474c:	e027      	b.n	800479e <HAL_GPIO_Init+0x26a>
 800474e:	2306      	movs	r3, #6
 8004750:	e025      	b.n	800479e <HAL_GPIO_Init+0x26a>
 8004752:	2305      	movs	r3, #5
 8004754:	e023      	b.n	800479e <HAL_GPIO_Init+0x26a>
 8004756:	2304      	movs	r3, #4
 8004758:	e021      	b.n	800479e <HAL_GPIO_Init+0x26a>
 800475a:	2303      	movs	r3, #3
 800475c:	e01f      	b.n	800479e <HAL_GPIO_Init+0x26a>
 800475e:	2302      	movs	r3, #2
 8004760:	e01d      	b.n	800479e <HAL_GPIO_Init+0x26a>
 8004762:	2301      	movs	r3, #1
 8004764:	e01b      	b.n	800479e <HAL_GPIO_Init+0x26a>
 8004766:	bf00      	nop
 8004768:	58000080 	.word	0x58000080
 800476c:	58024400 	.word	0x58024400
 8004770:	58000400 	.word	0x58000400
 8004774:	58020000 	.word	0x58020000
 8004778:	58020400 	.word	0x58020400
 800477c:	58020800 	.word	0x58020800
 8004780:	58020c00 	.word	0x58020c00
 8004784:	58021000 	.word	0x58021000
 8004788:	58021400 	.word	0x58021400
 800478c:	58021800 	.word	0x58021800
 8004790:	58021c00 	.word	0x58021c00
 8004794:	58022000 	.word	0x58022000
 8004798:	58022400 	.word	0x58022400
 800479c:	2300      	movs	r3, #0
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	f002 0203 	and.w	r2, r2, #3
 80047a4:	0092      	lsls	r2, r2, #2
 80047a6:	4093      	lsls	r3, r2
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047ae:	4938      	ldr	r1, [pc, #224]	@ (8004890 <HAL_GPIO_Init+0x35c>)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	3302      	adds	r3, #2
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	43db      	mvns	r3, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	43db      	mvns	r3, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4013      	ands	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	3301      	adds	r3, #1
 8004870:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	f47f ae63 	bne.w	8004548 <HAL_GPIO_Init+0x14>
  }
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	3724      	adds	r7, #36	@ 0x24
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	58000400 	.word	0x58000400

08004894 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800489c:	4a08      	ldr	r2, [pc, #32]	@ (80048c0 <HAL_HSEM_FastTake+0x2c>)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3320      	adds	r3, #32
 80048a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a6:	4a07      	ldr	r2, [pc, #28]	@ (80048c4 <HAL_HSEM_FastTake+0x30>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d101      	bne.n	80048b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	e000      	b.n	80048b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	58026400 	.word	0x58026400
 80048c4:	80000300 	.word	0x80000300

080048c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80048d2:	4906      	ldr	r1, [pc, #24]	@ (80048ec <HAL_HSEM_Release+0x24>)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	58026400 	.word	0x58026400

080048f0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80048f8:	4b29      	ldr	r3, [pc, #164]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	2b06      	cmp	r3, #6
 8004902:	d00a      	beq.n	800491a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004904:	4b26      	ldr	r3, [pc, #152]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	429a      	cmp	r2, r3
 8004910:	d001      	beq.n	8004916 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e040      	b.n	8004998 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e03e      	b.n	8004998 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800491a:	4b21      	ldr	r3, [pc, #132]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004922:	491f      	ldr	r1, [pc, #124]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4313      	orrs	r3, r2
 8004928:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800492a:	f7fc fd31 	bl	8001390 <HAL_GetTick>
 800492e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004930:	e009      	b.n	8004946 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004932:	f7fc fd2d 	bl	8001390 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004940:	d901      	bls.n	8004946 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e028      	b.n	8004998 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004946:	4b16      	ldr	r3, [pc, #88]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800494e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004952:	d1ee      	bne.n	8004932 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b1e      	cmp	r3, #30
 8004958:	d008      	beq.n	800496c <HAL_PWREx_ConfigSupply+0x7c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b2e      	cmp	r3, #46	@ 0x2e
 800495e:	d005      	beq.n	800496c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b1d      	cmp	r3, #29
 8004964:	d002      	beq.n	800496c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b2d      	cmp	r3, #45	@ 0x2d
 800496a:	d114      	bne.n	8004996 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800496c:	f7fc fd10 	bl	8001390 <HAL_GetTick>
 8004970:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004972:	e009      	b.n	8004988 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004974:	f7fc fd0c 	bl	8001390 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004982:	d901      	bls.n	8004988 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e007      	b.n	8004998 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004988:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004994:	d1ee      	bne.n	8004974 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	58024800 	.word	0x58024800

080049a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	@ 0x30
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f000 bc48 	b.w	8005248 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8088 	beq.w	8004ad6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c6:	4b99      	ldr	r3, [pc, #612]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049d0:	4b96      	ldr	r3, [pc, #600]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d007      	beq.n	80049ec <HAL_RCC_OscConfig+0x48>
 80049dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049de:	2b18      	cmp	r3, #24
 80049e0:	d111      	bne.n	8004a06 <HAL_RCC_OscConfig+0x62>
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d10c      	bne.n	8004a06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ec:	4b8f      	ldr	r3, [pc, #572]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d06d      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x130>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d169      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f000 bc21 	b.w	8005248 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a0e:	d106      	bne.n	8004a1e <HAL_RCC_OscConfig+0x7a>
 8004a10:	4b86      	ldr	r3, [pc, #536]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a85      	ldr	r2, [pc, #532]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	e02e      	b.n	8004a7c <HAL_RCC_OscConfig+0xd8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10c      	bne.n	8004a40 <HAL_RCC_OscConfig+0x9c>
 8004a26:	4b81      	ldr	r3, [pc, #516]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a80      	ldr	r2, [pc, #512]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	4b7e      	ldr	r3, [pc, #504]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a7d      	ldr	r2, [pc, #500]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e01d      	b.n	8004a7c <HAL_RCC_OscConfig+0xd8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0xc0>
 8004a4a:	4b78      	ldr	r3, [pc, #480]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a77      	ldr	r2, [pc, #476]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b75      	ldr	r3, [pc, #468]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a74      	ldr	r2, [pc, #464]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e00b      	b.n	8004a7c <HAL_RCC_OscConfig+0xd8>
 8004a64:	4b71      	ldr	r3, [pc, #452]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a70      	ldr	r2, [pc, #448]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	4b6e      	ldr	r3, [pc, #440]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a6d      	ldr	r2, [pc, #436]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d013      	beq.n	8004aac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fc fc84 	bl	8001390 <HAL_GetTick>
 8004a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a8c:	f7fc fc80 	bl	8001390 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b64      	cmp	r3, #100	@ 0x64
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e3d4      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a9e:	4b63      	ldr	r3, [pc, #396]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0xe8>
 8004aaa:	e014      	b.n	8004ad6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fc fc70 	bl	8001390 <HAL_GetTick>
 8004ab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab4:	f7fc fc6c 	bl	8001390 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	@ 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e3c0      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ac6:	4b59      	ldr	r3, [pc, #356]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x110>
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80ca 	beq.w	8004c78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ae4:	4b51      	ldr	r3, [pc, #324]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004aee:	4b4f      	ldr	r3, [pc, #316]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_RCC_OscConfig+0x166>
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	2b18      	cmp	r3, #24
 8004afe:	d156      	bne.n	8004bae <HAL_RCC_OscConfig+0x20a>
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d151      	bne.n	8004bae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0a:	4b48      	ldr	r3, [pc, #288]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_RCC_OscConfig+0x17e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e392      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b22:	4b42      	ldr	r3, [pc, #264]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 0219 	bic.w	r2, r3, #25
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	493f      	ldr	r1, [pc, #252]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fc fc2c 	bl	8001390 <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b3c:	f7fc fc28 	bl	8001390 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e37c      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b4e:	4b37      	ldr	r3, [pc, #220]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5a:	f7fc fc49 	bl	80013f0 <HAL_GetREVID>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d817      	bhi.n	8004b98 <HAL_RCC_OscConfig+0x1f4>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b40      	cmp	r3, #64	@ 0x40
 8004b6e:	d108      	bne.n	8004b82 <HAL_RCC_OscConfig+0x1de>
 8004b70:	4b2e      	ldr	r3, [pc, #184]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b78:	4a2c      	ldr	r2, [pc, #176]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b80:	e07a      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b82:	4b2a      	ldr	r3, [pc, #168]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	031b      	lsls	r3, r3, #12
 8004b90:	4926      	ldr	r1, [pc, #152]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b96:	e06f      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b98:	4b24      	ldr	r3, [pc, #144]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	061b      	lsls	r3, r3, #24
 8004ba6:	4921      	ldr	r1, [pc, #132]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bac:	e064      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d047      	beq.n	8004c46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 0219 	bic.w	r2, r3, #25
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	491a      	ldr	r1, [pc, #104]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fc fbe2 	bl	8001390 <HAL_GetTick>
 8004bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd0:	f7fc fbde 	bl	8001390 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e332      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be2:	4b12      	ldr	r3, [pc, #72]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	f7fc fbff 	bl	80013f0 <HAL_GetREVID>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d819      	bhi.n	8004c30 <HAL_RCC_OscConfig+0x28c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d108      	bne.n	8004c16 <HAL_RCC_OscConfig+0x272>
 8004c04:	4b09      	ldr	r3, [pc, #36]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c0c:	4a07      	ldr	r2, [pc, #28]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c12:	6053      	str	r3, [r2, #4]
 8004c14:	e030      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
 8004c16:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	031b      	lsls	r3, r3, #12
 8004c24:	4901      	ldr	r1, [pc, #4]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	604b      	str	r3, [r1, #4]
 8004c2a:	e025      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	4b9a      	ldr	r3, [pc, #616]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	4997      	ldr	r1, [pc, #604]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
 8004c44:	e018      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c46:	4b95      	ldr	r3, [pc, #596]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a94      	ldr	r2, [pc, #592]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fc fb9d 	bl	8001390 <HAL_GetTick>
 8004c56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5a:	f7fc fb99 	bl	8001390 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e2ed      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c6c:	4b8b      	ldr	r3, [pc, #556]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f0      	bne.n	8004c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80a9 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c86:	4b85      	ldr	r3, [pc, #532]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c90:	4b82      	ldr	r3, [pc, #520]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d007      	beq.n	8004cac <HAL_RCC_OscConfig+0x308>
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b18      	cmp	r3, #24
 8004ca0:	d13a      	bne.n	8004d18 <HAL_RCC_OscConfig+0x374>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d135      	bne.n	8004d18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cac:	4b7b      	ldr	r3, [pc, #492]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x320>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	2b80      	cmp	r3, #128	@ 0x80
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e2c1      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cc4:	f7fc fb94 	bl	80013f0 <HAL_GetREVID>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d817      	bhi.n	8004d02 <HAL_RCC_OscConfig+0x35e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d108      	bne.n	8004cec <HAL_RCC_OscConfig+0x348>
 8004cda:	4b70      	ldr	r3, [pc, #448]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004ce4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ce8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cea:	e075      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cec:	4b6b      	ldr	r3, [pc, #428]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	069b      	lsls	r3, r3, #26
 8004cfa:	4968      	ldr	r1, [pc, #416]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d00:	e06a      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d02:	4b66      	ldr	r3, [pc, #408]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	061b      	lsls	r3, r3, #24
 8004d10:	4962      	ldr	r1, [pc, #392]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d16:	e05f      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d042      	beq.n	8004da6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d20:	4b5e      	ldr	r3, [pc, #376]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5d      	ldr	r2, [pc, #372]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fc fb30 	bl	8001390 <HAL_GetTick>
 8004d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d34:	f7fc fb2c 	bl	8001390 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e280      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d46:	4b55      	ldr	r3, [pc, #340]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d52:	f7fc fb4d 	bl	80013f0 <HAL_GetREVID>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d817      	bhi.n	8004d90 <HAL_RCC_OscConfig+0x3ec>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d108      	bne.n	8004d7a <HAL_RCC_OscConfig+0x3d6>
 8004d68:	4b4c      	ldr	r3, [pc, #304]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d70:	4a4a      	ldr	r2, [pc, #296]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d76:	6053      	str	r3, [r2, #4]
 8004d78:	e02e      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
 8004d7a:	4b48      	ldr	r3, [pc, #288]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	069b      	lsls	r3, r3, #26
 8004d88:	4944      	ldr	r1, [pc, #272]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	604b      	str	r3, [r1, #4]
 8004d8e:	e023      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
 8004d90:	4b42      	ldr	r3, [pc, #264]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	493f      	ldr	r1, [pc, #252]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60cb      	str	r3, [r1, #12]
 8004da4:	e018      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004da6:	4b3d      	ldr	r3, [pc, #244]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a3c      	ldr	r2, [pc, #240]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fc faed 	bl	8001390 <HAL_GetTick>
 8004db6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004dba:	f7fc fae9 	bl	8001390 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e23d      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dcc:	4b33      	ldr	r3, [pc, #204]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d036      	beq.n	8004e52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d019      	beq.n	8004e20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dec:	4b2b      	ldr	r3, [pc, #172]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fc faca 	bl	8001390 <HAL_GetTick>
 8004dfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e00:	f7fc fac6 	bl	8001390 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e21a      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e12:	4b22      	ldr	r3, [pc, #136]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0x45c>
 8004e1e:	e018      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e20:	4b1e      	ldr	r3, [pc, #120]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e24:	4a1d      	ldr	r2, [pc, #116]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fc fab0 	bl	8001390 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e34:	f7fc faac 	bl	8001390 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e200      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e46:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d039      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01c      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e66:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e72:	f7fc fa8d 	bl	8001390 <HAL_GetTick>
 8004e76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e7a:	f7fc fa89 	bl	8001390 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e1dd      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e8c:	4b03      	ldr	r3, [pc, #12]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x4d6>
 8004e98:	e01b      	b.n	8004ed2 <HAL_RCC_OscConfig+0x52e>
 8004e9a:	bf00      	nop
 8004e9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ea0:	4b9b      	ldr	r3, [pc, #620]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a9a      	ldr	r2, [pc, #616]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004ea6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eaa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eac:	f7fc fa70 	bl	8001390 <HAL_GetTick>
 8004eb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eb4:	f7fc fa6c 	bl	8001390 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e1c0      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ec6:	4b92      	ldr	r3, [pc, #584]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8081 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8005114 <HAL_RCC_OscConfig+0x770>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a8b      	ldr	r2, [pc, #556]	@ (8005114 <HAL_RCC_OscConfig+0x770>)
 8004ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eec:	f7fc fa50 	bl	8001390 <HAL_GetTick>
 8004ef0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef4:	f7fc fa4c 	bl	8001390 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	@ 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e1a0      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f06:	4b83      	ldr	r3, [pc, #524]	@ (8005114 <HAL_RCC_OscConfig+0x770>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d106      	bne.n	8004f28 <HAL_RCC_OscConfig+0x584>
 8004f1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f26:	e02d      	b.n	8004f84 <HAL_RCC_OscConfig+0x5e0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x5a6>
 8004f30:	4b77      	ldr	r3, [pc, #476]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f34:	4a76      	ldr	r2, [pc, #472]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3c:	4b74      	ldr	r3, [pc, #464]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f40:	4a73      	ldr	r2, [pc, #460]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f42:	f023 0304 	bic.w	r3, r3, #4
 8004f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f48:	e01c      	b.n	8004f84 <HAL_RCC_OscConfig+0x5e0>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x5c8>
 8004f52:	4b6f      	ldr	r3, [pc, #444]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f56:	4a6e      	ldr	r2, [pc, #440]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f58:	f043 0304 	orr.w	r3, r3, #4
 8004f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f5e:	4b6c      	ldr	r3, [pc, #432]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f62:	4a6b      	ldr	r2, [pc, #428]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6a:	e00b      	b.n	8004f84 <HAL_RCC_OscConfig+0x5e0>
 8004f6c:	4b68      	ldr	r3, [pc, #416]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f70:	4a67      	ldr	r2, [pc, #412]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f78:	4b65      	ldr	r3, [pc, #404]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7c:	4a64      	ldr	r2, [pc, #400]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f7e:	f023 0304 	bic.w	r3, r3, #4
 8004f82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fc fa00 	bl	8001390 <HAL_GetTick>
 8004f90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f94:	f7fc f9fc 	bl	8001390 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e14e      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004faa:	4b59      	ldr	r3, [pc, #356]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0ee      	beq.n	8004f94 <HAL_RCC_OscConfig+0x5f0>
 8004fb6:	e014      	b.n	8004fe2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fc f9ea 	bl	8001390 <HAL_GetTick>
 8004fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fc f9e6 	bl	8001390 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e138      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fd6:	4b4e      	ldr	r3, [pc, #312]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1ee      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 812d 	beq.w	8005246 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fec:	4b48      	ldr	r3, [pc, #288]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ff4:	2b18      	cmp	r3, #24
 8004ff6:	f000 80bd 	beq.w	8005174 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	f040 809e 	bne.w	8005140 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005004:	4b42      	ldr	r3, [pc, #264]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a41      	ldr	r2, [pc, #260]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 800500a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800500e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fc f9be 	bl	8001390 <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fc f9ba 	bl	8001390 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e10e      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800502a:	4b39      	ldr	r3, [pc, #228]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005036:	4b36      	ldr	r3, [pc, #216]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800503a:	4b37      	ldr	r3, [pc, #220]	@ (8005118 <HAL_RCC_OscConfig+0x774>)
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005046:	0112      	lsls	r2, r2, #4
 8005048:	430a      	orrs	r2, r1
 800504a:	4931      	ldr	r1, [pc, #196]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 800504c:	4313      	orrs	r3, r2
 800504e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005054:	3b01      	subs	r3, #1
 8005056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505e:	3b01      	subs	r3, #1
 8005060:	025b      	lsls	r3, r3, #9
 8005062:	b29b      	uxth	r3, r3
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506a:	3b01      	subs	r3, #1
 800506c:	041b      	lsls	r3, r3, #16
 800506e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005078:	3b01      	subs	r3, #1
 800507a:	061b      	lsls	r3, r3, #24
 800507c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005080:	4923      	ldr	r1, [pc, #140]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005082:	4313      	orrs	r3, r2
 8005084:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005086:	4b22      	ldr	r3, [pc, #136]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005092:	4b1f      	ldr	r3, [pc, #124]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005096:	4b21      	ldr	r3, [pc, #132]	@ (800511c <HAL_RCC_OscConfig+0x778>)
 8005098:	4013      	ands	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800509e:	00d2      	lsls	r2, r2, #3
 80050a0:	491b      	ldr	r1, [pc, #108]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050aa:	f023 020c 	bic.w	r2, r3, #12
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	4917      	ldr	r1, [pc, #92]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050b8:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	f023 0202 	bic.w	r2, r3, #2
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c4:	4912      	ldr	r1, [pc, #72]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050ca:	4b11      	ldr	r3, [pc, #68]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	4a10      	ldr	r2, [pc, #64]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	4a0d      	ldr	r2, [pc, #52]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80050ee:	4b08      	ldr	r3, [pc, #32]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	4a07      	ldr	r2, [pc, #28]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050fa:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a04      	ldr	r2, [pc, #16]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005100:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fc f943 	bl	8001390 <HAL_GetTick>
 800510a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800510c:	e011      	b.n	8005132 <HAL_RCC_OscConfig+0x78e>
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
 8005114:	58024800 	.word	0x58024800
 8005118:	fffffc0c 	.word	0xfffffc0c
 800511c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005120:	f7fc f936 	bl	8001390 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e08a      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005132:	4b47      	ldr	r3, [pc, #284]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <HAL_RCC_OscConfig+0x77c>
 800513e:	e082      	b.n	8005246 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005140:	4b43      	ldr	r3, [pc, #268]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a42      	ldr	r2, [pc, #264]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800514a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fc f920 	bl	8001390 <HAL_GetTick>
 8005150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005154:	f7fc f91c 	bl	8001390 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e070      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005166:	4b3a      	ldr	r3, [pc, #232]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x7b0>
 8005172:	e068      	b.n	8005246 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005174:	4b36      	ldr	r3, [pc, #216]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800517a:	4b35      	ldr	r3, [pc, #212]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	2b01      	cmp	r3, #1
 8005186:	d031      	beq.n	80051ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f003 0203 	and.w	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d12a      	bne.n	80051ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d122      	bne.n	80051ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d11a      	bne.n	80051ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	0a5b      	lsrs	r3, r3, #9
 80051ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d111      	bne.n	80051ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d108      	bne.n	80051ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	0e1b      	lsrs	r3, r3, #24
 80051de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e02b      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80051f0:	4b17      	ldr	r3, [pc, #92]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 80051f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f4:	08db      	lsrs	r3, r3, #3
 80051f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	429a      	cmp	r2, r3
 8005204:	d01f      	beq.n	8005246 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005206:	4b12      	ldr	r3, [pc, #72]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	4a11      	ldr	r2, [pc, #68]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005212:	f7fc f8bd 	bl	8001390 <HAL_GetTick>
 8005216:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005218:	bf00      	nop
 800521a:	f7fc f8b9 	bl	8001390 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	4293      	cmp	r3, r2
 8005224:	d0f9      	beq.n	800521a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005226:	4b0a      	ldr	r3, [pc, #40]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522a:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <HAL_RCC_OscConfig+0x8b0>)
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005232:	00d2      	lsls	r2, r2, #3
 8005234:	4906      	ldr	r1, [pc, #24]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005236:	4313      	orrs	r3, r2
 8005238:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800523a:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	4a04      	ldr	r2, [pc, #16]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3730      	adds	r7, #48	@ 0x30
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	58024400 	.word	0x58024400
 8005254:	ffff0007 	.word	0xffff0007

08005258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e19c      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b8a      	ldr	r3, [pc, #552]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d910      	bls.n	800529c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b87      	ldr	r3, [pc, #540]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 020f 	bic.w	r2, r3, #15
 8005282:	4985      	ldr	r1, [pc, #532]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b83      	ldr	r3, [pc, #524]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e184      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d010      	beq.n	80052ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	4b7b      	ldr	r3, [pc, #492]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d908      	bls.n	80052ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052b8:	4b78      	ldr	r3, [pc, #480]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	4975      	ldr	r1, [pc, #468]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d010      	beq.n	80052f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	4b70      	ldr	r3, [pc, #448]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d908      	bls.n	80052f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052e6:	4b6d      	ldr	r3, [pc, #436]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	496a      	ldr	r1, [pc, #424]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	4b64      	ldr	r3, [pc, #400]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005310:	429a      	cmp	r2, r3
 8005312:	d908      	bls.n	8005326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005314:	4b61      	ldr	r3, [pc, #388]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	495e      	ldr	r1, [pc, #376]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005322:	4313      	orrs	r3, r2
 8005324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d010      	beq.n	8005354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	4b59      	ldr	r3, [pc, #356]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800533e:	429a      	cmp	r2, r3
 8005340:	d908      	bls.n	8005354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005342:	4b56      	ldr	r3, [pc, #344]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	4953      	ldr	r1, [pc, #332]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005350:	4313      	orrs	r3, r2
 8005352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d010      	beq.n	8005382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	4b4d      	ldr	r3, [pc, #308]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	429a      	cmp	r2, r3
 800536e:	d908      	bls.n	8005382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005370:	4b4a      	ldr	r3, [pc, #296]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f023 020f 	bic.w	r2, r3, #15
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4947      	ldr	r1, [pc, #284]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 800537e:	4313      	orrs	r3, r2
 8005380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d055      	beq.n	800543a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800538e:	4b43      	ldr	r3, [pc, #268]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	4940      	ldr	r1, [pc, #256]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 800539c:	4313      	orrs	r3, r2
 800539e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053a8:	4b3c      	ldr	r3, [pc, #240]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d121      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0f6      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053c0:	4b36      	ldr	r3, [pc, #216]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d115      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0ea      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d107      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053d8:	4b30      	ldr	r3, [pc, #192]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0de      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053e8:	4b2c      	ldr	r3, [pc, #176]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0d6      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053f8:	4b28      	ldr	r3, [pc, #160]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f023 0207 	bic.w	r2, r3, #7
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4925      	ldr	r1, [pc, #148]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005406:	4313      	orrs	r3, r2
 8005408:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540a:	f7fb ffc1 	bl	8001390 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005410:	e00a      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005412:	f7fb ffbd 	bl	8001390 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005420:	4293      	cmp	r3, r2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e0be      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005428:	4b1c      	ldr	r3, [pc, #112]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	429a      	cmp	r2, r3
 8005438:	d1eb      	bne.n	8005412 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d010      	beq.n	8005468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	4b14      	ldr	r3, [pc, #80]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	429a      	cmp	r2, r3
 8005454:	d208      	bcs.n	8005468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005456:	4b11      	ldr	r3, [pc, #68]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f023 020f 	bic.w	r2, r3, #15
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	490e      	ldr	r1, [pc, #56]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005464:	4313      	orrs	r3, r2
 8005466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d214      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005476:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 020f 	bic.w	r2, r3, #15
 800547e:	4906      	ldr	r1, [pc, #24]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b04      	ldr	r3, [pc, #16]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d005      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e086      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
 8005498:	52002000 	.word	0x52002000
 800549c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	4b3f      	ldr	r3, [pc, #252]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d208      	bcs.n	80054ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054bc:	4b3c      	ldr	r3, [pc, #240]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	4939      	ldr	r1, [pc, #228]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	4b34      	ldr	r3, [pc, #208]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d208      	bcs.n	80054fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054ea:	4b31      	ldr	r3, [pc, #196]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	492e      	ldr	r1, [pc, #184]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	4b28      	ldr	r3, [pc, #160]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005514:	429a      	cmp	r2, r3
 8005516:	d208      	bcs.n	800552a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005518:	4b25      	ldr	r3, [pc, #148]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	4922      	ldr	r1, [pc, #136]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005526:	4313      	orrs	r3, r2
 8005528:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d010      	beq.n	8005558 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69da      	ldr	r2, [r3, #28]
 800553a:	4b1d      	ldr	r3, [pc, #116]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005542:	429a      	cmp	r2, r3
 8005544:	d208      	bcs.n	8005558 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005546:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4917      	ldr	r1, [pc, #92]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005554:	4313      	orrs	r3, r2
 8005556:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005558:	f000 f834 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 800555c:	4602      	mov	r2, r0
 800555e:	4b14      	ldr	r3, [pc, #80]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	4912      	ldr	r1, [pc, #72]	@ (80055b4 <HAL_RCC_ClockConfig+0x35c>)
 800556a:	5ccb      	ldrb	r3, [r1, r3]
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005576:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	4a0d      	ldr	r2, [pc, #52]	@ (80055b4 <HAL_RCC_ClockConfig+0x35c>)
 8005580:	5cd3      	ldrb	r3, [r2, r3]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
 800558c:	4a0a      	ldr	r2, [pc, #40]	@ (80055b8 <HAL_RCC_ClockConfig+0x360>)
 800558e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005590:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <HAL_RCC_ClockConfig+0x364>)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005596:	4b0a      	ldr	r3, [pc, #40]	@ (80055c0 <HAL_RCC_ClockConfig+0x368>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fb feae 	bl	80012fc <HAL_InitTick>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
 80055b4:	0800cf0c 	.word	0x0800cf0c
 80055b8:	24000004 	.word	0x24000004
 80055bc:	24000000 	.word	0x24000000
 80055c0:	24000008 	.word	0x24000008

080055c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b089      	sub	sp, #36	@ 0x24
 80055c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ca:	4bb3      	ldr	r3, [pc, #716]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055d2:	2b18      	cmp	r3, #24
 80055d4:	f200 8155 	bhi.w	8005882 <HAL_RCC_GetSysClockFreq+0x2be>
 80055d8:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	08005645 	.word	0x08005645
 80055e4:	08005883 	.word	0x08005883
 80055e8:	08005883 	.word	0x08005883
 80055ec:	08005883 	.word	0x08005883
 80055f0:	08005883 	.word	0x08005883
 80055f4:	08005883 	.word	0x08005883
 80055f8:	08005883 	.word	0x08005883
 80055fc:	08005883 	.word	0x08005883
 8005600:	0800566b 	.word	0x0800566b
 8005604:	08005883 	.word	0x08005883
 8005608:	08005883 	.word	0x08005883
 800560c:	08005883 	.word	0x08005883
 8005610:	08005883 	.word	0x08005883
 8005614:	08005883 	.word	0x08005883
 8005618:	08005883 	.word	0x08005883
 800561c:	08005883 	.word	0x08005883
 8005620:	08005671 	.word	0x08005671
 8005624:	08005883 	.word	0x08005883
 8005628:	08005883 	.word	0x08005883
 800562c:	08005883 	.word	0x08005883
 8005630:	08005883 	.word	0x08005883
 8005634:	08005883 	.word	0x08005883
 8005638:	08005883 	.word	0x08005883
 800563c:	08005883 	.word	0x08005883
 8005640:	08005677 	.word	0x08005677
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005644:	4b94      	ldr	r3, [pc, #592]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005650:	4b91      	ldr	r3, [pc, #580]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	08db      	lsrs	r3, r3, #3
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	4a90      	ldr	r2, [pc, #576]	@ (800589c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
 8005660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005662:	e111      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005664:	4b8d      	ldr	r3, [pc, #564]	@ (800589c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005666:	61bb      	str	r3, [r7, #24]
      break;
 8005668:	e10e      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800566a:	4b8d      	ldr	r3, [pc, #564]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800566c:	61bb      	str	r3, [r7, #24]
      break;
 800566e:	e10b      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005670:	4b8c      	ldr	r3, [pc, #560]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005672:	61bb      	str	r3, [r7, #24]
      break;
 8005674:	e108      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005676:	4b88      	ldr	r3, [pc, #544]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005680:	4b85      	ldr	r3, [pc, #532]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005684:	091b      	lsrs	r3, r3, #4
 8005686:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800568a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800568c:	4b82      	ldr	r3, [pc, #520]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005696:	4b80      	ldr	r3, [pc, #512]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569a:	08db      	lsrs	r3, r3, #3
 800569c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80e1 	beq.w	800587c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f000 8083 	beq.w	80057c8 <HAL_RCC_GetSysClockFreq+0x204>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	f200 80a1 	bhi.w	800580c <HAL_RCC_GetSysClockFreq+0x248>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0x114>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d056      	beq.n	8005784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056d6:	e099      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02d      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056e4:	4b6c      	ldr	r3, [pc, #432]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	4a6b      	ldr	r2, [pc, #428]	@ (800589c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
 80056f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	ee07 3a90 	vmov	s15, r3
 80056fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570e:	4b62      	ldr	r3, [pc, #392]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005722:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800573e:	e087      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80058ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800574e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005752:	4b51      	ldr	r3, [pc, #324]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005762:	ed97 6a02 	vldr	s12, [r7, #8]
 8005766:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800576a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005782:	e065      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80058b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005796:	4b40      	ldr	r3, [pc, #256]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057c6:	e043      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80058b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057da:	4b2f      	ldr	r3, [pc, #188]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800580a:	e021      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	4b1e      	ldr	r3, [pc, #120]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005832:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800584e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005850:	4b11      	ldr	r3, [pc, #68]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	0a5b      	lsrs	r3, r3, #9
 8005856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800585a:	3301      	adds	r3, #1
 800585c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005868:	edd7 6a07 	vldr	s13, [r7, #28]
 800586c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005874:	ee17 3a90 	vmov	r3, s15
 8005878:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800587a:	e005      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	61bb      	str	r3, [r7, #24]
      break;
 8005880:	e002      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005882:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005884:	61bb      	str	r3, [r7, #24]
      break;
 8005886:	bf00      	nop
  }

  return sysclockfreq;
 8005888:	69bb      	ldr	r3, [r7, #24]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3724      	adds	r7, #36	@ 0x24
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400
 800589c:	03d09000 	.word	0x03d09000
 80058a0:	003d0900 	.word	0x003d0900
 80058a4:	017d7840 	.word	0x017d7840
 80058a8:	46000000 	.word	0x46000000
 80058ac:	4c742400 	.word	0x4c742400
 80058b0:	4a742400 	.word	0x4a742400
 80058b4:	4bbebc20 	.word	0x4bbebc20

080058b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058be:	f7ff fe81 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 80058c2:	4602      	mov	r2, r0
 80058c4:	4b10      	ldr	r3, [pc, #64]	@ (8005908 <HAL_RCC_GetHCLKFreq+0x50>)
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	0a1b      	lsrs	r3, r3, #8
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	490f      	ldr	r1, [pc, #60]	@ (800590c <HAL_RCC_GetHCLKFreq+0x54>)
 80058d0:	5ccb      	ldrb	r3, [r1, r3]
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <HAL_RCC_GetHCLKFreq+0x50>)
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	4a09      	ldr	r2, [pc, #36]	@ (800590c <HAL_RCC_GetHCLKFreq+0x54>)
 80058e6:	5cd3      	ldrb	r3, [r2, r3]
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	fa22 f303 	lsr.w	r3, r2, r3
 80058f2:	4a07      	ldr	r2, [pc, #28]	@ (8005910 <HAL_RCC_GetHCLKFreq+0x58>)
 80058f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058f6:	4a07      	ldr	r2, [pc, #28]	@ (8005914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058fc:	4b04      	ldr	r3, [pc, #16]	@ (8005910 <HAL_RCC_GetHCLKFreq+0x58>)
 80058fe:	681b      	ldr	r3, [r3, #0]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	58024400 	.word	0x58024400
 800590c:	0800cf0c 	.word	0x0800cf0c
 8005910:	24000004 	.word	0x24000004
 8005914:	24000000 	.word	0x24000000

08005918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800591c:	f7ff ffcc 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b06      	ldr	r3, [pc, #24]	@ (800593c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	4904      	ldr	r1, [pc, #16]	@ (8005940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800592e:	5ccb      	ldrb	r3, [r1, r3]
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	58024400 	.word	0x58024400
 8005940:	0800cf0c 	.word	0x0800cf0c

08005944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005948:	f7ff ffb6 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b06      	ldr	r3, [pc, #24]	@ (8005968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	4904      	ldr	r1, [pc, #16]	@ (800596c <HAL_RCC_GetPCLK2Freq+0x28>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	58024400 	.word	0x58024400
 800596c:	0800cf0c 	.word	0x0800cf0c

08005970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005974:	b0cc      	sub	sp, #304	@ 0x130
 8005976:	af00      	add	r7, sp, #0
 8005978:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800597c:	2300      	movs	r3, #0
 800597e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005982:	2300      	movs	r3, #0
 8005984:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005988:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005994:	2500      	movs	r5, #0
 8005996:	ea54 0305 	orrs.w	r3, r4, r5
 800599a:	d049      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800599c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059a6:	d02f      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80059a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059ac:	d828      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059b2:	d01a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059b8:	d822      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80059be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059c2:	d007      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059c4:	e01c      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c6:	4bb8      	ldr	r3, [pc, #736]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	4ab7      	ldr	r2, [pc, #732]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059d2:	e01a      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059d8:	3308      	adds	r3, #8
 80059da:	2102      	movs	r1, #2
 80059dc:	4618      	mov	r0, r3
 80059de:	f002 fba1 	bl	8008124 <RCCEx_PLL2_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059e8:	e00f      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ee:	3328      	adds	r3, #40	@ 0x28
 80059f0:	2102      	movs	r1, #2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f002 fc48 	bl	8008288 <RCCEx_PLL3_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059fe:	e004      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a06:	e000      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a12:	4ba5      	ldr	r3, [pc, #660]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a20:	4aa1      	ldr	r2, [pc, #644]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a2c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005a3c:	f04f 0900 	mov.w	r9, #0
 8005a40:	ea58 0309 	orrs.w	r3, r8, r9
 8005a44:	d047      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d82a      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a50:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005a6d 	.word	0x08005a6d
 8005a5c:	08005a7b 	.word	0x08005a7b
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005aaf 	.word	0x08005aaf
 8005a68:	08005aaf 	.word	0x08005aaf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	4a8d      	ldr	r2, [pc, #564]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a78:	e01a      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a7e:	3308      	adds	r3, #8
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f002 fb4e 	bl	8008124 <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a8e:	e00f      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a94:	3328      	adds	r3, #40	@ 0x28
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f002 fbf5 	bl	8008288 <RCCEx_PLL3_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aa4:	e004      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005aac:	e000      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005abc:	f023 0107 	bic.w	r1, r3, #7
 8005ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac6:	4a78      	ldr	r2, [pc, #480]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6513      	str	r3, [r2, #80]	@ 0x50
 8005acc:	e003      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ace:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ad2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005ae2:	f04f 0b00 	mov.w	fp, #0
 8005ae6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005aea:	d04c      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005aec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005af6:	d030      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afc:	d829      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b00:	d02d      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b04:	d825      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b06:	2b80      	cmp	r3, #128	@ 0x80
 8005b08:	d018      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b0a:	2b80      	cmp	r3, #128	@ 0x80
 8005b0c:	d821      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b12:	2b40      	cmp	r3, #64	@ 0x40
 8005b14:	d007      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b16:	e01c      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b18:	4b63      	ldr	r3, [pc, #396]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1c:	4a62      	ldr	r2, [pc, #392]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b24:	e01c      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f002 faf8 	bl	8008124 <RCCEx_PLL2_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b3a:	e011      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b40:	3328      	adds	r3, #40	@ 0x28
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f002 fb9f 	bl	8008288 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b50:	e006      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b68:	4b4f      	ldr	r3, [pc, #316]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b76:	4a4c      	ldr	r2, [pc, #304]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b7c:	e003      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b82:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005b92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005b96:	2300      	movs	r3, #0
 8005b98:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005b9c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	d053      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005baa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bb2:	d035      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005bb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bb8:	d82e      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005bbe:	d031      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005bc0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005bc4:	d828      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bca:	d01a      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bd0:	d822      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bda:	d007      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005bdc:	e01c      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bde:	4b32      	ldr	r3, [pc, #200]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be2:	4a31      	ldr	r2, [pc, #196]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bea:	e01c      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f002 fa95 	bl	8008124 <RCCEx_PLL2_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c00:	e011      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c06:	3328      	adds	r3, #40	@ 0x28
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f002 fb3c 	bl	8008288 <RCCEx_PLL3_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c16:	e006      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c1e:	e002      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10b      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c32:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c44:	e003      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005c5a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	d056      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c7a:	d038      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c80:	d831      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c86:	d034      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005c88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c8c:	d82b      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c92:	d01d      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005c94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c98:	d825      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ca4:	e01f      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ca6:	bf00      	nop
 8005ca8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cac:	4ba2      	ldr	r3, [pc, #648]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	4aa1      	ldr	r2, [pc, #644]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cb8:	e01c      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f002 fa2e 	bl	8008124 <RCCEx_PLL2_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cce:	e011      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cd4:	3328      	adds	r3, #40	@ 0x28
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f002 fad5 	bl	8008288 <RCCEx_PLL3_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce4:	e006      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cec:	e002      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005cfc:	4b8e      	ldr	r3, [pc, #568]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d0c:	4a8a      	ldr	r2, [pc, #552]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d12:	e003      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d32:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005d36:	460b      	mov	r3, r1
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	d03a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d42:	2b30      	cmp	r3, #48	@ 0x30
 8005d44:	d01f      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005d46:	2b30      	cmp	r3, #48	@ 0x30
 8005d48:	d819      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d00c      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d815      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d019      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d111      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5a:	4b77      	ldr	r3, [pc, #476]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	4a76      	ldr	r2, [pc, #472]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d66:	e011      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2102      	movs	r1, #2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f002 f9d7 	bl	8008124 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d7c:	e006      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d84:	e002      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d94:	4b68      	ldr	r3, [pc, #416]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da2:	4a65      	ldr	r2, [pc, #404]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005daa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005dbe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005dc8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	d051      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ddc:	d035      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005dde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005de2:	d82e      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005de4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005de8:	d031      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005dea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dee:	d828      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df4:	d01a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfa:	d822      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e04:	d007      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e06:	e01c      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e08:	4b4b      	ldr	r3, [pc, #300]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e14:	e01c      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f002 f980 	bl	8008124 <RCCEx_PLL2_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e2a:	e011      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e30:	3328      	adds	r3, #40	@ 0x28
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f002 fa27 	bl	8008288 <RCCEx_PLL3_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e40:	e006      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e48:	e002      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e4a:	bf00      	nop
 8005e4c:	e000      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e58:	4b37      	ldr	r3, [pc, #220]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e66:	4a34      	ldr	r2, [pc, #208]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e6c:	e003      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005e82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e86:	2300      	movs	r3, #0
 8005e88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4313      	orrs	r3, r2
 8005e94:	d056      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea0:	d033      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005ea2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea6:	d82c      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ea8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eac:	d02f      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005eae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eb2:	d826      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005eb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005eb8:	d02b      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005eba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ebe:	d820      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec4:	d012      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eca:	d81a      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d022      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed4:	d115      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ed6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eda:	3308      	adds	r3, #8
 8005edc:	2101      	movs	r1, #1
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f002 f920 	bl	8008124 <RCCEx_PLL2_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005eea:	e015      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ef0:	3328      	adds	r3, #40	@ 0x28
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f002 f9c7 	bl	8008288 <RCCEx_PLL3_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f00:	e00a      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f08:	e006      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f0a:	bf00      	nop
 8005f0c:	e004      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f0e:	bf00      	nop
 8005f10:	e002      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10d      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f20:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f2e:	4a02      	ldr	r2, [pc, #8]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f34:	e006      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f36:	bf00      	nop
 8005f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f40:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f54:	2300      	movs	r3, #0
 8005f56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f5a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4313      	orrs	r3, r2
 8005f62:	d055      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f70:	d033      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f76:	d82c      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f7c:	d02f      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f82:	d826      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f88:	d02b      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005f8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f8e:	d820      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f94:	d012      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005f96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f9a:	d81a      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d022      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005fa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa4:	d115      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005faa:	3308      	adds	r3, #8
 8005fac:	2101      	movs	r1, #1
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f002 f8b8 	bl	8008124 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fba:	e015      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc0:	3328      	adds	r3, #40	@ 0x28
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f002 f95f 	bl	8008288 <RCCEx_PLL3_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fda:	bf00      	nop
 8005fdc:	e004      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ff0:	4bb6      	ldr	r3, [pc, #728]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006000:	4ab2      	ldr	r2, [pc, #712]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006002:	430b      	orrs	r3, r1
 8006004:	6593      	str	r3, [r2, #88]	@ 0x58
 8006006:	e003      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006008:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800600c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006010:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800601c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006020:	2300      	movs	r3, #0
 8006022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006026:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800602a:	460b      	mov	r3, r1
 800602c:	4313      	orrs	r3, r2
 800602e:	d02a      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8006030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006036:	2b00      	cmp	r3, #0
 8006038:	d011      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800603a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800603e:	d10a      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006044:	3308      	adds	r3, #8
 8006046:	2101      	movs	r1, #1
 8006048:	4618      	mov	r0, r3
 800604a:	f002 f86b 	bl	8008124 <RCCEx_PLL2_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8006054:	e004      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800605c:	e000      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800605e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006060:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006068:	4b98      	ldr	r3, [pc, #608]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800606a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800606c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006070:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006076:	4a95      	ldr	r2, [pc, #596]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006078:	430b      	orrs	r3, r1
 800607a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800607c:	e003      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006082:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006096:	2300      	movs	r3, #0
 8006098:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800609c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060a0:	460b      	mov	r3, r1
 80060a2:	4313      	orrs	r3, r2
 80060a4:	d037      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b0:	d00e      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80060b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b6:	d816      	bhi.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d018      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80060bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060c0:	d111      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c2:	4b82      	ldr	r3, [pc, #520]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c6:	4a81      	ldr	r2, [pc, #516]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060ce:	e00f      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d4:	3308      	adds	r3, #8
 80060d6:	2101      	movs	r1, #1
 80060d8:	4618      	mov	r0, r3
 80060da:	f002 f823 	bl	8008124 <RCCEx_PLL2_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060e4:	e004      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060ec:	e000      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80060ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060f8:	4b74      	ldr	r3, [pc, #464]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006106:	4a71      	ldr	r2, [pc, #452]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006108:	430b      	orrs	r3, r1
 800610a:	6513      	str	r3, [r2, #80]	@ 0x50
 800610c:	e003      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006112:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006116:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006122:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006126:	2300      	movs	r3, #0
 8006128:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800612c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d03a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006136:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800613a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800613c:	2b03      	cmp	r3, #3
 800613e:	d81d      	bhi.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8006140:	a201      	add	r2, pc, #4	@ (adr r2, 8006148 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006146:	bf00      	nop
 8006148:	08006185 	.word	0x08006185
 800614c:	08006159 	.word	0x08006159
 8006150:	08006167 	.word	0x08006167
 8006154:	08006185 	.word	0x08006185
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006158:	4b5c      	ldr	r3, [pc, #368]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	4a5b      	ldr	r2, [pc, #364]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800615e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006164:	e00f      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800616a:	3308      	adds	r3, #8
 800616c:	2102      	movs	r1, #2
 800616e:	4618      	mov	r0, r3
 8006170:	f001 ffd8 	bl	8008124 <RCCEx_PLL2_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800617a:	e004      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006182:	e000      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006186:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800618e:	4b4f      	ldr	r3, [pc, #316]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006192:	f023 0103 	bic.w	r1, r3, #3
 8006196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800619a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800619c:	4a4b      	ldr	r2, [pc, #300]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800619e:	430b      	orrs	r3, r1
 80061a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061a2:	e003      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061bc:	2300      	movs	r3, #0
 80061be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061c6:	460b      	mov	r3, r1
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f000 80a0 	beq.w	800630e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ce:	4b40      	ldr	r3, [pc, #256]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a3f      	ldr	r2, [pc, #252]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80061d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061da:	f7fb f8d9 	bl	8001390 <HAL_GetTick>
 80061de:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061e2:	e00b      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e4:	f7fb f8d4 	bl	8001390 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b64      	cmp	r3, #100	@ 0x64
 80061f2:	d903      	bls.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061fa:	e005      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061fc:	4b34      	ldr	r3, [pc, #208]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0ed      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8006208:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800620c:	2b00      	cmp	r3, #0
 800620e:	d17a      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006210:	4b2e      	ldr	r3, [pc, #184]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006212:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006214:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006218:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800621c:	4053      	eors	r3, r2
 800621e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006222:	2b00      	cmp	r3, #0
 8006224:	d015      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006226:	4b29      	ldr	r3, [pc, #164]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800622e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006232:	4b26      	ldr	r3, [pc, #152]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006236:	4a25      	ldr	r2, [pc, #148]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800623c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800623e:	4b23      	ldr	r3, [pc, #140]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006242:	4a22      	ldr	r2, [pc, #136]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006248:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800624a:	4a20      	ldr	r2, [pc, #128]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800624c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006250:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006256:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800625a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800625e:	d118      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fb f896 	bl	8001390 <HAL_GetTick>
 8006264:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006268:	e00d      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626a:	f7fb f891 	bl	8001390 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006274:	1ad2      	subs	r2, r2, r3
 8006276:	f241 3388 	movw	r3, #5000	@ 0x1388
 800627a:	429a      	cmp	r2, r3
 800627c:	d903      	bls.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8006284:	e005      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006286:	4b11      	ldr	r3, [pc, #68]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0eb      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8006292:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006296:	2b00      	cmp	r3, #0
 8006298:	d130      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800629a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800629e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80062a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062aa:	d115      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80062ac:	4b07      	ldr	r3, [pc, #28]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80062bc:	091a      	lsrs	r2, r3, #4
 80062be:	4b05      	ldr	r3, [pc, #20]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	4a02      	ldr	r2, [pc, #8]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062c4:	430b      	orrs	r3, r1
 80062c6:	6113      	str	r3, [r2, #16]
 80062c8:	e00c      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80062ca:	bf00      	nop
 80062cc:	58024400 	.word	0x58024400
 80062d0:	58024800 	.word	0x58024800
 80062d4:	00ffffcf 	.word	0x00ffffcf
 80062d8:	4bd4      	ldr	r3, [pc, #848]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	4ad3      	ldr	r2, [pc, #844]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80062de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062e2:	6113      	str	r3, [r2, #16]
 80062e4:	4bd1      	ldr	r3, [pc, #836]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80062e6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80062f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f4:	4acd      	ldr	r2, [pc, #820]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80062f6:	430b      	orrs	r3, r1
 80062f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062fa:	e008      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006300:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8006304:	e003      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006306:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800630a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800630e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f002 0301 	and.w	r3, r2, #1
 800631a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800631e:	2300      	movs	r3, #0
 8006320:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006324:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006328:	460b      	mov	r3, r1
 800632a:	4313      	orrs	r3, r2
 800632c:	f000 808b 	beq.w	8006446 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006338:	2b28      	cmp	r3, #40	@ 0x28
 800633a:	d86b      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800633c:	a201      	add	r2, pc, #4	@ (adr r2, 8006344 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	0800641d 	.word	0x0800641d
 8006348:	08006415 	.word	0x08006415
 800634c:	08006415 	.word	0x08006415
 8006350:	08006415 	.word	0x08006415
 8006354:	08006415 	.word	0x08006415
 8006358:	08006415 	.word	0x08006415
 800635c:	08006415 	.word	0x08006415
 8006360:	08006415 	.word	0x08006415
 8006364:	080063e9 	.word	0x080063e9
 8006368:	08006415 	.word	0x08006415
 800636c:	08006415 	.word	0x08006415
 8006370:	08006415 	.word	0x08006415
 8006374:	08006415 	.word	0x08006415
 8006378:	08006415 	.word	0x08006415
 800637c:	08006415 	.word	0x08006415
 8006380:	08006415 	.word	0x08006415
 8006384:	080063ff 	.word	0x080063ff
 8006388:	08006415 	.word	0x08006415
 800638c:	08006415 	.word	0x08006415
 8006390:	08006415 	.word	0x08006415
 8006394:	08006415 	.word	0x08006415
 8006398:	08006415 	.word	0x08006415
 800639c:	08006415 	.word	0x08006415
 80063a0:	08006415 	.word	0x08006415
 80063a4:	0800641d 	.word	0x0800641d
 80063a8:	08006415 	.word	0x08006415
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006415 	.word	0x08006415
 80063b4:	08006415 	.word	0x08006415
 80063b8:	08006415 	.word	0x08006415
 80063bc:	08006415 	.word	0x08006415
 80063c0:	08006415 	.word	0x08006415
 80063c4:	0800641d 	.word	0x0800641d
 80063c8:	08006415 	.word	0x08006415
 80063cc:	08006415 	.word	0x08006415
 80063d0:	08006415 	.word	0x08006415
 80063d4:	08006415 	.word	0x08006415
 80063d8:	08006415 	.word	0x08006415
 80063dc:	08006415 	.word	0x08006415
 80063e0:	08006415 	.word	0x08006415
 80063e4:	0800641d 	.word	0x0800641d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ec:	3308      	adds	r3, #8
 80063ee:	2101      	movs	r1, #1
 80063f0:	4618      	mov	r0, r3
 80063f2:	f001 fe97 	bl	8008124 <RCCEx_PLL2_Config>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063fc:	e00f      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006402:	3328      	adds	r3, #40	@ 0x28
 8006404:	2101      	movs	r1, #1
 8006406:	4618      	mov	r0, r3
 8006408:	f001 ff3e 	bl	8008288 <RCCEx_PLL3_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006412:	e004      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800641a:	e000      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 800641c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006426:	4b81      	ldr	r3, [pc, #516]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800642a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800642e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006436:	4a7d      	ldr	r2, [pc, #500]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006438:	430b      	orrs	r3, r1
 800643a:	6553      	str	r3, [r2, #84]	@ 0x54
 800643c:	e003      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006442:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f002 0302 	and.w	r3, r2, #2
 8006452:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006456:	2300      	movs	r3, #0
 8006458:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800645c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006460:	460b      	mov	r3, r1
 8006462:	4313      	orrs	r3, r2
 8006464:	d042      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800646a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800646c:	2b05      	cmp	r3, #5
 800646e:	d825      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006470:	a201      	add	r2, pc, #4	@ (adr r2, 8006478 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006476:	bf00      	nop
 8006478:	080064c5 	.word	0x080064c5
 800647c:	08006491 	.word	0x08006491
 8006480:	080064a7 	.word	0x080064a7
 8006484:	080064c5 	.word	0x080064c5
 8006488:	080064c5 	.word	0x080064c5
 800648c:	080064c5 	.word	0x080064c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006494:	3308      	adds	r3, #8
 8006496:	2101      	movs	r1, #1
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fe43 	bl	8008124 <RCCEx_PLL2_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064a4:	e00f      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064aa:	3328      	adds	r3, #40	@ 0x28
 80064ac:	2101      	movs	r1, #1
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 feea 	bl	8008288 <RCCEx_PLL3_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064ba:	e004      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80064c2:	e000      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80064c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064ce:	4b57      	ldr	r3, [pc, #348]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80064d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d2:	f023 0107 	bic.w	r1, r3, #7
 80064d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064dc:	4a53      	ldr	r2, [pc, #332]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80064de:	430b      	orrs	r3, r1
 80064e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80064e2:	e003      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f002 0304 	and.w	r3, r2, #4
 80064f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006502:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006506:	460b      	mov	r3, r1
 8006508:	4313      	orrs	r3, r2
 800650a:	d044      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800650c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006510:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006514:	2b05      	cmp	r3, #5
 8006516:	d825      	bhi.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006518:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	0800656d 	.word	0x0800656d
 8006524:	08006539 	.word	0x08006539
 8006528:	0800654f 	.word	0x0800654f
 800652c:	0800656d 	.word	0x0800656d
 8006530:	0800656d 	.word	0x0800656d
 8006534:	0800656d 	.word	0x0800656d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800653c:	3308      	adds	r3, #8
 800653e:	2101      	movs	r1, #1
 8006540:	4618      	mov	r0, r3
 8006542:	f001 fdef 	bl	8008124 <RCCEx_PLL2_Config>
 8006546:	4603      	mov	r3, r0
 8006548:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800654c:	e00f      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800654e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006552:	3328      	adds	r3, #40	@ 0x28
 8006554:	2101      	movs	r1, #1
 8006556:	4618      	mov	r0, r3
 8006558:	f001 fe96 	bl	8008288 <RCCEx_PLL3_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006562:	e004      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800656a:	e000      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800656c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10b      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006576:	4b2d      	ldr	r3, [pc, #180]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657a:	f023 0107 	bic.w	r1, r3, #7
 800657e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006582:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006586:	4a29      	ldr	r2, [pc, #164]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006588:	430b      	orrs	r3, r1
 800658a:	6593      	str	r3, [r2, #88]	@ 0x58
 800658c:	e003      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006592:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f002 0320 	and.w	r3, r2, #32
 80065a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065a6:	2300      	movs	r3, #0
 80065a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065b0:	460b      	mov	r3, r1
 80065b2:	4313      	orrs	r3, r2
 80065b4:	d057      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065c2:	d035      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80065c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065c8:	d82c      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ce:	d031      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d4:	d826      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80065d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065da:	d02d      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80065dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065e0:	d820      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80065e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e6:	d012      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80065e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ec:	d81a      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d024      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80065f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065f6:	d115      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065fc:	3308      	adds	r3, #8
 80065fe:	2100      	movs	r1, #0
 8006600:	4618      	mov	r0, r3
 8006602:	f001 fd8f 	bl	8008124 <RCCEx_PLL2_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800660c:	e017      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800660e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006612:	3328      	adds	r3, #40	@ 0x28
 8006614:	2102      	movs	r1, #2
 8006616:	4618      	mov	r0, r3
 8006618:	f001 fe36 	bl	8008288 <RCCEx_PLL3_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006622:	e00c      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800662a:	e008      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 800662c:	58024400 	.word	0x58024400
        break;
 8006630:	bf00      	nop
 8006632:	e004      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006634:	bf00      	nop
 8006636:	e002      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006638:	bf00      	nop
 800663a:	e000      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800663c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006646:	4bc2      	ldr	r3, [pc, #776]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800664e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006656:	4abe      	ldr	r2, [pc, #760]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6553      	str	r3, [r2, #84]	@ 0x54
 800665c:	e003      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006662:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006676:	2300      	movs	r3, #0
 8006678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800667c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006680:	460b      	mov	r3, r1
 8006682:	4313      	orrs	r3, r2
 8006684:	d055      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800668a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800668e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006692:	d033      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006694:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006698:	d82c      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800669a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800669e:	d02f      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80066a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a4:	d826      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80066a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066aa:	d02b      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80066ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066b0:	d820      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80066b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066b6:	d012      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80066b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066bc:	d81a      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d022      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80066c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066c6:	d115      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066cc:	3308      	adds	r3, #8
 80066ce:	2100      	movs	r1, #0
 80066d0:	4618      	mov	r0, r3
 80066d2:	f001 fd27 	bl	8008124 <RCCEx_PLL2_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066dc:	e015      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066e2:	3328      	adds	r3, #40	@ 0x28
 80066e4:	2102      	movs	r1, #2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 fdce 	bl	8008288 <RCCEx_PLL3_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066f2:	e00a      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066fa:	e006      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80066fc:	bf00      	nop
 80066fe:	e004      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006700:	bf00      	nop
 8006702:	e002      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006704:	bf00      	nop
 8006706:	e000      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10b      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006712:	4b8f      	ldr	r3, [pc, #572]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006716:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800671a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800671e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006722:	4a8b      	ldr	r2, [pc, #556]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006724:	430b      	orrs	r3, r1
 8006726:	6593      	str	r3, [r2, #88]	@ 0x58
 8006728:	e003      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800672e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800673e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006742:	2300      	movs	r3, #0
 8006744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006748:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800674c:	460b      	mov	r3, r1
 800674e:	4313      	orrs	r3, r2
 8006750:	d055      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006756:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800675a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800675e:	d033      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006760:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006764:	d82c      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800676a:	d02f      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800676c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006770:	d826      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006772:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006776:	d02b      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006778:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800677c:	d820      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800677e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006782:	d012      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006788:	d81a      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d022      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800678e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006792:	d115      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006798:	3308      	adds	r3, #8
 800679a:	2100      	movs	r1, #0
 800679c:	4618      	mov	r0, r3
 800679e:	f001 fcc1 	bl	8008124 <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067a8:	e015      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067ae:	3328      	adds	r3, #40	@ 0x28
 80067b0:	2102      	movs	r1, #2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 fd68 	bl	8008288 <RCCEx_PLL3_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067be:	e00a      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80067c6:	e006      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80067c8:	bf00      	nop
 80067ca:	e004      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80067cc:	bf00      	nop
 80067ce:	e002      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80067d0:	bf00      	nop
 80067d2:	e000      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80067d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067de:	4b5c      	ldr	r3, [pc, #368]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e2:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067ee:	4a58      	ldr	r2, [pc, #352]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067f0:	430b      	orrs	r3, r1
 80067f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f4:	e003      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80067fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	f002 0308 	and.w	r3, r2, #8
 800680a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800680e:	2300      	movs	r3, #0
 8006810:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006814:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006818:	460b      	mov	r3, r1
 800681a:	4313      	orrs	r3, r2
 800681c:	d01e      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800681e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800682a:	d10c      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800682c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006830:	3328      	adds	r3, #40	@ 0x28
 8006832:	2102      	movs	r1, #2
 8006834:	4618      	mov	r0, r3
 8006836:	f001 fd27 	bl	8008288 <RCCEx_PLL3_Config>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006846:	4b42      	ldr	r3, [pc, #264]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800684e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006856:	4a3e      	ldr	r2, [pc, #248]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006858:	430b      	orrs	r3, r1
 800685a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800685c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	f002 0310 	and.w	r3, r2, #16
 8006868:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800686c:	2300      	movs	r3, #0
 800686e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006872:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006876:	460b      	mov	r3, r1
 8006878:	4313      	orrs	r3, r2
 800687a:	d01e      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800687c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006880:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006888:	d10c      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800688a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800688e:	3328      	adds	r3, #40	@ 0x28
 8006890:	2102      	movs	r1, #2
 8006892:	4618      	mov	r0, r3
 8006894:	f001 fcf8 	bl	8008288 <RCCEx_PLL3_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068b4:	4a26      	ldr	r2, [pc, #152]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068b6:	430b      	orrs	r3, r1
 80068b8:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068ca:	2300      	movs	r3, #0
 80068cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068d4:	460b      	mov	r3, r1
 80068d6:	4313      	orrs	r3, r2
 80068d8:	d040      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80068e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068e6:	d022      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80068e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ec:	d81b      	bhi.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80068f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f6:	d00b      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80068f8:	e015      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068fe:	3308      	adds	r3, #8
 8006900:	2100      	movs	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f001 fc0e 	bl	8008124 <RCCEx_PLL2_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800690e:	e00f      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006914:	3328      	adds	r3, #40	@ 0x28
 8006916:	2102      	movs	r1, #2
 8006918:	4618      	mov	r0, r3
 800691a:	f001 fcb5 	bl	8008288 <RCCEx_PLL3_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006924:	e004      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800692c:	e000      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800692e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006930:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10d      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006938:	4b05      	ldr	r3, [pc, #20]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800693a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006944:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006948:	4a01      	ldr	r2, [pc, #4]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800694a:	430b      	orrs	r3, r1
 800694c:	6593      	str	r3, [r2, #88]	@ 0x58
 800694e:	e005      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006950:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006954:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006958:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800695c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800696a:	2300      	movs	r3, #0
 800696c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800696e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006972:	460b      	mov	r3, r1
 8006974:	4313      	orrs	r3, r2
 8006976:	d03b      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006978:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800697c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006980:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006984:	d01f      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006986:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800698a:	d818      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800698c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006990:	d003      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006992:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006996:	d007      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006998:	e011      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800699a:	4b64      	ldr	r3, [pc, #400]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800699c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699e:	4a63      	ldr	r2, [pc, #396]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80069a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069a6:	e00f      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069ac:	3328      	adds	r3, #40	@ 0x28
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f001 fc69 	bl	8008288 <RCCEx_PLL3_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80069bc:	e004      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80069c4:	e000      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80069c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10b      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069d0:	4b56      	ldr	r3, [pc, #344]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80069d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069e0:	4a52      	ldr	r2, [pc, #328]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80069e2:	430b      	orrs	r3, r1
 80069e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80069e6:	e003      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80069ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80069fe:	2300      	movs	r3, #0
 8006a00:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a02:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a06:	460b      	mov	r3, r1
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	d031      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a1a:	d007      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006a1c:	e011      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a1e:	4b43      	ldr	r3, [pc, #268]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	4a42      	ldr	r2, [pc, #264]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a2a:	e00e      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a30:	3308      	adds	r3, #8
 8006a32:	2102      	movs	r1, #2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 fb75 	bl	8008124 <RCCEx_PLL2_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a52:	4b36      	ldr	r3, [pc, #216]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a60:	4a32      	ldr	r2, [pc, #200]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a62:	430b      	orrs	r3, r1
 8006a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a66:	e003      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a6c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a7e:	2300      	movs	r3, #0
 8006a80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a86:	460b      	mov	r3, r1
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	d00c      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a90:	3328      	adds	r3, #40	@ 0x28
 8006a92:	2102      	movs	r1, #2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 fbf7 	bl	8008288 <RCCEx_PLL3_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006ab2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ab8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006abc:	460b      	mov	r3, r1
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	d03a      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ace:	d018      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006ad0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad4:	d811      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006ad6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ada:	d014      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae0:	d80b      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d011      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aea:	d106      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aec:	4b0f      	ldr	r3, [pc, #60]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af0:	4a0e      	ldr	r2, [pc, #56]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006af8:	e008      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006b00:	e004      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006b02:	bf00      	nop
 8006b04:	e002      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006b06:	bf00      	nop
 8006b08:	e000      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10d      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b14:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b24:	4a01      	ldr	r2, [pc, #4]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006b26:	430b      	orrs	r3, r1
 8006b28:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b2a:	e005      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006b2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b30:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b34:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b46:	2300      	movs	r3, #0
 8006b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4313      	orrs	r3, r2
 8006b52:	d009      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b54:	4baa      	ldr	r3, [pc, #680]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b62:	4aa7      	ldr	r2, [pc, #668]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b74:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b76:	2300      	movs	r3, #0
 8006b78:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4313      	orrs	r3, r2
 8006b82:	d00a      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b84:	4b9e      	ldr	r3, [pc, #632]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b94:	4a9a      	ldr	r2, [pc, #616]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b96:	430b      	orrs	r3, r1
 8006b98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ba8:	2300      	movs	r3, #0
 8006baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	d009      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bb6:	4b92      	ldr	r3, [pc, #584]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc4:	4a8e      	ldr	r2, [pc, #568]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bd8:	2300      	movs	r3, #0
 8006bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bdc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006be0:	460b      	mov	r3, r1
 8006be2:	4313      	orrs	r3, r2
 8006be4:	d00e      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006be6:	4b86      	ldr	r3, [pc, #536]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	4a85      	ldr	r2, [pc, #532]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006bec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bf0:	6113      	str	r3, [r2, #16]
 8006bf2:	4b83      	ldr	r3, [pc, #524]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006bf4:	6919      	ldr	r1, [r3, #16]
 8006bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bfa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006bfe:	4a80      	ldr	r2, [pc, #512]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c00:	430b      	orrs	r3, r1
 8006c02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c12:	2300      	movs	r3, #0
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c20:	4b77      	ldr	r3, [pc, #476]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c2e:	4a74      	ldr	r2, [pc, #464]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c42:	2300      	movs	r3, #0
 8006c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	d00a      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c50:	4b6b      	ldr	r3, [pc, #428]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c60:	4a67      	ldr	r2, [pc, #412]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c62:	430b      	orrs	r3, r1
 8006c64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	2100      	movs	r1, #0
 8006c70:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	d011      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c86:	3308      	adds	r3, #8
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fa4a 	bl	8008124 <RCCEx_PLL2_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006c96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ca2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	2100      	movs	r1, #0
 8006cb0:	6239      	str	r1, [r7, #32]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	d011      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	2101      	movs	r1, #1
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 fa2a 	bl	8008124 <RCCEx_PLL2_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006cd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ce2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	2100      	movs	r1, #0
 8006cf0:	61b9      	str	r1, [r7, #24]
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	d011      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d06:	3308      	adds	r3, #8
 8006d08:	2102      	movs	r1, #2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 fa0a 	bl	8008124 <RCCEx_PLL2_Config>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006d16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	2100      	movs	r1, #0
 8006d30:	6139      	str	r1, [r7, #16]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	d011      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d46:	3328      	adds	r3, #40	@ 0x28
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fa9c 	bl	8008288 <RCCEx_PLL3_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006d56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	2100      	movs	r1, #0
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	f003 0310 	and.w	r3, r3, #16
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	d011      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d86:	3328      	adds	r3, #40	@ 0x28
 8006d88:	2101      	movs	r1, #1
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 fa7c 	bl	8008288 <RCCEx_PLL3_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006d96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006da2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	2100      	movs	r1, #0
 8006db0:	6039      	str	r1, [r7, #0]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	607b      	str	r3, [r7, #4]
 8006db8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	d011      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dc6:	3328      	adds	r3, #40	@ 0x28
 8006dc8:	2102      	movs	r1, #2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f001 fa5c 	bl	8008288 <RCCEx_PLL3_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006dd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006de2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006de6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e00:	58024400 	.word	0x58024400

08006e04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b090      	sub	sp, #64	@ 0x40
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e12:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006e16:	430b      	orrs	r3, r1
 8006e18:	f040 8094 	bne.w	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006e1c:	4b9e      	ldr	r3, [pc, #632]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	f200 8087 	bhi.w	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e49 	.word	0x08006e49
 8006e38:	08006e71 	.word	0x08006e71
 8006e3c:	08006e99 	.word	0x08006e99
 8006e40:	08006f35 	.word	0x08006f35
 8006e44:	08006ec1 	.word	0x08006ec1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e48:	4b93      	ldr	r3, [pc, #588]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e54:	d108      	bne.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 f810 	bl	8007e80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e64:	f000 bd45 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e6c:	f000 bd41 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e70:	4b89      	ldr	r3, [pc, #548]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e7c:	d108      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e7e:	f107 0318 	add.w	r3, r7, #24
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fd54 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8c:	f000 bd31 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e94:	f000 bd2d 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e98:	4b7f      	ldr	r3, [pc, #508]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ea4:	d108      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ea6:	f107 030c 	add.w	r3, r7, #12
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fe94 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb4:	f000 bd1d 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ebc:	f000 bd19 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ec0:	4b75      	ldr	r3, [pc, #468]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ec8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006eca:	4b73      	ldr	r3, [pc, #460]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d10c      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006edc:	4b6e      	ldr	r3, [pc, #440]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	08db      	lsrs	r3, r3, #3
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	4a6d      	ldr	r2, [pc, #436]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eee:	e01f      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ef0:	4b69      	ldr	r3, [pc, #420]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006efc:	d106      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f04:	d102      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f06:	4b66      	ldr	r3, [pc, #408]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f0a:	e011      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f0c:	4b62      	ldr	r3, [pc, #392]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f18:	d106      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f20:	d102      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f22:	4b60      	ldr	r3, [pc, #384]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f26:	e003      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f2c:	f000 bce1 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f30:	f000 bcdf 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f34:	4b5c      	ldr	r3, [pc, #368]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f38:	f000 bcdb 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f40:	f000 bcd7 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f48:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	f040 80ad 	bne.w	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006f52:	4b51      	ldr	r3, [pc, #324]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f56:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006f5a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f62:	d056      	beq.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f6a:	f200 8090 	bhi.w	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f72:	f000 8088 	beq.w	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f7a:	f200 8088 	bhi.w	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f80:	2b80      	cmp	r3, #128	@ 0x80
 8006f82:	d032      	beq.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	2b80      	cmp	r3, #128	@ 0x80
 8006f88:	f200 8081 	bhi.w	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	2b40      	cmp	r3, #64	@ 0x40
 8006f96:	d014      	beq.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006f98:	e079      	b.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fa6:	d108      	bne.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 ff67 	bl	8007e80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fb6:	f000 bc9c 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fbe:	f000 bc98 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fc2:	4b35      	ldr	r3, [pc, #212]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fce:	d108      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd0:	f107 0318 	add.w	r3, r7, #24
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fcab 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fde:	f000 bc88 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe6:	f000 bc84 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fea:	4b2b      	ldr	r3, [pc, #172]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff6:	d108      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff8:	f107 030c 	add.w	r3, r7, #12
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fdeb 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007006:	f000 bc74 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800700e:	f000 bc70 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007012:	4b21      	ldr	r3, [pc, #132]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007016:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800701a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800701c:	4b1e      	ldr	r3, [pc, #120]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b04      	cmp	r3, #4
 8007026:	d10c      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800702e:	4b1a      	ldr	r3, [pc, #104]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	08db      	lsrs	r3, r3, #3
 8007034:	f003 0303 	and.w	r3, r3, #3
 8007038:	4a18      	ldr	r2, [pc, #96]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800703a:	fa22 f303 	lsr.w	r3, r2, r3
 800703e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007040:	e01f      	b.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007042:	4b15      	ldr	r3, [pc, #84]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800704e:	d106      	bne.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007056:	d102      	bne.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007058:	4b11      	ldr	r3, [pc, #68]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800705c:	e011      	b.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800705e:	4b0e      	ldr	r3, [pc, #56]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007066:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800706a:	d106      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800706c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007072:	d102      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007074:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007078:	e003      	b.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800707e:	f000 bc38 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007082:	f000 bc36 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007086:	4b08      	ldr	r3, [pc, #32]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800708a:	f000 bc32 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007092:	f000 bc2e 	b.w	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007096:	bf00      	nop
 8007098:	58024400 	.word	0x58024400
 800709c:	03d09000 	.word	0x03d09000
 80070a0:	003d0900 	.word	0x003d0900
 80070a4:	017d7840 	.word	0x017d7840
 80070a8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80070ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80070b4:	430b      	orrs	r3, r1
 80070b6:	f040 809c 	bne.w	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80070ba:	4b9e      	ldr	r3, [pc, #632]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070be:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80070c2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80070c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070ca:	d054      	beq.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070d2:	f200 808b 	bhi.w	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070dc:	f000 8083 	beq.w	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070e6:	f200 8081 	bhi.w	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070f0:	d02f      	beq.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070f8:	d878      	bhi.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007106:	d012      	beq.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007108:	e070      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800710a:	4b8a      	ldr	r3, [pc, #552]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007116:	d107      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800711c:	4618      	mov	r0, r3
 800711e:	f000 feaf 	bl	8007e80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007126:	e3e4      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800712c:	e3e1      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800712e:	4b81      	ldr	r3, [pc, #516]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800713a:	d107      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800713c:	f107 0318 	add.w	r3, r7, #24
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fbf5 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800714a:	e3d2      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007150:	e3cf      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007152:	4b78      	ldr	r3, [pc, #480]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800715a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800715e:	d107      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007160:	f107 030c 	add.w	r3, r7, #12
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fd37 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800716e:	e3c0      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007174:	e3bd      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007176:	4b6f      	ldr	r3, [pc, #444]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800717a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007180:	4b6c      	ldr	r3, [pc, #432]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b04      	cmp	r3, #4
 800718a:	d10c      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800718c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718e:	2b00      	cmp	r3, #0
 8007190:	d109      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007192:	4b68      	ldr	r3, [pc, #416]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	08db      	lsrs	r3, r3, #3
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	4a66      	ldr	r2, [pc, #408]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800719e:	fa22 f303 	lsr.w	r3, r2, r3
 80071a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071a4:	e01e      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071a6:	4b63      	ldr	r3, [pc, #396]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b2:	d106      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80071b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071ba:	d102      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071bc:	4b5f      	ldr	r3, [pc, #380]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80071be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071c0:	e010      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071c2:	4b5c      	ldr	r3, [pc, #368]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071ce:	d106      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80071d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071d6:	d102      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071d8:	4b59      	ldr	r3, [pc, #356]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80071da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071dc:	e002      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071e2:	e386      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071e4:	e385      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071e6:	4b57      	ldr	r3, [pc, #348]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80071e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ea:	e382      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f0:	e37f      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80071f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80071fa:	430b      	orrs	r3, r1
 80071fc:	f040 80a7 	bne.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007200:	4b4c      	ldr	r3, [pc, #304]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007204:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007208:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007210:	d055      	beq.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007218:	f200 8096 	bhi.w	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007222:	f000 8084 	beq.w	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800722c:	f200 808c 	bhi.w	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007232:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007236:	d030      	beq.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800723e:	f200 8083 	bhi.w	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800724e:	d012      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007250:	e07a      	b.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007252:	4b38      	ldr	r3, [pc, #224]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800725a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800725e:	d107      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fe0b 	bl	8007e80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800726a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800726e:	e340      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007274:	e33d      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007276:	4b2f      	ldr	r3, [pc, #188]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800727e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007282:	d107      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007284:	f107 0318 	add.w	r3, r7, #24
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fb51 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007292:	e32e      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007298:	e32b      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800729a:	4b26      	ldr	r3, [pc, #152]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072a6:	d107      	bne.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072a8:	f107 030c 	add.w	r3, r7, #12
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fc93 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072b6:	e31c      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072bc:	e319      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072be:	4b1d      	ldr	r3, [pc, #116]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d10c      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80072d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d109      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072da:	4b16      	ldr	r3, [pc, #88]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	08db      	lsrs	r3, r3, #3
 80072e0:	f003 0303 	and.w	r3, r3, #3
 80072e4:	4a14      	ldr	r2, [pc, #80]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80072e6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ec:	e01e      	b.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072ee:	4b11      	ldr	r3, [pc, #68]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072fa:	d106      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80072fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007302:	d102      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007304:	4b0d      	ldr	r3, [pc, #52]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007308:	e010      	b.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800730a:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007312:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007316:	d106      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800731e:	d102      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007320:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007324:	e002      	b.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007326:	2300      	movs	r3, #0
 8007328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800732a:	e2e2      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800732c:	e2e1      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800732e:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007332:	e2de      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007334:	58024400 	.word	0x58024400
 8007338:	03d09000 	.word	0x03d09000
 800733c:	003d0900 	.word	0x003d0900
 8007340:	017d7840 	.word	0x017d7840
 8007344:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800734c:	e2d1      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800734e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007352:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007356:	430b      	orrs	r3, r1
 8007358:	f040 809c 	bne.w	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800735c:	4b93      	ldr	r3, [pc, #588]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800735e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007360:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007364:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800736c:	d054      	beq.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800736e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007370:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007374:	f200 808b 	bhi.w	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800737e:	f000 8083 	beq.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007384:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007388:	f200 8081 	bhi.w	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800738c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007392:	d02f      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800739a:	d878      	bhi.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800739c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d004      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a8:	d012      	beq.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80073aa:	e070      	b.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073ac:	4b7f      	ldr	r3, [pc, #508]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073b8:	d107      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fd5e 	bl	8007e80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c8:	e293      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ce:	e290      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073d0:	4b76      	ldr	r3, [pc, #472]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073dc:	d107      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073de:	f107 0318 	add.w	r3, r7, #24
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 faa4 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ec:	e281      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f2:	e27e      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073f4:	4b6d      	ldr	r3, [pc, #436]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007400:	d107      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007402:	f107 030c 	add.w	r3, r7, #12
 8007406:	4618      	mov	r0, r3
 8007408:	f000 fbe6 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007410:	e26f      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007416:	e26c      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007418:	4b64      	ldr	r3, [pc, #400]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800741a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800741c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007420:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007422:	4b62      	ldr	r3, [pc, #392]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b04      	cmp	r3, #4
 800742c:	d10c      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800742e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007430:	2b00      	cmp	r3, #0
 8007432:	d109      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007434:	4b5d      	ldr	r3, [pc, #372]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	08db      	lsrs	r3, r3, #3
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	4a5c      	ldr	r2, [pc, #368]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
 8007444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007446:	e01e      	b.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007448:	4b58      	ldr	r3, [pc, #352]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007454:	d106      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800745c:	d102      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800745e:	4b55      	ldr	r3, [pc, #340]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007462:	e010      	b.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007464:	4b51      	ldr	r3, [pc, #324]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800746c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007470:	d106      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007478:	d102      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800747a:	4b4f      	ldr	r3, [pc, #316]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800747e:	e002      	b.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007484:	e235      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007486:	e234      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007488:	4b4c      	ldr	r3, [pc, #304]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800748a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800748c:	e231      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007492:	e22e      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007498:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800749c:	430b      	orrs	r3, r1
 800749e:	f040 808f 	bne.w	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80074a2:	4b42      	ldr	r3, [pc, #264]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074a6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80074aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80074ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074b2:	d06b      	beq.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074ba:	d874      	bhi.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074c2:	d056      	beq.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80074c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074ca:	d86c      	bhi.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074d2:	d03b      	beq.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80074d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074da:	d864      	bhi.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074e2:	d021      	beq.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80074e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ea:	d85c      	bhi.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80074f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074f8:	d004      	beq.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80074fa:	e054      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80074fc:	f7fe fa0c 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8007500:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007502:	e1f6      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007504:	4b29      	ldr	r3, [pc, #164]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800750c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007510:	d107      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007512:	f107 0318 	add.w	r3, r7, #24
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fa0a 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007520:	e1e7      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007526:	e1e4      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007528:	4b20      	ldr	r3, [pc, #128]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007534:	d107      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007536:	f107 030c 	add.w	r3, r7, #12
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fb4c 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007544:	e1d5      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754a:	e1d2      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800754c:	4b17      	ldr	r3, [pc, #92]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b04      	cmp	r3, #4
 8007556:	d109      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007558:	4b14      	ldr	r3, [pc, #80]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	08db      	lsrs	r3, r3, #3
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	4a13      	ldr	r2, [pc, #76]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
 8007568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800756a:	e1c2      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800756c:	2300      	movs	r3, #0
 800756e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007570:	e1bf      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007572:	4b0e      	ldr	r3, [pc, #56]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800757a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800757e:	d102      	bne.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007580:	4b0c      	ldr	r3, [pc, #48]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007584:	e1b5      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800758a:	e1b2      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800758c:	4b07      	ldr	r3, [pc, #28]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007594:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007598:	d102      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800759a:	4b07      	ldr	r3, [pc, #28]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800759c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800759e:	e1a8      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a4:	e1a5      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075aa:	e1a2      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075ac:	58024400 	.word	0x58024400
 80075b0:	03d09000 	.word	0x03d09000
 80075b4:	003d0900 	.word	0x003d0900
 80075b8:	017d7840 	.word	0x017d7840
 80075bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80075c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80075c8:	430b      	orrs	r3, r1
 80075ca:	d173      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075cc:	4b9c      	ldr	r3, [pc, #624]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80075d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075dc:	d02f      	beq.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80075de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075e4:	d863      	bhi.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80075e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d004      	beq.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075f2:	d012      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80075f4:	e05b      	b.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075f6:	4b92      	ldr	r3, [pc, #584]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007602:	d107      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007604:	f107 0318 	add.w	r3, r7, #24
 8007608:	4618      	mov	r0, r3
 800760a:	f000 f991 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007612:	e16e      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007618:	e16b      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800761a:	4b89      	ldr	r3, [pc, #548]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007626:	d107      	bne.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007628:	f107 030c 	add.w	r3, r7, #12
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fad3 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007636:	e15c      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800763c:	e159      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800763e:	4b80      	ldr	r3, [pc, #512]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007642:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007646:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007648:	4b7d      	ldr	r3, [pc, #500]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b04      	cmp	r3, #4
 8007652:	d10c      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800765a:	4b79      	ldr	r3, [pc, #484]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	08db      	lsrs	r3, r3, #3
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	4a77      	ldr	r2, [pc, #476]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007666:	fa22 f303 	lsr.w	r3, r2, r3
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800766c:	e01e      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800766e:	4b74      	ldr	r3, [pc, #464]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800767a:	d106      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800767c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800767e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007682:	d102      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007684:	4b70      	ldr	r3, [pc, #448]	@ (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007688:	e010      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800768a:	4b6d      	ldr	r3, [pc, #436]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007696:	d106      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800769e:	d102      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076a0:	4b6a      	ldr	r3, [pc, #424]	@ (800784c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80076a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076a4:	e002      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80076aa:	e122      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076ac:	e121      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b2:	e11e      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80076bc:	430b      	orrs	r3, r1
 80076be:	d133      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80076c0:	4b5f      	ldr	r3, [pc, #380]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076d6:	d012      	beq.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80076d8:	e023      	b.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076da:	4b59      	ldr	r3, [pc, #356]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076e6:	d107      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fbc7 	bl	8007e80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f6:	e0fc      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076fc:	e0f9      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076fe:	4b50      	ldr	r3, [pc, #320]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800770a:	d107      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800770c:	f107 0318 	add.w	r3, r7, #24
 8007710:	4618      	mov	r0, r3
 8007712:	f000 f90d 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800771a:	e0ea      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007720:	e0e7      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007722:	2300      	movs	r3, #0
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007726:	e0e4      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800772c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007730:	430b      	orrs	r3, r1
 8007732:	f040 808d 	bne.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007736:	4b42      	ldr	r3, [pc, #264]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800773a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800773e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007742:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007746:	d06b      	beq.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800774e:	d874      	bhi.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007756:	d056      	beq.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800775e:	d86c      	bhi.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007766:	d03b      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800776e:	d864      	bhi.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007772:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007776:	d021      	beq.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800777e:	d85c      	bhi.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007782:	2b00      	cmp	r3, #0
 8007784:	d004      	beq.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800778c:	d004      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800778e:	e054      	b.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007790:	f000 f8b8 	bl	8007904 <HAL_RCCEx_GetD3PCLK1Freq>
 8007794:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007796:	e0ac      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007798:	4b29      	ldr	r3, [pc, #164]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077a4:	d107      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077a6:	f107 0318 	add.w	r3, r7, #24
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 f8c0 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b4:	e09d      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ba:	e09a      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077bc:	4b20      	ldr	r3, [pc, #128]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077c8:	d107      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ca:	f107 030c 	add.w	r3, r7, #12
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fa02 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077d8:	e08b      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077de:	e088      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077e0:	4b17      	ldr	r3, [pc, #92]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d109      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077ec:	4b14      	ldr	r3, [pc, #80]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	4a13      	ldr	r2, [pc, #76]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
 80077fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077fe:	e078      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007804:	e075      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007806:	4b0e      	ldr	r3, [pc, #56]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800780e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007812:	d102      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007814:	4b0c      	ldr	r3, [pc, #48]	@ (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007818:	e06b      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800781e:	e068      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007820:	4b07      	ldr	r3, [pc, #28]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800782c:	d102      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800782e:	4b07      	ldr	r3, [pc, #28]	@ (800784c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007832:	e05e      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007838:	e05b      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800783e:	e058      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007840:	58024400 	.word	0x58024400
 8007844:	03d09000 	.word	0x03d09000
 8007848:	003d0900 	.word	0x003d0900
 800784c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007854:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007858:	430b      	orrs	r3, r1
 800785a:	d148      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800785c:	4b27      	ldr	r3, [pc, #156]	@ (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800785e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007860:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007864:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800786c:	d02a      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800786e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007874:	d838      	bhi.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d004      	beq.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800787c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007882:	d00d      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007884:	e030      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007886:	4b1d      	ldr	r3, [pc, #116]	@ (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007892:	d102      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007894:	4b1a      	ldr	r3, [pc, #104]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007898:	e02b      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789e:	e028      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078a0:	4b16      	ldr	r3, [pc, #88]	@ (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078ac:	d107      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fae4 	bl	8007e80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078bc:	e019      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c2:	e016      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078c4:	4b0d      	ldr	r3, [pc, #52]	@ (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078d0:	d107      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d2:	f107 0318 	add.w	r3, r7, #24
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f82a 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078e0:	e007      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e6:	e004      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ec:	e001      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80078f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3740      	adds	r7, #64	@ 0x40
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	58024400 	.word	0x58024400
 8007900:	017d7840 	.word	0x017d7840

08007904 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007908:	f7fd ffd6 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 800790c:	4602      	mov	r2, r0
 800790e:	4b06      	ldr	r3, [pc, #24]	@ (8007928 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	091b      	lsrs	r3, r3, #4
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	4904      	ldr	r1, [pc, #16]	@ (800792c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800791a:	5ccb      	ldrb	r3, [r1, r3]
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007924:	4618      	mov	r0, r3
 8007926:	bd80      	pop	{r7, pc}
 8007928:	58024400 	.word	0x58024400
 800792c:	0800cf0c 	.word	0x0800cf0c

08007930 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007930:	b480      	push	{r7}
 8007932:	b089      	sub	sp, #36	@ 0x24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007938:	4ba1      	ldr	r3, [pc, #644]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007942:	4b9f      	ldr	r3, [pc, #636]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	0b1b      	lsrs	r3, r3, #12
 8007948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800794c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800794e:	4b9c      	ldr	r3, [pc, #624]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	091b      	lsrs	r3, r3, #4
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800795a:	4b99      	ldr	r3, [pc, #612]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800795c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795e:	08db      	lsrs	r3, r3, #3
 8007960:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	fb02 f303 	mul.w	r3, r2, r3
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007972:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8111 	beq.w	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	2b02      	cmp	r3, #2
 8007982:	f000 8083 	beq.w	8007a8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	2b02      	cmp	r3, #2
 800798a:	f200 80a1 	bhi.w	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d056      	beq.n	8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800799a:	e099      	b.n	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800799c:	4b88      	ldr	r3, [pc, #544]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0320 	and.w	r3, r3, #32
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d02d      	beq.n	8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079a8:	4b85      	ldr	r3, [pc, #532]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	08db      	lsrs	r3, r3, #3
 80079ae:	f003 0303 	and.w	r3, r3, #3
 80079b2:	4a84      	ldr	r2, [pc, #528]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80079b4:	fa22 f303 	lsr.w	r3, r2, r3
 80079b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	ee07 3a90 	vmov	s15, r3
 80079c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d2:	4b7b      	ldr	r3, [pc, #492]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a02:	e087      	b.n	8007b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a16:	4b6a      	ldr	r3, [pc, #424]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a46:	e065      	b.n	8007b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	ee07 3a90 	vmov	s15, r3
 8007a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5a:	4b59      	ldr	r3, [pc, #356]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a8a:	e043      	b.n	8007b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a9e:	4b48      	ldr	r3, [pc, #288]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ace:	e021      	b.n	8007b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ada:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae2:	4b37      	ldr	r3, [pc, #220]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007af6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b14:	4b2a      	ldr	r3, [pc, #168]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b18:	0a5b      	lsrs	r3, r3, #9
 8007b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b3a:	ee17 2a90 	vmov	r2, s15
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b42:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b46:	0c1b      	lsrs	r3, r3, #16
 8007b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b68:	ee17 2a90 	vmov	r2, s15
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b70:	4b13      	ldr	r3, [pc, #76]	@ (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b74:	0e1b      	lsrs	r3, r3, #24
 8007b76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b96:	ee17 2a90 	vmov	r2, s15
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	609a      	str	r2, [r3, #8]
}
 8007bb2:	bf00      	nop
 8007bb4:	3724      	adds	r7, #36	@ 0x24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	03d09000 	.word	0x03d09000
 8007bc8:	46000000 	.word	0x46000000
 8007bcc:	4c742400 	.word	0x4c742400
 8007bd0:	4a742400 	.word	0x4a742400
 8007bd4:	4bbebc20 	.word	0x4bbebc20

08007bd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b089      	sub	sp, #36	@ 0x24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007be0:	4ba1      	ldr	r3, [pc, #644]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007bea:	4b9f      	ldr	r3, [pc, #636]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bee:	0d1b      	lsrs	r3, r3, #20
 8007bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bf4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007bf6:	4b9c      	ldr	r3, [pc, #624]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfa:	0a1b      	lsrs	r3, r3, #8
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c02:	4b99      	ldr	r3, [pc, #612]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c06:	08db      	lsrs	r3, r3, #3
 8007c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	fb02 f303 	mul.w	r3, r2, r3
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 8111 	beq.w	8007e48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	f000 8083 	beq.w	8007d34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	f200 80a1 	bhi.w	8007d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d056      	beq.n	8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c42:	e099      	b.n	8007d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c44:	4b88      	ldr	r3, [pc, #544]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d02d      	beq.n	8007cac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c50:	4b85      	ldr	r3, [pc, #532]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	08db      	lsrs	r3, r3, #3
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	4a84      	ldr	r2, [pc, #528]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	ee07 3a90 	vmov	s15, r3
 8007c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007caa:	e087      	b.n	8007dbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cee:	e065      	b.n	8007dbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	ee07 3a90 	vmov	s15, r3
 8007cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d02:	4b59      	ldr	r3, [pc, #356]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d32:	e043      	b.n	8007dbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d46:	4b48      	ldr	r3, [pc, #288]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d76:	e021      	b.n	8007dbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8a:	4b37      	ldr	r3, [pc, #220]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc0:	0a5b      	lsrs	r3, r3, #9
 8007dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de2:	ee17 2a90 	vmov	r2, s15
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007dea:	4b1f      	ldr	r3, [pc, #124]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dee:	0c1b      	lsrs	r3, r3, #16
 8007df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df4:	ee07 3a90 	vmov	s15, r3
 8007df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e10:	ee17 2a90 	vmov	r2, s15
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e18:	4b13      	ldr	r3, [pc, #76]	@ (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1c:	0e1b      	lsrs	r3, r3, #24
 8007e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e3e:	ee17 2a90 	vmov	r2, s15
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e46:	e008      	b.n	8007e5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	609a      	str	r2, [r3, #8]
}
 8007e5a:	bf00      	nop
 8007e5c:	3724      	adds	r7, #36	@ 0x24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	58024400 	.word	0x58024400
 8007e6c:	03d09000 	.word	0x03d09000
 8007e70:	46000000 	.word	0x46000000
 8007e74:	4c742400 	.word	0x4c742400
 8007e78:	4a742400 	.word	0x4a742400
 8007e7c:	4bbebc20 	.word	0x4bbebc20

08007e80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b089      	sub	sp, #36	@ 0x24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e88:	4ba0      	ldr	r3, [pc, #640]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007e92:	4b9e      	ldr	r3, [pc, #632]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e96:	091b      	lsrs	r3, r3, #4
 8007e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e9c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007e9e:	4b9b      	ldr	r3, [pc, #620]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ea8:	4b98      	ldr	r3, [pc, #608]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eac:	08db      	lsrs	r3, r3, #3
 8007eae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	fb02 f303 	mul.w	r3, r2, r3
 8007eb8:	ee07 3a90 	vmov	s15, r3
 8007ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 8111 	beq.w	80080ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	f000 8083 	beq.w	8007fda <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	f200 80a1 	bhi.w	800801e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d056      	beq.n	8007f96 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007ee8:	e099      	b.n	800801e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eea:	4b88      	ldr	r3, [pc, #544]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d02d      	beq.n	8007f52 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ef6:	4b85      	ldr	r3, [pc, #532]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	08db      	lsrs	r3, r3, #3
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	4a83      	ldr	r2, [pc, #524]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007f02:	fa22 f303 	lsr.w	r3, r2, r3
 8007f06:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	ee07 3a90 	vmov	s15, r3
 8007f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f20:	4b7a      	ldr	r3, [pc, #488]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f28:	ee07 3a90 	vmov	s15, r3
 8007f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f34:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008114 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f50:	e087      	b.n	8008062 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	ee07 3a90 	vmov	s15, r3
 8007f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f64:	4b69      	ldr	r3, [pc, #420]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6c:	ee07 3a90 	vmov	s15, r3
 8007f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f74:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f78:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008114 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f94:	e065      	b.n	8008062 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	ee07 3a90 	vmov	s15, r3
 8007f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800811c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007fa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa8:	4b58      	ldr	r3, [pc, #352]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb0:	ee07 3a90 	vmov	s15, r3
 8007fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fbc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008114 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fd8:	e043      	b.n	8008062 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	ee07 3a90 	vmov	s15, r3
 8007fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fec:	4b47      	ldr	r3, [pc, #284]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff4:	ee07 3a90 	vmov	s15, r3
 8007ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008000:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008114 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008004:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008018:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800801c:	e021      	b.n	8008062 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	ee07 3a90 	vmov	s15, r3
 8008024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008028:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800802c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008030:	4b36      	ldr	r3, [pc, #216]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008038:	ee07 3a90 	vmov	s15, r3
 800803c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008040:	ed97 6a03 	vldr	s12, [r7, #12]
 8008044:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008114 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008050:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008060:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008062:	4b2a      	ldr	r3, [pc, #168]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008066:	0a5b      	lsrs	r3, r3, #9
 8008068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800806c:	ee07 3a90 	vmov	s15, r3
 8008070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008074:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800807c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008088:	ee17 2a90 	vmov	r2, s15
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008090:	4b1e      	ldr	r3, [pc, #120]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	0c1b      	lsrs	r3, r3, #16
 8008096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b6:	ee17 2a90 	vmov	r2, s15
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80080be:	4b13      	ldr	r3, [pc, #76]	@ (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c2:	0e1b      	lsrs	r3, r3, #24
 80080c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080c8:	ee07 3a90 	vmov	s15, r3
 80080cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80080dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e4:	ee17 2a90 	vmov	r2, s15
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80080ec:	e008      	b.n	8008100 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	609a      	str	r2, [r3, #8]
}
 8008100:	bf00      	nop
 8008102:	3724      	adds	r7, #36	@ 0x24
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	58024400 	.word	0x58024400
 8008110:	03d09000 	.word	0x03d09000
 8008114:	46000000 	.word	0x46000000
 8008118:	4c742400 	.word	0x4c742400
 800811c:	4a742400 	.word	0x4a742400
 8008120:	4bbebc20 	.word	0x4bbebc20

08008124 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008132:	4b53      	ldr	r3, [pc, #332]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	2b03      	cmp	r3, #3
 800813c:	d101      	bne.n	8008142 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e099      	b.n	8008276 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008142:	4b4f      	ldr	r3, [pc, #316]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a4e      	ldr	r2, [pc, #312]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008148:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800814c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800814e:	f7f9 f91f 	bl	8001390 <HAL_GetTick>
 8008152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008154:	e008      	b.n	8008168 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008156:	f7f9 f91b 	bl	8001390 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d901      	bls.n	8008168 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e086      	b.n	8008276 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008168:	4b45      	ldr	r3, [pc, #276]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1f0      	bne.n	8008156 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008174:	4b42      	ldr	r3, [pc, #264]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008178:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	031b      	lsls	r3, r3, #12
 8008182:	493f      	ldr	r1, [pc, #252]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008184:	4313      	orrs	r3, r2
 8008186:	628b      	str	r3, [r1, #40]	@ 0x28
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	3b01      	subs	r3, #1
 800818e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	3b01      	subs	r3, #1
 8008198:	025b      	lsls	r3, r3, #9
 800819a:	b29b      	uxth	r3, r3
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	041b      	lsls	r3, r3, #16
 80081a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	061b      	lsls	r3, r3, #24
 80081b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081b8:	4931      	ldr	r1, [pc, #196]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081be:	4b30      	ldr	r3, [pc, #192]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 80081c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	492d      	ldr	r1, [pc, #180]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081d0:	4b2b      	ldr	r3, [pc, #172]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 80081d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d4:	f023 0220 	bic.w	r2, r3, #32
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	4928      	ldr	r1, [pc, #160]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081e2:	4b27      	ldr	r3, [pc, #156]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 80081e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e6:	4a26      	ldr	r2, [pc, #152]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 80081e8:	f023 0310 	bic.w	r3, r3, #16
 80081ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081ee:	4b24      	ldr	r3, [pc, #144]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 80081f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081f2:	4b24      	ldr	r3, [pc, #144]	@ (8008284 <RCCEx_PLL2_Config+0x160>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	69d2      	ldr	r2, [r2, #28]
 80081fa:	00d2      	lsls	r2, r2, #3
 80081fc:	4920      	ldr	r1, [pc, #128]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008202:	4b1f      	ldr	r3, [pc, #124]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008206:	4a1e      	ldr	r2, [pc, #120]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008208:	f043 0310 	orr.w	r3, r3, #16
 800820c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d106      	bne.n	8008222 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008214:	4b1a      	ldr	r3, [pc, #104]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008218:	4a19      	ldr	r2, [pc, #100]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 800821a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800821e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008220:	e00f      	b.n	8008242 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d106      	bne.n	8008236 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008228:	4b15      	ldr	r3, [pc, #84]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 800822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822c:	4a14      	ldr	r2, [pc, #80]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 800822e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008232:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008234:	e005      	b.n	8008242 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008236:	4b12      	ldr	r3, [pc, #72]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	4a11      	ldr	r2, [pc, #68]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 800823c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008240:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008242:	4b0f      	ldr	r3, [pc, #60]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a0e      	ldr	r2, [pc, #56]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 8008248:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800824c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800824e:	f7f9 f89f 	bl	8001390 <HAL_GetTick>
 8008252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008254:	e008      	b.n	8008268 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008256:	f7f9 f89b 	bl	8001390 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	2b02      	cmp	r3, #2
 8008262:	d901      	bls.n	8008268 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e006      	b.n	8008276 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008268:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <RCCEx_PLL2_Config+0x15c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0f0      	beq.n	8008256 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008274:	7bfb      	ldrb	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	58024400 	.word	0x58024400
 8008284:	ffff0007 	.word	0xffff0007

08008288 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008296:	4b53      	ldr	r3, [pc, #332]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 8008298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d101      	bne.n	80082a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e099      	b.n	80083da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082a6:	4b4f      	ldr	r3, [pc, #316]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a4e      	ldr	r2, [pc, #312]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 80082ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082b2:	f7f9 f86d 	bl	8001390 <HAL_GetTick>
 80082b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082b8:	e008      	b.n	80082cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082ba:	f7f9 f869 	bl	8001390 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d901      	bls.n	80082cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e086      	b.n	80083da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082cc:	4b45      	ldr	r3, [pc, #276]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1f0      	bne.n	80082ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082d8:	4b42      	ldr	r3, [pc, #264]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 80082da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	051b      	lsls	r3, r3, #20
 80082e6:	493f      	ldr	r1, [pc, #252]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	025b      	lsls	r3, r3, #9
 80082fe:	b29b      	uxth	r3, r3
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	3b01      	subs	r3, #1
 8008308:	041b      	lsls	r3, r3, #16
 800830a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800830e:	431a      	orrs	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	3b01      	subs	r3, #1
 8008316:	061b      	lsls	r3, r3, #24
 8008318:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800831c:	4931      	ldr	r1, [pc, #196]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 800831e:	4313      	orrs	r3, r2
 8008320:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008322:	4b30      	ldr	r3, [pc, #192]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 8008324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008326:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	492d      	ldr	r1, [pc, #180]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 8008330:	4313      	orrs	r3, r2
 8008332:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008334:	4b2b      	ldr	r3, [pc, #172]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 8008336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008338:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	4928      	ldr	r1, [pc, #160]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 8008342:	4313      	orrs	r3, r2
 8008344:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008346:	4b27      	ldr	r3, [pc, #156]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	4a26      	ldr	r2, [pc, #152]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 800834c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008350:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008352:	4b24      	ldr	r3, [pc, #144]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 8008354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008356:	4b24      	ldr	r3, [pc, #144]	@ (80083e8 <RCCEx_PLL3_Config+0x160>)
 8008358:	4013      	ands	r3, r2
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	69d2      	ldr	r2, [r2, #28]
 800835e:	00d2      	lsls	r2, r2, #3
 8008360:	4920      	ldr	r1, [pc, #128]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 8008362:	4313      	orrs	r3, r2
 8008364:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008366:	4b1f      	ldr	r3, [pc, #124]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 8008368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836a:	4a1e      	ldr	r2, [pc, #120]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 800836c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008370:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d106      	bne.n	8008386 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008378:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 800837a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837c:	4a19      	ldr	r2, [pc, #100]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 800837e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008384:	e00f      	b.n	80083a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d106      	bne.n	800839a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800838c:	4b15      	ldr	r3, [pc, #84]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 800838e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008390:	4a14      	ldr	r2, [pc, #80]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 8008392:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008396:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008398:	e005      	b.n	80083a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800839a:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	4a11      	ldr	r2, [pc, #68]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 80083a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083a6:	4b0f      	ldr	r3, [pc, #60]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a0e      	ldr	r2, [pc, #56]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 80083ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b2:	f7f8 ffed 	bl	8001390 <HAL_GetTick>
 80083b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083b8:	e008      	b.n	80083cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083ba:	f7f8 ffe9 	bl	8001390 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e006      	b.n	80083da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <RCCEx_PLL3_Config+0x15c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0f0      	beq.n	80083ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	58024400 	.word	0x58024400
 80083e8:	ffff0007 	.word	0xffff0007

080083ec <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	@ 0x28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e28e      	b.n	800891c <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80083fe:	f7f8 fff7 	bl	80013f0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008408:	2b01      	cmp	r3, #1
 800840a:	d113      	bne.n	8008434 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a96      	ldr	r2, [pc, #600]	@ (800866c <HAL_SAI_Init+0x280>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d004      	beq.n	8008420 <HAL_SAI_Init+0x34>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a95      	ldr	r2, [pc, #596]	@ (8008670 <HAL_SAI_Init+0x284>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d107      	bne.n	8008430 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008424:	2b01      	cmp	r3, #1
 8008426:	d103      	bne.n	8008430 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e273      	b.n	800891c <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a8c      	ldr	r2, [pc, #560]	@ (800866c <HAL_SAI_Init+0x280>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d004      	beq.n	8008448 <HAL_SAI_Init+0x5c>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a8c      	ldr	r2, [pc, #560]	@ (8008674 <HAL_SAI_Init+0x288>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d102      	bne.n	800844e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8008448:	4b8b      	ldr	r3, [pc, #556]	@ (8008678 <HAL_SAI_Init+0x28c>)
 800844a:	61bb      	str	r3, [r7, #24]
 800844c:	e028      	b.n	80084a0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a8a      	ldr	r2, [pc, #552]	@ (800867c <HAL_SAI_Init+0x290>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d004      	beq.n	8008462 <HAL_SAI_Init+0x76>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a88      	ldr	r2, [pc, #544]	@ (8008680 <HAL_SAI_Init+0x294>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d102      	bne.n	8008468 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8008462:	4b88      	ldr	r3, [pc, #544]	@ (8008684 <HAL_SAI_Init+0x298>)
 8008464:	61bb      	str	r3, [r7, #24]
 8008466:	e01b      	b.n	80084a0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a86      	ldr	r2, [pc, #536]	@ (8008688 <HAL_SAI_Init+0x29c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_SAI_Init+0x90>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a85      	ldr	r2, [pc, #532]	@ (800868c <HAL_SAI_Init+0x2a0>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d102      	bne.n	8008482 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800847c:	4b84      	ldr	r3, [pc, #528]	@ (8008690 <HAL_SAI_Init+0x2a4>)
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	e00e      	b.n	80084a0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a7a      	ldr	r2, [pc, #488]	@ (8008670 <HAL_SAI_Init+0x284>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d004      	beq.n	8008496 <HAL_SAI_Init+0xaa>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a80      	ldr	r2, [pc, #512]	@ (8008694 <HAL_SAI_Init+0x2a8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d102      	bne.n	800849c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8008496:	4b80      	ldr	r3, [pc, #512]	@ (8008698 <HAL_SAI_Init+0x2ac>)
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	e001      	b.n	80084a0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e23d      	b.n	800891c <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7f8 fd25 	bl	8000f04 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fd72 	bl	8008fa4 <SAI_Disable>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e228      	b.n	800891c <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2202      	movs	r2, #2
 80084ce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d00c      	beq.n	80084f4 <HAL_SAI_Init+0x108>
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d80d      	bhi.n	80084fa <HAL_SAI_Init+0x10e>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <HAL_SAI_Init+0xfc>
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d003      	beq.n	80084ee <HAL_SAI_Init+0x102>
 80084e6:	e008      	b.n	80084fa <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80084ec:	e008      	b.n	8008500 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80084ee:	2310      	movs	r3, #16
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80084f2:	e005      	b.n	8008500 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80084f4:	2320      	movs	r3, #32
 80084f6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80084f8:	e002      	b.n	8008500 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80084fe:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	2b05      	cmp	r3, #5
 8008506:	d832      	bhi.n	800856e <HAL_SAI_Init+0x182>
 8008508:	a201      	add	r2, pc, #4	@ (adr r2, 8008510 <HAL_SAI_Init+0x124>)
 800850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850e:	bf00      	nop
 8008510:	08008529 	.word	0x08008529
 8008514:	0800852f 	.word	0x0800852f
 8008518:	08008537 	.word	0x08008537
 800851c:	0800853f 	.word	0x0800853f
 8008520:	0800854f 	.word	0x0800854f
 8008524:	0800855f 	.word	0x0800855f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	61fb      	str	r3, [r7, #28]
      break;
 800852c:	e022      	b.n	8008574 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800852e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008532:	61fb      	str	r3, [r7, #28]
      break;
 8008534:	e01e      	b.n	8008574 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008536:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800853a:	61fb      	str	r3, [r7, #28]
      break;
 800853c:	e01a      	b.n	8008574 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800853e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008542:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800854c:	e012      	b.n	8008574 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800854e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008552:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8008554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008556:	f043 0302 	orr.w	r3, r3, #2
 800855a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800855c:	e00a      	b.n	8008574 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800855e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008562:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	f043 0303 	orr.w	r3, r3, #3
 800856a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800856c:	e002      	b.n	8008574 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	61fb      	str	r3, [r7, #28]
      break;
 8008572:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008578:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80c5 	beq.w	800870e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a37      	ldr	r2, [pc, #220]	@ (800866c <HAL_SAI_Init+0x280>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d004      	beq.n	800859c <HAL_SAI_Init+0x1b0>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a37      	ldr	r2, [pc, #220]	@ (8008674 <HAL_SAI_Init+0x288>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d106      	bne.n	80085aa <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800859c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	f7fe fc2e 	bl	8006e04 <HAL_RCCEx_GetPeriphCLKFreq>
 80085a8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a33      	ldr	r2, [pc, #204]	@ (800867c <HAL_SAI_Init+0x290>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d004      	beq.n	80085be <HAL_SAI_Init+0x1d2>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a31      	ldr	r2, [pc, #196]	@ (8008680 <HAL_SAI_Init+0x294>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d106      	bne.n	80085cc <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80085be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80085c2:	f04f 0100 	mov.w	r1, #0
 80085c6:	f7fe fc1d 	bl	8006e04 <HAL_RCCEx_GetPeriphCLKFreq>
 80085ca:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008688 <HAL_SAI_Init+0x29c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d004      	beq.n	80085e0 <HAL_SAI_Init+0x1f4>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2c      	ldr	r2, [pc, #176]	@ (800868c <HAL_SAI_Init+0x2a0>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d106      	bne.n	80085ee <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80085e0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80085e4:	f04f 0100 	mov.w	r1, #0
 80085e8:	f7fe fc0c 	bl	8006e04 <HAL_RCCEx_GetPeriphCLKFreq>
 80085ec:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008670 <HAL_SAI_Init+0x284>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d106      	bne.n	8008606 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80085f8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80085fc:	f04f 0100 	mov.w	r1, #0
 8008600:	f7fe fc00 	bl	8006e04 <HAL_RCCEx_GetPeriphCLKFreq>
 8008604:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a22      	ldr	r2, [pc, #136]	@ (8008694 <HAL_SAI_Init+0x2a8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d106      	bne.n	800861e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008610:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008614:	f04f 0100 	mov.w	r1, #0
 8008618:	f7fe fbf4 	bl	8006e04 <HAL_RCCEx_GetPeriphCLKFreq>
 800861c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008626:	d139      	bne.n	800869c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800862c:	2b04      	cmp	r3, #4
 800862e:	d102      	bne.n	8008636 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8008630:	2340      	movs	r3, #64	@ 0x40
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e00a      	b.n	800864c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800863a:	2b08      	cmp	r3, #8
 800863c:	d103      	bne.n	8008646 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800863e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	e002      	b.n	800864c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800864a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	4619      	mov	r1, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	fb02 f303 	mul.w	r3, r2, r3
 8008662:	fbb1 f3f3 	udiv	r3, r1, r3
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	e030      	b.n	80086cc <HAL_SAI_Init+0x2e0>
 800866a:	bf00      	nop
 800866c:	40015804 	.word	0x40015804
 8008670:	58005404 	.word	0x58005404
 8008674:	40015824 	.word	0x40015824
 8008678:	40015800 	.word	0x40015800
 800867c:	40015c04 	.word	0x40015c04
 8008680:	40015c24 	.word	0x40015c24
 8008684:	40015c00 	.word	0x40015c00
 8008688:	40016004 	.word	0x40016004
 800868c:	40016024 	.word	0x40016024
 8008690:	40016000 	.word	0x40016000
 8008694:	58005424 	.word	0x58005424
 8008698:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086a4:	d101      	bne.n	80086aa <HAL_SAI_Init+0x2be>
 80086a6:	2302      	movs	r3, #2
 80086a8:	e000      	b.n	80086ac <HAL_SAI_Init+0x2c0>
 80086aa:	2301      	movs	r3, #1
 80086ac:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	4619      	mov	r1, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	fb02 f303 	mul.w	r3, r2, r3
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80086ca:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	4a95      	ldr	r2, [pc, #596]	@ (8008924 <HAL_SAI_Init+0x538>)
 80086d0:	fba2 2303 	umull	r2, r3, r2, r3
 80086d4:	08da      	lsrs	r2, r3, #3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80086da:	6939      	ldr	r1, [r7, #16]
 80086dc:	4b91      	ldr	r3, [pc, #580]	@ (8008924 <HAL_SAI_Init+0x538>)
 80086de:	fba3 2301 	umull	r2, r3, r3, r1
 80086e2:	08da      	lsrs	r2, r3, #3
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	1aca      	subs	r2, r1, r3
 80086ee:	2a08      	cmp	r2, #8
 80086f0:	d904      	bls.n	80086fc <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008700:	2b04      	cmp	r3, #4
 8008702:	d104      	bne.n	800870e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008708:	085a      	lsrs	r2, r3, #1
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <HAL_SAI_Init+0x332>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	2b02      	cmp	r3, #2
 800871c:	d109      	bne.n	8008732 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008722:	2b01      	cmp	r3, #1
 8008724:	d101      	bne.n	800872a <HAL_SAI_Init+0x33e>
 8008726:	2300      	movs	r3, #0
 8008728:	e001      	b.n	800872e <HAL_SAI_Init+0x342>
 800872a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800872e:	623b      	str	r3, [r7, #32]
 8008730:	e008      	b.n	8008744 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008736:	2b01      	cmp	r3, #1
 8008738:	d102      	bne.n	8008740 <HAL_SAI_Init+0x354>
 800873a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800873e:	e000      	b.n	8008742 <HAL_SAI_Init+0x356>
 8008740:	2300      	movs	r3, #0
 8008742:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008744:	f7f8 fe54 	bl	80013f0 <HAL_GetREVID>
 8008748:	4603      	mov	r3, r0
 800874a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800874e:	d331      	bcc.n	80087b4 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6819      	ldr	r1, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	4b73      	ldr	r3, [pc, #460]	@ (8008928 <HAL_SAI_Init+0x53c>)
 800875c:	400b      	ands	r3, r1
 800875e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6819      	ldr	r1, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800876e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008774:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800877a:	431a      	orrs	r2, r3
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008788:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008794:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879a:	051b      	lsls	r3, r3, #20
 800879c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80087a2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	e02d      	b.n	8008810 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6819      	ldr	r1, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	4b5b      	ldr	r3, [pc, #364]	@ (800892c <HAL_SAI_Init+0x540>)
 80087c0:	400b      	ands	r3, r1
 80087c2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6819      	ldr	r1, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80087d8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087de:	431a      	orrs	r2, r3
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 80087ec:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80087f8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fe:	051b      	lsls	r3, r3, #20
 8008800:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008806:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	430a      	orrs	r2, r1
 800880e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6859      	ldr	r1, [r3, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	4b45      	ldr	r3, [pc, #276]	@ (8008930 <HAL_SAI_Init+0x544>)
 800881c:	400b      	ands	r3, r1
 800881e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6859      	ldr	r1, [r3, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69da      	ldr	r2, [r3, #28]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008834:	431a      	orrs	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6899      	ldr	r1, [r3, #8]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	4b3a      	ldr	r3, [pc, #232]	@ (8008934 <HAL_SAI_Init+0x548>)
 800884a:	400b      	ands	r3, r1
 800884c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6899      	ldr	r1, [r3, #8]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008858:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800885e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8008864:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800886a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008870:	3b01      	subs	r3, #1
 8008872:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008874:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68d9      	ldr	r1, [r3, #12]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800888c:	400b      	ands	r3, r1
 800888e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68d9      	ldr	r1, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800889e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80088a6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ac:	3b01      	subs	r3, #1
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a1e      	ldr	r2, [pc, #120]	@ (8008938 <HAL_SAI_Init+0x54c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d004      	beq.n	80088ce <HAL_SAI_Init+0x4e2>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a1c      	ldr	r2, [pc, #112]	@ (800893c <HAL_SAI_Init+0x550>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d119      	bne.n	8008902 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088d2:	f023 0201 	bic.w	r2, r3, #1
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d10e      	bne.n	8008902 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ec:	3b01      	subs	r3, #1
 80088ee:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80088f0:	431a      	orrs	r2, r3
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088fa:	f043 0201 	orr.w	r2, r3, #1
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3728      	adds	r7, #40	@ 0x28
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	cccccccd 	.word	0xcccccccd
 8008928:	f005c010 	.word	0xf005c010
 800892c:	f805c010 	.word	0xf805c010
 8008930:	ffff1ff0 	.word	0xffff1ff0
 8008934:	fff88000 	.word	0xfff88000
 8008938:	40015804 	.word	0x40015804
 800893c:	58005404 	.word	0x58005404

08008940 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <HAL_SAI_Abort+0x1a>
 8008956:	2302      	movs	r3, #2
 8008958:	e07d      	b.n	8008a56 <HAL_SAI_Abort+0x116>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fb1e 	bl	8008fa4 <SAI_Disable>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800897c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008980:	d14f      	bne.n	8008a22 <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008990:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b12      	cmp	r3, #18
 800899c:	d11d      	bne.n	80089da <HAL_SAI_Abort+0x9a>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d018      	beq.n	80089da <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7f9 fc78 	bl	80022a4 <HAL_DMA_Abort>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00f      	beq.n	80089da <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c2:	2b80      	cmp	r3, #128	@ 0x80
 80089c4:	d009      	beq.n	80089da <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b22      	cmp	r3, #34	@ 0x22
 80089e4:	d11d      	bne.n	8008a22 <HAL_SAI_Abort+0xe2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d018      	beq.n	8008a22 <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7f9 fc54 	bl	80022a4 <HAL_DMA_Abort>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00f      	beq.n	8008a22 <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a0a:	2b80      	cmp	r3, #128	@ 0x80
 8008a0c:	d009      	beq.n	8008a22 <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2200      	movs	r2, #0
 8008a28:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a32:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0208 	orr.w	r2, r2, #8
 8008a42:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <HAL_SAI_Receive_DMA+0x1a>
 8008a74:	88fb      	ldrh	r3, [r7, #6]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e079      	b.n	8008b72 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d172      	bne.n	8008b70 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d101      	bne.n	8008a98 <HAL_SAI_Receive_DMA+0x38>
 8008a94:	2302      	movs	r3, #2
 8008a96:	e06c      	b.n	8008b72 <HAL_SAI_Receive_DMA+0x112>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	88fa      	ldrh	r2, [r7, #6]
 8008aaa:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	88fa      	ldrh	r2, [r7, #6]
 8008ab2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2222      	movs	r2, #34	@ 0x22
 8008ac2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008acc:	4a2b      	ldr	r2, [pc, #172]	@ (8008b7c <HAL_SAI_Receive_DMA+0x11c>)
 8008ace:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b80 <HAL_SAI_Receive_DMA+0x120>)
 8008ad8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ae0:	4a28      	ldr	r2, [pc, #160]	@ (8008b84 <HAL_SAI_Receive_DMA+0x124>)
 8008ae2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aea:	2200      	movs	r2, #0
 8008aec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	331c      	adds	r3, #28
 8008afa:	4619      	mov	r1, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b00:	461a      	mov	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008b08:	f7f9 f962 	bl	8001dd0 <HAL_DMA_Start_IT>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d005      	beq.n	8008b1e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e029      	b.n	8008b72 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008b1e:	2100      	movs	r1, #0
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 fa07 	bl	8008f34 <SAI_InterruptFlag>
 8008b26:	4601      	mov	r1, r0
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008b44:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d107      	bne.n	8008b64 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008b62:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e000      	b.n	8008b72 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008b70:	2302      	movs	r3, #2
  }
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	08009079 	.word	0x08009079
 8008b80:	08009019 	.word	0x08009019
 8008b84:	08009095 	.word	0x08009095

08008b88 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 81a7 	beq.w	8008eec <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f003 0308 	and.w	r3, r3, #8
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <HAL_SAI_IRQHandler+0x4e>
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	4798      	blx	r3
 8008bd4:	e18a      	b.n	8008eec <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01e      	beq.n	8008c1e <HAL_SAI_IRQHandler+0x96>
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d019      	beq.n	8008c1e <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b22      	cmp	r3, #34	@ 0x22
 8008bfc:	d101      	bne.n	8008c02 <HAL_SAI_IRQHandler+0x7a>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <HAL_SAI_IRQHandler+0x7c>
 8008c02:	2302      	movs	r3, #2
 8008c04:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f982 	bl	8008f20 <HAL_SAI_ErrorCallback>
 8008c1c:	e166      	b.n	8008eec <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d013      	beq.n	8008c50 <HAL_SAI_IRQHandler+0xc8>
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f003 0302 	and.w	r3, r3, #2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00e      	beq.n	8008c50 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2202      	movs	r2, #2
 8008c38:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 8153 	beq.w	8008eec <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c4c:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8008c4e:	e14d      	b.n	8008eec <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d05b      	beq.n	8008d12 <HAL_SAI_IRQHandler+0x18a>
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f003 0320 	and.w	r3, r3, #32
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d056      	beq.n	8008d12 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c72:	f043 0204 	orr.w	r2, r3, #4
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d03e      	beq.n	8008d04 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d018      	beq.n	8008cc2 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c96:	4a97      	ldr	r2, [pc, #604]	@ (8008ef4 <HAL_SAI_IRQHandler+0x36c>)
 8008c98:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7f9 fe1d 	bl	80028e0 <HAL_DMA_Abort_IT>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00a      	beq.n	8008cc2 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cb2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f92f 	bl	8008f20 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 810a 	beq.w	8008ee2 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cd4:	4a87      	ldr	r2, [pc, #540]	@ (8008ef4 <HAL_SAI_IRQHandler+0x36c>)
 8008cd6:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7f9 fdfe 	bl	80028e0 <HAL_DMA_Abort_IT>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 80fb 	beq.w	8008ee2 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cf2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f90f 	bl	8008f20 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008d02:	e0ee      	b.n	8008ee2 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff fe1b 	bl	8008940 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f908 	bl	8008f20 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008d10:	e0e7      	b.n	8008ee2 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d05b      	beq.n	8008dd4 <HAL_SAI_IRQHandler+0x24c>
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d056      	beq.n	8008dd4 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2240      	movs	r2, #64	@ 0x40
 8008d2c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d34:	f043 0208 	orr.w	r2, r3, #8
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d03e      	beq.n	8008dc6 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d018      	beq.n	8008d84 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d58:	4a66      	ldr	r2, [pc, #408]	@ (8008ef4 <HAL_SAI_IRQHandler+0x36c>)
 8008d5a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7f9 fdbc 	bl	80028e0 <HAL_DMA_Abort_IT>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f8ce 	bl	8008f20 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 80ab 	beq.w	8008ee6 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d96:	4a57      	ldr	r2, [pc, #348]	@ (8008ef4 <HAL_SAI_IRQHandler+0x36c>)
 8008d98:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7f9 fd9d 	bl	80028e0 <HAL_DMA_Abort_IT>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 809c 	beq.w	8008ee6 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008db4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f8ae 	bl	8008f20 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008dc4:	e08f      	b.n	8008ee6 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fdba 	bl	8008940 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f8a7 	bl	8008f20 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008dd2:	e088      	b.n	8008ee6 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f003 0304 	and.w	r3, r3, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d067      	beq.n	8008eae <HAL_SAI_IRQHandler+0x326>
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d062      	beq.n	8008eae <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2204      	movs	r2, #4
 8008dee:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008df6:	f043 0220 	orr.w	r2, r3, #32
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d03c      	beq.n	8008e84 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d018      	beq.n	8008e46 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e1a:	4a36      	ldr	r2, [pc, #216]	@ (8008ef4 <HAL_SAI_IRQHandler+0x36c>)
 8008e1c:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7f9 fd5b 	bl	80028e0 <HAL_DMA_Abort_IT>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00a      	beq.n	8008e46 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f86d 	bl	8008f20 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d04c      	beq.n	8008eea <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e56:	4a27      	ldr	r2, [pc, #156]	@ (8008ef4 <HAL_SAI_IRQHandler+0x36c>)
 8008e58:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f9 fd3d 	bl	80028e0 <HAL_DMA_Abort_IT>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d03e      	beq.n	8008eea <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f84f 	bl	8008f20 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e82:	e032      	b.n	8008eea <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e94:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f83a 	bl	8008f20 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008eac:	e01d      	b.n	8008eea <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f003 0310 	and.w	r3, r3, #16
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d019      	beq.n	8008eec <HAL_SAI_IRQHandler+0x364>
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f003 0310 	and.w	r3, r3, #16
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d014      	beq.n	8008eec <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2210      	movs	r2, #16
 8008ec8:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ed0:	f043 0210 	orr.w	r2, r3, #16
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f820 	bl	8008f20 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8008ee0:	e004      	b.n	8008eec <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008ee2:	bf00      	nop
 8008ee4:	e002      	b.n	8008eec <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008ee6:	bf00      	nop
 8008ee8:	e000      	b.n	8008eec <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008eea:	bf00      	nop
}
 8008eec:	bf00      	nop
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	080090f3 	.word	0x080090f3

08008ef8 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d103      	bne.n	8008f52 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f043 0308 	orr.w	r3, r3, #8
 8008f50:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f56:	2b08      	cmp	r3, #8
 8008f58:	d10b      	bne.n	8008f72 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d003      	beq.n	8008f6a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d103      	bne.n	8008f72 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f043 0310 	orr.w	r3, r3, #16
 8008f70:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d003      	beq.n	8008f82 <SAI_InterruptFlag+0x4e>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d104      	bne.n	8008f8c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	e003      	b.n	8008f94 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f043 0304 	orr.w	r3, r3, #4
 8008f92:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008f94:	68fb      	ldr	r3, [r7, #12]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
	...

08008fa4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008fac:	4b18      	ldr	r3, [pc, #96]	@ (8009010 <SAI_Disable+0x6c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a18      	ldr	r2, [pc, #96]	@ (8009014 <SAI_Disable+0x70>)
 8008fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb6:	0b1b      	lsrs	r3, r3, #12
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008fce:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10a      	bne.n	8008fec <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	72fb      	strb	r3, [r7, #11]
      break;
 8008fea:	e009      	b.n	8009000 <SAI_Disable+0x5c>
    }
    count--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e7      	bne.n	8008fd0 <SAI_Disable+0x2c>

  return status;
 8009000:	7afb      	ldrb	r3, [r7, #11]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	24000000 	.word	0x24000000
 8009014:	95cbec1b 	.word	0x95cbec1b

08009018 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800902e:	d01c      	beq.n	800906a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800903e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009048:	2100      	movs	r1, #0
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7ff ff72 	bl	8008f34 <SAI_InterruptFlag>
 8009050:	4603      	mov	r3, r0
 8009052:	43d9      	mvns	r1, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	691a      	ldr	r2, [r3, #16]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	400a      	ands	r2, r1
 8009060:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff ff44 	bl	8008ef8 <HAL_SAI_RxCpltCallback>
#endif
}
 8009070:	bf00      	nop
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009084:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f7ff ff40 	bl	8008f0c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800908c:	bf00      	nop
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a0:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7fa fd8c 	bl	8003bc0 <HAL_DMA_GetError>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d01d      	beq.n	80090ea <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80090cc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f7ff ff68 	bl	8008fa4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f7ff ff1b 	bl	8008f20 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80090ea:	bf00      	nop
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800910e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2200      	movs	r2, #0
 8009116:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009120:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009128:	2b20      	cmp	r3, #32
 800912a:	d00a      	beq.n	8009142 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f7ff ff39 	bl	8008fa4 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0208 	orr.w	r2, r2, #8
 8009140:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f7ff fee4 	bl	8008f20 <HAL_SAI_ErrorCallback>
#endif
}
 8009158:	bf00      	nop
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e042      	b.n	80091f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009178:	2b00      	cmp	r3, #0
 800917a:	d106      	bne.n	800918a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7f7 fe73 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2224      	movs	r2, #36	@ 0x24
 800918e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f022 0201 	bic.w	r2, r2, #1
 80091a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fd90 	bl	8009cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f825 	bl	8009200 <UART_SetConfig>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d101      	bne.n	80091c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e01b      	b.n	80091f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689a      	ldr	r2, [r3, #8]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0201 	orr.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fe0f 	bl	8009e14 <UART_CheckIdleState>
 80091f6:	4603      	mov	r3, r0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009204:	b092      	sub	sp, #72	@ 0x48
 8009206:	af00      	add	r7, sp, #0
 8009208:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	689a      	ldr	r2, [r3, #8]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	431a      	orrs	r2, r3
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	431a      	orrs	r2, r3
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	4313      	orrs	r3, r2
 8009226:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	4bbe      	ldr	r3, [pc, #760]	@ (8009528 <UART_SetConfig+0x328>)
 8009230:	4013      	ands	r3, r2
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009238:	430b      	orrs	r3, r1
 800923a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	68da      	ldr	r2, [r3, #12]
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4ab3      	ldr	r2, [pc, #716]	@ (800952c <UART_SetConfig+0x32c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d004      	beq.n	800926c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009268:	4313      	orrs	r3, r2
 800926a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689a      	ldr	r2, [r3, #8]
 8009272:	4baf      	ldr	r3, [pc, #700]	@ (8009530 <UART_SetConfig+0x330>)
 8009274:	4013      	ands	r3, r2
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	6812      	ldr	r2, [r2, #0]
 800927a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800927c:	430b      	orrs	r3, r1
 800927e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009286:	f023 010f 	bic.w	r1, r3, #15
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4aa6      	ldr	r2, [pc, #664]	@ (8009534 <UART_SetConfig+0x334>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d177      	bne.n	8009390 <UART_SetConfig+0x190>
 80092a0:	4ba5      	ldr	r3, [pc, #660]	@ (8009538 <UART_SetConfig+0x338>)
 80092a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092a8:	2b28      	cmp	r3, #40	@ 0x28
 80092aa:	d86d      	bhi.n	8009388 <UART_SetConfig+0x188>
 80092ac:	a201      	add	r2, pc, #4	@ (adr r2, 80092b4 <UART_SetConfig+0xb4>)
 80092ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b2:	bf00      	nop
 80092b4:	08009359 	.word	0x08009359
 80092b8:	08009389 	.word	0x08009389
 80092bc:	08009389 	.word	0x08009389
 80092c0:	08009389 	.word	0x08009389
 80092c4:	08009389 	.word	0x08009389
 80092c8:	08009389 	.word	0x08009389
 80092cc:	08009389 	.word	0x08009389
 80092d0:	08009389 	.word	0x08009389
 80092d4:	08009361 	.word	0x08009361
 80092d8:	08009389 	.word	0x08009389
 80092dc:	08009389 	.word	0x08009389
 80092e0:	08009389 	.word	0x08009389
 80092e4:	08009389 	.word	0x08009389
 80092e8:	08009389 	.word	0x08009389
 80092ec:	08009389 	.word	0x08009389
 80092f0:	08009389 	.word	0x08009389
 80092f4:	08009369 	.word	0x08009369
 80092f8:	08009389 	.word	0x08009389
 80092fc:	08009389 	.word	0x08009389
 8009300:	08009389 	.word	0x08009389
 8009304:	08009389 	.word	0x08009389
 8009308:	08009389 	.word	0x08009389
 800930c:	08009389 	.word	0x08009389
 8009310:	08009389 	.word	0x08009389
 8009314:	08009371 	.word	0x08009371
 8009318:	08009389 	.word	0x08009389
 800931c:	08009389 	.word	0x08009389
 8009320:	08009389 	.word	0x08009389
 8009324:	08009389 	.word	0x08009389
 8009328:	08009389 	.word	0x08009389
 800932c:	08009389 	.word	0x08009389
 8009330:	08009389 	.word	0x08009389
 8009334:	08009379 	.word	0x08009379
 8009338:	08009389 	.word	0x08009389
 800933c:	08009389 	.word	0x08009389
 8009340:	08009389 	.word	0x08009389
 8009344:	08009389 	.word	0x08009389
 8009348:	08009389 	.word	0x08009389
 800934c:	08009389 	.word	0x08009389
 8009350:	08009389 	.word	0x08009389
 8009354:	08009381 	.word	0x08009381
 8009358:	2301      	movs	r3, #1
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e222      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009360:	2304      	movs	r3, #4
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009366:	e21e      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009368:	2308      	movs	r3, #8
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936e:	e21a      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009370:	2310      	movs	r3, #16
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009376:	e216      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009378:	2320      	movs	r3, #32
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e212      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009380:	2340      	movs	r3, #64	@ 0x40
 8009382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009386:	e20e      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009388:	2380      	movs	r3, #128	@ 0x80
 800938a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938e:	e20a      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a69      	ldr	r2, [pc, #420]	@ (800953c <UART_SetConfig+0x33c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d130      	bne.n	80093fc <UART_SetConfig+0x1fc>
 800939a:	4b67      	ldr	r3, [pc, #412]	@ (8009538 <UART_SetConfig+0x338>)
 800939c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800939e:	f003 0307 	and.w	r3, r3, #7
 80093a2:	2b05      	cmp	r3, #5
 80093a4:	d826      	bhi.n	80093f4 <UART_SetConfig+0x1f4>
 80093a6:	a201      	add	r2, pc, #4	@ (adr r2, 80093ac <UART_SetConfig+0x1ac>)
 80093a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ac:	080093c5 	.word	0x080093c5
 80093b0:	080093cd 	.word	0x080093cd
 80093b4:	080093d5 	.word	0x080093d5
 80093b8:	080093dd 	.word	0x080093dd
 80093bc:	080093e5 	.word	0x080093e5
 80093c0:	080093ed 	.word	0x080093ed
 80093c4:	2300      	movs	r3, #0
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ca:	e1ec      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80093cc:	2304      	movs	r3, #4
 80093ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d2:	e1e8      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80093d4:	2308      	movs	r3, #8
 80093d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093da:	e1e4      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80093dc:	2310      	movs	r3, #16
 80093de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e2:	e1e0      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80093e4:	2320      	movs	r3, #32
 80093e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ea:	e1dc      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80093ec:	2340      	movs	r3, #64	@ 0x40
 80093ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f2:	e1d8      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80093f4:	2380      	movs	r3, #128	@ 0x80
 80093f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fa:	e1d4      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a4f      	ldr	r2, [pc, #316]	@ (8009540 <UART_SetConfig+0x340>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d130      	bne.n	8009468 <UART_SetConfig+0x268>
 8009406:	4b4c      	ldr	r3, [pc, #304]	@ (8009538 <UART_SetConfig+0x338>)
 8009408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800940a:	f003 0307 	and.w	r3, r3, #7
 800940e:	2b05      	cmp	r3, #5
 8009410:	d826      	bhi.n	8009460 <UART_SetConfig+0x260>
 8009412:	a201      	add	r2, pc, #4	@ (adr r2, 8009418 <UART_SetConfig+0x218>)
 8009414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009418:	08009431 	.word	0x08009431
 800941c:	08009439 	.word	0x08009439
 8009420:	08009441 	.word	0x08009441
 8009424:	08009449 	.word	0x08009449
 8009428:	08009451 	.word	0x08009451
 800942c:	08009459 	.word	0x08009459
 8009430:	2300      	movs	r3, #0
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009436:	e1b6      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009438:	2304      	movs	r3, #4
 800943a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943e:	e1b2      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009440:	2308      	movs	r3, #8
 8009442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009446:	e1ae      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009448:	2310      	movs	r3, #16
 800944a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944e:	e1aa      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009450:	2320      	movs	r3, #32
 8009452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009456:	e1a6      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009458:	2340      	movs	r3, #64	@ 0x40
 800945a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945e:	e1a2      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009460:	2380      	movs	r3, #128	@ 0x80
 8009462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009466:	e19e      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a35      	ldr	r2, [pc, #212]	@ (8009544 <UART_SetConfig+0x344>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d130      	bne.n	80094d4 <UART_SetConfig+0x2d4>
 8009472:	4b31      	ldr	r3, [pc, #196]	@ (8009538 <UART_SetConfig+0x338>)
 8009474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009476:	f003 0307 	and.w	r3, r3, #7
 800947a:	2b05      	cmp	r3, #5
 800947c:	d826      	bhi.n	80094cc <UART_SetConfig+0x2cc>
 800947e:	a201      	add	r2, pc, #4	@ (adr r2, 8009484 <UART_SetConfig+0x284>)
 8009480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009484:	0800949d 	.word	0x0800949d
 8009488:	080094a5 	.word	0x080094a5
 800948c:	080094ad 	.word	0x080094ad
 8009490:	080094b5 	.word	0x080094b5
 8009494:	080094bd 	.word	0x080094bd
 8009498:	080094c5 	.word	0x080094c5
 800949c:	2300      	movs	r3, #0
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e180      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80094a4:	2304      	movs	r3, #4
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094aa:	e17c      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80094ac:	2308      	movs	r3, #8
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b2:	e178      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80094b4:	2310      	movs	r3, #16
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ba:	e174      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80094bc:	2320      	movs	r3, #32
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c2:	e170      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80094c4:	2340      	movs	r3, #64	@ 0x40
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ca:	e16c      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80094cc:	2380      	movs	r3, #128	@ 0x80
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d2:	e168      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009548 <UART_SetConfig+0x348>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d142      	bne.n	8009564 <UART_SetConfig+0x364>
 80094de:	4b16      	ldr	r3, [pc, #88]	@ (8009538 <UART_SetConfig+0x338>)
 80094e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	d838      	bhi.n	800955c <UART_SetConfig+0x35c>
 80094ea:	a201      	add	r2, pc, #4	@ (adr r2, 80094f0 <UART_SetConfig+0x2f0>)
 80094ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f0:	08009509 	.word	0x08009509
 80094f4:	08009511 	.word	0x08009511
 80094f8:	08009519 	.word	0x08009519
 80094fc:	08009521 	.word	0x08009521
 8009500:	0800954d 	.word	0x0800954d
 8009504:	08009555 	.word	0x08009555
 8009508:	2300      	movs	r3, #0
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950e:	e14a      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009510:	2304      	movs	r3, #4
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009516:	e146      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009518:	2308      	movs	r3, #8
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951e:	e142      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009520:	2310      	movs	r3, #16
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009526:	e13e      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009528:	cfff69f3 	.word	0xcfff69f3
 800952c:	58000c00 	.word	0x58000c00
 8009530:	11fff4ff 	.word	0x11fff4ff
 8009534:	40011000 	.word	0x40011000
 8009538:	58024400 	.word	0x58024400
 800953c:	40004400 	.word	0x40004400
 8009540:	40004800 	.word	0x40004800
 8009544:	40004c00 	.word	0x40004c00
 8009548:	40005000 	.word	0x40005000
 800954c:	2320      	movs	r3, #32
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e128      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009554:	2340      	movs	r3, #64	@ 0x40
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e124      	b.n	80097a6 <UART_SetConfig+0x5a6>
 800955c:	2380      	movs	r3, #128	@ 0x80
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e120      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4acb      	ldr	r2, [pc, #812]	@ (8009898 <UART_SetConfig+0x698>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d176      	bne.n	800965c <UART_SetConfig+0x45c>
 800956e:	4bcb      	ldr	r3, [pc, #812]	@ (800989c <UART_SetConfig+0x69c>)
 8009570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009572:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009576:	2b28      	cmp	r3, #40	@ 0x28
 8009578:	d86c      	bhi.n	8009654 <UART_SetConfig+0x454>
 800957a:	a201      	add	r2, pc, #4	@ (adr r2, 8009580 <UART_SetConfig+0x380>)
 800957c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009580:	08009625 	.word	0x08009625
 8009584:	08009655 	.word	0x08009655
 8009588:	08009655 	.word	0x08009655
 800958c:	08009655 	.word	0x08009655
 8009590:	08009655 	.word	0x08009655
 8009594:	08009655 	.word	0x08009655
 8009598:	08009655 	.word	0x08009655
 800959c:	08009655 	.word	0x08009655
 80095a0:	0800962d 	.word	0x0800962d
 80095a4:	08009655 	.word	0x08009655
 80095a8:	08009655 	.word	0x08009655
 80095ac:	08009655 	.word	0x08009655
 80095b0:	08009655 	.word	0x08009655
 80095b4:	08009655 	.word	0x08009655
 80095b8:	08009655 	.word	0x08009655
 80095bc:	08009655 	.word	0x08009655
 80095c0:	08009635 	.word	0x08009635
 80095c4:	08009655 	.word	0x08009655
 80095c8:	08009655 	.word	0x08009655
 80095cc:	08009655 	.word	0x08009655
 80095d0:	08009655 	.word	0x08009655
 80095d4:	08009655 	.word	0x08009655
 80095d8:	08009655 	.word	0x08009655
 80095dc:	08009655 	.word	0x08009655
 80095e0:	0800963d 	.word	0x0800963d
 80095e4:	08009655 	.word	0x08009655
 80095e8:	08009655 	.word	0x08009655
 80095ec:	08009655 	.word	0x08009655
 80095f0:	08009655 	.word	0x08009655
 80095f4:	08009655 	.word	0x08009655
 80095f8:	08009655 	.word	0x08009655
 80095fc:	08009655 	.word	0x08009655
 8009600:	08009645 	.word	0x08009645
 8009604:	08009655 	.word	0x08009655
 8009608:	08009655 	.word	0x08009655
 800960c:	08009655 	.word	0x08009655
 8009610:	08009655 	.word	0x08009655
 8009614:	08009655 	.word	0x08009655
 8009618:	08009655 	.word	0x08009655
 800961c:	08009655 	.word	0x08009655
 8009620:	0800964d 	.word	0x0800964d
 8009624:	2301      	movs	r3, #1
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e0bc      	b.n	80097a6 <UART_SetConfig+0x5a6>
 800962c:	2304      	movs	r3, #4
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e0b8      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009634:	2308      	movs	r3, #8
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963a:	e0b4      	b.n	80097a6 <UART_SetConfig+0x5a6>
 800963c:	2310      	movs	r3, #16
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e0b0      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009644:	2320      	movs	r3, #32
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e0ac      	b.n	80097a6 <UART_SetConfig+0x5a6>
 800964c:	2340      	movs	r3, #64	@ 0x40
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e0a8      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009654:	2380      	movs	r3, #128	@ 0x80
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e0a4      	b.n	80097a6 <UART_SetConfig+0x5a6>
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a8f      	ldr	r2, [pc, #572]	@ (80098a0 <UART_SetConfig+0x6a0>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d130      	bne.n	80096c8 <UART_SetConfig+0x4c8>
 8009666:	4b8d      	ldr	r3, [pc, #564]	@ (800989c <UART_SetConfig+0x69c>)
 8009668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	2b05      	cmp	r3, #5
 8009670:	d826      	bhi.n	80096c0 <UART_SetConfig+0x4c0>
 8009672:	a201      	add	r2, pc, #4	@ (adr r2, 8009678 <UART_SetConfig+0x478>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	08009691 	.word	0x08009691
 800967c:	08009699 	.word	0x08009699
 8009680:	080096a1 	.word	0x080096a1
 8009684:	080096a9 	.word	0x080096a9
 8009688:	080096b1 	.word	0x080096b1
 800968c:	080096b9 	.word	0x080096b9
 8009690:	2300      	movs	r3, #0
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009696:	e086      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009698:	2304      	movs	r3, #4
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969e:	e082      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80096a0:	2308      	movs	r3, #8
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a6:	e07e      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80096a8:	2310      	movs	r3, #16
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ae:	e07a      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80096b0:	2320      	movs	r3, #32
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e076      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80096b8:	2340      	movs	r3, #64	@ 0x40
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096be:	e072      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80096c0:	2380      	movs	r3, #128	@ 0x80
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c6:	e06e      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a75      	ldr	r2, [pc, #468]	@ (80098a4 <UART_SetConfig+0x6a4>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d130      	bne.n	8009734 <UART_SetConfig+0x534>
 80096d2:	4b72      	ldr	r3, [pc, #456]	@ (800989c <UART_SetConfig+0x69c>)
 80096d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	2b05      	cmp	r3, #5
 80096dc:	d826      	bhi.n	800972c <UART_SetConfig+0x52c>
 80096de:	a201      	add	r2, pc, #4	@ (adr r2, 80096e4 <UART_SetConfig+0x4e4>)
 80096e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e4:	080096fd 	.word	0x080096fd
 80096e8:	08009705 	.word	0x08009705
 80096ec:	0800970d 	.word	0x0800970d
 80096f0:	08009715 	.word	0x08009715
 80096f4:	0800971d 	.word	0x0800971d
 80096f8:	08009725 	.word	0x08009725
 80096fc:	2300      	movs	r3, #0
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009702:	e050      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009704:	2304      	movs	r3, #4
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970a:	e04c      	b.n	80097a6 <UART_SetConfig+0x5a6>
 800970c:	2308      	movs	r3, #8
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009712:	e048      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009714:	2310      	movs	r3, #16
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971a:	e044      	b.n	80097a6 <UART_SetConfig+0x5a6>
 800971c:	2320      	movs	r3, #32
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e040      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009724:	2340      	movs	r3, #64	@ 0x40
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972a:	e03c      	b.n	80097a6 <UART_SetConfig+0x5a6>
 800972c:	2380      	movs	r3, #128	@ 0x80
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009732:	e038      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a5b      	ldr	r2, [pc, #364]	@ (80098a8 <UART_SetConfig+0x6a8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d130      	bne.n	80097a0 <UART_SetConfig+0x5a0>
 800973e:	4b57      	ldr	r3, [pc, #348]	@ (800989c <UART_SetConfig+0x69c>)
 8009740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	2b05      	cmp	r3, #5
 8009748:	d826      	bhi.n	8009798 <UART_SetConfig+0x598>
 800974a:	a201      	add	r2, pc, #4	@ (adr r2, 8009750 <UART_SetConfig+0x550>)
 800974c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009750:	08009769 	.word	0x08009769
 8009754:	08009771 	.word	0x08009771
 8009758:	08009779 	.word	0x08009779
 800975c:	08009781 	.word	0x08009781
 8009760:	08009789 	.word	0x08009789
 8009764:	08009791 	.word	0x08009791
 8009768:	2302      	movs	r3, #2
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e01a      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009770:	2304      	movs	r3, #4
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e016      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009778:	2308      	movs	r3, #8
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977e:	e012      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009780:	2310      	movs	r3, #16
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009786:	e00e      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009788:	2320      	movs	r3, #32
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978e:	e00a      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009790:	2340      	movs	r3, #64	@ 0x40
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009796:	e006      	b.n	80097a6 <UART_SetConfig+0x5a6>
 8009798:	2380      	movs	r3, #128	@ 0x80
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979e:	e002      	b.n	80097a6 <UART_SetConfig+0x5a6>
 80097a0:	2380      	movs	r3, #128	@ 0x80
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a3f      	ldr	r2, [pc, #252]	@ (80098a8 <UART_SetConfig+0x6a8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	f040 80f8 	bne.w	80099a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80097b6:	2b20      	cmp	r3, #32
 80097b8:	dc46      	bgt.n	8009848 <UART_SetConfig+0x648>
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	f2c0 8082 	blt.w	80098c4 <UART_SetConfig+0x6c4>
 80097c0:	3b02      	subs	r3, #2
 80097c2:	2b1e      	cmp	r3, #30
 80097c4:	d87e      	bhi.n	80098c4 <UART_SetConfig+0x6c4>
 80097c6:	a201      	add	r2, pc, #4	@ (adr r2, 80097cc <UART_SetConfig+0x5cc>)
 80097c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097cc:	0800984f 	.word	0x0800984f
 80097d0:	080098c5 	.word	0x080098c5
 80097d4:	08009857 	.word	0x08009857
 80097d8:	080098c5 	.word	0x080098c5
 80097dc:	080098c5 	.word	0x080098c5
 80097e0:	080098c5 	.word	0x080098c5
 80097e4:	08009867 	.word	0x08009867
 80097e8:	080098c5 	.word	0x080098c5
 80097ec:	080098c5 	.word	0x080098c5
 80097f0:	080098c5 	.word	0x080098c5
 80097f4:	080098c5 	.word	0x080098c5
 80097f8:	080098c5 	.word	0x080098c5
 80097fc:	080098c5 	.word	0x080098c5
 8009800:	080098c5 	.word	0x080098c5
 8009804:	08009877 	.word	0x08009877
 8009808:	080098c5 	.word	0x080098c5
 800980c:	080098c5 	.word	0x080098c5
 8009810:	080098c5 	.word	0x080098c5
 8009814:	080098c5 	.word	0x080098c5
 8009818:	080098c5 	.word	0x080098c5
 800981c:	080098c5 	.word	0x080098c5
 8009820:	080098c5 	.word	0x080098c5
 8009824:	080098c5 	.word	0x080098c5
 8009828:	080098c5 	.word	0x080098c5
 800982c:	080098c5 	.word	0x080098c5
 8009830:	080098c5 	.word	0x080098c5
 8009834:	080098c5 	.word	0x080098c5
 8009838:	080098c5 	.word	0x080098c5
 800983c:	080098c5 	.word	0x080098c5
 8009840:	080098c5 	.word	0x080098c5
 8009844:	080098b7 	.word	0x080098b7
 8009848:	2b40      	cmp	r3, #64	@ 0x40
 800984a:	d037      	beq.n	80098bc <UART_SetConfig+0x6bc>
 800984c:	e03a      	b.n	80098c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800984e:	f7fe f859 	bl	8007904 <HAL_RCCEx_GetD3PCLK1Freq>
 8009852:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009854:	e03c      	b.n	80098d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe f868 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009864:	e034      	b.n	80098d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009866:	f107 0318 	add.w	r3, r7, #24
 800986a:	4618      	mov	r0, r3
 800986c:	f7fe f9b4 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009874:	e02c      	b.n	80098d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009876:	4b09      	ldr	r3, [pc, #36]	@ (800989c <UART_SetConfig+0x69c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0320 	and.w	r3, r3, #32
 800987e:	2b00      	cmp	r3, #0
 8009880:	d016      	beq.n	80098b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009882:	4b06      	ldr	r3, [pc, #24]	@ (800989c <UART_SetConfig+0x69c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	08db      	lsrs	r3, r3, #3
 8009888:	f003 0303 	and.w	r3, r3, #3
 800988c:	4a07      	ldr	r2, [pc, #28]	@ (80098ac <UART_SetConfig+0x6ac>)
 800988e:	fa22 f303 	lsr.w	r3, r2, r3
 8009892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009894:	e01c      	b.n	80098d0 <UART_SetConfig+0x6d0>
 8009896:	bf00      	nop
 8009898:	40011400 	.word	0x40011400
 800989c:	58024400 	.word	0x58024400
 80098a0:	40007800 	.word	0x40007800
 80098a4:	40007c00 	.word	0x40007c00
 80098a8:	58000c00 	.word	0x58000c00
 80098ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80098b0:	4b9d      	ldr	r3, [pc, #628]	@ (8009b28 <UART_SetConfig+0x928>)
 80098b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098b4:	e00c      	b.n	80098d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098b6:	4b9d      	ldr	r3, [pc, #628]	@ (8009b2c <UART_SetConfig+0x92c>)
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ba:	e009      	b.n	80098d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c2:	e005      	b.n	80098d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80098ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80098d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 81de 	beq.w	8009c94 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098dc:	4a94      	ldr	r2, [pc, #592]	@ (8009b30 <UART_SetConfig+0x930>)
 80098de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098e2:	461a      	mov	r2, r3
 80098e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80098ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	4613      	mov	r3, r2
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	4413      	add	r3, r2
 80098f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d305      	bcc.n	8009908 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009904:	429a      	cmp	r2, r3
 8009906:	d903      	bls.n	8009910 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800990e:	e1c1      	b.n	8009c94 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009912:	2200      	movs	r2, #0
 8009914:	60bb      	str	r3, [r7, #8]
 8009916:	60fa      	str	r2, [r7, #12]
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991c:	4a84      	ldr	r2, [pc, #528]	@ (8009b30 <UART_SetConfig+0x930>)
 800991e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009922:	b29b      	uxth	r3, r3
 8009924:	2200      	movs	r2, #0
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	607a      	str	r2, [r7, #4]
 800992a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800992e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009932:	f7f6 fd2d 	bl	8000390 <__aeabi_uldivmod>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4610      	mov	r0, r2
 800993c:	4619      	mov	r1, r3
 800993e:	f04f 0200 	mov.w	r2, #0
 8009942:	f04f 0300 	mov.w	r3, #0
 8009946:	020b      	lsls	r3, r1, #8
 8009948:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800994c:	0202      	lsls	r2, r0, #8
 800994e:	6979      	ldr	r1, [r7, #20]
 8009950:	6849      	ldr	r1, [r1, #4]
 8009952:	0849      	lsrs	r1, r1, #1
 8009954:	2000      	movs	r0, #0
 8009956:	460c      	mov	r4, r1
 8009958:	4605      	mov	r5, r0
 800995a:	eb12 0804 	adds.w	r8, r2, r4
 800995e:	eb43 0905 	adc.w	r9, r3, r5
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	469a      	mov	sl, r3
 800996a:	4693      	mov	fp, r2
 800996c:	4652      	mov	r2, sl
 800996e:	465b      	mov	r3, fp
 8009970:	4640      	mov	r0, r8
 8009972:	4649      	mov	r1, r9
 8009974:	f7f6 fd0c 	bl	8000390 <__aeabi_uldivmod>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4613      	mov	r3, r2
 800997e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009986:	d308      	bcc.n	800999a <UART_SetConfig+0x79a>
 8009988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800998e:	d204      	bcs.n	800999a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009996:	60da      	str	r2, [r3, #12]
 8009998:	e17c      	b.n	8009c94 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099a0:	e178      	b.n	8009c94 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099aa:	f040 80c5 	bne.w	8009b38 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80099ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099b2:	2b20      	cmp	r3, #32
 80099b4:	dc48      	bgt.n	8009a48 <UART_SetConfig+0x848>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	db7b      	blt.n	8009ab2 <UART_SetConfig+0x8b2>
 80099ba:	2b20      	cmp	r3, #32
 80099bc:	d879      	bhi.n	8009ab2 <UART_SetConfig+0x8b2>
 80099be:	a201      	add	r2, pc, #4	@ (adr r2, 80099c4 <UART_SetConfig+0x7c4>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	08009a4f 	.word	0x08009a4f
 80099c8:	08009a57 	.word	0x08009a57
 80099cc:	08009ab3 	.word	0x08009ab3
 80099d0:	08009ab3 	.word	0x08009ab3
 80099d4:	08009a5f 	.word	0x08009a5f
 80099d8:	08009ab3 	.word	0x08009ab3
 80099dc:	08009ab3 	.word	0x08009ab3
 80099e0:	08009ab3 	.word	0x08009ab3
 80099e4:	08009a6f 	.word	0x08009a6f
 80099e8:	08009ab3 	.word	0x08009ab3
 80099ec:	08009ab3 	.word	0x08009ab3
 80099f0:	08009ab3 	.word	0x08009ab3
 80099f4:	08009ab3 	.word	0x08009ab3
 80099f8:	08009ab3 	.word	0x08009ab3
 80099fc:	08009ab3 	.word	0x08009ab3
 8009a00:	08009ab3 	.word	0x08009ab3
 8009a04:	08009a7f 	.word	0x08009a7f
 8009a08:	08009ab3 	.word	0x08009ab3
 8009a0c:	08009ab3 	.word	0x08009ab3
 8009a10:	08009ab3 	.word	0x08009ab3
 8009a14:	08009ab3 	.word	0x08009ab3
 8009a18:	08009ab3 	.word	0x08009ab3
 8009a1c:	08009ab3 	.word	0x08009ab3
 8009a20:	08009ab3 	.word	0x08009ab3
 8009a24:	08009ab3 	.word	0x08009ab3
 8009a28:	08009ab3 	.word	0x08009ab3
 8009a2c:	08009ab3 	.word	0x08009ab3
 8009a30:	08009ab3 	.word	0x08009ab3
 8009a34:	08009ab3 	.word	0x08009ab3
 8009a38:	08009ab3 	.word	0x08009ab3
 8009a3c:	08009ab3 	.word	0x08009ab3
 8009a40:	08009ab3 	.word	0x08009ab3
 8009a44:	08009aa5 	.word	0x08009aa5
 8009a48:	2b40      	cmp	r3, #64	@ 0x40
 8009a4a:	d02e      	beq.n	8009aaa <UART_SetConfig+0x8aa>
 8009a4c:	e031      	b.n	8009ab2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a4e:	f7fb ff63 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8009a52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a54:	e033      	b.n	8009abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a56:	f7fb ff75 	bl	8005944 <HAL_RCC_GetPCLK2Freq>
 8009a5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a5c:	e02f      	b.n	8009abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fd ff64 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a6c:	e027      	b.n	8009abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a6e:	f107 0318 	add.w	r3, r7, #24
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe f8b0 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a7c:	e01f      	b.n	8009abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8009b34 <UART_SetConfig+0x934>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 0320 	and.w	r3, r3, #32
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d009      	beq.n	8009a9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8009b34 <UART_SetConfig+0x934>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	08db      	lsrs	r3, r3, #3
 8009a90:	f003 0303 	and.w	r3, r3, #3
 8009a94:	4a24      	ldr	r2, [pc, #144]	@ (8009b28 <UART_SetConfig+0x928>)
 8009a96:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a9c:	e00f      	b.n	8009abe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009a9e:	4b22      	ldr	r3, [pc, #136]	@ (8009b28 <UART_SetConfig+0x928>)
 8009aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa2:	e00c      	b.n	8009abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009aa4:	4b21      	ldr	r3, [pc, #132]	@ (8009b2c <UART_SetConfig+0x92c>)
 8009aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa8:	e009      	b.n	8009abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab0:	e005      	b.n	8009abe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009abc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 80e7 	beq.w	8009c94 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aca:	4a19      	ldr	r2, [pc, #100]	@ (8009b30 <UART_SetConfig+0x930>)
 8009acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ad8:	005a      	lsls	r2, r3, #1
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	085b      	lsrs	r3, r3, #1
 8009ae0:	441a      	add	r2, r3
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aee:	2b0f      	cmp	r3, #15
 8009af0:	d916      	bls.n	8009b20 <UART_SetConfig+0x920>
 8009af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009af8:	d212      	bcs.n	8009b20 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	f023 030f 	bic.w	r3, r3, #15
 8009b02:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	085b      	lsrs	r3, r3, #1
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009b12:	4313      	orrs	r3, r2
 8009b14:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009b1c:	60da      	str	r2, [r3, #12]
 8009b1e:	e0b9      	b.n	8009c94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b26:	e0b5      	b.n	8009c94 <UART_SetConfig+0xa94>
 8009b28:	03d09000 	.word	0x03d09000
 8009b2c:	003d0900 	.word	0x003d0900
 8009b30:	0800cf24 	.word	0x0800cf24
 8009b34:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b38:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	dc49      	bgt.n	8009bd4 <UART_SetConfig+0x9d4>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	db7c      	blt.n	8009c3e <UART_SetConfig+0xa3e>
 8009b44:	2b20      	cmp	r3, #32
 8009b46:	d87a      	bhi.n	8009c3e <UART_SetConfig+0xa3e>
 8009b48:	a201      	add	r2, pc, #4	@ (adr r2, 8009b50 <UART_SetConfig+0x950>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009bdb 	.word	0x08009bdb
 8009b54:	08009be3 	.word	0x08009be3
 8009b58:	08009c3f 	.word	0x08009c3f
 8009b5c:	08009c3f 	.word	0x08009c3f
 8009b60:	08009beb 	.word	0x08009beb
 8009b64:	08009c3f 	.word	0x08009c3f
 8009b68:	08009c3f 	.word	0x08009c3f
 8009b6c:	08009c3f 	.word	0x08009c3f
 8009b70:	08009bfb 	.word	0x08009bfb
 8009b74:	08009c3f 	.word	0x08009c3f
 8009b78:	08009c3f 	.word	0x08009c3f
 8009b7c:	08009c3f 	.word	0x08009c3f
 8009b80:	08009c3f 	.word	0x08009c3f
 8009b84:	08009c3f 	.word	0x08009c3f
 8009b88:	08009c3f 	.word	0x08009c3f
 8009b8c:	08009c3f 	.word	0x08009c3f
 8009b90:	08009c0b 	.word	0x08009c0b
 8009b94:	08009c3f 	.word	0x08009c3f
 8009b98:	08009c3f 	.word	0x08009c3f
 8009b9c:	08009c3f 	.word	0x08009c3f
 8009ba0:	08009c3f 	.word	0x08009c3f
 8009ba4:	08009c3f 	.word	0x08009c3f
 8009ba8:	08009c3f 	.word	0x08009c3f
 8009bac:	08009c3f 	.word	0x08009c3f
 8009bb0:	08009c3f 	.word	0x08009c3f
 8009bb4:	08009c3f 	.word	0x08009c3f
 8009bb8:	08009c3f 	.word	0x08009c3f
 8009bbc:	08009c3f 	.word	0x08009c3f
 8009bc0:	08009c3f 	.word	0x08009c3f
 8009bc4:	08009c3f 	.word	0x08009c3f
 8009bc8:	08009c3f 	.word	0x08009c3f
 8009bcc:	08009c3f 	.word	0x08009c3f
 8009bd0:	08009c31 	.word	0x08009c31
 8009bd4:	2b40      	cmp	r3, #64	@ 0x40
 8009bd6:	d02e      	beq.n	8009c36 <UART_SetConfig+0xa36>
 8009bd8:	e031      	b.n	8009c3e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bda:	f7fb fe9d 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8009bde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009be0:	e033      	b.n	8009c4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009be2:	f7fb feaf 	bl	8005944 <HAL_RCC_GetPCLK2Freq>
 8009be6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009be8:	e02f      	b.n	8009c4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fd fe9e 	bl	8007930 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf8:	e027      	b.n	8009c4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bfa:	f107 0318 	add.w	r3, r7, #24
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fd ffea 	bl	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c08:	e01f      	b.n	8009c4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8009cc0 <UART_SetConfig+0xac0>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 0320 	and.w	r3, r3, #32
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d009      	beq.n	8009c2a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c16:	4b2a      	ldr	r3, [pc, #168]	@ (8009cc0 <UART_SetConfig+0xac0>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	08db      	lsrs	r3, r3, #3
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	4a28      	ldr	r2, [pc, #160]	@ (8009cc4 <UART_SetConfig+0xac4>)
 8009c22:	fa22 f303 	lsr.w	r3, r2, r3
 8009c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c28:	e00f      	b.n	8009c4a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009c2a:	4b26      	ldr	r3, [pc, #152]	@ (8009cc4 <UART_SetConfig+0xac4>)
 8009c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c2e:	e00c      	b.n	8009c4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c30:	4b25      	ldr	r3, [pc, #148]	@ (8009cc8 <UART_SetConfig+0xac8>)
 8009c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c34:	e009      	b.n	8009c4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c3c:	e005      	b.n	8009c4a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c48:	bf00      	nop
    }

    if (pclk != 0U)
 8009c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d021      	beq.n	8009c94 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c54:	4a1d      	ldr	r2, [pc, #116]	@ (8009ccc <UART_SetConfig+0xacc>)
 8009c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	085b      	lsrs	r3, r3, #1
 8009c68:	441a      	add	r2, r3
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c76:	2b0f      	cmp	r3, #15
 8009c78:	d909      	bls.n	8009c8e <UART_SetConfig+0xa8e>
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c80:	d205      	bcs.n	8009c8e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60da      	str	r2, [r3, #12]
 8009c8c:	e002      	b.n	8009c94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2200      	movs	r2, #0
 8009cae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009cb0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3748      	adds	r7, #72	@ 0x48
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cbe:	bf00      	nop
 8009cc0:	58024400 	.word	0x58024400
 8009cc4:	03d09000 	.word	0x03d09000
 8009cc8:	003d0900 	.word	0x003d0900
 8009ccc:	0800cf24 	.word	0x0800cf24

08009cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cdc:	f003 0308 	and.w	r3, r3, #8
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00a      	beq.n	8009cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	430a      	orrs	r2, r1
 8009cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00a      	beq.n	8009d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d20:	f003 0302 	and.w	r3, r3, #2
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00a      	beq.n	8009d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d42:	f003 0304 	and.w	r3, r3, #4
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	430a      	orrs	r2, r1
 8009d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d64:	f003 0310 	and.w	r3, r3, #16
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00a      	beq.n	8009d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d86:	f003 0320 	and.w	r3, r3, #32
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01a      	beq.n	8009de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dce:	d10a      	bne.n	8009de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00a      	beq.n	8009e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	605a      	str	r2, [r3, #4]
  }
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b098      	sub	sp, #96	@ 0x60
 8009e18:	af02      	add	r7, sp, #8
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e24:	f7f7 fab4 	bl	8001390 <HAL_GetTick>
 8009e28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0308 	and.w	r3, r3, #8
 8009e34:	2b08      	cmp	r3, #8
 8009e36:	d12f      	bne.n	8009e98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e40:	2200      	movs	r2, #0
 8009e42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f88e 	bl	8009f68 <UART_WaitOnFlagUntilTimeout>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d022      	beq.n	8009e98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5a:	e853 3f00 	ldrex	r3, [r3]
 8009e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e6      	bne.n	8009e52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2220      	movs	r2, #32
 8009e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e063      	b.n	8009f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 0304 	and.w	r3, r3, #4
 8009ea2:	2b04      	cmp	r3, #4
 8009ea4:	d149      	bne.n	8009f3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f857 	bl	8009f68 <UART_WaitOnFlagUntilTimeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d03c      	beq.n	8009f3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e6      	bne.n	8009ec0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f023 0301 	bic.w	r3, r3, #1
 8009f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3308      	adds	r3, #8
 8009f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f12:	61fa      	str	r2, [r7, #28]
 8009f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	69b9      	ldr	r1, [r7, #24]
 8009f18:	69fa      	ldr	r2, [r7, #28]
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	617b      	str	r3, [r7, #20]
   return(result);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e5      	bne.n	8009ef2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e012      	b.n	8009f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2220      	movs	r2, #32
 8009f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3758      	adds	r7, #88	@ 0x58
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	4613      	mov	r3, r2
 8009f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f78:	e04f      	b.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f80:	d04b      	beq.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f82:	f7f7 fa05 	bl	8001390 <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	69ba      	ldr	r2, [r7, #24]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d302      	bcc.n	8009f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e04e      	b.n	800a03a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0304 	and.w	r3, r3, #4
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d037      	beq.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b80      	cmp	r3, #128	@ 0x80
 8009fae:	d034      	beq.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2b40      	cmp	r3, #64	@ 0x40
 8009fb4:	d031      	beq.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	69db      	ldr	r3, [r3, #28]
 8009fbc:	f003 0308 	and.w	r3, r3, #8
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d110      	bne.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2208      	movs	r2, #8
 8009fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 f839 	bl	800a044 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2208      	movs	r2, #8
 8009fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e029      	b.n	800a03a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ff4:	d111      	bne.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 f81f 	bl	800a044 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2220      	movs	r2, #32
 800a00a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e00f      	b.n	800a03a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	69da      	ldr	r2, [r3, #28]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	4013      	ands	r3, r2
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	429a      	cmp	r2, r3
 800a028:	bf0c      	ite	eq
 800a02a:	2301      	moveq	r3, #1
 800a02c:	2300      	movne	r3, #0
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	461a      	mov	r2, r3
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	429a      	cmp	r2, r3
 800a036:	d0a0      	beq.n	8009f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a044:	b480      	push	{r7}
 800a046:	b095      	sub	sp, #84	@ 0x54
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a054:	e853 3f00 	ldrex	r3, [r3]
 800a058:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a06a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a06c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a070:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e6      	bne.n	800a04c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3308      	adds	r3, #8
 800a084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	e853 3f00 	ldrex	r3, [r3]
 800a08c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	4b1e      	ldr	r3, [pc, #120]	@ (800a10c <UART_EndRxTransfer+0xc8>)
 800a092:	4013      	ands	r3, r2
 800a094:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3308      	adds	r3, #8
 800a09c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a09e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0a6:	e841 2300 	strex	r3, r2, [r1]
 800a0aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1e5      	bne.n	800a07e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d118      	bne.n	800a0ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f023 0310 	bic.w	r3, r3, #16
 800a0ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0d8:	61bb      	str	r3, [r7, #24]
 800a0da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0dc:	6979      	ldr	r1, [r7, #20]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	e841 2300 	strex	r3, r2, [r1]
 800a0e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e6      	bne.n	800a0ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a100:	bf00      	nop
 800a102:	3754      	adds	r7, #84	@ 0x54
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	effffffe 	.word	0xeffffffe

0800a110 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d101      	bne.n	800a126 <HAL_UARTEx_DisableFifoMode+0x16>
 800a122:	2302      	movs	r3, #2
 800a124:	e027      	b.n	800a176 <HAL_UARTEx_DisableFifoMode+0x66>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2224      	movs	r2, #36	@ 0x24
 800a132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f022 0201 	bic.w	r2, r2, #1
 800a14c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a154:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2220      	movs	r2, #32
 800a168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b084      	sub	sp, #16
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a192:	2b01      	cmp	r3, #1
 800a194:	d101      	bne.n	800a19a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a196:	2302      	movs	r3, #2
 800a198:	e02d      	b.n	800a1f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2224      	movs	r2, #36	@ 0x24
 800a1a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0201 	bic.w	r2, r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f850 	bl	800a27c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d101      	bne.n	800a216 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a212:	2302      	movs	r3, #2
 800a214:	e02d      	b.n	800a272 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2224      	movs	r2, #36	@ 0x24
 800a222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0201 	bic.w	r2, r2, #1
 800a23c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f812 	bl	800a27c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d108      	bne.n	800a29e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a29c:	e031      	b.n	800a302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a29e:	2310      	movs	r3, #16
 800a2a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2a2:	2310      	movs	r3, #16
 800a2a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	0e5b      	lsrs	r3, r3, #25
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 0307 	and.w	r3, r3, #7
 800a2b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	0f5b      	lsrs	r3, r3, #29
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	f003 0307 	and.w	r3, r3, #7
 800a2c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	7b3a      	ldrb	r2, [r7, #12]
 800a2ca:	4911      	ldr	r1, [pc, #68]	@ (800a310 <UARTEx_SetNbDataToProcess+0x94>)
 800a2cc:	5c8a      	ldrb	r2, [r1, r2]
 800a2ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2d2:	7b3a      	ldrb	r2, [r7, #12]
 800a2d4:	490f      	ldr	r1, [pc, #60]	@ (800a314 <UARTEx_SetNbDataToProcess+0x98>)
 800a2d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	7b7a      	ldrb	r2, [r7, #13]
 800a2e8:	4909      	ldr	r1, [pc, #36]	@ (800a310 <UARTEx_SetNbDataToProcess+0x94>)
 800a2ea:	5c8a      	ldrb	r2, [r1, r2]
 800a2ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2f0:	7b7a      	ldrb	r2, [r7, #13]
 800a2f2:	4908      	ldr	r1, [pc, #32]	@ (800a314 <UARTEx_SetNbDataToProcess+0x98>)
 800a2f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a302:	bf00      	nop
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	0800cf3c 	.word	0x0800cf3c
 800a314:	0800cf44 	.word	0x0800cf44

0800a318 <log10f>:
 800a318:	b508      	push	{r3, lr}
 800a31a:	ed2d 8b02 	vpush	{d8}
 800a31e:	eeb0 8a40 	vmov.f32	s16, s0
 800a322:	f000 f84f 	bl	800a3c4 <__ieee754_log10f>
 800a326:	eeb4 8a48 	vcmp.f32	s16, s16
 800a32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a32e:	d60f      	bvs.n	800a350 <log10f+0x38>
 800a330:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a338:	d80a      	bhi.n	800a350 <log10f+0x38>
 800a33a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a342:	d108      	bne.n	800a356 <log10f+0x3e>
 800a344:	f000 fe9c 	bl	800b080 <__errno>
 800a348:	2322      	movs	r3, #34	@ 0x22
 800a34a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a36c <log10f+0x54>
 800a34e:	6003      	str	r3, [r0, #0]
 800a350:	ecbd 8b02 	vpop	{d8}
 800a354:	bd08      	pop	{r3, pc}
 800a356:	f000 fe93 	bl	800b080 <__errno>
 800a35a:	ecbd 8b02 	vpop	{d8}
 800a35e:	2321      	movs	r3, #33	@ 0x21
 800a360:	6003      	str	r3, [r0, #0]
 800a362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a366:	4802      	ldr	r0, [pc, #8]	@ (800a370 <log10f+0x58>)
 800a368:	f000 b822 	b.w	800a3b0 <nanf>
 800a36c:	ff800000 	.word	0xff800000
 800a370:	0800d0bc 	.word	0x0800d0bc

0800a374 <sqrtf>:
 800a374:	b508      	push	{r3, lr}
 800a376:	ed2d 8b02 	vpush	{d8}
 800a37a:	eeb0 8a40 	vmov.f32	s16, s0
 800a37e:	f000 f81d 	bl	800a3bc <__ieee754_sqrtf>
 800a382:	eeb4 8a48 	vcmp.f32	s16, s16
 800a386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38a:	d60c      	bvs.n	800a3a6 <sqrtf+0x32>
 800a38c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a3ac <sqrtf+0x38>
 800a390:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a398:	d505      	bpl.n	800a3a6 <sqrtf+0x32>
 800a39a:	f000 fe71 	bl	800b080 <__errno>
 800a39e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a3a2:	2321      	movs	r3, #33	@ 0x21
 800a3a4:	6003      	str	r3, [r0, #0]
 800a3a6:	ecbd 8b02 	vpop	{d8}
 800a3aa:	bd08      	pop	{r3, pc}
 800a3ac:	00000000 	.word	0x00000000

0800a3b0 <nanf>:
 800a3b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a3b8 <nanf+0x8>
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	7fc00000 	.word	0x7fc00000

0800a3bc <__ieee754_sqrtf>:
 800a3bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <__ieee754_log10f>:
 800a3c4:	b508      	push	{r3, lr}
 800a3c6:	ee10 3a10 	vmov	r3, s0
 800a3ca:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a3ce:	ed2d 8b02 	vpush	{d8}
 800a3d2:	d108      	bne.n	800a3e6 <__ieee754_log10f+0x22>
 800a3d4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a45c <__ieee754_log10f+0x98>
 800a3d8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800a460 <__ieee754_log10f+0x9c>
 800a3dc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a3e0:	ecbd 8b02 	vpop	{d8}
 800a3e4:	bd08      	pop	{r3, pc}
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	da02      	bge.n	800a3f2 <__ieee754_log10f+0x2e>
 800a3ec:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a3f0:	e7f2      	b.n	800a3d8 <__ieee754_log10f+0x14>
 800a3f2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a3f6:	db02      	blt.n	800a3fe <__ieee754_log10f+0x3a>
 800a3f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a3fc:	e7f0      	b.n	800a3e0 <__ieee754_log10f+0x1c>
 800a3fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a402:	bfbf      	itttt	lt
 800a404:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800a464 <__ieee754_log10f+0xa0>
 800a408:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a40c:	f06f 0118 	mvnlt.w	r1, #24
 800a410:	ee17 2a90 	vmovlt	r2, s15
 800a414:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a418:	bfa8      	it	ge
 800a41a:	2100      	movge	r1, #0
 800a41c:	3b7f      	subs	r3, #127	@ 0x7f
 800a41e:	440b      	add	r3, r1
 800a420:	0fd9      	lsrs	r1, r3, #31
 800a422:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a42e:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800a432:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a436:	ee00 3a10 	vmov	s0, r3
 800a43a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a43e:	f000 f819 	bl	800a474 <logf>
 800a442:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800a468 <__ieee754_log10f+0xa4>
 800a446:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a44a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a46c <__ieee754_log10f+0xa8>
 800a44e:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a452:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800a470 <__ieee754_log10f+0xac>
 800a456:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a45a:	e7c1      	b.n	800a3e0 <__ieee754_log10f+0x1c>
 800a45c:	cc000000 	.word	0xcc000000
 800a460:	00000000 	.word	0x00000000
 800a464:	4c000000 	.word	0x4c000000
 800a468:	3ede5bd9 	.word	0x3ede5bd9
 800a46c:	355427db 	.word	0x355427db
 800a470:	3e9a2080 	.word	0x3e9a2080

0800a474 <logf>:
 800a474:	ee10 3a10 	vmov	r3, s0
 800a478:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a47c:	b410      	push	{r4}
 800a47e:	d055      	beq.n	800a52c <logf+0xb8>
 800a480:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 800a484:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800a488:	d31a      	bcc.n	800a4c0 <logf+0x4c>
 800a48a:	005a      	lsls	r2, r3, #1
 800a48c:	d104      	bne.n	800a498 <logf+0x24>
 800a48e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a492:	2001      	movs	r0, #1
 800a494:	f000 b862 	b.w	800a55c <__math_divzerof>
 800a498:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a49c:	d043      	beq.n	800a526 <logf+0xb2>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	db02      	blt.n	800a4a8 <logf+0x34>
 800a4a2:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 800a4a6:	d303      	bcc.n	800a4b0 <logf+0x3c>
 800a4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4ac:	f000 b868 	b.w	800a580 <__math_invalidf>
 800a4b0:	eddf 7a20 	vldr	s15, [pc, #128]	@ 800a534 <logf+0xc0>
 800a4b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a4b8:	ee10 3a10 	vmov	r3, s0
 800a4bc:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 800a4c0:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 800a4c4:	491c      	ldr	r1, [pc, #112]	@ (800a538 <logf+0xc4>)
 800a4c6:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 800a4ca:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 800a4ce:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800a4d2:	0dd4      	lsrs	r4, r2, #23
 800a4d4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800a4d8:	05e4      	lsls	r4, r4, #23
 800a4da:	ed90 5b00 	vldr	d5, [r0]
 800a4de:	1b1b      	subs	r3, r3, r4
 800a4e0:	ee07 3a90 	vmov	s15, r3
 800a4e4:	ed90 6b02 	vldr	d6, [r0, #8]
 800a4e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a4ec:	15d2      	asrs	r2, r2, #23
 800a4ee:	eea5 0b07 	vfma.f64	d0, d5, d7
 800a4f2:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 800a4f6:	ee20 4b00 	vmul.f64	d4, d0, d0
 800a4fa:	ee07 2a90 	vmov	s15, r2
 800a4fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a502:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a506:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 800a50a:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 800a50e:	eea5 7b00 	vfma.f64	d7, d5, d0
 800a512:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 800a516:	ee30 0b06 	vadd.f64	d0, d0, d6
 800a51a:	eea5 7b04 	vfma.f64	d7, d5, d4
 800a51e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800a522:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800a53c <logf+0xc8>
 800a530:	e7f9      	b.n	800a526 <logf+0xb2>
 800a532:	bf00      	nop
 800a534:	4b000000 	.word	0x4b000000
 800a538:	0800d0c0 	.word	0x0800d0c0
 800a53c:	00000000 	.word	0x00000000

0800a540 <with_errnof>:
 800a540:	b510      	push	{r4, lr}
 800a542:	ed2d 8b02 	vpush	{d8}
 800a546:	eeb0 8a40 	vmov.f32	s16, s0
 800a54a:	4604      	mov	r4, r0
 800a54c:	f000 fd98 	bl	800b080 <__errno>
 800a550:	eeb0 0a48 	vmov.f32	s0, s16
 800a554:	ecbd 8b02 	vpop	{d8}
 800a558:	6004      	str	r4, [r0, #0]
 800a55a:	bd10      	pop	{r4, pc}

0800a55c <__math_divzerof>:
 800a55c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800a57c <__math_divzerof+0x20>
 800a560:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a564:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a568:	2800      	cmp	r0, #0
 800a56a:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800a56e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800a572:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a576:	f7ff bfe3 	b.w	800a540 <with_errnof>
 800a57a:	bf00      	nop
 800a57c:	00000000 	.word	0x00000000

0800a580 <__math_invalidf>:
 800a580:	eef0 7a40 	vmov.f32	s15, s0
 800a584:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a588:	eef4 7a67 	vcmp.f32	s15, s15
 800a58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a590:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a594:	d602      	bvs.n	800a59c <__math_invalidf+0x1c>
 800a596:	2021      	movs	r0, #33	@ 0x21
 800a598:	f7ff bfd2 	b.w	800a540 <with_errnof>
 800a59c:	4770      	bx	lr

0800a59e <__cvt>:
 800a59e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5a0:	ed2d 8b02 	vpush	{d8}
 800a5a4:	eeb0 8b40 	vmov.f64	d8, d0
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	4617      	mov	r7, r2
 800a5ac:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a5ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5b0:	ee18 2a90 	vmov	r2, s17
 800a5b4:	f025 0520 	bic.w	r5, r5, #32
 800a5b8:	2a00      	cmp	r2, #0
 800a5ba:	bfb6      	itet	lt
 800a5bc:	222d      	movlt	r2, #45	@ 0x2d
 800a5be:	2200      	movge	r2, #0
 800a5c0:	eeb1 8b40 	vneglt.f64	d8, d0
 800a5c4:	2d46      	cmp	r5, #70	@ 0x46
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	d004      	beq.n	800a5d6 <__cvt+0x38>
 800a5cc:	2d45      	cmp	r5, #69	@ 0x45
 800a5ce:	d100      	bne.n	800a5d2 <__cvt+0x34>
 800a5d0:	3401      	adds	r4, #1
 800a5d2:	2102      	movs	r1, #2
 800a5d4:	e000      	b.n	800a5d8 <__cvt+0x3a>
 800a5d6:	2103      	movs	r1, #3
 800a5d8:	ab03      	add	r3, sp, #12
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	ab02      	add	r3, sp, #8
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	4633      	mov	r3, r6
 800a5e4:	eeb0 0b48 	vmov.f64	d0, d8
 800a5e8:	f000 fe06 	bl	800b1f8 <_dtoa_r>
 800a5ec:	2d47      	cmp	r5, #71	@ 0x47
 800a5ee:	d114      	bne.n	800a61a <__cvt+0x7c>
 800a5f0:	07fb      	lsls	r3, r7, #31
 800a5f2:	d50a      	bpl.n	800a60a <__cvt+0x6c>
 800a5f4:	1902      	adds	r2, r0, r4
 800a5f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fe:	bf08      	it	eq
 800a600:	9203      	streq	r2, [sp, #12]
 800a602:	2130      	movs	r1, #48	@ 0x30
 800a604:	9b03      	ldr	r3, [sp, #12]
 800a606:	4293      	cmp	r3, r2
 800a608:	d319      	bcc.n	800a63e <__cvt+0xa0>
 800a60a:	9b03      	ldr	r3, [sp, #12]
 800a60c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a60e:	1a1b      	subs	r3, r3, r0
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	b005      	add	sp, #20
 800a614:	ecbd 8b02 	vpop	{d8}
 800a618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a61a:	2d46      	cmp	r5, #70	@ 0x46
 800a61c:	eb00 0204 	add.w	r2, r0, r4
 800a620:	d1e9      	bne.n	800a5f6 <__cvt+0x58>
 800a622:	7803      	ldrb	r3, [r0, #0]
 800a624:	2b30      	cmp	r3, #48	@ 0x30
 800a626:	d107      	bne.n	800a638 <__cvt+0x9a>
 800a628:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a630:	bf1c      	itt	ne
 800a632:	f1c4 0401 	rsbne	r4, r4, #1
 800a636:	6034      	strne	r4, [r6, #0]
 800a638:	6833      	ldr	r3, [r6, #0]
 800a63a:	441a      	add	r2, r3
 800a63c:	e7db      	b.n	800a5f6 <__cvt+0x58>
 800a63e:	1c5c      	adds	r4, r3, #1
 800a640:	9403      	str	r4, [sp, #12]
 800a642:	7019      	strb	r1, [r3, #0]
 800a644:	e7de      	b.n	800a604 <__cvt+0x66>

0800a646 <__exponent>:
 800a646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a648:	2900      	cmp	r1, #0
 800a64a:	bfba      	itte	lt
 800a64c:	4249      	neglt	r1, r1
 800a64e:	232d      	movlt	r3, #45	@ 0x2d
 800a650:	232b      	movge	r3, #43	@ 0x2b
 800a652:	2909      	cmp	r1, #9
 800a654:	7002      	strb	r2, [r0, #0]
 800a656:	7043      	strb	r3, [r0, #1]
 800a658:	dd29      	ble.n	800a6ae <__exponent+0x68>
 800a65a:	f10d 0307 	add.w	r3, sp, #7
 800a65e:	461d      	mov	r5, r3
 800a660:	270a      	movs	r7, #10
 800a662:	461a      	mov	r2, r3
 800a664:	fbb1 f6f7 	udiv	r6, r1, r7
 800a668:	fb07 1416 	mls	r4, r7, r6, r1
 800a66c:	3430      	adds	r4, #48	@ 0x30
 800a66e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a672:	460c      	mov	r4, r1
 800a674:	2c63      	cmp	r4, #99	@ 0x63
 800a676:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a67a:	4631      	mov	r1, r6
 800a67c:	dcf1      	bgt.n	800a662 <__exponent+0x1c>
 800a67e:	3130      	adds	r1, #48	@ 0x30
 800a680:	1e94      	subs	r4, r2, #2
 800a682:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a686:	1c41      	adds	r1, r0, #1
 800a688:	4623      	mov	r3, r4
 800a68a:	42ab      	cmp	r3, r5
 800a68c:	d30a      	bcc.n	800a6a4 <__exponent+0x5e>
 800a68e:	f10d 0309 	add.w	r3, sp, #9
 800a692:	1a9b      	subs	r3, r3, r2
 800a694:	42ac      	cmp	r4, r5
 800a696:	bf88      	it	hi
 800a698:	2300      	movhi	r3, #0
 800a69a:	3302      	adds	r3, #2
 800a69c:	4403      	add	r3, r0
 800a69e:	1a18      	subs	r0, r3, r0
 800a6a0:	b003      	add	sp, #12
 800a6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a6a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a6ac:	e7ed      	b.n	800a68a <__exponent+0x44>
 800a6ae:	2330      	movs	r3, #48	@ 0x30
 800a6b0:	3130      	adds	r1, #48	@ 0x30
 800a6b2:	7083      	strb	r3, [r0, #2]
 800a6b4:	70c1      	strb	r1, [r0, #3]
 800a6b6:	1d03      	adds	r3, r0, #4
 800a6b8:	e7f1      	b.n	800a69e <__exponent+0x58>
 800a6ba:	0000      	movs	r0, r0
 800a6bc:	0000      	movs	r0, r0
	...

0800a6c0 <_printf_float>:
 800a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	b08d      	sub	sp, #52	@ 0x34
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a6cc:	4616      	mov	r6, r2
 800a6ce:	461f      	mov	r7, r3
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	f000 fd03 	bl	800b0dc <_localeconv_r>
 800a6d6:	f8d0 b000 	ldr.w	fp, [r0]
 800a6da:	4658      	mov	r0, fp
 800a6dc:	f7f5 fe50 	bl	8000380 <strlen>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a6ec:	6822      	ldr	r2, [r4, #0]
 800a6ee:	9005      	str	r0, [sp, #20]
 800a6f0:	3307      	adds	r3, #7
 800a6f2:	f023 0307 	bic.w	r3, r3, #7
 800a6f6:	f103 0108 	add.w	r1, r3, #8
 800a6fa:	f8c8 1000 	str.w	r1, [r8]
 800a6fe:	ed93 0b00 	vldr	d0, [r3]
 800a702:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a960 <_printf_float+0x2a0>
 800a706:	eeb0 7bc0 	vabs.f64	d7, d0
 800a70a:	eeb4 7b46 	vcmp.f64	d7, d6
 800a70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a712:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a716:	dd24      	ble.n	800a762 <_printf_float+0xa2>
 800a718:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a720:	d502      	bpl.n	800a728 <_printf_float+0x68>
 800a722:	232d      	movs	r3, #45	@ 0x2d
 800a724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a728:	498f      	ldr	r1, [pc, #572]	@ (800a968 <_printf_float+0x2a8>)
 800a72a:	4b90      	ldr	r3, [pc, #576]	@ (800a96c <_printf_float+0x2ac>)
 800a72c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a730:	bf8c      	ite	hi
 800a732:	4688      	movhi	r8, r1
 800a734:	4698      	movls	r8, r3
 800a736:	f022 0204 	bic.w	r2, r2, #4
 800a73a:	2303      	movs	r3, #3
 800a73c:	6123      	str	r3, [r4, #16]
 800a73e:	6022      	str	r2, [r4, #0]
 800a740:	f04f 0a00 	mov.w	sl, #0
 800a744:	9700      	str	r7, [sp, #0]
 800a746:	4633      	mov	r3, r6
 800a748:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a74a:	4621      	mov	r1, r4
 800a74c:	4628      	mov	r0, r5
 800a74e:	f000 f9d1 	bl	800aaf4 <_printf_common>
 800a752:	3001      	adds	r0, #1
 800a754:	f040 8089 	bne.w	800a86a <_printf_float+0x1aa>
 800a758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a75c:	b00d      	add	sp, #52	@ 0x34
 800a75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a762:	eeb4 0b40 	vcmp.f64	d0, d0
 800a766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a76a:	d709      	bvc.n	800a780 <_printf_float+0xc0>
 800a76c:	ee10 3a90 	vmov	r3, s1
 800a770:	2b00      	cmp	r3, #0
 800a772:	bfbc      	itt	lt
 800a774:	232d      	movlt	r3, #45	@ 0x2d
 800a776:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a77a:	497d      	ldr	r1, [pc, #500]	@ (800a970 <_printf_float+0x2b0>)
 800a77c:	4b7d      	ldr	r3, [pc, #500]	@ (800a974 <_printf_float+0x2b4>)
 800a77e:	e7d5      	b.n	800a72c <_printf_float+0x6c>
 800a780:	6863      	ldr	r3, [r4, #4]
 800a782:	1c59      	adds	r1, r3, #1
 800a784:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a788:	d139      	bne.n	800a7fe <_printf_float+0x13e>
 800a78a:	2306      	movs	r3, #6
 800a78c:	6063      	str	r3, [r4, #4]
 800a78e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a792:	2300      	movs	r3, #0
 800a794:	6022      	str	r2, [r4, #0]
 800a796:	9303      	str	r3, [sp, #12]
 800a798:	ab0a      	add	r3, sp, #40	@ 0x28
 800a79a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a79e:	ab09      	add	r3, sp, #36	@ 0x24
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	6861      	ldr	r1, [r4, #4]
 800a7a4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f7ff fef8 	bl	800a59e <__cvt>
 800a7ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a7b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7b4:	4680      	mov	r8, r0
 800a7b6:	d129      	bne.n	800a80c <_printf_float+0x14c>
 800a7b8:	1cc8      	adds	r0, r1, #3
 800a7ba:	db02      	blt.n	800a7c2 <_printf_float+0x102>
 800a7bc:	6863      	ldr	r3, [r4, #4]
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	dd41      	ble.n	800a846 <_printf_float+0x186>
 800a7c2:	f1a9 0902 	sub.w	r9, r9, #2
 800a7c6:	fa5f f989 	uxtb.w	r9, r9
 800a7ca:	3901      	subs	r1, #1
 800a7cc:	464a      	mov	r2, r9
 800a7ce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a7d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a7d4:	f7ff ff37 	bl	800a646 <__exponent>
 800a7d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7da:	1813      	adds	r3, r2, r0
 800a7dc:	2a01      	cmp	r2, #1
 800a7de:	4682      	mov	sl, r0
 800a7e0:	6123      	str	r3, [r4, #16]
 800a7e2:	dc02      	bgt.n	800a7ea <_printf_float+0x12a>
 800a7e4:	6822      	ldr	r2, [r4, #0]
 800a7e6:	07d2      	lsls	r2, r2, #31
 800a7e8:	d501      	bpl.n	800a7ee <_printf_float+0x12e>
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	6123      	str	r3, [r4, #16]
 800a7ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0a6      	beq.n	800a744 <_printf_float+0x84>
 800a7f6:	232d      	movs	r3, #45	@ 0x2d
 800a7f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7fc:	e7a2      	b.n	800a744 <_printf_float+0x84>
 800a7fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a802:	d1c4      	bne.n	800a78e <_printf_float+0xce>
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1c2      	bne.n	800a78e <_printf_float+0xce>
 800a808:	2301      	movs	r3, #1
 800a80a:	e7bf      	b.n	800a78c <_printf_float+0xcc>
 800a80c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a810:	d9db      	bls.n	800a7ca <_printf_float+0x10a>
 800a812:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a816:	d118      	bne.n	800a84a <_printf_float+0x18a>
 800a818:	2900      	cmp	r1, #0
 800a81a:	6863      	ldr	r3, [r4, #4]
 800a81c:	dd0b      	ble.n	800a836 <_printf_float+0x176>
 800a81e:	6121      	str	r1, [r4, #16]
 800a820:	b913      	cbnz	r3, 800a828 <_printf_float+0x168>
 800a822:	6822      	ldr	r2, [r4, #0]
 800a824:	07d0      	lsls	r0, r2, #31
 800a826:	d502      	bpl.n	800a82e <_printf_float+0x16e>
 800a828:	3301      	adds	r3, #1
 800a82a:	440b      	add	r3, r1
 800a82c:	6123      	str	r3, [r4, #16]
 800a82e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a830:	f04f 0a00 	mov.w	sl, #0
 800a834:	e7db      	b.n	800a7ee <_printf_float+0x12e>
 800a836:	b913      	cbnz	r3, 800a83e <_printf_float+0x17e>
 800a838:	6822      	ldr	r2, [r4, #0]
 800a83a:	07d2      	lsls	r2, r2, #31
 800a83c:	d501      	bpl.n	800a842 <_printf_float+0x182>
 800a83e:	3302      	adds	r3, #2
 800a840:	e7f4      	b.n	800a82c <_printf_float+0x16c>
 800a842:	2301      	movs	r3, #1
 800a844:	e7f2      	b.n	800a82c <_printf_float+0x16c>
 800a846:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a84a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a84c:	4299      	cmp	r1, r3
 800a84e:	db05      	blt.n	800a85c <_printf_float+0x19c>
 800a850:	6823      	ldr	r3, [r4, #0]
 800a852:	6121      	str	r1, [r4, #16]
 800a854:	07d8      	lsls	r0, r3, #31
 800a856:	d5ea      	bpl.n	800a82e <_printf_float+0x16e>
 800a858:	1c4b      	adds	r3, r1, #1
 800a85a:	e7e7      	b.n	800a82c <_printf_float+0x16c>
 800a85c:	2900      	cmp	r1, #0
 800a85e:	bfd4      	ite	le
 800a860:	f1c1 0202 	rsble	r2, r1, #2
 800a864:	2201      	movgt	r2, #1
 800a866:	4413      	add	r3, r2
 800a868:	e7e0      	b.n	800a82c <_printf_float+0x16c>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	055a      	lsls	r2, r3, #21
 800a86e:	d407      	bmi.n	800a880 <_printf_float+0x1c0>
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	4642      	mov	r2, r8
 800a874:	4631      	mov	r1, r6
 800a876:	4628      	mov	r0, r5
 800a878:	47b8      	blx	r7
 800a87a:	3001      	adds	r0, #1
 800a87c:	d12a      	bne.n	800a8d4 <_printf_float+0x214>
 800a87e:	e76b      	b.n	800a758 <_printf_float+0x98>
 800a880:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a884:	f240 80e0 	bls.w	800aa48 <_printf_float+0x388>
 800a888:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a88c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a894:	d133      	bne.n	800a8fe <_printf_float+0x23e>
 800a896:	4a38      	ldr	r2, [pc, #224]	@ (800a978 <_printf_float+0x2b8>)
 800a898:	2301      	movs	r3, #1
 800a89a:	4631      	mov	r1, r6
 800a89c:	4628      	mov	r0, r5
 800a89e:	47b8      	blx	r7
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	f43f af59 	beq.w	800a758 <_printf_float+0x98>
 800a8a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a8aa:	4543      	cmp	r3, r8
 800a8ac:	db02      	blt.n	800a8b4 <_printf_float+0x1f4>
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	07d8      	lsls	r0, r3, #31
 800a8b2:	d50f      	bpl.n	800a8d4 <_printf_float+0x214>
 800a8b4:	9b05      	ldr	r3, [sp, #20]
 800a8b6:	465a      	mov	r2, fp
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	47b8      	blx	r7
 800a8be:	3001      	adds	r0, #1
 800a8c0:	f43f af4a 	beq.w	800a758 <_printf_float+0x98>
 800a8c4:	f04f 0900 	mov.w	r9, #0
 800a8c8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a8cc:	f104 0a1a 	add.w	sl, r4, #26
 800a8d0:	45c8      	cmp	r8, r9
 800a8d2:	dc09      	bgt.n	800a8e8 <_printf_float+0x228>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	079b      	lsls	r3, r3, #30
 800a8d8:	f100 8107 	bmi.w	800aaea <_printf_float+0x42a>
 800a8dc:	68e0      	ldr	r0, [r4, #12]
 800a8de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8e0:	4298      	cmp	r0, r3
 800a8e2:	bfb8      	it	lt
 800a8e4:	4618      	movlt	r0, r3
 800a8e6:	e739      	b.n	800a75c <_printf_float+0x9c>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b8      	blx	r7
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	f43f af30 	beq.w	800a758 <_printf_float+0x98>
 800a8f8:	f109 0901 	add.w	r9, r9, #1
 800a8fc:	e7e8      	b.n	800a8d0 <_printf_float+0x210>
 800a8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a900:	2b00      	cmp	r3, #0
 800a902:	dc3b      	bgt.n	800a97c <_printf_float+0x2bc>
 800a904:	4a1c      	ldr	r2, [pc, #112]	@ (800a978 <_printf_float+0x2b8>)
 800a906:	2301      	movs	r3, #1
 800a908:	4631      	mov	r1, r6
 800a90a:	4628      	mov	r0, r5
 800a90c:	47b8      	blx	r7
 800a90e:	3001      	adds	r0, #1
 800a910:	f43f af22 	beq.w	800a758 <_printf_float+0x98>
 800a914:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a918:	ea59 0303 	orrs.w	r3, r9, r3
 800a91c:	d102      	bne.n	800a924 <_printf_float+0x264>
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	07d9      	lsls	r1, r3, #31
 800a922:	d5d7      	bpl.n	800a8d4 <_printf_float+0x214>
 800a924:	9b05      	ldr	r3, [sp, #20]
 800a926:	465a      	mov	r2, fp
 800a928:	4631      	mov	r1, r6
 800a92a:	4628      	mov	r0, r5
 800a92c:	47b8      	blx	r7
 800a92e:	3001      	adds	r0, #1
 800a930:	f43f af12 	beq.w	800a758 <_printf_float+0x98>
 800a934:	f04f 0a00 	mov.w	sl, #0
 800a938:	f104 0b1a 	add.w	fp, r4, #26
 800a93c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a93e:	425b      	negs	r3, r3
 800a940:	4553      	cmp	r3, sl
 800a942:	dc01      	bgt.n	800a948 <_printf_float+0x288>
 800a944:	464b      	mov	r3, r9
 800a946:	e794      	b.n	800a872 <_printf_float+0x1b2>
 800a948:	2301      	movs	r3, #1
 800a94a:	465a      	mov	r2, fp
 800a94c:	4631      	mov	r1, r6
 800a94e:	4628      	mov	r0, r5
 800a950:	47b8      	blx	r7
 800a952:	3001      	adds	r0, #1
 800a954:	f43f af00 	beq.w	800a758 <_printf_float+0x98>
 800a958:	f10a 0a01 	add.w	sl, sl, #1
 800a95c:	e7ee      	b.n	800a93c <_printf_float+0x27c>
 800a95e:	bf00      	nop
 800a960:	ffffffff 	.word	0xffffffff
 800a964:	7fefffff 	.word	0x7fefffff
 800a968:	0800cf50 	.word	0x0800cf50
 800a96c:	0800cf4c 	.word	0x0800cf4c
 800a970:	0800cf58 	.word	0x0800cf58
 800a974:	0800cf54 	.word	0x0800cf54
 800a978:	0800cf5c 	.word	0x0800cf5c
 800a97c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a97e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a982:	4553      	cmp	r3, sl
 800a984:	bfa8      	it	ge
 800a986:	4653      	movge	r3, sl
 800a988:	2b00      	cmp	r3, #0
 800a98a:	4699      	mov	r9, r3
 800a98c:	dc37      	bgt.n	800a9fe <_printf_float+0x33e>
 800a98e:	2300      	movs	r3, #0
 800a990:	9307      	str	r3, [sp, #28]
 800a992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a996:	f104 021a 	add.w	r2, r4, #26
 800a99a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a99c:	9907      	ldr	r1, [sp, #28]
 800a99e:	9306      	str	r3, [sp, #24]
 800a9a0:	eba3 0309 	sub.w	r3, r3, r9
 800a9a4:	428b      	cmp	r3, r1
 800a9a6:	dc31      	bgt.n	800aa0c <_printf_float+0x34c>
 800a9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9aa:	459a      	cmp	sl, r3
 800a9ac:	dc3b      	bgt.n	800aa26 <_printf_float+0x366>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	07da      	lsls	r2, r3, #31
 800a9b2:	d438      	bmi.n	800aa26 <_printf_float+0x366>
 800a9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b6:	ebaa 0903 	sub.w	r9, sl, r3
 800a9ba:	9b06      	ldr	r3, [sp, #24]
 800a9bc:	ebaa 0303 	sub.w	r3, sl, r3
 800a9c0:	4599      	cmp	r9, r3
 800a9c2:	bfa8      	it	ge
 800a9c4:	4699      	movge	r9, r3
 800a9c6:	f1b9 0f00 	cmp.w	r9, #0
 800a9ca:	dc34      	bgt.n	800aa36 <_printf_float+0x376>
 800a9cc:	f04f 0800 	mov.w	r8, #0
 800a9d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9d4:	f104 0b1a 	add.w	fp, r4, #26
 800a9d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9da:	ebaa 0303 	sub.w	r3, sl, r3
 800a9de:	eba3 0309 	sub.w	r3, r3, r9
 800a9e2:	4543      	cmp	r3, r8
 800a9e4:	f77f af76 	ble.w	800a8d4 <_printf_float+0x214>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	465a      	mov	r2, fp
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	47b8      	blx	r7
 800a9f2:	3001      	adds	r0, #1
 800a9f4:	f43f aeb0 	beq.w	800a758 <_printf_float+0x98>
 800a9f8:	f108 0801 	add.w	r8, r8, #1
 800a9fc:	e7ec      	b.n	800a9d8 <_printf_float+0x318>
 800a9fe:	4642      	mov	r2, r8
 800aa00:	4631      	mov	r1, r6
 800aa02:	4628      	mov	r0, r5
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	d1c1      	bne.n	800a98e <_printf_float+0x2ce>
 800aa0a:	e6a5      	b.n	800a758 <_printf_float+0x98>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	4631      	mov	r1, r6
 800aa10:	4628      	mov	r0, r5
 800aa12:	9206      	str	r2, [sp, #24]
 800aa14:	47b8      	blx	r7
 800aa16:	3001      	adds	r0, #1
 800aa18:	f43f ae9e 	beq.w	800a758 <_printf_float+0x98>
 800aa1c:	9b07      	ldr	r3, [sp, #28]
 800aa1e:	9a06      	ldr	r2, [sp, #24]
 800aa20:	3301      	adds	r3, #1
 800aa22:	9307      	str	r3, [sp, #28]
 800aa24:	e7b9      	b.n	800a99a <_printf_float+0x2da>
 800aa26:	9b05      	ldr	r3, [sp, #20]
 800aa28:	465a      	mov	r2, fp
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	47b8      	blx	r7
 800aa30:	3001      	adds	r0, #1
 800aa32:	d1bf      	bne.n	800a9b4 <_printf_float+0x2f4>
 800aa34:	e690      	b.n	800a758 <_printf_float+0x98>
 800aa36:	9a06      	ldr	r2, [sp, #24]
 800aa38:	464b      	mov	r3, r9
 800aa3a:	4442      	add	r2, r8
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4628      	mov	r0, r5
 800aa40:	47b8      	blx	r7
 800aa42:	3001      	adds	r0, #1
 800aa44:	d1c2      	bne.n	800a9cc <_printf_float+0x30c>
 800aa46:	e687      	b.n	800a758 <_printf_float+0x98>
 800aa48:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800aa4c:	f1b9 0f01 	cmp.w	r9, #1
 800aa50:	dc01      	bgt.n	800aa56 <_printf_float+0x396>
 800aa52:	07db      	lsls	r3, r3, #31
 800aa54:	d536      	bpl.n	800aac4 <_printf_float+0x404>
 800aa56:	2301      	movs	r3, #1
 800aa58:	4642      	mov	r2, r8
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	47b8      	blx	r7
 800aa60:	3001      	adds	r0, #1
 800aa62:	f43f ae79 	beq.w	800a758 <_printf_float+0x98>
 800aa66:	9b05      	ldr	r3, [sp, #20]
 800aa68:	465a      	mov	r2, fp
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b8      	blx	r7
 800aa70:	3001      	adds	r0, #1
 800aa72:	f43f ae71 	beq.w	800a758 <_printf_float+0x98>
 800aa76:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800aa7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa82:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800aa86:	d018      	beq.n	800aaba <_printf_float+0x3fa>
 800aa88:	464b      	mov	r3, r9
 800aa8a:	f108 0201 	add.w	r2, r8, #1
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	d10c      	bne.n	800aab2 <_printf_float+0x3f2>
 800aa98:	e65e      	b.n	800a758 <_printf_float+0x98>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	465a      	mov	r2, fp
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	47b8      	blx	r7
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	f43f ae57 	beq.w	800a758 <_printf_float+0x98>
 800aaaa:	f108 0801 	add.w	r8, r8, #1
 800aaae:	45c8      	cmp	r8, r9
 800aab0:	dbf3      	blt.n	800aa9a <_printf_float+0x3da>
 800aab2:	4653      	mov	r3, sl
 800aab4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aab8:	e6dc      	b.n	800a874 <_printf_float+0x1b4>
 800aaba:	f04f 0800 	mov.w	r8, #0
 800aabe:	f104 0b1a 	add.w	fp, r4, #26
 800aac2:	e7f4      	b.n	800aaae <_printf_float+0x3ee>
 800aac4:	2301      	movs	r3, #1
 800aac6:	4642      	mov	r2, r8
 800aac8:	e7e1      	b.n	800aa8e <_printf_float+0x3ce>
 800aaca:	2301      	movs	r3, #1
 800aacc:	464a      	mov	r2, r9
 800aace:	4631      	mov	r1, r6
 800aad0:	4628      	mov	r0, r5
 800aad2:	47b8      	blx	r7
 800aad4:	3001      	adds	r0, #1
 800aad6:	f43f ae3f 	beq.w	800a758 <_printf_float+0x98>
 800aada:	f108 0801 	add.w	r8, r8, #1
 800aade:	68e3      	ldr	r3, [r4, #12]
 800aae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aae2:	1a5b      	subs	r3, r3, r1
 800aae4:	4543      	cmp	r3, r8
 800aae6:	dcf0      	bgt.n	800aaca <_printf_float+0x40a>
 800aae8:	e6f8      	b.n	800a8dc <_printf_float+0x21c>
 800aaea:	f04f 0800 	mov.w	r8, #0
 800aaee:	f104 0919 	add.w	r9, r4, #25
 800aaf2:	e7f4      	b.n	800aade <_printf_float+0x41e>

0800aaf4 <_printf_common>:
 800aaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf8:	4616      	mov	r6, r2
 800aafa:	4698      	mov	r8, r3
 800aafc:	688a      	ldr	r2, [r1, #8]
 800aafe:	690b      	ldr	r3, [r1, #16]
 800ab00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab04:	4293      	cmp	r3, r2
 800ab06:	bfb8      	it	lt
 800ab08:	4613      	movlt	r3, r2
 800ab0a:	6033      	str	r3, [r6, #0]
 800ab0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab10:	4607      	mov	r7, r0
 800ab12:	460c      	mov	r4, r1
 800ab14:	b10a      	cbz	r2, 800ab1a <_printf_common+0x26>
 800ab16:	3301      	adds	r3, #1
 800ab18:	6033      	str	r3, [r6, #0]
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	0699      	lsls	r1, r3, #26
 800ab1e:	bf42      	ittt	mi
 800ab20:	6833      	ldrmi	r3, [r6, #0]
 800ab22:	3302      	addmi	r3, #2
 800ab24:	6033      	strmi	r3, [r6, #0]
 800ab26:	6825      	ldr	r5, [r4, #0]
 800ab28:	f015 0506 	ands.w	r5, r5, #6
 800ab2c:	d106      	bne.n	800ab3c <_printf_common+0x48>
 800ab2e:	f104 0a19 	add.w	sl, r4, #25
 800ab32:	68e3      	ldr	r3, [r4, #12]
 800ab34:	6832      	ldr	r2, [r6, #0]
 800ab36:	1a9b      	subs	r3, r3, r2
 800ab38:	42ab      	cmp	r3, r5
 800ab3a:	dc26      	bgt.n	800ab8a <_printf_common+0x96>
 800ab3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab40:	6822      	ldr	r2, [r4, #0]
 800ab42:	3b00      	subs	r3, #0
 800ab44:	bf18      	it	ne
 800ab46:	2301      	movne	r3, #1
 800ab48:	0692      	lsls	r2, r2, #26
 800ab4a:	d42b      	bmi.n	800aba4 <_printf_common+0xb0>
 800ab4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab50:	4641      	mov	r1, r8
 800ab52:	4638      	mov	r0, r7
 800ab54:	47c8      	blx	r9
 800ab56:	3001      	adds	r0, #1
 800ab58:	d01e      	beq.n	800ab98 <_printf_common+0xa4>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	6922      	ldr	r2, [r4, #16]
 800ab5e:	f003 0306 	and.w	r3, r3, #6
 800ab62:	2b04      	cmp	r3, #4
 800ab64:	bf02      	ittt	eq
 800ab66:	68e5      	ldreq	r5, [r4, #12]
 800ab68:	6833      	ldreq	r3, [r6, #0]
 800ab6a:	1aed      	subeq	r5, r5, r3
 800ab6c:	68a3      	ldr	r3, [r4, #8]
 800ab6e:	bf0c      	ite	eq
 800ab70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab74:	2500      	movne	r5, #0
 800ab76:	4293      	cmp	r3, r2
 800ab78:	bfc4      	itt	gt
 800ab7a:	1a9b      	subgt	r3, r3, r2
 800ab7c:	18ed      	addgt	r5, r5, r3
 800ab7e:	2600      	movs	r6, #0
 800ab80:	341a      	adds	r4, #26
 800ab82:	42b5      	cmp	r5, r6
 800ab84:	d11a      	bne.n	800abbc <_printf_common+0xc8>
 800ab86:	2000      	movs	r0, #0
 800ab88:	e008      	b.n	800ab9c <_printf_common+0xa8>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	4652      	mov	r2, sl
 800ab8e:	4641      	mov	r1, r8
 800ab90:	4638      	mov	r0, r7
 800ab92:	47c8      	blx	r9
 800ab94:	3001      	adds	r0, #1
 800ab96:	d103      	bne.n	800aba0 <_printf_common+0xac>
 800ab98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba0:	3501      	adds	r5, #1
 800aba2:	e7c6      	b.n	800ab32 <_printf_common+0x3e>
 800aba4:	18e1      	adds	r1, r4, r3
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	2030      	movs	r0, #48	@ 0x30
 800abaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abae:	4422      	add	r2, r4
 800abb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abb8:	3302      	adds	r3, #2
 800abba:	e7c7      	b.n	800ab4c <_printf_common+0x58>
 800abbc:	2301      	movs	r3, #1
 800abbe:	4622      	mov	r2, r4
 800abc0:	4641      	mov	r1, r8
 800abc2:	4638      	mov	r0, r7
 800abc4:	47c8      	blx	r9
 800abc6:	3001      	adds	r0, #1
 800abc8:	d0e6      	beq.n	800ab98 <_printf_common+0xa4>
 800abca:	3601      	adds	r6, #1
 800abcc:	e7d9      	b.n	800ab82 <_printf_common+0x8e>
	...

0800abd0 <_printf_i>:
 800abd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abd4:	7e0f      	ldrb	r7, [r1, #24]
 800abd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800abd8:	2f78      	cmp	r7, #120	@ 0x78
 800abda:	4691      	mov	r9, r2
 800abdc:	4680      	mov	r8, r0
 800abde:	460c      	mov	r4, r1
 800abe0:	469a      	mov	sl, r3
 800abe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800abe6:	d807      	bhi.n	800abf8 <_printf_i+0x28>
 800abe8:	2f62      	cmp	r7, #98	@ 0x62
 800abea:	d80a      	bhi.n	800ac02 <_printf_i+0x32>
 800abec:	2f00      	cmp	r7, #0
 800abee:	f000 80d1 	beq.w	800ad94 <_printf_i+0x1c4>
 800abf2:	2f58      	cmp	r7, #88	@ 0x58
 800abf4:	f000 80b8 	beq.w	800ad68 <_printf_i+0x198>
 800abf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac00:	e03a      	b.n	800ac78 <_printf_i+0xa8>
 800ac02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac06:	2b15      	cmp	r3, #21
 800ac08:	d8f6      	bhi.n	800abf8 <_printf_i+0x28>
 800ac0a:	a101      	add	r1, pc, #4	@ (adr r1, 800ac10 <_printf_i+0x40>)
 800ac0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac10:	0800ac69 	.word	0x0800ac69
 800ac14:	0800ac7d 	.word	0x0800ac7d
 800ac18:	0800abf9 	.word	0x0800abf9
 800ac1c:	0800abf9 	.word	0x0800abf9
 800ac20:	0800abf9 	.word	0x0800abf9
 800ac24:	0800abf9 	.word	0x0800abf9
 800ac28:	0800ac7d 	.word	0x0800ac7d
 800ac2c:	0800abf9 	.word	0x0800abf9
 800ac30:	0800abf9 	.word	0x0800abf9
 800ac34:	0800abf9 	.word	0x0800abf9
 800ac38:	0800abf9 	.word	0x0800abf9
 800ac3c:	0800ad7b 	.word	0x0800ad7b
 800ac40:	0800aca7 	.word	0x0800aca7
 800ac44:	0800ad35 	.word	0x0800ad35
 800ac48:	0800abf9 	.word	0x0800abf9
 800ac4c:	0800abf9 	.word	0x0800abf9
 800ac50:	0800ad9d 	.word	0x0800ad9d
 800ac54:	0800abf9 	.word	0x0800abf9
 800ac58:	0800aca7 	.word	0x0800aca7
 800ac5c:	0800abf9 	.word	0x0800abf9
 800ac60:	0800abf9 	.word	0x0800abf9
 800ac64:	0800ad3d 	.word	0x0800ad3d
 800ac68:	6833      	ldr	r3, [r6, #0]
 800ac6a:	1d1a      	adds	r2, r3, #4
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6032      	str	r2, [r6, #0]
 800ac70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e09c      	b.n	800adb6 <_printf_i+0x1e6>
 800ac7c:	6833      	ldr	r3, [r6, #0]
 800ac7e:	6820      	ldr	r0, [r4, #0]
 800ac80:	1d19      	adds	r1, r3, #4
 800ac82:	6031      	str	r1, [r6, #0]
 800ac84:	0606      	lsls	r6, r0, #24
 800ac86:	d501      	bpl.n	800ac8c <_printf_i+0xbc>
 800ac88:	681d      	ldr	r5, [r3, #0]
 800ac8a:	e003      	b.n	800ac94 <_printf_i+0xc4>
 800ac8c:	0645      	lsls	r5, r0, #25
 800ac8e:	d5fb      	bpl.n	800ac88 <_printf_i+0xb8>
 800ac90:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac94:	2d00      	cmp	r5, #0
 800ac96:	da03      	bge.n	800aca0 <_printf_i+0xd0>
 800ac98:	232d      	movs	r3, #45	@ 0x2d
 800ac9a:	426d      	negs	r5, r5
 800ac9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aca0:	4858      	ldr	r0, [pc, #352]	@ (800ae04 <_printf_i+0x234>)
 800aca2:	230a      	movs	r3, #10
 800aca4:	e011      	b.n	800acca <_printf_i+0xfa>
 800aca6:	6821      	ldr	r1, [r4, #0]
 800aca8:	6833      	ldr	r3, [r6, #0]
 800acaa:	0608      	lsls	r0, r1, #24
 800acac:	f853 5b04 	ldr.w	r5, [r3], #4
 800acb0:	d402      	bmi.n	800acb8 <_printf_i+0xe8>
 800acb2:	0649      	lsls	r1, r1, #25
 800acb4:	bf48      	it	mi
 800acb6:	b2ad      	uxthmi	r5, r5
 800acb8:	2f6f      	cmp	r7, #111	@ 0x6f
 800acba:	4852      	ldr	r0, [pc, #328]	@ (800ae04 <_printf_i+0x234>)
 800acbc:	6033      	str	r3, [r6, #0]
 800acbe:	bf14      	ite	ne
 800acc0:	230a      	movne	r3, #10
 800acc2:	2308      	moveq	r3, #8
 800acc4:	2100      	movs	r1, #0
 800acc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800acca:	6866      	ldr	r6, [r4, #4]
 800accc:	60a6      	str	r6, [r4, #8]
 800acce:	2e00      	cmp	r6, #0
 800acd0:	db05      	blt.n	800acde <_printf_i+0x10e>
 800acd2:	6821      	ldr	r1, [r4, #0]
 800acd4:	432e      	orrs	r6, r5
 800acd6:	f021 0104 	bic.w	r1, r1, #4
 800acda:	6021      	str	r1, [r4, #0]
 800acdc:	d04b      	beq.n	800ad76 <_printf_i+0x1a6>
 800acde:	4616      	mov	r6, r2
 800ace0:	fbb5 f1f3 	udiv	r1, r5, r3
 800ace4:	fb03 5711 	mls	r7, r3, r1, r5
 800ace8:	5dc7      	ldrb	r7, [r0, r7]
 800acea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800acee:	462f      	mov	r7, r5
 800acf0:	42bb      	cmp	r3, r7
 800acf2:	460d      	mov	r5, r1
 800acf4:	d9f4      	bls.n	800ace0 <_printf_i+0x110>
 800acf6:	2b08      	cmp	r3, #8
 800acf8:	d10b      	bne.n	800ad12 <_printf_i+0x142>
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	07df      	lsls	r7, r3, #31
 800acfe:	d508      	bpl.n	800ad12 <_printf_i+0x142>
 800ad00:	6923      	ldr	r3, [r4, #16]
 800ad02:	6861      	ldr	r1, [r4, #4]
 800ad04:	4299      	cmp	r1, r3
 800ad06:	bfde      	ittt	le
 800ad08:	2330      	movle	r3, #48	@ 0x30
 800ad0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad0e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ad12:	1b92      	subs	r2, r2, r6
 800ad14:	6122      	str	r2, [r4, #16]
 800ad16:	f8cd a000 	str.w	sl, [sp]
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	aa03      	add	r2, sp, #12
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4640      	mov	r0, r8
 800ad22:	f7ff fee7 	bl	800aaf4 <_printf_common>
 800ad26:	3001      	adds	r0, #1
 800ad28:	d14a      	bne.n	800adc0 <_printf_i+0x1f0>
 800ad2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad2e:	b004      	add	sp, #16
 800ad30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	f043 0320 	orr.w	r3, r3, #32
 800ad3a:	6023      	str	r3, [r4, #0]
 800ad3c:	4832      	ldr	r0, [pc, #200]	@ (800ae08 <_printf_i+0x238>)
 800ad3e:	2778      	movs	r7, #120	@ 0x78
 800ad40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	6831      	ldr	r1, [r6, #0]
 800ad48:	061f      	lsls	r7, r3, #24
 800ad4a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad4e:	d402      	bmi.n	800ad56 <_printf_i+0x186>
 800ad50:	065f      	lsls	r7, r3, #25
 800ad52:	bf48      	it	mi
 800ad54:	b2ad      	uxthmi	r5, r5
 800ad56:	6031      	str	r1, [r6, #0]
 800ad58:	07d9      	lsls	r1, r3, #31
 800ad5a:	bf44      	itt	mi
 800ad5c:	f043 0320 	orrmi.w	r3, r3, #32
 800ad60:	6023      	strmi	r3, [r4, #0]
 800ad62:	b11d      	cbz	r5, 800ad6c <_printf_i+0x19c>
 800ad64:	2310      	movs	r3, #16
 800ad66:	e7ad      	b.n	800acc4 <_printf_i+0xf4>
 800ad68:	4826      	ldr	r0, [pc, #152]	@ (800ae04 <_printf_i+0x234>)
 800ad6a:	e7e9      	b.n	800ad40 <_printf_i+0x170>
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	f023 0320 	bic.w	r3, r3, #32
 800ad72:	6023      	str	r3, [r4, #0]
 800ad74:	e7f6      	b.n	800ad64 <_printf_i+0x194>
 800ad76:	4616      	mov	r6, r2
 800ad78:	e7bd      	b.n	800acf6 <_printf_i+0x126>
 800ad7a:	6833      	ldr	r3, [r6, #0]
 800ad7c:	6825      	ldr	r5, [r4, #0]
 800ad7e:	6961      	ldr	r1, [r4, #20]
 800ad80:	1d18      	adds	r0, r3, #4
 800ad82:	6030      	str	r0, [r6, #0]
 800ad84:	062e      	lsls	r6, r5, #24
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	d501      	bpl.n	800ad8e <_printf_i+0x1be>
 800ad8a:	6019      	str	r1, [r3, #0]
 800ad8c:	e002      	b.n	800ad94 <_printf_i+0x1c4>
 800ad8e:	0668      	lsls	r0, r5, #25
 800ad90:	d5fb      	bpl.n	800ad8a <_printf_i+0x1ba>
 800ad92:	8019      	strh	r1, [r3, #0]
 800ad94:	2300      	movs	r3, #0
 800ad96:	6123      	str	r3, [r4, #16]
 800ad98:	4616      	mov	r6, r2
 800ad9a:	e7bc      	b.n	800ad16 <_printf_i+0x146>
 800ad9c:	6833      	ldr	r3, [r6, #0]
 800ad9e:	1d1a      	adds	r2, r3, #4
 800ada0:	6032      	str	r2, [r6, #0]
 800ada2:	681e      	ldr	r6, [r3, #0]
 800ada4:	6862      	ldr	r2, [r4, #4]
 800ada6:	2100      	movs	r1, #0
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7f5 fa99 	bl	80002e0 <memchr>
 800adae:	b108      	cbz	r0, 800adb4 <_printf_i+0x1e4>
 800adb0:	1b80      	subs	r0, r0, r6
 800adb2:	6060      	str	r0, [r4, #4]
 800adb4:	6863      	ldr	r3, [r4, #4]
 800adb6:	6123      	str	r3, [r4, #16]
 800adb8:	2300      	movs	r3, #0
 800adba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adbe:	e7aa      	b.n	800ad16 <_printf_i+0x146>
 800adc0:	6923      	ldr	r3, [r4, #16]
 800adc2:	4632      	mov	r2, r6
 800adc4:	4649      	mov	r1, r9
 800adc6:	4640      	mov	r0, r8
 800adc8:	47d0      	blx	sl
 800adca:	3001      	adds	r0, #1
 800adcc:	d0ad      	beq.n	800ad2a <_printf_i+0x15a>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	079b      	lsls	r3, r3, #30
 800add2:	d413      	bmi.n	800adfc <_printf_i+0x22c>
 800add4:	68e0      	ldr	r0, [r4, #12]
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	4298      	cmp	r0, r3
 800adda:	bfb8      	it	lt
 800addc:	4618      	movlt	r0, r3
 800adde:	e7a6      	b.n	800ad2e <_printf_i+0x15e>
 800ade0:	2301      	movs	r3, #1
 800ade2:	4632      	mov	r2, r6
 800ade4:	4649      	mov	r1, r9
 800ade6:	4640      	mov	r0, r8
 800ade8:	47d0      	blx	sl
 800adea:	3001      	adds	r0, #1
 800adec:	d09d      	beq.n	800ad2a <_printf_i+0x15a>
 800adee:	3501      	adds	r5, #1
 800adf0:	68e3      	ldr	r3, [r4, #12]
 800adf2:	9903      	ldr	r1, [sp, #12]
 800adf4:	1a5b      	subs	r3, r3, r1
 800adf6:	42ab      	cmp	r3, r5
 800adf8:	dcf2      	bgt.n	800ade0 <_printf_i+0x210>
 800adfa:	e7eb      	b.n	800add4 <_printf_i+0x204>
 800adfc:	2500      	movs	r5, #0
 800adfe:	f104 0619 	add.w	r6, r4, #25
 800ae02:	e7f5      	b.n	800adf0 <_printf_i+0x220>
 800ae04:	0800cf5e 	.word	0x0800cf5e
 800ae08:	0800cf6f 	.word	0x0800cf6f

0800ae0c <std>:
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	4604      	mov	r4, r0
 800ae12:	e9c0 3300 	strd	r3, r3, [r0]
 800ae16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae1a:	6083      	str	r3, [r0, #8]
 800ae1c:	8181      	strh	r1, [r0, #12]
 800ae1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae20:	81c2      	strh	r2, [r0, #14]
 800ae22:	6183      	str	r3, [r0, #24]
 800ae24:	4619      	mov	r1, r3
 800ae26:	2208      	movs	r2, #8
 800ae28:	305c      	adds	r0, #92	@ 0x5c
 800ae2a:	f000 f921 	bl	800b070 <memset>
 800ae2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae64 <std+0x58>)
 800ae30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae32:	4b0d      	ldr	r3, [pc, #52]	@ (800ae68 <std+0x5c>)
 800ae34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae36:	4b0d      	ldr	r3, [pc, #52]	@ (800ae6c <std+0x60>)
 800ae38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae70 <std+0x64>)
 800ae3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae74 <std+0x68>)
 800ae40:	6224      	str	r4, [r4, #32]
 800ae42:	429c      	cmp	r4, r3
 800ae44:	d006      	beq.n	800ae54 <std+0x48>
 800ae46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae4a:	4294      	cmp	r4, r2
 800ae4c:	d002      	beq.n	800ae54 <std+0x48>
 800ae4e:	33d0      	adds	r3, #208	@ 0xd0
 800ae50:	429c      	cmp	r4, r3
 800ae52:	d105      	bne.n	800ae60 <std+0x54>
 800ae54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae5c:	f000 b93a 	b.w	800b0d4 <__retarget_lock_init_recursive>
 800ae60:	bd10      	pop	{r4, pc}
 800ae62:	bf00      	nop
 800ae64:	0800c8f1 	.word	0x0800c8f1
 800ae68:	0800c913 	.word	0x0800c913
 800ae6c:	0800c94b 	.word	0x0800c94b
 800ae70:	0800c96f 	.word	0x0800c96f
 800ae74:	24000ba4 	.word	0x24000ba4

0800ae78 <stdio_exit_handler>:
 800ae78:	4a02      	ldr	r2, [pc, #8]	@ (800ae84 <stdio_exit_handler+0xc>)
 800ae7a:	4903      	ldr	r1, [pc, #12]	@ (800ae88 <stdio_exit_handler+0x10>)
 800ae7c:	4803      	ldr	r0, [pc, #12]	@ (800ae8c <stdio_exit_handler+0x14>)
 800ae7e:	f000 b869 	b.w	800af54 <_fwalk_sglue>
 800ae82:	bf00      	nop
 800ae84:	24000010 	.word	0x24000010
 800ae88:	0800c195 	.word	0x0800c195
 800ae8c:	24000020 	.word	0x24000020

0800ae90 <cleanup_stdio>:
 800ae90:	6841      	ldr	r1, [r0, #4]
 800ae92:	4b0c      	ldr	r3, [pc, #48]	@ (800aec4 <cleanup_stdio+0x34>)
 800ae94:	4299      	cmp	r1, r3
 800ae96:	b510      	push	{r4, lr}
 800ae98:	4604      	mov	r4, r0
 800ae9a:	d001      	beq.n	800aea0 <cleanup_stdio+0x10>
 800ae9c:	f001 f97a 	bl	800c194 <_fflush_r>
 800aea0:	68a1      	ldr	r1, [r4, #8]
 800aea2:	4b09      	ldr	r3, [pc, #36]	@ (800aec8 <cleanup_stdio+0x38>)
 800aea4:	4299      	cmp	r1, r3
 800aea6:	d002      	beq.n	800aeae <cleanup_stdio+0x1e>
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f001 f973 	bl	800c194 <_fflush_r>
 800aeae:	68e1      	ldr	r1, [r4, #12]
 800aeb0:	4b06      	ldr	r3, [pc, #24]	@ (800aecc <cleanup_stdio+0x3c>)
 800aeb2:	4299      	cmp	r1, r3
 800aeb4:	d004      	beq.n	800aec0 <cleanup_stdio+0x30>
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aebc:	f001 b96a 	b.w	800c194 <_fflush_r>
 800aec0:	bd10      	pop	{r4, pc}
 800aec2:	bf00      	nop
 800aec4:	24000ba4 	.word	0x24000ba4
 800aec8:	24000c0c 	.word	0x24000c0c
 800aecc:	24000c74 	.word	0x24000c74

0800aed0 <global_stdio_init.part.0>:
 800aed0:	b510      	push	{r4, lr}
 800aed2:	4b0b      	ldr	r3, [pc, #44]	@ (800af00 <global_stdio_init.part.0+0x30>)
 800aed4:	4c0b      	ldr	r4, [pc, #44]	@ (800af04 <global_stdio_init.part.0+0x34>)
 800aed6:	4a0c      	ldr	r2, [pc, #48]	@ (800af08 <global_stdio_init.part.0+0x38>)
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	4620      	mov	r0, r4
 800aedc:	2200      	movs	r2, #0
 800aede:	2104      	movs	r1, #4
 800aee0:	f7ff ff94 	bl	800ae0c <std>
 800aee4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aee8:	2201      	movs	r2, #1
 800aeea:	2109      	movs	r1, #9
 800aeec:	f7ff ff8e 	bl	800ae0c <std>
 800aef0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aef4:	2202      	movs	r2, #2
 800aef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aefa:	2112      	movs	r1, #18
 800aefc:	f7ff bf86 	b.w	800ae0c <std>
 800af00:	24000cdc 	.word	0x24000cdc
 800af04:	24000ba4 	.word	0x24000ba4
 800af08:	0800ae79 	.word	0x0800ae79

0800af0c <__sfp_lock_acquire>:
 800af0c:	4801      	ldr	r0, [pc, #4]	@ (800af14 <__sfp_lock_acquire+0x8>)
 800af0e:	f000 b8e2 	b.w	800b0d6 <__retarget_lock_acquire_recursive>
 800af12:	bf00      	nop
 800af14:	24000ce1 	.word	0x24000ce1

0800af18 <__sfp_lock_release>:
 800af18:	4801      	ldr	r0, [pc, #4]	@ (800af20 <__sfp_lock_release+0x8>)
 800af1a:	f000 b8dd 	b.w	800b0d8 <__retarget_lock_release_recursive>
 800af1e:	bf00      	nop
 800af20:	24000ce1 	.word	0x24000ce1

0800af24 <__sinit>:
 800af24:	b510      	push	{r4, lr}
 800af26:	4604      	mov	r4, r0
 800af28:	f7ff fff0 	bl	800af0c <__sfp_lock_acquire>
 800af2c:	6a23      	ldr	r3, [r4, #32]
 800af2e:	b11b      	cbz	r3, 800af38 <__sinit+0x14>
 800af30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af34:	f7ff bff0 	b.w	800af18 <__sfp_lock_release>
 800af38:	4b04      	ldr	r3, [pc, #16]	@ (800af4c <__sinit+0x28>)
 800af3a:	6223      	str	r3, [r4, #32]
 800af3c:	4b04      	ldr	r3, [pc, #16]	@ (800af50 <__sinit+0x2c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1f5      	bne.n	800af30 <__sinit+0xc>
 800af44:	f7ff ffc4 	bl	800aed0 <global_stdio_init.part.0>
 800af48:	e7f2      	b.n	800af30 <__sinit+0xc>
 800af4a:	bf00      	nop
 800af4c:	0800ae91 	.word	0x0800ae91
 800af50:	24000cdc 	.word	0x24000cdc

0800af54 <_fwalk_sglue>:
 800af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af58:	4607      	mov	r7, r0
 800af5a:	4688      	mov	r8, r1
 800af5c:	4614      	mov	r4, r2
 800af5e:	2600      	movs	r6, #0
 800af60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af64:	f1b9 0901 	subs.w	r9, r9, #1
 800af68:	d505      	bpl.n	800af76 <_fwalk_sglue+0x22>
 800af6a:	6824      	ldr	r4, [r4, #0]
 800af6c:	2c00      	cmp	r4, #0
 800af6e:	d1f7      	bne.n	800af60 <_fwalk_sglue+0xc>
 800af70:	4630      	mov	r0, r6
 800af72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af76:	89ab      	ldrh	r3, [r5, #12]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d907      	bls.n	800af8c <_fwalk_sglue+0x38>
 800af7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af80:	3301      	adds	r3, #1
 800af82:	d003      	beq.n	800af8c <_fwalk_sglue+0x38>
 800af84:	4629      	mov	r1, r5
 800af86:	4638      	mov	r0, r7
 800af88:	47c0      	blx	r8
 800af8a:	4306      	orrs	r6, r0
 800af8c:	3568      	adds	r5, #104	@ 0x68
 800af8e:	e7e9      	b.n	800af64 <_fwalk_sglue+0x10>

0800af90 <iprintf>:
 800af90:	b40f      	push	{r0, r1, r2, r3}
 800af92:	b507      	push	{r0, r1, r2, lr}
 800af94:	4906      	ldr	r1, [pc, #24]	@ (800afb0 <iprintf+0x20>)
 800af96:	ab04      	add	r3, sp, #16
 800af98:	6808      	ldr	r0, [r1, #0]
 800af9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af9e:	6881      	ldr	r1, [r0, #8]
 800afa0:	9301      	str	r3, [sp, #4]
 800afa2:	f000 feb1 	bl	800bd08 <_vfiprintf_r>
 800afa6:	b003      	add	sp, #12
 800afa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afac:	b004      	add	sp, #16
 800afae:	4770      	bx	lr
 800afb0:	2400001c 	.word	0x2400001c

0800afb4 <_puts_r>:
 800afb4:	6a03      	ldr	r3, [r0, #32]
 800afb6:	b570      	push	{r4, r5, r6, lr}
 800afb8:	6884      	ldr	r4, [r0, #8]
 800afba:	4605      	mov	r5, r0
 800afbc:	460e      	mov	r6, r1
 800afbe:	b90b      	cbnz	r3, 800afc4 <_puts_r+0x10>
 800afc0:	f7ff ffb0 	bl	800af24 <__sinit>
 800afc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afc6:	07db      	lsls	r3, r3, #31
 800afc8:	d405      	bmi.n	800afd6 <_puts_r+0x22>
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	0598      	lsls	r0, r3, #22
 800afce:	d402      	bmi.n	800afd6 <_puts_r+0x22>
 800afd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afd2:	f000 f880 	bl	800b0d6 <__retarget_lock_acquire_recursive>
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	0719      	lsls	r1, r3, #28
 800afda:	d502      	bpl.n	800afe2 <_puts_r+0x2e>
 800afdc:	6923      	ldr	r3, [r4, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d135      	bne.n	800b04e <_puts_r+0x9a>
 800afe2:	4621      	mov	r1, r4
 800afe4:	4628      	mov	r0, r5
 800afe6:	f001 fd05 	bl	800c9f4 <__swsetup_r>
 800afea:	b380      	cbz	r0, 800b04e <_puts_r+0x9a>
 800afec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800aff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aff2:	07da      	lsls	r2, r3, #31
 800aff4:	d405      	bmi.n	800b002 <_puts_r+0x4e>
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	059b      	lsls	r3, r3, #22
 800affa:	d402      	bmi.n	800b002 <_puts_r+0x4e>
 800affc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800affe:	f000 f86b 	bl	800b0d8 <__retarget_lock_release_recursive>
 800b002:	4628      	mov	r0, r5
 800b004:	bd70      	pop	{r4, r5, r6, pc}
 800b006:	2b00      	cmp	r3, #0
 800b008:	da04      	bge.n	800b014 <_puts_r+0x60>
 800b00a:	69a2      	ldr	r2, [r4, #24]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	dc17      	bgt.n	800b040 <_puts_r+0x8c>
 800b010:	290a      	cmp	r1, #10
 800b012:	d015      	beq.n	800b040 <_puts_r+0x8c>
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	6022      	str	r2, [r4, #0]
 800b01a:	7019      	strb	r1, [r3, #0]
 800b01c:	68a3      	ldr	r3, [r4, #8]
 800b01e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b022:	3b01      	subs	r3, #1
 800b024:	60a3      	str	r3, [r4, #8]
 800b026:	2900      	cmp	r1, #0
 800b028:	d1ed      	bne.n	800b006 <_puts_r+0x52>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	da11      	bge.n	800b052 <_puts_r+0x9e>
 800b02e:	4622      	mov	r2, r4
 800b030:	210a      	movs	r1, #10
 800b032:	4628      	mov	r0, r5
 800b034:	f001 fc9f 	bl	800c976 <__swbuf_r>
 800b038:	3001      	adds	r0, #1
 800b03a:	d0d7      	beq.n	800afec <_puts_r+0x38>
 800b03c:	250a      	movs	r5, #10
 800b03e:	e7d7      	b.n	800aff0 <_puts_r+0x3c>
 800b040:	4622      	mov	r2, r4
 800b042:	4628      	mov	r0, r5
 800b044:	f001 fc97 	bl	800c976 <__swbuf_r>
 800b048:	3001      	adds	r0, #1
 800b04a:	d1e7      	bne.n	800b01c <_puts_r+0x68>
 800b04c:	e7ce      	b.n	800afec <_puts_r+0x38>
 800b04e:	3e01      	subs	r6, #1
 800b050:	e7e4      	b.n	800b01c <_puts_r+0x68>
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	1c5a      	adds	r2, r3, #1
 800b056:	6022      	str	r2, [r4, #0]
 800b058:	220a      	movs	r2, #10
 800b05a:	701a      	strb	r2, [r3, #0]
 800b05c:	e7ee      	b.n	800b03c <_puts_r+0x88>
	...

0800b060 <puts>:
 800b060:	4b02      	ldr	r3, [pc, #8]	@ (800b06c <puts+0xc>)
 800b062:	4601      	mov	r1, r0
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	f7ff bfa5 	b.w	800afb4 <_puts_r>
 800b06a:	bf00      	nop
 800b06c:	2400001c 	.word	0x2400001c

0800b070 <memset>:
 800b070:	4402      	add	r2, r0
 800b072:	4603      	mov	r3, r0
 800b074:	4293      	cmp	r3, r2
 800b076:	d100      	bne.n	800b07a <memset+0xa>
 800b078:	4770      	bx	lr
 800b07a:	f803 1b01 	strb.w	r1, [r3], #1
 800b07e:	e7f9      	b.n	800b074 <memset+0x4>

0800b080 <__errno>:
 800b080:	4b01      	ldr	r3, [pc, #4]	@ (800b088 <__errno+0x8>)
 800b082:	6818      	ldr	r0, [r3, #0]
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	2400001c 	.word	0x2400001c

0800b08c <__libc_init_array>:
 800b08c:	b570      	push	{r4, r5, r6, lr}
 800b08e:	4d0d      	ldr	r5, [pc, #52]	@ (800b0c4 <__libc_init_array+0x38>)
 800b090:	4c0d      	ldr	r4, [pc, #52]	@ (800b0c8 <__libc_init_array+0x3c>)
 800b092:	1b64      	subs	r4, r4, r5
 800b094:	10a4      	asrs	r4, r4, #2
 800b096:	2600      	movs	r6, #0
 800b098:	42a6      	cmp	r6, r4
 800b09a:	d109      	bne.n	800b0b0 <__libc_init_array+0x24>
 800b09c:	4d0b      	ldr	r5, [pc, #44]	@ (800b0cc <__libc_init_array+0x40>)
 800b09e:	4c0c      	ldr	r4, [pc, #48]	@ (800b0d0 <__libc_init_array+0x44>)
 800b0a0:	f001 fede 	bl	800ce60 <_init>
 800b0a4:	1b64      	subs	r4, r4, r5
 800b0a6:	10a4      	asrs	r4, r4, #2
 800b0a8:	2600      	movs	r6, #0
 800b0aa:	42a6      	cmp	r6, r4
 800b0ac:	d105      	bne.n	800b0ba <__libc_init_array+0x2e>
 800b0ae:	bd70      	pop	{r4, r5, r6, pc}
 800b0b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0b4:	4798      	blx	r3
 800b0b6:	3601      	adds	r6, #1
 800b0b8:	e7ee      	b.n	800b098 <__libc_init_array+0xc>
 800b0ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0be:	4798      	blx	r3
 800b0c0:	3601      	adds	r6, #1
 800b0c2:	e7f2      	b.n	800b0aa <__libc_init_array+0x1e>
 800b0c4:	0800d3ec 	.word	0x0800d3ec
 800b0c8:	0800d3ec 	.word	0x0800d3ec
 800b0cc:	0800d3ec 	.word	0x0800d3ec
 800b0d0:	0800d3f0 	.word	0x0800d3f0

0800b0d4 <__retarget_lock_init_recursive>:
 800b0d4:	4770      	bx	lr

0800b0d6 <__retarget_lock_acquire_recursive>:
 800b0d6:	4770      	bx	lr

0800b0d8 <__retarget_lock_release_recursive>:
 800b0d8:	4770      	bx	lr
	...

0800b0dc <_localeconv_r>:
 800b0dc:	4800      	ldr	r0, [pc, #0]	@ (800b0e0 <_localeconv_r+0x4>)
 800b0de:	4770      	bx	lr
 800b0e0:	2400015c 	.word	0x2400015c

0800b0e4 <quorem>:
 800b0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	6903      	ldr	r3, [r0, #16]
 800b0ea:	690c      	ldr	r4, [r1, #16]
 800b0ec:	42a3      	cmp	r3, r4
 800b0ee:	4607      	mov	r7, r0
 800b0f0:	db7e      	blt.n	800b1f0 <quorem+0x10c>
 800b0f2:	3c01      	subs	r4, #1
 800b0f4:	f101 0814 	add.w	r8, r1, #20
 800b0f8:	00a3      	lsls	r3, r4, #2
 800b0fa:	f100 0514 	add.w	r5, r0, #20
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b10a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b10e:	3301      	adds	r3, #1
 800b110:	429a      	cmp	r2, r3
 800b112:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b116:	fbb2 f6f3 	udiv	r6, r2, r3
 800b11a:	d32e      	bcc.n	800b17a <quorem+0x96>
 800b11c:	f04f 0a00 	mov.w	sl, #0
 800b120:	46c4      	mov	ip, r8
 800b122:	46ae      	mov	lr, r5
 800b124:	46d3      	mov	fp, sl
 800b126:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b12a:	b298      	uxth	r0, r3
 800b12c:	fb06 a000 	mla	r0, r6, r0, sl
 800b130:	0c02      	lsrs	r2, r0, #16
 800b132:	0c1b      	lsrs	r3, r3, #16
 800b134:	fb06 2303 	mla	r3, r6, r3, r2
 800b138:	f8de 2000 	ldr.w	r2, [lr]
 800b13c:	b280      	uxth	r0, r0
 800b13e:	b292      	uxth	r2, r2
 800b140:	1a12      	subs	r2, r2, r0
 800b142:	445a      	add	r2, fp
 800b144:	f8de 0000 	ldr.w	r0, [lr]
 800b148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b152:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b156:	b292      	uxth	r2, r2
 800b158:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b15c:	45e1      	cmp	r9, ip
 800b15e:	f84e 2b04 	str.w	r2, [lr], #4
 800b162:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b166:	d2de      	bcs.n	800b126 <quorem+0x42>
 800b168:	9b00      	ldr	r3, [sp, #0]
 800b16a:	58eb      	ldr	r3, [r5, r3]
 800b16c:	b92b      	cbnz	r3, 800b17a <quorem+0x96>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	3b04      	subs	r3, #4
 800b172:	429d      	cmp	r5, r3
 800b174:	461a      	mov	r2, r3
 800b176:	d32f      	bcc.n	800b1d8 <quorem+0xf4>
 800b178:	613c      	str	r4, [r7, #16]
 800b17a:	4638      	mov	r0, r7
 800b17c:	f001 fab0 	bl	800c6e0 <__mcmp>
 800b180:	2800      	cmp	r0, #0
 800b182:	db25      	blt.n	800b1d0 <quorem+0xec>
 800b184:	4629      	mov	r1, r5
 800b186:	2000      	movs	r0, #0
 800b188:	f858 2b04 	ldr.w	r2, [r8], #4
 800b18c:	f8d1 c000 	ldr.w	ip, [r1]
 800b190:	fa1f fe82 	uxth.w	lr, r2
 800b194:	fa1f f38c 	uxth.w	r3, ip
 800b198:	eba3 030e 	sub.w	r3, r3, lr
 800b19c:	4403      	add	r3, r0
 800b19e:	0c12      	lsrs	r2, r2, #16
 800b1a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b1a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1ae:	45c1      	cmp	r9, r8
 800b1b0:	f841 3b04 	str.w	r3, [r1], #4
 800b1b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1b8:	d2e6      	bcs.n	800b188 <quorem+0xa4>
 800b1ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1c2:	b922      	cbnz	r2, 800b1ce <quorem+0xea>
 800b1c4:	3b04      	subs	r3, #4
 800b1c6:	429d      	cmp	r5, r3
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	d30b      	bcc.n	800b1e4 <quorem+0x100>
 800b1cc:	613c      	str	r4, [r7, #16]
 800b1ce:	3601      	adds	r6, #1
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	b003      	add	sp, #12
 800b1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d8:	6812      	ldr	r2, [r2, #0]
 800b1da:	3b04      	subs	r3, #4
 800b1dc:	2a00      	cmp	r2, #0
 800b1de:	d1cb      	bne.n	800b178 <quorem+0x94>
 800b1e0:	3c01      	subs	r4, #1
 800b1e2:	e7c6      	b.n	800b172 <quorem+0x8e>
 800b1e4:	6812      	ldr	r2, [r2, #0]
 800b1e6:	3b04      	subs	r3, #4
 800b1e8:	2a00      	cmp	r2, #0
 800b1ea:	d1ef      	bne.n	800b1cc <quorem+0xe8>
 800b1ec:	3c01      	subs	r4, #1
 800b1ee:	e7ea      	b.n	800b1c6 <quorem+0xe2>
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	e7ee      	b.n	800b1d2 <quorem+0xee>
 800b1f4:	0000      	movs	r0, r0
	...

0800b1f8 <_dtoa_r>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	ed2d 8b02 	vpush	{d8}
 800b200:	69c7      	ldr	r7, [r0, #28]
 800b202:	b091      	sub	sp, #68	@ 0x44
 800b204:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b208:	ec55 4b10 	vmov	r4, r5, d0
 800b20c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b20e:	9107      	str	r1, [sp, #28]
 800b210:	4681      	mov	r9, r0
 800b212:	9209      	str	r2, [sp, #36]	@ 0x24
 800b214:	930d      	str	r3, [sp, #52]	@ 0x34
 800b216:	b97f      	cbnz	r7, 800b238 <_dtoa_r+0x40>
 800b218:	2010      	movs	r0, #16
 800b21a:	f000 fe8d 	bl	800bf38 <malloc>
 800b21e:	4602      	mov	r2, r0
 800b220:	f8c9 001c 	str.w	r0, [r9, #28]
 800b224:	b920      	cbnz	r0, 800b230 <_dtoa_r+0x38>
 800b226:	4ba0      	ldr	r3, [pc, #640]	@ (800b4a8 <_dtoa_r+0x2b0>)
 800b228:	21ef      	movs	r1, #239	@ 0xef
 800b22a:	48a0      	ldr	r0, [pc, #640]	@ (800b4ac <_dtoa_r+0x2b4>)
 800b22c:	f001 fd20 	bl	800cc70 <__assert_func>
 800b230:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b234:	6007      	str	r7, [r0, #0]
 800b236:	60c7      	str	r7, [r0, #12]
 800b238:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b23c:	6819      	ldr	r1, [r3, #0]
 800b23e:	b159      	cbz	r1, 800b258 <_dtoa_r+0x60>
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	604a      	str	r2, [r1, #4]
 800b244:	2301      	movs	r3, #1
 800b246:	4093      	lsls	r3, r2
 800b248:	608b      	str	r3, [r1, #8]
 800b24a:	4648      	mov	r0, r9
 800b24c:	f001 f816 	bl	800c27c <_Bfree>
 800b250:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b254:	2200      	movs	r2, #0
 800b256:	601a      	str	r2, [r3, #0]
 800b258:	1e2b      	subs	r3, r5, #0
 800b25a:	bfbb      	ittet	lt
 800b25c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b260:	9303      	strlt	r3, [sp, #12]
 800b262:	2300      	movge	r3, #0
 800b264:	2201      	movlt	r2, #1
 800b266:	bfac      	ite	ge
 800b268:	6033      	strge	r3, [r6, #0]
 800b26a:	6032      	strlt	r2, [r6, #0]
 800b26c:	4b90      	ldr	r3, [pc, #576]	@ (800b4b0 <_dtoa_r+0x2b8>)
 800b26e:	9e03      	ldr	r6, [sp, #12]
 800b270:	43b3      	bics	r3, r6
 800b272:	d110      	bne.n	800b296 <_dtoa_r+0x9e>
 800b274:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b276:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b280:	4323      	orrs	r3, r4
 800b282:	f000 84e6 	beq.w	800bc52 <_dtoa_r+0xa5a>
 800b286:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b288:	4f8a      	ldr	r7, [pc, #552]	@ (800b4b4 <_dtoa_r+0x2bc>)
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 84e8 	beq.w	800bc60 <_dtoa_r+0xa68>
 800b290:	1cfb      	adds	r3, r7, #3
 800b292:	f000 bce3 	b.w	800bc5c <_dtoa_r+0xa64>
 800b296:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b29a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a2:	d10a      	bne.n	800b2ba <_dtoa_r+0xc2>
 800b2a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	6013      	str	r3, [r2, #0]
 800b2aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b2ac:	b113      	cbz	r3, 800b2b4 <_dtoa_r+0xbc>
 800b2ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b2b0:	4b81      	ldr	r3, [pc, #516]	@ (800b4b8 <_dtoa_r+0x2c0>)
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	4f81      	ldr	r7, [pc, #516]	@ (800b4bc <_dtoa_r+0x2c4>)
 800b2b6:	f000 bcd3 	b.w	800bc60 <_dtoa_r+0xa68>
 800b2ba:	aa0e      	add	r2, sp, #56	@ 0x38
 800b2bc:	a90f      	add	r1, sp, #60	@ 0x3c
 800b2be:	4648      	mov	r0, r9
 800b2c0:	eeb0 0b48 	vmov.f64	d0, d8
 800b2c4:	f001 fabc 	bl	800c840 <__d2b>
 800b2c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b2cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2ce:	9001      	str	r0, [sp, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d045      	beq.n	800b360 <_dtoa_r+0x168>
 800b2d4:	eeb0 7b48 	vmov.f64	d7, d8
 800b2d8:	ee18 1a90 	vmov	r1, s17
 800b2dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b2e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b2e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b2e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b2ec:	2500      	movs	r5, #0
 800b2ee:	ee07 1a90 	vmov	s15, r1
 800b2f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b2f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b490 <_dtoa_r+0x298>
 800b2fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b2fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b498 <_dtoa_r+0x2a0>
 800b302:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b306:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b4a0 <_dtoa_r+0x2a8>
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b312:	eeb0 7b46 	vmov.f64	d7, d6
 800b316:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b31a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b31e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b326:	ee16 8a90 	vmov	r8, s13
 800b32a:	d508      	bpl.n	800b33e <_dtoa_r+0x146>
 800b32c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b330:	eeb4 6b47 	vcmp.f64	d6, d7
 800b334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b338:	bf18      	it	ne
 800b33a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800b33e:	f1b8 0f16 	cmp.w	r8, #22
 800b342:	d82b      	bhi.n	800b39c <_dtoa_r+0x1a4>
 800b344:	495e      	ldr	r1, [pc, #376]	@ (800b4c0 <_dtoa_r+0x2c8>)
 800b346:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b34a:	ed91 7b00 	vldr	d7, [r1]
 800b34e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b356:	d501      	bpl.n	800b35c <_dtoa_r+0x164>
 800b358:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b35c:	2100      	movs	r1, #0
 800b35e:	e01e      	b.n	800b39e <_dtoa_r+0x1a6>
 800b360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b362:	4413      	add	r3, r2
 800b364:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b368:	2920      	cmp	r1, #32
 800b36a:	bfc1      	itttt	gt
 800b36c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b370:	408e      	lslgt	r6, r1
 800b372:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b376:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b37a:	bfd6      	itet	le
 800b37c:	f1c1 0120 	rsble	r1, r1, #32
 800b380:	4331      	orrgt	r1, r6
 800b382:	fa04 f101 	lslle.w	r1, r4, r1
 800b386:	ee07 1a90 	vmov	s15, r1
 800b38a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b38e:	3b01      	subs	r3, #1
 800b390:	ee17 1a90 	vmov	r1, s15
 800b394:	2501      	movs	r5, #1
 800b396:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b39a:	e7a8      	b.n	800b2ee <_dtoa_r+0xf6>
 800b39c:	2101      	movs	r1, #1
 800b39e:	1ad2      	subs	r2, r2, r3
 800b3a0:	1e53      	subs	r3, r2, #1
 800b3a2:	9306      	str	r3, [sp, #24]
 800b3a4:	bf45      	ittet	mi
 800b3a6:	f1c2 0301 	rsbmi	r3, r2, #1
 800b3aa:	9304      	strmi	r3, [sp, #16]
 800b3ac:	2300      	movpl	r3, #0
 800b3ae:	2300      	movmi	r3, #0
 800b3b0:	bf4c      	ite	mi
 800b3b2:	9306      	strmi	r3, [sp, #24]
 800b3b4:	9304      	strpl	r3, [sp, #16]
 800b3b6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ba:	910c      	str	r1, [sp, #48]	@ 0x30
 800b3bc:	db18      	blt.n	800b3f0 <_dtoa_r+0x1f8>
 800b3be:	9b06      	ldr	r3, [sp, #24]
 800b3c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b3c4:	4443      	add	r3, r8
 800b3c6:	9306      	str	r3, [sp, #24]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	9a07      	ldr	r2, [sp, #28]
 800b3cc:	2a09      	cmp	r2, #9
 800b3ce:	d845      	bhi.n	800b45c <_dtoa_r+0x264>
 800b3d0:	2a05      	cmp	r2, #5
 800b3d2:	bfc4      	itt	gt
 800b3d4:	3a04      	subgt	r2, #4
 800b3d6:	9207      	strgt	r2, [sp, #28]
 800b3d8:	9a07      	ldr	r2, [sp, #28]
 800b3da:	f1a2 0202 	sub.w	r2, r2, #2
 800b3de:	bfcc      	ite	gt
 800b3e0:	2400      	movgt	r4, #0
 800b3e2:	2401      	movle	r4, #1
 800b3e4:	2a03      	cmp	r2, #3
 800b3e6:	d844      	bhi.n	800b472 <_dtoa_r+0x27a>
 800b3e8:	e8df f002 	tbb	[pc, r2]
 800b3ec:	0b173634 	.word	0x0b173634
 800b3f0:	9b04      	ldr	r3, [sp, #16]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	eba3 0308 	sub.w	r3, r3, r8
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	920a      	str	r2, [sp, #40]	@ 0x28
 800b3fc:	f1c8 0300 	rsb	r3, r8, #0
 800b400:	e7e3      	b.n	800b3ca <_dtoa_r+0x1d2>
 800b402:	2201      	movs	r2, #1
 800b404:	9208      	str	r2, [sp, #32]
 800b406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b408:	eb08 0b02 	add.w	fp, r8, r2
 800b40c:	f10b 0a01 	add.w	sl, fp, #1
 800b410:	4652      	mov	r2, sl
 800b412:	2a01      	cmp	r2, #1
 800b414:	bfb8      	it	lt
 800b416:	2201      	movlt	r2, #1
 800b418:	e006      	b.n	800b428 <_dtoa_r+0x230>
 800b41a:	2201      	movs	r2, #1
 800b41c:	9208      	str	r2, [sp, #32]
 800b41e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b420:	2a00      	cmp	r2, #0
 800b422:	dd29      	ble.n	800b478 <_dtoa_r+0x280>
 800b424:	4693      	mov	fp, r2
 800b426:	4692      	mov	sl, r2
 800b428:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b42c:	2100      	movs	r1, #0
 800b42e:	2004      	movs	r0, #4
 800b430:	f100 0614 	add.w	r6, r0, #20
 800b434:	4296      	cmp	r6, r2
 800b436:	d926      	bls.n	800b486 <_dtoa_r+0x28e>
 800b438:	6079      	str	r1, [r7, #4]
 800b43a:	4648      	mov	r0, r9
 800b43c:	9305      	str	r3, [sp, #20]
 800b43e:	f000 fedd 	bl	800c1fc <_Balloc>
 800b442:	9b05      	ldr	r3, [sp, #20]
 800b444:	4607      	mov	r7, r0
 800b446:	2800      	cmp	r0, #0
 800b448:	d13e      	bne.n	800b4c8 <_dtoa_r+0x2d0>
 800b44a:	4b1e      	ldr	r3, [pc, #120]	@ (800b4c4 <_dtoa_r+0x2cc>)
 800b44c:	4602      	mov	r2, r0
 800b44e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b452:	e6ea      	b.n	800b22a <_dtoa_r+0x32>
 800b454:	2200      	movs	r2, #0
 800b456:	e7e1      	b.n	800b41c <_dtoa_r+0x224>
 800b458:	2200      	movs	r2, #0
 800b45a:	e7d3      	b.n	800b404 <_dtoa_r+0x20c>
 800b45c:	2401      	movs	r4, #1
 800b45e:	2200      	movs	r2, #0
 800b460:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b464:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b468:	2100      	movs	r1, #0
 800b46a:	46da      	mov	sl, fp
 800b46c:	2212      	movs	r2, #18
 800b46e:	9109      	str	r1, [sp, #36]	@ 0x24
 800b470:	e7da      	b.n	800b428 <_dtoa_r+0x230>
 800b472:	2201      	movs	r2, #1
 800b474:	9208      	str	r2, [sp, #32]
 800b476:	e7f5      	b.n	800b464 <_dtoa_r+0x26c>
 800b478:	f04f 0b01 	mov.w	fp, #1
 800b47c:	46da      	mov	sl, fp
 800b47e:	465a      	mov	r2, fp
 800b480:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b484:	e7d0      	b.n	800b428 <_dtoa_r+0x230>
 800b486:	3101      	adds	r1, #1
 800b488:	0040      	lsls	r0, r0, #1
 800b48a:	e7d1      	b.n	800b430 <_dtoa_r+0x238>
 800b48c:	f3af 8000 	nop.w
 800b490:	636f4361 	.word	0x636f4361
 800b494:	3fd287a7 	.word	0x3fd287a7
 800b498:	8b60c8b3 	.word	0x8b60c8b3
 800b49c:	3fc68a28 	.word	0x3fc68a28
 800b4a0:	509f79fb 	.word	0x509f79fb
 800b4a4:	3fd34413 	.word	0x3fd34413
 800b4a8:	0800cf8d 	.word	0x0800cf8d
 800b4ac:	0800cfa4 	.word	0x0800cfa4
 800b4b0:	7ff00000 	.word	0x7ff00000
 800b4b4:	0800cf89 	.word	0x0800cf89
 800b4b8:	0800cf5d 	.word	0x0800cf5d
 800b4bc:	0800cf5c 	.word	0x0800cf5c
 800b4c0:	0800d218 	.word	0x0800d218
 800b4c4:	0800cffc 	.word	0x0800cffc
 800b4c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b4cc:	f1ba 0f0e 	cmp.w	sl, #14
 800b4d0:	6010      	str	r0, [r2, #0]
 800b4d2:	d86e      	bhi.n	800b5b2 <_dtoa_r+0x3ba>
 800b4d4:	2c00      	cmp	r4, #0
 800b4d6:	d06c      	beq.n	800b5b2 <_dtoa_r+0x3ba>
 800b4d8:	f1b8 0f00 	cmp.w	r8, #0
 800b4dc:	f340 80b4 	ble.w	800b648 <_dtoa_r+0x450>
 800b4e0:	4ac8      	ldr	r2, [pc, #800]	@ (800b804 <_dtoa_r+0x60c>)
 800b4e2:	f008 010f 	and.w	r1, r8, #15
 800b4e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b4ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b4ee:	ed92 7b00 	vldr	d7, [r2]
 800b4f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b4f6:	f000 809b 	beq.w	800b630 <_dtoa_r+0x438>
 800b4fa:	4ac3      	ldr	r2, [pc, #780]	@ (800b808 <_dtoa_r+0x610>)
 800b4fc:	ed92 6b08 	vldr	d6, [r2, #32]
 800b500:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b504:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b508:	f001 010f 	and.w	r1, r1, #15
 800b50c:	2203      	movs	r2, #3
 800b50e:	48be      	ldr	r0, [pc, #760]	@ (800b808 <_dtoa_r+0x610>)
 800b510:	2900      	cmp	r1, #0
 800b512:	f040 808f 	bne.w	800b634 <_dtoa_r+0x43c>
 800b516:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b51a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b51e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b522:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b524:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b528:	2900      	cmp	r1, #0
 800b52a:	f000 80b3 	beq.w	800b694 <_dtoa_r+0x49c>
 800b52e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b532:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b53a:	f140 80ab 	bpl.w	800b694 <_dtoa_r+0x49c>
 800b53e:	f1ba 0f00 	cmp.w	sl, #0
 800b542:	f000 80a7 	beq.w	800b694 <_dtoa_r+0x49c>
 800b546:	f1bb 0f00 	cmp.w	fp, #0
 800b54a:	dd30      	ble.n	800b5ae <_dtoa_r+0x3b6>
 800b54c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b550:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b554:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b558:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800b55c:	9105      	str	r1, [sp, #20]
 800b55e:	3201      	adds	r2, #1
 800b560:	465c      	mov	r4, fp
 800b562:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b566:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b56a:	ee07 2a90 	vmov	s15, r2
 800b56e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b572:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b576:	ee15 2a90 	vmov	r2, s11
 800b57a:	ec51 0b15 	vmov	r0, r1, d5
 800b57e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b582:	2c00      	cmp	r4, #0
 800b584:	f040 808a 	bne.w	800b69c <_dtoa_r+0x4a4>
 800b588:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b58c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b590:	ec41 0b17 	vmov	d7, r0, r1
 800b594:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	f300 826a 	bgt.w	800ba74 <_dtoa_r+0x87c>
 800b5a0:	eeb1 7b47 	vneg.f64	d7, d7
 800b5a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ac:	d423      	bmi.n	800b5f6 <_dtoa_r+0x3fe>
 800b5ae:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b5b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b5b4:	2a00      	cmp	r2, #0
 800b5b6:	f2c0 8129 	blt.w	800b80c <_dtoa_r+0x614>
 800b5ba:	f1b8 0f0e 	cmp.w	r8, #14
 800b5be:	f300 8125 	bgt.w	800b80c <_dtoa_r+0x614>
 800b5c2:	4b90      	ldr	r3, [pc, #576]	@ (800b804 <_dtoa_r+0x60c>)
 800b5c4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b5c8:	ed93 6b00 	vldr	d6, [r3]
 800b5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f280 80c8 	bge.w	800b764 <_dtoa_r+0x56c>
 800b5d4:	f1ba 0f00 	cmp.w	sl, #0
 800b5d8:	f300 80c4 	bgt.w	800b764 <_dtoa_r+0x56c>
 800b5dc:	d10b      	bne.n	800b5f6 <_dtoa_r+0x3fe>
 800b5de:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b5e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b5e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f2:	f2c0 823c 	blt.w	800ba6e <_dtoa_r+0x876>
 800b5f6:	2400      	movs	r4, #0
 800b5f8:	4625      	mov	r5, r4
 800b5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5fc:	43db      	mvns	r3, r3
 800b5fe:	9305      	str	r3, [sp, #20]
 800b600:	463e      	mov	r6, r7
 800b602:	f04f 0800 	mov.w	r8, #0
 800b606:	4621      	mov	r1, r4
 800b608:	4648      	mov	r0, r9
 800b60a:	f000 fe37 	bl	800c27c <_Bfree>
 800b60e:	2d00      	cmp	r5, #0
 800b610:	f000 80a2 	beq.w	800b758 <_dtoa_r+0x560>
 800b614:	f1b8 0f00 	cmp.w	r8, #0
 800b618:	d005      	beq.n	800b626 <_dtoa_r+0x42e>
 800b61a:	45a8      	cmp	r8, r5
 800b61c:	d003      	beq.n	800b626 <_dtoa_r+0x42e>
 800b61e:	4641      	mov	r1, r8
 800b620:	4648      	mov	r0, r9
 800b622:	f000 fe2b 	bl	800c27c <_Bfree>
 800b626:	4629      	mov	r1, r5
 800b628:	4648      	mov	r0, r9
 800b62a:	f000 fe27 	bl	800c27c <_Bfree>
 800b62e:	e093      	b.n	800b758 <_dtoa_r+0x560>
 800b630:	2202      	movs	r2, #2
 800b632:	e76c      	b.n	800b50e <_dtoa_r+0x316>
 800b634:	07cc      	lsls	r4, r1, #31
 800b636:	d504      	bpl.n	800b642 <_dtoa_r+0x44a>
 800b638:	ed90 6b00 	vldr	d6, [r0]
 800b63c:	3201      	adds	r2, #1
 800b63e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b642:	1049      	asrs	r1, r1, #1
 800b644:	3008      	adds	r0, #8
 800b646:	e763      	b.n	800b510 <_dtoa_r+0x318>
 800b648:	d022      	beq.n	800b690 <_dtoa_r+0x498>
 800b64a:	f1c8 0100 	rsb	r1, r8, #0
 800b64e:	4a6d      	ldr	r2, [pc, #436]	@ (800b804 <_dtoa_r+0x60c>)
 800b650:	f001 000f 	and.w	r0, r1, #15
 800b654:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b658:	ed92 7b00 	vldr	d7, [r2]
 800b65c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b660:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b664:	4868      	ldr	r0, [pc, #416]	@ (800b808 <_dtoa_r+0x610>)
 800b666:	1109      	asrs	r1, r1, #4
 800b668:	2400      	movs	r4, #0
 800b66a:	2202      	movs	r2, #2
 800b66c:	b929      	cbnz	r1, 800b67a <_dtoa_r+0x482>
 800b66e:	2c00      	cmp	r4, #0
 800b670:	f43f af57 	beq.w	800b522 <_dtoa_r+0x32a>
 800b674:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b678:	e753      	b.n	800b522 <_dtoa_r+0x32a>
 800b67a:	07ce      	lsls	r6, r1, #31
 800b67c:	d505      	bpl.n	800b68a <_dtoa_r+0x492>
 800b67e:	ed90 6b00 	vldr	d6, [r0]
 800b682:	3201      	adds	r2, #1
 800b684:	2401      	movs	r4, #1
 800b686:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b68a:	1049      	asrs	r1, r1, #1
 800b68c:	3008      	adds	r0, #8
 800b68e:	e7ed      	b.n	800b66c <_dtoa_r+0x474>
 800b690:	2202      	movs	r2, #2
 800b692:	e746      	b.n	800b522 <_dtoa_r+0x32a>
 800b694:	f8cd 8014 	str.w	r8, [sp, #20]
 800b698:	4654      	mov	r4, sl
 800b69a:	e762      	b.n	800b562 <_dtoa_r+0x36a>
 800b69c:	4a59      	ldr	r2, [pc, #356]	@ (800b804 <_dtoa_r+0x60c>)
 800b69e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b6a2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b6a6:	9a08      	ldr	r2, [sp, #32]
 800b6a8:	ec41 0b17 	vmov	d7, r0, r1
 800b6ac:	443c      	add	r4, r7
 800b6ae:	b34a      	cbz	r2, 800b704 <_dtoa_r+0x50c>
 800b6b0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b6b4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b6b8:	463e      	mov	r6, r7
 800b6ba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b6be:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b6c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b6c6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b6ca:	ee14 2a90 	vmov	r2, s9
 800b6ce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b6d2:	3230      	adds	r2, #48	@ 0x30
 800b6d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b6d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e0:	f806 2b01 	strb.w	r2, [r6], #1
 800b6e4:	d438      	bmi.n	800b758 <_dtoa_r+0x560>
 800b6e6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b6ea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f2:	d46e      	bmi.n	800b7d2 <_dtoa_r+0x5da>
 800b6f4:	42a6      	cmp	r6, r4
 800b6f6:	f43f af5a 	beq.w	800b5ae <_dtoa_r+0x3b6>
 800b6fa:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b6fe:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b702:	e7e0      	b.n	800b6c6 <_dtoa_r+0x4ce>
 800b704:	4621      	mov	r1, r4
 800b706:	463e      	mov	r6, r7
 800b708:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b70c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b710:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b714:	ee14 2a90 	vmov	r2, s9
 800b718:	3230      	adds	r2, #48	@ 0x30
 800b71a:	f806 2b01 	strb.w	r2, [r6], #1
 800b71e:	42a6      	cmp	r6, r4
 800b720:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b724:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b728:	d119      	bne.n	800b75e <_dtoa_r+0x566>
 800b72a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b72e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b732:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73a:	dc4a      	bgt.n	800b7d2 <_dtoa_r+0x5da>
 800b73c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b740:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b748:	f57f af31 	bpl.w	800b5ae <_dtoa_r+0x3b6>
 800b74c:	460e      	mov	r6, r1
 800b74e:	3901      	subs	r1, #1
 800b750:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b754:	2b30      	cmp	r3, #48	@ 0x30
 800b756:	d0f9      	beq.n	800b74c <_dtoa_r+0x554>
 800b758:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b75c:	e027      	b.n	800b7ae <_dtoa_r+0x5b6>
 800b75e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b762:	e7d5      	b.n	800b710 <_dtoa_r+0x518>
 800b764:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b768:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b76c:	463e      	mov	r6, r7
 800b76e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b772:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b776:	ee15 3a10 	vmov	r3, s10
 800b77a:	3330      	adds	r3, #48	@ 0x30
 800b77c:	f806 3b01 	strb.w	r3, [r6], #1
 800b780:	1bf3      	subs	r3, r6, r7
 800b782:	459a      	cmp	sl, r3
 800b784:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b788:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b78c:	d132      	bne.n	800b7f4 <_dtoa_r+0x5fc>
 800b78e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b792:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b79a:	dc18      	bgt.n	800b7ce <_dtoa_r+0x5d6>
 800b79c:	eeb4 7b46 	vcmp.f64	d7, d6
 800b7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a4:	d103      	bne.n	800b7ae <_dtoa_r+0x5b6>
 800b7a6:	ee15 3a10 	vmov	r3, s10
 800b7aa:	07db      	lsls	r3, r3, #31
 800b7ac:	d40f      	bmi.n	800b7ce <_dtoa_r+0x5d6>
 800b7ae:	9901      	ldr	r1, [sp, #4]
 800b7b0:	4648      	mov	r0, r9
 800b7b2:	f000 fd63 	bl	800c27c <_Bfree>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b7ba:	7033      	strb	r3, [r6, #0]
 800b7bc:	f108 0301 	add.w	r3, r8, #1
 800b7c0:	6013      	str	r3, [r2, #0]
 800b7c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 824b 	beq.w	800bc60 <_dtoa_r+0xa68>
 800b7ca:	601e      	str	r6, [r3, #0]
 800b7cc:	e248      	b.n	800bc60 <_dtoa_r+0xa68>
 800b7ce:	f8cd 8014 	str.w	r8, [sp, #20]
 800b7d2:	4633      	mov	r3, r6
 800b7d4:	461e      	mov	r6, r3
 800b7d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7da:	2a39      	cmp	r2, #57	@ 0x39
 800b7dc:	d106      	bne.n	800b7ec <_dtoa_r+0x5f4>
 800b7de:	429f      	cmp	r7, r3
 800b7e0:	d1f8      	bne.n	800b7d4 <_dtoa_r+0x5dc>
 800b7e2:	9a05      	ldr	r2, [sp, #20]
 800b7e4:	3201      	adds	r2, #1
 800b7e6:	9205      	str	r2, [sp, #20]
 800b7e8:	2230      	movs	r2, #48	@ 0x30
 800b7ea:	703a      	strb	r2, [r7, #0]
 800b7ec:	781a      	ldrb	r2, [r3, #0]
 800b7ee:	3201      	adds	r2, #1
 800b7f0:	701a      	strb	r2, [r3, #0]
 800b7f2:	e7b1      	b.n	800b758 <_dtoa_r+0x560>
 800b7f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b7f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b800:	d1b5      	bne.n	800b76e <_dtoa_r+0x576>
 800b802:	e7d4      	b.n	800b7ae <_dtoa_r+0x5b6>
 800b804:	0800d218 	.word	0x0800d218
 800b808:	0800d1f0 	.word	0x0800d1f0
 800b80c:	9908      	ldr	r1, [sp, #32]
 800b80e:	2900      	cmp	r1, #0
 800b810:	f000 80e9 	beq.w	800b9e6 <_dtoa_r+0x7ee>
 800b814:	9907      	ldr	r1, [sp, #28]
 800b816:	2901      	cmp	r1, #1
 800b818:	f300 80cb 	bgt.w	800b9b2 <_dtoa_r+0x7ba>
 800b81c:	2d00      	cmp	r5, #0
 800b81e:	f000 80c4 	beq.w	800b9aa <_dtoa_r+0x7b2>
 800b822:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b826:	9e04      	ldr	r6, [sp, #16]
 800b828:	461c      	mov	r4, r3
 800b82a:	9305      	str	r3, [sp, #20]
 800b82c:	9b04      	ldr	r3, [sp, #16]
 800b82e:	4413      	add	r3, r2
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	9b06      	ldr	r3, [sp, #24]
 800b834:	2101      	movs	r1, #1
 800b836:	4413      	add	r3, r2
 800b838:	4648      	mov	r0, r9
 800b83a:	9306      	str	r3, [sp, #24]
 800b83c:	f000 fdd2 	bl	800c3e4 <__i2b>
 800b840:	9b05      	ldr	r3, [sp, #20]
 800b842:	4605      	mov	r5, r0
 800b844:	b166      	cbz	r6, 800b860 <_dtoa_r+0x668>
 800b846:	9a06      	ldr	r2, [sp, #24]
 800b848:	2a00      	cmp	r2, #0
 800b84a:	dd09      	ble.n	800b860 <_dtoa_r+0x668>
 800b84c:	42b2      	cmp	r2, r6
 800b84e:	9904      	ldr	r1, [sp, #16]
 800b850:	bfa8      	it	ge
 800b852:	4632      	movge	r2, r6
 800b854:	1a89      	subs	r1, r1, r2
 800b856:	9104      	str	r1, [sp, #16]
 800b858:	9906      	ldr	r1, [sp, #24]
 800b85a:	1ab6      	subs	r6, r6, r2
 800b85c:	1a8a      	subs	r2, r1, r2
 800b85e:	9206      	str	r2, [sp, #24]
 800b860:	b30b      	cbz	r3, 800b8a6 <_dtoa_r+0x6ae>
 800b862:	9a08      	ldr	r2, [sp, #32]
 800b864:	2a00      	cmp	r2, #0
 800b866:	f000 80c5 	beq.w	800b9f4 <_dtoa_r+0x7fc>
 800b86a:	2c00      	cmp	r4, #0
 800b86c:	f000 80bf 	beq.w	800b9ee <_dtoa_r+0x7f6>
 800b870:	4629      	mov	r1, r5
 800b872:	4622      	mov	r2, r4
 800b874:	4648      	mov	r0, r9
 800b876:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b878:	f000 fe6c 	bl	800c554 <__pow5mult>
 800b87c:	9a01      	ldr	r2, [sp, #4]
 800b87e:	4601      	mov	r1, r0
 800b880:	4605      	mov	r5, r0
 800b882:	4648      	mov	r0, r9
 800b884:	f000 fdc4 	bl	800c410 <__multiply>
 800b888:	9901      	ldr	r1, [sp, #4]
 800b88a:	9005      	str	r0, [sp, #20]
 800b88c:	4648      	mov	r0, r9
 800b88e:	f000 fcf5 	bl	800c27c <_Bfree>
 800b892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b894:	1b1b      	subs	r3, r3, r4
 800b896:	f000 80b0 	beq.w	800b9fa <_dtoa_r+0x802>
 800b89a:	9905      	ldr	r1, [sp, #20]
 800b89c:	461a      	mov	r2, r3
 800b89e:	4648      	mov	r0, r9
 800b8a0:	f000 fe58 	bl	800c554 <__pow5mult>
 800b8a4:	9001      	str	r0, [sp, #4]
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	4648      	mov	r0, r9
 800b8aa:	f000 fd9b 	bl	800c3e4 <__i2b>
 800b8ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 81da 	beq.w	800bc6c <_dtoa_r+0xa74>
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	4648      	mov	r0, r9
 800b8be:	f000 fe49 	bl	800c554 <__pow5mult>
 800b8c2:	9b07      	ldr	r3, [sp, #28]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	f300 80a0 	bgt.w	800ba0c <_dtoa_r+0x814>
 800b8cc:	9b02      	ldr	r3, [sp, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f040 8096 	bne.w	800ba00 <_dtoa_r+0x808>
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b8da:	2a00      	cmp	r2, #0
 800b8dc:	f040 8092 	bne.w	800ba04 <_dtoa_r+0x80c>
 800b8e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b8e4:	0d12      	lsrs	r2, r2, #20
 800b8e6:	0512      	lsls	r2, r2, #20
 800b8e8:	2a00      	cmp	r2, #0
 800b8ea:	f000 808d 	beq.w	800ba08 <_dtoa_r+0x810>
 800b8ee:	9b04      	ldr	r3, [sp, #16]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	9304      	str	r3, [sp, #16]
 800b8f4:	9b06      	ldr	r3, [sp, #24]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	9306      	str	r3, [sp, #24]
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b900:	2b00      	cmp	r3, #0
 800b902:	f000 81b9 	beq.w	800bc78 <_dtoa_r+0xa80>
 800b906:	6922      	ldr	r2, [r4, #16]
 800b908:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b90c:	6910      	ldr	r0, [r2, #16]
 800b90e:	f000 fd1d 	bl	800c34c <__hi0bits>
 800b912:	f1c0 0020 	rsb	r0, r0, #32
 800b916:	9b06      	ldr	r3, [sp, #24]
 800b918:	4418      	add	r0, r3
 800b91a:	f010 001f 	ands.w	r0, r0, #31
 800b91e:	f000 8081 	beq.w	800ba24 <_dtoa_r+0x82c>
 800b922:	f1c0 0220 	rsb	r2, r0, #32
 800b926:	2a04      	cmp	r2, #4
 800b928:	dd73      	ble.n	800ba12 <_dtoa_r+0x81a>
 800b92a:	9b04      	ldr	r3, [sp, #16]
 800b92c:	f1c0 001c 	rsb	r0, r0, #28
 800b930:	4403      	add	r3, r0
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	9b06      	ldr	r3, [sp, #24]
 800b936:	4406      	add	r6, r0
 800b938:	4403      	add	r3, r0
 800b93a:	9306      	str	r3, [sp, #24]
 800b93c:	9b04      	ldr	r3, [sp, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	dd05      	ble.n	800b94e <_dtoa_r+0x756>
 800b942:	9901      	ldr	r1, [sp, #4]
 800b944:	461a      	mov	r2, r3
 800b946:	4648      	mov	r0, r9
 800b948:	f000 fe5e 	bl	800c608 <__lshift>
 800b94c:	9001      	str	r0, [sp, #4]
 800b94e:	9b06      	ldr	r3, [sp, #24]
 800b950:	2b00      	cmp	r3, #0
 800b952:	dd05      	ble.n	800b960 <_dtoa_r+0x768>
 800b954:	4621      	mov	r1, r4
 800b956:	461a      	mov	r2, r3
 800b958:	4648      	mov	r0, r9
 800b95a:	f000 fe55 	bl	800c608 <__lshift>
 800b95e:	4604      	mov	r4, r0
 800b960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b962:	2b00      	cmp	r3, #0
 800b964:	d060      	beq.n	800ba28 <_dtoa_r+0x830>
 800b966:	9801      	ldr	r0, [sp, #4]
 800b968:	4621      	mov	r1, r4
 800b96a:	f000 feb9 	bl	800c6e0 <__mcmp>
 800b96e:	2800      	cmp	r0, #0
 800b970:	da5a      	bge.n	800ba28 <_dtoa_r+0x830>
 800b972:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b976:	9305      	str	r3, [sp, #20]
 800b978:	9901      	ldr	r1, [sp, #4]
 800b97a:	2300      	movs	r3, #0
 800b97c:	220a      	movs	r2, #10
 800b97e:	4648      	mov	r0, r9
 800b980:	f000 fc9e 	bl	800c2c0 <__multadd>
 800b984:	9b08      	ldr	r3, [sp, #32]
 800b986:	9001      	str	r0, [sp, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 8177 	beq.w	800bc7c <_dtoa_r+0xa84>
 800b98e:	4629      	mov	r1, r5
 800b990:	2300      	movs	r3, #0
 800b992:	220a      	movs	r2, #10
 800b994:	4648      	mov	r0, r9
 800b996:	f000 fc93 	bl	800c2c0 <__multadd>
 800b99a:	f1bb 0f00 	cmp.w	fp, #0
 800b99e:	4605      	mov	r5, r0
 800b9a0:	dc6e      	bgt.n	800ba80 <_dtoa_r+0x888>
 800b9a2:	9b07      	ldr	r3, [sp, #28]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	dc48      	bgt.n	800ba3a <_dtoa_r+0x842>
 800b9a8:	e06a      	b.n	800ba80 <_dtoa_r+0x888>
 800b9aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b9b0:	e739      	b.n	800b826 <_dtoa_r+0x62e>
 800b9b2:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	db07      	blt.n	800b9ca <_dtoa_r+0x7d2>
 800b9ba:	f1ba 0f00 	cmp.w	sl, #0
 800b9be:	eba3 0404 	sub.w	r4, r3, r4
 800b9c2:	db0b      	blt.n	800b9dc <_dtoa_r+0x7e4>
 800b9c4:	9e04      	ldr	r6, [sp, #16]
 800b9c6:	4652      	mov	r2, sl
 800b9c8:	e72f      	b.n	800b82a <_dtoa_r+0x632>
 800b9ca:	1ae2      	subs	r2, r4, r3
 800b9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ce:	9e04      	ldr	r6, [sp, #16]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9d4:	4652      	mov	r2, sl
 800b9d6:	4623      	mov	r3, r4
 800b9d8:	2400      	movs	r4, #0
 800b9da:	e726      	b.n	800b82a <_dtoa_r+0x632>
 800b9dc:	9a04      	ldr	r2, [sp, #16]
 800b9de:	eba2 060a 	sub.w	r6, r2, sl
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	e721      	b.n	800b82a <_dtoa_r+0x632>
 800b9e6:	9e04      	ldr	r6, [sp, #16]
 800b9e8:	9d08      	ldr	r5, [sp, #32]
 800b9ea:	461c      	mov	r4, r3
 800b9ec:	e72a      	b.n	800b844 <_dtoa_r+0x64c>
 800b9ee:	9a01      	ldr	r2, [sp, #4]
 800b9f0:	9205      	str	r2, [sp, #20]
 800b9f2:	e752      	b.n	800b89a <_dtoa_r+0x6a2>
 800b9f4:	9901      	ldr	r1, [sp, #4]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	e751      	b.n	800b89e <_dtoa_r+0x6a6>
 800b9fa:	9b05      	ldr	r3, [sp, #20]
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	e752      	b.n	800b8a6 <_dtoa_r+0x6ae>
 800ba00:	2300      	movs	r3, #0
 800ba02:	e77b      	b.n	800b8fc <_dtoa_r+0x704>
 800ba04:	9b02      	ldr	r3, [sp, #8]
 800ba06:	e779      	b.n	800b8fc <_dtoa_r+0x704>
 800ba08:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ba0a:	e778      	b.n	800b8fe <_dtoa_r+0x706>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba10:	e779      	b.n	800b906 <_dtoa_r+0x70e>
 800ba12:	d093      	beq.n	800b93c <_dtoa_r+0x744>
 800ba14:	9b04      	ldr	r3, [sp, #16]
 800ba16:	321c      	adds	r2, #28
 800ba18:	4413      	add	r3, r2
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	9b06      	ldr	r3, [sp, #24]
 800ba1e:	4416      	add	r6, r2
 800ba20:	4413      	add	r3, r2
 800ba22:	e78a      	b.n	800b93a <_dtoa_r+0x742>
 800ba24:	4602      	mov	r2, r0
 800ba26:	e7f5      	b.n	800ba14 <_dtoa_r+0x81c>
 800ba28:	f1ba 0f00 	cmp.w	sl, #0
 800ba2c:	f8cd 8014 	str.w	r8, [sp, #20]
 800ba30:	46d3      	mov	fp, sl
 800ba32:	dc21      	bgt.n	800ba78 <_dtoa_r+0x880>
 800ba34:	9b07      	ldr	r3, [sp, #28]
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	dd1e      	ble.n	800ba78 <_dtoa_r+0x880>
 800ba3a:	f1bb 0f00 	cmp.w	fp, #0
 800ba3e:	f47f addc 	bne.w	800b5fa <_dtoa_r+0x402>
 800ba42:	4621      	mov	r1, r4
 800ba44:	465b      	mov	r3, fp
 800ba46:	2205      	movs	r2, #5
 800ba48:	4648      	mov	r0, r9
 800ba4a:	f000 fc39 	bl	800c2c0 <__multadd>
 800ba4e:	4601      	mov	r1, r0
 800ba50:	4604      	mov	r4, r0
 800ba52:	9801      	ldr	r0, [sp, #4]
 800ba54:	f000 fe44 	bl	800c6e0 <__mcmp>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	f77f adce 	ble.w	800b5fa <_dtoa_r+0x402>
 800ba5e:	463e      	mov	r6, r7
 800ba60:	2331      	movs	r3, #49	@ 0x31
 800ba62:	f806 3b01 	strb.w	r3, [r6], #1
 800ba66:	9b05      	ldr	r3, [sp, #20]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	9305      	str	r3, [sp, #20]
 800ba6c:	e5c9      	b.n	800b602 <_dtoa_r+0x40a>
 800ba6e:	f8cd 8014 	str.w	r8, [sp, #20]
 800ba72:	4654      	mov	r4, sl
 800ba74:	4625      	mov	r5, r4
 800ba76:	e7f2      	b.n	800ba5e <_dtoa_r+0x866>
 800ba78:	9b08      	ldr	r3, [sp, #32]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f000 8102 	beq.w	800bc84 <_dtoa_r+0xa8c>
 800ba80:	2e00      	cmp	r6, #0
 800ba82:	dd05      	ble.n	800ba90 <_dtoa_r+0x898>
 800ba84:	4629      	mov	r1, r5
 800ba86:	4632      	mov	r2, r6
 800ba88:	4648      	mov	r0, r9
 800ba8a:	f000 fdbd 	bl	800c608 <__lshift>
 800ba8e:	4605      	mov	r5, r0
 800ba90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d058      	beq.n	800bb48 <_dtoa_r+0x950>
 800ba96:	6869      	ldr	r1, [r5, #4]
 800ba98:	4648      	mov	r0, r9
 800ba9a:	f000 fbaf 	bl	800c1fc <_Balloc>
 800ba9e:	4606      	mov	r6, r0
 800baa0:	b928      	cbnz	r0, 800baae <_dtoa_r+0x8b6>
 800baa2:	4b82      	ldr	r3, [pc, #520]	@ (800bcac <_dtoa_r+0xab4>)
 800baa4:	4602      	mov	r2, r0
 800baa6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800baaa:	f7ff bbbe 	b.w	800b22a <_dtoa_r+0x32>
 800baae:	692a      	ldr	r2, [r5, #16]
 800bab0:	3202      	adds	r2, #2
 800bab2:	0092      	lsls	r2, r2, #2
 800bab4:	f105 010c 	add.w	r1, r5, #12
 800bab8:	300c      	adds	r0, #12
 800baba:	f001 f8cb 	bl	800cc54 <memcpy>
 800babe:	2201      	movs	r2, #1
 800bac0:	4631      	mov	r1, r6
 800bac2:	4648      	mov	r0, r9
 800bac4:	f000 fda0 	bl	800c608 <__lshift>
 800bac8:	1c7b      	adds	r3, r7, #1
 800baca:	9304      	str	r3, [sp, #16]
 800bacc:	eb07 030b 	add.w	r3, r7, fp
 800bad0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bad2:	9b02      	ldr	r3, [sp, #8]
 800bad4:	f003 0301 	and.w	r3, r3, #1
 800bad8:	46a8      	mov	r8, r5
 800bada:	9308      	str	r3, [sp, #32]
 800badc:	4605      	mov	r5, r0
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	9801      	ldr	r0, [sp, #4]
 800bae2:	4621      	mov	r1, r4
 800bae4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bae8:	f7ff fafc 	bl	800b0e4 <quorem>
 800baec:	4641      	mov	r1, r8
 800baee:	9002      	str	r0, [sp, #8]
 800baf0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800baf4:	9801      	ldr	r0, [sp, #4]
 800baf6:	f000 fdf3 	bl	800c6e0 <__mcmp>
 800bafa:	462a      	mov	r2, r5
 800bafc:	9006      	str	r0, [sp, #24]
 800bafe:	4621      	mov	r1, r4
 800bb00:	4648      	mov	r0, r9
 800bb02:	f000 fe09 	bl	800c718 <__mdiff>
 800bb06:	68c2      	ldr	r2, [r0, #12]
 800bb08:	4606      	mov	r6, r0
 800bb0a:	b9fa      	cbnz	r2, 800bb4c <_dtoa_r+0x954>
 800bb0c:	4601      	mov	r1, r0
 800bb0e:	9801      	ldr	r0, [sp, #4]
 800bb10:	f000 fde6 	bl	800c6e0 <__mcmp>
 800bb14:	4602      	mov	r2, r0
 800bb16:	4631      	mov	r1, r6
 800bb18:	4648      	mov	r0, r9
 800bb1a:	920a      	str	r2, [sp, #40]	@ 0x28
 800bb1c:	f000 fbae 	bl	800c27c <_Bfree>
 800bb20:	9b07      	ldr	r3, [sp, #28]
 800bb22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb24:	9e04      	ldr	r6, [sp, #16]
 800bb26:	ea42 0103 	orr.w	r1, r2, r3
 800bb2a:	9b08      	ldr	r3, [sp, #32]
 800bb2c:	4319      	orrs	r1, r3
 800bb2e:	d10f      	bne.n	800bb50 <_dtoa_r+0x958>
 800bb30:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bb34:	d028      	beq.n	800bb88 <_dtoa_r+0x990>
 800bb36:	9b06      	ldr	r3, [sp, #24]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	dd02      	ble.n	800bb42 <_dtoa_r+0x94a>
 800bb3c:	9b02      	ldr	r3, [sp, #8]
 800bb3e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bb42:	f88b a000 	strb.w	sl, [fp]
 800bb46:	e55e      	b.n	800b606 <_dtoa_r+0x40e>
 800bb48:	4628      	mov	r0, r5
 800bb4a:	e7bd      	b.n	800bac8 <_dtoa_r+0x8d0>
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	e7e2      	b.n	800bb16 <_dtoa_r+0x91e>
 800bb50:	9b06      	ldr	r3, [sp, #24]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	db04      	blt.n	800bb60 <_dtoa_r+0x968>
 800bb56:	9907      	ldr	r1, [sp, #28]
 800bb58:	430b      	orrs	r3, r1
 800bb5a:	9908      	ldr	r1, [sp, #32]
 800bb5c:	430b      	orrs	r3, r1
 800bb5e:	d120      	bne.n	800bba2 <_dtoa_r+0x9aa>
 800bb60:	2a00      	cmp	r2, #0
 800bb62:	ddee      	ble.n	800bb42 <_dtoa_r+0x94a>
 800bb64:	9901      	ldr	r1, [sp, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	4648      	mov	r0, r9
 800bb6a:	f000 fd4d 	bl	800c608 <__lshift>
 800bb6e:	4621      	mov	r1, r4
 800bb70:	9001      	str	r0, [sp, #4]
 800bb72:	f000 fdb5 	bl	800c6e0 <__mcmp>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	dc03      	bgt.n	800bb82 <_dtoa_r+0x98a>
 800bb7a:	d1e2      	bne.n	800bb42 <_dtoa_r+0x94a>
 800bb7c:	f01a 0f01 	tst.w	sl, #1
 800bb80:	d0df      	beq.n	800bb42 <_dtoa_r+0x94a>
 800bb82:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bb86:	d1d9      	bne.n	800bb3c <_dtoa_r+0x944>
 800bb88:	2339      	movs	r3, #57	@ 0x39
 800bb8a:	f88b 3000 	strb.w	r3, [fp]
 800bb8e:	4633      	mov	r3, r6
 800bb90:	461e      	mov	r6, r3
 800bb92:	3b01      	subs	r3, #1
 800bb94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb98:	2a39      	cmp	r2, #57	@ 0x39
 800bb9a:	d052      	beq.n	800bc42 <_dtoa_r+0xa4a>
 800bb9c:	3201      	adds	r2, #1
 800bb9e:	701a      	strb	r2, [r3, #0]
 800bba0:	e531      	b.n	800b606 <_dtoa_r+0x40e>
 800bba2:	2a00      	cmp	r2, #0
 800bba4:	dd07      	ble.n	800bbb6 <_dtoa_r+0x9be>
 800bba6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bbaa:	d0ed      	beq.n	800bb88 <_dtoa_r+0x990>
 800bbac:	f10a 0301 	add.w	r3, sl, #1
 800bbb0:	f88b 3000 	strb.w	r3, [fp]
 800bbb4:	e527      	b.n	800b606 <_dtoa_r+0x40e>
 800bbb6:	9b04      	ldr	r3, [sp, #16]
 800bbb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbba:	f803 ac01 	strb.w	sl, [r3, #-1]
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d029      	beq.n	800bc16 <_dtoa_r+0xa1e>
 800bbc2:	9901      	ldr	r1, [sp, #4]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	220a      	movs	r2, #10
 800bbc8:	4648      	mov	r0, r9
 800bbca:	f000 fb79 	bl	800c2c0 <__multadd>
 800bbce:	45a8      	cmp	r8, r5
 800bbd0:	9001      	str	r0, [sp, #4]
 800bbd2:	f04f 0300 	mov.w	r3, #0
 800bbd6:	f04f 020a 	mov.w	r2, #10
 800bbda:	4641      	mov	r1, r8
 800bbdc:	4648      	mov	r0, r9
 800bbde:	d107      	bne.n	800bbf0 <_dtoa_r+0x9f8>
 800bbe0:	f000 fb6e 	bl	800c2c0 <__multadd>
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	4605      	mov	r5, r0
 800bbe8:	9b04      	ldr	r3, [sp, #16]
 800bbea:	3301      	adds	r3, #1
 800bbec:	9304      	str	r3, [sp, #16]
 800bbee:	e776      	b.n	800bade <_dtoa_r+0x8e6>
 800bbf0:	f000 fb66 	bl	800c2c0 <__multadd>
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	4680      	mov	r8, r0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	220a      	movs	r2, #10
 800bbfc:	4648      	mov	r0, r9
 800bbfe:	f000 fb5f 	bl	800c2c0 <__multadd>
 800bc02:	4605      	mov	r5, r0
 800bc04:	e7f0      	b.n	800bbe8 <_dtoa_r+0x9f0>
 800bc06:	f1bb 0f00 	cmp.w	fp, #0
 800bc0a:	bfcc      	ite	gt
 800bc0c:	465e      	movgt	r6, fp
 800bc0e:	2601      	movle	r6, #1
 800bc10:	443e      	add	r6, r7
 800bc12:	f04f 0800 	mov.w	r8, #0
 800bc16:	9901      	ldr	r1, [sp, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	4648      	mov	r0, r9
 800bc1c:	f000 fcf4 	bl	800c608 <__lshift>
 800bc20:	4621      	mov	r1, r4
 800bc22:	9001      	str	r0, [sp, #4]
 800bc24:	f000 fd5c 	bl	800c6e0 <__mcmp>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	dcb0      	bgt.n	800bb8e <_dtoa_r+0x996>
 800bc2c:	d102      	bne.n	800bc34 <_dtoa_r+0xa3c>
 800bc2e:	f01a 0f01 	tst.w	sl, #1
 800bc32:	d1ac      	bne.n	800bb8e <_dtoa_r+0x996>
 800bc34:	4633      	mov	r3, r6
 800bc36:	461e      	mov	r6, r3
 800bc38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc3c:	2a30      	cmp	r2, #48	@ 0x30
 800bc3e:	d0fa      	beq.n	800bc36 <_dtoa_r+0xa3e>
 800bc40:	e4e1      	b.n	800b606 <_dtoa_r+0x40e>
 800bc42:	429f      	cmp	r7, r3
 800bc44:	d1a4      	bne.n	800bb90 <_dtoa_r+0x998>
 800bc46:	9b05      	ldr	r3, [sp, #20]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	9305      	str	r3, [sp, #20]
 800bc4c:	2331      	movs	r3, #49	@ 0x31
 800bc4e:	703b      	strb	r3, [r7, #0]
 800bc50:	e4d9      	b.n	800b606 <_dtoa_r+0x40e>
 800bc52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc54:	4f16      	ldr	r7, [pc, #88]	@ (800bcb0 <_dtoa_r+0xab8>)
 800bc56:	b11b      	cbz	r3, 800bc60 <_dtoa_r+0xa68>
 800bc58:	f107 0308 	add.w	r3, r7, #8
 800bc5c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bc5e:	6013      	str	r3, [r2, #0]
 800bc60:	4638      	mov	r0, r7
 800bc62:	b011      	add	sp, #68	@ 0x44
 800bc64:	ecbd 8b02 	vpop	{d8}
 800bc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6c:	9b07      	ldr	r3, [sp, #28]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	f77f ae2c 	ble.w	800b8cc <_dtoa_r+0x6d4>
 800bc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc78:	2001      	movs	r0, #1
 800bc7a:	e64c      	b.n	800b916 <_dtoa_r+0x71e>
 800bc7c:	f1bb 0f00 	cmp.w	fp, #0
 800bc80:	f77f aed8 	ble.w	800ba34 <_dtoa_r+0x83c>
 800bc84:	463e      	mov	r6, r7
 800bc86:	9801      	ldr	r0, [sp, #4]
 800bc88:	4621      	mov	r1, r4
 800bc8a:	f7ff fa2b 	bl	800b0e4 <quorem>
 800bc8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bc92:	f806 ab01 	strb.w	sl, [r6], #1
 800bc96:	1bf2      	subs	r2, r6, r7
 800bc98:	4593      	cmp	fp, r2
 800bc9a:	ddb4      	ble.n	800bc06 <_dtoa_r+0xa0e>
 800bc9c:	9901      	ldr	r1, [sp, #4]
 800bc9e:	2300      	movs	r3, #0
 800bca0:	220a      	movs	r2, #10
 800bca2:	4648      	mov	r0, r9
 800bca4:	f000 fb0c 	bl	800c2c0 <__multadd>
 800bca8:	9001      	str	r0, [sp, #4]
 800bcaa:	e7ec      	b.n	800bc86 <_dtoa_r+0xa8e>
 800bcac:	0800cffc 	.word	0x0800cffc
 800bcb0:	0800cf80 	.word	0x0800cf80

0800bcb4 <__sfputc_r>:
 800bcb4:	6893      	ldr	r3, [r2, #8]
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	b410      	push	{r4}
 800bcbc:	6093      	str	r3, [r2, #8]
 800bcbe:	da08      	bge.n	800bcd2 <__sfputc_r+0x1e>
 800bcc0:	6994      	ldr	r4, [r2, #24]
 800bcc2:	42a3      	cmp	r3, r4
 800bcc4:	db01      	blt.n	800bcca <__sfputc_r+0x16>
 800bcc6:	290a      	cmp	r1, #10
 800bcc8:	d103      	bne.n	800bcd2 <__sfputc_r+0x1e>
 800bcca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcce:	f000 be52 	b.w	800c976 <__swbuf_r>
 800bcd2:	6813      	ldr	r3, [r2, #0]
 800bcd4:	1c58      	adds	r0, r3, #1
 800bcd6:	6010      	str	r0, [r2, #0]
 800bcd8:	7019      	strb	r1, [r3, #0]
 800bcda:	4608      	mov	r0, r1
 800bcdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <__sfputs_r>:
 800bce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce4:	4606      	mov	r6, r0
 800bce6:	460f      	mov	r7, r1
 800bce8:	4614      	mov	r4, r2
 800bcea:	18d5      	adds	r5, r2, r3
 800bcec:	42ac      	cmp	r4, r5
 800bcee:	d101      	bne.n	800bcf4 <__sfputs_r+0x12>
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	e007      	b.n	800bd04 <__sfputs_r+0x22>
 800bcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf8:	463a      	mov	r2, r7
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f7ff ffda 	bl	800bcb4 <__sfputc_r>
 800bd00:	1c43      	adds	r3, r0, #1
 800bd02:	d1f3      	bne.n	800bcec <__sfputs_r+0xa>
 800bd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd08 <_vfiprintf_r>:
 800bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	460d      	mov	r5, r1
 800bd0e:	b09d      	sub	sp, #116	@ 0x74
 800bd10:	4614      	mov	r4, r2
 800bd12:	4698      	mov	r8, r3
 800bd14:	4606      	mov	r6, r0
 800bd16:	b118      	cbz	r0, 800bd20 <_vfiprintf_r+0x18>
 800bd18:	6a03      	ldr	r3, [r0, #32]
 800bd1a:	b90b      	cbnz	r3, 800bd20 <_vfiprintf_r+0x18>
 800bd1c:	f7ff f902 	bl	800af24 <__sinit>
 800bd20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd22:	07d9      	lsls	r1, r3, #31
 800bd24:	d405      	bmi.n	800bd32 <_vfiprintf_r+0x2a>
 800bd26:	89ab      	ldrh	r3, [r5, #12]
 800bd28:	059a      	lsls	r2, r3, #22
 800bd2a:	d402      	bmi.n	800bd32 <_vfiprintf_r+0x2a>
 800bd2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd2e:	f7ff f9d2 	bl	800b0d6 <__retarget_lock_acquire_recursive>
 800bd32:	89ab      	ldrh	r3, [r5, #12]
 800bd34:	071b      	lsls	r3, r3, #28
 800bd36:	d501      	bpl.n	800bd3c <_vfiprintf_r+0x34>
 800bd38:	692b      	ldr	r3, [r5, #16]
 800bd3a:	b99b      	cbnz	r3, 800bd64 <_vfiprintf_r+0x5c>
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f000 fe58 	bl	800c9f4 <__swsetup_r>
 800bd44:	b170      	cbz	r0, 800bd64 <_vfiprintf_r+0x5c>
 800bd46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd48:	07dc      	lsls	r4, r3, #31
 800bd4a:	d504      	bpl.n	800bd56 <_vfiprintf_r+0x4e>
 800bd4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd50:	b01d      	add	sp, #116	@ 0x74
 800bd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd56:	89ab      	ldrh	r3, [r5, #12]
 800bd58:	0598      	lsls	r0, r3, #22
 800bd5a:	d4f7      	bmi.n	800bd4c <_vfiprintf_r+0x44>
 800bd5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd5e:	f7ff f9bb 	bl	800b0d8 <__retarget_lock_release_recursive>
 800bd62:	e7f3      	b.n	800bd4c <_vfiprintf_r+0x44>
 800bd64:	2300      	movs	r3, #0
 800bd66:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd68:	2320      	movs	r3, #32
 800bd6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd72:	2330      	movs	r3, #48	@ 0x30
 800bd74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf24 <_vfiprintf_r+0x21c>
 800bd78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd7c:	f04f 0901 	mov.w	r9, #1
 800bd80:	4623      	mov	r3, r4
 800bd82:	469a      	mov	sl, r3
 800bd84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd88:	b10a      	cbz	r2, 800bd8e <_vfiprintf_r+0x86>
 800bd8a:	2a25      	cmp	r2, #37	@ 0x25
 800bd8c:	d1f9      	bne.n	800bd82 <_vfiprintf_r+0x7a>
 800bd8e:	ebba 0b04 	subs.w	fp, sl, r4
 800bd92:	d00b      	beq.n	800bdac <_vfiprintf_r+0xa4>
 800bd94:	465b      	mov	r3, fp
 800bd96:	4622      	mov	r2, r4
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f7ff ffa1 	bl	800bce2 <__sfputs_r>
 800bda0:	3001      	adds	r0, #1
 800bda2:	f000 80a7 	beq.w	800bef4 <_vfiprintf_r+0x1ec>
 800bda6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bda8:	445a      	add	r2, fp
 800bdaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdac:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 809f 	beq.w	800bef4 <_vfiprintf_r+0x1ec>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdc0:	f10a 0a01 	add.w	sl, sl, #1
 800bdc4:	9304      	str	r3, [sp, #16]
 800bdc6:	9307      	str	r3, [sp, #28]
 800bdc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdce:	4654      	mov	r4, sl
 800bdd0:	2205      	movs	r2, #5
 800bdd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd6:	4853      	ldr	r0, [pc, #332]	@ (800bf24 <_vfiprintf_r+0x21c>)
 800bdd8:	f7f4 fa82 	bl	80002e0 <memchr>
 800bddc:	9a04      	ldr	r2, [sp, #16]
 800bdde:	b9d8      	cbnz	r0, 800be18 <_vfiprintf_r+0x110>
 800bde0:	06d1      	lsls	r1, r2, #27
 800bde2:	bf44      	itt	mi
 800bde4:	2320      	movmi	r3, #32
 800bde6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdea:	0713      	lsls	r3, r2, #28
 800bdec:	bf44      	itt	mi
 800bdee:	232b      	movmi	r3, #43	@ 0x2b
 800bdf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdf4:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdfa:	d015      	beq.n	800be28 <_vfiprintf_r+0x120>
 800bdfc:	9a07      	ldr	r2, [sp, #28]
 800bdfe:	4654      	mov	r4, sl
 800be00:	2000      	movs	r0, #0
 800be02:	f04f 0c0a 	mov.w	ip, #10
 800be06:	4621      	mov	r1, r4
 800be08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be0c:	3b30      	subs	r3, #48	@ 0x30
 800be0e:	2b09      	cmp	r3, #9
 800be10:	d94b      	bls.n	800beaa <_vfiprintf_r+0x1a2>
 800be12:	b1b0      	cbz	r0, 800be42 <_vfiprintf_r+0x13a>
 800be14:	9207      	str	r2, [sp, #28]
 800be16:	e014      	b.n	800be42 <_vfiprintf_r+0x13a>
 800be18:	eba0 0308 	sub.w	r3, r0, r8
 800be1c:	fa09 f303 	lsl.w	r3, r9, r3
 800be20:	4313      	orrs	r3, r2
 800be22:	9304      	str	r3, [sp, #16]
 800be24:	46a2      	mov	sl, r4
 800be26:	e7d2      	b.n	800bdce <_vfiprintf_r+0xc6>
 800be28:	9b03      	ldr	r3, [sp, #12]
 800be2a:	1d19      	adds	r1, r3, #4
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	9103      	str	r1, [sp, #12]
 800be30:	2b00      	cmp	r3, #0
 800be32:	bfbb      	ittet	lt
 800be34:	425b      	neglt	r3, r3
 800be36:	f042 0202 	orrlt.w	r2, r2, #2
 800be3a:	9307      	strge	r3, [sp, #28]
 800be3c:	9307      	strlt	r3, [sp, #28]
 800be3e:	bfb8      	it	lt
 800be40:	9204      	strlt	r2, [sp, #16]
 800be42:	7823      	ldrb	r3, [r4, #0]
 800be44:	2b2e      	cmp	r3, #46	@ 0x2e
 800be46:	d10a      	bne.n	800be5e <_vfiprintf_r+0x156>
 800be48:	7863      	ldrb	r3, [r4, #1]
 800be4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be4c:	d132      	bne.n	800beb4 <_vfiprintf_r+0x1ac>
 800be4e:	9b03      	ldr	r3, [sp, #12]
 800be50:	1d1a      	adds	r2, r3, #4
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	9203      	str	r2, [sp, #12]
 800be56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be5a:	3402      	adds	r4, #2
 800be5c:	9305      	str	r3, [sp, #20]
 800be5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf34 <_vfiprintf_r+0x22c>
 800be62:	7821      	ldrb	r1, [r4, #0]
 800be64:	2203      	movs	r2, #3
 800be66:	4650      	mov	r0, sl
 800be68:	f7f4 fa3a 	bl	80002e0 <memchr>
 800be6c:	b138      	cbz	r0, 800be7e <_vfiprintf_r+0x176>
 800be6e:	9b04      	ldr	r3, [sp, #16]
 800be70:	eba0 000a 	sub.w	r0, r0, sl
 800be74:	2240      	movs	r2, #64	@ 0x40
 800be76:	4082      	lsls	r2, r0
 800be78:	4313      	orrs	r3, r2
 800be7a:	3401      	adds	r4, #1
 800be7c:	9304      	str	r3, [sp, #16]
 800be7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be82:	4829      	ldr	r0, [pc, #164]	@ (800bf28 <_vfiprintf_r+0x220>)
 800be84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be88:	2206      	movs	r2, #6
 800be8a:	f7f4 fa29 	bl	80002e0 <memchr>
 800be8e:	2800      	cmp	r0, #0
 800be90:	d03f      	beq.n	800bf12 <_vfiprintf_r+0x20a>
 800be92:	4b26      	ldr	r3, [pc, #152]	@ (800bf2c <_vfiprintf_r+0x224>)
 800be94:	bb1b      	cbnz	r3, 800bede <_vfiprintf_r+0x1d6>
 800be96:	9b03      	ldr	r3, [sp, #12]
 800be98:	3307      	adds	r3, #7
 800be9a:	f023 0307 	bic.w	r3, r3, #7
 800be9e:	3308      	adds	r3, #8
 800bea0:	9303      	str	r3, [sp, #12]
 800bea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bea4:	443b      	add	r3, r7
 800bea6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bea8:	e76a      	b.n	800bd80 <_vfiprintf_r+0x78>
 800beaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800beae:	460c      	mov	r4, r1
 800beb0:	2001      	movs	r0, #1
 800beb2:	e7a8      	b.n	800be06 <_vfiprintf_r+0xfe>
 800beb4:	2300      	movs	r3, #0
 800beb6:	3401      	adds	r4, #1
 800beb8:	9305      	str	r3, [sp, #20]
 800beba:	4619      	mov	r1, r3
 800bebc:	f04f 0c0a 	mov.w	ip, #10
 800bec0:	4620      	mov	r0, r4
 800bec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bec6:	3a30      	subs	r2, #48	@ 0x30
 800bec8:	2a09      	cmp	r2, #9
 800beca:	d903      	bls.n	800bed4 <_vfiprintf_r+0x1cc>
 800becc:	2b00      	cmp	r3, #0
 800bece:	d0c6      	beq.n	800be5e <_vfiprintf_r+0x156>
 800bed0:	9105      	str	r1, [sp, #20]
 800bed2:	e7c4      	b.n	800be5e <_vfiprintf_r+0x156>
 800bed4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bed8:	4604      	mov	r4, r0
 800beda:	2301      	movs	r3, #1
 800bedc:	e7f0      	b.n	800bec0 <_vfiprintf_r+0x1b8>
 800bede:	ab03      	add	r3, sp, #12
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	462a      	mov	r2, r5
 800bee4:	4b12      	ldr	r3, [pc, #72]	@ (800bf30 <_vfiprintf_r+0x228>)
 800bee6:	a904      	add	r1, sp, #16
 800bee8:	4630      	mov	r0, r6
 800beea:	f7fe fbe9 	bl	800a6c0 <_printf_float>
 800beee:	4607      	mov	r7, r0
 800bef0:	1c78      	adds	r0, r7, #1
 800bef2:	d1d6      	bne.n	800bea2 <_vfiprintf_r+0x19a>
 800bef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bef6:	07d9      	lsls	r1, r3, #31
 800bef8:	d405      	bmi.n	800bf06 <_vfiprintf_r+0x1fe>
 800befa:	89ab      	ldrh	r3, [r5, #12]
 800befc:	059a      	lsls	r2, r3, #22
 800befe:	d402      	bmi.n	800bf06 <_vfiprintf_r+0x1fe>
 800bf00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf02:	f7ff f8e9 	bl	800b0d8 <__retarget_lock_release_recursive>
 800bf06:	89ab      	ldrh	r3, [r5, #12]
 800bf08:	065b      	lsls	r3, r3, #25
 800bf0a:	f53f af1f 	bmi.w	800bd4c <_vfiprintf_r+0x44>
 800bf0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf10:	e71e      	b.n	800bd50 <_vfiprintf_r+0x48>
 800bf12:	ab03      	add	r3, sp, #12
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	462a      	mov	r2, r5
 800bf18:	4b05      	ldr	r3, [pc, #20]	@ (800bf30 <_vfiprintf_r+0x228>)
 800bf1a:	a904      	add	r1, sp, #16
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f7fe fe57 	bl	800abd0 <_printf_i>
 800bf22:	e7e4      	b.n	800beee <_vfiprintf_r+0x1e6>
 800bf24:	0800d00d 	.word	0x0800d00d
 800bf28:	0800d017 	.word	0x0800d017
 800bf2c:	0800a6c1 	.word	0x0800a6c1
 800bf30:	0800bce3 	.word	0x0800bce3
 800bf34:	0800d013 	.word	0x0800d013

0800bf38 <malloc>:
 800bf38:	4b02      	ldr	r3, [pc, #8]	@ (800bf44 <malloc+0xc>)
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	6818      	ldr	r0, [r3, #0]
 800bf3e:	f000 b825 	b.w	800bf8c <_malloc_r>
 800bf42:	bf00      	nop
 800bf44:	2400001c 	.word	0x2400001c

0800bf48 <sbrk_aligned>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	4e0f      	ldr	r6, [pc, #60]	@ (800bf88 <sbrk_aligned+0x40>)
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	6831      	ldr	r1, [r6, #0]
 800bf50:	4605      	mov	r5, r0
 800bf52:	b911      	cbnz	r1, 800bf5a <sbrk_aligned+0x12>
 800bf54:	f000 fe3a 	bl	800cbcc <_sbrk_r>
 800bf58:	6030      	str	r0, [r6, #0]
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	f000 fe35 	bl	800cbcc <_sbrk_r>
 800bf62:	1c43      	adds	r3, r0, #1
 800bf64:	d103      	bne.n	800bf6e <sbrk_aligned+0x26>
 800bf66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
 800bf6e:	1cc4      	adds	r4, r0, #3
 800bf70:	f024 0403 	bic.w	r4, r4, #3
 800bf74:	42a0      	cmp	r0, r4
 800bf76:	d0f8      	beq.n	800bf6a <sbrk_aligned+0x22>
 800bf78:	1a21      	subs	r1, r4, r0
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f000 fe26 	bl	800cbcc <_sbrk_r>
 800bf80:	3001      	adds	r0, #1
 800bf82:	d1f2      	bne.n	800bf6a <sbrk_aligned+0x22>
 800bf84:	e7ef      	b.n	800bf66 <sbrk_aligned+0x1e>
 800bf86:	bf00      	nop
 800bf88:	24000ce4 	.word	0x24000ce4

0800bf8c <_malloc_r>:
 800bf8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf90:	1ccd      	adds	r5, r1, #3
 800bf92:	f025 0503 	bic.w	r5, r5, #3
 800bf96:	3508      	adds	r5, #8
 800bf98:	2d0c      	cmp	r5, #12
 800bf9a:	bf38      	it	cc
 800bf9c:	250c      	movcc	r5, #12
 800bf9e:	2d00      	cmp	r5, #0
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	db01      	blt.n	800bfa8 <_malloc_r+0x1c>
 800bfa4:	42a9      	cmp	r1, r5
 800bfa6:	d904      	bls.n	800bfb2 <_malloc_r+0x26>
 800bfa8:	230c      	movs	r3, #12
 800bfaa:	6033      	str	r3, [r6, #0]
 800bfac:	2000      	movs	r0, #0
 800bfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c088 <_malloc_r+0xfc>
 800bfb6:	f000 f915 	bl	800c1e4 <__malloc_lock>
 800bfba:	f8d8 3000 	ldr.w	r3, [r8]
 800bfbe:	461c      	mov	r4, r3
 800bfc0:	bb44      	cbnz	r4, 800c014 <_malloc_r+0x88>
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7ff ffbf 	bl	800bf48 <sbrk_aligned>
 800bfca:	1c43      	adds	r3, r0, #1
 800bfcc:	4604      	mov	r4, r0
 800bfce:	d158      	bne.n	800c082 <_malloc_r+0xf6>
 800bfd0:	f8d8 4000 	ldr.w	r4, [r8]
 800bfd4:	4627      	mov	r7, r4
 800bfd6:	2f00      	cmp	r7, #0
 800bfd8:	d143      	bne.n	800c062 <_malloc_r+0xd6>
 800bfda:	2c00      	cmp	r4, #0
 800bfdc:	d04b      	beq.n	800c076 <_malloc_r+0xea>
 800bfde:	6823      	ldr	r3, [r4, #0]
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	eb04 0903 	add.w	r9, r4, r3
 800bfe8:	f000 fdf0 	bl	800cbcc <_sbrk_r>
 800bfec:	4581      	cmp	r9, r0
 800bfee:	d142      	bne.n	800c076 <_malloc_r+0xea>
 800bff0:	6821      	ldr	r1, [r4, #0]
 800bff2:	1a6d      	subs	r5, r5, r1
 800bff4:	4629      	mov	r1, r5
 800bff6:	4630      	mov	r0, r6
 800bff8:	f7ff ffa6 	bl	800bf48 <sbrk_aligned>
 800bffc:	3001      	adds	r0, #1
 800bffe:	d03a      	beq.n	800c076 <_malloc_r+0xea>
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	442b      	add	r3, r5
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	f8d8 3000 	ldr.w	r3, [r8]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	bb62      	cbnz	r2, 800c068 <_malloc_r+0xdc>
 800c00e:	f8c8 7000 	str.w	r7, [r8]
 800c012:	e00f      	b.n	800c034 <_malloc_r+0xa8>
 800c014:	6822      	ldr	r2, [r4, #0]
 800c016:	1b52      	subs	r2, r2, r5
 800c018:	d420      	bmi.n	800c05c <_malloc_r+0xd0>
 800c01a:	2a0b      	cmp	r2, #11
 800c01c:	d917      	bls.n	800c04e <_malloc_r+0xc2>
 800c01e:	1961      	adds	r1, r4, r5
 800c020:	42a3      	cmp	r3, r4
 800c022:	6025      	str	r5, [r4, #0]
 800c024:	bf18      	it	ne
 800c026:	6059      	strne	r1, [r3, #4]
 800c028:	6863      	ldr	r3, [r4, #4]
 800c02a:	bf08      	it	eq
 800c02c:	f8c8 1000 	streq.w	r1, [r8]
 800c030:	5162      	str	r2, [r4, r5]
 800c032:	604b      	str	r3, [r1, #4]
 800c034:	4630      	mov	r0, r6
 800c036:	f000 f8db 	bl	800c1f0 <__malloc_unlock>
 800c03a:	f104 000b 	add.w	r0, r4, #11
 800c03e:	1d23      	adds	r3, r4, #4
 800c040:	f020 0007 	bic.w	r0, r0, #7
 800c044:	1ac2      	subs	r2, r0, r3
 800c046:	bf1c      	itt	ne
 800c048:	1a1b      	subne	r3, r3, r0
 800c04a:	50a3      	strne	r3, [r4, r2]
 800c04c:	e7af      	b.n	800bfae <_malloc_r+0x22>
 800c04e:	6862      	ldr	r2, [r4, #4]
 800c050:	42a3      	cmp	r3, r4
 800c052:	bf0c      	ite	eq
 800c054:	f8c8 2000 	streq.w	r2, [r8]
 800c058:	605a      	strne	r2, [r3, #4]
 800c05a:	e7eb      	b.n	800c034 <_malloc_r+0xa8>
 800c05c:	4623      	mov	r3, r4
 800c05e:	6864      	ldr	r4, [r4, #4]
 800c060:	e7ae      	b.n	800bfc0 <_malloc_r+0x34>
 800c062:	463c      	mov	r4, r7
 800c064:	687f      	ldr	r7, [r7, #4]
 800c066:	e7b6      	b.n	800bfd6 <_malloc_r+0x4a>
 800c068:	461a      	mov	r2, r3
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	42a3      	cmp	r3, r4
 800c06e:	d1fb      	bne.n	800c068 <_malloc_r+0xdc>
 800c070:	2300      	movs	r3, #0
 800c072:	6053      	str	r3, [r2, #4]
 800c074:	e7de      	b.n	800c034 <_malloc_r+0xa8>
 800c076:	230c      	movs	r3, #12
 800c078:	6033      	str	r3, [r6, #0]
 800c07a:	4630      	mov	r0, r6
 800c07c:	f000 f8b8 	bl	800c1f0 <__malloc_unlock>
 800c080:	e794      	b.n	800bfac <_malloc_r+0x20>
 800c082:	6005      	str	r5, [r0, #0]
 800c084:	e7d6      	b.n	800c034 <_malloc_r+0xa8>
 800c086:	bf00      	nop
 800c088:	24000ce8 	.word	0x24000ce8

0800c08c <__sflush_r>:
 800c08c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	0716      	lsls	r6, r2, #28
 800c096:	4605      	mov	r5, r0
 800c098:	460c      	mov	r4, r1
 800c09a:	d454      	bmi.n	800c146 <__sflush_r+0xba>
 800c09c:	684b      	ldr	r3, [r1, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	dc02      	bgt.n	800c0a8 <__sflush_r+0x1c>
 800c0a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	dd48      	ble.n	800c13a <__sflush_r+0xae>
 800c0a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0aa:	2e00      	cmp	r6, #0
 800c0ac:	d045      	beq.n	800c13a <__sflush_r+0xae>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0b4:	682f      	ldr	r7, [r5, #0]
 800c0b6:	6a21      	ldr	r1, [r4, #32]
 800c0b8:	602b      	str	r3, [r5, #0]
 800c0ba:	d030      	beq.n	800c11e <__sflush_r+0x92>
 800c0bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0be:	89a3      	ldrh	r3, [r4, #12]
 800c0c0:	0759      	lsls	r1, r3, #29
 800c0c2:	d505      	bpl.n	800c0d0 <__sflush_r+0x44>
 800c0c4:	6863      	ldr	r3, [r4, #4]
 800c0c6:	1ad2      	subs	r2, r2, r3
 800c0c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0ca:	b10b      	cbz	r3, 800c0d0 <__sflush_r+0x44>
 800c0cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0ce:	1ad2      	subs	r2, r2, r3
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0d4:	6a21      	ldr	r1, [r4, #32]
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	47b0      	blx	r6
 800c0da:	1c43      	adds	r3, r0, #1
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	d106      	bne.n	800c0ee <__sflush_r+0x62>
 800c0e0:	6829      	ldr	r1, [r5, #0]
 800c0e2:	291d      	cmp	r1, #29
 800c0e4:	d82b      	bhi.n	800c13e <__sflush_r+0xb2>
 800c0e6:	4a2a      	ldr	r2, [pc, #168]	@ (800c190 <__sflush_r+0x104>)
 800c0e8:	40ca      	lsrs	r2, r1
 800c0ea:	07d6      	lsls	r6, r2, #31
 800c0ec:	d527      	bpl.n	800c13e <__sflush_r+0xb2>
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	6062      	str	r2, [r4, #4]
 800c0f2:	04d9      	lsls	r1, r3, #19
 800c0f4:	6922      	ldr	r2, [r4, #16]
 800c0f6:	6022      	str	r2, [r4, #0]
 800c0f8:	d504      	bpl.n	800c104 <__sflush_r+0x78>
 800c0fa:	1c42      	adds	r2, r0, #1
 800c0fc:	d101      	bne.n	800c102 <__sflush_r+0x76>
 800c0fe:	682b      	ldr	r3, [r5, #0]
 800c100:	b903      	cbnz	r3, 800c104 <__sflush_r+0x78>
 800c102:	6560      	str	r0, [r4, #84]	@ 0x54
 800c104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c106:	602f      	str	r7, [r5, #0]
 800c108:	b1b9      	cbz	r1, 800c13a <__sflush_r+0xae>
 800c10a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c10e:	4299      	cmp	r1, r3
 800c110:	d002      	beq.n	800c118 <__sflush_r+0x8c>
 800c112:	4628      	mov	r0, r5
 800c114:	f000 fdde 	bl	800ccd4 <_free_r>
 800c118:	2300      	movs	r3, #0
 800c11a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c11c:	e00d      	b.n	800c13a <__sflush_r+0xae>
 800c11e:	2301      	movs	r3, #1
 800c120:	4628      	mov	r0, r5
 800c122:	47b0      	blx	r6
 800c124:	4602      	mov	r2, r0
 800c126:	1c50      	adds	r0, r2, #1
 800c128:	d1c9      	bne.n	800c0be <__sflush_r+0x32>
 800c12a:	682b      	ldr	r3, [r5, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d0c6      	beq.n	800c0be <__sflush_r+0x32>
 800c130:	2b1d      	cmp	r3, #29
 800c132:	d001      	beq.n	800c138 <__sflush_r+0xac>
 800c134:	2b16      	cmp	r3, #22
 800c136:	d11e      	bne.n	800c176 <__sflush_r+0xea>
 800c138:	602f      	str	r7, [r5, #0]
 800c13a:	2000      	movs	r0, #0
 800c13c:	e022      	b.n	800c184 <__sflush_r+0xf8>
 800c13e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c142:	b21b      	sxth	r3, r3
 800c144:	e01b      	b.n	800c17e <__sflush_r+0xf2>
 800c146:	690f      	ldr	r7, [r1, #16]
 800c148:	2f00      	cmp	r7, #0
 800c14a:	d0f6      	beq.n	800c13a <__sflush_r+0xae>
 800c14c:	0793      	lsls	r3, r2, #30
 800c14e:	680e      	ldr	r6, [r1, #0]
 800c150:	bf08      	it	eq
 800c152:	694b      	ldreq	r3, [r1, #20]
 800c154:	600f      	str	r7, [r1, #0]
 800c156:	bf18      	it	ne
 800c158:	2300      	movne	r3, #0
 800c15a:	eba6 0807 	sub.w	r8, r6, r7
 800c15e:	608b      	str	r3, [r1, #8]
 800c160:	f1b8 0f00 	cmp.w	r8, #0
 800c164:	dde9      	ble.n	800c13a <__sflush_r+0xae>
 800c166:	6a21      	ldr	r1, [r4, #32]
 800c168:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c16a:	4643      	mov	r3, r8
 800c16c:	463a      	mov	r2, r7
 800c16e:	4628      	mov	r0, r5
 800c170:	47b0      	blx	r6
 800c172:	2800      	cmp	r0, #0
 800c174:	dc08      	bgt.n	800c188 <__sflush_r+0xfc>
 800c176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c17a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c17e:	81a3      	strh	r3, [r4, #12]
 800c180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c188:	4407      	add	r7, r0
 800c18a:	eba8 0800 	sub.w	r8, r8, r0
 800c18e:	e7e7      	b.n	800c160 <__sflush_r+0xd4>
 800c190:	20400001 	.word	0x20400001

0800c194 <_fflush_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	690b      	ldr	r3, [r1, #16]
 800c198:	4605      	mov	r5, r0
 800c19a:	460c      	mov	r4, r1
 800c19c:	b913      	cbnz	r3, 800c1a4 <_fflush_r+0x10>
 800c19e:	2500      	movs	r5, #0
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	b118      	cbz	r0, 800c1ae <_fflush_r+0x1a>
 800c1a6:	6a03      	ldr	r3, [r0, #32]
 800c1a8:	b90b      	cbnz	r3, 800c1ae <_fflush_r+0x1a>
 800c1aa:	f7fe febb 	bl	800af24 <__sinit>
 800c1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d0f3      	beq.n	800c19e <_fflush_r+0xa>
 800c1b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1b8:	07d0      	lsls	r0, r2, #31
 800c1ba:	d404      	bmi.n	800c1c6 <_fflush_r+0x32>
 800c1bc:	0599      	lsls	r1, r3, #22
 800c1be:	d402      	bmi.n	800c1c6 <_fflush_r+0x32>
 800c1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1c2:	f7fe ff88 	bl	800b0d6 <__retarget_lock_acquire_recursive>
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	f7ff ff5f 	bl	800c08c <__sflush_r>
 800c1ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1d0:	07da      	lsls	r2, r3, #31
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	d4e4      	bmi.n	800c1a0 <_fflush_r+0xc>
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	059b      	lsls	r3, r3, #22
 800c1da:	d4e1      	bmi.n	800c1a0 <_fflush_r+0xc>
 800c1dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1de:	f7fe ff7b 	bl	800b0d8 <__retarget_lock_release_recursive>
 800c1e2:	e7dd      	b.n	800c1a0 <_fflush_r+0xc>

0800c1e4 <__malloc_lock>:
 800c1e4:	4801      	ldr	r0, [pc, #4]	@ (800c1ec <__malloc_lock+0x8>)
 800c1e6:	f7fe bf76 	b.w	800b0d6 <__retarget_lock_acquire_recursive>
 800c1ea:	bf00      	nop
 800c1ec:	24000ce0 	.word	0x24000ce0

0800c1f0 <__malloc_unlock>:
 800c1f0:	4801      	ldr	r0, [pc, #4]	@ (800c1f8 <__malloc_unlock+0x8>)
 800c1f2:	f7fe bf71 	b.w	800b0d8 <__retarget_lock_release_recursive>
 800c1f6:	bf00      	nop
 800c1f8:	24000ce0 	.word	0x24000ce0

0800c1fc <_Balloc>:
 800c1fc:	b570      	push	{r4, r5, r6, lr}
 800c1fe:	69c6      	ldr	r6, [r0, #28]
 800c200:	4604      	mov	r4, r0
 800c202:	460d      	mov	r5, r1
 800c204:	b976      	cbnz	r6, 800c224 <_Balloc+0x28>
 800c206:	2010      	movs	r0, #16
 800c208:	f7ff fe96 	bl	800bf38 <malloc>
 800c20c:	4602      	mov	r2, r0
 800c20e:	61e0      	str	r0, [r4, #28]
 800c210:	b920      	cbnz	r0, 800c21c <_Balloc+0x20>
 800c212:	4b18      	ldr	r3, [pc, #96]	@ (800c274 <_Balloc+0x78>)
 800c214:	4818      	ldr	r0, [pc, #96]	@ (800c278 <_Balloc+0x7c>)
 800c216:	216b      	movs	r1, #107	@ 0x6b
 800c218:	f000 fd2a 	bl	800cc70 <__assert_func>
 800c21c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c220:	6006      	str	r6, [r0, #0]
 800c222:	60c6      	str	r6, [r0, #12]
 800c224:	69e6      	ldr	r6, [r4, #28]
 800c226:	68f3      	ldr	r3, [r6, #12]
 800c228:	b183      	cbz	r3, 800c24c <_Balloc+0x50>
 800c22a:	69e3      	ldr	r3, [r4, #28]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c232:	b9b8      	cbnz	r0, 800c264 <_Balloc+0x68>
 800c234:	2101      	movs	r1, #1
 800c236:	fa01 f605 	lsl.w	r6, r1, r5
 800c23a:	1d72      	adds	r2, r6, #5
 800c23c:	0092      	lsls	r2, r2, #2
 800c23e:	4620      	mov	r0, r4
 800c240:	f000 fd34 	bl	800ccac <_calloc_r>
 800c244:	b160      	cbz	r0, 800c260 <_Balloc+0x64>
 800c246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c24a:	e00e      	b.n	800c26a <_Balloc+0x6e>
 800c24c:	2221      	movs	r2, #33	@ 0x21
 800c24e:	2104      	movs	r1, #4
 800c250:	4620      	mov	r0, r4
 800c252:	f000 fd2b 	bl	800ccac <_calloc_r>
 800c256:	69e3      	ldr	r3, [r4, #28]
 800c258:	60f0      	str	r0, [r6, #12]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1e4      	bne.n	800c22a <_Balloc+0x2e>
 800c260:	2000      	movs	r0, #0
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	6802      	ldr	r2, [r0, #0]
 800c266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c26a:	2300      	movs	r3, #0
 800c26c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c270:	e7f7      	b.n	800c262 <_Balloc+0x66>
 800c272:	bf00      	nop
 800c274:	0800cf8d 	.word	0x0800cf8d
 800c278:	0800d01e 	.word	0x0800d01e

0800c27c <_Bfree>:
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	69c6      	ldr	r6, [r0, #28]
 800c280:	4605      	mov	r5, r0
 800c282:	460c      	mov	r4, r1
 800c284:	b976      	cbnz	r6, 800c2a4 <_Bfree+0x28>
 800c286:	2010      	movs	r0, #16
 800c288:	f7ff fe56 	bl	800bf38 <malloc>
 800c28c:	4602      	mov	r2, r0
 800c28e:	61e8      	str	r0, [r5, #28]
 800c290:	b920      	cbnz	r0, 800c29c <_Bfree+0x20>
 800c292:	4b09      	ldr	r3, [pc, #36]	@ (800c2b8 <_Bfree+0x3c>)
 800c294:	4809      	ldr	r0, [pc, #36]	@ (800c2bc <_Bfree+0x40>)
 800c296:	218f      	movs	r1, #143	@ 0x8f
 800c298:	f000 fcea 	bl	800cc70 <__assert_func>
 800c29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2a0:	6006      	str	r6, [r0, #0]
 800c2a2:	60c6      	str	r6, [r0, #12]
 800c2a4:	b13c      	cbz	r4, 800c2b6 <_Bfree+0x3a>
 800c2a6:	69eb      	ldr	r3, [r5, #28]
 800c2a8:	6862      	ldr	r2, [r4, #4]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2b0:	6021      	str	r1, [r4, #0]
 800c2b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	0800cf8d 	.word	0x0800cf8d
 800c2bc:	0800d01e 	.word	0x0800d01e

0800c2c0 <__multadd>:
 800c2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c4:	690d      	ldr	r5, [r1, #16]
 800c2c6:	4607      	mov	r7, r0
 800c2c8:	460c      	mov	r4, r1
 800c2ca:	461e      	mov	r6, r3
 800c2cc:	f101 0c14 	add.w	ip, r1, #20
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	f8dc 3000 	ldr.w	r3, [ip]
 800c2d6:	b299      	uxth	r1, r3
 800c2d8:	fb02 6101 	mla	r1, r2, r1, r6
 800c2dc:	0c1e      	lsrs	r6, r3, #16
 800c2de:	0c0b      	lsrs	r3, r1, #16
 800c2e0:	fb02 3306 	mla	r3, r2, r6, r3
 800c2e4:	b289      	uxth	r1, r1
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2ec:	4285      	cmp	r5, r0
 800c2ee:	f84c 1b04 	str.w	r1, [ip], #4
 800c2f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2f6:	dcec      	bgt.n	800c2d2 <__multadd+0x12>
 800c2f8:	b30e      	cbz	r6, 800c33e <__multadd+0x7e>
 800c2fa:	68a3      	ldr	r3, [r4, #8]
 800c2fc:	42ab      	cmp	r3, r5
 800c2fe:	dc19      	bgt.n	800c334 <__multadd+0x74>
 800c300:	6861      	ldr	r1, [r4, #4]
 800c302:	4638      	mov	r0, r7
 800c304:	3101      	adds	r1, #1
 800c306:	f7ff ff79 	bl	800c1fc <_Balloc>
 800c30a:	4680      	mov	r8, r0
 800c30c:	b928      	cbnz	r0, 800c31a <__multadd+0x5a>
 800c30e:	4602      	mov	r2, r0
 800c310:	4b0c      	ldr	r3, [pc, #48]	@ (800c344 <__multadd+0x84>)
 800c312:	480d      	ldr	r0, [pc, #52]	@ (800c348 <__multadd+0x88>)
 800c314:	21ba      	movs	r1, #186	@ 0xba
 800c316:	f000 fcab 	bl	800cc70 <__assert_func>
 800c31a:	6922      	ldr	r2, [r4, #16]
 800c31c:	3202      	adds	r2, #2
 800c31e:	f104 010c 	add.w	r1, r4, #12
 800c322:	0092      	lsls	r2, r2, #2
 800c324:	300c      	adds	r0, #12
 800c326:	f000 fc95 	bl	800cc54 <memcpy>
 800c32a:	4621      	mov	r1, r4
 800c32c:	4638      	mov	r0, r7
 800c32e:	f7ff ffa5 	bl	800c27c <_Bfree>
 800c332:	4644      	mov	r4, r8
 800c334:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c338:	3501      	adds	r5, #1
 800c33a:	615e      	str	r6, [r3, #20]
 800c33c:	6125      	str	r5, [r4, #16]
 800c33e:	4620      	mov	r0, r4
 800c340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c344:	0800cffc 	.word	0x0800cffc
 800c348:	0800d01e 	.word	0x0800d01e

0800c34c <__hi0bits>:
 800c34c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c350:	4603      	mov	r3, r0
 800c352:	bf36      	itet	cc
 800c354:	0403      	lslcc	r3, r0, #16
 800c356:	2000      	movcs	r0, #0
 800c358:	2010      	movcc	r0, #16
 800c35a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c35e:	bf3c      	itt	cc
 800c360:	021b      	lslcc	r3, r3, #8
 800c362:	3008      	addcc	r0, #8
 800c364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c368:	bf3c      	itt	cc
 800c36a:	011b      	lslcc	r3, r3, #4
 800c36c:	3004      	addcc	r0, #4
 800c36e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c372:	bf3c      	itt	cc
 800c374:	009b      	lslcc	r3, r3, #2
 800c376:	3002      	addcc	r0, #2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	db05      	blt.n	800c388 <__hi0bits+0x3c>
 800c37c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c380:	f100 0001 	add.w	r0, r0, #1
 800c384:	bf08      	it	eq
 800c386:	2020      	moveq	r0, #32
 800c388:	4770      	bx	lr

0800c38a <__lo0bits>:
 800c38a:	6803      	ldr	r3, [r0, #0]
 800c38c:	4602      	mov	r2, r0
 800c38e:	f013 0007 	ands.w	r0, r3, #7
 800c392:	d00b      	beq.n	800c3ac <__lo0bits+0x22>
 800c394:	07d9      	lsls	r1, r3, #31
 800c396:	d421      	bmi.n	800c3dc <__lo0bits+0x52>
 800c398:	0798      	lsls	r0, r3, #30
 800c39a:	bf49      	itett	mi
 800c39c:	085b      	lsrmi	r3, r3, #1
 800c39e:	089b      	lsrpl	r3, r3, #2
 800c3a0:	2001      	movmi	r0, #1
 800c3a2:	6013      	strmi	r3, [r2, #0]
 800c3a4:	bf5c      	itt	pl
 800c3a6:	6013      	strpl	r3, [r2, #0]
 800c3a8:	2002      	movpl	r0, #2
 800c3aa:	4770      	bx	lr
 800c3ac:	b299      	uxth	r1, r3
 800c3ae:	b909      	cbnz	r1, 800c3b4 <__lo0bits+0x2a>
 800c3b0:	0c1b      	lsrs	r3, r3, #16
 800c3b2:	2010      	movs	r0, #16
 800c3b4:	b2d9      	uxtb	r1, r3
 800c3b6:	b909      	cbnz	r1, 800c3bc <__lo0bits+0x32>
 800c3b8:	3008      	adds	r0, #8
 800c3ba:	0a1b      	lsrs	r3, r3, #8
 800c3bc:	0719      	lsls	r1, r3, #28
 800c3be:	bf04      	itt	eq
 800c3c0:	091b      	lsreq	r3, r3, #4
 800c3c2:	3004      	addeq	r0, #4
 800c3c4:	0799      	lsls	r1, r3, #30
 800c3c6:	bf04      	itt	eq
 800c3c8:	089b      	lsreq	r3, r3, #2
 800c3ca:	3002      	addeq	r0, #2
 800c3cc:	07d9      	lsls	r1, r3, #31
 800c3ce:	d403      	bmi.n	800c3d8 <__lo0bits+0x4e>
 800c3d0:	085b      	lsrs	r3, r3, #1
 800c3d2:	f100 0001 	add.w	r0, r0, #1
 800c3d6:	d003      	beq.n	800c3e0 <__lo0bits+0x56>
 800c3d8:	6013      	str	r3, [r2, #0]
 800c3da:	4770      	bx	lr
 800c3dc:	2000      	movs	r0, #0
 800c3de:	4770      	bx	lr
 800c3e0:	2020      	movs	r0, #32
 800c3e2:	4770      	bx	lr

0800c3e4 <__i2b>:
 800c3e4:	b510      	push	{r4, lr}
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	f7ff ff07 	bl	800c1fc <_Balloc>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	b928      	cbnz	r0, 800c3fe <__i2b+0x1a>
 800c3f2:	4b05      	ldr	r3, [pc, #20]	@ (800c408 <__i2b+0x24>)
 800c3f4:	4805      	ldr	r0, [pc, #20]	@ (800c40c <__i2b+0x28>)
 800c3f6:	f240 1145 	movw	r1, #325	@ 0x145
 800c3fa:	f000 fc39 	bl	800cc70 <__assert_func>
 800c3fe:	2301      	movs	r3, #1
 800c400:	6144      	str	r4, [r0, #20]
 800c402:	6103      	str	r3, [r0, #16]
 800c404:	bd10      	pop	{r4, pc}
 800c406:	bf00      	nop
 800c408:	0800cffc 	.word	0x0800cffc
 800c40c:	0800d01e 	.word	0x0800d01e

0800c410 <__multiply>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	4617      	mov	r7, r2
 800c416:	690a      	ldr	r2, [r1, #16]
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	bfa8      	it	ge
 800c41e:	463b      	movge	r3, r7
 800c420:	4689      	mov	r9, r1
 800c422:	bfa4      	itt	ge
 800c424:	460f      	movge	r7, r1
 800c426:	4699      	movge	r9, r3
 800c428:	693d      	ldr	r5, [r7, #16]
 800c42a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	6879      	ldr	r1, [r7, #4]
 800c432:	eb05 060a 	add.w	r6, r5, sl
 800c436:	42b3      	cmp	r3, r6
 800c438:	b085      	sub	sp, #20
 800c43a:	bfb8      	it	lt
 800c43c:	3101      	addlt	r1, #1
 800c43e:	f7ff fedd 	bl	800c1fc <_Balloc>
 800c442:	b930      	cbnz	r0, 800c452 <__multiply+0x42>
 800c444:	4602      	mov	r2, r0
 800c446:	4b41      	ldr	r3, [pc, #260]	@ (800c54c <__multiply+0x13c>)
 800c448:	4841      	ldr	r0, [pc, #260]	@ (800c550 <__multiply+0x140>)
 800c44a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c44e:	f000 fc0f 	bl	800cc70 <__assert_func>
 800c452:	f100 0414 	add.w	r4, r0, #20
 800c456:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c45a:	4623      	mov	r3, r4
 800c45c:	2200      	movs	r2, #0
 800c45e:	4573      	cmp	r3, lr
 800c460:	d320      	bcc.n	800c4a4 <__multiply+0x94>
 800c462:	f107 0814 	add.w	r8, r7, #20
 800c466:	f109 0114 	add.w	r1, r9, #20
 800c46a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c46e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c472:	9302      	str	r3, [sp, #8]
 800c474:	1beb      	subs	r3, r5, r7
 800c476:	3b15      	subs	r3, #21
 800c478:	f023 0303 	bic.w	r3, r3, #3
 800c47c:	3304      	adds	r3, #4
 800c47e:	3715      	adds	r7, #21
 800c480:	42bd      	cmp	r5, r7
 800c482:	bf38      	it	cc
 800c484:	2304      	movcc	r3, #4
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	9b02      	ldr	r3, [sp, #8]
 800c48a:	9103      	str	r1, [sp, #12]
 800c48c:	428b      	cmp	r3, r1
 800c48e:	d80c      	bhi.n	800c4aa <__multiply+0x9a>
 800c490:	2e00      	cmp	r6, #0
 800c492:	dd03      	ble.n	800c49c <__multiply+0x8c>
 800c494:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d055      	beq.n	800c548 <__multiply+0x138>
 800c49c:	6106      	str	r6, [r0, #16]
 800c49e:	b005      	add	sp, #20
 800c4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a4:	f843 2b04 	str.w	r2, [r3], #4
 800c4a8:	e7d9      	b.n	800c45e <__multiply+0x4e>
 800c4aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800c4ae:	f1ba 0f00 	cmp.w	sl, #0
 800c4b2:	d01f      	beq.n	800c4f4 <__multiply+0xe4>
 800c4b4:	46c4      	mov	ip, r8
 800c4b6:	46a1      	mov	r9, r4
 800c4b8:	2700      	movs	r7, #0
 800c4ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c4be:	f8d9 3000 	ldr.w	r3, [r9]
 800c4c2:	fa1f fb82 	uxth.w	fp, r2
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c4cc:	443b      	add	r3, r7
 800c4ce:	f8d9 7000 	ldr.w	r7, [r9]
 800c4d2:	0c12      	lsrs	r2, r2, #16
 800c4d4:	0c3f      	lsrs	r7, r7, #16
 800c4d6:	fb0a 7202 	mla	r2, sl, r2, r7
 800c4da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4e4:	4565      	cmp	r5, ip
 800c4e6:	f849 3b04 	str.w	r3, [r9], #4
 800c4ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c4ee:	d8e4      	bhi.n	800c4ba <__multiply+0xaa>
 800c4f0:	9b01      	ldr	r3, [sp, #4]
 800c4f2:	50e7      	str	r7, [r4, r3]
 800c4f4:	9b03      	ldr	r3, [sp, #12]
 800c4f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c4fa:	3104      	adds	r1, #4
 800c4fc:	f1b9 0f00 	cmp.w	r9, #0
 800c500:	d020      	beq.n	800c544 <__multiply+0x134>
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	4647      	mov	r7, r8
 800c506:	46a4      	mov	ip, r4
 800c508:	f04f 0a00 	mov.w	sl, #0
 800c50c:	f8b7 b000 	ldrh.w	fp, [r7]
 800c510:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c514:	fb09 220b 	mla	r2, r9, fp, r2
 800c518:	4452      	add	r2, sl
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c520:	f84c 3b04 	str.w	r3, [ip], #4
 800c524:	f857 3b04 	ldr.w	r3, [r7], #4
 800c528:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c52c:	f8bc 3000 	ldrh.w	r3, [ip]
 800c530:	fb09 330a 	mla	r3, r9, sl, r3
 800c534:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c538:	42bd      	cmp	r5, r7
 800c53a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c53e:	d8e5      	bhi.n	800c50c <__multiply+0xfc>
 800c540:	9a01      	ldr	r2, [sp, #4]
 800c542:	50a3      	str	r3, [r4, r2]
 800c544:	3404      	adds	r4, #4
 800c546:	e79f      	b.n	800c488 <__multiply+0x78>
 800c548:	3e01      	subs	r6, #1
 800c54a:	e7a1      	b.n	800c490 <__multiply+0x80>
 800c54c:	0800cffc 	.word	0x0800cffc
 800c550:	0800d01e 	.word	0x0800d01e

0800c554 <__pow5mult>:
 800c554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c558:	4615      	mov	r5, r2
 800c55a:	f012 0203 	ands.w	r2, r2, #3
 800c55e:	4607      	mov	r7, r0
 800c560:	460e      	mov	r6, r1
 800c562:	d007      	beq.n	800c574 <__pow5mult+0x20>
 800c564:	4c25      	ldr	r4, [pc, #148]	@ (800c5fc <__pow5mult+0xa8>)
 800c566:	3a01      	subs	r2, #1
 800c568:	2300      	movs	r3, #0
 800c56a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c56e:	f7ff fea7 	bl	800c2c0 <__multadd>
 800c572:	4606      	mov	r6, r0
 800c574:	10ad      	asrs	r5, r5, #2
 800c576:	d03d      	beq.n	800c5f4 <__pow5mult+0xa0>
 800c578:	69fc      	ldr	r4, [r7, #28]
 800c57a:	b97c      	cbnz	r4, 800c59c <__pow5mult+0x48>
 800c57c:	2010      	movs	r0, #16
 800c57e:	f7ff fcdb 	bl	800bf38 <malloc>
 800c582:	4602      	mov	r2, r0
 800c584:	61f8      	str	r0, [r7, #28]
 800c586:	b928      	cbnz	r0, 800c594 <__pow5mult+0x40>
 800c588:	4b1d      	ldr	r3, [pc, #116]	@ (800c600 <__pow5mult+0xac>)
 800c58a:	481e      	ldr	r0, [pc, #120]	@ (800c604 <__pow5mult+0xb0>)
 800c58c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c590:	f000 fb6e 	bl	800cc70 <__assert_func>
 800c594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c598:	6004      	str	r4, [r0, #0]
 800c59a:	60c4      	str	r4, [r0, #12]
 800c59c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c5a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5a4:	b94c      	cbnz	r4, 800c5ba <__pow5mult+0x66>
 800c5a6:	f240 2171 	movw	r1, #625	@ 0x271
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	f7ff ff1a 	bl	800c3e4 <__i2b>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	6003      	str	r3, [r0, #0]
 800c5ba:	f04f 0900 	mov.w	r9, #0
 800c5be:	07eb      	lsls	r3, r5, #31
 800c5c0:	d50a      	bpl.n	800c5d8 <__pow5mult+0x84>
 800c5c2:	4631      	mov	r1, r6
 800c5c4:	4622      	mov	r2, r4
 800c5c6:	4638      	mov	r0, r7
 800c5c8:	f7ff ff22 	bl	800c410 <__multiply>
 800c5cc:	4631      	mov	r1, r6
 800c5ce:	4680      	mov	r8, r0
 800c5d0:	4638      	mov	r0, r7
 800c5d2:	f7ff fe53 	bl	800c27c <_Bfree>
 800c5d6:	4646      	mov	r6, r8
 800c5d8:	106d      	asrs	r5, r5, #1
 800c5da:	d00b      	beq.n	800c5f4 <__pow5mult+0xa0>
 800c5dc:	6820      	ldr	r0, [r4, #0]
 800c5de:	b938      	cbnz	r0, 800c5f0 <__pow5mult+0x9c>
 800c5e0:	4622      	mov	r2, r4
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	f7ff ff13 	bl	800c410 <__multiply>
 800c5ea:	6020      	str	r0, [r4, #0]
 800c5ec:	f8c0 9000 	str.w	r9, [r0]
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	e7e4      	b.n	800c5be <__pow5mult+0x6a>
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5fa:	bf00      	nop
 800c5fc:	0800d1e0 	.word	0x0800d1e0
 800c600:	0800cf8d 	.word	0x0800cf8d
 800c604:	0800d01e 	.word	0x0800d01e

0800c608 <__lshift>:
 800c608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c60c:	460c      	mov	r4, r1
 800c60e:	6849      	ldr	r1, [r1, #4]
 800c610:	6923      	ldr	r3, [r4, #16]
 800c612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c616:	68a3      	ldr	r3, [r4, #8]
 800c618:	4607      	mov	r7, r0
 800c61a:	4691      	mov	r9, r2
 800c61c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c620:	f108 0601 	add.w	r6, r8, #1
 800c624:	42b3      	cmp	r3, r6
 800c626:	db0b      	blt.n	800c640 <__lshift+0x38>
 800c628:	4638      	mov	r0, r7
 800c62a:	f7ff fde7 	bl	800c1fc <_Balloc>
 800c62e:	4605      	mov	r5, r0
 800c630:	b948      	cbnz	r0, 800c646 <__lshift+0x3e>
 800c632:	4602      	mov	r2, r0
 800c634:	4b28      	ldr	r3, [pc, #160]	@ (800c6d8 <__lshift+0xd0>)
 800c636:	4829      	ldr	r0, [pc, #164]	@ (800c6dc <__lshift+0xd4>)
 800c638:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c63c:	f000 fb18 	bl	800cc70 <__assert_func>
 800c640:	3101      	adds	r1, #1
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	e7ee      	b.n	800c624 <__lshift+0x1c>
 800c646:	2300      	movs	r3, #0
 800c648:	f100 0114 	add.w	r1, r0, #20
 800c64c:	f100 0210 	add.w	r2, r0, #16
 800c650:	4618      	mov	r0, r3
 800c652:	4553      	cmp	r3, sl
 800c654:	db33      	blt.n	800c6be <__lshift+0xb6>
 800c656:	6920      	ldr	r0, [r4, #16]
 800c658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c65c:	f104 0314 	add.w	r3, r4, #20
 800c660:	f019 091f 	ands.w	r9, r9, #31
 800c664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c668:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c66c:	d02b      	beq.n	800c6c6 <__lshift+0xbe>
 800c66e:	f1c9 0e20 	rsb	lr, r9, #32
 800c672:	468a      	mov	sl, r1
 800c674:	2200      	movs	r2, #0
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	fa00 f009 	lsl.w	r0, r0, r9
 800c67c:	4310      	orrs	r0, r2
 800c67e:	f84a 0b04 	str.w	r0, [sl], #4
 800c682:	f853 2b04 	ldr.w	r2, [r3], #4
 800c686:	459c      	cmp	ip, r3
 800c688:	fa22 f20e 	lsr.w	r2, r2, lr
 800c68c:	d8f3      	bhi.n	800c676 <__lshift+0x6e>
 800c68e:	ebac 0304 	sub.w	r3, ip, r4
 800c692:	3b15      	subs	r3, #21
 800c694:	f023 0303 	bic.w	r3, r3, #3
 800c698:	3304      	adds	r3, #4
 800c69a:	f104 0015 	add.w	r0, r4, #21
 800c69e:	4560      	cmp	r0, ip
 800c6a0:	bf88      	it	hi
 800c6a2:	2304      	movhi	r3, #4
 800c6a4:	50ca      	str	r2, [r1, r3]
 800c6a6:	b10a      	cbz	r2, 800c6ac <__lshift+0xa4>
 800c6a8:	f108 0602 	add.w	r6, r8, #2
 800c6ac:	3e01      	subs	r6, #1
 800c6ae:	4638      	mov	r0, r7
 800c6b0:	612e      	str	r6, [r5, #16]
 800c6b2:	4621      	mov	r1, r4
 800c6b4:	f7ff fde2 	bl	800c27c <_Bfree>
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6be:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	e7c5      	b.n	800c652 <__lshift+0x4a>
 800c6c6:	3904      	subs	r1, #4
 800c6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6d0:	459c      	cmp	ip, r3
 800c6d2:	d8f9      	bhi.n	800c6c8 <__lshift+0xc0>
 800c6d4:	e7ea      	b.n	800c6ac <__lshift+0xa4>
 800c6d6:	bf00      	nop
 800c6d8:	0800cffc 	.word	0x0800cffc
 800c6dc:	0800d01e 	.word	0x0800d01e

0800c6e0 <__mcmp>:
 800c6e0:	690a      	ldr	r2, [r1, #16]
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	6900      	ldr	r0, [r0, #16]
 800c6e6:	1a80      	subs	r0, r0, r2
 800c6e8:	b530      	push	{r4, r5, lr}
 800c6ea:	d10e      	bne.n	800c70a <__mcmp+0x2a>
 800c6ec:	3314      	adds	r3, #20
 800c6ee:	3114      	adds	r1, #20
 800c6f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c6f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c6f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c700:	4295      	cmp	r5, r2
 800c702:	d003      	beq.n	800c70c <__mcmp+0x2c>
 800c704:	d205      	bcs.n	800c712 <__mcmp+0x32>
 800c706:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c70a:	bd30      	pop	{r4, r5, pc}
 800c70c:	42a3      	cmp	r3, r4
 800c70e:	d3f3      	bcc.n	800c6f8 <__mcmp+0x18>
 800c710:	e7fb      	b.n	800c70a <__mcmp+0x2a>
 800c712:	2001      	movs	r0, #1
 800c714:	e7f9      	b.n	800c70a <__mcmp+0x2a>
	...

0800c718 <__mdiff>:
 800c718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	4689      	mov	r9, r1
 800c71e:	4606      	mov	r6, r0
 800c720:	4611      	mov	r1, r2
 800c722:	4648      	mov	r0, r9
 800c724:	4614      	mov	r4, r2
 800c726:	f7ff ffdb 	bl	800c6e0 <__mcmp>
 800c72a:	1e05      	subs	r5, r0, #0
 800c72c:	d112      	bne.n	800c754 <__mdiff+0x3c>
 800c72e:	4629      	mov	r1, r5
 800c730:	4630      	mov	r0, r6
 800c732:	f7ff fd63 	bl	800c1fc <_Balloc>
 800c736:	4602      	mov	r2, r0
 800c738:	b928      	cbnz	r0, 800c746 <__mdiff+0x2e>
 800c73a:	4b3f      	ldr	r3, [pc, #252]	@ (800c838 <__mdiff+0x120>)
 800c73c:	f240 2137 	movw	r1, #567	@ 0x237
 800c740:	483e      	ldr	r0, [pc, #248]	@ (800c83c <__mdiff+0x124>)
 800c742:	f000 fa95 	bl	800cc70 <__assert_func>
 800c746:	2301      	movs	r3, #1
 800c748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c74c:	4610      	mov	r0, r2
 800c74e:	b003      	add	sp, #12
 800c750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c754:	bfbc      	itt	lt
 800c756:	464b      	movlt	r3, r9
 800c758:	46a1      	movlt	r9, r4
 800c75a:	4630      	mov	r0, r6
 800c75c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c760:	bfba      	itte	lt
 800c762:	461c      	movlt	r4, r3
 800c764:	2501      	movlt	r5, #1
 800c766:	2500      	movge	r5, #0
 800c768:	f7ff fd48 	bl	800c1fc <_Balloc>
 800c76c:	4602      	mov	r2, r0
 800c76e:	b918      	cbnz	r0, 800c778 <__mdiff+0x60>
 800c770:	4b31      	ldr	r3, [pc, #196]	@ (800c838 <__mdiff+0x120>)
 800c772:	f240 2145 	movw	r1, #581	@ 0x245
 800c776:	e7e3      	b.n	800c740 <__mdiff+0x28>
 800c778:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c77c:	6926      	ldr	r6, [r4, #16]
 800c77e:	60c5      	str	r5, [r0, #12]
 800c780:	f109 0310 	add.w	r3, r9, #16
 800c784:	f109 0514 	add.w	r5, r9, #20
 800c788:	f104 0e14 	add.w	lr, r4, #20
 800c78c:	f100 0b14 	add.w	fp, r0, #20
 800c790:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c794:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c798:	9301      	str	r3, [sp, #4]
 800c79a:	46d9      	mov	r9, fp
 800c79c:	f04f 0c00 	mov.w	ip, #0
 800c7a0:	9b01      	ldr	r3, [sp, #4]
 800c7a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c7a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	fa1f f38a 	uxth.w	r3, sl
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	b283      	uxth	r3, r0
 800c7b4:	1acb      	subs	r3, r1, r3
 800c7b6:	0c00      	lsrs	r0, r0, #16
 800c7b8:	4463      	add	r3, ip
 800c7ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c7be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c7c8:	4576      	cmp	r6, lr
 800c7ca:	f849 3b04 	str.w	r3, [r9], #4
 800c7ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7d2:	d8e5      	bhi.n	800c7a0 <__mdiff+0x88>
 800c7d4:	1b33      	subs	r3, r6, r4
 800c7d6:	3b15      	subs	r3, #21
 800c7d8:	f023 0303 	bic.w	r3, r3, #3
 800c7dc:	3415      	adds	r4, #21
 800c7de:	3304      	adds	r3, #4
 800c7e0:	42a6      	cmp	r6, r4
 800c7e2:	bf38      	it	cc
 800c7e4:	2304      	movcc	r3, #4
 800c7e6:	441d      	add	r5, r3
 800c7e8:	445b      	add	r3, fp
 800c7ea:	461e      	mov	r6, r3
 800c7ec:	462c      	mov	r4, r5
 800c7ee:	4544      	cmp	r4, r8
 800c7f0:	d30e      	bcc.n	800c810 <__mdiff+0xf8>
 800c7f2:	f108 0103 	add.w	r1, r8, #3
 800c7f6:	1b49      	subs	r1, r1, r5
 800c7f8:	f021 0103 	bic.w	r1, r1, #3
 800c7fc:	3d03      	subs	r5, #3
 800c7fe:	45a8      	cmp	r8, r5
 800c800:	bf38      	it	cc
 800c802:	2100      	movcc	r1, #0
 800c804:	440b      	add	r3, r1
 800c806:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c80a:	b191      	cbz	r1, 800c832 <__mdiff+0x11a>
 800c80c:	6117      	str	r7, [r2, #16]
 800c80e:	e79d      	b.n	800c74c <__mdiff+0x34>
 800c810:	f854 1b04 	ldr.w	r1, [r4], #4
 800c814:	46e6      	mov	lr, ip
 800c816:	0c08      	lsrs	r0, r1, #16
 800c818:	fa1c fc81 	uxtah	ip, ip, r1
 800c81c:	4471      	add	r1, lr
 800c81e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c822:	b289      	uxth	r1, r1
 800c824:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c828:	f846 1b04 	str.w	r1, [r6], #4
 800c82c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c830:	e7dd      	b.n	800c7ee <__mdiff+0xd6>
 800c832:	3f01      	subs	r7, #1
 800c834:	e7e7      	b.n	800c806 <__mdiff+0xee>
 800c836:	bf00      	nop
 800c838:	0800cffc 	.word	0x0800cffc
 800c83c:	0800d01e 	.word	0x0800d01e

0800c840 <__d2b>:
 800c840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c844:	460f      	mov	r7, r1
 800c846:	2101      	movs	r1, #1
 800c848:	ec59 8b10 	vmov	r8, r9, d0
 800c84c:	4616      	mov	r6, r2
 800c84e:	f7ff fcd5 	bl	800c1fc <_Balloc>
 800c852:	4604      	mov	r4, r0
 800c854:	b930      	cbnz	r0, 800c864 <__d2b+0x24>
 800c856:	4602      	mov	r2, r0
 800c858:	4b23      	ldr	r3, [pc, #140]	@ (800c8e8 <__d2b+0xa8>)
 800c85a:	4824      	ldr	r0, [pc, #144]	@ (800c8ec <__d2b+0xac>)
 800c85c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c860:	f000 fa06 	bl	800cc70 <__assert_func>
 800c864:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c86c:	b10d      	cbz	r5, 800c872 <__d2b+0x32>
 800c86e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	f1b8 0300 	subs.w	r3, r8, #0
 800c878:	d023      	beq.n	800c8c2 <__d2b+0x82>
 800c87a:	4668      	mov	r0, sp
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	f7ff fd84 	bl	800c38a <__lo0bits>
 800c882:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c886:	b1d0      	cbz	r0, 800c8be <__d2b+0x7e>
 800c888:	f1c0 0320 	rsb	r3, r0, #32
 800c88c:	fa02 f303 	lsl.w	r3, r2, r3
 800c890:	430b      	orrs	r3, r1
 800c892:	40c2      	lsrs	r2, r0
 800c894:	6163      	str	r3, [r4, #20]
 800c896:	9201      	str	r2, [sp, #4]
 800c898:	9b01      	ldr	r3, [sp, #4]
 800c89a:	61a3      	str	r3, [r4, #24]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	bf0c      	ite	eq
 800c8a0:	2201      	moveq	r2, #1
 800c8a2:	2202      	movne	r2, #2
 800c8a4:	6122      	str	r2, [r4, #16]
 800c8a6:	b1a5      	cbz	r5, 800c8d2 <__d2b+0x92>
 800c8a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8ac:	4405      	add	r5, r0
 800c8ae:	603d      	str	r5, [r7, #0]
 800c8b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8b4:	6030      	str	r0, [r6, #0]
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	b003      	add	sp, #12
 800c8ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8be:	6161      	str	r1, [r4, #20]
 800c8c0:	e7ea      	b.n	800c898 <__d2b+0x58>
 800c8c2:	a801      	add	r0, sp, #4
 800c8c4:	f7ff fd61 	bl	800c38a <__lo0bits>
 800c8c8:	9b01      	ldr	r3, [sp, #4]
 800c8ca:	6163      	str	r3, [r4, #20]
 800c8cc:	3020      	adds	r0, #32
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	e7e8      	b.n	800c8a4 <__d2b+0x64>
 800c8d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c8da:	6038      	str	r0, [r7, #0]
 800c8dc:	6918      	ldr	r0, [r3, #16]
 800c8de:	f7ff fd35 	bl	800c34c <__hi0bits>
 800c8e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8e6:	e7e5      	b.n	800c8b4 <__d2b+0x74>
 800c8e8:	0800cffc 	.word	0x0800cffc
 800c8ec:	0800d01e 	.word	0x0800d01e

0800c8f0 <__sread>:
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	460c      	mov	r4, r1
 800c8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8f8:	f000 f956 	bl	800cba8 <_read_r>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	bfab      	itete	ge
 800c900:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c902:	89a3      	ldrhlt	r3, [r4, #12]
 800c904:	181b      	addge	r3, r3, r0
 800c906:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c90a:	bfac      	ite	ge
 800c90c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c90e:	81a3      	strhlt	r3, [r4, #12]
 800c910:	bd10      	pop	{r4, pc}

0800c912 <__swrite>:
 800c912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c916:	461f      	mov	r7, r3
 800c918:	898b      	ldrh	r3, [r1, #12]
 800c91a:	05db      	lsls	r3, r3, #23
 800c91c:	4605      	mov	r5, r0
 800c91e:	460c      	mov	r4, r1
 800c920:	4616      	mov	r6, r2
 800c922:	d505      	bpl.n	800c930 <__swrite+0x1e>
 800c924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c928:	2302      	movs	r3, #2
 800c92a:	2200      	movs	r2, #0
 800c92c:	f000 f92a 	bl	800cb84 <_lseek_r>
 800c930:	89a3      	ldrh	r3, [r4, #12]
 800c932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c936:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c93a:	81a3      	strh	r3, [r4, #12]
 800c93c:	4632      	mov	r2, r6
 800c93e:	463b      	mov	r3, r7
 800c940:	4628      	mov	r0, r5
 800c942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c946:	f000 b951 	b.w	800cbec <_write_r>

0800c94a <__sseek>:
 800c94a:	b510      	push	{r4, lr}
 800c94c:	460c      	mov	r4, r1
 800c94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c952:	f000 f917 	bl	800cb84 <_lseek_r>
 800c956:	1c43      	adds	r3, r0, #1
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	bf15      	itete	ne
 800c95c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c95e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c962:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c966:	81a3      	strheq	r3, [r4, #12]
 800c968:	bf18      	it	ne
 800c96a:	81a3      	strhne	r3, [r4, #12]
 800c96c:	bd10      	pop	{r4, pc}

0800c96e <__sclose>:
 800c96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c972:	f000 b94d 	b.w	800cc10 <_close_r>

0800c976 <__swbuf_r>:
 800c976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c978:	460e      	mov	r6, r1
 800c97a:	4614      	mov	r4, r2
 800c97c:	4605      	mov	r5, r0
 800c97e:	b118      	cbz	r0, 800c988 <__swbuf_r+0x12>
 800c980:	6a03      	ldr	r3, [r0, #32]
 800c982:	b90b      	cbnz	r3, 800c988 <__swbuf_r+0x12>
 800c984:	f7fe face 	bl	800af24 <__sinit>
 800c988:	69a3      	ldr	r3, [r4, #24]
 800c98a:	60a3      	str	r3, [r4, #8]
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	071a      	lsls	r2, r3, #28
 800c990:	d501      	bpl.n	800c996 <__swbuf_r+0x20>
 800c992:	6923      	ldr	r3, [r4, #16]
 800c994:	b943      	cbnz	r3, 800c9a8 <__swbuf_r+0x32>
 800c996:	4621      	mov	r1, r4
 800c998:	4628      	mov	r0, r5
 800c99a:	f000 f82b 	bl	800c9f4 <__swsetup_r>
 800c99e:	b118      	cbz	r0, 800c9a8 <__swbuf_r+0x32>
 800c9a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a8:	6823      	ldr	r3, [r4, #0]
 800c9aa:	6922      	ldr	r2, [r4, #16]
 800c9ac:	1a98      	subs	r0, r3, r2
 800c9ae:	6963      	ldr	r3, [r4, #20]
 800c9b0:	b2f6      	uxtb	r6, r6
 800c9b2:	4283      	cmp	r3, r0
 800c9b4:	4637      	mov	r7, r6
 800c9b6:	dc05      	bgt.n	800c9c4 <__swbuf_r+0x4e>
 800c9b8:	4621      	mov	r1, r4
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	f7ff fbea 	bl	800c194 <_fflush_r>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d1ed      	bne.n	800c9a0 <__swbuf_r+0x2a>
 800c9c4:	68a3      	ldr	r3, [r4, #8]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	60a3      	str	r3, [r4, #8]
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	1c5a      	adds	r2, r3, #1
 800c9ce:	6022      	str	r2, [r4, #0]
 800c9d0:	701e      	strb	r6, [r3, #0]
 800c9d2:	6962      	ldr	r2, [r4, #20]
 800c9d4:	1c43      	adds	r3, r0, #1
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d004      	beq.n	800c9e4 <__swbuf_r+0x6e>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	07db      	lsls	r3, r3, #31
 800c9de:	d5e1      	bpl.n	800c9a4 <__swbuf_r+0x2e>
 800c9e0:	2e0a      	cmp	r6, #10
 800c9e2:	d1df      	bne.n	800c9a4 <__swbuf_r+0x2e>
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f7ff fbd4 	bl	800c194 <_fflush_r>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d0d9      	beq.n	800c9a4 <__swbuf_r+0x2e>
 800c9f0:	e7d6      	b.n	800c9a0 <__swbuf_r+0x2a>
	...

0800c9f4 <__swsetup_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4b29      	ldr	r3, [pc, #164]	@ (800ca9c <__swsetup_r+0xa8>)
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	6818      	ldr	r0, [r3, #0]
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	b118      	cbz	r0, 800ca08 <__swsetup_r+0x14>
 800ca00:	6a03      	ldr	r3, [r0, #32]
 800ca02:	b90b      	cbnz	r3, 800ca08 <__swsetup_r+0x14>
 800ca04:	f7fe fa8e 	bl	800af24 <__sinit>
 800ca08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca0c:	0719      	lsls	r1, r3, #28
 800ca0e:	d422      	bmi.n	800ca56 <__swsetup_r+0x62>
 800ca10:	06da      	lsls	r2, r3, #27
 800ca12:	d407      	bmi.n	800ca24 <__swsetup_r+0x30>
 800ca14:	2209      	movs	r2, #9
 800ca16:	602a      	str	r2, [r5, #0]
 800ca18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca1c:	81a3      	strh	r3, [r4, #12]
 800ca1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca22:	e033      	b.n	800ca8c <__swsetup_r+0x98>
 800ca24:	0758      	lsls	r0, r3, #29
 800ca26:	d512      	bpl.n	800ca4e <__swsetup_r+0x5a>
 800ca28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca2a:	b141      	cbz	r1, 800ca3e <__swsetup_r+0x4a>
 800ca2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca30:	4299      	cmp	r1, r3
 800ca32:	d002      	beq.n	800ca3a <__swsetup_r+0x46>
 800ca34:	4628      	mov	r0, r5
 800ca36:	f000 f94d 	bl	800ccd4 <_free_r>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca44:	81a3      	strh	r3, [r4, #12]
 800ca46:	2300      	movs	r3, #0
 800ca48:	6063      	str	r3, [r4, #4]
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	6023      	str	r3, [r4, #0]
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	f043 0308 	orr.w	r3, r3, #8
 800ca54:	81a3      	strh	r3, [r4, #12]
 800ca56:	6923      	ldr	r3, [r4, #16]
 800ca58:	b94b      	cbnz	r3, 800ca6e <__swsetup_r+0x7a>
 800ca5a:	89a3      	ldrh	r3, [r4, #12]
 800ca5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca64:	d003      	beq.n	800ca6e <__swsetup_r+0x7a>
 800ca66:	4621      	mov	r1, r4
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f000 f83f 	bl	800caec <__smakebuf_r>
 800ca6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca72:	f013 0201 	ands.w	r2, r3, #1
 800ca76:	d00a      	beq.n	800ca8e <__swsetup_r+0x9a>
 800ca78:	2200      	movs	r2, #0
 800ca7a:	60a2      	str	r2, [r4, #8]
 800ca7c:	6962      	ldr	r2, [r4, #20]
 800ca7e:	4252      	negs	r2, r2
 800ca80:	61a2      	str	r2, [r4, #24]
 800ca82:	6922      	ldr	r2, [r4, #16]
 800ca84:	b942      	cbnz	r2, 800ca98 <__swsetup_r+0xa4>
 800ca86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca8a:	d1c5      	bne.n	800ca18 <__swsetup_r+0x24>
 800ca8c:	bd38      	pop	{r3, r4, r5, pc}
 800ca8e:	0799      	lsls	r1, r3, #30
 800ca90:	bf58      	it	pl
 800ca92:	6962      	ldrpl	r2, [r4, #20]
 800ca94:	60a2      	str	r2, [r4, #8]
 800ca96:	e7f4      	b.n	800ca82 <__swsetup_r+0x8e>
 800ca98:	2000      	movs	r0, #0
 800ca9a:	e7f7      	b.n	800ca8c <__swsetup_r+0x98>
 800ca9c:	2400001c 	.word	0x2400001c

0800caa0 <__swhatbuf_r>:
 800caa0:	b570      	push	{r4, r5, r6, lr}
 800caa2:	460c      	mov	r4, r1
 800caa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa8:	2900      	cmp	r1, #0
 800caaa:	b096      	sub	sp, #88	@ 0x58
 800caac:	4615      	mov	r5, r2
 800caae:	461e      	mov	r6, r3
 800cab0:	da0d      	bge.n	800cace <__swhatbuf_r+0x2e>
 800cab2:	89a3      	ldrh	r3, [r4, #12]
 800cab4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cab8:	f04f 0100 	mov.w	r1, #0
 800cabc:	bf14      	ite	ne
 800cabe:	2340      	movne	r3, #64	@ 0x40
 800cac0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cac4:	2000      	movs	r0, #0
 800cac6:	6031      	str	r1, [r6, #0]
 800cac8:	602b      	str	r3, [r5, #0]
 800caca:	b016      	add	sp, #88	@ 0x58
 800cacc:	bd70      	pop	{r4, r5, r6, pc}
 800cace:	466a      	mov	r2, sp
 800cad0:	f000 f8ae 	bl	800cc30 <_fstat_r>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	dbec      	blt.n	800cab2 <__swhatbuf_r+0x12>
 800cad8:	9901      	ldr	r1, [sp, #4]
 800cada:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cade:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cae2:	4259      	negs	r1, r3
 800cae4:	4159      	adcs	r1, r3
 800cae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800caea:	e7eb      	b.n	800cac4 <__swhatbuf_r+0x24>

0800caec <__smakebuf_r>:
 800caec:	898b      	ldrh	r3, [r1, #12]
 800caee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caf0:	079d      	lsls	r5, r3, #30
 800caf2:	4606      	mov	r6, r0
 800caf4:	460c      	mov	r4, r1
 800caf6:	d507      	bpl.n	800cb08 <__smakebuf_r+0x1c>
 800caf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	6123      	str	r3, [r4, #16]
 800cb00:	2301      	movs	r3, #1
 800cb02:	6163      	str	r3, [r4, #20]
 800cb04:	b003      	add	sp, #12
 800cb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb08:	ab01      	add	r3, sp, #4
 800cb0a:	466a      	mov	r2, sp
 800cb0c:	f7ff ffc8 	bl	800caa0 <__swhatbuf_r>
 800cb10:	9f00      	ldr	r7, [sp, #0]
 800cb12:	4605      	mov	r5, r0
 800cb14:	4639      	mov	r1, r7
 800cb16:	4630      	mov	r0, r6
 800cb18:	f7ff fa38 	bl	800bf8c <_malloc_r>
 800cb1c:	b948      	cbnz	r0, 800cb32 <__smakebuf_r+0x46>
 800cb1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb22:	059a      	lsls	r2, r3, #22
 800cb24:	d4ee      	bmi.n	800cb04 <__smakebuf_r+0x18>
 800cb26:	f023 0303 	bic.w	r3, r3, #3
 800cb2a:	f043 0302 	orr.w	r3, r3, #2
 800cb2e:	81a3      	strh	r3, [r4, #12]
 800cb30:	e7e2      	b.n	800caf8 <__smakebuf_r+0xc>
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	6020      	str	r0, [r4, #0]
 800cb36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb3a:	81a3      	strh	r3, [r4, #12]
 800cb3c:	9b01      	ldr	r3, [sp, #4]
 800cb3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb42:	b15b      	cbz	r3, 800cb5c <__smakebuf_r+0x70>
 800cb44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f000 f80b 	bl	800cb64 <_isatty_r>
 800cb4e:	b128      	cbz	r0, 800cb5c <__smakebuf_r+0x70>
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	f023 0303 	bic.w	r3, r3, #3
 800cb56:	f043 0301 	orr.w	r3, r3, #1
 800cb5a:	81a3      	strh	r3, [r4, #12]
 800cb5c:	89a3      	ldrh	r3, [r4, #12]
 800cb5e:	431d      	orrs	r5, r3
 800cb60:	81a5      	strh	r5, [r4, #12]
 800cb62:	e7cf      	b.n	800cb04 <__smakebuf_r+0x18>

0800cb64 <_isatty_r>:
 800cb64:	b538      	push	{r3, r4, r5, lr}
 800cb66:	4d06      	ldr	r5, [pc, #24]	@ (800cb80 <_isatty_r+0x1c>)
 800cb68:	2300      	movs	r3, #0
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	4608      	mov	r0, r1
 800cb6e:	602b      	str	r3, [r5, #0]
 800cb70:	f7f4 fb10 	bl	8001194 <_isatty>
 800cb74:	1c43      	adds	r3, r0, #1
 800cb76:	d102      	bne.n	800cb7e <_isatty_r+0x1a>
 800cb78:	682b      	ldr	r3, [r5, #0]
 800cb7a:	b103      	cbz	r3, 800cb7e <_isatty_r+0x1a>
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	bd38      	pop	{r3, r4, r5, pc}
 800cb80:	24000cec 	.word	0x24000cec

0800cb84 <_lseek_r>:
 800cb84:	b538      	push	{r3, r4, r5, lr}
 800cb86:	4d07      	ldr	r5, [pc, #28]	@ (800cba4 <_lseek_r+0x20>)
 800cb88:	4604      	mov	r4, r0
 800cb8a:	4608      	mov	r0, r1
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	2200      	movs	r2, #0
 800cb90:	602a      	str	r2, [r5, #0]
 800cb92:	461a      	mov	r2, r3
 800cb94:	f7f4 fb09 	bl	80011aa <_lseek>
 800cb98:	1c43      	adds	r3, r0, #1
 800cb9a:	d102      	bne.n	800cba2 <_lseek_r+0x1e>
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	b103      	cbz	r3, 800cba2 <_lseek_r+0x1e>
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	bd38      	pop	{r3, r4, r5, pc}
 800cba4:	24000cec 	.word	0x24000cec

0800cba8 <_read_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d07      	ldr	r5, [pc, #28]	@ (800cbc8 <_read_r+0x20>)
 800cbac:	4604      	mov	r4, r0
 800cbae:	4608      	mov	r0, r1
 800cbb0:	4611      	mov	r1, r2
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	602a      	str	r2, [r5, #0]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	f7f4 fab3 	bl	8001122 <_read>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_read_r+0x1e>
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_read_r+0x1e>
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	24000cec 	.word	0x24000cec

0800cbcc <_sbrk_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4d06      	ldr	r5, [pc, #24]	@ (800cbe8 <_sbrk_r+0x1c>)
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	4608      	mov	r0, r1
 800cbd6:	602b      	str	r3, [r5, #0]
 800cbd8:	f7f4 faf4 	bl	80011c4 <_sbrk>
 800cbdc:	1c43      	adds	r3, r0, #1
 800cbde:	d102      	bne.n	800cbe6 <_sbrk_r+0x1a>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	b103      	cbz	r3, 800cbe6 <_sbrk_r+0x1a>
 800cbe4:	6023      	str	r3, [r4, #0]
 800cbe6:	bd38      	pop	{r3, r4, r5, pc}
 800cbe8:	24000cec 	.word	0x24000cec

0800cbec <_write_r>:
 800cbec:	b538      	push	{r3, r4, r5, lr}
 800cbee:	4d07      	ldr	r5, [pc, #28]	@ (800cc0c <_write_r+0x20>)
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	4608      	mov	r0, r1
 800cbf4:	4611      	mov	r1, r2
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	602a      	str	r2, [r5, #0]
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	f7f3 fe76 	bl	80008ec <_write>
 800cc00:	1c43      	adds	r3, r0, #1
 800cc02:	d102      	bne.n	800cc0a <_write_r+0x1e>
 800cc04:	682b      	ldr	r3, [r5, #0]
 800cc06:	b103      	cbz	r3, 800cc0a <_write_r+0x1e>
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	bd38      	pop	{r3, r4, r5, pc}
 800cc0c:	24000cec 	.word	0x24000cec

0800cc10 <_close_r>:
 800cc10:	b538      	push	{r3, r4, r5, lr}
 800cc12:	4d06      	ldr	r5, [pc, #24]	@ (800cc2c <_close_r+0x1c>)
 800cc14:	2300      	movs	r3, #0
 800cc16:	4604      	mov	r4, r0
 800cc18:	4608      	mov	r0, r1
 800cc1a:	602b      	str	r3, [r5, #0]
 800cc1c:	f7f4 fa9e 	bl	800115c <_close>
 800cc20:	1c43      	adds	r3, r0, #1
 800cc22:	d102      	bne.n	800cc2a <_close_r+0x1a>
 800cc24:	682b      	ldr	r3, [r5, #0]
 800cc26:	b103      	cbz	r3, 800cc2a <_close_r+0x1a>
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	bd38      	pop	{r3, r4, r5, pc}
 800cc2c:	24000cec 	.word	0x24000cec

0800cc30 <_fstat_r>:
 800cc30:	b538      	push	{r3, r4, r5, lr}
 800cc32:	4d07      	ldr	r5, [pc, #28]	@ (800cc50 <_fstat_r+0x20>)
 800cc34:	2300      	movs	r3, #0
 800cc36:	4604      	mov	r4, r0
 800cc38:	4608      	mov	r0, r1
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	602b      	str	r3, [r5, #0]
 800cc3e:	f7f4 fa99 	bl	8001174 <_fstat>
 800cc42:	1c43      	adds	r3, r0, #1
 800cc44:	d102      	bne.n	800cc4c <_fstat_r+0x1c>
 800cc46:	682b      	ldr	r3, [r5, #0]
 800cc48:	b103      	cbz	r3, 800cc4c <_fstat_r+0x1c>
 800cc4a:	6023      	str	r3, [r4, #0]
 800cc4c:	bd38      	pop	{r3, r4, r5, pc}
 800cc4e:	bf00      	nop
 800cc50:	24000cec 	.word	0x24000cec

0800cc54 <memcpy>:
 800cc54:	440a      	add	r2, r1
 800cc56:	4291      	cmp	r1, r2
 800cc58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cc5c:	d100      	bne.n	800cc60 <memcpy+0xc>
 800cc5e:	4770      	bx	lr
 800cc60:	b510      	push	{r4, lr}
 800cc62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc6a:	4291      	cmp	r1, r2
 800cc6c:	d1f9      	bne.n	800cc62 <memcpy+0xe>
 800cc6e:	bd10      	pop	{r4, pc}

0800cc70 <__assert_func>:
 800cc70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc72:	4614      	mov	r4, r2
 800cc74:	461a      	mov	r2, r3
 800cc76:	4b09      	ldr	r3, [pc, #36]	@ (800cc9c <__assert_func+0x2c>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	68d8      	ldr	r0, [r3, #12]
 800cc7e:	b14c      	cbz	r4, 800cc94 <__assert_func+0x24>
 800cc80:	4b07      	ldr	r3, [pc, #28]	@ (800cca0 <__assert_func+0x30>)
 800cc82:	9100      	str	r1, [sp, #0]
 800cc84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc88:	4906      	ldr	r1, [pc, #24]	@ (800cca4 <__assert_func+0x34>)
 800cc8a:	462b      	mov	r3, r5
 800cc8c:	f000 f87e 	bl	800cd8c <fiprintf>
 800cc90:	f000 f89b 	bl	800cdca <abort>
 800cc94:	4b04      	ldr	r3, [pc, #16]	@ (800cca8 <__assert_func+0x38>)
 800cc96:	461c      	mov	r4, r3
 800cc98:	e7f3      	b.n	800cc82 <__assert_func+0x12>
 800cc9a:	bf00      	nop
 800cc9c:	2400001c 	.word	0x2400001c
 800cca0:	0800d081 	.word	0x0800d081
 800cca4:	0800d08e 	.word	0x0800d08e
 800cca8:	0800d0bc 	.word	0x0800d0bc

0800ccac <_calloc_r>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	fba1 5402 	umull	r5, r4, r1, r2
 800ccb2:	b934      	cbnz	r4, 800ccc2 <_calloc_r+0x16>
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	f7ff f969 	bl	800bf8c <_malloc_r>
 800ccba:	4606      	mov	r6, r0
 800ccbc:	b928      	cbnz	r0, 800ccca <_calloc_r+0x1e>
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	bd70      	pop	{r4, r5, r6, pc}
 800ccc2:	220c      	movs	r2, #12
 800ccc4:	6002      	str	r2, [r0, #0]
 800ccc6:	2600      	movs	r6, #0
 800ccc8:	e7f9      	b.n	800ccbe <_calloc_r+0x12>
 800ccca:	462a      	mov	r2, r5
 800cccc:	4621      	mov	r1, r4
 800ccce:	f7fe f9cf 	bl	800b070 <memset>
 800ccd2:	e7f4      	b.n	800ccbe <_calloc_r+0x12>

0800ccd4 <_free_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4605      	mov	r5, r0
 800ccd8:	2900      	cmp	r1, #0
 800ccda:	d041      	beq.n	800cd60 <_free_r+0x8c>
 800ccdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cce0:	1f0c      	subs	r4, r1, #4
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	bfb8      	it	lt
 800cce6:	18e4      	addlt	r4, r4, r3
 800cce8:	f7ff fa7c 	bl	800c1e4 <__malloc_lock>
 800ccec:	4a1d      	ldr	r2, [pc, #116]	@ (800cd64 <_free_r+0x90>)
 800ccee:	6813      	ldr	r3, [r2, #0]
 800ccf0:	b933      	cbnz	r3, 800cd00 <_free_r+0x2c>
 800ccf2:	6063      	str	r3, [r4, #4]
 800ccf4:	6014      	str	r4, [r2, #0]
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccfc:	f7ff ba78 	b.w	800c1f0 <__malloc_unlock>
 800cd00:	42a3      	cmp	r3, r4
 800cd02:	d908      	bls.n	800cd16 <_free_r+0x42>
 800cd04:	6820      	ldr	r0, [r4, #0]
 800cd06:	1821      	adds	r1, r4, r0
 800cd08:	428b      	cmp	r3, r1
 800cd0a:	bf01      	itttt	eq
 800cd0c:	6819      	ldreq	r1, [r3, #0]
 800cd0e:	685b      	ldreq	r3, [r3, #4]
 800cd10:	1809      	addeq	r1, r1, r0
 800cd12:	6021      	streq	r1, [r4, #0]
 800cd14:	e7ed      	b.n	800ccf2 <_free_r+0x1e>
 800cd16:	461a      	mov	r2, r3
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	b10b      	cbz	r3, 800cd20 <_free_r+0x4c>
 800cd1c:	42a3      	cmp	r3, r4
 800cd1e:	d9fa      	bls.n	800cd16 <_free_r+0x42>
 800cd20:	6811      	ldr	r1, [r2, #0]
 800cd22:	1850      	adds	r0, r2, r1
 800cd24:	42a0      	cmp	r0, r4
 800cd26:	d10b      	bne.n	800cd40 <_free_r+0x6c>
 800cd28:	6820      	ldr	r0, [r4, #0]
 800cd2a:	4401      	add	r1, r0
 800cd2c:	1850      	adds	r0, r2, r1
 800cd2e:	4283      	cmp	r3, r0
 800cd30:	6011      	str	r1, [r2, #0]
 800cd32:	d1e0      	bne.n	800ccf6 <_free_r+0x22>
 800cd34:	6818      	ldr	r0, [r3, #0]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	6053      	str	r3, [r2, #4]
 800cd3a:	4408      	add	r0, r1
 800cd3c:	6010      	str	r0, [r2, #0]
 800cd3e:	e7da      	b.n	800ccf6 <_free_r+0x22>
 800cd40:	d902      	bls.n	800cd48 <_free_r+0x74>
 800cd42:	230c      	movs	r3, #12
 800cd44:	602b      	str	r3, [r5, #0]
 800cd46:	e7d6      	b.n	800ccf6 <_free_r+0x22>
 800cd48:	6820      	ldr	r0, [r4, #0]
 800cd4a:	1821      	adds	r1, r4, r0
 800cd4c:	428b      	cmp	r3, r1
 800cd4e:	bf04      	itt	eq
 800cd50:	6819      	ldreq	r1, [r3, #0]
 800cd52:	685b      	ldreq	r3, [r3, #4]
 800cd54:	6063      	str	r3, [r4, #4]
 800cd56:	bf04      	itt	eq
 800cd58:	1809      	addeq	r1, r1, r0
 800cd5a:	6021      	streq	r1, [r4, #0]
 800cd5c:	6054      	str	r4, [r2, #4]
 800cd5e:	e7ca      	b.n	800ccf6 <_free_r+0x22>
 800cd60:	bd38      	pop	{r3, r4, r5, pc}
 800cd62:	bf00      	nop
 800cd64:	24000ce8 	.word	0x24000ce8

0800cd68 <__ascii_mbtowc>:
 800cd68:	b082      	sub	sp, #8
 800cd6a:	b901      	cbnz	r1, 800cd6e <__ascii_mbtowc+0x6>
 800cd6c:	a901      	add	r1, sp, #4
 800cd6e:	b142      	cbz	r2, 800cd82 <__ascii_mbtowc+0x1a>
 800cd70:	b14b      	cbz	r3, 800cd86 <__ascii_mbtowc+0x1e>
 800cd72:	7813      	ldrb	r3, [r2, #0]
 800cd74:	600b      	str	r3, [r1, #0]
 800cd76:	7812      	ldrb	r2, [r2, #0]
 800cd78:	1e10      	subs	r0, r2, #0
 800cd7a:	bf18      	it	ne
 800cd7c:	2001      	movne	r0, #1
 800cd7e:	b002      	add	sp, #8
 800cd80:	4770      	bx	lr
 800cd82:	4610      	mov	r0, r2
 800cd84:	e7fb      	b.n	800cd7e <__ascii_mbtowc+0x16>
 800cd86:	f06f 0001 	mvn.w	r0, #1
 800cd8a:	e7f8      	b.n	800cd7e <__ascii_mbtowc+0x16>

0800cd8c <fiprintf>:
 800cd8c:	b40e      	push	{r1, r2, r3}
 800cd8e:	b503      	push	{r0, r1, lr}
 800cd90:	4601      	mov	r1, r0
 800cd92:	ab03      	add	r3, sp, #12
 800cd94:	4805      	ldr	r0, [pc, #20]	@ (800cdac <fiprintf+0x20>)
 800cd96:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd9a:	6800      	ldr	r0, [r0, #0]
 800cd9c:	9301      	str	r3, [sp, #4]
 800cd9e:	f7fe ffb3 	bl	800bd08 <_vfiprintf_r>
 800cda2:	b002      	add	sp, #8
 800cda4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cda8:	b003      	add	sp, #12
 800cdaa:	4770      	bx	lr
 800cdac:	2400001c 	.word	0x2400001c

0800cdb0 <__ascii_wctomb>:
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	4608      	mov	r0, r1
 800cdb4:	b141      	cbz	r1, 800cdc8 <__ascii_wctomb+0x18>
 800cdb6:	2aff      	cmp	r2, #255	@ 0xff
 800cdb8:	d904      	bls.n	800cdc4 <__ascii_wctomb+0x14>
 800cdba:	228a      	movs	r2, #138	@ 0x8a
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cdc2:	4770      	bx	lr
 800cdc4:	700a      	strb	r2, [r1, #0]
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	4770      	bx	lr

0800cdca <abort>:
 800cdca:	b508      	push	{r3, lr}
 800cdcc:	2006      	movs	r0, #6
 800cdce:	f000 f82b 	bl	800ce28 <raise>
 800cdd2:	2001      	movs	r0, #1
 800cdd4:	f7f4 f99a 	bl	800110c <_exit>

0800cdd8 <_raise_r>:
 800cdd8:	291f      	cmp	r1, #31
 800cdda:	b538      	push	{r3, r4, r5, lr}
 800cddc:	4605      	mov	r5, r0
 800cdde:	460c      	mov	r4, r1
 800cde0:	d904      	bls.n	800cdec <_raise_r+0x14>
 800cde2:	2316      	movs	r3, #22
 800cde4:	6003      	str	r3, [r0, #0]
 800cde6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cdea:	bd38      	pop	{r3, r4, r5, pc}
 800cdec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cdee:	b112      	cbz	r2, 800cdf6 <_raise_r+0x1e>
 800cdf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdf4:	b94b      	cbnz	r3, 800ce0a <_raise_r+0x32>
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f000 f830 	bl	800ce5c <_getpid_r>
 800cdfc:	4622      	mov	r2, r4
 800cdfe:	4601      	mov	r1, r0
 800ce00:	4628      	mov	r0, r5
 800ce02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce06:	f000 b817 	b.w	800ce38 <_kill_r>
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d00a      	beq.n	800ce24 <_raise_r+0x4c>
 800ce0e:	1c59      	adds	r1, r3, #1
 800ce10:	d103      	bne.n	800ce1a <_raise_r+0x42>
 800ce12:	2316      	movs	r3, #22
 800ce14:	6003      	str	r3, [r0, #0]
 800ce16:	2001      	movs	r0, #1
 800ce18:	e7e7      	b.n	800cdea <_raise_r+0x12>
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ce20:	4620      	mov	r0, r4
 800ce22:	4798      	blx	r3
 800ce24:	2000      	movs	r0, #0
 800ce26:	e7e0      	b.n	800cdea <_raise_r+0x12>

0800ce28 <raise>:
 800ce28:	4b02      	ldr	r3, [pc, #8]	@ (800ce34 <raise+0xc>)
 800ce2a:	4601      	mov	r1, r0
 800ce2c:	6818      	ldr	r0, [r3, #0]
 800ce2e:	f7ff bfd3 	b.w	800cdd8 <_raise_r>
 800ce32:	bf00      	nop
 800ce34:	2400001c 	.word	0x2400001c

0800ce38 <_kill_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4d07      	ldr	r5, [pc, #28]	@ (800ce58 <_kill_r+0x20>)
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	4604      	mov	r4, r0
 800ce40:	4608      	mov	r0, r1
 800ce42:	4611      	mov	r1, r2
 800ce44:	602b      	str	r3, [r5, #0]
 800ce46:	f7f4 f951 	bl	80010ec <_kill>
 800ce4a:	1c43      	adds	r3, r0, #1
 800ce4c:	d102      	bne.n	800ce54 <_kill_r+0x1c>
 800ce4e:	682b      	ldr	r3, [r5, #0]
 800ce50:	b103      	cbz	r3, 800ce54 <_kill_r+0x1c>
 800ce52:	6023      	str	r3, [r4, #0]
 800ce54:	bd38      	pop	{r3, r4, r5, pc}
 800ce56:	bf00      	nop
 800ce58:	24000cec 	.word	0x24000cec

0800ce5c <_getpid_r>:
 800ce5c:	f7f4 b93e 	b.w	80010dc <_getpid>

0800ce60 <_init>:
 800ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce62:	bf00      	nop
 800ce64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce66:	bc08      	pop	{r3}
 800ce68:	469e      	mov	lr, r3
 800ce6a:	4770      	bx	lr

0800ce6c <_fini>:
 800ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6e:	bf00      	nop
 800ce70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce72:	bc08      	pop	{r3}
 800ce74:	469e      	mov	lr, r3
 800ce76:	4770      	bx	lr
