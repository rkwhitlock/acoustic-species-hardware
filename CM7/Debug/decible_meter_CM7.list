
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc60  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800cf00  0800cf00  0000df00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4b4  0800d4b4  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d4b4  0800d4b4  0000e4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4bc  0800d4bc  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4bc  0800d4bc  0000e4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d4c0  0800d4c0  0000e4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800d4c4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b18  240001d8  0800d69c  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000cf0  0800d69c  0000fcf0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ca1  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a30  00000000  00000000  00023ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  000268d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b51  00000000  00000000  00027780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004052d  00000000  00000000  000282d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016911  00000000  00000000  000687fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019ae5c  00000000  00000000  0007f10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00219f6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc8  00000000  00000000  00219fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0021ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cee8 	.word	0x0800cee8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800cee8 	.word	0x0800cee8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b3d      	ldr	r3, [pc, #244]	@ (80007b8 <SystemInit+0xfc>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a3c      	ldr	r2, [pc, #240]	@ (80007b8 <SystemInit+0xfc>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b39      	ldr	r3, [pc, #228]	@ (80007b8 <SystemInit+0xfc>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a38      	ldr	r2, [pc, #224]	@ (80007b8 <SystemInit+0xfc>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b37      	ldr	r3, [pc, #220]	@ (80007bc <SystemInit+0x100>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b34      	ldr	r3, [pc, #208]	@ (80007bc <SystemInit+0x100>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a32      	ldr	r2, [pc, #200]	@ (80007bc <SystemInit+0x100>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b31      	ldr	r3, [pc, #196]	@ (80007c0 <SystemInit+0x104>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a30      	ldr	r2, [pc, #192]	@ (80007c0 <SystemInit+0x104>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <SystemInit+0x104>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <SystemInit+0x104>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	492c      	ldr	r1, [pc, #176]	@ (80007c0 <SystemInit+0x104>)
 8000710:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <SystemInit+0x108>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <SystemInit+0x100>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <SystemInit+0x100>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a24      	ldr	r2, [pc, #144]	@ (80007bc <SystemInit+0x100>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <SystemInit+0x104>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <SystemInit+0x104>)
 8000746:	4a20      	ldr	r2, [pc, #128]	@ (80007c8 <SystemInit+0x10c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x104>)
 800074c:	4a1f      	ldr	r2, [pc, #124]	@ (80007cc <SystemInit+0x110>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <SystemInit+0x104>)
 8000752:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <SystemInit+0x114>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <SystemInit+0x104>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <SystemInit+0x104>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	@ (80007d0 <SystemInit+0x114>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <SystemInit+0x104>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <SystemInit+0x104>)
 800076a:	4a19      	ldr	r2, [pc, #100]	@ (80007d0 <SystemInit+0x114>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <SystemInit+0x104>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <SystemInit+0x104>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a11      	ldr	r2, [pc, #68]	@ (80007c0 <SystemInit+0x104>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <SystemInit+0x104>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <SystemInit+0x118>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <SystemInit+0x118>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <SystemInit+0x11c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <SystemInit+0x120>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <SystemInit+0x124>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <SystemInit+0x128>)
 80007a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ac:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	52002000 	.word	0x52002000
 80007c0:	58024400 	.word	0x58024400
 80007c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c8:	02020200 	.word	0x02020200
 80007cc:	01ff0000 	.word	0x01ff0000
 80007d0:	01010280 	.word	0x01010280
 80007d4:	580000c0 	.word	0x580000c0
 80007d8:	5c001000 	.word	0x5c001000
 80007dc:	ffff0000 	.word	0xffff0000
 80007e0:	51008108 	.word	0x51008108
 80007e4:	52004000 	.word	0x52004000

080007e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d013      	beq.n	8000828 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000800:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000804:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000808:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00b      	beq.n	8000828 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000810:	e000      	b.n	8000814 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000812:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000814:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0f9      	beq.n	8000812 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800081e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <calculate_decibel>:
 * @param  buffer: Pointer to audio sample buffer
 * @param  size: Number of samples in the buffer
 * @return Sound pressure level in decibels (dB)
 */
float calculate_decibel(int16_t *buffer, size_t size)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    float sum = 0.0f;
 8000842:	f04f 0300 	mov.w	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]

    for (size_t i = 0; i < size; i++)
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	e01c      	b.n	8000888 <calculate_decibel+0x50>
    {
        float voltage = (float)buffer[i] / 32768.0f; // Normalize 16-bit value
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000862:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80008e4 <calculate_decibel+0xac>
 8000866:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800086a:	edc7 7a03 	vstr	s15, [r7, #12]
        sum += voltage * voltage;
 800086e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000872:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000876:	ed97 7a07 	vldr	s14, [r7, #28]
 800087a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087e:	edc7 7a07 	vstr	s15, [r7, #28]
    for (size_t i = 0; i < size; i++)
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	3301      	adds	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d3de      	bcc.n	800084e <calculate_decibel+0x16>
    }

    float rms = sqrtf(sum / size);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	ee07 3a90 	vmov	s15, r3
 8000896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800089a:	ed97 7a07 	vldr	s14, [r7, #28]
 800089e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80008a2:	eeb0 0a66 	vmov.f32	s0, s13
 80008a6:	f009 fda9 	bl	800a3fc <sqrtf>
 80008aa:	ed87 0a05 	vstr	s0, [r7, #20]
    float spl = 20.0f * log10f(rms / REFERENCE_VOLTAGE);
 80008ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80008b2:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80008e8 <calculate_decibel+0xb0>
 80008b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008ba:	eeb0 0a47 	vmov.f32	s0, s14
 80008be:	f009 fd6f 	bl	800a3a0 <log10f>
 80008c2:	eef0 7a40 	vmov.f32	s15, s0
 80008c6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80008ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ce:	edc7 7a04 	vstr	s15, [r7, #16]

    return spl;
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	ee07 3a90 	vmov	s15, r3
}
 80008d8:	eeb0 0a67 	vmov.f32	s0, s15
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	47000000 	.word	0x47000000
 80008e8:	37a7c5ac 	.word	0x37a7c5ac

080008ec <_write>:

/**
 * @brief  Redirects printf output to SWV ITM Data Console
 */
int _write(int file, char *ptr, int len)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
    int i = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	e009      	b.n	8000916 <_write+0x2a>
    {
        ITM_SendChar(*ptr++);
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	60ba      	str	r2, [r7, #8]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff6c 	bl	80007e8 <ITM_SendChar>
    for (i = 0; i < len; i++)
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	3301      	adds	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	429a      	cmp	r2, r3
 800091c:	dbf1      	blt.n	8000902 <_write+0x16>
    }
    return len;
 800091e:	687b      	ldr	r3, [r7, #4]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) { printf("Full buffer received.\r\n"); }
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	4803      	ldr	r0, [pc, #12]	@ (8000940 <HAL_SAI_RxCpltCallback+0x18>)
 8000932:	f00a fbd9 	bl	800b0e8 <puts>
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	0800cf00 	.word	0x0800cf00

08000944 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) { printf("Half buffer received.\r\n"); }
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	4803      	ldr	r0, [pc, #12]	@ (800095c <HAL_SAI_RxHalfCpltCallback+0x18>)
 800094e:	f00a fbcb 	bl	800b0e8 <puts>
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	0800cf18 	.word	0x0800cf18

08000960 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	4b62      	ldr	r3, [pc, #392]	@ (8000af0 <main+0x190>)
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096e:	60fb      	str	r3, [r7, #12]
    if ( dsize > 0 ) { 
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b00      	cmp	r3, #0
 8000974:	dd1d      	ble.n	80009b2 <main+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60bb      	str	r3, [r7, #8]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	607b      	str	r3, [r7, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000986:	f3bf 8f4f 	dsb	sy
}
 800098a:	bf00      	nop
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800098c:	4a59      	ldr	r2, [pc, #356]	@ (8000af4 <main+0x194>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3320      	adds	r3, #32
 8000998:	607b      	str	r3, [r7, #4]
        op_size -=          __SCB_DCACHE_LINE_SIZE;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3b20      	subs	r3, #32
 800099e:	60bb      	str	r3, [r7, #8]
      } while ( op_size > 0 );
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	dcf2      	bgt.n	800098c <main+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 80009a6:	f3bf 8f4f 	dsb	sy
}
 80009aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ac:	f3bf 8f6f 	isb	sy
}
 80009b0:	bf00      	nop
}
 80009b2:	bf00      	nop

    // Only for debugging, remove later
    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)audio_buffer, BUFFER_SIZE);

    memset(audio_buffer, 0xAA, sizeof(audio_buffer)); // Initialize buffer with known pattern
 80009b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009b8:	21aa      	movs	r1, #170	@ 0xaa
 80009ba:	484d      	ldr	r0, [pc, #308]	@ (8000af0 <main+0x190>)
 80009bc:	f00a fb9c 	bl	800b0f8 <memset>

    /* Wait until CPU2 (CM4) boots and enters in stop mode or timeout*/
    int32_t timeout = 0xFFFF;
 80009c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009c4:	61fb      	str	r3, [r7, #28]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80009c6:	bf00      	nop
 80009c8:	4b4b      	ldr	r3, [pc, #300]	@ (8000af8 <main+0x198>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d004      	beq.n	80009de <main+0x7e>
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	1e5a      	subs	r2, r3, #1
 80009d8:	61fa      	str	r2, [r7, #28]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	dcf4      	bgt.n	80009c8 <main+0x68>
        ;
    if (timeout < 0)
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	da01      	bge.n	80009e8 <main+0x88>
    {
        Error_Handler();
 80009e4:	f000 fa74 	bl	8000ed0 <Error_Handler>
    }

    /* Hardware initialization sequence */
    MPU_Config();
 80009e8:	f000 fa46 	bl	8000e78 <MPU_Config>
    HAL_Init();                 // Reset peripherals
 80009ec:	f000 fca2 	bl	8001334 <HAL_Init>
    SystemClock_Config();       // System clock configuration
 80009f0:	f000 f894 	bl	8000b1c <SystemClock_Config>
    PeriphCommonClock_Config(); // Peripheral clocks configuration
 80009f4:	f000 f906 	bl	8000c04 <PeriphCommonClock_Config>

    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    __HAL_RCC_HSEM_CLK_ENABLE();    // Enable semaphore clock
 80009f8:	4b3f      	ldr	r3, [pc, #252]	@ (8000af8 <main+0x198>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fe:	4a3e      	ldr	r2, [pc, #248]	@ (8000af8 <main+0x198>)
 8000a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a08:	4b3b      	ldr	r3, [pc, #236]	@ (8000af8 <main+0x198>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
    HAL_HSEM_FastTake(HSEM_ID_0);   // Take HSEM
 8000a16:	2000      	movs	r0, #0
 8000a18:	f003 ff94 	bl	8004944 <HAL_HSEM_FastTake>
    HAL_HSEM_Release(HSEM_ID_0, 0); // Release HSEM to notify CM4
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f003 ffaa 	bl	8004978 <HAL_HSEM_Release>

    /* Wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 8000a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a28:	61fb      	str	r3, [r7, #28]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000a2a:	bf00      	nop
 8000a2c:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <main+0x198>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d104      	bne.n	8000a42 <main+0xe2>
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	1e5a      	subs	r2, r3, #1
 8000a3c:	61fa      	str	r2, [r7, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	dcf4      	bgt.n	8000a2c <main+0xcc>
        ;
    if (timeout < 0)
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	da01      	bge.n	8000a4c <main+0xec>
    {
        Error_Handler();
 8000a48:	f000 fa42 	bl	8000ed0 <Error_Handler>
    }

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000a4c:	f000 f9dc 	bl	8000e08 <MX_GPIO_Init>
    MX_BDMA_Init();
 8000a50:	f000 f9ba 	bl	8000dc8 <MX_BDMA_Init>
    __HAL_LINKDMA(&hsai_BlockA4, hdmarx, hdma_sai4_a);
 8000a54:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <main+0x19c>)
 8000a56:	4a2a      	ldr	r2, [pc, #168]	@ (8000b00 <main+0x1a0>)
 8000a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000a5c:	4b28      	ldr	r3, [pc, #160]	@ (8000b00 <main+0x1a0>)
 8000a5e:	4a27      	ldr	r2, [pc, #156]	@ (8000afc <main+0x19c>)
 8000a60:	639a      	str	r2, [r3, #56]	@ 0x38
    MX_USART1_UART_Init();
 8000a62:	f000 f965 	bl	8000d30 <MX_USART1_UART_Init>
    MX_SAI4_Init();
 8000a66:	f000 f903 	bl	8000c70 <MX_SAI4_Init>

    /* Start audio capture using DMA */
    printf("Starting SAI DMA...\r\n");
 8000a6a:	4826      	ldr	r0, [pc, #152]	@ (8000b04 <main+0x1a4>)
 8000a6c:	f00a fb3c 	bl	800b0e8 <puts>
    if (HAL_SAI_Receive_DMA(&hsai_BlockA4, (uint8_t *)audio_buffer, BUFFER_SIZE) != HAL_OK)
 8000a70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a74:	491e      	ldr	r1, [pc, #120]	@ (8000af0 <main+0x190>)
 8000a76:	4821      	ldr	r0, [pc, #132]	@ (8000afc <main+0x19c>)
 8000a78:	f008 f84a 	bl	8008b10 <HAL_SAI_Receive_DMA>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d007      	beq.n	8000a92 <main+0x132>
    {
        printf("SAI DMA initialization failed! Error: %ld\r\n", hsai_BlockA4.ErrorCode);
 8000a82:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <main+0x19c>)
 8000a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481f      	ldr	r0, [pc, #124]	@ (8000b08 <main+0x1a8>)
 8000a8c:	f00a fac4 	bl	800b018 <iprintf>
 8000a90:	e002      	b.n	8000a98 <main+0x138>
    }
    else
    {
        printf("SAI DMA started successfully.\r\n");
 8000a92:	481e      	ldr	r0, [pc, #120]	@ (8000b0c <main+0x1ac>)
 8000a94:	f00a fb28 	bl	800b0e8 <puts>
    }

    /* Main application loop */
    while (1)
    {
        printf("Audio Buffer Data:\r\n");
 8000a98:	481d      	ldr	r0, [pc, #116]	@ (8000b10 <main+0x1b0>)
 8000a9a:	f00a fb25 	bl	800b0e8 <puts>
        for (int i = 0; i < 10; i++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	e00c      	b.n	8000abe <main+0x15e>
        {
            printf("[%d]: %d\r\n", i, audio_buffer[i]);
 8000aa4:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <main+0x190>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	69b9      	ldr	r1, [r7, #24]
 8000ab2:	4818      	ldr	r0, [pc, #96]	@ (8000b14 <main+0x1b4>)
 8000ab4:	f00a fab0 	bl	800b018 <iprintf>
        for (int i = 0; i < 10; i++)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	3301      	adds	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	2b09      	cmp	r3, #9
 8000ac2:	ddef      	ble.n	8000aa4 <main+0x144>
        }

        /* Calculate and display sound pressure level */
        float decibel_level = calculate_decibel(audio_buffer, BUFFER_SIZE);
 8000ac4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ac8:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <main+0x190>)
 8000aca:	f7ff feb5 	bl	8000838 <calculate_decibel>
 8000ace:	ed87 0a05 	vstr	s0, [r7, #20]
        printf("SPL: %.2f dB\r\n", decibel_level);
 8000ad2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ada:	ec53 2b17 	vmov	r2, r3, d7
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <main+0x1b8>)
 8000ae0:	f00a fa9a 	bl	800b018 <iprintf>

        /* Wait one second before next update */
        HAL_Delay(1000);
 8000ae4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ae8:	f000 fcb6 	bl	8001458 <HAL_Delay>
    {
 8000aec:	e7d4      	b.n	8000a98 <main+0x138>
 8000aee:	bf00      	nop
 8000af0:	24000398 	.word	0x24000398
 8000af4:	e000ed00 	.word	0xe000ed00
 8000af8:	58024400 	.word	0x58024400
 8000afc:	240001f4 	.word	0x240001f4
 8000b00:	2400028c 	.word	0x2400028c
 8000b04:	0800cf30 	.word	0x0800cf30
 8000b08:	0800cf48 	.word	0x0800cf48
 8000b0c:	0800cf74 	.word	0x0800cf74
 8000b10:	0800cf94 	.word	0x0800cf94
 8000b14:	0800cfa8 	.word	0x0800cfa8
 8000b18:	0800cfb4 	.word	0x0800cfb4

08000b1c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b09c      	sub	sp, #112	@ 0x70
 8000b20:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b26:	224c      	movs	r2, #76	@ 0x4c
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00a fae4 	bl	800b0f8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2220      	movs	r2, #32
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00a fade 	bl	800b0f8 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b3c:	2004      	movs	r0, #4
 8000b3e:	f003 ff2f 	bl	80049a0 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf8 <SystemClock_Config+0xdc>)
 8000b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000bf8 <SystemClock_Config+0xdc>)
 8000b4c:	f023 0301 	bic.w	r3, r3, #1
 8000b50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b52:	4b29      	ldr	r3, [pc, #164]	@ (8000bf8 <SystemClock_Config+0xdc>)
 8000b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	4b27      	ldr	r3, [pc, #156]	@ (8000bfc <SystemClock_Config+0xe0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b64:	4a25      	ldr	r2, [pc, #148]	@ (8000bfc <SystemClock_Config+0xe0>)
 8000b66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <SystemClock_Config+0xe0>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000b78:	bf00      	nop
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <SystemClock_Config+0xe0>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b86:	d1f8      	bne.n	8000b7a <SystemClock_Config+0x5e>
    {
    }

    /** Macro to configure the PLL clock source
     */
    __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000b88:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <SystemClock_Config+0xe4>)
 8000b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000c00 <SystemClock_Config+0xe4>)
 8000b8e:	f023 0303 	bic.w	r3, r3, #3
 8000b92:	6293      	str	r3, [r2, #40]	@ 0x28

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b94:	2302      	movs	r3, #2
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9c:	2340      	movs	r3, #64	@ 0x40
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 ff53 	bl	8004a54 <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x9c>
    {
        Error_Handler();
 8000bb4:	f000 f98c 	bl	8000ed0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 8000bb8:	233f      	movs	r3, #63	@ 0x3f
 8000bba:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 |
                                  RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd4:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 fb92 	bl	8005308 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xd2>
    {
        Error_Handler();
 8000bea:	f000 f971 	bl	8000ed0 <Error_Handler>
    }
}
 8000bee:	bf00      	nop
 8000bf0:	3770      	adds	r7, #112	@ 0x70
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	58000400 	.word	0x58000400
 8000bfc:	58024800 	.word	0x58024800
 8000c00:	58024400 	.word	0x58024400

08000c04 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0b2      	sub	sp, #200	@ 0xc8
 8000c08:	af00      	add	r7, sp, #0
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	22c8      	movs	r2, #200	@ 0xc8
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f00a fa71 	bl	800b0f8 <memset>

    /** Initializes the peripherals clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A | RCC_PERIPHCLK_USART1;
 8000c16:	f240 4201 	movw	r2, #1025	@ 0x401
 8000c1a:	f04f 0300 	mov.w	r3, #0
 8000c1e:	e9c7 2300 	strd	r2, r3, [r7]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8000c22:	2304      	movs	r3, #4
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8000c26:	230a      	movs	r3, #10
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000c36:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c40:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8000c46:	2310      	movs	r3, #16
 8000c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL3;
 8000c4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fee2 	bl	8005a20 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <PeriphCommonClock_Config+0x62>
    {
        Error_Handler();
 8000c62:	f000 f935 	bl	8000ed0 <Error_Handler>
    }
}
 8000c66:	bf00      	nop
 8000c68:	37c8      	adds	r7, #200	@ 0xc8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <MX_SAI4_Init>:
 * @brief SAI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI4_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
    hsai_BlockA4.Instance = SAI4_Block_A;
 8000c74:	4b2b      	ldr	r3, [pc, #172]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000c76:	4a2c      	ldr	r2, [pc, #176]	@ (8000d28 <MX_SAI4_Init+0xb8>)
 8000c78:	601a      	str	r2, [r3, #0]
    hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	645a      	str	r2, [r3, #68]	@ 0x44
    hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8000c80:	4b28      	ldr	r3, [pc, #160]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	605a      	str	r2, [r3, #4]
    hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 8000c86:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c98:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
    hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
    hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
    hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000caa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
    hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <MX_SAI4_Init+0xbc>)
 8000cb4:	621a      	str	r2, [r3, #32]
    hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cbc:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 8000cca:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cd6:	641a      	str	r2, [r3, #64]	@ 0x40
    hsai_BlockA4.FrameInit.FrameLength = 16;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cda:	2210      	movs	r2, #16
 8000cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	659a      	str	r2, [r3, #88]	@ 0x58
    hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	669a      	str	r2, [r3, #104]	@ 0x68
    hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	66da      	str	r2, [r3, #108]	@ 0x6c
    hsai_BlockA4.SlotInit.SlotNumber = 1;
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	671a      	str	r2, [r3, #112]	@ 0x70
    hsai_BlockA4.SlotInit.SlotActive = SAI_SLOTACTIVE_0;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	675a      	str	r2, [r3, #116]	@ 0x74
    if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_SAI4_Init+0xb4>)
 8000d10:	f007 fbc4 	bl	800849c <HAL_SAI_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_SAI4_Init+0xae>
    {
        Error_Handler();
 8000d1a:	f000 f8d9 	bl	8000ed0 <Error_Handler>
    }
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	240001f4 	.word	0x240001f4
 8000d28:	58005404 	.word	0x58005404
 8000d2c:	0002ee00 	.word	0x0002ee00

08000d30 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d36:	4a23      	ldr	r2, [pc, #140]	@ (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d38:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	@ 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d78:	4811      	ldr	r0, [pc, #68]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d7a:	f008 fa35 	bl	80091e8 <HAL_UART_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART1_UART_Init+0x58>
    {
        Error_Handler();
 8000d84:	f000 f8a4 	bl	8000ed0 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d8c:	f009 fa3d 	bl	800a20a <HAL_UARTEx_SetTxFifoThreshold>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART1_UART_Init+0x6a>
    {
        Error_Handler();
 8000d96:	f000 f89b 	bl	8000ed0 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4808      	ldr	r0, [pc, #32]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000d9e:	f009 fa72 	bl	800a286 <HAL_UARTEx_SetRxFifoThreshold>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART1_UART_Init+0x7c>
    {
        Error_Handler();
 8000da8:	f000 f892 	bl	8000ed0 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <MX_USART1_UART_Init+0x90>)
 8000dae:	f009 f9f3 	bl	800a198 <HAL_UARTEx_DisableFifoMode>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART1_UART_Init+0x8c>
    {
        Error_Handler();
 8000db8:	f000 f88a 	bl	8000ed0 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	24000304 	.word	0x24000304
 8000dc4:	40011000 	.word	0x40011000

08000dc8 <MX_BDMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_BDMA_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_BDMA_CLK_ENABLE();
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <MX_BDMA_Init+0x3c>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e04 <MX_BDMA_Init+0x3c>)
 8000dd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_BDMA_Init+0x3c>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* BDMA_Channel0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2081      	movs	r0, #129	@ 0x81
 8000df2:	f000 fc3c 	bl	800166e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000df6:	2081      	movs	r0, #129	@ 0x81
 8000df8:	f000 fc53 	bl	80016a2 <HAL_NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58024400 	.word	0x58024400

08000e08 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0e:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <MX_GPIO_Init+0x6c>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	4a17      	ldr	r2, [pc, #92]	@ (8000e74 <MX_GPIO_Init+0x6c>)
 8000e16:	f043 0310 	orr.w	r3, r3, #16
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <MX_GPIO_Init+0x6c>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_GPIO_Init+0x6c>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e32:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <MX_GPIO_Init+0x6c>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <MX_GPIO_Init+0x6c>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <MX_GPIO_Init+0x6c>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e50:	4a08      	ldr	r2, [pc, #32]	@ (8000e74 <MX_GPIO_Init+0x6c>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <MX_GPIO_Init+0x6c>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	58024400 	.word	0x58024400

08000e78 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 8000e8a:	f000 fc25 	bl	80016d8 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e9a:	231f      	movs	r3, #31
 8000e9c:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 8000e9e:	2387      	movs	r3, #135	@ 0x87
 8000ea0:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fc43 	bl	8001748 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ec2:	2004      	movs	r0, #4
 8000ec4:	f000 fc20 	bl	8001708 <HAL_MPU_Enable>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <HAL_MspInit+0x30>)
 8000ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee8:	4a08      	ldr	r2, [pc, #32]	@ (8000f0c <HAL_MspInit+0x30>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_MspInit+0x30>)
 8000ef4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	58024400 	.word	0x58024400

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12e      	bne.n	8000f90 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f32:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f38:	4a18      	ldr	r2, [pc, #96]	@ (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000f6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f80:	2307      	movs	r3, #7
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f8c:	f003 fb2a 	bl	80045e4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	@ 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020000 	.word	0x58020000

08000fa4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai4_a;

static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	@ 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a49      	ldr	r2, [pc, #292]	@ (80010d8 <HAL_SAI_MspInit+0x134>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	f040 808b 	bne.w	80010ce <HAL_SAI_MspInit+0x12a>
    {
    /* Peripheral clock enable */
    if (SAI4_client == 0)
 8000fb8:	4b48      	ldr	r3, [pc, #288]	@ (80010dc <HAL_SAI_MspInit+0x138>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d116      	bne.n	8000fee <HAL_SAI_MspInit+0x4a>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8000fc0:	4b47      	ldr	r3, [pc, #284]	@ (80010e0 <HAL_SAI_MspInit+0x13c>)
 8000fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fc6:	4a46      	ldr	r2, [pc, #280]	@ (80010e0 <HAL_SAI_MspInit+0x13c>)
 8000fc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fcc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fd0:	4b43      	ldr	r3, [pc, #268]	@ (80010e0 <HAL_SAI_MspInit+0x13c>)
 8000fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI4_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2092      	movs	r0, #146	@ 0x92
 8000fe4:	f000 fb43 	bl	800166e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI4_IRQn);
 8000fe8:	2092      	movs	r0, #146	@ 0x92
 8000fea:	f000 fb5a 	bl	80016a2 <HAL_NVIC_EnableIRQ>
    }
    SAI4_client ++;
 8000fee:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <HAL_SAI_MspInit+0x138>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a39      	ldr	r2, [pc, #228]	@ (80010dc <HAL_SAI_MspInit+0x138>)
 8000ff6:	6013      	str	r3, [r2, #0]

    /**SAI4_A_Block_A GPIO Configuration
    PE2     ------> SAI4_CK1
    PC1     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001008:	230a      	movs	r3, #10
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4834      	ldr	r0, [pc, #208]	@ (80010e4 <HAL_SAI_MspInit+0x140>)
 8001014:	f003 fae6 	bl	80045e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001018:	2302      	movs	r3, #2
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001028:	230a      	movs	r3, #10
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	482d      	ldr	r0, [pc, #180]	@ (80010e8 <HAL_SAI_MspInit+0x144>)
 8001034:	f003 fad6 	bl	80045e4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8001038:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 800103a:	4a2d      	ldr	r2, [pc, #180]	@ (80010f0 <HAL_SAI_MspInit+0x14c>)
 800103c:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800103e:	4b2b      	ldr	r3, [pc, #172]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 8001040:	220f      	movs	r2, #15
 8001042:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001044:	4b29      	ldr	r3, [pc, #164]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800104a:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8001050:	4b26      	ldr	r3, [pc, #152]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 8001052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001056:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001058:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 800105a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800105e:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001060:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 8001062:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001066:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8001068:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 800106a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800106e:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001070:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 8001072:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001076:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8001078:	481c      	ldr	r0, [pc, #112]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 800107a:	f000 fba5 	bl	80017c8 <HAL_DMA_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8001084:	f7ff ff24 	bl	8000ed0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8001088:	230e      	movs	r3, #14
 800108a:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = ENABLE;
 8001094:	2301      	movs	r3, #1
 8001096:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	4812      	ldr	r0, [pc, #72]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 80010a4:	f003 f9d8 	bl	8004458 <HAL_DMAEx_ConfigMuxSync>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_SAI_MspInit+0x10e>
    {
      Error_Handler();
 80010ae:	f7ff ff0f 	bl	8000ed0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 80010b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80010ba:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 80010c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80010c8:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <HAL_SAI_MspInit+0x148>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6393      	str	r3, [r2, #56]	@ 0x38

    }
}
 80010ce:	bf00      	nop
 80010d0:	3730      	adds	r7, #48	@ 0x30
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	58005404 	.word	0x58005404
 80010dc:	24000b98 	.word	0x24000b98
 80010e0:	58024400 	.word	0x58024400
 80010e4:	58021000 	.word	0x58021000
 80010e8:	58020800 	.word	0x58020800
 80010ec:	2400028c 	.word	0x2400028c
 80010f0:	58025408 	.word	0x58025408

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <NMI_Handler+0x4>

080010fc <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <MemManage_Handler+0x4>

0800110c <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <UsageFault_Handler+0x4>

0800111c <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 800114a:	f000 f965 	bl	8001418 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <BDMA_Channel0_IRQHandler>:

/**
 * @brief This function handles BDMA channel0 global interrupt.
 */
void BDMA_Channel0_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_sai4_a);
 8001158:	4803      	ldr	r0, [pc, #12]	@ (8001168 <BDMA_Channel0_IRQHandler+0x14>)
 800115a:	f001 fe5f 	bl	8002e1c <HAL_DMA_IRQHandler>

    printf("DMA IRQ\r\n");
 800115e:	4803      	ldr	r0, [pc, #12]	@ (800116c <BDMA_Channel0_IRQHandler+0x18>)
 8001160:	f009 ffc2 	bl	800b0e8 <puts>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2400028c 	.word	0x2400028c
 800116c:	0800cfc4 	.word	0x0800cfc4

08001170 <SAI4_IRQHandler>:

/**
 * @brief This function handles SAI4 global interrupt.
 */
void SAI4_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    HAL_SAI_IRQHandler(&hsai_BlockA4);
 8001174:	4803      	ldr	r0, [pc, #12]	@ (8001184 <SAI4_IRQHandler+0x14>)
 8001176:	f007 fd5f 	bl	8008c38 <HAL_SAI_IRQHandler>

    printf("SAI IRQ\r\n");
 800117a:	4803      	ldr	r0, [pc, #12]	@ (8001188 <SAI4_IRQHandler+0x18>)
 800117c:	f009 ffb4 	bl	800b0e8 <puts>
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	240001f4 	.word	0x240001f4
 8001188:	0800cfd0 	.word	0x0800cfd0

0800118c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return 1;
 8001190:	2301      	movs	r3, #1
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_kill>:

int _kill(int pid, int sig)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011a6:	f009 ffaf 	bl	800b108 <__errno>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2216      	movs	r2, #22
 80011ae:	601a      	str	r2, [r3, #0]
  return -1;
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_exit>:

void _exit (int status)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffe7 	bl	800119c <_kill>
  while (1) {}    /* Make sure we hang here */
 80011ce:	bf00      	nop
 80011d0:	e7fd      	b.n	80011ce <_exit+0x12>

080011d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e00a      	b.n	80011fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011e4:	f3af 8000 	nop.w
 80011e8:	4601      	mov	r1, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	60ba      	str	r2, [r7, #8]
 80011f0:	b2ca      	uxtb	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	429a      	cmp	r2, r3
 8001200:	dbf0      	blt.n	80011e4 <_read+0x12>
  }

  return len;
 8001202:	687b      	ldr	r3, [r7, #4]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_close>:
  }
  return len;
}

int _close(int file)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001234:	605a      	str	r2, [r3, #4]
  return 0;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_isatty>:

int _isatty(int file)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800124c:	2301      	movs	r3, #1
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125a:	b480      	push	{r7}
 800125c:	b085      	sub	sp, #20
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800127c:	4a14      	ldr	r2, [pc, #80]	@ (80012d0 <_sbrk+0x5c>)
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <_sbrk+0x60>)
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <_sbrk+0x64>)
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <_sbrk+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d207      	bcs.n	80012b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a4:	f009 ff30 	bl	800b108 <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	220c      	movs	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b2:	e009      	b.n	80012c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <_sbrk+0x64>)
 80012c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	24080000 	.word	0x24080000
 80012d4:	00000400 	.word	0x00000400
 80012d8:	24000b9c 	.word	0x24000b9c
 80012dc:	24000cf0 	.word	0x24000cf0

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001318 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012e4:	f7ff f9ea 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	@ (8001320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	@ (800132c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130e:	f009 ff01 	bl	800b114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff fb25 	bl	8000960 <main>
  bx  lr
 8001316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001318:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800131c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001320:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001324:	0800d4c4 	.word	0x0800d4c4
  ldr r2, =_sbss
 8001328:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800132c:	24000cf0 	.word	0x24000cf0

08001330 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC3_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133a:	2003      	movs	r0, #3
 800133c:	f000 f98c 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001340:	f004 f998 	bl	8005674 <HAL_RCC_GetSysClockFreq>
 8001344:	4602      	mov	r2, r0
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <HAL_Init+0x68>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	f003 030f 	and.w	r3, r3, #15
 8001350:	4913      	ldr	r1, [pc, #76]	@ (80013a0 <HAL_Init+0x6c>)
 8001352:	5ccb      	ldrb	r3, [r1, r3]
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
 800135c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <HAL_Init+0x68>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	4a0e      	ldr	r2, [pc, #56]	@ (80013a0 <HAL_Init+0x6c>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	f003 031f 	and.w	r3, r3, #31
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <HAL_Init+0x70>)
 8001376:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001378:	4a0b      	ldr	r2, [pc, #44]	@ (80013a8 <HAL_Init+0x74>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800137e:	200f      	movs	r0, #15
 8001380:	f000 f814 	bl	80013ac <HAL_InitTick>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e002      	b.n	8001394 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800138e:	f7ff fda5 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	58024400 	.word	0x58024400
 80013a0:	0800cfdc 	.word	0x0800cfdc
 80013a4:	24000004 	.word	0x24000004
 80013a8:	24000000 	.word	0x24000000

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_InitTick+0x60>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e021      	b.n	8001404 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <HAL_InitTick+0x64>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <HAL_InitTick+0x60>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f971 	bl	80016be <HAL_SYSTICK_Config>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00e      	b.n	8001404 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	d80a      	bhi.n	8001402 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013f4:	f000 f93b 	bl	800166e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f8:	4a06      	ldr	r2, [pc, #24]	@ (8001414 <HAL_InitTick+0x68>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2400000c 	.word	0x2400000c
 8001410:	24000000 	.word	0x24000000
 8001414:	24000008 	.word	0x24000008

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	2400000c 	.word	0x2400000c
 800143c:	24000ba0 	.word	0x24000ba0

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	24000ba0 	.word	0x24000ba0

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffde 	bl	8001440 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2400000c 	.word	0x2400000c

080014a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_GetREVID+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0c1b      	lsrs	r3, r3, #16
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	5c001000 	.word	0x5c001000

080014b8 <__NVIC_SetPriorityGrouping>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <__NVIC_SetPriorityGrouping+0x40>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	@ (80014f8 <__NVIC_SetPriorityGrouping+0x40>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00
 80014fc:	05fa0000 	.word	0x05fa0000

08001500 <__NVIC_GetPriorityGrouping>:
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4907      	ldr	r1, [pc, #28]	@ (8001554 <__NVIC_EnableIRQ+0x38>)
 8001536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	@ (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	@ (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	@ 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	@ 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <SysTick_Config>:
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001638:	f7ff ff8e 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff29 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff40 	bl	8001500 <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff90 	bl	80015ac <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5f 	bl	8001558 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff33 	bl	800151c <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffa4 	bl	8001614 <SysTick_Config>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016dc:	f3bf 8f5f 	dmb	sy
}
 80016e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <HAL_MPU_Disable+0x28>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	4a06      	ldr	r2, [pc, #24]	@ (8001700 <HAL_MPU_Disable+0x28>)
 80016e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016ee:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_MPU_Disable+0x2c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00
 8001704:	e000ed90 	.word	0xe000ed90

08001708 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001710:	4a0b      	ldr	r2, [pc, #44]	@ (8001740 <HAL_MPU_Enable+0x38>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_MPU_Enable+0x3c>)
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	4a09      	ldr	r2, [pc, #36]	@ (8001744 <HAL_MPU_Enable+0x3c>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001724:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001726:	f3bf 8f4f 	dsb	sy
}
 800172a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800172c:	f3bf 8f6f 	isb	sy
}
 8001730:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed90 	.word	0xe000ed90
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	785a      	ldrb	r2, [r3, #1]
 8001754:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <HAL_MPU_ConfigRegion+0x7c>)
 8001756:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <HAL_MPU_ConfigRegion+0x7c>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	4a19      	ldr	r2, [pc, #100]	@ (80017c4 <HAL_MPU_ConfigRegion+0x7c>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <HAL_MPU_ConfigRegion+0x7c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7b1b      	ldrb	r3, [r3, #12]
 8001770:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7adb      	ldrb	r3, [r3, #11]
 8001776:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001778:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7a9b      	ldrb	r3, [r3, #10]
 800177e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001780:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7b5b      	ldrb	r3, [r3, #13]
 8001786:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001788:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7b9b      	ldrb	r3, [r3, #14]
 800178e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001790:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7bdb      	ldrb	r3, [r3, #15]
 8001796:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001798:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7a5b      	ldrb	r3, [r3, #9]
 800179e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7a1b      	ldrb	r3, [r3, #8]
 80017a6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017a8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017b2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017b4:	6113      	str	r3, [r2, #16]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed90 	.word	0xe000ed90

080017c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fe36 	bl	8001440 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e316      	b.n	8001e0e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a66      	ldr	r2, [pc, #408]	@ (8001980 <HAL_DMA_Init+0x1b8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d04a      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a65      	ldr	r2, [pc, #404]	@ (8001984 <HAL_DMA_Init+0x1bc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d045      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a63      	ldr	r2, [pc, #396]	@ (8001988 <HAL_DMA_Init+0x1c0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d040      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a62      	ldr	r2, [pc, #392]	@ (800198c <HAL_DMA_Init+0x1c4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d03b      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a60      	ldr	r2, [pc, #384]	@ (8001990 <HAL_DMA_Init+0x1c8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d036      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a5f      	ldr	r2, [pc, #380]	@ (8001994 <HAL_DMA_Init+0x1cc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d031      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a5d      	ldr	r2, [pc, #372]	@ (8001998 <HAL_DMA_Init+0x1d0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d02c      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a5c      	ldr	r2, [pc, #368]	@ (800199c <HAL_DMA_Init+0x1d4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d027      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a5a      	ldr	r2, [pc, #360]	@ (80019a0 <HAL_DMA_Init+0x1d8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d022      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a59      	ldr	r2, [pc, #356]	@ (80019a4 <HAL_DMA_Init+0x1dc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d01d      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a57      	ldr	r2, [pc, #348]	@ (80019a8 <HAL_DMA_Init+0x1e0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d018      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a56      	ldr	r2, [pc, #344]	@ (80019ac <HAL_DMA_Init+0x1e4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d013      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a54      	ldr	r2, [pc, #336]	@ (80019b0 <HAL_DMA_Init+0x1e8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00e      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a53      	ldr	r2, [pc, #332]	@ (80019b4 <HAL_DMA_Init+0x1ec>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d009      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a51      	ldr	r2, [pc, #324]	@ (80019b8 <HAL_DMA_Init+0x1f0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d004      	beq.n	8001880 <HAL_DMA_Init+0xb8>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a50      	ldr	r2, [pc, #320]	@ (80019bc <HAL_DMA_Init+0x1f4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d101      	bne.n	8001884 <HAL_DMA_Init+0xbc>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_DMA_Init+0xbe>
 8001884:	2300      	movs	r3, #0
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 813b 	beq.w	8001b02 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2202      	movs	r2, #2
 8001890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a37      	ldr	r2, [pc, #220]	@ (8001980 <HAL_DMA_Init+0x1b8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d04a      	beq.n	800193c <HAL_DMA_Init+0x174>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a36      	ldr	r2, [pc, #216]	@ (8001984 <HAL_DMA_Init+0x1bc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d045      	beq.n	800193c <HAL_DMA_Init+0x174>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a34      	ldr	r2, [pc, #208]	@ (8001988 <HAL_DMA_Init+0x1c0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d040      	beq.n	800193c <HAL_DMA_Init+0x174>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a33      	ldr	r2, [pc, #204]	@ (800198c <HAL_DMA_Init+0x1c4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d03b      	beq.n	800193c <HAL_DMA_Init+0x174>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a31      	ldr	r2, [pc, #196]	@ (8001990 <HAL_DMA_Init+0x1c8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d036      	beq.n	800193c <HAL_DMA_Init+0x174>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a30      	ldr	r2, [pc, #192]	@ (8001994 <HAL_DMA_Init+0x1cc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d031      	beq.n	800193c <HAL_DMA_Init+0x174>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001998 <HAL_DMA_Init+0x1d0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d02c      	beq.n	800193c <HAL_DMA_Init+0x174>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a2d      	ldr	r2, [pc, #180]	@ (800199c <HAL_DMA_Init+0x1d4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d027      	beq.n	800193c <HAL_DMA_Init+0x174>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2b      	ldr	r2, [pc, #172]	@ (80019a0 <HAL_DMA_Init+0x1d8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d022      	beq.n	800193c <HAL_DMA_Init+0x174>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a2a      	ldr	r2, [pc, #168]	@ (80019a4 <HAL_DMA_Init+0x1dc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d01d      	beq.n	800193c <HAL_DMA_Init+0x174>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a28      	ldr	r2, [pc, #160]	@ (80019a8 <HAL_DMA_Init+0x1e0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d018      	beq.n	800193c <HAL_DMA_Init+0x174>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a27      	ldr	r2, [pc, #156]	@ (80019ac <HAL_DMA_Init+0x1e4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d013      	beq.n	800193c <HAL_DMA_Init+0x174>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a25      	ldr	r2, [pc, #148]	@ (80019b0 <HAL_DMA_Init+0x1e8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00e      	beq.n	800193c <HAL_DMA_Init+0x174>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a24      	ldr	r2, [pc, #144]	@ (80019b4 <HAL_DMA_Init+0x1ec>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d009      	beq.n	800193c <HAL_DMA_Init+0x174>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <HAL_DMA_Init+0x1f0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d004      	beq.n	800193c <HAL_DMA_Init+0x174>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_DMA_Init+0x1f4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d108      	bne.n	800194e <HAL_DMA_Init+0x186>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e007      	b.n	800195e <HAL_DMA_Init+0x196>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800195e:	e02f      	b.n	80019c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001960:	f7ff fd6e 	bl	8001440 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b05      	cmp	r3, #5
 800196c:	d928      	bls.n	80019c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2220      	movs	r2, #32
 8001972:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2203      	movs	r2, #3
 8001978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e246      	b.n	8001e0e <HAL_DMA_Init+0x646>
 8001980:	40020010 	.word	0x40020010
 8001984:	40020028 	.word	0x40020028
 8001988:	40020040 	.word	0x40020040
 800198c:	40020058 	.word	0x40020058
 8001990:	40020070 	.word	0x40020070
 8001994:	40020088 	.word	0x40020088
 8001998:	400200a0 	.word	0x400200a0
 800199c:	400200b8 	.word	0x400200b8
 80019a0:	40020410 	.word	0x40020410
 80019a4:	40020428 	.word	0x40020428
 80019a8:	40020440 	.word	0x40020440
 80019ac:	40020458 	.word	0x40020458
 80019b0:	40020470 	.word	0x40020470
 80019b4:	40020488 	.word	0x40020488
 80019b8:	400204a0 	.word	0x400204a0
 80019bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1c8      	bne.n	8001960 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4b83      	ldr	r3, [pc, #524]	@ (8001be8 <HAL_DMA_Init+0x420>)
 80019da:	4013      	ands	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80019e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d107      	bne.n	8001a24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a24:	4b71      	ldr	r3, [pc, #452]	@ (8001bec <HAL_DMA_Init+0x424>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b71      	ldr	r3, [pc, #452]	@ (8001bf0 <HAL_DMA_Init+0x428>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a30:	d328      	bcc.n	8001a84 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b28      	cmp	r3, #40	@ 0x28
 8001a38:	d903      	bls.n	8001a42 <HAL_DMA_Init+0x27a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a40:	d917      	bls.n	8001a72 <HAL_DMA_Init+0x2aa>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a48:	d903      	bls.n	8001a52 <HAL_DMA_Init+0x28a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b42      	cmp	r3, #66	@ 0x42
 8001a50:	d90f      	bls.n	8001a72 <HAL_DMA_Init+0x2aa>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b46      	cmp	r3, #70	@ 0x46
 8001a58:	d903      	bls.n	8001a62 <HAL_DMA_Init+0x29a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b48      	cmp	r3, #72	@ 0x48
 8001a60:	d907      	bls.n	8001a72 <HAL_DMA_Init+0x2aa>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b4e      	cmp	r3, #78	@ 0x4e
 8001a68:	d905      	bls.n	8001a76 <HAL_DMA_Init+0x2ae>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b52      	cmp	r3, #82	@ 0x52
 8001a70:	d801      	bhi.n	8001a76 <HAL_DMA_Init+0x2ae>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_DMA_Init+0x2b0>
 8001a76:	2300      	movs	r3, #0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a82:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f023 0307 	bic.w	r3, r3, #7
 8001a9a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d117      	bne.n	8001ade <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00e      	beq.n	8001ade <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f002 fb3f 	bl	8004144 <DMA_CheckFifoParam>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2240      	movs	r2, #64	@ 0x40
 8001ad0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e197      	b.n	8001e0e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f002 fa7a 	bl	8003fe0 <DMA_CalcBaseAndBitshift>
 8001aec:	4603      	mov	r3, r0
 8001aee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	223f      	movs	r2, #63	@ 0x3f
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	e0cd      	b.n	8001c9e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf4 <HAL_DMA_Init+0x42c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d022      	beq.n	8001b52 <HAL_DMA_Init+0x38a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a39      	ldr	r2, [pc, #228]	@ (8001bf8 <HAL_DMA_Init+0x430>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01d      	beq.n	8001b52 <HAL_DMA_Init+0x38a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a38      	ldr	r2, [pc, #224]	@ (8001bfc <HAL_DMA_Init+0x434>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d018      	beq.n	8001b52 <HAL_DMA_Init+0x38a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a36      	ldr	r2, [pc, #216]	@ (8001c00 <HAL_DMA_Init+0x438>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_DMA_Init+0x38a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a35      	ldr	r2, [pc, #212]	@ (8001c04 <HAL_DMA_Init+0x43c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00e      	beq.n	8001b52 <HAL_DMA_Init+0x38a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a33      	ldr	r2, [pc, #204]	@ (8001c08 <HAL_DMA_Init+0x440>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d009      	beq.n	8001b52 <HAL_DMA_Init+0x38a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a32      	ldr	r2, [pc, #200]	@ (8001c0c <HAL_DMA_Init+0x444>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d004      	beq.n	8001b52 <HAL_DMA_Init+0x38a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a30      	ldr	r2, [pc, #192]	@ (8001c10 <HAL_DMA_Init+0x448>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_DMA_Init+0x38e>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_DMA_Init+0x390>
 8001b56:	2300      	movs	r3, #0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8097 	beq.w	8001c8c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a24      	ldr	r2, [pc, #144]	@ (8001bf4 <HAL_DMA_Init+0x42c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d021      	beq.n	8001bac <HAL_DMA_Init+0x3e4>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a22      	ldr	r2, [pc, #136]	@ (8001bf8 <HAL_DMA_Init+0x430>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01c      	beq.n	8001bac <HAL_DMA_Init+0x3e4>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a21      	ldr	r2, [pc, #132]	@ (8001bfc <HAL_DMA_Init+0x434>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d017      	beq.n	8001bac <HAL_DMA_Init+0x3e4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1f      	ldr	r2, [pc, #124]	@ (8001c00 <HAL_DMA_Init+0x438>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d012      	beq.n	8001bac <HAL_DMA_Init+0x3e4>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001c04 <HAL_DMA_Init+0x43c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00d      	beq.n	8001bac <HAL_DMA_Init+0x3e4>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <HAL_DMA_Init+0x440>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d008      	beq.n	8001bac <HAL_DMA_Init+0x3e4>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001c0c <HAL_DMA_Init+0x444>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d003      	beq.n	8001bac <HAL_DMA_Init+0x3e4>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	@ (8001c10 <HAL_DMA_Init+0x448>)
 8001baa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <HAL_DMA_Init+0x44c>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b40      	cmp	r3, #64	@ 0x40
 8001bd2:	d021      	beq.n	8001c18 <HAL_DMA_Init+0x450>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b80      	cmp	r3, #128	@ 0x80
 8001bda:	d102      	bne.n	8001be2 <HAL_DMA_Init+0x41a>
 8001bdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001be0:	e01b      	b.n	8001c1a <HAL_DMA_Init+0x452>
 8001be2:	2300      	movs	r3, #0
 8001be4:	e019      	b.n	8001c1a <HAL_DMA_Init+0x452>
 8001be6:	bf00      	nop
 8001be8:	fe10803f 	.word	0xfe10803f
 8001bec:	5c001000 	.word	0x5c001000
 8001bf0:	ffff0000 	.word	0xffff0000
 8001bf4:	58025408 	.word	0x58025408
 8001bf8:	5802541c 	.word	0x5802541c
 8001bfc:	58025430 	.word	0x58025430
 8001c00:	58025444 	.word	0x58025444
 8001c04:	58025458 	.word	0x58025458
 8001c08:	5802546c 	.word	0x5802546c
 8001c0c:	58025480 	.word	0x58025480
 8001c10:	58025494 	.word	0x58025494
 8001c14:	fffe000f 	.word	0xfffe000f
 8001c18:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68d2      	ldr	r2, [r2, #12]
 8001c1e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c48:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001e18 <HAL_DMA_Init+0x650>)
 8001c60:	4413      	add	r3, r2
 8001c62:	4a6e      	ldr	r2, [pc, #440]	@ (8001e1c <HAL_DMA_Init+0x654>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	009a      	lsls	r2, r3, #2
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f002 f9b5 	bl	8003fe0 <DMA_CalcBaseAndBitshift>
 8001c76:	4603      	mov	r3, r0
 8001c78:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	2201      	movs	r2, #1
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	e008      	b.n	8001c9e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2240      	movs	r2, #64	@ 0x40
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2203      	movs	r2, #3
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0b7      	b.n	8001e0e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e20 <HAL_DMA_Init+0x658>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d072      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a5d      	ldr	r2, [pc, #372]	@ (8001e24 <HAL_DMA_Init+0x65c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d06d      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e28 <HAL_DMA_Init+0x660>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d068      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a5a      	ldr	r2, [pc, #360]	@ (8001e2c <HAL_DMA_Init+0x664>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d063      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a59      	ldr	r2, [pc, #356]	@ (8001e30 <HAL_DMA_Init+0x668>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d05e      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a57      	ldr	r2, [pc, #348]	@ (8001e34 <HAL_DMA_Init+0x66c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d059      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a56      	ldr	r2, [pc, #344]	@ (8001e38 <HAL_DMA_Init+0x670>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d054      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a54      	ldr	r2, [pc, #336]	@ (8001e3c <HAL_DMA_Init+0x674>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d04f      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a53      	ldr	r2, [pc, #332]	@ (8001e40 <HAL_DMA_Init+0x678>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d04a      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a51      	ldr	r2, [pc, #324]	@ (8001e44 <HAL_DMA_Init+0x67c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d045      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a50      	ldr	r2, [pc, #320]	@ (8001e48 <HAL_DMA_Init+0x680>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d040      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4e      	ldr	r2, [pc, #312]	@ (8001e4c <HAL_DMA_Init+0x684>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d03b      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a4d      	ldr	r2, [pc, #308]	@ (8001e50 <HAL_DMA_Init+0x688>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d036      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	@ (8001e54 <HAL_DMA_Init+0x68c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d031      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001e58 <HAL_DMA_Init+0x690>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d02c      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a48      	ldr	r2, [pc, #288]	@ (8001e5c <HAL_DMA_Init+0x694>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d027      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a47      	ldr	r2, [pc, #284]	@ (8001e60 <HAL_DMA_Init+0x698>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d022      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a45      	ldr	r2, [pc, #276]	@ (8001e64 <HAL_DMA_Init+0x69c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01d      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a44      	ldr	r2, [pc, #272]	@ (8001e68 <HAL_DMA_Init+0x6a0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d018      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a42      	ldr	r2, [pc, #264]	@ (8001e6c <HAL_DMA_Init+0x6a4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a41      	ldr	r2, [pc, #260]	@ (8001e70 <HAL_DMA_Init+0x6a8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00e      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a3f      	ldr	r2, [pc, #252]	@ (8001e74 <HAL_DMA_Init+0x6ac>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d009      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e78 <HAL_DMA_Init+0x6b0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d004      	beq.n	8001d8e <HAL_DMA_Init+0x5c6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a3c      	ldr	r2, [pc, #240]	@ (8001e7c <HAL_DMA_Init+0x6b4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_DMA_Init+0x5ca>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_DMA_Init+0x5cc>
 8001d92:	2300      	movs	r3, #0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d032      	beq.n	8001dfe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f002 fa4f 	bl	800423c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b80      	cmp	r3, #128	@ 0x80
 8001da4:	d102      	bne.n	8001dac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001dc0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_DMA_Init+0x624>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d80c      	bhi.n	8001dec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f002 facc 	bl	8004370 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	e008      	b.n	8001dfe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	a7fdabf8 	.word	0xa7fdabf8
 8001e1c:	cccccccd 	.word	0xcccccccd
 8001e20:	40020010 	.word	0x40020010
 8001e24:	40020028 	.word	0x40020028
 8001e28:	40020040 	.word	0x40020040
 8001e2c:	40020058 	.word	0x40020058
 8001e30:	40020070 	.word	0x40020070
 8001e34:	40020088 	.word	0x40020088
 8001e38:	400200a0 	.word	0x400200a0
 8001e3c:	400200b8 	.word	0x400200b8
 8001e40:	40020410 	.word	0x40020410
 8001e44:	40020428 	.word	0x40020428
 8001e48:	40020440 	.word	0x40020440
 8001e4c:	40020458 	.word	0x40020458
 8001e50:	40020470 	.word	0x40020470
 8001e54:	40020488 	.word	0x40020488
 8001e58:	400204a0 	.word	0x400204a0
 8001e5c:	400204b8 	.word	0x400204b8
 8001e60:	58025408 	.word	0x58025408
 8001e64:	5802541c 	.word	0x5802541c
 8001e68:	58025430 	.word	0x58025430
 8001e6c:	58025444 	.word	0x58025444
 8001e70:	58025458 	.word	0x58025458
 8001e74:	5802546c 	.word	0x5802546c
 8001e78:	58025480 	.word	0x58025480
 8001e7c:	58025494 	.word	0x58025494

08001e80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e226      	b.n	80022ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_DMA_Start_IT+0x2a>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e21f      	b.n	80022ea <HAL_DMA_Start_IT+0x46a>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	f040 820a 	bne.w	80022d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a68      	ldr	r2, [pc, #416]	@ (8002074 <HAL_DMA_Start_IT+0x1f4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d04a      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a66      	ldr	r2, [pc, #408]	@ (8002078 <HAL_DMA_Start_IT+0x1f8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d045      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a65      	ldr	r2, [pc, #404]	@ (800207c <HAL_DMA_Start_IT+0x1fc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d040      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a63      	ldr	r2, [pc, #396]	@ (8002080 <HAL_DMA_Start_IT+0x200>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d03b      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a62      	ldr	r2, [pc, #392]	@ (8002084 <HAL_DMA_Start_IT+0x204>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d036      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a60      	ldr	r2, [pc, #384]	@ (8002088 <HAL_DMA_Start_IT+0x208>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d031      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a5f      	ldr	r2, [pc, #380]	@ (800208c <HAL_DMA_Start_IT+0x20c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d02c      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a5d      	ldr	r2, [pc, #372]	@ (8002090 <HAL_DMA_Start_IT+0x210>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d027      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a5c      	ldr	r2, [pc, #368]	@ (8002094 <HAL_DMA_Start_IT+0x214>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d022      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a5a      	ldr	r2, [pc, #360]	@ (8002098 <HAL_DMA_Start_IT+0x218>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01d      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a59      	ldr	r2, [pc, #356]	@ (800209c <HAL_DMA_Start_IT+0x21c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d018      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a57      	ldr	r2, [pc, #348]	@ (80020a0 <HAL_DMA_Start_IT+0x220>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a56      	ldr	r2, [pc, #344]	@ (80020a4 <HAL_DMA_Start_IT+0x224>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00e      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a54      	ldr	r2, [pc, #336]	@ (80020a8 <HAL_DMA_Start_IT+0x228>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a53      	ldr	r2, [pc, #332]	@ (80020ac <HAL_DMA_Start_IT+0x22c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d004      	beq.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a51      	ldr	r2, [pc, #324]	@ (80020b0 <HAL_DMA_Start_IT+0x230>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d108      	bne.n	8001f80 <HAL_DMA_Start_IT+0x100>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e007      	b.n	8001f90 <HAL_DMA_Start_IT+0x110>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f001 fe76 	bl	8003c88 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a34      	ldr	r2, [pc, #208]	@ (8002074 <HAL_DMA_Start_IT+0x1f4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d04a      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a33      	ldr	r2, [pc, #204]	@ (8002078 <HAL_DMA_Start_IT+0x1f8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d045      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a31      	ldr	r2, [pc, #196]	@ (800207c <HAL_DMA_Start_IT+0x1fc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d040      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a30      	ldr	r2, [pc, #192]	@ (8002080 <HAL_DMA_Start_IT+0x200>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d03b      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002084 <HAL_DMA_Start_IT+0x204>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d036      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002088 <HAL_DMA_Start_IT+0x208>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d031      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800208c <HAL_DMA_Start_IT+0x20c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d02c      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8002090 <HAL_DMA_Start_IT+0x210>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d027      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a28      	ldr	r2, [pc, #160]	@ (8002094 <HAL_DMA_Start_IT+0x214>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d022      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a27      	ldr	r2, [pc, #156]	@ (8002098 <HAL_DMA_Start_IT+0x218>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d01d      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a25      	ldr	r2, [pc, #148]	@ (800209c <HAL_DMA_Start_IT+0x21c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d018      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a24      	ldr	r2, [pc, #144]	@ (80020a0 <HAL_DMA_Start_IT+0x220>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d013      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a22      	ldr	r2, [pc, #136]	@ (80020a4 <HAL_DMA_Start_IT+0x224>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00e      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a21      	ldr	r2, [pc, #132]	@ (80020a8 <HAL_DMA_Start_IT+0x228>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d009      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <HAL_DMA_Start_IT+0x22c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_DMA_Start_IT+0x1bc>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1e      	ldr	r2, [pc, #120]	@ (80020b0 <HAL_DMA_Start_IT+0x230>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <HAL_DMA_Start_IT+0x1c0>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_DMA_Start_IT+0x1c2>
 8002040:	2300      	movs	r3, #0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d036      	beq.n	80020b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 021e 	bic.w	r2, r3, #30
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0216 	orr.w	r2, r2, #22
 8002058:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03e      	beq.n	80020e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0208 	orr.w	r2, r2, #8
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e035      	b.n	80020e0 <HAL_DMA_Start_IT+0x260>
 8002074:	40020010 	.word	0x40020010
 8002078:	40020028 	.word	0x40020028
 800207c:	40020040 	.word	0x40020040
 8002080:	40020058 	.word	0x40020058
 8002084:	40020070 	.word	0x40020070
 8002088:	40020088 	.word	0x40020088
 800208c:	400200a0 	.word	0x400200a0
 8002090:	400200b8 	.word	0x400200b8
 8002094:	40020410 	.word	0x40020410
 8002098:	40020428 	.word	0x40020428
 800209c:	40020440 	.word	0x40020440
 80020a0:	40020458 	.word	0x40020458
 80020a4:	40020470 	.word	0x40020470
 80020a8:	40020488 	.word	0x40020488
 80020ac:	400204a0 	.word	0x400204a0
 80020b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 020e 	bic.w	r2, r3, #14
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 020a 	orr.w	r2, r2, #10
 80020c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0204 	orr.w	r2, r2, #4
 80020de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a83      	ldr	r2, [pc, #524]	@ (80022f4 <HAL_DMA_Start_IT+0x474>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d072      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a82      	ldr	r2, [pc, #520]	@ (80022f8 <HAL_DMA_Start_IT+0x478>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d06d      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a80      	ldr	r2, [pc, #512]	@ (80022fc <HAL_DMA_Start_IT+0x47c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d068      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a7f      	ldr	r2, [pc, #508]	@ (8002300 <HAL_DMA_Start_IT+0x480>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d063      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a7d      	ldr	r2, [pc, #500]	@ (8002304 <HAL_DMA_Start_IT+0x484>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d05e      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7c      	ldr	r2, [pc, #496]	@ (8002308 <HAL_DMA_Start_IT+0x488>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d059      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a7a      	ldr	r2, [pc, #488]	@ (800230c <HAL_DMA_Start_IT+0x48c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d054      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a79      	ldr	r2, [pc, #484]	@ (8002310 <HAL_DMA_Start_IT+0x490>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d04f      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a77      	ldr	r2, [pc, #476]	@ (8002314 <HAL_DMA_Start_IT+0x494>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d04a      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a76      	ldr	r2, [pc, #472]	@ (8002318 <HAL_DMA_Start_IT+0x498>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d045      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a74      	ldr	r2, [pc, #464]	@ (800231c <HAL_DMA_Start_IT+0x49c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d040      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a73      	ldr	r2, [pc, #460]	@ (8002320 <HAL_DMA_Start_IT+0x4a0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d03b      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a71      	ldr	r2, [pc, #452]	@ (8002324 <HAL_DMA_Start_IT+0x4a4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d036      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a70      	ldr	r2, [pc, #448]	@ (8002328 <HAL_DMA_Start_IT+0x4a8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d031      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6e      	ldr	r2, [pc, #440]	@ (800232c <HAL_DMA_Start_IT+0x4ac>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d02c      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6d      	ldr	r2, [pc, #436]	@ (8002330 <HAL_DMA_Start_IT+0x4b0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d027      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6b      	ldr	r2, [pc, #428]	@ (8002334 <HAL_DMA_Start_IT+0x4b4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d022      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6a      	ldr	r2, [pc, #424]	@ (8002338 <HAL_DMA_Start_IT+0x4b8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d01d      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a68      	ldr	r2, [pc, #416]	@ (800233c <HAL_DMA_Start_IT+0x4bc>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d018      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a67      	ldr	r2, [pc, #412]	@ (8002340 <HAL_DMA_Start_IT+0x4c0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d013      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a65      	ldr	r2, [pc, #404]	@ (8002344 <HAL_DMA_Start_IT+0x4c4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00e      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a64      	ldr	r2, [pc, #400]	@ (8002348 <HAL_DMA_Start_IT+0x4c8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d009      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a62      	ldr	r2, [pc, #392]	@ (800234c <HAL_DMA_Start_IT+0x4cc>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d004      	beq.n	80021d0 <HAL_DMA_Start_IT+0x350>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a61      	ldr	r2, [pc, #388]	@ (8002350 <HAL_DMA_Start_IT+0x4d0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d101      	bne.n	80021d4 <HAL_DMA_Start_IT+0x354>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_DMA_Start_IT+0x356>
 80021d4:	2300      	movs	r3, #0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01a      	beq.n	8002210 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800220a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800220e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a37      	ldr	r2, [pc, #220]	@ (80022f4 <HAL_DMA_Start_IT+0x474>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d04a      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a36      	ldr	r2, [pc, #216]	@ (80022f8 <HAL_DMA_Start_IT+0x478>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d045      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a34      	ldr	r2, [pc, #208]	@ (80022fc <HAL_DMA_Start_IT+0x47c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d040      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a33      	ldr	r2, [pc, #204]	@ (8002300 <HAL_DMA_Start_IT+0x480>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d03b      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a31      	ldr	r2, [pc, #196]	@ (8002304 <HAL_DMA_Start_IT+0x484>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d036      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a30      	ldr	r2, [pc, #192]	@ (8002308 <HAL_DMA_Start_IT+0x488>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d031      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2e      	ldr	r2, [pc, #184]	@ (800230c <HAL_DMA_Start_IT+0x48c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d02c      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2d      	ldr	r2, [pc, #180]	@ (8002310 <HAL_DMA_Start_IT+0x490>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d027      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2b      	ldr	r2, [pc, #172]	@ (8002314 <HAL_DMA_Start_IT+0x494>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d022      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2a      	ldr	r2, [pc, #168]	@ (8002318 <HAL_DMA_Start_IT+0x498>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d01d      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a28      	ldr	r2, [pc, #160]	@ (800231c <HAL_DMA_Start_IT+0x49c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d018      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <HAL_DMA_Start_IT+0x4a0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d013      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a25      	ldr	r2, [pc, #148]	@ (8002324 <HAL_DMA_Start_IT+0x4a4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00e      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a24      	ldr	r2, [pc, #144]	@ (8002328 <HAL_DMA_Start_IT+0x4a8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a22      	ldr	r2, [pc, #136]	@ (800232c <HAL_DMA_Start_IT+0x4ac>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d004      	beq.n	80022b0 <HAL_DMA_Start_IT+0x430>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a21      	ldr	r2, [pc, #132]	@ (8002330 <HAL_DMA_Start_IT+0x4b0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d108      	bne.n	80022c2 <HAL_DMA_Start_IT+0x442>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e012      	b.n	80022e8 <HAL_DMA_Start_IT+0x468>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e009      	b.n	80022e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40020010 	.word	0x40020010
 80022f8:	40020028 	.word	0x40020028
 80022fc:	40020040 	.word	0x40020040
 8002300:	40020058 	.word	0x40020058
 8002304:	40020070 	.word	0x40020070
 8002308:	40020088 	.word	0x40020088
 800230c:	400200a0 	.word	0x400200a0
 8002310:	400200b8 	.word	0x400200b8
 8002314:	40020410 	.word	0x40020410
 8002318:	40020428 	.word	0x40020428
 800231c:	40020440 	.word	0x40020440
 8002320:	40020458 	.word	0x40020458
 8002324:	40020470 	.word	0x40020470
 8002328:	40020488 	.word	0x40020488
 800232c:	400204a0 	.word	0x400204a0
 8002330:	400204b8 	.word	0x400204b8
 8002334:	58025408 	.word	0x58025408
 8002338:	5802541c 	.word	0x5802541c
 800233c:	58025430 	.word	0x58025430
 8002340:	58025444 	.word	0x58025444
 8002344:	58025458 	.word	0x58025458
 8002348:	5802546c 	.word	0x5802546c
 800234c:	58025480 	.word	0x58025480
 8002350:	58025494 	.word	0x58025494

08002354 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800235c:	f7ff f870 	bl	8001440 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e2dc      	b.n	8002926 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d008      	beq.n	800238a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2280      	movs	r2, #128	@ 0x80
 800237c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e2cd      	b.n	8002926 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a76      	ldr	r2, [pc, #472]	@ (8002568 <HAL_DMA_Abort+0x214>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d04a      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a74      	ldr	r2, [pc, #464]	@ (800256c <HAL_DMA_Abort+0x218>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d045      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a73      	ldr	r2, [pc, #460]	@ (8002570 <HAL_DMA_Abort+0x21c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d040      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a71      	ldr	r2, [pc, #452]	@ (8002574 <HAL_DMA_Abort+0x220>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d03b      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a70      	ldr	r2, [pc, #448]	@ (8002578 <HAL_DMA_Abort+0x224>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d036      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6e      	ldr	r2, [pc, #440]	@ (800257c <HAL_DMA_Abort+0x228>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d031      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6d      	ldr	r2, [pc, #436]	@ (8002580 <HAL_DMA_Abort+0x22c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d02c      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002584 <HAL_DMA_Abort+0x230>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d027      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6a      	ldr	r2, [pc, #424]	@ (8002588 <HAL_DMA_Abort+0x234>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d022      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a68      	ldr	r2, [pc, #416]	@ (800258c <HAL_DMA_Abort+0x238>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01d      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a67      	ldr	r2, [pc, #412]	@ (8002590 <HAL_DMA_Abort+0x23c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d018      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a65      	ldr	r2, [pc, #404]	@ (8002594 <HAL_DMA_Abort+0x240>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a64      	ldr	r2, [pc, #400]	@ (8002598 <HAL_DMA_Abort+0x244>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00e      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a62      	ldr	r2, [pc, #392]	@ (800259c <HAL_DMA_Abort+0x248>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a61      	ldr	r2, [pc, #388]	@ (80025a0 <HAL_DMA_Abort+0x24c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <HAL_DMA_Abort+0xd6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5f      	ldr	r2, [pc, #380]	@ (80025a4 <HAL_DMA_Abort+0x250>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_DMA_Abort+0xda>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_DMA_Abort+0xdc>
 800242e:	2300      	movs	r3, #0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 021e 	bic.w	r2, r2, #30
 8002442:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002452:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e00a      	b.n	8002472 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 020e 	bic.w	r2, r2, #14
 800246a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a3c      	ldr	r2, [pc, #240]	@ (8002568 <HAL_DMA_Abort+0x214>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d072      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3a      	ldr	r2, [pc, #232]	@ (800256c <HAL_DMA_Abort+0x218>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d06d      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a39      	ldr	r2, [pc, #228]	@ (8002570 <HAL_DMA_Abort+0x21c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d068      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a37      	ldr	r2, [pc, #220]	@ (8002574 <HAL_DMA_Abort+0x220>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d063      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a36      	ldr	r2, [pc, #216]	@ (8002578 <HAL_DMA_Abort+0x224>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d05e      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a34      	ldr	r2, [pc, #208]	@ (800257c <HAL_DMA_Abort+0x228>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d059      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a33      	ldr	r2, [pc, #204]	@ (8002580 <HAL_DMA_Abort+0x22c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d054      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a31      	ldr	r2, [pc, #196]	@ (8002584 <HAL_DMA_Abort+0x230>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d04f      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a30      	ldr	r2, [pc, #192]	@ (8002588 <HAL_DMA_Abort+0x234>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d04a      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a2e      	ldr	r2, [pc, #184]	@ (800258c <HAL_DMA_Abort+0x238>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d045      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2d      	ldr	r2, [pc, #180]	@ (8002590 <HAL_DMA_Abort+0x23c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d040      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002594 <HAL_DMA_Abort+0x240>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d03b      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002598 <HAL_DMA_Abort+0x244>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d036      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a28      	ldr	r2, [pc, #160]	@ (800259c <HAL_DMA_Abort+0x248>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d031      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a27      	ldr	r2, [pc, #156]	@ (80025a0 <HAL_DMA_Abort+0x24c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d02c      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a25      	ldr	r2, [pc, #148]	@ (80025a4 <HAL_DMA_Abort+0x250>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d027      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a24      	ldr	r2, [pc, #144]	@ (80025a8 <HAL_DMA_Abort+0x254>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d022      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a22      	ldr	r2, [pc, #136]	@ (80025ac <HAL_DMA_Abort+0x258>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01d      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a21      	ldr	r2, [pc, #132]	@ (80025b0 <HAL_DMA_Abort+0x25c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d018      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1f      	ldr	r2, [pc, #124]	@ (80025b4 <HAL_DMA_Abort+0x260>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1e      	ldr	r2, [pc, #120]	@ (80025b8 <HAL_DMA_Abort+0x264>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00e      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1c      	ldr	r2, [pc, #112]	@ (80025bc <HAL_DMA_Abort+0x268>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d009      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1b      	ldr	r2, [pc, #108]	@ (80025c0 <HAL_DMA_Abort+0x26c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d004      	beq.n	8002562 <HAL_DMA_Abort+0x20e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a19      	ldr	r2, [pc, #100]	@ (80025c4 <HAL_DMA_Abort+0x270>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d132      	bne.n	80025c8 <HAL_DMA_Abort+0x274>
 8002562:	2301      	movs	r3, #1
 8002564:	e031      	b.n	80025ca <HAL_DMA_Abort+0x276>
 8002566:	bf00      	nop
 8002568:	40020010 	.word	0x40020010
 800256c:	40020028 	.word	0x40020028
 8002570:	40020040 	.word	0x40020040
 8002574:	40020058 	.word	0x40020058
 8002578:	40020070 	.word	0x40020070
 800257c:	40020088 	.word	0x40020088
 8002580:	400200a0 	.word	0x400200a0
 8002584:	400200b8 	.word	0x400200b8
 8002588:	40020410 	.word	0x40020410
 800258c:	40020428 	.word	0x40020428
 8002590:	40020440 	.word	0x40020440
 8002594:	40020458 	.word	0x40020458
 8002598:	40020470 	.word	0x40020470
 800259c:	40020488 	.word	0x40020488
 80025a0:	400204a0 	.word	0x400204a0
 80025a4:	400204b8 	.word	0x400204b8
 80025a8:	58025408 	.word	0x58025408
 80025ac:	5802541c 	.word	0x5802541c
 80025b0:	58025430 	.word	0x58025430
 80025b4:	58025444 	.word	0x58025444
 80025b8:	58025458 	.word	0x58025458
 80025bc:	5802546c 	.word	0x5802546c
 80025c0:	58025480 	.word	0x58025480
 80025c4:	58025494 	.word	0x58025494
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6d      	ldr	r2, [pc, #436]	@ (8002798 <HAL_DMA_Abort+0x444>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d04a      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6b      	ldr	r2, [pc, #428]	@ (800279c <HAL_DMA_Abort+0x448>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d045      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6a      	ldr	r2, [pc, #424]	@ (80027a0 <HAL_DMA_Abort+0x44c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d040      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a68      	ldr	r2, [pc, #416]	@ (80027a4 <HAL_DMA_Abort+0x450>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d03b      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a67      	ldr	r2, [pc, #412]	@ (80027a8 <HAL_DMA_Abort+0x454>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d036      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a65      	ldr	r2, [pc, #404]	@ (80027ac <HAL_DMA_Abort+0x458>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d031      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a64      	ldr	r2, [pc, #400]	@ (80027b0 <HAL_DMA_Abort+0x45c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d02c      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a62      	ldr	r2, [pc, #392]	@ (80027b4 <HAL_DMA_Abort+0x460>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d027      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a61      	ldr	r2, [pc, #388]	@ (80027b8 <HAL_DMA_Abort+0x464>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d022      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a5f      	ldr	r2, [pc, #380]	@ (80027bc <HAL_DMA_Abort+0x468>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01d      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5e      	ldr	r2, [pc, #376]	@ (80027c0 <HAL_DMA_Abort+0x46c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d018      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5c      	ldr	r2, [pc, #368]	@ (80027c4 <HAL_DMA_Abort+0x470>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5b      	ldr	r2, [pc, #364]	@ (80027c8 <HAL_DMA_Abort+0x474>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00e      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a59      	ldr	r2, [pc, #356]	@ (80027cc <HAL_DMA_Abort+0x478>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d009      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a58      	ldr	r2, [pc, #352]	@ (80027d0 <HAL_DMA_Abort+0x47c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d004      	beq.n	800267e <HAL_DMA_Abort+0x32a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a56      	ldr	r2, [pc, #344]	@ (80027d4 <HAL_DMA_Abort+0x480>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <HAL_DMA_Abort+0x33c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e007      	b.n	80026a0 <HAL_DMA_Abort+0x34c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80026a0:	e013      	b.n	80026ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a2:	f7fe fecd 	bl	8001440 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d90c      	bls.n	80026ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2203      	movs	r2, #3
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e12d      	b.n	8002926 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e5      	bne.n	80026a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2f      	ldr	r2, [pc, #188]	@ (8002798 <HAL_DMA_Abort+0x444>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d04a      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2d      	ldr	r2, [pc, #180]	@ (800279c <HAL_DMA_Abort+0x448>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d045      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2c      	ldr	r2, [pc, #176]	@ (80027a0 <HAL_DMA_Abort+0x44c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d040      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2a      	ldr	r2, [pc, #168]	@ (80027a4 <HAL_DMA_Abort+0x450>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d03b      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a29      	ldr	r2, [pc, #164]	@ (80027a8 <HAL_DMA_Abort+0x454>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d036      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a27      	ldr	r2, [pc, #156]	@ (80027ac <HAL_DMA_Abort+0x458>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d031      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a26      	ldr	r2, [pc, #152]	@ (80027b0 <HAL_DMA_Abort+0x45c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d02c      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a24      	ldr	r2, [pc, #144]	@ (80027b4 <HAL_DMA_Abort+0x460>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d027      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a23      	ldr	r2, [pc, #140]	@ (80027b8 <HAL_DMA_Abort+0x464>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d022      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a21      	ldr	r2, [pc, #132]	@ (80027bc <HAL_DMA_Abort+0x468>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01d      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a20      	ldr	r2, [pc, #128]	@ (80027c0 <HAL_DMA_Abort+0x46c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d018      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1e      	ldr	r2, [pc, #120]	@ (80027c4 <HAL_DMA_Abort+0x470>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1d      	ldr	r2, [pc, #116]	@ (80027c8 <HAL_DMA_Abort+0x474>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00e      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1b      	ldr	r2, [pc, #108]	@ (80027cc <HAL_DMA_Abort+0x478>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d009      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1a      	ldr	r2, [pc, #104]	@ (80027d0 <HAL_DMA_Abort+0x47c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d004      	beq.n	8002776 <HAL_DMA_Abort+0x422>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a18      	ldr	r2, [pc, #96]	@ (80027d4 <HAL_DMA_Abort+0x480>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_DMA_Abort+0x426>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_DMA_Abort+0x428>
 800277a:	2300      	movs	r3, #0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d02b      	beq.n	80027d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	223f      	movs	r2, #63	@ 0x3f
 8002790:	409a      	lsls	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	e02a      	b.n	80027ee <HAL_DMA_Abort+0x49a>
 8002798:	40020010 	.word	0x40020010
 800279c:	40020028 	.word	0x40020028
 80027a0:	40020040 	.word	0x40020040
 80027a4:	40020058 	.word	0x40020058
 80027a8:	40020070 	.word	0x40020070
 80027ac:	40020088 	.word	0x40020088
 80027b0:	400200a0 	.word	0x400200a0
 80027b4:	400200b8 	.word	0x400200b8
 80027b8:	40020410 	.word	0x40020410
 80027bc:	40020428 	.word	0x40020428
 80027c0:	40020440 	.word	0x40020440
 80027c4:	40020458 	.word	0x40020458
 80027c8:	40020470 	.word	0x40020470
 80027cc:	40020488 	.word	0x40020488
 80027d0:	400204a0 	.word	0x400204a0
 80027d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2201      	movs	r2, #1
 80027e8:	409a      	lsls	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a4f      	ldr	r2, [pc, #316]	@ (8002930 <HAL_DMA_Abort+0x5dc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d072      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002934 <HAL_DMA_Abort+0x5e0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d06d      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a4c      	ldr	r2, [pc, #304]	@ (8002938 <HAL_DMA_Abort+0x5e4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d068      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a4a      	ldr	r2, [pc, #296]	@ (800293c <HAL_DMA_Abort+0x5e8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d063      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a49      	ldr	r2, [pc, #292]	@ (8002940 <HAL_DMA_Abort+0x5ec>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d05e      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a47      	ldr	r2, [pc, #284]	@ (8002944 <HAL_DMA_Abort+0x5f0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d059      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a46      	ldr	r2, [pc, #280]	@ (8002948 <HAL_DMA_Abort+0x5f4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d054      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a44      	ldr	r2, [pc, #272]	@ (800294c <HAL_DMA_Abort+0x5f8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d04f      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a43      	ldr	r2, [pc, #268]	@ (8002950 <HAL_DMA_Abort+0x5fc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d04a      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a41      	ldr	r2, [pc, #260]	@ (8002954 <HAL_DMA_Abort+0x600>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d045      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a40      	ldr	r2, [pc, #256]	@ (8002958 <HAL_DMA_Abort+0x604>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d040      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3e      	ldr	r2, [pc, #248]	@ (800295c <HAL_DMA_Abort+0x608>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d03b      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a3d      	ldr	r2, [pc, #244]	@ (8002960 <HAL_DMA_Abort+0x60c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d036      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3b      	ldr	r2, [pc, #236]	@ (8002964 <HAL_DMA_Abort+0x610>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d031      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a3a      	ldr	r2, [pc, #232]	@ (8002968 <HAL_DMA_Abort+0x614>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d02c      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a38      	ldr	r2, [pc, #224]	@ (800296c <HAL_DMA_Abort+0x618>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d027      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a37      	ldr	r2, [pc, #220]	@ (8002970 <HAL_DMA_Abort+0x61c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d022      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a35      	ldr	r2, [pc, #212]	@ (8002974 <HAL_DMA_Abort+0x620>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01d      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a34      	ldr	r2, [pc, #208]	@ (8002978 <HAL_DMA_Abort+0x624>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d018      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a32      	ldr	r2, [pc, #200]	@ (800297c <HAL_DMA_Abort+0x628>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a31      	ldr	r2, [pc, #196]	@ (8002980 <HAL_DMA_Abort+0x62c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00e      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002984 <HAL_DMA_Abort+0x630>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002988 <HAL_DMA_Abort+0x634>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_DMA_Abort+0x58a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2c      	ldr	r2, [pc, #176]	@ (800298c <HAL_DMA_Abort+0x638>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_DMA_Abort+0x58e>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_DMA_Abort+0x590>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d015      	beq.n	8002914 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00c      	beq.n	8002914 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002908:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002912:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40020010 	.word	0x40020010
 8002934:	40020028 	.word	0x40020028
 8002938:	40020040 	.word	0x40020040
 800293c:	40020058 	.word	0x40020058
 8002940:	40020070 	.word	0x40020070
 8002944:	40020088 	.word	0x40020088
 8002948:	400200a0 	.word	0x400200a0
 800294c:	400200b8 	.word	0x400200b8
 8002950:	40020410 	.word	0x40020410
 8002954:	40020428 	.word	0x40020428
 8002958:	40020440 	.word	0x40020440
 800295c:	40020458 	.word	0x40020458
 8002960:	40020470 	.word	0x40020470
 8002964:	40020488 	.word	0x40020488
 8002968:	400204a0 	.word	0x400204a0
 800296c:	400204b8 	.word	0x400204b8
 8002970:	58025408 	.word	0x58025408
 8002974:	5802541c 	.word	0x5802541c
 8002978:	58025430 	.word	0x58025430
 800297c:	58025444 	.word	0x58025444
 8002980:	58025458 	.word	0x58025458
 8002984:	5802546c 	.word	0x5802546c
 8002988:	58025480 	.word	0x58025480
 800298c:	58025494 	.word	0x58025494

08002990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e237      	b.n	8002e12 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d004      	beq.n	80029b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2280      	movs	r2, #128	@ 0x80
 80029b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e22c      	b.n	8002e12 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a5c      	ldr	r2, [pc, #368]	@ (8002b30 <HAL_DMA_Abort_IT+0x1a0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d04a      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b34 <HAL_DMA_Abort_IT+0x1a4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d045      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a59      	ldr	r2, [pc, #356]	@ (8002b38 <HAL_DMA_Abort_IT+0x1a8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d040      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a58      	ldr	r2, [pc, #352]	@ (8002b3c <HAL_DMA_Abort_IT+0x1ac>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d03b      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a56      	ldr	r2, [pc, #344]	@ (8002b40 <HAL_DMA_Abort_IT+0x1b0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d036      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a55      	ldr	r2, [pc, #340]	@ (8002b44 <HAL_DMA_Abort_IT+0x1b4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d031      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a53      	ldr	r2, [pc, #332]	@ (8002b48 <HAL_DMA_Abort_IT+0x1b8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d02c      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a52      	ldr	r2, [pc, #328]	@ (8002b4c <HAL_DMA_Abort_IT+0x1bc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d027      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a50      	ldr	r2, [pc, #320]	@ (8002b50 <HAL_DMA_Abort_IT+0x1c0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d022      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4f      	ldr	r2, [pc, #316]	@ (8002b54 <HAL_DMA_Abort_IT+0x1c4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d01d      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a4d      	ldr	r2, [pc, #308]	@ (8002b58 <HAL_DMA_Abort_IT+0x1c8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d018      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b5c <HAL_DMA_Abort_IT+0x1cc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a4a      	ldr	r2, [pc, #296]	@ (8002b60 <HAL_DMA_Abort_IT+0x1d0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00e      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a49      	ldr	r2, [pc, #292]	@ (8002b64 <HAL_DMA_Abort_IT+0x1d4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a47      	ldr	r2, [pc, #284]	@ (8002b68 <HAL_DMA_Abort_IT+0x1d8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc8>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a46      	ldr	r2, [pc, #280]	@ (8002b6c <HAL_DMA_Abort_IT+0x1dc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_DMA_Abort_IT+0xcc>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_DMA_Abort_IT+0xce>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8086 	beq.w	8002b70 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2204      	movs	r2, #4
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2f      	ldr	r2, [pc, #188]	@ (8002b30 <HAL_DMA_Abort_IT+0x1a0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d04a      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b34 <HAL_DMA_Abort_IT+0x1a4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d045      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2c      	ldr	r2, [pc, #176]	@ (8002b38 <HAL_DMA_Abort_IT+0x1a8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d040      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b3c <HAL_DMA_Abort_IT+0x1ac>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d03b      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a29      	ldr	r2, [pc, #164]	@ (8002b40 <HAL_DMA_Abort_IT+0x1b0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d036      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a28      	ldr	r2, [pc, #160]	@ (8002b44 <HAL_DMA_Abort_IT+0x1b4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d031      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a26      	ldr	r2, [pc, #152]	@ (8002b48 <HAL_DMA_Abort_IT+0x1b8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d02c      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a25      	ldr	r2, [pc, #148]	@ (8002b4c <HAL_DMA_Abort_IT+0x1bc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d027      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a23      	ldr	r2, [pc, #140]	@ (8002b50 <HAL_DMA_Abort_IT+0x1c0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d022      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a22      	ldr	r2, [pc, #136]	@ (8002b54 <HAL_DMA_Abort_IT+0x1c4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d01d      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a20      	ldr	r2, [pc, #128]	@ (8002b58 <HAL_DMA_Abort_IT+0x1c8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d018      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1f      	ldr	r2, [pc, #124]	@ (8002b5c <HAL_DMA_Abort_IT+0x1cc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b60 <HAL_DMA_Abort_IT+0x1d0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00e      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b64 <HAL_DMA_Abort_IT+0x1d4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d009      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1a      	ldr	r2, [pc, #104]	@ (8002b68 <HAL_DMA_Abort_IT+0x1d8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x17c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a19      	ldr	r2, [pc, #100]	@ (8002b6c <HAL_DMA_Abort_IT+0x1dc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d108      	bne.n	8002b1e <HAL_DMA_Abort_IT+0x18e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e178      	b.n	8002e10 <HAL_DMA_Abort_IT+0x480>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e16f      	b.n	8002e10 <HAL_DMA_Abort_IT+0x480>
 8002b30:	40020010 	.word	0x40020010
 8002b34:	40020028 	.word	0x40020028
 8002b38:	40020040 	.word	0x40020040
 8002b3c:	40020058 	.word	0x40020058
 8002b40:	40020070 	.word	0x40020070
 8002b44:	40020088 	.word	0x40020088
 8002b48:	400200a0 	.word	0x400200a0
 8002b4c:	400200b8 	.word	0x400200b8
 8002b50:	40020410 	.word	0x40020410
 8002b54:	40020428 	.word	0x40020428
 8002b58:	40020440 	.word	0x40020440
 8002b5c:	40020458 	.word	0x40020458
 8002b60:	40020470 	.word	0x40020470
 8002b64:	40020488 	.word	0x40020488
 8002b68:	400204a0 	.word	0x400204a0
 8002b6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 020e 	bic.w	r2, r2, #14
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a6c      	ldr	r2, [pc, #432]	@ (8002d38 <HAL_DMA_Abort_IT+0x3a8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d04a      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a6b      	ldr	r2, [pc, #428]	@ (8002d3c <HAL_DMA_Abort_IT+0x3ac>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d045      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a69      	ldr	r2, [pc, #420]	@ (8002d40 <HAL_DMA_Abort_IT+0x3b0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d040      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a68      	ldr	r2, [pc, #416]	@ (8002d44 <HAL_DMA_Abort_IT+0x3b4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d03b      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a66      	ldr	r2, [pc, #408]	@ (8002d48 <HAL_DMA_Abort_IT+0x3b8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d036      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a65      	ldr	r2, [pc, #404]	@ (8002d4c <HAL_DMA_Abort_IT+0x3bc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d031      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a63      	ldr	r2, [pc, #396]	@ (8002d50 <HAL_DMA_Abort_IT+0x3c0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02c      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a62      	ldr	r2, [pc, #392]	@ (8002d54 <HAL_DMA_Abort_IT+0x3c4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d027      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a60      	ldr	r2, [pc, #384]	@ (8002d58 <HAL_DMA_Abort_IT+0x3c8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d022      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5f      	ldr	r2, [pc, #380]	@ (8002d5c <HAL_DMA_Abort_IT+0x3cc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d01d      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d60 <HAL_DMA_Abort_IT+0x3d0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d018      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5c      	ldr	r2, [pc, #368]	@ (8002d64 <HAL_DMA_Abort_IT+0x3d4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8002d68 <HAL_DMA_Abort_IT+0x3d8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a59      	ldr	r2, [pc, #356]	@ (8002d6c <HAL_DMA_Abort_IT+0x3dc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a57      	ldr	r2, [pc, #348]	@ (8002d70 <HAL_DMA_Abort_IT+0x3e0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x290>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a56      	ldr	r2, [pc, #344]	@ (8002d74 <HAL_DMA_Abort_IT+0x3e4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d108      	bne.n	8002c32 <HAL_DMA_Abort_IT+0x2a2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e007      	b.n	8002c42 <HAL_DMA_Abort_IT+0x2b2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a3c      	ldr	r2, [pc, #240]	@ (8002d38 <HAL_DMA_Abort_IT+0x3a8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d072      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3a      	ldr	r2, [pc, #232]	@ (8002d3c <HAL_DMA_Abort_IT+0x3ac>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d06d      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a39      	ldr	r2, [pc, #228]	@ (8002d40 <HAL_DMA_Abort_IT+0x3b0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d068      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a37      	ldr	r2, [pc, #220]	@ (8002d44 <HAL_DMA_Abort_IT+0x3b4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d063      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a36      	ldr	r2, [pc, #216]	@ (8002d48 <HAL_DMA_Abort_IT+0x3b8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d05e      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a34      	ldr	r2, [pc, #208]	@ (8002d4c <HAL_DMA_Abort_IT+0x3bc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d059      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a33      	ldr	r2, [pc, #204]	@ (8002d50 <HAL_DMA_Abort_IT+0x3c0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d054      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a31      	ldr	r2, [pc, #196]	@ (8002d54 <HAL_DMA_Abort_IT+0x3c4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d04f      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a30      	ldr	r2, [pc, #192]	@ (8002d58 <HAL_DMA_Abort_IT+0x3c8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d04a      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8002d5c <HAL_DMA_Abort_IT+0x3cc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d045      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2d      	ldr	r2, [pc, #180]	@ (8002d60 <HAL_DMA_Abort_IT+0x3d0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d040      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d64 <HAL_DMA_Abort_IT+0x3d4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d03b      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8002d68 <HAL_DMA_Abort_IT+0x3d8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d036      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a28      	ldr	r2, [pc, #160]	@ (8002d6c <HAL_DMA_Abort_IT+0x3dc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d031      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a27      	ldr	r2, [pc, #156]	@ (8002d70 <HAL_DMA_Abort_IT+0x3e0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d02c      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a25      	ldr	r2, [pc, #148]	@ (8002d74 <HAL_DMA_Abort_IT+0x3e4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d027      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a24      	ldr	r2, [pc, #144]	@ (8002d78 <HAL_DMA_Abort_IT+0x3e8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d022      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a22      	ldr	r2, [pc, #136]	@ (8002d7c <HAL_DMA_Abort_IT+0x3ec>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01d      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a21      	ldr	r2, [pc, #132]	@ (8002d80 <HAL_DMA_Abort_IT+0x3f0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d018      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1f      	ldr	r2, [pc, #124]	@ (8002d84 <HAL_DMA_Abort_IT+0x3f4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <HAL_DMA_Abort_IT+0x3f8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00e      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1c      	ldr	r2, [pc, #112]	@ (8002d8c <HAL_DMA_Abort_IT+0x3fc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1b      	ldr	r2, [pc, #108]	@ (8002d90 <HAL_DMA_Abort_IT+0x400>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d004      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x3a2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a19      	ldr	r2, [pc, #100]	@ (8002d94 <HAL_DMA_Abort_IT+0x404>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d132      	bne.n	8002d98 <HAL_DMA_Abort_IT+0x408>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e031      	b.n	8002d9a <HAL_DMA_Abort_IT+0x40a>
 8002d36:	bf00      	nop
 8002d38:	40020010 	.word	0x40020010
 8002d3c:	40020028 	.word	0x40020028
 8002d40:	40020040 	.word	0x40020040
 8002d44:	40020058 	.word	0x40020058
 8002d48:	40020070 	.word	0x40020070
 8002d4c:	40020088 	.word	0x40020088
 8002d50:	400200a0 	.word	0x400200a0
 8002d54:	400200b8 	.word	0x400200b8
 8002d58:	40020410 	.word	0x40020410
 8002d5c:	40020428 	.word	0x40020428
 8002d60:	40020440 	.word	0x40020440
 8002d64:	40020458 	.word	0x40020458
 8002d68:	40020470 	.word	0x40020470
 8002d6c:	40020488 	.word	0x40020488
 8002d70:	400204a0 	.word	0x400204a0
 8002d74:	400204b8 	.word	0x400204b8
 8002d78:	58025408 	.word	0x58025408
 8002d7c:	5802541c 	.word	0x5802541c
 8002d80:	58025430 	.word	0x58025430
 8002d84:	58025444 	.word	0x58025444
 8002d88:	58025458 	.word	0x58025458
 8002d8c:	5802546c 	.word	0x5802546c
 8002d90:	58025480 	.word	0x58025480
 8002d94:	58025494 	.word	0x58025494
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d028      	beq.n	8002df0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002dcc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00c      	beq.n	8002df0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002de4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002dee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop

08002e1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	@ 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e28:	4b67      	ldr	r3, [pc, #412]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a67      	ldr	r2, [pc, #412]	@ (8002fcc <HAL_DMA_IRQHandler+0x1b0>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0a9b      	lsrs	r3, r3, #10
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5f      	ldr	r2, [pc, #380]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1b4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d04a      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1b8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d045      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a5c      	ldr	r2, [pc, #368]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1bc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d040      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a5a      	ldr	r2, [pc, #360]	@ (8002fdc <HAL_DMA_IRQHandler+0x1c0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d03b      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a59      	ldr	r2, [pc, #356]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1c4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d036      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a57      	ldr	r2, [pc, #348]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1c8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d031      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a56      	ldr	r2, [pc, #344]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1cc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d02c      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a54      	ldr	r2, [pc, #336]	@ (8002fec <HAL_DMA_IRQHandler+0x1d0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d027      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a53      	ldr	r2, [pc, #332]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1d4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d022      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a51      	ldr	r2, [pc, #324]	@ (8002ff4 <HAL_DMA_IRQHandler+0x1d8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d01d      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a50      	ldr	r2, [pc, #320]	@ (8002ff8 <HAL_DMA_IRQHandler+0x1dc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d018      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a4e      	ldr	r2, [pc, #312]	@ (8002ffc <HAL_DMA_IRQHandler+0x1e0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a4d      	ldr	r2, [pc, #308]	@ (8003000 <HAL_DMA_IRQHandler+0x1e4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00e      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a4b      	ldr	r2, [pc, #300]	@ (8003004 <HAL_DMA_IRQHandler+0x1e8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d009      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a4a      	ldr	r2, [pc, #296]	@ (8003008 <HAL_DMA_IRQHandler+0x1ec>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d004      	beq.n	8002eee <HAL_DMA_IRQHandler+0xd2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a48      	ldr	r2, [pc, #288]	@ (800300c <HAL_DMA_IRQHandler+0x1f0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_DMA_IRQHandler+0xd6>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_DMA_IRQHandler+0xd8>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 842b 	beq.w	8003750 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2208      	movs	r2, #8
 8002f04:	409a      	lsls	r2, r3
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80a2 	beq.w	8003054 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1b4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d04a      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1b8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d045      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1bc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d040      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2a      	ldr	r2, [pc, #168]	@ (8002fdc <HAL_DMA_IRQHandler+0x1c0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d03b      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a28      	ldr	r2, [pc, #160]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1c4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d036      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a27      	ldr	r2, [pc, #156]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1c8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d031      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a25      	ldr	r2, [pc, #148]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1cc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d02c      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a24      	ldr	r2, [pc, #144]	@ (8002fec <HAL_DMA_IRQHandler+0x1d0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d027      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a22      	ldr	r2, [pc, #136]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1d4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d022      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a21      	ldr	r2, [pc, #132]	@ (8002ff4 <HAL_DMA_IRQHandler+0x1d8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01d      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <HAL_DMA_IRQHandler+0x1dc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1e      	ldr	r2, [pc, #120]	@ (8002ffc <HAL_DMA_IRQHandler+0x1e0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <HAL_DMA_IRQHandler+0x1e4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1b      	ldr	r2, [pc, #108]	@ (8003004 <HAL_DMA_IRQHandler+0x1e8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	@ (8003008 <HAL_DMA_IRQHandler+0x1ec>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x194>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a18      	ldr	r2, [pc, #96]	@ (800300c <HAL_DMA_IRQHandler+0x1f0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d12f      	bne.n	8003010 <HAL_DMA_IRQHandler+0x1f4>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e02e      	b.n	8003024 <HAL_DMA_IRQHandler+0x208>
 8002fc6:	bf00      	nop
 8002fc8:	24000000 	.word	0x24000000
 8002fcc:	1b4e81b5 	.word	0x1b4e81b5
 8002fd0:	40020010 	.word	0x40020010
 8002fd4:	40020028 	.word	0x40020028
 8002fd8:	40020040 	.word	0x40020040
 8002fdc:	40020058 	.word	0x40020058
 8002fe0:	40020070 	.word	0x40020070
 8002fe4:	40020088 	.word	0x40020088
 8002fe8:	400200a0 	.word	0x400200a0
 8002fec:	400200b8 	.word	0x400200b8
 8002ff0:	40020410 	.word	0x40020410
 8002ff4:	40020428 	.word	0x40020428
 8002ff8:	40020440 	.word	0x40020440
 8002ffc:	40020458 	.word	0x40020458
 8003000:	40020470 	.word	0x40020470
 8003004:	40020488 	.word	0x40020488
 8003008:	400204a0 	.word	0x400204a0
 800300c:	400204b8 	.word	0x400204b8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	bf14      	ite	ne
 800301e:	2301      	movne	r3, #1
 8003020:	2300      	moveq	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0204 	bic.w	r2, r2, #4
 8003036:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2208      	movs	r2, #8
 8003042:	409a      	lsls	r2, r3
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d06e      	beq.n	8003148 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a69      	ldr	r2, [pc, #420]	@ (8003214 <HAL_DMA_IRQHandler+0x3f8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d04a      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a67      	ldr	r2, [pc, #412]	@ (8003218 <HAL_DMA_IRQHandler+0x3fc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d045      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a66      	ldr	r2, [pc, #408]	@ (800321c <HAL_DMA_IRQHandler+0x400>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d040      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a64      	ldr	r2, [pc, #400]	@ (8003220 <HAL_DMA_IRQHandler+0x404>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d03b      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a63      	ldr	r2, [pc, #396]	@ (8003224 <HAL_DMA_IRQHandler+0x408>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d036      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a61      	ldr	r2, [pc, #388]	@ (8003228 <HAL_DMA_IRQHandler+0x40c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d031      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a60      	ldr	r2, [pc, #384]	@ (800322c <HAL_DMA_IRQHandler+0x410>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d02c      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003230 <HAL_DMA_IRQHandler+0x414>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d027      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a5d      	ldr	r2, [pc, #372]	@ (8003234 <HAL_DMA_IRQHandler+0x418>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a5b      	ldr	r2, [pc, #364]	@ (8003238 <HAL_DMA_IRQHandler+0x41c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01d      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a5a      	ldr	r2, [pc, #360]	@ (800323c <HAL_DMA_IRQHandler+0x420>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a58      	ldr	r2, [pc, #352]	@ (8003240 <HAL_DMA_IRQHandler+0x424>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a57      	ldr	r2, [pc, #348]	@ (8003244 <HAL_DMA_IRQHandler+0x428>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a55      	ldr	r2, [pc, #340]	@ (8003248 <HAL_DMA_IRQHandler+0x42c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a54      	ldr	r2, [pc, #336]	@ (800324c <HAL_DMA_IRQHandler+0x430>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_DMA_IRQHandler+0x2ee>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a52      	ldr	r2, [pc, #328]	@ (8003250 <HAL_DMA_IRQHandler+0x434>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10a      	bne.n	8003120 <HAL_DMA_IRQHandler+0x304>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf14      	ite	ne
 8003118:	2301      	movne	r3, #1
 800311a:	2300      	moveq	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e003      	b.n	8003128 <HAL_DMA_IRQHandler+0x30c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00d      	beq.n	8003148 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2201      	movs	r2, #1
 8003136:	409a      	lsls	r2, r3
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003140:	f043 0202 	orr.w	r2, r3, #2
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2204      	movs	r2, #4
 8003152:	409a      	lsls	r2, r3
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 808f 	beq.w	800327c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2c      	ldr	r2, [pc, #176]	@ (8003214 <HAL_DMA_IRQHandler+0x3f8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d04a      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a2a      	ldr	r2, [pc, #168]	@ (8003218 <HAL_DMA_IRQHandler+0x3fc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d045      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a29      	ldr	r2, [pc, #164]	@ (800321c <HAL_DMA_IRQHandler+0x400>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d040      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a27      	ldr	r2, [pc, #156]	@ (8003220 <HAL_DMA_IRQHandler+0x404>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d03b      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a26      	ldr	r2, [pc, #152]	@ (8003224 <HAL_DMA_IRQHandler+0x408>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d036      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a24      	ldr	r2, [pc, #144]	@ (8003228 <HAL_DMA_IRQHandler+0x40c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d031      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a23      	ldr	r2, [pc, #140]	@ (800322c <HAL_DMA_IRQHandler+0x410>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d02c      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a21      	ldr	r2, [pc, #132]	@ (8003230 <HAL_DMA_IRQHandler+0x414>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d027      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a20      	ldr	r2, [pc, #128]	@ (8003234 <HAL_DMA_IRQHandler+0x418>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d022      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003238 <HAL_DMA_IRQHandler+0x41c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01d      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1d      	ldr	r2, [pc, #116]	@ (800323c <HAL_DMA_IRQHandler+0x420>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d018      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003240 <HAL_DMA_IRQHandler+0x424>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1a      	ldr	r2, [pc, #104]	@ (8003244 <HAL_DMA_IRQHandler+0x428>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00e      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a18      	ldr	r2, [pc, #96]	@ (8003248 <HAL_DMA_IRQHandler+0x42c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a17      	ldr	r2, [pc, #92]	@ (800324c <HAL_DMA_IRQHandler+0x430>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_DMA_IRQHandler+0x3e2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a15      	ldr	r2, [pc, #84]	@ (8003250 <HAL_DMA_IRQHandler+0x434>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12a      	bne.n	8003254 <HAL_DMA_IRQHandler+0x438>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e023      	b.n	800325c <HAL_DMA_IRQHandler+0x440>
 8003214:	40020010 	.word	0x40020010
 8003218:	40020028 	.word	0x40020028
 800321c:	40020040 	.word	0x40020040
 8003220:	40020058 	.word	0x40020058
 8003224:	40020070 	.word	0x40020070
 8003228:	40020088 	.word	0x40020088
 800322c:	400200a0 	.word	0x400200a0
 8003230:	400200b8 	.word	0x400200b8
 8003234:	40020410 	.word	0x40020410
 8003238:	40020428 	.word	0x40020428
 800323c:	40020440 	.word	0x40020440
 8003240:	40020458 	.word	0x40020458
 8003244:	40020470 	.word	0x40020470
 8003248:	40020488 	.word	0x40020488
 800324c:	400204a0 	.word	0x400204a0
 8003250:	400204b8 	.word	0x400204b8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2204      	movs	r2, #4
 800326a:	409a      	lsls	r2, r3
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	f043 0204 	orr.w	r2, r3, #4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2210      	movs	r2, #16
 8003286:	409a      	lsls	r2, r3
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a6 	beq.w	80033de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a85      	ldr	r2, [pc, #532]	@ (80034ac <HAL_DMA_IRQHandler+0x690>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d04a      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a83      	ldr	r2, [pc, #524]	@ (80034b0 <HAL_DMA_IRQHandler+0x694>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d045      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a82      	ldr	r2, [pc, #520]	@ (80034b4 <HAL_DMA_IRQHandler+0x698>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d040      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a80      	ldr	r2, [pc, #512]	@ (80034b8 <HAL_DMA_IRQHandler+0x69c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d03b      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7f      	ldr	r2, [pc, #508]	@ (80034bc <HAL_DMA_IRQHandler+0x6a0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d036      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a7d      	ldr	r2, [pc, #500]	@ (80034c0 <HAL_DMA_IRQHandler+0x6a4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d031      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7c      	ldr	r2, [pc, #496]	@ (80034c4 <HAL_DMA_IRQHandler+0x6a8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d02c      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a7a      	ldr	r2, [pc, #488]	@ (80034c8 <HAL_DMA_IRQHandler+0x6ac>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d027      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a79      	ldr	r2, [pc, #484]	@ (80034cc <HAL_DMA_IRQHandler+0x6b0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d022      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a77      	ldr	r2, [pc, #476]	@ (80034d0 <HAL_DMA_IRQHandler+0x6b4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01d      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a76      	ldr	r2, [pc, #472]	@ (80034d4 <HAL_DMA_IRQHandler+0x6b8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d018      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a74      	ldr	r2, [pc, #464]	@ (80034d8 <HAL_DMA_IRQHandler+0x6bc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a73      	ldr	r2, [pc, #460]	@ (80034dc <HAL_DMA_IRQHandler+0x6c0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a71      	ldr	r2, [pc, #452]	@ (80034e0 <HAL_DMA_IRQHandler+0x6c4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a70      	ldr	r2, [pc, #448]	@ (80034e4 <HAL_DMA_IRQHandler+0x6c8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_DMA_IRQHandler+0x516>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6e      	ldr	r2, [pc, #440]	@ (80034e8 <HAL_DMA_IRQHandler+0x6cc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10a      	bne.n	8003348 <HAL_DMA_IRQHandler+0x52c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	e009      	b.n	800335c <HAL_DMA_IRQHandler+0x540>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d03e      	beq.n	80033de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	2210      	movs	r2, #16
 800336a:	409a      	lsls	r2, r3
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d018      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d108      	bne.n	800339e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d024      	beq.n	80033de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
 800339c:	e01f      	b.n	80033de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01b      	beq.n	80033de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
 80033ae:	e016      	b.n	80033de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d107      	bne.n	80033ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0208 	bic.w	r2, r2, #8
 80033cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2220      	movs	r2, #32
 80033e8:	409a      	lsls	r2, r3
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8110 	beq.w	8003614 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2c      	ldr	r2, [pc, #176]	@ (80034ac <HAL_DMA_IRQHandler+0x690>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d04a      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2b      	ldr	r2, [pc, #172]	@ (80034b0 <HAL_DMA_IRQHandler+0x694>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d045      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a29      	ldr	r2, [pc, #164]	@ (80034b4 <HAL_DMA_IRQHandler+0x698>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d040      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a28      	ldr	r2, [pc, #160]	@ (80034b8 <HAL_DMA_IRQHandler+0x69c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d03b      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a26      	ldr	r2, [pc, #152]	@ (80034bc <HAL_DMA_IRQHandler+0x6a0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d036      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a25      	ldr	r2, [pc, #148]	@ (80034c0 <HAL_DMA_IRQHandler+0x6a4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d031      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a23      	ldr	r2, [pc, #140]	@ (80034c4 <HAL_DMA_IRQHandler+0x6a8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d02c      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a22      	ldr	r2, [pc, #136]	@ (80034c8 <HAL_DMA_IRQHandler+0x6ac>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d027      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a20      	ldr	r2, [pc, #128]	@ (80034cc <HAL_DMA_IRQHandler+0x6b0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d022      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1f      	ldr	r2, [pc, #124]	@ (80034d0 <HAL_DMA_IRQHandler+0x6b4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d01d      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1d      	ldr	r2, [pc, #116]	@ (80034d4 <HAL_DMA_IRQHandler+0x6b8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d018      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1c      	ldr	r2, [pc, #112]	@ (80034d8 <HAL_DMA_IRQHandler+0x6bc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1a      	ldr	r2, [pc, #104]	@ (80034dc <HAL_DMA_IRQHandler+0x6c0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a19      	ldr	r2, [pc, #100]	@ (80034e0 <HAL_DMA_IRQHandler+0x6c4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d009      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a17      	ldr	r2, [pc, #92]	@ (80034e4 <HAL_DMA_IRQHandler+0x6c8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <HAL_DMA_IRQHandler+0x678>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a16      	ldr	r2, [pc, #88]	@ (80034e8 <HAL_DMA_IRQHandler+0x6cc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d12b      	bne.n	80034ec <HAL_DMA_IRQHandler+0x6d0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e02a      	b.n	8003500 <HAL_DMA_IRQHandler+0x6e4>
 80034aa:	bf00      	nop
 80034ac:	40020010 	.word	0x40020010
 80034b0:	40020028 	.word	0x40020028
 80034b4:	40020040 	.word	0x40020040
 80034b8:	40020058 	.word	0x40020058
 80034bc:	40020070 	.word	0x40020070
 80034c0:	40020088 	.word	0x40020088
 80034c4:	400200a0 	.word	0x400200a0
 80034c8:	400200b8 	.word	0x400200b8
 80034cc:	40020410 	.word	0x40020410
 80034d0:	40020428 	.word	0x40020428
 80034d4:	40020440 	.word	0x40020440
 80034d8:	40020458 	.word	0x40020458
 80034dc:	40020470 	.word	0x40020470
 80034e0:	40020488 	.word	0x40020488
 80034e4:	400204a0 	.word	0x400204a0
 80034e8:	400204b8 	.word	0x400204b8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8087 	beq.w	8003614 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	2220      	movs	r2, #32
 8003510:	409a      	lsls	r2, r3
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b04      	cmp	r3, #4
 8003520:	d139      	bne.n	8003596 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0216 	bic.w	r2, r2, #22
 8003530:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003540:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_DMA_IRQHandler+0x736>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0208 	bic.w	r2, r2, #8
 8003560:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	223f      	movs	r2, #63	@ 0x3f
 800356c:	409a      	lsls	r2, r3
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 834a 	beq.w	8003c20 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
          }
          return;
 8003594:	e344      	b.n	8003c20 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d018      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d108      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d02c      	beq.n	8003614 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
 80035c2:	e027      	b.n	8003614 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d023      	beq.n	8003614 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
 80035d4:	e01e      	b.n	8003614 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10f      	bne.n	8003604 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0210 	bic.w	r2, r2, #16
 80035f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8306 	beq.w	8003c2a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8088 	beq.w	800373c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2204      	movs	r2, #4
 8003630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a7a      	ldr	r2, [pc, #488]	@ (8003824 <HAL_DMA_IRQHandler+0xa08>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d04a      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a79      	ldr	r2, [pc, #484]	@ (8003828 <HAL_DMA_IRQHandler+0xa0c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d045      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a77      	ldr	r2, [pc, #476]	@ (800382c <HAL_DMA_IRQHandler+0xa10>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d040      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a76      	ldr	r2, [pc, #472]	@ (8003830 <HAL_DMA_IRQHandler+0xa14>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d03b      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a74      	ldr	r2, [pc, #464]	@ (8003834 <HAL_DMA_IRQHandler+0xa18>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d036      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a73      	ldr	r2, [pc, #460]	@ (8003838 <HAL_DMA_IRQHandler+0xa1c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d031      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a71      	ldr	r2, [pc, #452]	@ (800383c <HAL_DMA_IRQHandler+0xa20>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d02c      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a70      	ldr	r2, [pc, #448]	@ (8003840 <HAL_DMA_IRQHandler+0xa24>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d027      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6e      	ldr	r2, [pc, #440]	@ (8003844 <HAL_DMA_IRQHandler+0xa28>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d022      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a6d      	ldr	r2, [pc, #436]	@ (8003848 <HAL_DMA_IRQHandler+0xa2c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d01d      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6b      	ldr	r2, [pc, #428]	@ (800384c <HAL_DMA_IRQHandler+0xa30>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d018      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6a      	ldr	r2, [pc, #424]	@ (8003850 <HAL_DMA_IRQHandler+0xa34>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a68      	ldr	r2, [pc, #416]	@ (8003854 <HAL_DMA_IRQHandler+0xa38>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00e      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a67      	ldr	r2, [pc, #412]	@ (8003858 <HAL_DMA_IRQHandler+0xa3c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d009      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a65      	ldr	r2, [pc, #404]	@ (800385c <HAL_DMA_IRQHandler+0xa40>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d004      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x8b8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a64      	ldr	r2, [pc, #400]	@ (8003860 <HAL_DMA_IRQHandler+0xa44>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d108      	bne.n	80036e6 <HAL_DMA_IRQHandler+0x8ca>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e007      	b.n	80036f6 <HAL_DMA_IRQHandler+0x8da>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3301      	adds	r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fe:	429a      	cmp	r2, r3
 8003700:	d307      	bcc.n	8003712 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f2      	bne.n	80036f6 <HAL_DMA_IRQHandler+0x8da>
 8003710:	e000      	b.n	8003714 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003712:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2203      	movs	r2, #3
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800372a:	e003      	b.n	8003734 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8272 	beq.w	8003c2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
 800374e:	e26c      	b.n	8003c2a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a43      	ldr	r2, [pc, #268]	@ (8003864 <HAL_DMA_IRQHandler+0xa48>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d022      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x984>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a42      	ldr	r2, [pc, #264]	@ (8003868 <HAL_DMA_IRQHandler+0xa4c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d01d      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x984>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a40      	ldr	r2, [pc, #256]	@ (800386c <HAL_DMA_IRQHandler+0xa50>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d018      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x984>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a3f      	ldr	r2, [pc, #252]	@ (8003870 <HAL_DMA_IRQHandler+0xa54>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x984>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a3d      	ldr	r2, [pc, #244]	@ (8003874 <HAL_DMA_IRQHandler+0xa58>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x984>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a3c      	ldr	r2, [pc, #240]	@ (8003878 <HAL_DMA_IRQHandler+0xa5c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x984>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a3a      	ldr	r2, [pc, #232]	@ (800387c <HAL_DMA_IRQHandler+0xa60>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x984>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a39      	ldr	r2, [pc, #228]	@ (8003880 <HAL_DMA_IRQHandler+0xa64>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d101      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x988>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_DMA_IRQHandler+0x98a>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 823f 	beq.w	8003c2a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2204      	movs	r2, #4
 80037be:	409a      	lsls	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80cd 	beq.w	8003964 <HAL_DMA_IRQHandler+0xb48>
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80c7 	beq.w	8003964 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	2204      	movs	r2, #4
 80037e0:	409a      	lsls	r2, r3
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d049      	beq.n	8003884 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8210 	beq.w	8003c24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800380c:	e20a      	b.n	8003c24 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8206 	beq.w	8003c24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003820:	e200      	b.n	8003c24 <HAL_DMA_IRQHandler+0xe08>
 8003822:	bf00      	nop
 8003824:	40020010 	.word	0x40020010
 8003828:	40020028 	.word	0x40020028
 800382c:	40020040 	.word	0x40020040
 8003830:	40020058 	.word	0x40020058
 8003834:	40020070 	.word	0x40020070
 8003838:	40020088 	.word	0x40020088
 800383c:	400200a0 	.word	0x400200a0
 8003840:	400200b8 	.word	0x400200b8
 8003844:	40020410 	.word	0x40020410
 8003848:	40020428 	.word	0x40020428
 800384c:	40020440 	.word	0x40020440
 8003850:	40020458 	.word	0x40020458
 8003854:	40020470 	.word	0x40020470
 8003858:	40020488 	.word	0x40020488
 800385c:	400204a0 	.word	0x400204a0
 8003860:	400204b8 	.word	0x400204b8
 8003864:	58025408 	.word	0x58025408
 8003868:	5802541c 	.word	0x5802541c
 800386c:	58025430 	.word	0x58025430
 8003870:	58025444 	.word	0x58025444
 8003874:	58025458 	.word	0x58025458
 8003878:	5802546c 	.word	0x5802546c
 800387c:	58025480 	.word	0x58025480
 8003880:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d160      	bne.n	8003950 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7f      	ldr	r2, [pc, #508]	@ (8003a90 <HAL_DMA_IRQHandler+0xc74>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d04a      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a7d      	ldr	r2, [pc, #500]	@ (8003a94 <HAL_DMA_IRQHandler+0xc78>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d045      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003a98 <HAL_DMA_IRQHandler+0xc7c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d040      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a7a      	ldr	r2, [pc, #488]	@ (8003a9c <HAL_DMA_IRQHandler+0xc80>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d03b      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a79      	ldr	r2, [pc, #484]	@ (8003aa0 <HAL_DMA_IRQHandler+0xc84>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d036      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a77      	ldr	r2, [pc, #476]	@ (8003aa4 <HAL_DMA_IRQHandler+0xc88>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d031      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a76      	ldr	r2, [pc, #472]	@ (8003aa8 <HAL_DMA_IRQHandler+0xc8c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d02c      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a74      	ldr	r2, [pc, #464]	@ (8003aac <HAL_DMA_IRQHandler+0xc90>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d027      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a73      	ldr	r2, [pc, #460]	@ (8003ab0 <HAL_DMA_IRQHandler+0xc94>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d022      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a71      	ldr	r2, [pc, #452]	@ (8003ab4 <HAL_DMA_IRQHandler+0xc98>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01d      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a70      	ldr	r2, [pc, #448]	@ (8003ab8 <HAL_DMA_IRQHandler+0xc9c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d018      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6e      	ldr	r2, [pc, #440]	@ (8003abc <HAL_DMA_IRQHandler+0xca0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ac0 <HAL_DMA_IRQHandler+0xca4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00e      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a6b      	ldr	r2, [pc, #428]	@ (8003ac4 <HAL_DMA_IRQHandler+0xca8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac8 <HAL_DMA_IRQHandler+0xcac>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d004      	beq.n	800392e <HAL_DMA_IRQHandler+0xb12>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a68      	ldr	r2, [pc, #416]	@ (8003acc <HAL_DMA_IRQHandler+0xcb0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <HAL_DMA_IRQHandler+0xb24>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0208 	bic.w	r2, r2, #8
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e007      	b.n	8003950 <HAL_DMA_IRQHandler+0xb34>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0204 	bic.w	r2, r2, #4
 800394e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8165 	beq.w	8003c24 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003962:	e15f      	b.n	8003c24 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2202      	movs	r2, #2
 800396e:	409a      	lsls	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80c5 	beq.w	8003b04 <HAL_DMA_IRQHandler+0xce8>
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80bf 	beq.w	8003b04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2202      	movs	r2, #2
 8003990:	409a      	lsls	r2, r3
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d018      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 813a 	beq.w	8003c28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039bc:	e134      	b.n	8003c28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8130 	beq.w	8003c28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039d0:	e12a      	b.n	8003c28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 8089 	bne.w	8003af0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003a90 <HAL_DMA_IRQHandler+0xc74>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d04a      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a29      	ldr	r2, [pc, #164]	@ (8003a94 <HAL_DMA_IRQHandler+0xc78>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d045      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a28      	ldr	r2, [pc, #160]	@ (8003a98 <HAL_DMA_IRQHandler+0xc7c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d040      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a26      	ldr	r2, [pc, #152]	@ (8003a9c <HAL_DMA_IRQHandler+0xc80>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d03b      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a25      	ldr	r2, [pc, #148]	@ (8003aa0 <HAL_DMA_IRQHandler+0xc84>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d036      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a23      	ldr	r2, [pc, #140]	@ (8003aa4 <HAL_DMA_IRQHandler+0xc88>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d031      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a22      	ldr	r2, [pc, #136]	@ (8003aa8 <HAL_DMA_IRQHandler+0xc8c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d02c      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a20      	ldr	r2, [pc, #128]	@ (8003aac <HAL_DMA_IRQHandler+0xc90>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d027      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab0 <HAL_DMA_IRQHandler+0xc94>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d022      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab4 <HAL_DMA_IRQHandler+0xc98>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01d      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab8 <HAL_DMA_IRQHandler+0xc9c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d018      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1a      	ldr	r2, [pc, #104]	@ (8003abc <HAL_DMA_IRQHandler+0xca0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a19      	ldr	r2, [pc, #100]	@ (8003ac0 <HAL_DMA_IRQHandler+0xca4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <HAL_DMA_IRQHandler+0xca8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d009      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a16      	ldr	r2, [pc, #88]	@ (8003ac8 <HAL_DMA_IRQHandler+0xcac>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xc62>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a14      	ldr	r2, [pc, #80]	@ (8003acc <HAL_DMA_IRQHandler+0xcb0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d128      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0xcb4>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0214 	bic.w	r2, r2, #20
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e027      	b.n	8003ae0 <HAL_DMA_IRQHandler+0xcc4>
 8003a90:	40020010 	.word	0x40020010
 8003a94:	40020028 	.word	0x40020028
 8003a98:	40020040 	.word	0x40020040
 8003a9c:	40020058 	.word	0x40020058
 8003aa0:	40020070 	.word	0x40020070
 8003aa4:	40020088 	.word	0x40020088
 8003aa8:	400200a0 	.word	0x400200a0
 8003aac:	400200b8 	.word	0x400200b8
 8003ab0:	40020410 	.word	0x40020410
 8003ab4:	40020428 	.word	0x40020428
 8003ab8:	40020440 	.word	0x40020440
 8003abc:	40020458 	.word	0x40020458
 8003ac0:	40020470 	.word	0x40020470
 8003ac4:	40020488 	.word	0x40020488
 8003ac8:	400204a0 	.word	0x400204a0
 8003acc:	400204b8 	.word	0x400204b8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020a 	bic.w	r2, r2, #10
 8003ade:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8097 	beq.w	8003c28 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b02:	e091      	b.n	8003c28 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8088 	beq.w	8003c2a <HAL_DMA_IRQHandler+0xe0e>
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8082 	beq.w	8003c2a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a41      	ldr	r2, [pc, #260]	@ (8003c30 <HAL_DMA_IRQHandler+0xe14>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04a      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3f      	ldr	r2, [pc, #252]	@ (8003c34 <HAL_DMA_IRQHandler+0xe18>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d045      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c38 <HAL_DMA_IRQHandler+0xe1c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d040      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a3c      	ldr	r2, [pc, #240]	@ (8003c3c <HAL_DMA_IRQHandler+0xe20>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d03b      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a3b      	ldr	r2, [pc, #236]	@ (8003c40 <HAL_DMA_IRQHandler+0xe24>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d036      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a39      	ldr	r2, [pc, #228]	@ (8003c44 <HAL_DMA_IRQHandler+0xe28>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d031      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a38      	ldr	r2, [pc, #224]	@ (8003c48 <HAL_DMA_IRQHandler+0xe2c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d02c      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a36      	ldr	r2, [pc, #216]	@ (8003c4c <HAL_DMA_IRQHandler+0xe30>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d027      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a35      	ldr	r2, [pc, #212]	@ (8003c50 <HAL_DMA_IRQHandler+0xe34>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d022      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a33      	ldr	r2, [pc, #204]	@ (8003c54 <HAL_DMA_IRQHandler+0xe38>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01d      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a32      	ldr	r2, [pc, #200]	@ (8003c58 <HAL_DMA_IRQHandler+0xe3c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d018      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a30      	ldr	r2, [pc, #192]	@ (8003c5c <HAL_DMA_IRQHandler+0xe40>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8003c60 <HAL_DMA_IRQHandler+0xe44>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2d      	ldr	r2, [pc, #180]	@ (8003c64 <HAL_DMA_IRQHandler+0xe48>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003c68 <HAL_DMA_IRQHandler+0xe4c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xdaa>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c6c <HAL_DMA_IRQHandler+0xe50>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d108      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0xdbc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 021c 	bic.w	r2, r2, #28
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e007      	b.n	8003be8 <HAL_DMA_IRQHandler+0xdcc>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 020e 	bic.w	r2, r2, #14
 8003be6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
 8003c1e:	e004      	b.n	8003c2a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c20:	bf00      	nop
 8003c22:	e002      	b.n	8003c2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c2a:	3728      	adds	r7, #40	@ 0x28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40020010 	.word	0x40020010
 8003c34:	40020028 	.word	0x40020028
 8003c38:	40020040 	.word	0x40020040
 8003c3c:	40020058 	.word	0x40020058
 8003c40:	40020070 	.word	0x40020070
 8003c44:	40020088 	.word	0x40020088
 8003c48:	400200a0 	.word	0x400200a0
 8003c4c:	400200b8 	.word	0x400200b8
 8003c50:	40020410 	.word	0x40020410
 8003c54:	40020428 	.word	0x40020428
 8003c58:	40020440 	.word	0x40020440
 8003c5c:	40020458 	.word	0x40020458
 8003c60:	40020470 	.word	0x40020470
 8003c64:	40020488 	.word	0x40020488
 8003c68:	400204a0 	.word	0x400204a0
 8003c6c:	400204b8 	.word	0x400204b8

08003c70 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ea4 <DMA_SetConfig+0x21c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d072      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a7d      	ldr	r2, [pc, #500]	@ (8003ea8 <DMA_SetConfig+0x220>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d06d      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7c      	ldr	r2, [pc, #496]	@ (8003eac <DMA_SetConfig+0x224>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d068      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a7a      	ldr	r2, [pc, #488]	@ (8003eb0 <DMA_SetConfig+0x228>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d063      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a79      	ldr	r2, [pc, #484]	@ (8003eb4 <DMA_SetConfig+0x22c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d05e      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a77      	ldr	r2, [pc, #476]	@ (8003eb8 <DMA_SetConfig+0x230>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d059      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a76      	ldr	r2, [pc, #472]	@ (8003ebc <DMA_SetConfig+0x234>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d054      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a74      	ldr	r2, [pc, #464]	@ (8003ec0 <DMA_SetConfig+0x238>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d04f      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a73      	ldr	r2, [pc, #460]	@ (8003ec4 <DMA_SetConfig+0x23c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d04a      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a71      	ldr	r2, [pc, #452]	@ (8003ec8 <DMA_SetConfig+0x240>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d045      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a70      	ldr	r2, [pc, #448]	@ (8003ecc <DMA_SetConfig+0x244>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d040      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a6e      	ldr	r2, [pc, #440]	@ (8003ed0 <DMA_SetConfig+0x248>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d03b      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8003ed4 <DMA_SetConfig+0x24c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d036      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6b      	ldr	r2, [pc, #428]	@ (8003ed8 <DMA_SetConfig+0x250>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d031      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6a      	ldr	r2, [pc, #424]	@ (8003edc <DMA_SetConfig+0x254>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d02c      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a68      	ldr	r2, [pc, #416]	@ (8003ee0 <DMA_SetConfig+0x258>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d027      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a67      	ldr	r2, [pc, #412]	@ (8003ee4 <DMA_SetConfig+0x25c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d022      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a65      	ldr	r2, [pc, #404]	@ (8003ee8 <DMA_SetConfig+0x260>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01d      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a64      	ldr	r2, [pc, #400]	@ (8003eec <DMA_SetConfig+0x264>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d018      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a62      	ldr	r2, [pc, #392]	@ (8003ef0 <DMA_SetConfig+0x268>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d013      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a61      	ldr	r2, [pc, #388]	@ (8003ef4 <DMA_SetConfig+0x26c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00e      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a5f      	ldr	r2, [pc, #380]	@ (8003ef8 <DMA_SetConfig+0x270>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d009      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a5e      	ldr	r2, [pc, #376]	@ (8003efc <DMA_SetConfig+0x274>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d004      	beq.n	8003d92 <DMA_SetConfig+0x10a>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8003f00 <DMA_SetConfig+0x278>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d101      	bne.n	8003d96 <DMA_SetConfig+0x10e>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <DMA_SetConfig+0x110>
 8003d96:	2300      	movs	r3, #0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003da4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d004      	beq.n	8003db8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003db6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a39      	ldr	r2, [pc, #228]	@ (8003ea4 <DMA_SetConfig+0x21c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d04a      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a38      	ldr	r2, [pc, #224]	@ (8003ea8 <DMA_SetConfig+0x220>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d045      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a36      	ldr	r2, [pc, #216]	@ (8003eac <DMA_SetConfig+0x224>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d040      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a35      	ldr	r2, [pc, #212]	@ (8003eb0 <DMA_SetConfig+0x228>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d03b      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a33      	ldr	r2, [pc, #204]	@ (8003eb4 <DMA_SetConfig+0x22c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d036      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a32      	ldr	r2, [pc, #200]	@ (8003eb8 <DMA_SetConfig+0x230>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d031      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a30      	ldr	r2, [pc, #192]	@ (8003ebc <DMA_SetConfig+0x234>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d02c      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2f      	ldr	r2, [pc, #188]	@ (8003ec0 <DMA_SetConfig+0x238>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d027      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec4 <DMA_SetConfig+0x23c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2c      	ldr	r2, [pc, #176]	@ (8003ec8 <DMA_SetConfig+0x240>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01d      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	@ (8003ecc <DMA_SetConfig+0x244>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a29      	ldr	r2, [pc, #164]	@ (8003ed0 <DMA_SetConfig+0x248>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a27      	ldr	r2, [pc, #156]	@ (8003ed4 <DMA_SetConfig+0x24c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a26      	ldr	r2, [pc, #152]	@ (8003ed8 <DMA_SetConfig+0x250>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a24      	ldr	r2, [pc, #144]	@ (8003edc <DMA_SetConfig+0x254>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <DMA_SetConfig+0x1d0>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a23      	ldr	r2, [pc, #140]	@ (8003ee0 <DMA_SetConfig+0x258>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <DMA_SetConfig+0x1d4>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <DMA_SetConfig+0x1d6>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d059      	beq.n	8003f16 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	223f      	movs	r2, #63	@ 0x3f
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e80:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b40      	cmp	r3, #64	@ 0x40
 8003e90:	d138      	bne.n	8003f04 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ea2:	e086      	b.n	8003fb2 <DMA_SetConfig+0x32a>
 8003ea4:	40020010 	.word	0x40020010
 8003ea8:	40020028 	.word	0x40020028
 8003eac:	40020040 	.word	0x40020040
 8003eb0:	40020058 	.word	0x40020058
 8003eb4:	40020070 	.word	0x40020070
 8003eb8:	40020088 	.word	0x40020088
 8003ebc:	400200a0 	.word	0x400200a0
 8003ec0:	400200b8 	.word	0x400200b8
 8003ec4:	40020410 	.word	0x40020410
 8003ec8:	40020428 	.word	0x40020428
 8003ecc:	40020440 	.word	0x40020440
 8003ed0:	40020458 	.word	0x40020458
 8003ed4:	40020470 	.word	0x40020470
 8003ed8:	40020488 	.word	0x40020488
 8003edc:	400204a0 	.word	0x400204a0
 8003ee0:	400204b8 	.word	0x400204b8
 8003ee4:	58025408 	.word	0x58025408
 8003ee8:	5802541c 	.word	0x5802541c
 8003eec:	58025430 	.word	0x58025430
 8003ef0:	58025444 	.word	0x58025444
 8003ef4:	58025458 	.word	0x58025458
 8003ef8:	5802546c 	.word	0x5802546c
 8003efc:	58025480 	.word	0x58025480
 8003f00:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	60da      	str	r2, [r3, #12]
}
 8003f14:	e04d      	b.n	8003fb2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a29      	ldr	r2, [pc, #164]	@ (8003fc0 <DMA_SetConfig+0x338>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d022      	beq.n	8003f66 <DMA_SetConfig+0x2de>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a27      	ldr	r2, [pc, #156]	@ (8003fc4 <DMA_SetConfig+0x33c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01d      	beq.n	8003f66 <DMA_SetConfig+0x2de>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a26      	ldr	r2, [pc, #152]	@ (8003fc8 <DMA_SetConfig+0x340>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d018      	beq.n	8003f66 <DMA_SetConfig+0x2de>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a24      	ldr	r2, [pc, #144]	@ (8003fcc <DMA_SetConfig+0x344>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <DMA_SetConfig+0x2de>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a23      	ldr	r2, [pc, #140]	@ (8003fd0 <DMA_SetConfig+0x348>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00e      	beq.n	8003f66 <DMA_SetConfig+0x2de>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <DMA_SetConfig+0x34c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d009      	beq.n	8003f66 <DMA_SetConfig+0x2de>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a20      	ldr	r2, [pc, #128]	@ (8003fd8 <DMA_SetConfig+0x350>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <DMA_SetConfig+0x2de>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1e      	ldr	r2, [pc, #120]	@ (8003fdc <DMA_SetConfig+0x354>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <DMA_SetConfig+0x2e2>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <DMA_SetConfig+0x2e4>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d020      	beq.n	8003fb2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	2201      	movs	r2, #1
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b40      	cmp	r3, #64	@ 0x40
 8003f8e:	d108      	bne.n	8003fa2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	60da      	str	r2, [r3, #12]
}
 8003fa0:	e007      	b.n	8003fb2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	60da      	str	r2, [r3, #12]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	58025408 	.word	0x58025408
 8003fc4:	5802541c 	.word	0x5802541c
 8003fc8:	58025430 	.word	0x58025430
 8003fcc:	58025444 	.word	0x58025444
 8003fd0:	58025458 	.word	0x58025458
 8003fd4:	5802546c 	.word	0x5802546c
 8003fd8:	58025480 	.word	0x58025480
 8003fdc:	58025494 	.word	0x58025494

08003fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a42      	ldr	r2, [pc, #264]	@ (80040f8 <DMA_CalcBaseAndBitshift+0x118>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d04a      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a41      	ldr	r2, [pc, #260]	@ (80040fc <DMA_CalcBaseAndBitshift+0x11c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d045      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a3f      	ldr	r2, [pc, #252]	@ (8004100 <DMA_CalcBaseAndBitshift+0x120>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d040      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a3e      	ldr	r2, [pc, #248]	@ (8004104 <DMA_CalcBaseAndBitshift+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d03b      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a3c      	ldr	r2, [pc, #240]	@ (8004108 <DMA_CalcBaseAndBitshift+0x128>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d036      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a3b      	ldr	r2, [pc, #236]	@ (800410c <DMA_CalcBaseAndBitshift+0x12c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d031      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a39      	ldr	r2, [pc, #228]	@ (8004110 <DMA_CalcBaseAndBitshift+0x130>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d02c      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a38      	ldr	r2, [pc, #224]	@ (8004114 <DMA_CalcBaseAndBitshift+0x134>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d027      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a36      	ldr	r2, [pc, #216]	@ (8004118 <DMA_CalcBaseAndBitshift+0x138>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d022      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a35      	ldr	r2, [pc, #212]	@ (800411c <DMA_CalcBaseAndBitshift+0x13c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d01d      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a33      	ldr	r2, [pc, #204]	@ (8004120 <DMA_CalcBaseAndBitshift+0x140>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d018      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a32      	ldr	r2, [pc, #200]	@ (8004124 <DMA_CalcBaseAndBitshift+0x144>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d013      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a30      	ldr	r2, [pc, #192]	@ (8004128 <DMA_CalcBaseAndBitshift+0x148>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00e      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2f      	ldr	r2, [pc, #188]	@ (800412c <DMA_CalcBaseAndBitshift+0x14c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d009      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2d      	ldr	r2, [pc, #180]	@ (8004130 <DMA_CalcBaseAndBitshift+0x150>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <DMA_CalcBaseAndBitshift+0xa8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2c      	ldr	r2, [pc, #176]	@ (8004134 <DMA_CalcBaseAndBitshift+0x154>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <DMA_CalcBaseAndBitshift+0xac>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <DMA_CalcBaseAndBitshift+0xae>
 800408c:	2300      	movs	r3, #0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d024      	beq.n	80040dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3b10      	subs	r3, #16
 800409a:	4a27      	ldr	r2, [pc, #156]	@ (8004138 <DMA_CalcBaseAndBitshift+0x158>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	4a24      	ldr	r2, [pc, #144]	@ (800413c <DMA_CalcBaseAndBitshift+0x15c>)
 80040ac:	5cd3      	ldrb	r3, [r2, r3]
 80040ae:	461a      	mov	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d908      	bls.n	80040cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <DMA_CalcBaseAndBitshift+0x160>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	1d1a      	adds	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80040ca:	e00d      	b.n	80040e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <DMA_CalcBaseAndBitshift+0x160>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040da:	e005      	b.n	80040e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40020010 	.word	0x40020010
 80040fc:	40020028 	.word	0x40020028
 8004100:	40020040 	.word	0x40020040
 8004104:	40020058 	.word	0x40020058
 8004108:	40020070 	.word	0x40020070
 800410c:	40020088 	.word	0x40020088
 8004110:	400200a0 	.word	0x400200a0
 8004114:	400200b8 	.word	0x400200b8
 8004118:	40020410 	.word	0x40020410
 800411c:	40020428 	.word	0x40020428
 8004120:	40020440 	.word	0x40020440
 8004124:	40020458 	.word	0x40020458
 8004128:	40020470 	.word	0x40020470
 800412c:	40020488 	.word	0x40020488
 8004130:	400204a0 	.word	0x400204a0
 8004134:	400204b8 	.word	0x400204b8
 8004138:	aaaaaaab 	.word	0xaaaaaaab
 800413c:	0800cfec 	.word	0x0800cfec
 8004140:	fffffc00 	.word	0xfffffc00

08004144 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d120      	bne.n	800419a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	2b03      	cmp	r3, #3
 800415e:	d858      	bhi.n	8004212 <DMA_CheckFifoParam+0xce>
 8004160:	a201      	add	r2, pc, #4	@ (adr r2, 8004168 <DMA_CheckFifoParam+0x24>)
 8004162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004166:	bf00      	nop
 8004168:	08004179 	.word	0x08004179
 800416c:	0800418b 	.word	0x0800418b
 8004170:	08004179 	.word	0x08004179
 8004174:	08004213 	.word	0x08004213
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d048      	beq.n	8004216 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004188:	e045      	b.n	8004216 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004192:	d142      	bne.n	800421a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004198:	e03f      	b.n	800421a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a2:	d123      	bne.n	80041ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d838      	bhi.n	800421e <DMA_CheckFifoParam+0xda>
 80041ac:	a201      	add	r2, pc, #4	@ (adr r2, 80041b4 <DMA_CheckFifoParam+0x70>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041cb 	.word	0x080041cb
 80041bc:	080041c5 	.word	0x080041c5
 80041c0:	080041dd 	.word	0x080041dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
        break;
 80041c8:	e030      	b.n	800422c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d025      	beq.n	8004222 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041da:	e022      	b.n	8004222 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041e4:	d11f      	bne.n	8004226 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041ea:	e01c      	b.n	8004226 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d902      	bls.n	80041fa <DMA_CheckFifoParam+0xb6>
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d003      	beq.n	8004200 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041f8:	e018      	b.n	800422c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
        break;
 80041fe:	e015      	b.n	800422c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00e      	beq.n	800422a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
    break;
 8004210:	e00b      	b.n	800422a <DMA_CheckFifoParam+0xe6>
        break;
 8004212:	bf00      	nop
 8004214:	e00a      	b.n	800422c <DMA_CheckFifoParam+0xe8>
        break;
 8004216:	bf00      	nop
 8004218:	e008      	b.n	800422c <DMA_CheckFifoParam+0xe8>
        break;
 800421a:	bf00      	nop
 800421c:	e006      	b.n	800422c <DMA_CheckFifoParam+0xe8>
        break;
 800421e:	bf00      	nop
 8004220:	e004      	b.n	800422c <DMA_CheckFifoParam+0xe8>
        break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <DMA_CheckFifoParam+0xe8>
        break;
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <DMA_CheckFifoParam+0xe8>
    break;
 800422a:	bf00      	nop
    }
  }

  return status;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop

0800423c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a38      	ldr	r2, [pc, #224]	@ (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d022      	beq.n	800429a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a36      	ldr	r2, [pc, #216]	@ (8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01d      	beq.n	800429a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a35      	ldr	r2, [pc, #212]	@ (8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d018      	beq.n	800429a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a33      	ldr	r2, [pc, #204]	@ (800433c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a32      	ldr	r2, [pc, #200]	@ (8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00e      	beq.n	800429a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a30      	ldr	r2, [pc, #192]	@ (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2f      	ldr	r2, [pc, #188]	@ (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2d      	ldr	r2, [pc, #180]	@ (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d101      	bne.n	800429e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800429e:	2300      	movs	r3, #0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01a      	beq.n	80042da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	3b08      	subs	r3, #8
 80042ac:	4a28      	ldr	r2, [pc, #160]	@ (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4b26      	ldr	r3, [pc, #152]	@ (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	461a      	mov	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a24      	ldr	r2, [pc, #144]	@ (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042c8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2201      	movs	r2, #1
 80042d2:	409a      	lsls	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042d8:	e024      	b.n	8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	3b10      	subs	r3, #16
 80042e2:	4a1e      	ldr	r2, [pc, #120]	@ (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d806      	bhi.n	8004302 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d902      	bls.n	8004302 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3308      	adds	r3, #8
 8004300:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4b18      	ldr	r3, [pc, #96]	@ (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	461a      	mov	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a16      	ldr	r2, [pc, #88]	@ (800436c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004314:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	2201      	movs	r2, #1
 800431e:	409a      	lsls	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	58025408 	.word	0x58025408
 8004334:	5802541c 	.word	0x5802541c
 8004338:	58025430 	.word	0x58025430
 800433c:	58025444 	.word	0x58025444
 8004340:	58025458 	.word	0x58025458
 8004344:	5802546c 	.word	0x5802546c
 8004348:	58025480 	.word	0x58025480
 800434c:	58025494 	.word	0x58025494
 8004350:	cccccccd 	.word	0xcccccccd
 8004354:	16009600 	.word	0x16009600
 8004358:	58025880 	.word	0x58025880
 800435c:	aaaaaaab 	.word	0xaaaaaaab
 8004360:	400204b8 	.word	0x400204b8
 8004364:	4002040f 	.word	0x4002040f
 8004368:	10008200 	.word	0x10008200
 800436c:	40020880 	.word	0x40020880

08004370 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d04a      	beq.n	800441c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d847      	bhi.n	800441c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a25      	ldr	r2, [pc, #148]	@ (8004428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d022      	beq.n	80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a24      	ldr	r2, [pc, #144]	@ (800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d01d      	beq.n	80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a22      	ldr	r2, [pc, #136]	@ (8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d018      	beq.n	80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a21      	ldr	r2, [pc, #132]	@ (8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00e      	beq.n	80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1e      	ldr	r2, [pc, #120]	@ (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d009      	beq.n	80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d101      	bne.n	80043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043e0:	2300      	movs	r3, #0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4b17      	ldr	r3, [pc, #92]	@ (8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a15      	ldr	r2, [pc, #84]	@ (800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80043fa:	e009      	b.n	8004410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4b14      	ldr	r3, [pc, #80]	@ (8004450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	461a      	mov	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a11      	ldr	r2, [pc, #68]	@ (8004454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800440e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	3b01      	subs	r3, #1
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	58025408 	.word	0x58025408
 800442c:	5802541c 	.word	0x5802541c
 8004430:	58025430 	.word	0x58025430
 8004434:	58025444 	.word	0x58025444
 8004438:	58025458 	.word	0x58025458
 800443c:	5802546c 	.word	0x5802546c
 8004440:	58025480 	.word	0x58025480
 8004444:	58025494 	.word	0x58025494
 8004448:	1600963f 	.word	0x1600963f
 800444c:	58025940 	.word	0x58025940
 8004450:	1000823f 	.word	0x1000823f
 8004454:	40020940 	.word	0x40020940

08004458 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	7a1b      	ldrb	r3, [r3, #8]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d154      	bne.n	800451c <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4b      	ldr	r2, [pc, #300]	@ (80045a4 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d049      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a49      	ldr	r2, [pc, #292]	@ (80045a8 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d044      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a48      	ldr	r2, [pc, #288]	@ (80045ac <HAL_DMAEx_ConfigMuxSync+0x154>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d03f      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a46      	ldr	r2, [pc, #280]	@ (80045b0 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d03a      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a45      	ldr	r2, [pc, #276]	@ (80045b4 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d035      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a43      	ldr	r2, [pc, #268]	@ (80045b8 <HAL_DMAEx_ConfigMuxSync+0x160>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d030      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a42      	ldr	r2, [pc, #264]	@ (80045bc <HAL_DMAEx_ConfigMuxSync+0x164>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d02b      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a40      	ldr	r2, [pc, #256]	@ (80045c0 <HAL_DMAEx_ConfigMuxSync+0x168>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d026      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a3f      	ldr	r2, [pc, #252]	@ (80045c4 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d021      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3d      	ldr	r2, [pc, #244]	@ (80045c8 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d01c      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a3c      	ldr	r2, [pc, #240]	@ (80045cc <HAL_DMAEx_ConfigMuxSync+0x174>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d017      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a3a      	ldr	r2, [pc, #232]	@ (80045d0 <HAL_DMAEx_ConfigMuxSync+0x178>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d012      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a39      	ldr	r2, [pc, #228]	@ (80045d4 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00d      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a37      	ldr	r2, [pc, #220]	@ (80045d8 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d008      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a36      	ldr	r2, [pc, #216]	@ (80045dc <HAL_DMAEx_ConfigMuxSync+0x184>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a34      	ldr	r2, [pc, #208]	@ (80045e0 <HAL_DMAEx_ConfigMuxSync+0x188>)
 800450e:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d131      	bne.n	800458c <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_DMAEx_ConfigMuxSync+0xde>
 8004532:	2302      	movs	r3, #2
 8004534:	e02f      	b.n	8004596 <HAL_DMAEx_ConfigMuxSync+0x13e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004548:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 800454c:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	b2d9      	uxtb	r1, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	061a      	lsls	r2, r3, #24
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	3b01      	subs	r3, #1
 8004560:	04db      	lsls	r3, r3, #19
 8004562:	431a      	orrs	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	431a      	orrs	r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	7a1b      	ldrb	r3, [r3, #8]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	7a5b      	ldrb	r3, [r3, #9]
 8004574:	025b      	lsls	r3, r3, #9
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457c:	430a      	orrs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	e004      	b.n	8004596 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40020010 	.word	0x40020010
 80045a8:	40020028 	.word	0x40020028
 80045ac:	40020040 	.word	0x40020040
 80045b0:	40020058 	.word	0x40020058
 80045b4:	40020070 	.word	0x40020070
 80045b8:	40020088 	.word	0x40020088
 80045bc:	400200a0 	.word	0x400200a0
 80045c0:	400200b8 	.word	0x400200b8
 80045c4:	40020410 	.word	0x40020410
 80045c8:	40020428 	.word	0x40020428
 80045cc:	40020440 	.word	0x40020440
 80045d0:	40020458 	.word	0x40020458
 80045d4:	40020470 	.word	0x40020470
 80045d8:	40020488 	.word	0x40020488
 80045dc:	400204a0 	.word	0x400204a0
 80045e0:	400204b8 	.word	0x400204b8

080045e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	@ 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045f2:	4b89      	ldr	r3, [pc, #548]	@ (8004818 <HAL_GPIO_Init+0x234>)
 80045f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045f6:	e194      	b.n	8004922 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	2101      	movs	r1, #1
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	fa01 f303 	lsl.w	r3, r1, r3
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8186 	beq.w	800491c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d005      	beq.n	8004628 <HAL_GPIO_Init+0x44>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d130      	bne.n	800468a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	2203      	movs	r2, #3
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800465e:	2201      	movs	r2, #1
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	f003 0201 	and.w	r2, r3, #1
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b03      	cmp	r3, #3
 8004694:	d017      	beq.n	80046c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	2203      	movs	r2, #3
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d123      	bne.n	800471a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	08da      	lsrs	r2, r3, #3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3208      	adds	r2, #8
 80046da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	220f      	movs	r2, #15
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	08da      	lsrs	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3208      	adds	r2, #8
 8004714:	69b9      	ldr	r1, [r7, #24]
 8004716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	2203      	movs	r2, #3
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0203 	and.w	r2, r3, #3
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80e0 	beq.w	800491c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800475c:	4b2f      	ldr	r3, [pc, #188]	@ (800481c <HAL_GPIO_Init+0x238>)
 800475e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004762:	4a2e      	ldr	r2, [pc, #184]	@ (800481c <HAL_GPIO_Init+0x238>)
 8004764:	f043 0302 	orr.w	r3, r3, #2
 8004768:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800476c:	4b2b      	ldr	r3, [pc, #172]	@ (800481c <HAL_GPIO_Init+0x238>)
 800476e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800477a:	4a29      	ldr	r2, [pc, #164]	@ (8004820 <HAL_GPIO_Init+0x23c>)
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	3302      	adds	r3, #2
 8004782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a20      	ldr	r2, [pc, #128]	@ (8004824 <HAL_GPIO_Init+0x240>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d052      	beq.n	800484c <HAL_GPIO_Init+0x268>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004828 <HAL_GPIO_Init+0x244>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d031      	beq.n	8004812 <HAL_GPIO_Init+0x22e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1e      	ldr	r2, [pc, #120]	@ (800482c <HAL_GPIO_Init+0x248>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02b      	beq.n	800480e <HAL_GPIO_Init+0x22a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004830 <HAL_GPIO_Init+0x24c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d025      	beq.n	800480a <HAL_GPIO_Init+0x226>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004834 <HAL_GPIO_Init+0x250>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01f      	beq.n	8004806 <HAL_GPIO_Init+0x222>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004838 <HAL_GPIO_Init+0x254>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d019      	beq.n	8004802 <HAL_GPIO_Init+0x21e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1a      	ldr	r2, [pc, #104]	@ (800483c <HAL_GPIO_Init+0x258>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_GPIO_Init+0x21a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a19      	ldr	r2, [pc, #100]	@ (8004840 <HAL_GPIO_Init+0x25c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00d      	beq.n	80047fa <HAL_GPIO_Init+0x216>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a18      	ldr	r2, [pc, #96]	@ (8004844 <HAL_GPIO_Init+0x260>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <HAL_GPIO_Init+0x212>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a17      	ldr	r2, [pc, #92]	@ (8004848 <HAL_GPIO_Init+0x264>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d101      	bne.n	80047f2 <HAL_GPIO_Init+0x20e>
 80047ee:	2309      	movs	r3, #9
 80047f0:	e02d      	b.n	800484e <HAL_GPIO_Init+0x26a>
 80047f2:	230a      	movs	r3, #10
 80047f4:	e02b      	b.n	800484e <HAL_GPIO_Init+0x26a>
 80047f6:	2308      	movs	r3, #8
 80047f8:	e029      	b.n	800484e <HAL_GPIO_Init+0x26a>
 80047fa:	2307      	movs	r3, #7
 80047fc:	e027      	b.n	800484e <HAL_GPIO_Init+0x26a>
 80047fe:	2306      	movs	r3, #6
 8004800:	e025      	b.n	800484e <HAL_GPIO_Init+0x26a>
 8004802:	2305      	movs	r3, #5
 8004804:	e023      	b.n	800484e <HAL_GPIO_Init+0x26a>
 8004806:	2304      	movs	r3, #4
 8004808:	e021      	b.n	800484e <HAL_GPIO_Init+0x26a>
 800480a:	2303      	movs	r3, #3
 800480c:	e01f      	b.n	800484e <HAL_GPIO_Init+0x26a>
 800480e:	2302      	movs	r3, #2
 8004810:	e01d      	b.n	800484e <HAL_GPIO_Init+0x26a>
 8004812:	2301      	movs	r3, #1
 8004814:	e01b      	b.n	800484e <HAL_GPIO_Init+0x26a>
 8004816:	bf00      	nop
 8004818:	58000080 	.word	0x58000080
 800481c:	58024400 	.word	0x58024400
 8004820:	58000400 	.word	0x58000400
 8004824:	58020000 	.word	0x58020000
 8004828:	58020400 	.word	0x58020400
 800482c:	58020800 	.word	0x58020800
 8004830:	58020c00 	.word	0x58020c00
 8004834:	58021000 	.word	0x58021000
 8004838:	58021400 	.word	0x58021400
 800483c:	58021800 	.word	0x58021800
 8004840:	58021c00 	.word	0x58021c00
 8004844:	58022000 	.word	0x58022000
 8004848:	58022400 	.word	0x58022400
 800484c:	2300      	movs	r3, #0
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	f002 0203 	and.w	r2, r2, #3
 8004854:	0092      	lsls	r2, r2, #2
 8004856:	4093      	lsls	r3, r2
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800485e:	4938      	ldr	r1, [pc, #224]	@ (8004940 <HAL_GPIO_Init+0x35c>)
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	089b      	lsrs	r3, r3, #2
 8004864:	3302      	adds	r3, #2
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800486c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004892:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800489a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4013      	ands	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	3301      	adds	r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	f47f ae63 	bne.w	80045f8 <HAL_GPIO_Init+0x14>
  }
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	3724      	adds	r7, #36	@ 0x24
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	58000400 	.word	0x58000400

08004944 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800494c:	4a08      	ldr	r2, [pc, #32]	@ (8004970 <HAL_HSEM_FastTake+0x2c>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3320      	adds	r3, #32
 8004952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004956:	4a07      	ldr	r2, [pc, #28]	@ (8004974 <HAL_HSEM_FastTake+0x30>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d101      	bne.n	8004960 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
}
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	58026400 	.word	0x58026400
 8004974:	80000300 	.word	0x80000300

08004978 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004982:	4906      	ldr	r1, [pc, #24]	@ (800499c <HAL_HSEM_Release+0x24>)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	58026400 	.word	0x58026400

080049a0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80049a8:	4b29      	ldr	r3, [pc, #164]	@ (8004a50 <HAL_PWREx_ConfigSupply+0xb0>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	2b06      	cmp	r3, #6
 80049b2:	d00a      	beq.n	80049ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049b4:	4b26      	ldr	r3, [pc, #152]	@ (8004a50 <HAL_PWREx_ConfigSupply+0xb0>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d001      	beq.n	80049c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e040      	b.n	8004a48 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e03e      	b.n	8004a48 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049ca:	4b21      	ldr	r3, [pc, #132]	@ (8004a50 <HAL_PWREx_ConfigSupply+0xb0>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80049d2:	491f      	ldr	r1, [pc, #124]	@ (8004a50 <HAL_PWREx_ConfigSupply+0xb0>)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049da:	f7fc fd31 	bl	8001440 <HAL_GetTick>
 80049de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049e0:	e009      	b.n	80049f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049e2:	f7fc fd2d 	bl	8001440 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049f0:	d901      	bls.n	80049f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e028      	b.n	8004a48 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049f6:	4b16      	ldr	r3, [pc, #88]	@ (8004a50 <HAL_PWREx_ConfigSupply+0xb0>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a02:	d1ee      	bne.n	80049e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b1e      	cmp	r3, #30
 8004a08:	d008      	beq.n	8004a1c <HAL_PWREx_ConfigSupply+0x7c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a0e:	d005      	beq.n	8004a1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b1d      	cmp	r3, #29
 8004a14:	d002      	beq.n	8004a1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b2d      	cmp	r3, #45	@ 0x2d
 8004a1a:	d114      	bne.n	8004a46 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004a1c:	f7fc fd10 	bl	8001440 <HAL_GetTick>
 8004a20:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a22:	e009      	b.n	8004a38 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a24:	f7fc fd0c 	bl	8001440 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a32:	d901      	bls.n	8004a38 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e007      	b.n	8004a48 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a44:	d1ee      	bne.n	8004a24 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	58024800 	.word	0x58024800

08004a54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	@ 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f000 bc48 	b.w	80052f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8088 	beq.w	8004b86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a76:	4b99      	ldr	r3, [pc, #612]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a80:	4b96      	ldr	r3, [pc, #600]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d007      	beq.n	8004a9c <HAL_RCC_OscConfig+0x48>
 8004a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8e:	2b18      	cmp	r3, #24
 8004a90:	d111      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x62>
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d10c      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	4b8f      	ldr	r3, [pc, #572]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d06d      	beq.n	8004b84 <HAL_RCC_OscConfig+0x130>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d169      	bne.n	8004b84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f000 bc21 	b.w	80052f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004abe:	d106      	bne.n	8004ace <HAL_RCC_OscConfig+0x7a>
 8004ac0:	4b86      	ldr	r3, [pc, #536]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a85      	ldr	r2, [pc, #532]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	e02e      	b.n	8004b2c <HAL_RCC_OscConfig+0xd8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x9c>
 8004ad6:	4b81      	ldr	r3, [pc, #516]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a80      	ldr	r2, [pc, #512]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	4b7e      	ldr	r3, [pc, #504]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a7d      	ldr	r2, [pc, #500]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004ae8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e01d      	b.n	8004b2c <HAL_RCC_OscConfig+0xd8>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0xc0>
 8004afa:	4b78      	ldr	r3, [pc, #480]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a77      	ldr	r2, [pc, #476]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4b75      	ldr	r3, [pc, #468]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a74      	ldr	r2, [pc, #464]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e00b      	b.n	8004b2c <HAL_RCC_OscConfig+0xd8>
 8004b14:	4b71      	ldr	r3, [pc, #452]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a70      	ldr	r2, [pc, #448]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	4b6e      	ldr	r3, [pc, #440]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a6d      	ldr	r2, [pc, #436]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d013      	beq.n	8004b5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fc fc84 	bl	8001440 <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7fc fc80 	bl	8001440 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	@ 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e3d4      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b4e:	4b63      	ldr	r3, [pc, #396]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0xe8>
 8004b5a:	e014      	b.n	8004b86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7fc fc70 	bl	8001440 <HAL_GetTick>
 8004b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b64:	f7fc fc6c 	bl	8001440 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	@ 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e3c0      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b76:	4b59      	ldr	r3, [pc, #356]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0x110>
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80ca 	beq.w	8004d28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b94:	4b51      	ldr	r3, [pc, #324]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <HAL_RCC_OscConfig+0x166>
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	2b18      	cmp	r3, #24
 8004bae:	d156      	bne.n	8004c5e <HAL_RCC_OscConfig+0x20a>
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d151      	bne.n	8004c5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bba:	4b48      	ldr	r3, [pc, #288]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x17e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e392      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bd2:	4b42      	ldr	r3, [pc, #264]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 0219 	bic.w	r2, r3, #25
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	493f      	ldr	r1, [pc, #252]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fc fc2c 	bl	8001440 <HAL_GetTick>
 8004be8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bec:	f7fc fc28 	bl	8001440 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e37c      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bfe:	4b37      	ldr	r3, [pc, #220]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0a:	f7fc fc49 	bl	80014a0 <HAL_GetREVID>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d817      	bhi.n	8004c48 <HAL_RCC_OscConfig+0x1f4>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b40      	cmp	r3, #64	@ 0x40
 8004c1e:	d108      	bne.n	8004c32 <HAL_RCC_OscConfig+0x1de>
 8004c20:	4b2e      	ldr	r3, [pc, #184]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c28:	4a2c      	ldr	r2, [pc, #176]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c30:	e07a      	b.n	8004d28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c32:	4b2a      	ldr	r3, [pc, #168]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	031b      	lsls	r3, r3, #12
 8004c40:	4926      	ldr	r1, [pc, #152]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c46:	e06f      	b.n	8004d28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c48:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	061b      	lsls	r3, r3, #24
 8004c56:	4921      	ldr	r1, [pc, #132]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c5c:	e064      	b.n	8004d28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d047      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c66:	4b1d      	ldr	r3, [pc, #116]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 0219 	bic.w	r2, r3, #25
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	491a      	ldr	r1, [pc, #104]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fc fbe2 	bl	8001440 <HAL_GetTick>
 8004c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c80:	f7fc fbde 	bl	8001440 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e332      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c92:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9e:	f7fc fbff 	bl	80014a0 <HAL_GetREVID>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d819      	bhi.n	8004ce0 <HAL_RCC_OscConfig+0x28c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b40      	cmp	r3, #64	@ 0x40
 8004cb2:	d108      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x272>
 8004cb4:	4b09      	ldr	r3, [pc, #36]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004cbc:	4a07      	ldr	r2, [pc, #28]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cc2:	6053      	str	r3, [r2, #4]
 8004cc4:	e030      	b.n	8004d28 <HAL_RCC_OscConfig+0x2d4>
 8004cc6:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	031b      	lsls	r3, r3, #12
 8004cd4:	4901      	ldr	r1, [pc, #4]	@ (8004cdc <HAL_RCC_OscConfig+0x288>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	604b      	str	r3, [r1, #4]
 8004cda:	e025      	b.n	8004d28 <HAL_RCC_OscConfig+0x2d4>
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	4b9a      	ldr	r3, [pc, #616]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	4997      	ldr	r1, [pc, #604]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
 8004cf4:	e018      	b.n	8004d28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cf6:	4b95      	ldr	r3, [pc, #596]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a94      	ldr	r2, [pc, #592]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fc fb9d 	bl	8001440 <HAL_GetTick>
 8004d06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0a:	f7fc fb99 	bl	8001440 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e2ed      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d1c:	4b8b      	ldr	r3, [pc, #556]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80a9 	beq.w	8004e88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d36:	4b85      	ldr	r3, [pc, #532]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d40:	4b82      	ldr	r3, [pc, #520]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d007      	beq.n	8004d5c <HAL_RCC_OscConfig+0x308>
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b18      	cmp	r3, #24
 8004d50:	d13a      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x374>
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d135      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d5c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_OscConfig+0x320>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	2b80      	cmp	r3, #128	@ 0x80
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e2c1      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d74:	f7fc fb94 	bl	80014a0 <HAL_GetREVID>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d817      	bhi.n	8004db2 <HAL_RCC_OscConfig+0x35e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d108      	bne.n	8004d9c <HAL_RCC_OscConfig+0x348>
 8004d8a:	4b70      	ldr	r3, [pc, #448]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d92:	4a6e      	ldr	r2, [pc, #440]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004d94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d9a:	e075      	b.n	8004e88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	069b      	lsls	r3, r3, #26
 8004daa:	4968      	ldr	r1, [pc, #416]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004db0:	e06a      	b.n	8004e88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004db2:	4b66      	ldr	r3, [pc, #408]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	061b      	lsls	r3, r3, #24
 8004dc0:	4962      	ldr	r1, [pc, #392]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dc6:	e05f      	b.n	8004e88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d042      	beq.n	8004e56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a5d      	ldr	r2, [pc, #372]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fc fb30 	bl	8001440 <HAL_GetTick>
 8004de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004de4:	f7fc fb2c 	bl	8001440 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e280      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004df6:	4b55      	ldr	r3, [pc, #340]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e02:	f7fc fb4d 	bl	80014a0 <HAL_GetREVID>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d817      	bhi.n	8004e40 <HAL_RCC_OscConfig+0x3ec>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d108      	bne.n	8004e2a <HAL_RCC_OscConfig+0x3d6>
 8004e18:	4b4c      	ldr	r3, [pc, #304]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e20:	4a4a      	ldr	r2, [pc, #296]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004e22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e26:	6053      	str	r3, [r2, #4]
 8004e28:	e02e      	b.n	8004e88 <HAL_RCC_OscConfig+0x434>
 8004e2a:	4b48      	ldr	r3, [pc, #288]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	069b      	lsls	r3, r3, #26
 8004e38:	4944      	ldr	r1, [pc, #272]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
 8004e3e:	e023      	b.n	8004e88 <HAL_RCC_OscConfig+0x434>
 8004e40:	4b42      	ldr	r3, [pc, #264]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	493f      	ldr	r1, [pc, #252]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60cb      	str	r3, [r1, #12]
 8004e54:	e018      	b.n	8004e88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e56:	4b3d      	ldr	r3, [pc, #244]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a3c      	ldr	r2, [pc, #240]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e62:	f7fc faed 	bl	8001440 <HAL_GetTick>
 8004e66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e6a:	f7fc fae9 	bl	8001440 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e23d      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e7c:	4b33      	ldr	r3, [pc, #204]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f0      	bne.n	8004e6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d036      	beq.n	8004f02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d019      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea8:	f7fc faca 	bl	8001440 <HAL_GetTick>
 8004eac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb0:	f7fc fac6 	bl	8001440 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e21a      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ec2:	4b22      	ldr	r3, [pc, #136]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x45c>
 8004ece:	e018      	b.n	8004f02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fc fab0 	bl	8001440 <HAL_GetTick>
 8004ee0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee4:	f7fc faac 	bl	8001440 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e200      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ef6:	4b15      	ldr	r3, [pc, #84]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1f0      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d039      	beq.n	8004f82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01c      	beq.n	8004f50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f16:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004f1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f22:	f7fc fa8d 	bl	8001440 <HAL_GetTick>
 8004f26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f2a:	f7fc fa89 	bl	8001440 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e1dd      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f3c:	4b03      	ldr	r3, [pc, #12]	@ (8004f4c <HAL_RCC_OscConfig+0x4f8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCC_OscConfig+0x4d6>
 8004f48:	e01b      	b.n	8004f82 <HAL_RCC_OscConfig+0x52e>
 8004f4a:	bf00      	nop
 8004f4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f50:	4b9b      	ldr	r3, [pc, #620]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a9a      	ldr	r2, [pc, #616]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8004f56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f5c:	f7fc fa70 	bl	8001440 <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f64:	f7fc fa6c 	bl	8001440 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e1c0      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f76:	4b92      	ldr	r3, [pc, #584]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8081 	beq.w	8005092 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f90:	4b8c      	ldr	r3, [pc, #560]	@ (80051c4 <HAL_RCC_OscConfig+0x770>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a8b      	ldr	r2, [pc, #556]	@ (80051c4 <HAL_RCC_OscConfig+0x770>)
 8004f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f9c:	f7fc fa50 	bl	8001440 <HAL_GetTick>
 8004fa0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa4:	f7fc fa4c 	bl	8001440 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b64      	cmp	r3, #100	@ 0x64
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e1a0      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb6:	4b83      	ldr	r3, [pc, #524]	@ (80051c4 <HAL_RCC_OscConfig+0x770>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f0      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d106      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x584>
 8004fca:	4b7d      	ldr	r3, [pc, #500]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fce:	4a7c      	ldr	r2, [pc, #496]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fd6:	e02d      	b.n	8005034 <HAL_RCC_OscConfig+0x5e0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10c      	bne.n	8004ffa <HAL_RCC_OscConfig+0x5a6>
 8004fe0:	4b77      	ldr	r3, [pc, #476]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8004fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe4:	4a76      	ldr	r2, [pc, #472]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8004fe6:	f023 0301 	bic.w	r3, r3, #1
 8004fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fec:	4b74      	ldr	r3, [pc, #464]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff0:	4a73      	ldr	r2, [pc, #460]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8004ff2:	f023 0304 	bic.w	r3, r3, #4
 8004ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff8:	e01c      	b.n	8005034 <HAL_RCC_OscConfig+0x5e0>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0x5c8>
 8005002:	4b6f      	ldr	r3, [pc, #444]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	4a6e      	ldr	r2, [pc, #440]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005008:	f043 0304 	orr.w	r3, r3, #4
 800500c:	6713      	str	r3, [r2, #112]	@ 0x70
 800500e:	4b6c      	ldr	r3, [pc, #432]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005012:	4a6b      	ldr	r2, [pc, #428]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	6713      	str	r3, [r2, #112]	@ 0x70
 800501a:	e00b      	b.n	8005034 <HAL_RCC_OscConfig+0x5e0>
 800501c:	4b68      	ldr	r3, [pc, #416]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005020:	4a67      	ldr	r2, [pc, #412]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005022:	f023 0301 	bic.w	r3, r3, #1
 8005026:	6713      	str	r3, [r2, #112]	@ 0x70
 8005028:	4b65      	ldr	r3, [pc, #404]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502c:	4a64      	ldr	r2, [pc, #400]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 800502e:	f023 0304 	bic.w	r3, r3, #4
 8005032:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d015      	beq.n	8005068 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503c:	f7fc fa00 	bl	8001440 <HAL_GetTick>
 8005040:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005042:	e00a      	b.n	800505a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005044:	f7fc f9fc 	bl	8001440 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e14e      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800505a:	4b59      	ldr	r3, [pc, #356]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0ee      	beq.n	8005044 <HAL_RCC_OscConfig+0x5f0>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fc f9ea 	bl	8001440 <HAL_GetTick>
 800506c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fc f9e6 	bl	8001440 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e138      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005086:	4b4e      	ldr	r3, [pc, #312]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1ee      	bne.n	8005070 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 812d 	beq.w	80052f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800509c:	4b48      	ldr	r3, [pc, #288]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050a4:	2b18      	cmp	r3, #24
 80050a6:	f000 80bd 	beq.w	8005224 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	f040 809e 	bne.w	80051f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b4:	4b42      	ldr	r3, [pc, #264]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a41      	ldr	r2, [pc, #260]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 80050ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fc f9be 	bl	8001440 <HAL_GetTick>
 80050c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fc f9ba 	bl	8001440 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e10e      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050da:	4b39      	ldr	r3, [pc, #228]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050e6:	4b36      	ldr	r3, [pc, #216]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 80050e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050ea:	4b37      	ldr	r3, [pc, #220]	@ (80051c8 <HAL_RCC_OscConfig+0x774>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80050f6:	0112      	lsls	r2, r2, #4
 80050f8:	430a      	orrs	r2, r1
 80050fa:	4931      	ldr	r1, [pc, #196]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005104:	3b01      	subs	r3, #1
 8005106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510e:	3b01      	subs	r3, #1
 8005110:	025b      	lsls	r3, r3, #9
 8005112:	b29b      	uxth	r3, r3
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511a:	3b01      	subs	r3, #1
 800511c:	041b      	lsls	r3, r3, #16
 800511e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005128:	3b01      	subs	r3, #1
 800512a:	061b      	lsls	r3, r3, #24
 800512c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005130:	4923      	ldr	r1, [pc, #140]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005132:	4313      	orrs	r3, r2
 8005134:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005136:	4b22      	ldr	r3, [pc, #136]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	4a21      	ldr	r2, [pc, #132]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005142:	4b1f      	ldr	r3, [pc, #124]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005146:	4b21      	ldr	r3, [pc, #132]	@ (80051cc <HAL_RCC_OscConfig+0x778>)
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800514e:	00d2      	lsls	r2, r2, #3
 8005150:	491b      	ldr	r1, [pc, #108]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005156:	4b1a      	ldr	r3, [pc, #104]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	f023 020c 	bic.w	r2, r3, #12
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	4917      	ldr	r1, [pc, #92]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005164:	4313      	orrs	r3, r2
 8005166:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005168:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	f023 0202 	bic.w	r2, r3, #2
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005174:	4912      	ldr	r1, [pc, #72]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005176:	4313      	orrs	r3, r2
 8005178:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800517a:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	4a10      	ldr	r2, [pc, #64]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005186:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518a:	4a0d      	ldr	r2, [pc, #52]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 800518c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005192:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	4a0a      	ldr	r2, [pc, #40]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 8005198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800519c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800519e:	4b08      	ldr	r3, [pc, #32]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	4a07      	ldr	r2, [pc, #28]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051aa:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a04      	ldr	r2, [pc, #16]	@ (80051c0 <HAL_RCC_OscConfig+0x76c>)
 80051b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7fc f943 	bl	8001440 <HAL_GetTick>
 80051ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051bc:	e011      	b.n	80051e2 <HAL_RCC_OscConfig+0x78e>
 80051be:	bf00      	nop
 80051c0:	58024400 	.word	0x58024400
 80051c4:	58024800 	.word	0x58024800
 80051c8:	fffffc0c 	.word	0xfffffc0c
 80051cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fc f936 	bl	8001440 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e08a      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051e2:	4b47      	ldr	r3, [pc, #284]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x77c>
 80051ee:	e082      	b.n	80052f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f0:	4b43      	ldr	r3, [pc, #268]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a42      	ldr	r2, [pc, #264]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 80051f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fc f920 	bl	8001440 <HAL_GetTick>
 8005200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005204:	f7fc f91c 	bl	8001440 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e070      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005216:	4b3a      	ldr	r3, [pc, #232]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0x7b0>
 8005222:	e068      	b.n	80052f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005224:	4b36      	ldr	r3, [pc, #216]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800522a:	4b35      	ldr	r3, [pc, #212]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	2b01      	cmp	r3, #1
 8005236:	d031      	beq.n	800529c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f003 0203 	and.w	r2, r3, #3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d12a      	bne.n	800529c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d122      	bne.n	800529c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005262:	429a      	cmp	r2, r3
 8005264:	d11a      	bne.n	800529c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	0a5b      	lsrs	r3, r3, #9
 800526a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005272:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d111      	bne.n	800529c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	0c1b      	lsrs	r3, r3, #16
 800527c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005286:	429a      	cmp	r2, r3
 8005288:	d108      	bne.n	800529c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	0e1b      	lsrs	r3, r3, #24
 800528e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005296:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005298:	429a      	cmp	r2, r3
 800529a:	d001      	beq.n	80052a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e02b      	b.n	80052f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052a0:	4b17      	ldr	r3, [pc, #92]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 80052a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a4:	08db      	lsrs	r3, r3, #3
 80052a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d01f      	beq.n	80052f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052b6:	4b12      	ldr	r3, [pc, #72]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ba:	4a11      	ldr	r2, [pc, #68]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052c2:	f7fc f8bd 	bl	8001440 <HAL_GetTick>
 80052c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052c8:	bf00      	nop
 80052ca:	f7fc f8b9 	bl	8001440 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d0f9      	beq.n	80052ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 80052d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052da:	4b0a      	ldr	r3, [pc, #40]	@ (8005304 <HAL_RCC_OscConfig+0x8b0>)
 80052dc:	4013      	ands	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80052e2:	00d2      	lsls	r2, r2, #3
 80052e4:	4906      	ldr	r1, [pc, #24]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80052ea:	4b05      	ldr	r3, [pc, #20]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	4a04      	ldr	r2, [pc, #16]	@ (8005300 <HAL_RCC_OscConfig+0x8ac>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3730      	adds	r7, #48	@ 0x30
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	58024400 	.word	0x58024400
 8005304:	ffff0007 	.word	0xffff0007

08005308 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e19c      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800531c:	4b8a      	ldr	r3, [pc, #552]	@ (8005548 <HAL_RCC_ClockConfig+0x240>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d910      	bls.n	800534c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532a:	4b87      	ldr	r3, [pc, #540]	@ (8005548 <HAL_RCC_ClockConfig+0x240>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 020f 	bic.w	r2, r3, #15
 8005332:	4985      	ldr	r1, [pc, #532]	@ (8005548 <HAL_RCC_ClockConfig+0x240>)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	4313      	orrs	r3, r2
 8005338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800533a:	4b83      	ldr	r3, [pc, #524]	@ (8005548 <HAL_RCC_ClockConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d001      	beq.n	800534c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e184      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d010      	beq.n	800537a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	4b7b      	ldr	r3, [pc, #492]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005364:	429a      	cmp	r2, r3
 8005366:	d908      	bls.n	800537a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005368:	4b78      	ldr	r3, [pc, #480]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	4975      	ldr	r1, [pc, #468]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 8005376:	4313      	orrs	r3, r2
 8005378:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d010      	beq.n	80053a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	4b70      	ldr	r3, [pc, #448]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005392:	429a      	cmp	r2, r3
 8005394:	d908      	bls.n	80053a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005396:	4b6d      	ldr	r3, [pc, #436]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	496a      	ldr	r1, [pc, #424]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d010      	beq.n	80053d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	4b64      	ldr	r3, [pc, #400]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d908      	bls.n	80053d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053c4:	4b61      	ldr	r3, [pc, #388]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	495e      	ldr	r1, [pc, #376]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d010      	beq.n	8005404 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69da      	ldr	r2, [r3, #28]
 80053e6:	4b59      	ldr	r3, [pc, #356]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d908      	bls.n	8005404 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053f2:	4b56      	ldr	r3, [pc, #344]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	4953      	ldr	r1, [pc, #332]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 8005400:	4313      	orrs	r3, r2
 8005402:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	4b4d      	ldr	r3, [pc, #308]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	429a      	cmp	r2, r3
 800541e:	d908      	bls.n	8005432 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005420:	4b4a      	ldr	r3, [pc, #296]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f023 020f 	bic.w	r2, r3, #15
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4947      	ldr	r1, [pc, #284]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 800542e:	4313      	orrs	r3, r2
 8005430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d055      	beq.n	80054ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800543e:	4b43      	ldr	r3, [pc, #268]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	4940      	ldr	r1, [pc, #256]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 800544c:	4313      	orrs	r3, r2
 800544e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d107      	bne.n	8005468 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005458:	4b3c      	ldr	r3, [pc, #240]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d121      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0f6      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b03      	cmp	r3, #3
 800546e:	d107      	bne.n	8005480 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005470:	4b36      	ldr	r3, [pc, #216]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d115      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0ea      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d107      	bne.n	8005498 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005488:	4b30      	ldr	r3, [pc, #192]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0de      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005498:	4b2c      	ldr	r3, [pc, #176]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0d6      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054a8:	4b28      	ldr	r3, [pc, #160]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f023 0207 	bic.w	r2, r3, #7
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4925      	ldr	r1, [pc, #148]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ba:	f7fb ffc1 	bl	8001440 <HAL_GetTick>
 80054be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c0:	e00a      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c2:	f7fb ffbd 	bl	8001440 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e0be      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d8:	4b1c      	ldr	r3, [pc, #112]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d1eb      	bne.n	80054c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	4b14      	ldr	r3, [pc, #80]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	429a      	cmp	r2, r3
 8005504:	d208      	bcs.n	8005518 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005506:	4b11      	ldr	r3, [pc, #68]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f023 020f 	bic.w	r2, r3, #15
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	490e      	ldr	r1, [pc, #56]	@ (800554c <HAL_RCC_ClockConfig+0x244>)
 8005514:	4313      	orrs	r3, r2
 8005516:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005518:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <HAL_RCC_ClockConfig+0x240>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d214      	bcs.n	8005550 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b08      	ldr	r3, [pc, #32]	@ (8005548 <HAL_RCC_ClockConfig+0x240>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 020f 	bic.w	r2, r3, #15
 800552e:	4906      	ldr	r1, [pc, #24]	@ (8005548 <HAL_RCC_ClockConfig+0x240>)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b04      	ldr	r3, [pc, #16]	@ (8005548 <HAL_RCC_ClockConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d005      	beq.n	8005550 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e086      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
 8005548:	52002000 	.word	0x52002000
 800554c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d010      	beq.n	800557e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	4b3f      	ldr	r3, [pc, #252]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005568:	429a      	cmp	r2, r3
 800556a:	d208      	bcs.n	800557e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800556c:	4b3c      	ldr	r3, [pc, #240]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	4939      	ldr	r1, [pc, #228]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 800557a:	4313      	orrs	r3, r2
 800557c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d010      	beq.n	80055ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	4b34      	ldr	r3, [pc, #208]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005596:	429a      	cmp	r2, r3
 8005598:	d208      	bcs.n	80055ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800559a:	4b31      	ldr	r3, [pc, #196]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	492e      	ldr	r1, [pc, #184]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d010      	beq.n	80055da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	4b28      	ldr	r3, [pc, #160]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d208      	bcs.n	80055da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055c8:	4b25      	ldr	r3, [pc, #148]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	4922      	ldr	r1, [pc, #136]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d010      	beq.n	8005608 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69da      	ldr	r2, [r3, #28]
 80055ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d208      	bcs.n	8005608 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	4917      	ldr	r1, [pc, #92]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 8005604:	4313      	orrs	r3, r2
 8005606:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005608:	f000 f834 	bl	8005674 <HAL_RCC_GetSysClockFreq>
 800560c:	4602      	mov	r2, r0
 800560e:	4b14      	ldr	r3, [pc, #80]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	4912      	ldr	r1, [pc, #72]	@ (8005664 <HAL_RCC_ClockConfig+0x35c>)
 800561a:	5ccb      	ldrb	r3, [r1, r3]
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
 8005624:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005626:	4b0e      	ldr	r3, [pc, #56]	@ (8005660 <HAL_RCC_ClockConfig+0x358>)
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	4a0d      	ldr	r2, [pc, #52]	@ (8005664 <HAL_RCC_ClockConfig+0x35c>)
 8005630:	5cd3      	ldrb	r3, [r2, r3]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
 800563c:	4a0a      	ldr	r2, [pc, #40]	@ (8005668 <HAL_RCC_ClockConfig+0x360>)
 800563e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005640:	4a0a      	ldr	r2, [pc, #40]	@ (800566c <HAL_RCC_ClockConfig+0x364>)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005646:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <HAL_RCC_ClockConfig+0x368>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f7fb feae 	bl	80013ac <HAL_InitTick>
 8005650:	4603      	mov	r3, r0
 8005652:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	58024400 	.word	0x58024400
 8005664:	0800cfdc 	.word	0x0800cfdc
 8005668:	24000004 	.word	0x24000004
 800566c:	24000000 	.word	0x24000000
 8005670:	24000008 	.word	0x24000008

08005674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005674:	b480      	push	{r7}
 8005676:	b089      	sub	sp, #36	@ 0x24
 8005678:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800567a:	4bb3      	ldr	r3, [pc, #716]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005682:	2b18      	cmp	r3, #24
 8005684:	f200 8155 	bhi.w	8005932 <HAL_RCC_GetSysClockFreq+0x2be>
 8005688:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <HAL_RCC_GetSysClockFreq+0x1c>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056f5 	.word	0x080056f5
 8005694:	08005933 	.word	0x08005933
 8005698:	08005933 	.word	0x08005933
 800569c:	08005933 	.word	0x08005933
 80056a0:	08005933 	.word	0x08005933
 80056a4:	08005933 	.word	0x08005933
 80056a8:	08005933 	.word	0x08005933
 80056ac:	08005933 	.word	0x08005933
 80056b0:	0800571b 	.word	0x0800571b
 80056b4:	08005933 	.word	0x08005933
 80056b8:	08005933 	.word	0x08005933
 80056bc:	08005933 	.word	0x08005933
 80056c0:	08005933 	.word	0x08005933
 80056c4:	08005933 	.word	0x08005933
 80056c8:	08005933 	.word	0x08005933
 80056cc:	08005933 	.word	0x08005933
 80056d0:	08005721 	.word	0x08005721
 80056d4:	08005933 	.word	0x08005933
 80056d8:	08005933 	.word	0x08005933
 80056dc:	08005933 	.word	0x08005933
 80056e0:	08005933 	.word	0x08005933
 80056e4:	08005933 	.word	0x08005933
 80056e8:	08005933 	.word	0x08005933
 80056ec:	08005933 	.word	0x08005933
 80056f0:	08005727 	.word	0x08005727
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056f4:	4b94      	ldr	r3, [pc, #592]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d009      	beq.n	8005714 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005700:	4b91      	ldr	r3, [pc, #580]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	08db      	lsrs	r3, r3, #3
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	4a90      	ldr	r2, [pc, #576]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800570c:	fa22 f303 	lsr.w	r3, r2, r3
 8005710:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005712:	e111      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005714:	4b8d      	ldr	r3, [pc, #564]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005716:	61bb      	str	r3, [r7, #24]
      break;
 8005718:	e10e      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800571a:	4b8d      	ldr	r3, [pc, #564]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800571c:	61bb      	str	r3, [r7, #24]
      break;
 800571e:	e10b      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005720:	4b8c      	ldr	r3, [pc, #560]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005722:	61bb      	str	r3, [r7, #24]
      break;
 8005724:	e108      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005726:	4b88      	ldr	r3, [pc, #544]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005730:	4b85      	ldr	r3, [pc, #532]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800573a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800573c:	4b82      	ldr	r3, [pc, #520]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005746:	4b80      	ldr	r3, [pc, #512]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574a:	08db      	lsrs	r3, r3, #3
 800574c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80e1 	beq.w	800592c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b02      	cmp	r3, #2
 800576e:	f000 8083 	beq.w	8005878 <HAL_RCC_GetSysClockFreq+0x204>
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b02      	cmp	r3, #2
 8005776:	f200 80a1 	bhi.w	80058bc <HAL_RCC_GetSysClockFreq+0x248>
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_RCC_GetSysClockFreq+0x114>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d056      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005786:	e099      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005788:	4b6f      	ldr	r3, [pc, #444]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d02d      	beq.n	80057f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005794:	4b6c      	ldr	r3, [pc, #432]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	08db      	lsrs	r3, r3, #3
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	4a6b      	ldr	r2, [pc, #428]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
 80057a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	ee07 3a90 	vmov	s15, r3
 80057ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b62      	ldr	r3, [pc, #392]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80057ee:	e087      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800595c <HAL_RCC_GetSysClockFreq+0x2e8>
 80057fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005802:	4b51      	ldr	r3, [pc, #324]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005812:	ed97 6a02 	vldr	s12, [r7, #8]
 8005816:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800581a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005832:	e065      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005960 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005846:	4b40      	ldr	r3, [pc, #256]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005856:	ed97 6a02 	vldr	s12, [r7, #8]
 800585a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800585e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800586a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005876:	e043      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b2f      	ldr	r3, [pc, #188]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a02 	vldr	s12, [r7, #8]
 800589e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ba:	e021      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005960 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005900:	4b11      	ldr	r3, [pc, #68]	@ (8005948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	0a5b      	lsrs	r3, r3, #9
 8005906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800590a:	3301      	adds	r3, #1
 800590c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005918:	edd7 6a07 	vldr	s13, [r7, #28]
 800591c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005924:	ee17 3a90 	vmov	r3, s15
 8005928:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800592a:	e005      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	61bb      	str	r3, [r7, #24]
      break;
 8005930:	e002      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005932:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005934:	61bb      	str	r3, [r7, #24]
      break;
 8005936:	bf00      	nop
  }

  return sysclockfreq;
 8005938:	69bb      	ldr	r3, [r7, #24]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3724      	adds	r7, #36	@ 0x24
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	58024400 	.word	0x58024400
 800594c:	03d09000 	.word	0x03d09000
 8005950:	003d0900 	.word	0x003d0900
 8005954:	017d7840 	.word	0x017d7840
 8005958:	46000000 	.word	0x46000000
 800595c:	4c742400 	.word	0x4c742400
 8005960:	4a742400 	.word	0x4a742400
 8005964:	4bbebc20 	.word	0x4bbebc20

08005968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800596e:	f7ff fe81 	bl	8005674 <HAL_RCC_GetSysClockFreq>
 8005972:	4602      	mov	r2, r0
 8005974:	4b10      	ldr	r3, [pc, #64]	@ (80059b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	0a1b      	lsrs	r3, r3, #8
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	490f      	ldr	r1, [pc, #60]	@ (80059bc <HAL_RCC_GetHCLKFreq+0x54>)
 8005980:	5ccb      	ldrb	r3, [r1, r3]
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	fa22 f303 	lsr.w	r3, r2, r3
 800598a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800598c:	4b0a      	ldr	r3, [pc, #40]	@ (80059b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	4a09      	ldr	r2, [pc, #36]	@ (80059bc <HAL_RCC_GetHCLKFreq+0x54>)
 8005996:	5cd3      	ldrb	r3, [r2, r3]
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	fa22 f303 	lsr.w	r3, r2, r3
 80059a2:	4a07      	ldr	r2, [pc, #28]	@ (80059c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80059a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059a6:	4a07      	ldr	r2, [pc, #28]	@ (80059c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059ac:	4b04      	ldr	r3, [pc, #16]	@ (80059c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80059ae:	681b      	ldr	r3, [r3, #0]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	58024400 	.word	0x58024400
 80059bc:	0800cfdc 	.word	0x0800cfdc
 80059c0:	24000004 	.word	0x24000004
 80059c4:	24000000 	.word	0x24000000

080059c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059cc:	f7ff ffcc 	bl	8005968 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	091b      	lsrs	r3, r3, #4
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4904      	ldr	r1, [pc, #16]	@ (80059f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	58024400 	.word	0x58024400
 80059f0:	0800cfdc 	.word	0x0800cfdc

080059f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80059f8:	f7ff ffb6 	bl	8005968 <HAL_RCC_GetHCLKFreq>
 80059fc:	4602      	mov	r2, r0
 80059fe:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	4904      	ldr	r1, [pc, #16]	@ (8005a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a0a:	5ccb      	ldrb	r3, [r1, r3]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	58024400 	.word	0x58024400
 8005a1c:	0800cfdc 	.word	0x0800cfdc

08005a20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a24:	b0cc      	sub	sp, #304	@ 0x130
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a44:	2500      	movs	r5, #0
 8005a46:	ea54 0305 	orrs.w	r3, r4, r5
 8005a4a:	d049      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a56:	d02f      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a5c:	d828      	bhi.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a62:	d01a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a68:	d822      	bhi.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a72:	d007      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a74:	e01c      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a76:	4bb8      	ldr	r3, [pc, #736]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	4ab7      	ldr	r2, [pc, #732]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a82:	e01a      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a88:	3308      	adds	r3, #8
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f002 fba1 	bl	80081d4 <RCCEx_PLL2_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a98:	e00f      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a9e:	3328      	adds	r3, #40	@ 0x28
 8005aa0:	2102      	movs	r1, #2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f002 fc48 	bl	8008338 <RCCEx_PLL3_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aae:	e004      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ab6:	e000      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ac2:	4ba5      	ldr	r3, [pc, #660]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad0:	4aa1      	ldr	r2, [pc, #644]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ad6:	e003      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005adc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ae0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005aec:	f04f 0900 	mov.w	r9, #0
 8005af0:	ea58 0309 	orrs.w	r3, r8, r9
 8005af4:	d047      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d82a      	bhi.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b00:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b1d 	.word	0x08005b1d
 8005b0c:	08005b2b 	.word	0x08005b2b
 8005b10:	08005b41 	.word	0x08005b41
 8005b14:	08005b5f 	.word	0x08005b5f
 8005b18:	08005b5f 	.word	0x08005b5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b1c:	4b8e      	ldr	r3, [pc, #568]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b20:	4a8d      	ldr	r2, [pc, #564]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b28:	e01a      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b2e:	3308      	adds	r3, #8
 8005b30:	2100      	movs	r1, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	f002 fb4e 	bl	80081d4 <RCCEx_PLL2_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b3e:	e00f      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b44:	3328      	adds	r3, #40	@ 0x28
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f002 fbf5 	bl	8008338 <RCCEx_PLL3_Config>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b54:	e004      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b68:	4b7b      	ldr	r3, [pc, #492]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6c:	f023 0107 	bic.w	r1, r3, #7
 8005b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b76:	4a78      	ldr	r2, [pc, #480]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b7c:	e003      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b82:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b92:	f04f 0b00 	mov.w	fp, #0
 8005b96:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b9a:	d04c      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba6:	d030      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bac:	d829      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bb0:	d02d      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bb4:	d825      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bb6:	2b80      	cmp	r3, #128	@ 0x80
 8005bb8:	d018      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005bba:	2b80      	cmp	r3, #128	@ 0x80
 8005bbc:	d821      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005bc2:	2b40      	cmp	r3, #64	@ 0x40
 8005bc4:	d007      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005bc6:	e01c      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc8:	4b63      	ldr	r3, [pc, #396]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	4a62      	ldr	r2, [pc, #392]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bd4:	e01c      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bda:	3308      	adds	r3, #8
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f002 faf8 	bl	80081d4 <RCCEx_PLL2_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bea:	e011      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bf0:	3328      	adds	r3, #40	@ 0x28
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f002 fb9f 	bl	8008338 <RCCEx_PLL3_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c00:	e006      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c08:	e002      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c18:	4b4f      	ldr	r3, [pc, #316]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c26:	4a4c      	ldr	r2, [pc, #304]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c2c:	e003      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005c46:	2300      	movs	r3, #0
 8005c48:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005c4c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005c50:	460b      	mov	r3, r1
 8005c52:	4313      	orrs	r3, r2
 8005c54:	d053      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c62:	d035      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c68:	d82e      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c6e:	d031      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c74:	d828      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c7a:	d01a      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c80:	d822      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c8a:	d007      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c8c:	e01c      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c8e:	4b32      	ldr	r3, [pc, #200]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c92:	4a31      	ldr	r2, [pc, #196]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c9a:	e01c      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f002 fa95 	bl	80081d4 <RCCEx_PLL2_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cb0:	e011      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cb6:	3328      	adds	r3, #40	@ 0x28
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f002 fb3c 	bl	8008338 <RCCEx_PLL3_Config>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cc6:	e006      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cce:	e002      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cde:	4b1e      	ldr	r3, [pc, #120]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cee:	4a1a      	ldr	r2, [pc, #104]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cf4:	e003      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cfa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005d14:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	d056      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d2a:	d038      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d30:	d831      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d36:	d034      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d3c:	d82b      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d42:	d01d      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d48:	d825      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d006      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d52:	d00a      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d54:	e01f      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d56:	bf00      	nop
 8005d58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5c:	4ba2      	ldr	r3, [pc, #648]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	4aa1      	ldr	r2, [pc, #644]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d68:	e01c      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d6e:	3308      	adds	r3, #8
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f002 fa2e 	bl	80081d4 <RCCEx_PLL2_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d7e:	e011      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d84:	3328      	adds	r3, #40	@ 0x28
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f002 fad5 	bl	8008338 <RCCEx_PLL3_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d94:	e006      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d9c:	e002      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d9e:	bf00      	nop
 8005da0:	e000      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005dac:	4b8e      	ldr	r3, [pc, #568]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005dbc:	4a8a      	ldr	r2, [pc, #552]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dc2:	e003      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dc8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005dd8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005de2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005de6:	460b      	mov	r3, r1
 8005de8:	4313      	orrs	r3, r2
 8005dea:	d03a      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df2:	2b30      	cmp	r3, #48	@ 0x30
 8005df4:	d01f      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005df6:	2b30      	cmp	r3, #48	@ 0x30
 8005df8:	d819      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d00c      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d815      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d019      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005e06:	2b10      	cmp	r3, #16
 8005e08:	d111      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e0a:	4b77      	ldr	r3, [pc, #476]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	4a76      	ldr	r2, [pc, #472]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e16:	e011      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	2102      	movs	r1, #2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f002 f9d7 	bl	80081d4 <RCCEx_PLL2_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e2c:	e006      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e34:	e002      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e36:	bf00      	nop
 8005e38:	e000      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e44:	4b68      	ldr	r3, [pc, #416]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e52:	4a65      	ldr	r2, [pc, #404]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e54:	430b      	orrs	r3, r1
 8005e56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e58:	e003      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e72:	2300      	movs	r3, #0
 8005e74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e78:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	d051      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e8c:	d035      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e92:	d82e      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e98:	d031      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e9e:	d828      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea4:	d01a      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eaa:	d822      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb4:	d007      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005eb6:	e01c      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ec4:	e01c      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ec6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eca:	3308      	adds	r3, #8
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f002 f980 	bl	80081d4 <RCCEx_PLL2_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eda:	e011      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005edc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ee0:	3328      	adds	r3, #40	@ 0x28
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f002 fa27 	bl	8008338 <RCCEx_PLL3_Config>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ef0:	e006      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ef8:	e002      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005efa:	bf00      	nop
 8005efc:	e000      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f08:	4b37      	ldr	r3, [pc, #220]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f16:	4a34      	ldr	r2, [pc, #208]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f1c:	e003      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f36:	2300      	movs	r3, #0
 8005f38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4313      	orrs	r3, r2
 8005f44:	d056      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f50:	d033      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f56:	d82c      	bhi.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f5c:	d02f      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f62:	d826      	bhi.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f68:	d02b      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f6e:	d820      	bhi.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f74:	d012      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f7a:	d81a      	bhi.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d022      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f84:	d115      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f002 f920 	bl	80081d4 <RCCEx_PLL2_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f9a:	e015      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa0:	3328      	adds	r3, #40	@ 0x28
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f002 f9c7 	bl	8008338 <RCCEx_PLL3_Config>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fb0:	e00a      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005fb8:	e006      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fba:	bf00      	nop
 8005fbc:	e004      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fbe:	bf00      	nop
 8005fc0:	e002      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10d      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fd0:	4b05      	ldr	r3, [pc, #20]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fde:	4a02      	ldr	r2, [pc, #8]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fe4:	e006      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fe6:	bf00      	nop
 8005fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ff0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006000:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006004:	2300      	movs	r3, #0
 8006006:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800600a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800600e:	460b      	mov	r3, r1
 8006010:	4313      	orrs	r3, r2
 8006012:	d055      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006014:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006018:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800601c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006020:	d033      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006026:	d82c      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800602c:	d02f      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006032:	d826      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006034:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006038:	d02b      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800603a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800603e:	d820      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006044:	d012      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604a:	d81a      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d022      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006054:	d115      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800605a:	3308      	adds	r3, #8
 800605c:	2101      	movs	r1, #1
 800605e:	4618      	mov	r0, r3
 8006060:	f002 f8b8 	bl	80081d4 <RCCEx_PLL2_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800606a:	e015      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800606c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006070:	3328      	adds	r3, #40	@ 0x28
 8006072:	2101      	movs	r1, #1
 8006074:	4618      	mov	r0, r3
 8006076:	f002 f95f 	bl	8008338 <RCCEx_PLL3_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006080:	e00a      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006088:	e006      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800608a:	bf00      	nop
 800608c:	e004      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800608e:	bf00      	nop
 8006090:	e002      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006092:	bf00      	nop
 8006094:	e000      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006098:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10b      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060a0:	4bb6      	ldr	r3, [pc, #728]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060b0:	4ab2      	ldr	r2, [pc, #712]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060b2:	430b      	orrs	r3, r1
 80060b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80060b6:	e003      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80060c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80060cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80060da:	460b      	mov	r3, r1
 80060dc:	4313      	orrs	r3, r2
 80060de:	d02a      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80060e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d011      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80060ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ee:	d10a      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060f4:	3308      	adds	r3, #8
 80060f6:	2101      	movs	r1, #1
 80060f8:	4618      	mov	r0, r3
 80060fa:	f002 f86b 	bl	80081d4 <RCCEx_PLL2_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8006104:	e004      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800610c:	e000      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800610e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006110:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006118:	4b98      	ldr	r3, [pc, #608]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800611a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006126:	4a95      	ldr	r2, [pc, #596]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006128:	430b      	orrs	r3, r1
 800612a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800612c:	e003      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006132:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006136:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006146:	2300      	movs	r3, #0
 8006148:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800614c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006150:	460b      	mov	r3, r1
 8006152:	4313      	orrs	r3, r2
 8006154:	d037      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006156:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800615a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800615c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006160:	d00e      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8006162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006166:	d816      	bhi.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d018      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800616c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006170:	d111      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006172:	4b82      	ldr	r3, [pc, #520]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006176:	4a81      	ldr	r2, [pc, #516]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800617c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800617e:	e00f      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006184:	3308      	adds	r3, #8
 8006186:	2101      	movs	r1, #1
 8006188:	4618      	mov	r0, r3
 800618a:	f002 f823 	bl	80081d4 <RCCEx_PLL2_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006194:	e004      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800619c:	e000      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800619e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061a8:	4b74      	ldr	r3, [pc, #464]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80061b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b6:	4a71      	ldr	r2, [pc, #452]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061b8:	430b      	orrs	r3, r1
 80061ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80061bc:	e003      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80061d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061d6:	2300      	movs	r3, #0
 80061d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80061dc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4313      	orrs	r3, r2
 80061e4:	d03a      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d81d      	bhi.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80061f0:	a201      	add	r2, pc, #4	@ (adr r2, 80061f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	08006235 	.word	0x08006235
 80061fc:	08006209 	.word	0x08006209
 8006200:	08006217 	.word	0x08006217
 8006204:	08006235 	.word	0x08006235
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006208:	4b5c      	ldr	r3, [pc, #368]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	4a5b      	ldr	r2, [pc, #364]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800620e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006214:	e00f      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800621a:	3308      	adds	r3, #8
 800621c:	2102      	movs	r1, #2
 800621e:	4618      	mov	r0, r3
 8006220:	f001 ffd8 	bl	80081d4 <RCCEx_PLL2_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800622a:	e004      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006232:	e000      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006236:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800623e:	4b4f      	ldr	r3, [pc, #316]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006242:	f023 0103 	bic.w	r1, r3, #3
 8006246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800624a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800624c:	4a4b      	ldr	r2, [pc, #300]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800624e:	430b      	orrs	r3, r1
 8006250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006252:	e003      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006254:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006258:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800625c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006268:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800626c:	2300      	movs	r3, #0
 800626e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006272:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	f000 80a0 	beq.w	80063be <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800627e:	4b40      	ldr	r3, [pc, #256]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a3f      	ldr	r2, [pc, #252]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006288:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800628a:	f7fb f8d9 	bl	8001440 <HAL_GetTick>
 800628e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006292:	e00b      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006294:	f7fb f8d4 	bl	8001440 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b64      	cmp	r3, #100	@ 0x64
 80062a2:	d903      	bls.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062aa:	e005      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ac:	4b34      	ldr	r3, [pc, #208]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0ed      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80062b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d17a      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062c0:	4b2e      	ldr	r3, [pc, #184]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80062cc:	4053      	eors	r3, r2
 80062ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d015      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062d6:	4b29      	ldr	r3, [pc, #164]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062e2:	4b26      	ldr	r3, [pc, #152]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e6:	4a25      	ldr	r2, [pc, #148]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062ee:	4b23      	ldr	r3, [pc, #140]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f2:	4a22      	ldr	r2, [pc, #136]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062fa:	4a20      	ldr	r2, [pc, #128]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006300:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006302:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006306:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800630a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800630e:	d118      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006310:	f7fb f896 	bl	8001440 <HAL_GetTick>
 8006314:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006318:	e00d      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631a:	f7fb f891 	bl	8001440 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006324:	1ad2      	subs	r2, r2, r3
 8006326:	f241 3388 	movw	r3, #5000	@ 0x1388
 800632a:	429a      	cmp	r2, r3
 800632c:	d903      	bls.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8006334:	e005      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006336:	4b11      	ldr	r3, [pc, #68]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0eb      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8006342:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d130      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800634a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800634e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800635a:	d115      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800635c:	4b07      	ldr	r3, [pc, #28]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006364:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006368:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800636c:	091a      	lsrs	r2, r3, #4
 800636e:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8006370:	4013      	ands	r3, r2
 8006372:	4a02      	ldr	r2, [pc, #8]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006374:	430b      	orrs	r3, r1
 8006376:	6113      	str	r3, [r2, #16]
 8006378:	e00c      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800637a:	bf00      	nop
 800637c:	58024400 	.word	0x58024400
 8006380:	58024800 	.word	0x58024800
 8006384:	00ffffcf 	.word	0x00ffffcf
 8006388:	4bd4      	ldr	r3, [pc, #848]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	4ad3      	ldr	r2, [pc, #844]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800638e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006392:	6113      	str	r3, [r2, #16]
 8006394:	4bd1      	ldr	r3, [pc, #836]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006396:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800639c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80063a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063a4:	4acd      	ldr	r2, [pc, #820]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80063a6:	430b      	orrs	r3, r1
 80063a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063aa:	e008      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80063b4:	e003      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f002 0301 	and.w	r3, r2, #1
 80063ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063ce:	2300      	movs	r3, #0
 80063d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063d8:	460b      	mov	r3, r1
 80063da:	4313      	orrs	r3, r2
 80063dc:	f000 808b 	beq.w	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063e8:	2b28      	cmp	r3, #40	@ 0x28
 80063ea:	d86b      	bhi.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80063ec:	a201      	add	r2, pc, #4	@ (adr r2, 80063f4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	080064cd 	.word	0x080064cd
 80063f8:	080064c5 	.word	0x080064c5
 80063fc:	080064c5 	.word	0x080064c5
 8006400:	080064c5 	.word	0x080064c5
 8006404:	080064c5 	.word	0x080064c5
 8006408:	080064c5 	.word	0x080064c5
 800640c:	080064c5 	.word	0x080064c5
 8006410:	080064c5 	.word	0x080064c5
 8006414:	08006499 	.word	0x08006499
 8006418:	080064c5 	.word	0x080064c5
 800641c:	080064c5 	.word	0x080064c5
 8006420:	080064c5 	.word	0x080064c5
 8006424:	080064c5 	.word	0x080064c5
 8006428:	080064c5 	.word	0x080064c5
 800642c:	080064c5 	.word	0x080064c5
 8006430:	080064c5 	.word	0x080064c5
 8006434:	080064af 	.word	0x080064af
 8006438:	080064c5 	.word	0x080064c5
 800643c:	080064c5 	.word	0x080064c5
 8006440:	080064c5 	.word	0x080064c5
 8006444:	080064c5 	.word	0x080064c5
 8006448:	080064c5 	.word	0x080064c5
 800644c:	080064c5 	.word	0x080064c5
 8006450:	080064c5 	.word	0x080064c5
 8006454:	080064cd 	.word	0x080064cd
 8006458:	080064c5 	.word	0x080064c5
 800645c:	080064c5 	.word	0x080064c5
 8006460:	080064c5 	.word	0x080064c5
 8006464:	080064c5 	.word	0x080064c5
 8006468:	080064c5 	.word	0x080064c5
 800646c:	080064c5 	.word	0x080064c5
 8006470:	080064c5 	.word	0x080064c5
 8006474:	080064cd 	.word	0x080064cd
 8006478:	080064c5 	.word	0x080064c5
 800647c:	080064c5 	.word	0x080064c5
 8006480:	080064c5 	.word	0x080064c5
 8006484:	080064c5 	.word	0x080064c5
 8006488:	080064c5 	.word	0x080064c5
 800648c:	080064c5 	.word	0x080064c5
 8006490:	080064c5 	.word	0x080064c5
 8006494:	080064cd 	.word	0x080064cd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800649c:	3308      	adds	r3, #8
 800649e:	2101      	movs	r1, #1
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 fe97 	bl	80081d4 <RCCEx_PLL2_Config>
 80064a6:	4603      	mov	r3, r0
 80064a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064ac:	e00f      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064b2:	3328      	adds	r3, #40	@ 0x28
 80064b4:	2101      	movs	r1, #1
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 ff3e 	bl	8008338 <RCCEx_PLL3_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064c2:	e004      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80064ca:	e000      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80064cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10b      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064d6:	4b81      	ldr	r3, [pc, #516]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80064d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064da:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80064de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064e6:	4a7d      	ldr	r2, [pc, #500]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80064ec:	e003      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80064f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f002 0302 	and.w	r3, r2, #2
 8006502:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006506:	2300      	movs	r3, #0
 8006508:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800650c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006510:	460b      	mov	r3, r1
 8006512:	4313      	orrs	r3, r2
 8006514:	d042      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800651a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800651c:	2b05      	cmp	r3, #5
 800651e:	d825      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006520:	a201      	add	r2, pc, #4	@ (adr r2, 8006528 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006526:	bf00      	nop
 8006528:	08006575 	.word	0x08006575
 800652c:	08006541 	.word	0x08006541
 8006530:	08006557 	.word	0x08006557
 8006534:	08006575 	.word	0x08006575
 8006538:	08006575 	.word	0x08006575
 800653c:	08006575 	.word	0x08006575
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006540:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006544:	3308      	adds	r3, #8
 8006546:	2101      	movs	r1, #1
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fe43 	bl	80081d4 <RCCEx_PLL2_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006554:	e00f      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800655a:	3328      	adds	r3, #40	@ 0x28
 800655c:	2101      	movs	r1, #1
 800655e:	4618      	mov	r0, r3
 8006560:	f001 feea 	bl	8008338 <RCCEx_PLL3_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800656a:	e004      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006572:	e000      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006576:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800657e:	4b57      	ldr	r3, [pc, #348]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006582:	f023 0107 	bic.w	r1, r3, #7
 8006586:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800658a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800658c:	4a53      	ldr	r2, [pc, #332]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800658e:	430b      	orrs	r3, r1
 8006590:	6553      	str	r3, [r2, #84]	@ 0x54
 8006592:	e003      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006594:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006598:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800659c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f002 0304 	and.w	r3, r2, #4
 80065a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065ac:	2300      	movs	r3, #0
 80065ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4313      	orrs	r3, r2
 80065ba:	d044      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80065bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065c4:	2b05      	cmp	r3, #5
 80065c6:	d825      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80065c8:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	0800661d 	.word	0x0800661d
 80065d4:	080065e9 	.word	0x080065e9
 80065d8:	080065ff 	.word	0x080065ff
 80065dc:	0800661d 	.word	0x0800661d
 80065e0:	0800661d 	.word	0x0800661d
 80065e4:	0800661d 	.word	0x0800661d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ec:	3308      	adds	r3, #8
 80065ee:	2101      	movs	r1, #1
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 fdef 	bl	80081d4 <RCCEx_PLL2_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065fc:	e00f      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006602:	3328      	adds	r3, #40	@ 0x28
 8006604:	2101      	movs	r1, #1
 8006606:	4618      	mov	r0, r3
 8006608:	f001 fe96 	bl	8008338 <RCCEx_PLL3_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006612:	e004      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800661a:	e000      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800661c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006626:	4b2d      	ldr	r3, [pc, #180]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662a:	f023 0107 	bic.w	r1, r3, #7
 800662e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006636:	4a29      	ldr	r2, [pc, #164]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006638:	430b      	orrs	r3, r1
 800663a:	6593      	str	r3, [r2, #88]	@ 0x58
 800663c:	e003      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006642:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006646:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f002 0320 	and.w	r3, r2, #32
 8006652:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006656:	2300      	movs	r3, #0
 8006658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800665c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006660:	460b      	mov	r3, r1
 8006662:	4313      	orrs	r3, r2
 8006664:	d057      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800666a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800666e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006672:	d035      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006678:	d82c      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667e:	d031      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006684:	d826      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006686:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800668a:	d02d      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800668c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006690:	d820      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006696:	d012      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800669c:	d81a      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d024      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80066a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066a6:	d115      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066ac:	3308      	adds	r3, #8
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fd8f 	bl	80081d4 <RCCEx_PLL2_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066bc:	e017      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066c2:	3328      	adds	r3, #40	@ 0x28
 80066c4:	2102      	movs	r1, #2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 fe36 	bl	8008338 <RCCEx_PLL3_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066d2:	e00c      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066da:	e008      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80066dc:	58024400 	.word	0x58024400
        break;
 80066e0:	bf00      	nop
 80066e2:	e004      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80066e4:	bf00      	nop
 80066e6:	e002      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80066e8:	bf00      	nop
 80066ea:	e000      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80066ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10b      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066f6:	4bc2      	ldr	r3, [pc, #776]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006706:	4abe      	ldr	r2, [pc, #760]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006708:	430b      	orrs	r3, r1
 800670a:	6553      	str	r3, [r2, #84]	@ 0x54
 800670c:	e003      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006712:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006726:	2300      	movs	r3, #0
 8006728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800672c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006730:	460b      	mov	r3, r1
 8006732:	4313      	orrs	r3, r2
 8006734:	d055      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006736:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800673a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800673e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006742:	d033      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006744:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006748:	d82c      	bhi.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800674a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674e:	d02f      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006754:	d826      	bhi.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006756:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800675a:	d02b      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800675c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006760:	d820      	bhi.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006766:	d012      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800676c:	d81a      	bhi.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d022      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006776:	d115      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006778:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800677c:	3308      	adds	r3, #8
 800677e:	2100      	movs	r1, #0
 8006780:	4618      	mov	r0, r3
 8006782:	f001 fd27 	bl	80081d4 <RCCEx_PLL2_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800678c:	e015      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800678e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006792:	3328      	adds	r3, #40	@ 0x28
 8006794:	2102      	movs	r1, #2
 8006796:	4618      	mov	r0, r3
 8006798:	f001 fdce 	bl	8008338 <RCCEx_PLL3_Config>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067a2:	e00a      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80067aa:	e006      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80067ac:	bf00      	nop
 80067ae:	e004      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80067b0:	bf00      	nop
 80067b2:	e002      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80067b4:	bf00      	nop
 80067b6:	e000      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80067b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10b      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067c2:	4b8f      	ldr	r3, [pc, #572]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80067ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067d2:	4a8b      	ldr	r2, [pc, #556]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067d4:	430b      	orrs	r3, r1
 80067d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80067d8:	e003      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80067ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067f2:	2300      	movs	r3, #0
 80067f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067f8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80067fc:	460b      	mov	r3, r1
 80067fe:	4313      	orrs	r3, r2
 8006800:	d055      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006802:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800680a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800680e:	d033      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006810:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006814:	d82c      	bhi.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800681a:	d02f      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800681c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006820:	d826      	bhi.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006822:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006826:	d02b      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006828:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800682c:	d820      	bhi.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800682e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006832:	d012      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006838:	d81a      	bhi.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d022      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800683e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006842:	d115      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006844:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006848:	3308      	adds	r3, #8
 800684a:	2100      	movs	r1, #0
 800684c:	4618      	mov	r0, r3
 800684e:	f001 fcc1 	bl	80081d4 <RCCEx_PLL2_Config>
 8006852:	4603      	mov	r3, r0
 8006854:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006858:	e015      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800685a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800685e:	3328      	adds	r3, #40	@ 0x28
 8006860:	2102      	movs	r1, #2
 8006862:	4618      	mov	r0, r3
 8006864:	f001 fd68 	bl	8008338 <RCCEx_PLL3_Config>
 8006868:	4603      	mov	r3, r0
 800686a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800686e:	e00a      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006876:	e006      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006878:	bf00      	nop
 800687a:	e004      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800687c:	bf00      	nop
 800687e:	e002      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006880:	bf00      	nop
 8006882:	e000      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006886:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800688e:	4b5c      	ldr	r3, [pc, #368]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006892:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006896:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800689a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800689e:	4a58      	ldr	r2, [pc, #352]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068a0:	430b      	orrs	r3, r1
 80068a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80068a4:	e003      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80068ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f002 0308 	and.w	r3, r2, #8
 80068ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068be:	2300      	movs	r3, #0
 80068c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068c4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80068c8:	460b      	mov	r3, r1
 80068ca:	4313      	orrs	r3, r2
 80068cc:	d01e      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80068ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068da:	d10c      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068e0:	3328      	adds	r3, #40	@ 0x28
 80068e2:	2102      	movs	r1, #2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 fd27 	bl	8008338 <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80068f6:	4b42      	ldr	r3, [pc, #264]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006906:	4a3e      	ldr	r2, [pc, #248]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006908:	430b      	orrs	r3, r1
 800690a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800690c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	f002 0310 	and.w	r3, r2, #16
 8006918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800691c:	2300      	movs	r3, #0
 800691e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006922:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006926:	460b      	mov	r3, r1
 8006928:	4313      	orrs	r3, r2
 800692a:	d01e      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800692c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006930:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006938:	d10c      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800693a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800693e:	3328      	adds	r3, #40	@ 0x28
 8006940:	2102      	movs	r1, #2
 8006942:	4618      	mov	r0, r3
 8006944:	f001 fcf8 	bl	8008338 <RCCEx_PLL3_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006954:	4b2a      	ldr	r3, [pc, #168]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006958:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800695c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006960:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006964:	4a26      	ldr	r2, [pc, #152]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006966:	430b      	orrs	r3, r1
 8006968:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800696a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006976:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800697a:	2300      	movs	r3, #0
 800697c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006980:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006984:	460b      	mov	r3, r1
 8006986:	4313      	orrs	r3, r2
 8006988:	d040      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800698a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800698e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006996:	d022      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800699c:	d81b      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80069a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069a6:	d00b      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80069a8:	e015      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069ae:	3308      	adds	r3, #8
 80069b0:	2100      	movs	r1, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f001 fc0e 	bl	80081d4 <RCCEx_PLL2_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069be:	e00f      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069c4:	3328      	adds	r3, #40	@ 0x28
 80069c6:	2102      	movs	r1, #2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 fcb5 	bl	8008338 <RCCEx_PLL3_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069d4:	e004      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80069dc:	e000      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80069de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10d      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069e8:	4b05      	ldr	r3, [pc, #20]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80069f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069f8:	4a01      	ldr	r2, [pc, #4]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069fa:	430b      	orrs	r3, r1
 80069fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80069fe:	e005      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a08:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a1e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006a22:	460b      	mov	r3, r1
 8006a24:	4313      	orrs	r3, r2
 8006a26:	d03b      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a34:	d01f      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006a36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a3a:	d818      	bhi.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006a3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a40:	d003      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006a42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a46:	d007      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006a48:	e011      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4a:	4b64      	ldr	r3, [pc, #400]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4e:	4a63      	ldr	r2, [pc, #396]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a56:	e00f      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a5c:	3328      	adds	r3, #40	@ 0x28
 8006a5e:	2101      	movs	r1, #1
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 fc69 	bl	8008338 <RCCEx_PLL3_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a6c:	e004      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006a74:	e000      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10b      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a80:	4b56      	ldr	r3, [pc, #344]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a84:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a90:	4a52      	ldr	r2, [pc, #328]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a92:	430b      	orrs	r3, r1
 8006a94:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a96:	e003      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006aac:	673b      	str	r3, [r7, #112]	@ 0x70
 8006aae:	2300      	movs	r3, #0
 8006ab0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ab2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	d031      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aca:	d007      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006acc:	e011      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ace:	4b43      	ldr	r3, [pc, #268]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	4a42      	ldr	r2, [pc, #264]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ada:	e00e      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	2102      	movs	r1, #2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f001 fb75 	bl	80081d4 <RCCEx_PLL2_Config>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006af0:	e003      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b02:	4b36      	ldr	r3, [pc, #216]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b10:	4a32      	ldr	r2, [pc, #200]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006b12:	430b      	orrs	r3, r1
 8006b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b16:	e003      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b1c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b2e:	2300      	movs	r3, #0
 8006b30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b32:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d00c      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b40:	3328      	adds	r3, #40	@ 0x28
 8006b42:	2102      	movs	r1, #2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f001 fbf7 	bl	8008338 <RCCEx_PLL3_Config>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b62:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b64:	2300      	movs	r3, #0
 8006b66:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b68:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	d03a      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b7e:	d018      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006b80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b84:	d811      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b8a:	d014      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b90:	d80b      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d011      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b9a:	d106      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba0:	4a0e      	ldr	r2, [pc, #56]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ba8:	e008      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006bb0:	e004      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006bb2:	bf00      	nop
 8006bb4:	e002      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006bb6:	bf00      	nop
 8006bb8:	e000      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bbc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10d      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bc4:	4b05      	ldr	r3, [pc, #20]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bd4:	4a01      	ldr	r2, [pc, #4]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bda:	e005      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006be4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006be8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006bf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bfa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4313      	orrs	r3, r2
 8006c02:	d009      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c04:	4baa      	ldr	r3, [pc, #680]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c12:	4aa7      	ldr	r2, [pc, #668]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006c24:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c26:	2300      	movs	r3, #0
 8006c28:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c2a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4313      	orrs	r3, r2
 8006c32:	d00a      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006c34:	4b9e      	ldr	r3, [pc, #632]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c44:	4a9a      	ldr	r2, [pc, #616]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c46:	430b      	orrs	r3, r1
 8006c48:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006c56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c58:	2300      	movs	r3, #0
 8006c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c5c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006c60:	460b      	mov	r3, r1
 8006c62:	4313      	orrs	r3, r2
 8006c64:	d009      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c66:	4b92      	ldr	r3, [pc, #584]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c6a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c74:	4a8e      	ldr	r2, [pc, #568]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c76:	430b      	orrs	r3, r1
 8006c78:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c86:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c88:	2300      	movs	r3, #0
 8006c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c8c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c90:	460b      	mov	r3, r1
 8006c92:	4313      	orrs	r3, r2
 8006c94:	d00e      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c96:	4b86      	ldr	r3, [pc, #536]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	4a85      	ldr	r2, [pc, #532]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006c9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ca0:	6113      	str	r3, [r2, #16]
 8006ca2:	4b83      	ldr	r3, [pc, #524]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006ca4:	6919      	ldr	r1, [r3, #16]
 8006ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006caa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006cae:	4a80      	ldr	r2, [pc, #512]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cc6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006cd0:	4b77      	ldr	r3, [pc, #476]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cd4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cde:	4a74      	ldr	r2, [pc, #464]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006cf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	d00a      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d00:	4b6b      	ldr	r3, [pc, #428]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d04:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d10:	4a67      	ldr	r2, [pc, #412]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006d12:	430b      	orrs	r3, r1
 8006d14:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	2100      	movs	r1, #0
 8006d20:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	d011      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d36:	3308      	adds	r3, #8
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 fa4a 	bl	80081d4 <RCCEx_PLL2_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006d46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	2100      	movs	r1, #0
 8006d60:	6239      	str	r1, [r7, #32]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	d011      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d76:	3308      	adds	r3, #8
 8006d78:	2101      	movs	r1, #1
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 fa2a 	bl	80081d4 <RCCEx_PLL2_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006d86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	2100      	movs	r1, #0
 8006da0:	61b9      	str	r1, [r7, #24]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006dac:	460b      	mov	r3, r1
 8006dae:	4313      	orrs	r3, r2
 8006db0:	d011      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006db6:	3308      	adds	r3, #8
 8006db8:	2102      	movs	r1, #2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 fa0a 	bl	80081d4 <RCCEx_PLL2_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006dc6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006dd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006dd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	2100      	movs	r1, #0
 8006de0:	6139      	str	r1, [r7, #16]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006dec:	460b      	mov	r3, r1
 8006dee:	4313      	orrs	r3, r2
 8006df0:	d011      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006df6:	3328      	adds	r3, #40	@ 0x28
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 fa9c 	bl	8008338 <RCCEx_PLL3_Config>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006e06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	2100      	movs	r1, #0
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	f003 0310 	and.w	r3, r3, #16
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	d011      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e36:	3328      	adds	r3, #40	@ 0x28
 8006e38:	2101      	movs	r1, #1
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 fa7c 	bl	8008338 <RCCEx_PLL3_Config>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006e46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	2100      	movs	r1, #0
 8006e60:	6039      	str	r1, [r7, #0]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	607b      	str	r3, [r7, #4]
 8006e68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	d011      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e76:	3328      	adds	r3, #40	@ 0x28
 8006e78:	2102      	movs	r1, #2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f001 fa5c 	bl	8008338 <RCCEx_PLL3_Config>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006e86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006e96:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e000      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eb0:	58024400 	.word	0x58024400

08006eb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b090      	sub	sp, #64	@ 0x40
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ec2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	f040 8094 	bne.w	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006ecc:	4b9e      	ldr	r3, [pc, #632]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	f200 8087 	bhi.w	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006ede:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006ef9 	.word	0x08006ef9
 8006ee8:	08006f21 	.word	0x08006f21
 8006eec:	08006f49 	.word	0x08006f49
 8006ef0:	08006fe5 	.word	0x08006fe5
 8006ef4:	08006f71 	.word	0x08006f71
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ef8:	4b93      	ldr	r3, [pc, #588]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f04:	d108      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 f810 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f14:	f000 bd45 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1c:	f000 bd41 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f20:	4b89      	ldr	r3, [pc, #548]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f2c:	d108      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2e:	f107 0318 	add.w	r3, r7, #24
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fd54 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f3c:	f000 bd31 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f44:	f000 bd2d 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f48:	4b7f      	ldr	r3, [pc, #508]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f54:	d108      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f56:	f107 030c 	add.w	r3, r7, #12
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fe94 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f64:	f000 bd1d 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f6c:	f000 bd19 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f70:	4b75      	ldr	r3, [pc, #468]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f78:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f7a:	4b73      	ldr	r3, [pc, #460]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d10c      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f8c:	4b6e      	ldr	r3, [pc, #440]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	08db      	lsrs	r3, r3, #3
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	4a6d      	ldr	r2, [pc, #436]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f98:	fa22 f303 	lsr.w	r3, r2, r3
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f9e:	e01f      	b.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fa0:	4b69      	ldr	r3, [pc, #420]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fac:	d106      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fb4:	d102      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006fb6:	4b66      	ldr	r3, [pc, #408]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fba:	e011      	b.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fbc:	4b62      	ldr	r3, [pc, #392]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fc8:	d106      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fd0:	d102      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006fd2:	4b60      	ldr	r3, [pc, #384]	@ (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fd6:	e003      	b.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006fdc:	f000 bce1 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fe0:	f000 bcdf 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe8:	f000 bcdb 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff0:	f000 bcd7 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ff8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	f040 80ad 	bne.w	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007002:	4b51      	ldr	r3, [pc, #324]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007006:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800700a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007012:	d056      	beq.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800701a:	f200 8090 	bhi.w	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	2bc0      	cmp	r3, #192	@ 0xc0
 8007022:	f000 8088 	beq.w	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	2bc0      	cmp	r3, #192	@ 0xc0
 800702a:	f200 8088 	bhi.w	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	2b80      	cmp	r3, #128	@ 0x80
 8007032:	d032      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	2b80      	cmp	r3, #128	@ 0x80
 8007038:	f200 8081 	bhi.w	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	2b40      	cmp	r3, #64	@ 0x40
 8007046:	d014      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007048:	e079      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800704a:	4b3f      	ldr	r3, [pc, #252]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007056:	d108      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800705c:	4618      	mov	r0, r3
 800705e:	f000 ff67 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007066:	f000 bc9c 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800706e:	f000 bc98 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007072:	4b35      	ldr	r3, [pc, #212]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800707a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800707e:	d108      	bne.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007080:	f107 0318 	add.w	r3, r7, #24
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fcab 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800708e:	f000 bc88 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007096:	f000 bc84 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800709a:	4b2b      	ldr	r3, [pc, #172]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070a6:	d108      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070a8:	f107 030c 	add.w	r3, r7, #12
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fdeb 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070b6:	f000 bc74 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070be:	f000 bc70 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070c2:	4b21      	ldr	r3, [pc, #132]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d10c      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80070d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070de:	4b1a      	ldr	r3, [pc, #104]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	08db      	lsrs	r3, r3, #3
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	4a18      	ldr	r2, [pc, #96]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070ea:	fa22 f303 	lsr.w	r3, r2, r3
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070f0:	e01f      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070f2:	4b15      	ldr	r3, [pc, #84]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070fe:	d106      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007106:	d102      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007108:	4b11      	ldr	r3, [pc, #68]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800710a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800710c:	e011      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800710e:	4b0e      	ldr	r3, [pc, #56]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800711a:	d106      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800711c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007122:	d102      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007124:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007128:	e003      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800712e:	f000 bc38 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007132:	f000 bc36 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007136:	4b08      	ldr	r3, [pc, #32]	@ (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800713a:	f000 bc32 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007142:	f000 bc2e 	b.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007146:	bf00      	nop
 8007148:	58024400 	.word	0x58024400
 800714c:	03d09000 	.word	0x03d09000
 8007150:	003d0900 	.word	0x003d0900
 8007154:	017d7840 	.word	0x017d7840
 8007158:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800715c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007160:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007164:	430b      	orrs	r3, r1
 8007166:	f040 809c 	bne.w	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800716a:	4b9e      	ldr	r3, [pc, #632]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800716c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800716e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007172:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800717a:	d054      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800717c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007182:	f200 808b 	bhi.w	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007188:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800718c:	f000 8083 	beq.w	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007192:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007196:	f200 8081 	bhi.w	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071a0:	d02f      	beq.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071a8:	d878      	bhi.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80071b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071b6:	d012      	beq.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80071b8:	e070      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071ba:	4b8a      	ldr	r3, [pc, #552]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071c6:	d107      	bne.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 feaf 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d6:	e3e4      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071dc:	e3e1      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071de:	4b81      	ldr	r3, [pc, #516]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071ea:	d107      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ec:	f107 0318 	add.w	r3, r7, #24
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fbf5 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071fa:	e3d2      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007200:	e3cf      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007202:	4b78      	ldr	r3, [pc, #480]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800720a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800720e:	d107      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007210:	f107 030c 	add.w	r3, r7, #12
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fd37 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800721e:	e3c0      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007224:	e3bd      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007226:	4b6f      	ldr	r3, [pc, #444]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800722e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007230:	4b6c      	ldr	r3, [pc, #432]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b04      	cmp	r3, #4
 800723a:	d10c      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800723c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007242:	4b68      	ldr	r3, [pc, #416]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	08db      	lsrs	r3, r3, #3
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	4a66      	ldr	r2, [pc, #408]	@ (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800724e:	fa22 f303 	lsr.w	r3, r2, r3
 8007252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007254:	e01e      	b.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007256:	4b63      	ldr	r3, [pc, #396]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007262:	d106      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800726a:	d102      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800726c:	4b5f      	ldr	r3, [pc, #380]	@ (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007270:	e010      	b.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007272:	4b5c      	ldr	r3, [pc, #368]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800727a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800727e:	d106      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007282:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007286:	d102      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007288:	4b59      	ldr	r3, [pc, #356]	@ (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800728c:	e002      	b.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007292:	e386      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007294:	e385      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007296:	4b57      	ldr	r3, [pc, #348]	@ (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800729a:	e382      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072a0:	e37f      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80072a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80072aa:	430b      	orrs	r3, r1
 80072ac:	f040 80a7 	bne.w	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80072b0:	4b4c      	ldr	r3, [pc, #304]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80072b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072c0:	d055      	beq.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072c8:	f200 8096 	bhi.w	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80072cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072d2:	f000 8084 	beq.w	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072dc:	f200 808c 	bhi.w	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072e6:	d030      	beq.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072ee:	f200 8083 	bhi.w	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072fe:	d012      	beq.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007300:	e07a      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007302:	4b38      	ldr	r3, [pc, #224]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800730a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800730e:	d107      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fe0b 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800731a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800731e:	e340      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007324:	e33d      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007326:	4b2f      	ldr	r3, [pc, #188]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800732e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007332:	d107      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007334:	f107 0318 	add.w	r3, r7, #24
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fb51 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007342:	e32e      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007348:	e32b      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800734a:	4b26      	ldr	r3, [pc, #152]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007356:	d107      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007358:	f107 030c 	add.w	r3, r7, #12
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fc93 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007366:	e31c      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800736c:	e319      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800736e:	4b1d      	ldr	r3, [pc, #116]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007372:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007376:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007378:	4b1a      	ldr	r3, [pc, #104]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b04      	cmp	r3, #4
 8007382:	d10c      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007386:	2b00      	cmp	r3, #0
 8007388:	d109      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800738a:	4b16      	ldr	r3, [pc, #88]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	08db      	lsrs	r3, r3, #3
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	4a14      	ldr	r2, [pc, #80]	@ (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007396:	fa22 f303 	lsr.w	r3, r2, r3
 800739a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800739c:	e01e      	b.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800739e:	4b11      	ldr	r3, [pc, #68]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073aa:	d106      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80073ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073b2:	d102      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073b4:	4b0d      	ldr	r3, [pc, #52]	@ (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80073b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073b8:	e010      	b.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073ba:	4b0a      	ldr	r3, [pc, #40]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073c6:	d106      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80073c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073ce:	d102      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073d0:	4b07      	ldr	r3, [pc, #28]	@ (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073d4:	e002      	b.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80073da:	e2e2      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073dc:	e2e1      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80073de:	4b05      	ldr	r3, [pc, #20]	@ (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80073e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e2:	e2de      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073e4:	58024400 	.word	0x58024400
 80073e8:	03d09000 	.word	0x03d09000
 80073ec:	003d0900 	.word	0x003d0900
 80073f0:	017d7840 	.word	0x017d7840
 80073f4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073fc:	e2d1      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80073fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007402:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007406:	430b      	orrs	r3, r1
 8007408:	f040 809c 	bne.w	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800740c:	4b93      	ldr	r3, [pc, #588]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800740e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007410:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007414:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800741c:	d054      	beq.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007424:	f200 808b 	bhi.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800742e:	f000 8083 	beq.w	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007434:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007438:	f200 8081 	bhi.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800743c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007442:	d02f      	beq.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800744a:	d878      	bhi.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800744c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744e:	2b00      	cmp	r3, #0
 8007450:	d004      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007458:	d012      	beq.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800745a:	e070      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800745c:	4b7f      	ldr	r3, [pc, #508]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007468:	d107      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800746a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fd5e 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007478:	e293      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800747e:	e290      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007480:	4b76      	ldr	r3, [pc, #472]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800748c:	d107      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800748e:	f107 0318 	add.w	r3, r7, #24
 8007492:	4618      	mov	r0, r3
 8007494:	f000 faa4 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800749c:	e281      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074a2:	e27e      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074a4:	4b6d      	ldr	r3, [pc, #436]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b0:	d107      	bne.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074b2:	f107 030c 	add.w	r3, r7, #12
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fbe6 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074c0:	e26f      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c6:	e26c      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074c8:	4b64      	ldr	r3, [pc, #400]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074d0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074d2:	4b62      	ldr	r3, [pc, #392]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d10c      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80074de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e4:	4b5d      	ldr	r3, [pc, #372]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	08db      	lsrs	r3, r3, #3
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	4a5c      	ldr	r2, [pc, #368]	@ (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
 80074f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074f6:	e01e      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074f8:	4b58      	ldr	r3, [pc, #352]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007504:	d106      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007508:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800750c:	d102      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800750e:	4b55      	ldr	r3, [pc, #340]	@ (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007512:	e010      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007514:	4b51      	ldr	r3, [pc, #324]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800751c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007520:	d106      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007528:	d102      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800752a:	4b4f      	ldr	r3, [pc, #316]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800752c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800752e:	e002      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007534:	e235      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007536:	e234      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007538:	4b4c      	ldr	r3, [pc, #304]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800753a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800753c:	e231      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007542:	e22e      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007548:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800754c:	430b      	orrs	r3, r1
 800754e:	f040 808f 	bne.w	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007552:	4b42      	ldr	r3, [pc, #264]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007556:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800755a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800755c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007562:	d06b      	beq.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007566:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800756a:	d874      	bhi.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800756c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007572:	d056      	beq.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007576:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800757a:	d86c      	bhi.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007582:	d03b      	beq.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007586:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800758a:	d864      	bhi.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800758c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007592:	d021      	beq.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800759a:	d85c      	bhi.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d004      	beq.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80075a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075a8:	d004      	beq.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80075aa:	e054      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80075ac:	f7fe fa0c 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 80075b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075b2:	e1f6      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075b4:	4b29      	ldr	r3, [pc, #164]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075c0:	d107      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c2:	f107 0318 	add.w	r3, r7, #24
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fa0a 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d0:	e1e7      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075d6:	e1e4      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075d8:	4b20      	ldr	r3, [pc, #128]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075e4:	d107      	bne.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075e6:	f107 030c 	add.w	r3, r7, #12
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fb4c 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075f4:	e1d5      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075fa:	e1d2      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075fc:	4b17      	ldr	r3, [pc, #92]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b04      	cmp	r3, #4
 8007606:	d109      	bne.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007608:	4b14      	ldr	r3, [pc, #80]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	08db      	lsrs	r3, r3, #3
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	4a13      	ldr	r2, [pc, #76]	@ (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
 8007618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800761a:	e1c2      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007620:	e1bf      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007622:	4b0e      	ldr	r3, [pc, #56]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800762e:	d102      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007630:	4b0c      	ldr	r3, [pc, #48]	@ (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007634:	e1b5      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800763a:	e1b2      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800763c:	4b07      	ldr	r3, [pc, #28]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007644:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007648:	d102      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800764a:	4b07      	ldr	r3, [pc, #28]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800764c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800764e:	e1a8      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007654:	e1a5      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800765a:	e1a2      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800765c:	58024400 	.word	0x58024400
 8007660:	03d09000 	.word	0x03d09000
 8007664:	003d0900 	.word	0x003d0900
 8007668:	017d7840 	.word	0x017d7840
 800766c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007674:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007678:	430b      	orrs	r3, r1
 800767a:	d173      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800767c:	4b9c      	ldr	r3, [pc, #624]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800767e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007680:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007684:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007688:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800768c:	d02f      	beq.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800768e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007694:	d863      	bhi.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a2:	d012      	beq.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80076a4:	e05b      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076a6:	4b92      	ldr	r3, [pc, #584]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076b2:	d107      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076b4:	f107 0318 	add.w	r3, r7, #24
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 f991 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076c2:	e16e      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c8:	e16b      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076ca:	4b89      	ldr	r3, [pc, #548]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076d6:	d107      	bne.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076d8:	f107 030c 	add.w	r3, r7, #12
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fad3 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076e6:	e15c      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ec:	e159      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076ee:	4b80      	ldr	r3, [pc, #512]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076f8:	4b7d      	ldr	r3, [pc, #500]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b04      	cmp	r3, #4
 8007702:	d10c      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007706:	2b00      	cmp	r3, #0
 8007708:	d109      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800770a:	4b79      	ldr	r3, [pc, #484]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	08db      	lsrs	r3, r3, #3
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	4a77      	ldr	r2, [pc, #476]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007716:	fa22 f303 	lsr.w	r3, r2, r3
 800771a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800771c:	e01e      	b.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800771e:	4b74      	ldr	r3, [pc, #464]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800772a:	d106      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800772c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800772e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007732:	d102      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007734:	4b70      	ldr	r3, [pc, #448]	@ (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007738:	e010      	b.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800773a:	4b6d      	ldr	r3, [pc, #436]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007746:	d106      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774e:	d102      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007750:	4b6a      	ldr	r3, [pc, #424]	@ (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007754:	e002      	b.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800775a:	e122      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800775c:	e121      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007762:	e11e      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007768:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800776c:	430b      	orrs	r3, r1
 800776e:	d133      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007770:	4b5f      	ldr	r3, [pc, #380]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007778:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007786:	d012      	beq.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007788:	e023      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800778a:	4b59      	ldr	r3, [pc, #356]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007792:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007796:	d107      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fbc7 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077a6:	e0fc      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ac:	e0f9      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077ae:	4b50      	ldr	r3, [pc, #320]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077ba:	d107      	bne.n	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077bc:	f107 0318 	add.w	r3, r7, #24
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 f90d 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077ca:	e0ea      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d0:	e0e7      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d6:	e0e4      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80077d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077dc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80077e0:	430b      	orrs	r3, r1
 80077e2:	f040 808d 	bne.w	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80077e6:	4b42      	ldr	r3, [pc, #264]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80077ee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077f6:	d06b      	beq.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80077f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077fe:	d874      	bhi.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007806:	d056      	beq.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800780e:	d86c      	bhi.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007816:	d03b      	beq.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800781e:	d864      	bhi.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007826:	d021      	beq.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800782e:	d85c      	bhi.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800783c:	d004      	beq.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800783e:	e054      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007840:	f000 f8b8 	bl	80079b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007844:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007846:	e0ac      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007848:	4b29      	ldr	r3, [pc, #164]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007854:	d107      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007856:	f107 0318 	add.w	r3, r7, #24
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f8c0 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007864:	e09d      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800786a:	e09a      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800786c:	4b20      	ldr	r3, [pc, #128]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007878:	d107      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800787a:	f107 030c 	add.w	r3, r7, #12
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fa02 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007888:	e08b      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800788e:	e088      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007890:	4b17      	ldr	r3, [pc, #92]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b04      	cmp	r3, #4
 800789a:	d109      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800789c:	4b14      	ldr	r3, [pc, #80]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	08db      	lsrs	r3, r3, #3
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	4a13      	ldr	r2, [pc, #76]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80078a8:	fa22 f303 	lsr.w	r3, r2, r3
 80078ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ae:	e078      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b4:	e075      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80078b6:	4b0e      	ldr	r3, [pc, #56]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078c2:	d102      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80078c4:	4b0c      	ldr	r3, [pc, #48]	@ (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078c8:	e06b      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ce:	e068      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078d0:	4b07      	ldr	r3, [pc, #28]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078dc:	d102      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80078de:	4b07      	ldr	r3, [pc, #28]	@ (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80078e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078e2:	e05e      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e8:	e05b      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ee:	e058      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078f0:	58024400 	.word	0x58024400
 80078f4:	03d09000 	.word	0x03d09000
 80078f8:	003d0900 	.word	0x003d0900
 80078fc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007904:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007908:	430b      	orrs	r3, r1
 800790a:	d148      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800790c:	4b27      	ldr	r3, [pc, #156]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800790e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007910:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007914:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800791c:	d02a      	beq.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800791e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007924:	d838      	bhi.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d004      	beq.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800792c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007932:	d00d      	beq.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007934:	e030      	b.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007936:	4b1d      	ldr	r3, [pc, #116]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007942:	d102      	bne.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007944:	4b1a      	ldr	r3, [pc, #104]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007948:	e02b      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800794e:	e028      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007950:	4b16      	ldr	r3, [pc, #88]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007958:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800795c:	d107      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800795e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fae4 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800796c:	e019      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007972:	e016      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007974:	4b0d      	ldr	r3, [pc, #52]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800797c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007980:	d107      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007982:	f107 0318 	add.w	r3, r7, #24
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f82a 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007990:	e007      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007996:	e004      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800799c:	e001      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80079a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3740      	adds	r7, #64	@ 0x40
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	58024400 	.word	0x58024400
 80079b0:	017d7840 	.word	0x017d7840

080079b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80079b8:	f7fd ffd6 	bl	8005968 <HAL_RCC_GetHCLKFreq>
 80079bc:	4602      	mov	r2, r0
 80079be:	4b06      	ldr	r3, [pc, #24]	@ (80079d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	091b      	lsrs	r3, r3, #4
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	4904      	ldr	r1, [pc, #16]	@ (80079dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079ca:	5ccb      	ldrb	r3, [r1, r3]
 80079cc:	f003 031f 	and.w	r3, r3, #31
 80079d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	58024400 	.word	0x58024400
 80079dc:	0800cfdc 	.word	0x0800cfdc

080079e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b089      	sub	sp, #36	@ 0x24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079e8:	4ba1      	ldr	r3, [pc, #644]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80079f2:	4b9f      	ldr	r3, [pc, #636]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f6:	0b1b      	lsrs	r3, r3, #12
 80079f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80079fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a02:	091b      	lsrs	r3, r3, #4
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007a0a:	4b99      	ldr	r3, [pc, #612]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0e:	08db      	lsrs	r3, r3, #3
 8007a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	fb02 f303 	mul.w	r3, r2, r3
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8111 	beq.w	8007c50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	f000 8083 	beq.w	8007b3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	f200 80a1 	bhi.w	8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d056      	beq.n	8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a4a:	e099      	b.n	8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a4c:	4b88      	ldr	r3, [pc, #544]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02d      	beq.n	8007ab4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a58:	4b85      	ldr	r3, [pc, #532]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	08db      	lsrs	r3, r3, #3
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	4a84      	ldr	r2, [pc, #528]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a64:	fa22 f303 	lsr.w	r3, r2, r3
 8007a68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a82:	4b7b      	ldr	r3, [pc, #492]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ab2:	e087      	b.n	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ada:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007af6:	e065      	b.n	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b59      	ldr	r3, [pc, #356]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b3a:	e043      	b.n	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b48      	ldr	r3, [pc, #288]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b7e:	e021      	b.n	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b37      	ldr	r3, [pc, #220]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc8:	0a5b      	lsrs	r3, r3, #9
 8007bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8007be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bea:	ee17 2a90 	vmov	r2, s15
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf6:	0c1b      	lsrs	r3, r3, #16
 8007bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bfc:	ee07 3a90 	vmov	s15, r3
 8007c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c18:	ee17 2a90 	vmov	r2, s15
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007c20:	4b13      	ldr	r3, [pc, #76]	@ (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c24:	0e1b      	lsrs	r3, r3, #24
 8007c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c46:	ee17 2a90 	vmov	r2, s15
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c4e:	e008      	b.n	8007c62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	609a      	str	r2, [r3, #8]
}
 8007c62:	bf00      	nop
 8007c64:	3724      	adds	r7, #36	@ 0x24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	58024400 	.word	0x58024400
 8007c74:	03d09000 	.word	0x03d09000
 8007c78:	46000000 	.word	0x46000000
 8007c7c:	4c742400 	.word	0x4c742400
 8007c80:	4a742400 	.word	0x4a742400
 8007c84:	4bbebc20 	.word	0x4bbebc20

08007c88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b089      	sub	sp, #36	@ 0x24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c90:	4ba1      	ldr	r3, [pc, #644]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c9a:	4b9f      	ldr	r3, [pc, #636]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9e:	0d1b      	lsrs	r3, r3, #20
 8007ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ca4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007caa:	0a1b      	lsrs	r3, r3, #8
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007cb2:	4b99      	ldr	r3, [pc, #612]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb6:	08db      	lsrs	r3, r3, #3
 8007cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	fb02 f303 	mul.w	r3, r2, r3
 8007cc2:	ee07 3a90 	vmov	s15, r3
 8007cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 8111 	beq.w	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	f000 8083 	beq.w	8007de4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	f200 80a1 	bhi.w	8007e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d056      	beq.n	8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007cf2:	e099      	b.n	8007e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf4:	4b88      	ldr	r3, [pc, #544]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0320 	and.w	r3, r3, #32
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d02d      	beq.n	8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d00:	4b85      	ldr	r3, [pc, #532]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	08db      	lsrs	r3, r3, #3
 8007d06:	f003 0303 	and.w	r3, r3, #3
 8007d0a:	4a84      	ldr	r2, [pc, #528]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	ee07 3a90 	vmov	s15, r3
 8007d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	ee07 3a90 	vmov	s15, r3
 8007d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d5a:	e087      	b.n	8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	ee07 3a90 	vmov	s15, r3
 8007d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d9e:	e065      	b.n	8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007daa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db2:	4b59      	ldr	r3, [pc, #356]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007de2:	e043      	b.n	8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	ee07 3a90 	vmov	s15, r3
 8007dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df6:	4b48      	ldr	r3, [pc, #288]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e26:	e021      	b.n	8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	ee07 3a90 	vmov	s15, r3
 8007e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3a:	4b37      	ldr	r3, [pc, #220]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e42:	ee07 3a90 	vmov	s15, r3
 8007e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e70:	0a5b      	lsrs	r3, r3, #9
 8007e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e76:	ee07 3a90 	vmov	s15, r3
 8007e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e92:	ee17 2a90 	vmov	r2, s15
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9e:	0c1b      	lsrs	r3, r3, #16
 8007ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ea4:	ee07 3a90 	vmov	s15, r3
 8007ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec0:	ee17 2a90 	vmov	r2, s15
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007ec8:	4b13      	ldr	r3, [pc, #76]	@ (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ecc:	0e1b      	lsrs	r3, r3, #24
 8007ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eee:	ee17 2a90 	vmov	r2, s15
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ef6:	e008      	b.n	8007f0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	609a      	str	r2, [r3, #8]
}
 8007f0a:	bf00      	nop
 8007f0c:	3724      	adds	r7, #36	@ 0x24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	58024400 	.word	0x58024400
 8007f1c:	03d09000 	.word	0x03d09000
 8007f20:	46000000 	.word	0x46000000
 8007f24:	4c742400 	.word	0x4c742400
 8007f28:	4a742400 	.word	0x4a742400
 8007f2c:	4bbebc20 	.word	0x4bbebc20

08007f30 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b089      	sub	sp, #36	@ 0x24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f38:	4ba0      	ldr	r3, [pc, #640]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3c:	f003 0303 	and.w	r3, r3, #3
 8007f40:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007f42:	4b9e      	ldr	r3, [pc, #632]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f46:	091b      	lsrs	r3, r3, #4
 8007f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f4c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007f4e:	4b9b      	ldr	r3, [pc, #620]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007f58:	4b98      	ldr	r3, [pc, #608]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f5c:	08db      	lsrs	r3, r3, #3
 8007f5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	fb02 f303 	mul.w	r3, r2, r3
 8007f68:	ee07 3a90 	vmov	s15, r3
 8007f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f70:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 8111 	beq.w	800819e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	f000 8083 	beq.w	800808a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	f200 80a1 	bhi.w	80080ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d056      	beq.n	8008046 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007f98:	e099      	b.n	80080ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f9a:	4b88      	ldr	r3, [pc, #544]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d02d      	beq.n	8008002 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fa6:	4b85      	ldr	r3, [pc, #532]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	08db      	lsrs	r3, r3, #3
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	4a83      	ldr	r2, [pc, #524]	@ (80081c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	ee07 3a90 	vmov	s15, r3
 8007fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fd0:	4b7a      	ldr	r3, [pc, #488]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd8:	ee07 3a90 	vmov	s15, r3
 8007fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80081c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008000:	e087      	b.n	8008112 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	ee07 3a90 	vmov	s15, r3
 8008008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80081c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008014:	4b69      	ldr	r3, [pc, #420]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008024:	ed97 6a03 	vldr	s12, [r7, #12]
 8008028:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80081c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800802c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008034:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008044:	e065      	b.n	8008112 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	ee07 3a90 	vmov	s15, r3
 800804c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008050:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80081cc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008058:	4b58      	ldr	r3, [pc, #352]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800805a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008060:	ee07 3a90 	vmov	s15, r3
 8008064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008068:	ed97 6a03 	vldr	s12, [r7, #12]
 800806c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80081c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008070:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008074:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008078:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800807c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008084:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008088:	e043      	b.n	8008112 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	ee07 3a90 	vmov	s15, r3
 8008090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008094:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80081d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809c:	4b47      	ldr	r3, [pc, #284]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800809e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80081c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080cc:	e021      	b.n	8008112 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	ee07 3a90 	vmov	s15, r3
 80080d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80081c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80080dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e0:	4b36      	ldr	r3, [pc, #216]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e8:	ee07 3a90 	vmov	s15, r3
 80080ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80081c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008110:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008112:	4b2a      	ldr	r3, [pc, #168]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008116:	0a5b      	lsrs	r3, r3, #9
 8008118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800811c:	ee07 3a90 	vmov	s15, r3
 8008120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008124:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800812c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008138:	ee17 2a90 	vmov	r2, s15
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008140:	4b1e      	ldr	r3, [pc, #120]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008144:	0c1b      	lsrs	r3, r3, #16
 8008146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800815a:	edd7 6a07 	vldr	s13, [r7, #28]
 800815e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008166:	ee17 2a90 	vmov	r2, s15
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800816e:	4b13      	ldr	r3, [pc, #76]	@ (80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008172:	0e1b      	lsrs	r3, r3, #24
 8008174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008178:	ee07 3a90 	vmov	s15, r3
 800817c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008180:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008184:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008188:	edd7 6a07 	vldr	s13, [r7, #28]
 800818c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008194:	ee17 2a90 	vmov	r2, s15
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800819c:	e008      	b.n	80081b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	609a      	str	r2, [r3, #8]
}
 80081b0:	bf00      	nop
 80081b2:	3724      	adds	r7, #36	@ 0x24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	58024400 	.word	0x58024400
 80081c0:	03d09000 	.word	0x03d09000
 80081c4:	46000000 	.word	0x46000000
 80081c8:	4c742400 	.word	0x4c742400
 80081cc:	4a742400 	.word	0x4a742400
 80081d0:	4bbebc20 	.word	0x4bbebc20

080081d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081e2:	4b53      	ldr	r3, [pc, #332]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80081e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d101      	bne.n	80081f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e099      	b.n	8008326 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a4e      	ldr	r2, [pc, #312]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80081f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081fe:	f7f9 f91f 	bl	8001440 <HAL_GetTick>
 8008202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008204:	e008      	b.n	8008218 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008206:	f7f9 f91b 	bl	8001440 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d901      	bls.n	8008218 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e086      	b.n	8008326 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008218:	4b45      	ldr	r3, [pc, #276]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1f0      	bne.n	8008206 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008224:	4b42      	ldr	r3, [pc, #264]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 8008226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008228:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	031b      	lsls	r3, r3, #12
 8008232:	493f      	ldr	r1, [pc, #252]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 8008234:	4313      	orrs	r3, r2
 8008236:	628b      	str	r3, [r1, #40]	@ 0x28
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	3b01      	subs	r3, #1
 800823e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	3b01      	subs	r3, #1
 8008248:	025b      	lsls	r3, r3, #9
 800824a:	b29b      	uxth	r3, r3
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	3b01      	subs	r3, #1
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	3b01      	subs	r3, #1
 8008262:	061b      	lsls	r3, r3, #24
 8008264:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008268:	4931      	ldr	r1, [pc, #196]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 800826a:	4313      	orrs	r3, r2
 800826c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800826e:	4b30      	ldr	r3, [pc, #192]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 8008270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008272:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	492d      	ldr	r1, [pc, #180]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 800827c:	4313      	orrs	r3, r2
 800827e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008280:	4b2b      	ldr	r3, [pc, #172]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 8008282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008284:	f023 0220 	bic.w	r2, r3, #32
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	4928      	ldr	r1, [pc, #160]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 800828e:	4313      	orrs	r3, r2
 8008290:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008292:	4b27      	ldr	r3, [pc, #156]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 8008294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008296:	4a26      	ldr	r2, [pc, #152]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 8008298:	f023 0310 	bic.w	r3, r3, #16
 800829c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800829e:	4b24      	ldr	r3, [pc, #144]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082a2:	4b24      	ldr	r3, [pc, #144]	@ (8008334 <RCCEx_PLL2_Config+0x160>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	69d2      	ldr	r2, [r2, #28]
 80082aa:	00d2      	lsls	r2, r2, #3
 80082ac:	4920      	ldr	r1, [pc, #128]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80082b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082b8:	f043 0310 	orr.w	r3, r3, #16
 80082bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d106      	bne.n	80082d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80082c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c8:	4a19      	ldr	r2, [pc, #100]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082d0:	e00f      	b.n	80082f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d106      	bne.n	80082e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082d8:	4b15      	ldr	r3, [pc, #84]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082dc:	4a14      	ldr	r2, [pc, #80]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082e4:	e005      	b.n	80082f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082e6:	4b12      	ldr	r3, [pc, #72]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ea:	4a11      	ldr	r2, [pc, #68]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80082f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082f2:	4b0f      	ldr	r3, [pc, #60]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 80082f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082fe:	f7f9 f89f 	bl	8001440 <HAL_GetTick>
 8008302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008304:	e008      	b.n	8008318 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008306:	f7f9 f89b 	bl	8001440 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e006      	b.n	8008326 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008318:	4b05      	ldr	r3, [pc, #20]	@ (8008330 <RCCEx_PLL2_Config+0x15c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0f0      	beq.n	8008306 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	58024400 	.word	0x58024400
 8008334:	ffff0007 	.word	0xffff0007

08008338 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008346:	4b53      	ldr	r3, [pc, #332]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 8008348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	2b03      	cmp	r3, #3
 8008350:	d101      	bne.n	8008356 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e099      	b.n	800848a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008356:	4b4f      	ldr	r3, [pc, #316]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a4e      	ldr	r2, [pc, #312]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 800835c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008362:	f7f9 f86d 	bl	8001440 <HAL_GetTick>
 8008366:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008368:	e008      	b.n	800837c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800836a:	f7f9 f869 	bl	8001440 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d901      	bls.n	800837c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e086      	b.n	800848a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800837c:	4b45      	ldr	r3, [pc, #276]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1f0      	bne.n	800836a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008388:	4b42      	ldr	r3, [pc, #264]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 800838a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	051b      	lsls	r3, r3, #20
 8008396:	493f      	ldr	r1, [pc, #252]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 8008398:	4313      	orrs	r3, r2
 800839a:	628b      	str	r3, [r1, #40]	@ 0x28
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	025b      	lsls	r3, r3, #9
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	431a      	orrs	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	041b      	lsls	r3, r3, #16
 80083ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80083be:	431a      	orrs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	061b      	lsls	r3, r3, #24
 80083c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083cc:	4931      	ldr	r1, [pc, #196]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80083d2:	4b30      	ldr	r3, [pc, #192]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 80083d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	492d      	ldr	r1, [pc, #180]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 80083e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	4928      	ldr	r1, [pc, #160]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083f6:	4b27      	ldr	r3, [pc, #156]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 80083f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fa:	4a26      	ldr	r2, [pc, #152]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 80083fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008400:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008402:	4b24      	ldr	r3, [pc, #144]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 8008404:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008406:	4b24      	ldr	r3, [pc, #144]	@ (8008498 <RCCEx_PLL3_Config+0x160>)
 8008408:	4013      	ands	r3, r2
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	69d2      	ldr	r2, [r2, #28]
 800840e:	00d2      	lsls	r2, r2, #3
 8008410:	4920      	ldr	r1, [pc, #128]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 8008412:	4313      	orrs	r3, r2
 8008414:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008416:	4b1f      	ldr	r3, [pc, #124]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 8008418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841a:	4a1e      	ldr	r2, [pc, #120]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 800841c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008420:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008428:	4b1a      	ldr	r3, [pc, #104]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 800842a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842c:	4a19      	ldr	r2, [pc, #100]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 800842e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008432:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008434:	e00f      	b.n	8008456 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d106      	bne.n	800844a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800843c:	4b15      	ldr	r3, [pc, #84]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 800843e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008440:	4a14      	ldr	r2, [pc, #80]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 8008442:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008446:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008448:	e005      	b.n	8008456 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800844a:	4b12      	ldr	r3, [pc, #72]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 800844c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844e:	4a11      	ldr	r2, [pc, #68]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 8008450:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008454:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008456:	4b0f      	ldr	r3, [pc, #60]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a0e      	ldr	r2, [pc, #56]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 800845c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008462:	f7f8 ffed 	bl	8001440 <HAL_GetTick>
 8008466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008468:	e008      	b.n	800847c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800846a:	f7f8 ffe9 	bl	8001440 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	2b02      	cmp	r3, #2
 8008476:	d901      	bls.n	800847c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e006      	b.n	800848a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800847c:	4b05      	ldr	r3, [pc, #20]	@ (8008494 <RCCEx_PLL3_Config+0x15c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0f0      	beq.n	800846a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	58024400 	.word	0x58024400
 8008498:	ffff0007 	.word	0xffff0007

0800849c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b08a      	sub	sp, #40	@ 0x28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e28e      	b.n	80089cc <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80084ae:	f7f8 fff7 	bl	80014a0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d113      	bne.n	80084e4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a96      	ldr	r2, [pc, #600]	@ (800871c <HAL_SAI_Init+0x280>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d004      	beq.n	80084d0 <HAL_SAI_Init+0x34>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a95      	ldr	r2, [pc, #596]	@ (8008720 <HAL_SAI_Init+0x284>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d107      	bne.n	80084e0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d103      	bne.n	80084e0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e273      	b.n	80089cc <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a8c      	ldr	r2, [pc, #560]	@ (800871c <HAL_SAI_Init+0x280>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d004      	beq.n	80084f8 <HAL_SAI_Init+0x5c>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a8c      	ldr	r2, [pc, #560]	@ (8008724 <HAL_SAI_Init+0x288>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d102      	bne.n	80084fe <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80084f8:	4b8b      	ldr	r3, [pc, #556]	@ (8008728 <HAL_SAI_Init+0x28c>)
 80084fa:	61bb      	str	r3, [r7, #24]
 80084fc:	e028      	b.n	8008550 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a8a      	ldr	r2, [pc, #552]	@ (800872c <HAL_SAI_Init+0x290>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d004      	beq.n	8008512 <HAL_SAI_Init+0x76>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a88      	ldr	r2, [pc, #544]	@ (8008730 <HAL_SAI_Init+0x294>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d102      	bne.n	8008518 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8008512:	4b88      	ldr	r3, [pc, #544]	@ (8008734 <HAL_SAI_Init+0x298>)
 8008514:	61bb      	str	r3, [r7, #24]
 8008516:	e01b      	b.n	8008550 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a86      	ldr	r2, [pc, #536]	@ (8008738 <HAL_SAI_Init+0x29c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d004      	beq.n	800852c <HAL_SAI_Init+0x90>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a85      	ldr	r2, [pc, #532]	@ (800873c <HAL_SAI_Init+0x2a0>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d102      	bne.n	8008532 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800852c:	4b84      	ldr	r3, [pc, #528]	@ (8008740 <HAL_SAI_Init+0x2a4>)
 800852e:	61bb      	str	r3, [r7, #24]
 8008530:	e00e      	b.n	8008550 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a7a      	ldr	r2, [pc, #488]	@ (8008720 <HAL_SAI_Init+0x284>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d004      	beq.n	8008546 <HAL_SAI_Init+0xaa>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a80      	ldr	r2, [pc, #512]	@ (8008744 <HAL_SAI_Init+0x2a8>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d102      	bne.n	800854c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8008546:	4b80      	ldr	r3, [pc, #512]	@ (8008748 <HAL_SAI_Init+0x2ac>)
 8008548:	61bb      	str	r3, [r7, #24]
 800854a:	e001      	b.n	8008550 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e23d      	b.n	80089cc <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	d106      	bne.n	800856a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7f8 fd1d 	bl	8000fa4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fd5e 	bl	800902c <SAI_Disable>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e228      	b.n	80089cc <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d00c      	beq.n	80085a4 <HAL_SAI_Init+0x108>
 800858a:	2b02      	cmp	r3, #2
 800858c:	d80d      	bhi.n	80085aa <HAL_SAI_Init+0x10e>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <HAL_SAI_Init+0xfc>
 8008592:	2b01      	cmp	r3, #1
 8008594:	d003      	beq.n	800859e <HAL_SAI_Init+0x102>
 8008596:	e008      	b.n	80085aa <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800859c:	e008      	b.n	80085b0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800859e:	2310      	movs	r3, #16
 80085a0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80085a2:	e005      	b.n	80085b0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80085a4:	2320      	movs	r3, #32
 80085a6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80085a8:	e002      	b.n	80085b0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80085ae:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2b05      	cmp	r3, #5
 80085b6:	d832      	bhi.n	800861e <HAL_SAI_Init+0x182>
 80085b8:	a201      	add	r2, pc, #4	@ (adr r2, 80085c0 <HAL_SAI_Init+0x124>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085d9 	.word	0x080085d9
 80085c4:	080085df 	.word	0x080085df
 80085c8:	080085e7 	.word	0x080085e7
 80085cc:	080085ef 	.word	0x080085ef
 80085d0:	080085ff 	.word	0x080085ff
 80085d4:	0800860f 	.word	0x0800860f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80085d8:	2300      	movs	r3, #0
 80085da:	61fb      	str	r3, [r7, #28]
      break;
 80085dc:	e022      	b.n	8008624 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80085de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085e2:	61fb      	str	r3, [r7, #28]
      break;
 80085e4:	e01e      	b.n	8008624 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80085e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80085ea:	61fb      	str	r3, [r7, #28]
      break;
 80085ec:	e01a      	b.n	8008624 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80085ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80085f2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f6:	f043 0301 	orr.w	r3, r3, #1
 80085fa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80085fc:	e012      	b.n	8008624 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80085fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008602:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8008604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008606:	f043 0302 	orr.w	r3, r3, #2
 800860a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800860c:	e00a      	b.n	8008624 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800860e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008612:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	f043 0303 	orr.w	r3, r3, #3
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800861c:	e002      	b.n	8008624 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	61fb      	str	r3, [r7, #28]
      break;
 8008622:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008628:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 80c5 	beq.w	80087be <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a37      	ldr	r2, [pc, #220]	@ (800871c <HAL_SAI_Init+0x280>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d004      	beq.n	800864c <HAL_SAI_Init+0x1b0>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a37      	ldr	r2, [pc, #220]	@ (8008724 <HAL_SAI_Init+0x288>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d106      	bne.n	800865a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800864c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008650:	f04f 0100 	mov.w	r1, #0
 8008654:	f7fe fc2e 	bl	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008658:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a33      	ldr	r2, [pc, #204]	@ (800872c <HAL_SAI_Init+0x290>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d004      	beq.n	800866e <HAL_SAI_Init+0x1d2>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a31      	ldr	r2, [pc, #196]	@ (8008730 <HAL_SAI_Init+0x294>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d106      	bne.n	800867c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800866e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008672:	f04f 0100 	mov.w	r1, #0
 8008676:	f7fe fc1d 	bl	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 800867a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a2d      	ldr	r2, [pc, #180]	@ (8008738 <HAL_SAI_Init+0x29c>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d004      	beq.n	8008690 <HAL_SAI_Init+0x1f4>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a2c      	ldr	r2, [pc, #176]	@ (800873c <HAL_SAI_Init+0x2a0>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d106      	bne.n	800869e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008690:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008694:	f04f 0100 	mov.w	r1, #0
 8008698:	f7fe fc0c 	bl	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 800869c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008720 <HAL_SAI_Init+0x284>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d106      	bne.n	80086b6 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80086a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80086ac:	f04f 0100 	mov.w	r1, #0
 80086b0:	f7fe fc00 	bl	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 80086b4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a22      	ldr	r2, [pc, #136]	@ (8008744 <HAL_SAI_Init+0x2a8>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d106      	bne.n	80086ce <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80086c0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80086c4:	f04f 0100 	mov.w	r1, #0
 80086c8:	f7fe fbf4 	bl	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 80086cc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086d6:	d139      	bne.n	800874c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d102      	bne.n	80086e6 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80086e0:	2340      	movs	r3, #64	@ 0x40
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	e00a      	b.n	80086fc <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ea:	2b08      	cmp	r3, #8
 80086ec:	d103      	bne.n	80086f6 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80086ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e002      	b.n	80086fc <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fa:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	4619      	mov	r1, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a1b      	ldr	r3, [r3, #32]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	fb02 f303 	mul.w	r3, r2, r3
 8008712:	fbb1 f3f3 	udiv	r3, r1, r3
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	e030      	b.n	800877c <HAL_SAI_Init+0x2e0>
 800871a:	bf00      	nop
 800871c:	40015804 	.word	0x40015804
 8008720:	58005404 	.word	0x58005404
 8008724:	40015824 	.word	0x40015824
 8008728:	40015800 	.word	0x40015800
 800872c:	40015c04 	.word	0x40015c04
 8008730:	40015c24 	.word	0x40015c24
 8008734:	40015c00 	.word	0x40015c00
 8008738:	40016004 	.word	0x40016004
 800873c:	40016024 	.word	0x40016024
 8008740:	40016000 	.word	0x40016000
 8008744:	58005424 	.word	0x58005424
 8008748:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008750:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008754:	d101      	bne.n	800875a <HAL_SAI_Init+0x2be>
 8008756:	2302      	movs	r3, #2
 8008758:	e000      	b.n	800875c <HAL_SAI_Init+0x2c0>
 800875a:	2301      	movs	r3, #1
 800875c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	4619      	mov	r1, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	fb02 f303 	mul.w	r3, r2, r3
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	fbb1 f3f3 	udiv	r3, r1, r3
 800877a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	4a95      	ldr	r2, [pc, #596]	@ (80089d4 <HAL_SAI_Init+0x538>)
 8008780:	fba2 2303 	umull	r2, r3, r2, r3
 8008784:	08da      	lsrs	r2, r3, #3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800878a:	6939      	ldr	r1, [r7, #16]
 800878c:	4b91      	ldr	r3, [pc, #580]	@ (80089d4 <HAL_SAI_Init+0x538>)
 800878e:	fba3 2301 	umull	r2, r3, r3, r1
 8008792:	08da      	lsrs	r2, r3, #3
 8008794:	4613      	mov	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	1aca      	subs	r2, r1, r3
 800879e:	2a08      	cmp	r2, #8
 80087a0:	d904      	bls.n	80087ac <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d104      	bne.n	80087be <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b8:	085a      	lsrs	r2, r3, #1
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <HAL_SAI_Init+0x332>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d109      	bne.n	80087e2 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <HAL_SAI_Init+0x33e>
 80087d6:	2300      	movs	r3, #0
 80087d8:	e001      	b.n	80087de <HAL_SAI_Init+0x342>
 80087da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087de:	623b      	str	r3, [r7, #32]
 80087e0:	e008      	b.n	80087f4 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d102      	bne.n	80087f0 <HAL_SAI_Init+0x354>
 80087ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087ee:	e000      	b.n	80087f2 <HAL_SAI_Init+0x356>
 80087f0:	2300      	movs	r3, #0
 80087f2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80087f4:	f7f8 fe54 	bl	80014a0 <HAL_GetREVID>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087fe:	d331      	bcc.n	8008864 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6819      	ldr	r1, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	4b73      	ldr	r3, [pc, #460]	@ (80089d8 <HAL_SAI_Init+0x53c>)
 800880c:	400b      	ands	r3, r1
 800880e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6819      	ldr	r1, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800881e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008824:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800882a:	431a      	orrs	r2, r3
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008838:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008844:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884a:	051b      	lsls	r3, r3, #20
 800884c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008852:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	e02d      	b.n	80088c0 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6819      	ldr	r1, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b5b      	ldr	r3, [pc, #364]	@ (80089dc <HAL_SAI_Init+0x540>)
 8008870:	400b      	ands	r3, r1
 8008872:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6819      	ldr	r1, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008882:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008888:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800888e:	431a      	orrs	r2, r3
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800889c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80088a8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ae:	051b      	lsls	r3, r3, #20
 80088b0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80088b6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6859      	ldr	r1, [r3, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4b45      	ldr	r3, [pc, #276]	@ (80089e0 <HAL_SAI_Init+0x544>)
 80088cc:	400b      	ands	r3, r1
 80088ce:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6859      	ldr	r1, [r3, #4]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	69da      	ldr	r2, [r3, #28]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e4:	431a      	orrs	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6899      	ldr	r1, [r3, #8]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4b3a      	ldr	r3, [pc, #232]	@ (80089e4 <HAL_SAI_Init+0x548>)
 80088fa:	400b      	ands	r3, r1
 80088fc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6899      	ldr	r1, [r3, #8]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008908:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800890e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8008914:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800891a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008920:	3b01      	subs	r3, #1
 8008922:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008924:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68d9      	ldr	r1, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800893c:	400b      	ands	r3, r1
 800893e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68d9      	ldr	r1, [r3, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800894e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008954:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008956:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800895c:	3b01      	subs	r3, #1
 800895e:	021b      	lsls	r3, r3, #8
 8008960:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a1e      	ldr	r2, [pc, #120]	@ (80089e8 <HAL_SAI_Init+0x54c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d004      	beq.n	800897e <HAL_SAI_Init+0x4e2>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a1c      	ldr	r2, [pc, #112]	@ (80089ec <HAL_SAI_Init+0x550>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d119      	bne.n	80089b2 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008982:	f023 0201 	bic.w	r2, r3, #1
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008990:	2b01      	cmp	r3, #1
 8008992:	d10e      	bne.n	80089b2 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800899c:	3b01      	subs	r3, #1
 800899e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80089a0:	431a      	orrs	r2, r3
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089aa:	f043 0201 	orr.w	r2, r3, #1
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3728      	adds	r7, #40	@ 0x28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	cccccccd 	.word	0xcccccccd
 80089d8:	f005c010 	.word	0xf005c010
 80089dc:	f805c010 	.word	0xf805c010
 80089e0:	ffff1ff0 	.word	0xffff1ff0
 80089e4:	fff88000 	.word	0xfff88000
 80089e8:	40015804 	.word	0x40015804
 80089ec:	58005404 	.word	0x58005404

080089f0 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d101      	bne.n	8008a0a <HAL_SAI_Abort+0x1a>
 8008a06:	2302      	movs	r3, #2
 8008a08:	e07d      	b.n	8008b06 <HAL_SAI_Abort+0x116>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fb0a 	bl	800902c <SAI_Disable>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a30:	d14f      	bne.n	8008ad2 <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008a40:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b12      	cmp	r3, #18
 8008a4c:	d11d      	bne.n	8008a8a <HAL_SAI_Abort+0x9a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d018      	beq.n	8008a8a <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f9 fc78 	bl	8002354 <HAL_DMA_Abort>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00f      	beq.n	8008a8a <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a72:	2b80      	cmp	r3, #128	@ 0x80
 8008a74:	d009      	beq.n	8008a8a <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b22      	cmp	r3, #34	@ 0x22
 8008a94:	d11d      	bne.n	8008ad2 <HAL_SAI_Abort+0xe2>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d018      	beq.n	8008ad2 <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7f9 fc54 	bl	8002354 <HAL_DMA_Abort>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00f      	beq.n	8008ad2 <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aba:	2b80      	cmp	r3, #128	@ 0x80
 8008abc:	d009      	beq.n	8008ad2 <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ac8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ae2:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f042 0208 	orr.w	r2, r2, #8
 8008af2:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <HAL_SAI_Receive_DMA+0x1a>
 8008b24:	88fb      	ldrh	r3, [r7, #6]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e079      	b.n	8008c22 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d172      	bne.n	8008c20 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_SAI_Receive_DMA+0x38>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e06c      	b.n	8008c22 <HAL_SAI_Receive_DMA+0x112>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	88fa      	ldrh	r2, [r7, #6]
 8008b5a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	88fa      	ldrh	r2, [r7, #6]
 8008b62:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2222      	movs	r2, #34	@ 0x22
 8008b72:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8008c2c <HAL_SAI_Receive_DMA+0x11c>)
 8008b7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b86:	4a2a      	ldr	r2, [pc, #168]	@ (8008c30 <HAL_SAI_Receive_DMA+0x120>)
 8008b88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b90:	4a28      	ldr	r2, [pc, #160]	@ (8008c34 <HAL_SAI_Receive_DMA+0x124>)
 8008b92:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	331c      	adds	r3, #28
 8008baa:	4619      	mov	r1, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008bb8:	f7f9 f962 	bl	8001e80 <HAL_DMA_Start_IT>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d005      	beq.n	8008bce <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e029      	b.n	8008c22 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008bce:	2100      	movs	r1, #0
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 f9f3 	bl	8008fbc <SAI_InterruptFlag>
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	691a      	ldr	r2, [r3, #16]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008bf4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d107      	bne.n	8008c14 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008c12:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	e000      	b.n	8008c22 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008c20:	2302      	movs	r3, #2
  }
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	08009101 	.word	0x08009101
 8008c30:	080090a1 	.word	0x080090a1
 8008c34:	0800911d 	.word	0x0800911d

08008c38 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 81a7 	beq.w	8008f9c <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00a      	beq.n	8008c86 <HAL_SAI_IRQHandler+0x4e>
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d005      	beq.n	8008c86 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4798      	blx	r3
 8008c84:	e18a      	b.n	8008f9c <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d01e      	beq.n	8008cce <HAL_SAI_IRQHandler+0x96>
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d019      	beq.n	8008cce <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b22      	cmp	r3, #34	@ 0x22
 8008cac:	d101      	bne.n	8008cb2 <HAL_SAI_IRQHandler+0x7a>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e000      	b.n	8008cb4 <HAL_SAI_IRQHandler+0x7c>
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f96e 	bl	8008fa8 <HAL_SAI_ErrorCallback>
 8008ccc:	e166      	b.n	8008f9c <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d013      	beq.n	8008d00 <HAL_SAI_IRQHandler+0xc8>
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00e      	beq.n	8008d00 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 8153 	beq.w	8008f9c <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cfc:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8008cfe:	e14d      	b.n	8008f9c <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f003 0320 	and.w	r3, r3, #32
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d05b      	beq.n	8008dc2 <HAL_SAI_IRQHandler+0x18a>
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f003 0320 	and.w	r3, r3, #32
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d056      	beq.n	8008dc2 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d22:	f043 0204 	orr.w	r2, r3, #4
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d03e      	beq.n	8008db4 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d018      	beq.n	8008d72 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d46:	4a97      	ldr	r2, [pc, #604]	@ (8008fa4 <HAL_SAI_IRQHandler+0x36c>)
 8008d48:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7f9 fe1d 	bl	8002990 <HAL_DMA_Abort_IT>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00a      	beq.n	8008d72 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f91b 	bl	8008fa8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 810a 	beq.w	8008f92 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d84:	4a87      	ldr	r2, [pc, #540]	@ (8008fa4 <HAL_SAI_IRQHandler+0x36c>)
 8008d86:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7f9 fdfe 	bl	8002990 <HAL_DMA_Abort_IT>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 80fb 	beq.w	8008f92 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008da2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f8fb 	bl	8008fa8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008db2:	e0ee      	b.n	8008f92 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fe1b 	bl	80089f0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f8f4 	bl	8008fa8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008dc0:	e0e7      	b.n	8008f92 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d05b      	beq.n	8008e84 <HAL_SAI_IRQHandler+0x24c>
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d056      	beq.n	8008e84 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2240      	movs	r2, #64	@ 0x40
 8008ddc:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008de4:	f043 0208 	orr.w	r2, r3, #8
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d03e      	beq.n	8008e76 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d018      	beq.n	8008e34 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e08:	4a66      	ldr	r2, [pc, #408]	@ (8008fa4 <HAL_SAI_IRQHandler+0x36c>)
 8008e0a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7f9 fdbc 	bl	8002990 <HAL_DMA_Abort_IT>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00a      	beq.n	8008e34 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f8ba 	bl	8008fa8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f000 80ab 	beq.w	8008f96 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e46:	4a57      	ldr	r2, [pc, #348]	@ (8008fa4 <HAL_SAI_IRQHandler+0x36c>)
 8008e48:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7f9 fd9d 	bl	8002990 <HAL_DMA_Abort_IT>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 809c 	beq.w	8008f96 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f89a 	bl	8008fa8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e74:	e08f      	b.n	8008f96 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7ff fdba 	bl	80089f0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f893 	bl	8008fa8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e82:	e088      	b.n	8008f96 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f003 0304 	and.w	r3, r3, #4
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d067      	beq.n	8008f5e <HAL_SAI_IRQHandler+0x326>
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d062      	beq.n	8008f5e <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ea6:	f043 0220 	orr.w	r2, r3, #32
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d03c      	beq.n	8008f34 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d018      	beq.n	8008ef6 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eca:	4a36      	ldr	r2, [pc, #216]	@ (8008fa4 <HAL_SAI_IRQHandler+0x36c>)
 8008ecc:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7f9 fd5b 	bl	8002990 <HAL_DMA_Abort_IT>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ee6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f859 	bl	8008fa8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d04c      	beq.n	8008f9a <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f06:	4a27      	ldr	r2, [pc, #156]	@ (8008fa4 <HAL_SAI_IRQHandler+0x36c>)
 8008f08:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7f9 fd3d 	bl	8002990 <HAL_DMA_Abort_IT>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d03e      	beq.n	8008f9a <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f83b 	bl	8008fa8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008f32:	e032      	b.n	8008f9a <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f44:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f826 	bl	8008fa8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008f5c:	e01d      	b.n	8008f9a <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d019      	beq.n	8008f9c <HAL_SAI_IRQHandler+0x364>
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f003 0310 	and.w	r3, r3, #16
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d014      	beq.n	8008f9c <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2210      	movs	r2, #16
 8008f78:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f80:	f043 0210 	orr.w	r2, r3, #16
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f80c 	bl	8008fa8 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8008f90:	e004      	b.n	8008f9c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008f92:	bf00      	nop
 8008f94:	e002      	b.n	8008f9c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008f96:	bf00      	nop
 8008f98:	e000      	b.n	8008f9c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008f9a:	bf00      	nop
}
 8008f9c:	bf00      	nop
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	0800917b 	.word	0x0800917b

08008fa8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d103      	bne.n	8008fda <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f043 0308 	orr.w	r3, r3, #8
 8008fd8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fde:	2b08      	cmp	r3, #8
 8008fe0:	d10b      	bne.n	8008ffa <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d003      	beq.n	8008ff2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d103      	bne.n	8008ffa <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f043 0310 	orr.w	r3, r3, #16
 8008ff8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d003      	beq.n	800900a <SAI_InterruptFlag+0x4e>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2b02      	cmp	r3, #2
 8009008:	d104      	bne.n	8009014 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	e003      	b.n	800901c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f043 0304 	orr.w	r3, r3, #4
 800901a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800901c:	68fb      	ldr	r3, [r7, #12]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
	...

0800902c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009034:	4b18      	ldr	r3, [pc, #96]	@ (8009098 <SAI_Disable+0x6c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a18      	ldr	r2, [pc, #96]	@ (800909c <SAI_Disable+0x70>)
 800903a:	fba2 2303 	umull	r2, r3, r2, r3
 800903e:	0b1b      	lsrs	r3, r3, #12
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009056:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10a      	bne.n	8009074 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009064:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	72fb      	strb	r3, [r7, #11]
      break;
 8009072:	e009      	b.n	8009088 <SAI_Disable+0x5c>
    }
    count--;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3b01      	subs	r3, #1
 8009078:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1e7      	bne.n	8009058 <SAI_Disable+0x2c>

  return status;
 8009088:	7afb      	ldrb	r3, [r7, #11]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	24000000 	.word	0x24000000
 800909c:	95cbec1b 	.word	0x95cbec1b

080090a0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090b6:	d01c      	beq.n	80090f2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80090c6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80090d0:	2100      	movs	r1, #0
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff ff72 	bl	8008fbc <SAI_InterruptFlag>
 80090d8:	4603      	mov	r3, r0
 80090da:	43d9      	mvns	r1, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691a      	ldr	r2, [r3, #16]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	400a      	ands	r2, r1
 80090e8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7f7 fc18 	bl	8000928 <HAL_SAI_RxCpltCallback>
#endif
}
 80090f8:	bf00      	nop
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f7f7 fc18 	bl	8000944 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8009114:	bf00      	nop
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009128:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7fa fda0 	bl	8003c70 <HAL_DMA_GetError>
 8009130:	4603      	mov	r3, r0
 8009132:	2b02      	cmp	r3, #2
 8009134:	d01d      	beq.n	8009172 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800913c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009154:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7ff ff68 	bl	800902c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff ff1b 	bl	8008fa8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009186:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009196:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2200      	movs	r2, #0
 800919e:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091a8:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091b0:	2b20      	cmp	r3, #32
 80091b2:	d00a      	beq.n	80091ca <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f7ff ff39 	bl	800902c <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f042 0208 	orr.w	r2, r2, #8
 80091c8:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f7ff fee4 	bl	8008fa8 <HAL_SAI_ErrorCallback>
#endif
}
 80091e0:	bf00      	nop
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e042      	b.n	8009280 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7f7 fe7f 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2224      	movs	r2, #36	@ 0x24
 8009216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0201 	bic.w	r2, r2, #1
 8009228:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fd90 	bl	8009d58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f825 	bl	8009288 <UART_SetConfig>
 800923e:	4603      	mov	r3, r0
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e01b      	b.n	8009280 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689a      	ldr	r2, [r3, #8]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fe0f 	bl	8009e9c <UART_CheckIdleState>
 800927e:	4603      	mov	r3, r0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800928c:	b092      	sub	sp, #72	@ 0x48
 800928e:	af00      	add	r7, sp, #0
 8009290:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	431a      	orrs	r2, r3
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	4bbe      	ldr	r3, [pc, #760]	@ (80095b0 <UART_SetConfig+0x328>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	6812      	ldr	r2, [r2, #0]
 80092be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092c0:	430b      	orrs	r3, r1
 80092c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4ab3      	ldr	r2, [pc, #716]	@ (80095b4 <UART_SetConfig+0x32c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d004      	beq.n	80092f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092f0:	4313      	orrs	r3, r2
 80092f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689a      	ldr	r2, [r3, #8]
 80092fa:	4baf      	ldr	r3, [pc, #700]	@ (80095b8 <UART_SetConfig+0x330>)
 80092fc:	4013      	ands	r3, r2
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	6812      	ldr	r2, [r2, #0]
 8009302:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009304:	430b      	orrs	r3, r1
 8009306:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930e:	f023 010f 	bic.w	r1, r3, #15
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4aa6      	ldr	r2, [pc, #664]	@ (80095bc <UART_SetConfig+0x334>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d177      	bne.n	8009418 <UART_SetConfig+0x190>
 8009328:	4ba5      	ldr	r3, [pc, #660]	@ (80095c0 <UART_SetConfig+0x338>)
 800932a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800932c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009330:	2b28      	cmp	r3, #40	@ 0x28
 8009332:	d86d      	bhi.n	8009410 <UART_SetConfig+0x188>
 8009334:	a201      	add	r2, pc, #4	@ (adr r2, 800933c <UART_SetConfig+0xb4>)
 8009336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933a:	bf00      	nop
 800933c:	080093e1 	.word	0x080093e1
 8009340:	08009411 	.word	0x08009411
 8009344:	08009411 	.word	0x08009411
 8009348:	08009411 	.word	0x08009411
 800934c:	08009411 	.word	0x08009411
 8009350:	08009411 	.word	0x08009411
 8009354:	08009411 	.word	0x08009411
 8009358:	08009411 	.word	0x08009411
 800935c:	080093e9 	.word	0x080093e9
 8009360:	08009411 	.word	0x08009411
 8009364:	08009411 	.word	0x08009411
 8009368:	08009411 	.word	0x08009411
 800936c:	08009411 	.word	0x08009411
 8009370:	08009411 	.word	0x08009411
 8009374:	08009411 	.word	0x08009411
 8009378:	08009411 	.word	0x08009411
 800937c:	080093f1 	.word	0x080093f1
 8009380:	08009411 	.word	0x08009411
 8009384:	08009411 	.word	0x08009411
 8009388:	08009411 	.word	0x08009411
 800938c:	08009411 	.word	0x08009411
 8009390:	08009411 	.word	0x08009411
 8009394:	08009411 	.word	0x08009411
 8009398:	08009411 	.word	0x08009411
 800939c:	080093f9 	.word	0x080093f9
 80093a0:	08009411 	.word	0x08009411
 80093a4:	08009411 	.word	0x08009411
 80093a8:	08009411 	.word	0x08009411
 80093ac:	08009411 	.word	0x08009411
 80093b0:	08009411 	.word	0x08009411
 80093b4:	08009411 	.word	0x08009411
 80093b8:	08009411 	.word	0x08009411
 80093bc:	08009401 	.word	0x08009401
 80093c0:	08009411 	.word	0x08009411
 80093c4:	08009411 	.word	0x08009411
 80093c8:	08009411 	.word	0x08009411
 80093cc:	08009411 	.word	0x08009411
 80093d0:	08009411 	.word	0x08009411
 80093d4:	08009411 	.word	0x08009411
 80093d8:	08009411 	.word	0x08009411
 80093dc:	08009409 	.word	0x08009409
 80093e0:	2301      	movs	r3, #1
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e222      	b.n	800982e <UART_SetConfig+0x5a6>
 80093e8:	2304      	movs	r3, #4
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e21e      	b.n	800982e <UART_SetConfig+0x5a6>
 80093f0:	2308      	movs	r3, #8
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e21a      	b.n	800982e <UART_SetConfig+0x5a6>
 80093f8:	2310      	movs	r3, #16
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e216      	b.n	800982e <UART_SetConfig+0x5a6>
 8009400:	2320      	movs	r3, #32
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e212      	b.n	800982e <UART_SetConfig+0x5a6>
 8009408:	2340      	movs	r3, #64	@ 0x40
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e20e      	b.n	800982e <UART_SetConfig+0x5a6>
 8009410:	2380      	movs	r3, #128	@ 0x80
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e20a      	b.n	800982e <UART_SetConfig+0x5a6>
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a69      	ldr	r2, [pc, #420]	@ (80095c4 <UART_SetConfig+0x33c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d130      	bne.n	8009484 <UART_SetConfig+0x1fc>
 8009422:	4b67      	ldr	r3, [pc, #412]	@ (80095c0 <UART_SetConfig+0x338>)
 8009424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	2b05      	cmp	r3, #5
 800942c:	d826      	bhi.n	800947c <UART_SetConfig+0x1f4>
 800942e:	a201      	add	r2, pc, #4	@ (adr r2, 8009434 <UART_SetConfig+0x1ac>)
 8009430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009434:	0800944d 	.word	0x0800944d
 8009438:	08009455 	.word	0x08009455
 800943c:	0800945d 	.word	0x0800945d
 8009440:	08009465 	.word	0x08009465
 8009444:	0800946d 	.word	0x0800946d
 8009448:	08009475 	.word	0x08009475
 800944c:	2300      	movs	r3, #0
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009452:	e1ec      	b.n	800982e <UART_SetConfig+0x5a6>
 8009454:	2304      	movs	r3, #4
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e1e8      	b.n	800982e <UART_SetConfig+0x5a6>
 800945c:	2308      	movs	r3, #8
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e1e4      	b.n	800982e <UART_SetConfig+0x5a6>
 8009464:	2310      	movs	r3, #16
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e1e0      	b.n	800982e <UART_SetConfig+0x5a6>
 800946c:	2320      	movs	r3, #32
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e1dc      	b.n	800982e <UART_SetConfig+0x5a6>
 8009474:	2340      	movs	r3, #64	@ 0x40
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e1d8      	b.n	800982e <UART_SetConfig+0x5a6>
 800947c:	2380      	movs	r3, #128	@ 0x80
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e1d4      	b.n	800982e <UART_SetConfig+0x5a6>
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a4f      	ldr	r2, [pc, #316]	@ (80095c8 <UART_SetConfig+0x340>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d130      	bne.n	80094f0 <UART_SetConfig+0x268>
 800948e:	4b4c      	ldr	r3, [pc, #304]	@ (80095c0 <UART_SetConfig+0x338>)
 8009490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009492:	f003 0307 	and.w	r3, r3, #7
 8009496:	2b05      	cmp	r3, #5
 8009498:	d826      	bhi.n	80094e8 <UART_SetConfig+0x260>
 800949a:	a201      	add	r2, pc, #4	@ (adr r2, 80094a0 <UART_SetConfig+0x218>)
 800949c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a0:	080094b9 	.word	0x080094b9
 80094a4:	080094c1 	.word	0x080094c1
 80094a8:	080094c9 	.word	0x080094c9
 80094ac:	080094d1 	.word	0x080094d1
 80094b0:	080094d9 	.word	0x080094d9
 80094b4:	080094e1 	.word	0x080094e1
 80094b8:	2300      	movs	r3, #0
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e1b6      	b.n	800982e <UART_SetConfig+0x5a6>
 80094c0:	2304      	movs	r3, #4
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e1b2      	b.n	800982e <UART_SetConfig+0x5a6>
 80094c8:	2308      	movs	r3, #8
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e1ae      	b.n	800982e <UART_SetConfig+0x5a6>
 80094d0:	2310      	movs	r3, #16
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e1aa      	b.n	800982e <UART_SetConfig+0x5a6>
 80094d8:	2320      	movs	r3, #32
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e1a6      	b.n	800982e <UART_SetConfig+0x5a6>
 80094e0:	2340      	movs	r3, #64	@ 0x40
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e1a2      	b.n	800982e <UART_SetConfig+0x5a6>
 80094e8:	2380      	movs	r3, #128	@ 0x80
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e19e      	b.n	800982e <UART_SetConfig+0x5a6>
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a35      	ldr	r2, [pc, #212]	@ (80095cc <UART_SetConfig+0x344>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d130      	bne.n	800955c <UART_SetConfig+0x2d4>
 80094fa:	4b31      	ldr	r3, [pc, #196]	@ (80095c0 <UART_SetConfig+0x338>)
 80094fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fe:	f003 0307 	and.w	r3, r3, #7
 8009502:	2b05      	cmp	r3, #5
 8009504:	d826      	bhi.n	8009554 <UART_SetConfig+0x2cc>
 8009506:	a201      	add	r2, pc, #4	@ (adr r2, 800950c <UART_SetConfig+0x284>)
 8009508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950c:	08009525 	.word	0x08009525
 8009510:	0800952d 	.word	0x0800952d
 8009514:	08009535 	.word	0x08009535
 8009518:	0800953d 	.word	0x0800953d
 800951c:	08009545 	.word	0x08009545
 8009520:	0800954d 	.word	0x0800954d
 8009524:	2300      	movs	r3, #0
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e180      	b.n	800982e <UART_SetConfig+0x5a6>
 800952c:	2304      	movs	r3, #4
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e17c      	b.n	800982e <UART_SetConfig+0x5a6>
 8009534:	2308      	movs	r3, #8
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e178      	b.n	800982e <UART_SetConfig+0x5a6>
 800953c:	2310      	movs	r3, #16
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e174      	b.n	800982e <UART_SetConfig+0x5a6>
 8009544:	2320      	movs	r3, #32
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e170      	b.n	800982e <UART_SetConfig+0x5a6>
 800954c:	2340      	movs	r3, #64	@ 0x40
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e16c      	b.n	800982e <UART_SetConfig+0x5a6>
 8009554:	2380      	movs	r3, #128	@ 0x80
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e168      	b.n	800982e <UART_SetConfig+0x5a6>
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1b      	ldr	r2, [pc, #108]	@ (80095d0 <UART_SetConfig+0x348>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d142      	bne.n	80095ec <UART_SetConfig+0x364>
 8009566:	4b16      	ldr	r3, [pc, #88]	@ (80095c0 <UART_SetConfig+0x338>)
 8009568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956a:	f003 0307 	and.w	r3, r3, #7
 800956e:	2b05      	cmp	r3, #5
 8009570:	d838      	bhi.n	80095e4 <UART_SetConfig+0x35c>
 8009572:	a201      	add	r2, pc, #4	@ (adr r2, 8009578 <UART_SetConfig+0x2f0>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	08009591 	.word	0x08009591
 800957c:	08009599 	.word	0x08009599
 8009580:	080095a1 	.word	0x080095a1
 8009584:	080095a9 	.word	0x080095a9
 8009588:	080095d5 	.word	0x080095d5
 800958c:	080095dd 	.word	0x080095dd
 8009590:	2300      	movs	r3, #0
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e14a      	b.n	800982e <UART_SetConfig+0x5a6>
 8009598:	2304      	movs	r3, #4
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e146      	b.n	800982e <UART_SetConfig+0x5a6>
 80095a0:	2308      	movs	r3, #8
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e142      	b.n	800982e <UART_SetConfig+0x5a6>
 80095a8:	2310      	movs	r3, #16
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e13e      	b.n	800982e <UART_SetConfig+0x5a6>
 80095b0:	cfff69f3 	.word	0xcfff69f3
 80095b4:	58000c00 	.word	0x58000c00
 80095b8:	11fff4ff 	.word	0x11fff4ff
 80095bc:	40011000 	.word	0x40011000
 80095c0:	58024400 	.word	0x58024400
 80095c4:	40004400 	.word	0x40004400
 80095c8:	40004800 	.word	0x40004800
 80095cc:	40004c00 	.word	0x40004c00
 80095d0:	40005000 	.word	0x40005000
 80095d4:	2320      	movs	r3, #32
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e128      	b.n	800982e <UART_SetConfig+0x5a6>
 80095dc:	2340      	movs	r3, #64	@ 0x40
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e124      	b.n	800982e <UART_SetConfig+0x5a6>
 80095e4:	2380      	movs	r3, #128	@ 0x80
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e120      	b.n	800982e <UART_SetConfig+0x5a6>
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4acb      	ldr	r2, [pc, #812]	@ (8009920 <UART_SetConfig+0x698>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d176      	bne.n	80096e4 <UART_SetConfig+0x45c>
 80095f6:	4bcb      	ldr	r3, [pc, #812]	@ (8009924 <UART_SetConfig+0x69c>)
 80095f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095fe:	2b28      	cmp	r3, #40	@ 0x28
 8009600:	d86c      	bhi.n	80096dc <UART_SetConfig+0x454>
 8009602:	a201      	add	r2, pc, #4	@ (adr r2, 8009608 <UART_SetConfig+0x380>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	080096ad 	.word	0x080096ad
 800960c:	080096dd 	.word	0x080096dd
 8009610:	080096dd 	.word	0x080096dd
 8009614:	080096dd 	.word	0x080096dd
 8009618:	080096dd 	.word	0x080096dd
 800961c:	080096dd 	.word	0x080096dd
 8009620:	080096dd 	.word	0x080096dd
 8009624:	080096dd 	.word	0x080096dd
 8009628:	080096b5 	.word	0x080096b5
 800962c:	080096dd 	.word	0x080096dd
 8009630:	080096dd 	.word	0x080096dd
 8009634:	080096dd 	.word	0x080096dd
 8009638:	080096dd 	.word	0x080096dd
 800963c:	080096dd 	.word	0x080096dd
 8009640:	080096dd 	.word	0x080096dd
 8009644:	080096dd 	.word	0x080096dd
 8009648:	080096bd 	.word	0x080096bd
 800964c:	080096dd 	.word	0x080096dd
 8009650:	080096dd 	.word	0x080096dd
 8009654:	080096dd 	.word	0x080096dd
 8009658:	080096dd 	.word	0x080096dd
 800965c:	080096dd 	.word	0x080096dd
 8009660:	080096dd 	.word	0x080096dd
 8009664:	080096dd 	.word	0x080096dd
 8009668:	080096c5 	.word	0x080096c5
 800966c:	080096dd 	.word	0x080096dd
 8009670:	080096dd 	.word	0x080096dd
 8009674:	080096dd 	.word	0x080096dd
 8009678:	080096dd 	.word	0x080096dd
 800967c:	080096dd 	.word	0x080096dd
 8009680:	080096dd 	.word	0x080096dd
 8009684:	080096dd 	.word	0x080096dd
 8009688:	080096cd 	.word	0x080096cd
 800968c:	080096dd 	.word	0x080096dd
 8009690:	080096dd 	.word	0x080096dd
 8009694:	080096dd 	.word	0x080096dd
 8009698:	080096dd 	.word	0x080096dd
 800969c:	080096dd 	.word	0x080096dd
 80096a0:	080096dd 	.word	0x080096dd
 80096a4:	080096dd 	.word	0x080096dd
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	2301      	movs	r3, #1
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e0bc      	b.n	800982e <UART_SetConfig+0x5a6>
 80096b4:	2304      	movs	r3, #4
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e0b8      	b.n	800982e <UART_SetConfig+0x5a6>
 80096bc:	2308      	movs	r3, #8
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e0b4      	b.n	800982e <UART_SetConfig+0x5a6>
 80096c4:	2310      	movs	r3, #16
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e0b0      	b.n	800982e <UART_SetConfig+0x5a6>
 80096cc:	2320      	movs	r3, #32
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e0ac      	b.n	800982e <UART_SetConfig+0x5a6>
 80096d4:	2340      	movs	r3, #64	@ 0x40
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e0a8      	b.n	800982e <UART_SetConfig+0x5a6>
 80096dc:	2380      	movs	r3, #128	@ 0x80
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e0a4      	b.n	800982e <UART_SetConfig+0x5a6>
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a8f      	ldr	r2, [pc, #572]	@ (8009928 <UART_SetConfig+0x6a0>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d130      	bne.n	8009750 <UART_SetConfig+0x4c8>
 80096ee:	4b8d      	ldr	r3, [pc, #564]	@ (8009924 <UART_SetConfig+0x69c>)
 80096f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f2:	f003 0307 	and.w	r3, r3, #7
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	d826      	bhi.n	8009748 <UART_SetConfig+0x4c0>
 80096fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009700 <UART_SetConfig+0x478>)
 80096fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009700:	08009719 	.word	0x08009719
 8009704:	08009721 	.word	0x08009721
 8009708:	08009729 	.word	0x08009729
 800970c:	08009731 	.word	0x08009731
 8009710:	08009739 	.word	0x08009739
 8009714:	08009741 	.word	0x08009741
 8009718:	2300      	movs	r3, #0
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e086      	b.n	800982e <UART_SetConfig+0x5a6>
 8009720:	2304      	movs	r3, #4
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e082      	b.n	800982e <UART_SetConfig+0x5a6>
 8009728:	2308      	movs	r3, #8
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e07e      	b.n	800982e <UART_SetConfig+0x5a6>
 8009730:	2310      	movs	r3, #16
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e07a      	b.n	800982e <UART_SetConfig+0x5a6>
 8009738:	2320      	movs	r3, #32
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e076      	b.n	800982e <UART_SetConfig+0x5a6>
 8009740:	2340      	movs	r3, #64	@ 0x40
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e072      	b.n	800982e <UART_SetConfig+0x5a6>
 8009748:	2380      	movs	r3, #128	@ 0x80
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e06e      	b.n	800982e <UART_SetConfig+0x5a6>
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a75      	ldr	r2, [pc, #468]	@ (800992c <UART_SetConfig+0x6a4>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d130      	bne.n	80097bc <UART_SetConfig+0x534>
 800975a:	4b72      	ldr	r3, [pc, #456]	@ (8009924 <UART_SetConfig+0x69c>)
 800975c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	2b05      	cmp	r3, #5
 8009764:	d826      	bhi.n	80097b4 <UART_SetConfig+0x52c>
 8009766:	a201      	add	r2, pc, #4	@ (adr r2, 800976c <UART_SetConfig+0x4e4>)
 8009768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976c:	08009785 	.word	0x08009785
 8009770:	0800978d 	.word	0x0800978d
 8009774:	08009795 	.word	0x08009795
 8009778:	0800979d 	.word	0x0800979d
 800977c:	080097a5 	.word	0x080097a5
 8009780:	080097ad 	.word	0x080097ad
 8009784:	2300      	movs	r3, #0
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e050      	b.n	800982e <UART_SetConfig+0x5a6>
 800978c:	2304      	movs	r3, #4
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e04c      	b.n	800982e <UART_SetConfig+0x5a6>
 8009794:	2308      	movs	r3, #8
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e048      	b.n	800982e <UART_SetConfig+0x5a6>
 800979c:	2310      	movs	r3, #16
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e044      	b.n	800982e <UART_SetConfig+0x5a6>
 80097a4:	2320      	movs	r3, #32
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e040      	b.n	800982e <UART_SetConfig+0x5a6>
 80097ac:	2340      	movs	r3, #64	@ 0x40
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e03c      	b.n	800982e <UART_SetConfig+0x5a6>
 80097b4:	2380      	movs	r3, #128	@ 0x80
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e038      	b.n	800982e <UART_SetConfig+0x5a6>
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a5b      	ldr	r2, [pc, #364]	@ (8009930 <UART_SetConfig+0x6a8>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d130      	bne.n	8009828 <UART_SetConfig+0x5a0>
 80097c6:	4b57      	ldr	r3, [pc, #348]	@ (8009924 <UART_SetConfig+0x69c>)
 80097c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ca:	f003 0307 	and.w	r3, r3, #7
 80097ce:	2b05      	cmp	r3, #5
 80097d0:	d826      	bhi.n	8009820 <UART_SetConfig+0x598>
 80097d2:	a201      	add	r2, pc, #4	@ (adr r2, 80097d8 <UART_SetConfig+0x550>)
 80097d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d8:	080097f1 	.word	0x080097f1
 80097dc:	080097f9 	.word	0x080097f9
 80097e0:	08009801 	.word	0x08009801
 80097e4:	08009809 	.word	0x08009809
 80097e8:	08009811 	.word	0x08009811
 80097ec:	08009819 	.word	0x08009819
 80097f0:	2302      	movs	r3, #2
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e01a      	b.n	800982e <UART_SetConfig+0x5a6>
 80097f8:	2304      	movs	r3, #4
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e016      	b.n	800982e <UART_SetConfig+0x5a6>
 8009800:	2308      	movs	r3, #8
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e012      	b.n	800982e <UART_SetConfig+0x5a6>
 8009808:	2310      	movs	r3, #16
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e00e      	b.n	800982e <UART_SetConfig+0x5a6>
 8009810:	2320      	movs	r3, #32
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e00a      	b.n	800982e <UART_SetConfig+0x5a6>
 8009818:	2340      	movs	r3, #64	@ 0x40
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e006      	b.n	800982e <UART_SetConfig+0x5a6>
 8009820:	2380      	movs	r3, #128	@ 0x80
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e002      	b.n	800982e <UART_SetConfig+0x5a6>
 8009828:	2380      	movs	r3, #128	@ 0x80
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a3f      	ldr	r2, [pc, #252]	@ (8009930 <UART_SetConfig+0x6a8>)
 8009834:	4293      	cmp	r3, r2
 8009836:	f040 80f8 	bne.w	8009a2a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800983a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800983e:	2b20      	cmp	r3, #32
 8009840:	dc46      	bgt.n	80098d0 <UART_SetConfig+0x648>
 8009842:	2b02      	cmp	r3, #2
 8009844:	f2c0 8082 	blt.w	800994c <UART_SetConfig+0x6c4>
 8009848:	3b02      	subs	r3, #2
 800984a:	2b1e      	cmp	r3, #30
 800984c:	d87e      	bhi.n	800994c <UART_SetConfig+0x6c4>
 800984e:	a201      	add	r2, pc, #4	@ (adr r2, 8009854 <UART_SetConfig+0x5cc>)
 8009850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009854:	080098d7 	.word	0x080098d7
 8009858:	0800994d 	.word	0x0800994d
 800985c:	080098df 	.word	0x080098df
 8009860:	0800994d 	.word	0x0800994d
 8009864:	0800994d 	.word	0x0800994d
 8009868:	0800994d 	.word	0x0800994d
 800986c:	080098ef 	.word	0x080098ef
 8009870:	0800994d 	.word	0x0800994d
 8009874:	0800994d 	.word	0x0800994d
 8009878:	0800994d 	.word	0x0800994d
 800987c:	0800994d 	.word	0x0800994d
 8009880:	0800994d 	.word	0x0800994d
 8009884:	0800994d 	.word	0x0800994d
 8009888:	0800994d 	.word	0x0800994d
 800988c:	080098ff 	.word	0x080098ff
 8009890:	0800994d 	.word	0x0800994d
 8009894:	0800994d 	.word	0x0800994d
 8009898:	0800994d 	.word	0x0800994d
 800989c:	0800994d 	.word	0x0800994d
 80098a0:	0800994d 	.word	0x0800994d
 80098a4:	0800994d 	.word	0x0800994d
 80098a8:	0800994d 	.word	0x0800994d
 80098ac:	0800994d 	.word	0x0800994d
 80098b0:	0800994d 	.word	0x0800994d
 80098b4:	0800994d 	.word	0x0800994d
 80098b8:	0800994d 	.word	0x0800994d
 80098bc:	0800994d 	.word	0x0800994d
 80098c0:	0800994d 	.word	0x0800994d
 80098c4:	0800994d 	.word	0x0800994d
 80098c8:	0800994d 	.word	0x0800994d
 80098cc:	0800993f 	.word	0x0800993f
 80098d0:	2b40      	cmp	r3, #64	@ 0x40
 80098d2:	d037      	beq.n	8009944 <UART_SetConfig+0x6bc>
 80098d4:	e03a      	b.n	800994c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098d6:	f7fe f86d 	bl	80079b4 <HAL_RCCEx_GetD3PCLK1Freq>
 80098da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098dc:	e03c      	b.n	8009958 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fe f87c 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ec:	e034      	b.n	8009958 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ee:	f107 0318 	add.w	r3, r7, #24
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe f9c8 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098fc:	e02c      	b.n	8009958 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098fe:	4b09      	ldr	r3, [pc, #36]	@ (8009924 <UART_SetConfig+0x69c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d016      	beq.n	8009938 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800990a:	4b06      	ldr	r3, [pc, #24]	@ (8009924 <UART_SetConfig+0x69c>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	08db      	lsrs	r3, r3, #3
 8009910:	f003 0303 	and.w	r3, r3, #3
 8009914:	4a07      	ldr	r2, [pc, #28]	@ (8009934 <UART_SetConfig+0x6ac>)
 8009916:	fa22 f303 	lsr.w	r3, r2, r3
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800991c:	e01c      	b.n	8009958 <UART_SetConfig+0x6d0>
 800991e:	bf00      	nop
 8009920:	40011400 	.word	0x40011400
 8009924:	58024400 	.word	0x58024400
 8009928:	40007800 	.word	0x40007800
 800992c:	40007c00 	.word	0x40007c00
 8009930:	58000c00 	.word	0x58000c00
 8009934:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009938:	4b9d      	ldr	r3, [pc, #628]	@ (8009bb0 <UART_SetConfig+0x928>)
 800993a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800993c:	e00c      	b.n	8009958 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800993e:	4b9d      	ldr	r3, [pc, #628]	@ (8009bb4 <UART_SetConfig+0x92c>)
 8009940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009942:	e009      	b.n	8009958 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009944:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800994a:	e005      	b.n	8009958 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009956:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 81de 	beq.w	8009d1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009964:	4a94      	ldr	r2, [pc, #592]	@ (8009bb8 <UART_SetConfig+0x930>)
 8009966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800996a:	461a      	mov	r2, r3
 800996c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800996e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009972:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	4613      	mov	r3, r2
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	4413      	add	r3, r2
 800997e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009980:	429a      	cmp	r2, r3
 8009982:	d305      	bcc.n	8009990 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800998a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800998c:	429a      	cmp	r2, r3
 800998e:	d903      	bls.n	8009998 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009996:	e1c1      	b.n	8009d1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800999a:	2200      	movs	r2, #0
 800999c:	60bb      	str	r3, [r7, #8]
 800999e:	60fa      	str	r2, [r7, #12]
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a4:	4a84      	ldr	r2, [pc, #528]	@ (8009bb8 <UART_SetConfig+0x930>)
 80099a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	2200      	movs	r2, #0
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	607a      	str	r2, [r7, #4]
 80099b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099ba:	f7f6 fce9 	bl	8000390 <__aeabi_uldivmod>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4610      	mov	r0, r2
 80099c4:	4619      	mov	r1, r3
 80099c6:	f04f 0200 	mov.w	r2, #0
 80099ca:	f04f 0300 	mov.w	r3, #0
 80099ce:	020b      	lsls	r3, r1, #8
 80099d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099d4:	0202      	lsls	r2, r0, #8
 80099d6:	6979      	ldr	r1, [r7, #20]
 80099d8:	6849      	ldr	r1, [r1, #4]
 80099da:	0849      	lsrs	r1, r1, #1
 80099dc:	2000      	movs	r0, #0
 80099de:	460c      	mov	r4, r1
 80099e0:	4605      	mov	r5, r0
 80099e2:	eb12 0804 	adds.w	r8, r2, r4
 80099e6:	eb43 0905 	adc.w	r9, r3, r5
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	469a      	mov	sl, r3
 80099f2:	4693      	mov	fp, r2
 80099f4:	4652      	mov	r2, sl
 80099f6:	465b      	mov	r3, fp
 80099f8:	4640      	mov	r0, r8
 80099fa:	4649      	mov	r1, r9
 80099fc:	f7f6 fcc8 	bl	8000390 <__aeabi_uldivmod>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4613      	mov	r3, r2
 8009a06:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a0e:	d308      	bcc.n	8009a22 <UART_SetConfig+0x79a>
 8009a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a16:	d204      	bcs.n	8009a22 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a1e:	60da      	str	r2, [r3, #12]
 8009a20:	e17c      	b.n	8009d1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a28:	e178      	b.n	8009d1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a32:	f040 80c5 	bne.w	8009bc0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009a36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	dc48      	bgt.n	8009ad0 <UART_SetConfig+0x848>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	db7b      	blt.n	8009b3a <UART_SetConfig+0x8b2>
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	d879      	bhi.n	8009b3a <UART_SetConfig+0x8b2>
 8009a46:	a201      	add	r2, pc, #4	@ (adr r2, 8009a4c <UART_SetConfig+0x7c4>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009ad7 	.word	0x08009ad7
 8009a50:	08009adf 	.word	0x08009adf
 8009a54:	08009b3b 	.word	0x08009b3b
 8009a58:	08009b3b 	.word	0x08009b3b
 8009a5c:	08009ae7 	.word	0x08009ae7
 8009a60:	08009b3b 	.word	0x08009b3b
 8009a64:	08009b3b 	.word	0x08009b3b
 8009a68:	08009b3b 	.word	0x08009b3b
 8009a6c:	08009af7 	.word	0x08009af7
 8009a70:	08009b3b 	.word	0x08009b3b
 8009a74:	08009b3b 	.word	0x08009b3b
 8009a78:	08009b3b 	.word	0x08009b3b
 8009a7c:	08009b3b 	.word	0x08009b3b
 8009a80:	08009b3b 	.word	0x08009b3b
 8009a84:	08009b3b 	.word	0x08009b3b
 8009a88:	08009b3b 	.word	0x08009b3b
 8009a8c:	08009b07 	.word	0x08009b07
 8009a90:	08009b3b 	.word	0x08009b3b
 8009a94:	08009b3b 	.word	0x08009b3b
 8009a98:	08009b3b 	.word	0x08009b3b
 8009a9c:	08009b3b 	.word	0x08009b3b
 8009aa0:	08009b3b 	.word	0x08009b3b
 8009aa4:	08009b3b 	.word	0x08009b3b
 8009aa8:	08009b3b 	.word	0x08009b3b
 8009aac:	08009b3b 	.word	0x08009b3b
 8009ab0:	08009b3b 	.word	0x08009b3b
 8009ab4:	08009b3b 	.word	0x08009b3b
 8009ab8:	08009b3b 	.word	0x08009b3b
 8009abc:	08009b3b 	.word	0x08009b3b
 8009ac0:	08009b3b 	.word	0x08009b3b
 8009ac4:	08009b3b 	.word	0x08009b3b
 8009ac8:	08009b3b 	.word	0x08009b3b
 8009acc:	08009b2d 	.word	0x08009b2d
 8009ad0:	2b40      	cmp	r3, #64	@ 0x40
 8009ad2:	d02e      	beq.n	8009b32 <UART_SetConfig+0x8aa>
 8009ad4:	e031      	b.n	8009b3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ad6:	f7fb ff77 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 8009ada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009adc:	e033      	b.n	8009b46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ade:	f7fb ff89 	bl	80059f4 <HAL_RCC_GetPCLK2Freq>
 8009ae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ae4:	e02f      	b.n	8009b46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fd ff78 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009af4:	e027      	b.n	8009b46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009af6:	f107 0318 	add.w	r3, r7, #24
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe f8c4 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b04:	e01f      	b.n	8009b46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b06:	4b2d      	ldr	r3, [pc, #180]	@ (8009bbc <UART_SetConfig+0x934>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0320 	and.w	r3, r3, #32
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b12:	4b2a      	ldr	r3, [pc, #168]	@ (8009bbc <UART_SetConfig+0x934>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	08db      	lsrs	r3, r3, #3
 8009b18:	f003 0303 	and.w	r3, r3, #3
 8009b1c:	4a24      	ldr	r2, [pc, #144]	@ (8009bb0 <UART_SetConfig+0x928>)
 8009b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b24:	e00f      	b.n	8009b46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b26:	4b22      	ldr	r3, [pc, #136]	@ (8009bb0 <UART_SetConfig+0x928>)
 8009b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b2a:	e00c      	b.n	8009b46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b2c:	4b21      	ldr	r3, [pc, #132]	@ (8009bb4 <UART_SetConfig+0x92c>)
 8009b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b30:	e009      	b.n	8009b46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b38:	e005      	b.n	8009b46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 80e7 	beq.w	8009d1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b52:	4a19      	ldr	r2, [pc, #100]	@ (8009bb8 <UART_SetConfig+0x930>)
 8009b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b60:	005a      	lsls	r2, r3, #1
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	085b      	lsrs	r3, r3, #1
 8009b68:	441a      	add	r2, r3
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b76:	2b0f      	cmp	r3, #15
 8009b78:	d916      	bls.n	8009ba8 <UART_SetConfig+0x920>
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b80:	d212      	bcs.n	8009ba8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	f023 030f 	bic.w	r3, r3, #15
 8009b8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8e:	085b      	lsrs	r3, r3, #1
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	f003 0307 	and.w	r3, r3, #7
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009ba4:	60da      	str	r2, [r3, #12]
 8009ba6:	e0b9      	b.n	8009d1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bae:	e0b5      	b.n	8009d1c <UART_SetConfig+0xa94>
 8009bb0:	03d09000 	.word	0x03d09000
 8009bb4:	003d0900 	.word	0x003d0900
 8009bb8:	0800cff4 	.word	0x0800cff4
 8009bbc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bc0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bc4:	2b20      	cmp	r3, #32
 8009bc6:	dc49      	bgt.n	8009c5c <UART_SetConfig+0x9d4>
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	db7c      	blt.n	8009cc6 <UART_SetConfig+0xa3e>
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	d87a      	bhi.n	8009cc6 <UART_SetConfig+0xa3e>
 8009bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd8 <UART_SetConfig+0x950>)
 8009bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd6:	bf00      	nop
 8009bd8:	08009c63 	.word	0x08009c63
 8009bdc:	08009c6b 	.word	0x08009c6b
 8009be0:	08009cc7 	.word	0x08009cc7
 8009be4:	08009cc7 	.word	0x08009cc7
 8009be8:	08009c73 	.word	0x08009c73
 8009bec:	08009cc7 	.word	0x08009cc7
 8009bf0:	08009cc7 	.word	0x08009cc7
 8009bf4:	08009cc7 	.word	0x08009cc7
 8009bf8:	08009c83 	.word	0x08009c83
 8009bfc:	08009cc7 	.word	0x08009cc7
 8009c00:	08009cc7 	.word	0x08009cc7
 8009c04:	08009cc7 	.word	0x08009cc7
 8009c08:	08009cc7 	.word	0x08009cc7
 8009c0c:	08009cc7 	.word	0x08009cc7
 8009c10:	08009cc7 	.word	0x08009cc7
 8009c14:	08009cc7 	.word	0x08009cc7
 8009c18:	08009c93 	.word	0x08009c93
 8009c1c:	08009cc7 	.word	0x08009cc7
 8009c20:	08009cc7 	.word	0x08009cc7
 8009c24:	08009cc7 	.word	0x08009cc7
 8009c28:	08009cc7 	.word	0x08009cc7
 8009c2c:	08009cc7 	.word	0x08009cc7
 8009c30:	08009cc7 	.word	0x08009cc7
 8009c34:	08009cc7 	.word	0x08009cc7
 8009c38:	08009cc7 	.word	0x08009cc7
 8009c3c:	08009cc7 	.word	0x08009cc7
 8009c40:	08009cc7 	.word	0x08009cc7
 8009c44:	08009cc7 	.word	0x08009cc7
 8009c48:	08009cc7 	.word	0x08009cc7
 8009c4c:	08009cc7 	.word	0x08009cc7
 8009c50:	08009cc7 	.word	0x08009cc7
 8009c54:	08009cc7 	.word	0x08009cc7
 8009c58:	08009cb9 	.word	0x08009cb9
 8009c5c:	2b40      	cmp	r3, #64	@ 0x40
 8009c5e:	d02e      	beq.n	8009cbe <UART_SetConfig+0xa36>
 8009c60:	e031      	b.n	8009cc6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c62:	f7fb feb1 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 8009c66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c68:	e033      	b.n	8009cd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c6a:	f7fb fec3 	bl	80059f4 <HAL_RCC_GetPCLK2Freq>
 8009c6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c70:	e02f      	b.n	8009cd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fd feb2 	bl	80079e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c80:	e027      	b.n	8009cd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c82:	f107 0318 	add.w	r3, r7, #24
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fd fffe 	bl	8007c88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c90:	e01f      	b.n	8009cd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c92:	4b2d      	ldr	r3, [pc, #180]	@ (8009d48 <UART_SetConfig+0xac0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8009d48 <UART_SetConfig+0xac0>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	08db      	lsrs	r3, r3, #3
 8009ca4:	f003 0303 	and.w	r3, r3, #3
 8009ca8:	4a28      	ldr	r2, [pc, #160]	@ (8009d4c <UART_SetConfig+0xac4>)
 8009caa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cb0:	e00f      	b.n	8009cd2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009cb2:	4b26      	ldr	r3, [pc, #152]	@ (8009d4c <UART_SetConfig+0xac4>)
 8009cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb6:	e00c      	b.n	8009cd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cb8:	4b25      	ldr	r3, [pc, #148]	@ (8009d50 <UART_SetConfig+0xac8>)
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cbc:	e009      	b.n	8009cd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc4:	e005      	b.n	8009cd2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009cd0:	bf00      	nop
    }

    if (pclk != 0U)
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d021      	beq.n	8009d1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d54 <UART_SetConfig+0xacc>)
 8009cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	085b      	lsrs	r3, r3, #1
 8009cf0:	441a      	add	r2, r3
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfe:	2b0f      	cmp	r3, #15
 8009d00:	d909      	bls.n	8009d16 <UART_SetConfig+0xa8e>
 8009d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d08:	d205      	bcs.n	8009d16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	60da      	str	r2, [r3, #12]
 8009d14:	e002      	b.n	8009d1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2200      	movs	r2, #0
 8009d36:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d38:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3748      	adds	r7, #72	@ 0x48
 8009d40:	46bd      	mov	sp, r7
 8009d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d46:	bf00      	nop
 8009d48:	58024400 	.word	0x58024400
 8009d4c:	03d09000 	.word	0x03d09000
 8009d50:	003d0900 	.word	0x003d0900
 8009d54:	0800cff4 	.word	0x0800cff4

08009d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d64:	f003 0308 	and.w	r3, r3, #8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00a      	beq.n	8009d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dec:	f003 0310 	and.w	r3, r3, #16
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00a      	beq.n	8009e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01a      	beq.n	8009e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e56:	d10a      	bne.n	8009e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	605a      	str	r2, [r3, #4]
  }
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b098      	sub	sp, #96	@ 0x60
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009eac:	f7f7 fac8 	bl	8001440 <HAL_GetTick>
 8009eb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0308 	and.w	r3, r3, #8
 8009ebc:	2b08      	cmp	r3, #8
 8009ebe:	d12f      	bne.n	8009f20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ec0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f88e 	bl	8009ff0 <UART_WaitOnFlagUntilTimeout>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d022      	beq.n	8009f20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee2:	e853 3f00 	ldrex	r3, [r3]
 8009ee6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eee:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009efa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f00:	e841 2300 	strex	r3, r2, [r1]
 8009f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1e6      	bne.n	8009eda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2220      	movs	r2, #32
 8009f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e063      	b.n	8009fe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0304 	and.w	r3, r3, #4
 8009f2a:	2b04      	cmp	r3, #4
 8009f2c:	d149      	bne.n	8009fc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f36:	2200      	movs	r2, #0
 8009f38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f857 	bl	8009ff0 <UART_WaitOnFlagUntilTimeout>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d03c      	beq.n	8009fc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	623b      	str	r3, [r7, #32]
   return(result);
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	461a      	mov	r2, r3
 8009f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f66:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f6e:	e841 2300 	strex	r3, r2, [r1]
 8009f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e6      	bne.n	8009f48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3308      	adds	r3, #8
 8009f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3308      	adds	r3, #8
 8009f98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f9a:	61fa      	str	r2, [r7, #28]
 8009f9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	69b9      	ldr	r1, [r7, #24]
 8009fa0:	69fa      	ldr	r2, [r7, #28]
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e5      	bne.n	8009f7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e012      	b.n	8009fe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3758      	adds	r7, #88	@ 0x58
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a000:	e04f      	b.n	800a0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a008:	d04b      	beq.n	800a0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a00a:	f7f7 fa19 	bl	8001440 <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	69ba      	ldr	r2, [r7, #24]
 800a016:	429a      	cmp	r2, r3
 800a018:	d302      	bcc.n	800a020 <UART_WaitOnFlagUntilTimeout+0x30>
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e04e      	b.n	800a0c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d037      	beq.n	800a0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2b80      	cmp	r3, #128	@ 0x80
 800a036:	d034      	beq.n	800a0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b40      	cmp	r3, #64	@ 0x40
 800a03c:	d031      	beq.n	800a0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	f003 0308 	and.w	r3, r3, #8
 800a048:	2b08      	cmp	r3, #8
 800a04a:	d110      	bne.n	800a06e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2208      	movs	r2, #8
 800a052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 f839 	bl	800a0cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2208      	movs	r2, #8
 800a05e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e029      	b.n	800a0c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a07c:	d111      	bne.n	800a0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 f81f 	bl	800a0cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2220      	movs	r2, #32
 800a092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e00f      	b.n	800a0c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	69da      	ldr	r2, [r3, #28]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	bf0c      	ite	eq
 800a0b2:	2301      	moveq	r3, #1
 800a0b4:	2300      	movne	r3, #0
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d0a0      	beq.n	800a002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b095      	sub	sp, #84	@ 0x54
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e6      	bne.n	800a0d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3308      	adds	r3, #8
 800a10c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	61fb      	str	r3, [r7, #28]
   return(result);
 800a116:	69fa      	ldr	r2, [r7, #28]
 800a118:	4b1e      	ldr	r3, [pc, #120]	@ (800a194 <UART_EndRxTransfer+0xc8>)
 800a11a:	4013      	ands	r3, r2
 800a11c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3308      	adds	r3, #8
 800a124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a128:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a12c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e5      	bne.n	800a106 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d118      	bne.n	800a174 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	e853 3f00 	ldrex	r3, [r3]
 800a14e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f023 0310 	bic.w	r3, r3, #16
 800a156:	647b      	str	r3, [r7, #68]	@ 0x44
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
 800a15e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a164:	6979      	ldr	r1, [r7, #20]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	e841 2300 	strex	r3, r2, [r1]
 800a16c:	613b      	str	r3, [r7, #16]
   return(result);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e6      	bne.n	800a142 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2220      	movs	r2, #32
 800a178:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a188:	bf00      	nop
 800a18a:	3754      	adds	r7, #84	@ 0x54
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	effffffe 	.word	0xeffffffe

0800a198 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d101      	bne.n	800a1ae <HAL_UARTEx_DisableFifoMode+0x16>
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	e027      	b.n	800a1fe <HAL_UARTEx_DisableFifoMode+0x66>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2224      	movs	r2, #36	@ 0x24
 800a1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 0201 	bic.w	r2, r2, #1
 800a1d4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a1dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d101      	bne.n	800a222 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a21e:	2302      	movs	r3, #2
 800a220:	e02d      	b.n	800a27e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2224      	movs	r2, #36	@ 0x24
 800a22e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 0201 	bic.w	r2, r2, #1
 800a248:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	683a      	ldr	r2, [r7, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f850 	bl	800a304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2220      	movs	r2, #32
 800a270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a296:	2b01      	cmp	r3, #1
 800a298:	d101      	bne.n	800a29e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a29a:	2302      	movs	r3, #2
 800a29c:	e02d      	b.n	800a2fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2224      	movs	r2, #36	@ 0x24
 800a2aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f022 0201 	bic.w	r2, r2, #1
 800a2c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f812 	bl	800a304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
	...

0800a304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a310:	2b00      	cmp	r3, #0
 800a312:	d108      	bne.n	800a326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a324:	e031      	b.n	800a38a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a326:	2310      	movs	r3, #16
 800a328:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a32a:	2310      	movs	r3, #16
 800a32c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	0e5b      	lsrs	r3, r3, #25
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f003 0307 	and.w	r3, r3, #7
 800a33c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	0f5b      	lsrs	r3, r3, #29
 800a346:	b2db      	uxtb	r3, r3
 800a348:	f003 0307 	and.w	r3, r3, #7
 800a34c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a34e:	7bbb      	ldrb	r3, [r7, #14]
 800a350:	7b3a      	ldrb	r2, [r7, #12]
 800a352:	4911      	ldr	r1, [pc, #68]	@ (800a398 <UARTEx_SetNbDataToProcess+0x94>)
 800a354:	5c8a      	ldrb	r2, [r1, r2]
 800a356:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a35a:	7b3a      	ldrb	r2, [r7, #12]
 800a35c:	490f      	ldr	r1, [pc, #60]	@ (800a39c <UARTEx_SetNbDataToProcess+0x98>)
 800a35e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a360:	fb93 f3f2 	sdiv	r3, r3, r2
 800a364:	b29a      	uxth	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	7b7a      	ldrb	r2, [r7, #13]
 800a370:	4909      	ldr	r1, [pc, #36]	@ (800a398 <UARTEx_SetNbDataToProcess+0x94>)
 800a372:	5c8a      	ldrb	r2, [r1, r2]
 800a374:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a378:	7b7a      	ldrb	r2, [r7, #13]
 800a37a:	4908      	ldr	r1, [pc, #32]	@ (800a39c <UARTEx_SetNbDataToProcess+0x98>)
 800a37c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a37e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a382:	b29a      	uxth	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a38a:	bf00      	nop
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	0800d00c 	.word	0x0800d00c
 800a39c:	0800d014 	.word	0x0800d014

0800a3a0 <log10f>:
 800a3a0:	b508      	push	{r3, lr}
 800a3a2:	ed2d 8b02 	vpush	{d8}
 800a3a6:	eeb0 8a40 	vmov.f32	s16, s0
 800a3aa:	f000 f84f 	bl	800a44c <__ieee754_log10f>
 800a3ae:	eeb4 8a48 	vcmp.f32	s16, s16
 800a3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b6:	d60f      	bvs.n	800a3d8 <log10f+0x38>
 800a3b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c0:	d80a      	bhi.n	800a3d8 <log10f+0x38>
 800a3c2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ca:	d108      	bne.n	800a3de <log10f+0x3e>
 800a3cc:	f000 fe9c 	bl	800b108 <__errno>
 800a3d0:	2322      	movs	r3, #34	@ 0x22
 800a3d2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a3f4 <log10f+0x54>
 800a3d6:	6003      	str	r3, [r0, #0]
 800a3d8:	ecbd 8b02 	vpop	{d8}
 800a3dc:	bd08      	pop	{r3, pc}
 800a3de:	f000 fe93 	bl	800b108 <__errno>
 800a3e2:	ecbd 8b02 	vpop	{d8}
 800a3e6:	2321      	movs	r3, #33	@ 0x21
 800a3e8:	6003      	str	r3, [r0, #0]
 800a3ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a3ee:	4802      	ldr	r0, [pc, #8]	@ (800a3f8 <log10f+0x58>)
 800a3f0:	f000 b822 	b.w	800a438 <nanf>
 800a3f4:	ff800000 	.word	0xff800000
 800a3f8:	0800d18c 	.word	0x0800d18c

0800a3fc <sqrtf>:
 800a3fc:	b508      	push	{r3, lr}
 800a3fe:	ed2d 8b02 	vpush	{d8}
 800a402:	eeb0 8a40 	vmov.f32	s16, s0
 800a406:	f000 f81d 	bl	800a444 <__ieee754_sqrtf>
 800a40a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a412:	d60c      	bvs.n	800a42e <sqrtf+0x32>
 800a414:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a434 <sqrtf+0x38>
 800a418:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a420:	d505      	bpl.n	800a42e <sqrtf+0x32>
 800a422:	f000 fe71 	bl	800b108 <__errno>
 800a426:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a42a:	2321      	movs	r3, #33	@ 0x21
 800a42c:	6003      	str	r3, [r0, #0]
 800a42e:	ecbd 8b02 	vpop	{d8}
 800a432:	bd08      	pop	{r3, pc}
 800a434:	00000000 	.word	0x00000000

0800a438 <nanf>:
 800a438:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a440 <nanf+0x8>
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	7fc00000 	.word	0x7fc00000

0800a444 <__ieee754_sqrtf>:
 800a444:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a448:	4770      	bx	lr
	...

0800a44c <__ieee754_log10f>:
 800a44c:	b508      	push	{r3, lr}
 800a44e:	ee10 3a10 	vmov	r3, s0
 800a452:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a456:	ed2d 8b02 	vpush	{d8}
 800a45a:	d108      	bne.n	800a46e <__ieee754_log10f+0x22>
 800a45c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a4e4 <__ieee754_log10f+0x98>
 800a460:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800a4e8 <__ieee754_log10f+0x9c>
 800a464:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a468:	ecbd 8b02 	vpop	{d8}
 800a46c:	bd08      	pop	{r3, pc}
 800a46e:	2b00      	cmp	r3, #0
 800a470:	461a      	mov	r2, r3
 800a472:	da02      	bge.n	800a47a <__ieee754_log10f+0x2e>
 800a474:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a478:	e7f2      	b.n	800a460 <__ieee754_log10f+0x14>
 800a47a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a47e:	db02      	blt.n	800a486 <__ieee754_log10f+0x3a>
 800a480:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a484:	e7f0      	b.n	800a468 <__ieee754_log10f+0x1c>
 800a486:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a48a:	bfbf      	itttt	lt
 800a48c:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800a4ec <__ieee754_log10f+0xa0>
 800a490:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a494:	f06f 0118 	mvnlt.w	r1, #24
 800a498:	ee17 2a90 	vmovlt	r2, s15
 800a49c:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a4a0:	bfa8      	it	ge
 800a4a2:	2100      	movge	r1, #0
 800a4a4:	3b7f      	subs	r3, #127	@ 0x7f
 800a4a6:	440b      	add	r3, r1
 800a4a8:	0fd9      	lsrs	r1, r3, #31
 800a4aa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a4ae:	ee07 3a90 	vmov	s15, r3
 800a4b2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a4b6:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800a4ba:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a4be:	ee00 3a10 	vmov	s0, r3
 800a4c2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a4c6:	f000 f819 	bl	800a4fc <logf>
 800a4ca:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800a4f0 <__ieee754_log10f+0xa4>
 800a4ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a4d2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a4f4 <__ieee754_log10f+0xa8>
 800a4d6:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a4da:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800a4f8 <__ieee754_log10f+0xac>
 800a4de:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a4e2:	e7c1      	b.n	800a468 <__ieee754_log10f+0x1c>
 800a4e4:	cc000000 	.word	0xcc000000
 800a4e8:	00000000 	.word	0x00000000
 800a4ec:	4c000000 	.word	0x4c000000
 800a4f0:	3ede5bd9 	.word	0x3ede5bd9
 800a4f4:	355427db 	.word	0x355427db
 800a4f8:	3e9a2080 	.word	0x3e9a2080

0800a4fc <logf>:
 800a4fc:	ee10 3a10 	vmov	r3, s0
 800a500:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a504:	b410      	push	{r4}
 800a506:	d055      	beq.n	800a5b4 <logf+0xb8>
 800a508:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 800a50c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800a510:	d31a      	bcc.n	800a548 <logf+0x4c>
 800a512:	005a      	lsls	r2, r3, #1
 800a514:	d104      	bne.n	800a520 <logf+0x24>
 800a516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a51a:	2001      	movs	r0, #1
 800a51c:	f000 b862 	b.w	800a5e4 <__math_divzerof>
 800a520:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a524:	d043      	beq.n	800a5ae <logf+0xb2>
 800a526:	2b00      	cmp	r3, #0
 800a528:	db02      	blt.n	800a530 <logf+0x34>
 800a52a:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 800a52e:	d303      	bcc.n	800a538 <logf+0x3c>
 800a530:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a534:	f000 b868 	b.w	800a608 <__math_invalidf>
 800a538:	eddf 7a20 	vldr	s15, [pc, #128]	@ 800a5bc <logf+0xc0>
 800a53c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a540:	ee10 3a10 	vmov	r3, s0
 800a544:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 800a548:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 800a54c:	491c      	ldr	r1, [pc, #112]	@ (800a5c0 <logf+0xc4>)
 800a54e:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 800a552:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 800a556:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800a55a:	0dd4      	lsrs	r4, r2, #23
 800a55c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800a560:	05e4      	lsls	r4, r4, #23
 800a562:	ed90 5b00 	vldr	d5, [r0]
 800a566:	1b1b      	subs	r3, r3, r4
 800a568:	ee07 3a90 	vmov	s15, r3
 800a56c:	ed90 6b02 	vldr	d6, [r0, #8]
 800a570:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a574:	15d2      	asrs	r2, r2, #23
 800a576:	eea5 0b07 	vfma.f64	d0, d5, d7
 800a57a:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 800a57e:	ee20 4b00 	vmul.f64	d4, d0, d0
 800a582:	ee07 2a90 	vmov	s15, r2
 800a586:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a58a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a58e:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 800a592:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 800a596:	eea5 7b00 	vfma.f64	d7, d5, d0
 800a59a:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 800a59e:	ee30 0b06 	vadd.f64	d0, d0, d6
 800a5a2:	eea5 7b04 	vfma.f64	d7, d5, d4
 800a5a6:	eea4 0b07 	vfma.f64	d0, d4, d7
 800a5aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800a5c4 <logf+0xc8>
 800a5b8:	e7f9      	b.n	800a5ae <logf+0xb2>
 800a5ba:	bf00      	nop
 800a5bc:	4b000000 	.word	0x4b000000
 800a5c0:	0800d190 	.word	0x0800d190
 800a5c4:	00000000 	.word	0x00000000

0800a5c8 <with_errnof>:
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	ed2d 8b02 	vpush	{d8}
 800a5ce:	eeb0 8a40 	vmov.f32	s16, s0
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	f000 fd98 	bl	800b108 <__errno>
 800a5d8:	eeb0 0a48 	vmov.f32	s0, s16
 800a5dc:	ecbd 8b02 	vpop	{d8}
 800a5e0:	6004      	str	r4, [r0, #0]
 800a5e2:	bd10      	pop	{r4, pc}

0800a5e4 <__math_divzerof>:
 800a5e4:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800a604 <__math_divzerof+0x20>
 800a5e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a5ec:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800a5f6:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800a5fa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a5fe:	f7ff bfe3 	b.w	800a5c8 <with_errnof>
 800a602:	bf00      	nop
 800a604:	00000000 	.word	0x00000000

0800a608 <__math_invalidf>:
 800a608:	eef0 7a40 	vmov.f32	s15, s0
 800a60c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a610:	eef4 7a67 	vcmp.f32	s15, s15
 800a614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a618:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a61c:	d602      	bvs.n	800a624 <__math_invalidf+0x1c>
 800a61e:	2021      	movs	r0, #33	@ 0x21
 800a620:	f7ff bfd2 	b.w	800a5c8 <with_errnof>
 800a624:	4770      	bx	lr

0800a626 <__cvt>:
 800a626:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a628:	ed2d 8b02 	vpush	{d8}
 800a62c:	eeb0 8b40 	vmov.f64	d8, d0
 800a630:	b085      	sub	sp, #20
 800a632:	4617      	mov	r7, r2
 800a634:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a636:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a638:	ee18 2a90 	vmov	r2, s17
 800a63c:	f025 0520 	bic.w	r5, r5, #32
 800a640:	2a00      	cmp	r2, #0
 800a642:	bfb6      	itet	lt
 800a644:	222d      	movlt	r2, #45	@ 0x2d
 800a646:	2200      	movge	r2, #0
 800a648:	eeb1 8b40 	vneglt.f64	d8, d0
 800a64c:	2d46      	cmp	r5, #70	@ 0x46
 800a64e:	460c      	mov	r4, r1
 800a650:	701a      	strb	r2, [r3, #0]
 800a652:	d004      	beq.n	800a65e <__cvt+0x38>
 800a654:	2d45      	cmp	r5, #69	@ 0x45
 800a656:	d100      	bne.n	800a65a <__cvt+0x34>
 800a658:	3401      	adds	r4, #1
 800a65a:	2102      	movs	r1, #2
 800a65c:	e000      	b.n	800a660 <__cvt+0x3a>
 800a65e:	2103      	movs	r1, #3
 800a660:	ab03      	add	r3, sp, #12
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	ab02      	add	r3, sp, #8
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	4622      	mov	r2, r4
 800a66a:	4633      	mov	r3, r6
 800a66c:	eeb0 0b48 	vmov.f64	d0, d8
 800a670:	f000 fe06 	bl	800b280 <_dtoa_r>
 800a674:	2d47      	cmp	r5, #71	@ 0x47
 800a676:	d114      	bne.n	800a6a2 <__cvt+0x7c>
 800a678:	07fb      	lsls	r3, r7, #31
 800a67a:	d50a      	bpl.n	800a692 <__cvt+0x6c>
 800a67c:	1902      	adds	r2, r0, r4
 800a67e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a686:	bf08      	it	eq
 800a688:	9203      	streq	r2, [sp, #12]
 800a68a:	2130      	movs	r1, #48	@ 0x30
 800a68c:	9b03      	ldr	r3, [sp, #12]
 800a68e:	4293      	cmp	r3, r2
 800a690:	d319      	bcc.n	800a6c6 <__cvt+0xa0>
 800a692:	9b03      	ldr	r3, [sp, #12]
 800a694:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a696:	1a1b      	subs	r3, r3, r0
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	b005      	add	sp, #20
 800a69c:	ecbd 8b02 	vpop	{d8}
 800a6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a2:	2d46      	cmp	r5, #70	@ 0x46
 800a6a4:	eb00 0204 	add.w	r2, r0, r4
 800a6a8:	d1e9      	bne.n	800a67e <__cvt+0x58>
 800a6aa:	7803      	ldrb	r3, [r0, #0]
 800a6ac:	2b30      	cmp	r3, #48	@ 0x30
 800a6ae:	d107      	bne.n	800a6c0 <__cvt+0x9a>
 800a6b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b8:	bf1c      	itt	ne
 800a6ba:	f1c4 0401 	rsbne	r4, r4, #1
 800a6be:	6034      	strne	r4, [r6, #0]
 800a6c0:	6833      	ldr	r3, [r6, #0]
 800a6c2:	441a      	add	r2, r3
 800a6c4:	e7db      	b.n	800a67e <__cvt+0x58>
 800a6c6:	1c5c      	adds	r4, r3, #1
 800a6c8:	9403      	str	r4, [sp, #12]
 800a6ca:	7019      	strb	r1, [r3, #0]
 800a6cc:	e7de      	b.n	800a68c <__cvt+0x66>

0800a6ce <__exponent>:
 800a6ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d0:	2900      	cmp	r1, #0
 800a6d2:	bfba      	itte	lt
 800a6d4:	4249      	neglt	r1, r1
 800a6d6:	232d      	movlt	r3, #45	@ 0x2d
 800a6d8:	232b      	movge	r3, #43	@ 0x2b
 800a6da:	2909      	cmp	r1, #9
 800a6dc:	7002      	strb	r2, [r0, #0]
 800a6de:	7043      	strb	r3, [r0, #1]
 800a6e0:	dd29      	ble.n	800a736 <__exponent+0x68>
 800a6e2:	f10d 0307 	add.w	r3, sp, #7
 800a6e6:	461d      	mov	r5, r3
 800a6e8:	270a      	movs	r7, #10
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	fbb1 f6f7 	udiv	r6, r1, r7
 800a6f0:	fb07 1416 	mls	r4, r7, r6, r1
 800a6f4:	3430      	adds	r4, #48	@ 0x30
 800a6f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	2c63      	cmp	r4, #99	@ 0x63
 800a6fe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a702:	4631      	mov	r1, r6
 800a704:	dcf1      	bgt.n	800a6ea <__exponent+0x1c>
 800a706:	3130      	adds	r1, #48	@ 0x30
 800a708:	1e94      	subs	r4, r2, #2
 800a70a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a70e:	1c41      	adds	r1, r0, #1
 800a710:	4623      	mov	r3, r4
 800a712:	42ab      	cmp	r3, r5
 800a714:	d30a      	bcc.n	800a72c <__exponent+0x5e>
 800a716:	f10d 0309 	add.w	r3, sp, #9
 800a71a:	1a9b      	subs	r3, r3, r2
 800a71c:	42ac      	cmp	r4, r5
 800a71e:	bf88      	it	hi
 800a720:	2300      	movhi	r3, #0
 800a722:	3302      	adds	r3, #2
 800a724:	4403      	add	r3, r0
 800a726:	1a18      	subs	r0, r3, r0
 800a728:	b003      	add	sp, #12
 800a72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a72c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a730:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a734:	e7ed      	b.n	800a712 <__exponent+0x44>
 800a736:	2330      	movs	r3, #48	@ 0x30
 800a738:	3130      	adds	r1, #48	@ 0x30
 800a73a:	7083      	strb	r3, [r0, #2]
 800a73c:	70c1      	strb	r1, [r0, #3]
 800a73e:	1d03      	adds	r3, r0, #4
 800a740:	e7f1      	b.n	800a726 <__exponent+0x58>
 800a742:	0000      	movs	r0, r0
 800a744:	0000      	movs	r0, r0
	...

0800a748 <_printf_float>:
 800a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	b08d      	sub	sp, #52	@ 0x34
 800a74e:	460c      	mov	r4, r1
 800a750:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a754:	4616      	mov	r6, r2
 800a756:	461f      	mov	r7, r3
 800a758:	4605      	mov	r5, r0
 800a75a:	f000 fd03 	bl	800b164 <_localeconv_r>
 800a75e:	f8d0 b000 	ldr.w	fp, [r0]
 800a762:	4658      	mov	r0, fp
 800a764:	f7f5 fe0c 	bl	8000380 <strlen>
 800a768:	2300      	movs	r3, #0
 800a76a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a76c:	f8d8 3000 	ldr.w	r3, [r8]
 800a770:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a774:	6822      	ldr	r2, [r4, #0]
 800a776:	9005      	str	r0, [sp, #20]
 800a778:	3307      	adds	r3, #7
 800a77a:	f023 0307 	bic.w	r3, r3, #7
 800a77e:	f103 0108 	add.w	r1, r3, #8
 800a782:	f8c8 1000 	str.w	r1, [r8]
 800a786:	ed93 0b00 	vldr	d0, [r3]
 800a78a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a9e8 <_printf_float+0x2a0>
 800a78e:	eeb0 7bc0 	vabs.f64	d7, d0
 800a792:	eeb4 7b46 	vcmp.f64	d7, d6
 800a796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a79a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a79e:	dd24      	ble.n	800a7ea <_printf_float+0xa2>
 800a7a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a8:	d502      	bpl.n	800a7b0 <_printf_float+0x68>
 800a7aa:	232d      	movs	r3, #45	@ 0x2d
 800a7ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7b0:	498f      	ldr	r1, [pc, #572]	@ (800a9f0 <_printf_float+0x2a8>)
 800a7b2:	4b90      	ldr	r3, [pc, #576]	@ (800a9f4 <_printf_float+0x2ac>)
 800a7b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a7b8:	bf8c      	ite	hi
 800a7ba:	4688      	movhi	r8, r1
 800a7bc:	4698      	movls	r8, r3
 800a7be:	f022 0204 	bic.w	r2, r2, #4
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	6123      	str	r3, [r4, #16]
 800a7c6:	6022      	str	r2, [r4, #0]
 800a7c8:	f04f 0a00 	mov.w	sl, #0
 800a7cc:	9700      	str	r7, [sp, #0]
 800a7ce:	4633      	mov	r3, r6
 800a7d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f000 f9d1 	bl	800ab7c <_printf_common>
 800a7da:	3001      	adds	r0, #1
 800a7dc:	f040 8089 	bne.w	800a8f2 <_printf_float+0x1aa>
 800a7e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7e4:	b00d      	add	sp, #52	@ 0x34
 800a7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ea:	eeb4 0b40 	vcmp.f64	d0, d0
 800a7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f2:	d709      	bvc.n	800a808 <_printf_float+0xc0>
 800a7f4:	ee10 3a90 	vmov	r3, s1
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	bfbc      	itt	lt
 800a7fc:	232d      	movlt	r3, #45	@ 0x2d
 800a7fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a802:	497d      	ldr	r1, [pc, #500]	@ (800a9f8 <_printf_float+0x2b0>)
 800a804:	4b7d      	ldr	r3, [pc, #500]	@ (800a9fc <_printf_float+0x2b4>)
 800a806:	e7d5      	b.n	800a7b4 <_printf_float+0x6c>
 800a808:	6863      	ldr	r3, [r4, #4]
 800a80a:	1c59      	adds	r1, r3, #1
 800a80c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a810:	d139      	bne.n	800a886 <_printf_float+0x13e>
 800a812:	2306      	movs	r3, #6
 800a814:	6063      	str	r3, [r4, #4]
 800a816:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a81a:	2300      	movs	r3, #0
 800a81c:	6022      	str	r2, [r4, #0]
 800a81e:	9303      	str	r3, [sp, #12]
 800a820:	ab0a      	add	r3, sp, #40	@ 0x28
 800a822:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a826:	ab09      	add	r3, sp, #36	@ 0x24
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	6861      	ldr	r1, [r4, #4]
 800a82c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a830:	4628      	mov	r0, r5
 800a832:	f7ff fef8 	bl	800a626 <__cvt>
 800a836:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a83a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a83c:	4680      	mov	r8, r0
 800a83e:	d129      	bne.n	800a894 <_printf_float+0x14c>
 800a840:	1cc8      	adds	r0, r1, #3
 800a842:	db02      	blt.n	800a84a <_printf_float+0x102>
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	4299      	cmp	r1, r3
 800a848:	dd41      	ble.n	800a8ce <_printf_float+0x186>
 800a84a:	f1a9 0902 	sub.w	r9, r9, #2
 800a84e:	fa5f f989 	uxtb.w	r9, r9
 800a852:	3901      	subs	r1, #1
 800a854:	464a      	mov	r2, r9
 800a856:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a85a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a85c:	f7ff ff37 	bl	800a6ce <__exponent>
 800a860:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a862:	1813      	adds	r3, r2, r0
 800a864:	2a01      	cmp	r2, #1
 800a866:	4682      	mov	sl, r0
 800a868:	6123      	str	r3, [r4, #16]
 800a86a:	dc02      	bgt.n	800a872 <_printf_float+0x12a>
 800a86c:	6822      	ldr	r2, [r4, #0]
 800a86e:	07d2      	lsls	r2, r2, #31
 800a870:	d501      	bpl.n	800a876 <_printf_float+0x12e>
 800a872:	3301      	adds	r3, #1
 800a874:	6123      	str	r3, [r4, #16]
 800a876:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0a6      	beq.n	800a7cc <_printf_float+0x84>
 800a87e:	232d      	movs	r3, #45	@ 0x2d
 800a880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a884:	e7a2      	b.n	800a7cc <_printf_float+0x84>
 800a886:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a88a:	d1c4      	bne.n	800a816 <_printf_float+0xce>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1c2      	bne.n	800a816 <_printf_float+0xce>
 800a890:	2301      	movs	r3, #1
 800a892:	e7bf      	b.n	800a814 <_printf_float+0xcc>
 800a894:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a898:	d9db      	bls.n	800a852 <_printf_float+0x10a>
 800a89a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a89e:	d118      	bne.n	800a8d2 <_printf_float+0x18a>
 800a8a0:	2900      	cmp	r1, #0
 800a8a2:	6863      	ldr	r3, [r4, #4]
 800a8a4:	dd0b      	ble.n	800a8be <_printf_float+0x176>
 800a8a6:	6121      	str	r1, [r4, #16]
 800a8a8:	b913      	cbnz	r3, 800a8b0 <_printf_float+0x168>
 800a8aa:	6822      	ldr	r2, [r4, #0]
 800a8ac:	07d0      	lsls	r0, r2, #31
 800a8ae:	d502      	bpl.n	800a8b6 <_printf_float+0x16e>
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	440b      	add	r3, r1
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a8b8:	f04f 0a00 	mov.w	sl, #0
 800a8bc:	e7db      	b.n	800a876 <_printf_float+0x12e>
 800a8be:	b913      	cbnz	r3, 800a8c6 <_printf_float+0x17e>
 800a8c0:	6822      	ldr	r2, [r4, #0]
 800a8c2:	07d2      	lsls	r2, r2, #31
 800a8c4:	d501      	bpl.n	800a8ca <_printf_float+0x182>
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	e7f4      	b.n	800a8b4 <_printf_float+0x16c>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e7f2      	b.n	800a8b4 <_printf_float+0x16c>
 800a8ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a8d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8d4:	4299      	cmp	r1, r3
 800a8d6:	db05      	blt.n	800a8e4 <_printf_float+0x19c>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	6121      	str	r1, [r4, #16]
 800a8dc:	07d8      	lsls	r0, r3, #31
 800a8de:	d5ea      	bpl.n	800a8b6 <_printf_float+0x16e>
 800a8e0:	1c4b      	adds	r3, r1, #1
 800a8e2:	e7e7      	b.n	800a8b4 <_printf_float+0x16c>
 800a8e4:	2900      	cmp	r1, #0
 800a8e6:	bfd4      	ite	le
 800a8e8:	f1c1 0202 	rsble	r2, r1, #2
 800a8ec:	2201      	movgt	r2, #1
 800a8ee:	4413      	add	r3, r2
 800a8f0:	e7e0      	b.n	800a8b4 <_printf_float+0x16c>
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	055a      	lsls	r2, r3, #21
 800a8f6:	d407      	bmi.n	800a908 <_printf_float+0x1c0>
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4628      	mov	r0, r5
 800a900:	47b8      	blx	r7
 800a902:	3001      	adds	r0, #1
 800a904:	d12a      	bne.n	800a95c <_printf_float+0x214>
 800a906:	e76b      	b.n	800a7e0 <_printf_float+0x98>
 800a908:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a90c:	f240 80e0 	bls.w	800aad0 <_printf_float+0x388>
 800a910:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a914:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a91c:	d133      	bne.n	800a986 <_printf_float+0x23e>
 800a91e:	4a38      	ldr	r2, [pc, #224]	@ (800aa00 <_printf_float+0x2b8>)
 800a920:	2301      	movs	r3, #1
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	f43f af59 	beq.w	800a7e0 <_printf_float+0x98>
 800a92e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a932:	4543      	cmp	r3, r8
 800a934:	db02      	blt.n	800a93c <_printf_float+0x1f4>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	07d8      	lsls	r0, r3, #31
 800a93a:	d50f      	bpl.n	800a95c <_printf_float+0x214>
 800a93c:	9b05      	ldr	r3, [sp, #20]
 800a93e:	465a      	mov	r2, fp
 800a940:	4631      	mov	r1, r6
 800a942:	4628      	mov	r0, r5
 800a944:	47b8      	blx	r7
 800a946:	3001      	adds	r0, #1
 800a948:	f43f af4a 	beq.w	800a7e0 <_printf_float+0x98>
 800a94c:	f04f 0900 	mov.w	r9, #0
 800a950:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a954:	f104 0a1a 	add.w	sl, r4, #26
 800a958:	45c8      	cmp	r8, r9
 800a95a:	dc09      	bgt.n	800a970 <_printf_float+0x228>
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	079b      	lsls	r3, r3, #30
 800a960:	f100 8107 	bmi.w	800ab72 <_printf_float+0x42a>
 800a964:	68e0      	ldr	r0, [r4, #12]
 800a966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a968:	4298      	cmp	r0, r3
 800a96a:	bfb8      	it	lt
 800a96c:	4618      	movlt	r0, r3
 800a96e:	e739      	b.n	800a7e4 <_printf_float+0x9c>
 800a970:	2301      	movs	r3, #1
 800a972:	4652      	mov	r2, sl
 800a974:	4631      	mov	r1, r6
 800a976:	4628      	mov	r0, r5
 800a978:	47b8      	blx	r7
 800a97a:	3001      	adds	r0, #1
 800a97c:	f43f af30 	beq.w	800a7e0 <_printf_float+0x98>
 800a980:	f109 0901 	add.w	r9, r9, #1
 800a984:	e7e8      	b.n	800a958 <_printf_float+0x210>
 800a986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a988:	2b00      	cmp	r3, #0
 800a98a:	dc3b      	bgt.n	800aa04 <_printf_float+0x2bc>
 800a98c:	4a1c      	ldr	r2, [pc, #112]	@ (800aa00 <_printf_float+0x2b8>)
 800a98e:	2301      	movs	r3, #1
 800a990:	4631      	mov	r1, r6
 800a992:	4628      	mov	r0, r5
 800a994:	47b8      	blx	r7
 800a996:	3001      	adds	r0, #1
 800a998:	f43f af22 	beq.w	800a7e0 <_printf_float+0x98>
 800a99c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a9a0:	ea59 0303 	orrs.w	r3, r9, r3
 800a9a4:	d102      	bne.n	800a9ac <_printf_float+0x264>
 800a9a6:	6823      	ldr	r3, [r4, #0]
 800a9a8:	07d9      	lsls	r1, r3, #31
 800a9aa:	d5d7      	bpl.n	800a95c <_printf_float+0x214>
 800a9ac:	9b05      	ldr	r3, [sp, #20]
 800a9ae:	465a      	mov	r2, fp
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	47b8      	blx	r7
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	f43f af12 	beq.w	800a7e0 <_printf_float+0x98>
 800a9bc:	f04f 0a00 	mov.w	sl, #0
 800a9c0:	f104 0b1a 	add.w	fp, r4, #26
 800a9c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c6:	425b      	negs	r3, r3
 800a9c8:	4553      	cmp	r3, sl
 800a9ca:	dc01      	bgt.n	800a9d0 <_printf_float+0x288>
 800a9cc:	464b      	mov	r3, r9
 800a9ce:	e794      	b.n	800a8fa <_printf_float+0x1b2>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	465a      	mov	r2, fp
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	47b8      	blx	r7
 800a9da:	3001      	adds	r0, #1
 800a9dc:	f43f af00 	beq.w	800a7e0 <_printf_float+0x98>
 800a9e0:	f10a 0a01 	add.w	sl, sl, #1
 800a9e4:	e7ee      	b.n	800a9c4 <_printf_float+0x27c>
 800a9e6:	bf00      	nop
 800a9e8:	ffffffff 	.word	0xffffffff
 800a9ec:	7fefffff 	.word	0x7fefffff
 800a9f0:	0800d020 	.word	0x0800d020
 800a9f4:	0800d01c 	.word	0x0800d01c
 800a9f8:	0800d028 	.word	0x0800d028
 800a9fc:	0800d024 	.word	0x0800d024
 800aa00:	0800d02c 	.word	0x0800d02c
 800aa04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa0a:	4553      	cmp	r3, sl
 800aa0c:	bfa8      	it	ge
 800aa0e:	4653      	movge	r3, sl
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	4699      	mov	r9, r3
 800aa14:	dc37      	bgt.n	800aa86 <_printf_float+0x33e>
 800aa16:	2300      	movs	r3, #0
 800aa18:	9307      	str	r3, [sp, #28]
 800aa1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa1e:	f104 021a 	add.w	r2, r4, #26
 800aa22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa24:	9907      	ldr	r1, [sp, #28]
 800aa26:	9306      	str	r3, [sp, #24]
 800aa28:	eba3 0309 	sub.w	r3, r3, r9
 800aa2c:	428b      	cmp	r3, r1
 800aa2e:	dc31      	bgt.n	800aa94 <_printf_float+0x34c>
 800aa30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa32:	459a      	cmp	sl, r3
 800aa34:	dc3b      	bgt.n	800aaae <_printf_float+0x366>
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	07da      	lsls	r2, r3, #31
 800aa3a:	d438      	bmi.n	800aaae <_printf_float+0x366>
 800aa3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa3e:	ebaa 0903 	sub.w	r9, sl, r3
 800aa42:	9b06      	ldr	r3, [sp, #24]
 800aa44:	ebaa 0303 	sub.w	r3, sl, r3
 800aa48:	4599      	cmp	r9, r3
 800aa4a:	bfa8      	it	ge
 800aa4c:	4699      	movge	r9, r3
 800aa4e:	f1b9 0f00 	cmp.w	r9, #0
 800aa52:	dc34      	bgt.n	800aabe <_printf_float+0x376>
 800aa54:	f04f 0800 	mov.w	r8, #0
 800aa58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa5c:	f104 0b1a 	add.w	fp, r4, #26
 800aa60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa62:	ebaa 0303 	sub.w	r3, sl, r3
 800aa66:	eba3 0309 	sub.w	r3, r3, r9
 800aa6a:	4543      	cmp	r3, r8
 800aa6c:	f77f af76 	ble.w	800a95c <_printf_float+0x214>
 800aa70:	2301      	movs	r3, #1
 800aa72:	465a      	mov	r2, fp
 800aa74:	4631      	mov	r1, r6
 800aa76:	4628      	mov	r0, r5
 800aa78:	47b8      	blx	r7
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	f43f aeb0 	beq.w	800a7e0 <_printf_float+0x98>
 800aa80:	f108 0801 	add.w	r8, r8, #1
 800aa84:	e7ec      	b.n	800aa60 <_printf_float+0x318>
 800aa86:	4642      	mov	r2, r8
 800aa88:	4631      	mov	r1, r6
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	47b8      	blx	r7
 800aa8e:	3001      	adds	r0, #1
 800aa90:	d1c1      	bne.n	800aa16 <_printf_float+0x2ce>
 800aa92:	e6a5      	b.n	800a7e0 <_printf_float+0x98>
 800aa94:	2301      	movs	r3, #1
 800aa96:	4631      	mov	r1, r6
 800aa98:	4628      	mov	r0, r5
 800aa9a:	9206      	str	r2, [sp, #24]
 800aa9c:	47b8      	blx	r7
 800aa9e:	3001      	adds	r0, #1
 800aaa0:	f43f ae9e 	beq.w	800a7e0 <_printf_float+0x98>
 800aaa4:	9b07      	ldr	r3, [sp, #28]
 800aaa6:	9a06      	ldr	r2, [sp, #24]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	9307      	str	r3, [sp, #28]
 800aaac:	e7b9      	b.n	800aa22 <_printf_float+0x2da>
 800aaae:	9b05      	ldr	r3, [sp, #20]
 800aab0:	465a      	mov	r2, fp
 800aab2:	4631      	mov	r1, r6
 800aab4:	4628      	mov	r0, r5
 800aab6:	47b8      	blx	r7
 800aab8:	3001      	adds	r0, #1
 800aaba:	d1bf      	bne.n	800aa3c <_printf_float+0x2f4>
 800aabc:	e690      	b.n	800a7e0 <_printf_float+0x98>
 800aabe:	9a06      	ldr	r2, [sp, #24]
 800aac0:	464b      	mov	r3, r9
 800aac2:	4442      	add	r2, r8
 800aac4:	4631      	mov	r1, r6
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b8      	blx	r7
 800aaca:	3001      	adds	r0, #1
 800aacc:	d1c2      	bne.n	800aa54 <_printf_float+0x30c>
 800aace:	e687      	b.n	800a7e0 <_printf_float+0x98>
 800aad0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800aad4:	f1b9 0f01 	cmp.w	r9, #1
 800aad8:	dc01      	bgt.n	800aade <_printf_float+0x396>
 800aada:	07db      	lsls	r3, r3, #31
 800aadc:	d536      	bpl.n	800ab4c <_printf_float+0x404>
 800aade:	2301      	movs	r3, #1
 800aae0:	4642      	mov	r2, r8
 800aae2:	4631      	mov	r1, r6
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b8      	blx	r7
 800aae8:	3001      	adds	r0, #1
 800aaea:	f43f ae79 	beq.w	800a7e0 <_printf_float+0x98>
 800aaee:	9b05      	ldr	r3, [sp, #20]
 800aaf0:	465a      	mov	r2, fp
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	47b8      	blx	r7
 800aaf8:	3001      	adds	r0, #1
 800aafa:	f43f ae71 	beq.w	800a7e0 <_printf_float+0x98>
 800aafe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ab02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab0a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800ab0e:	d018      	beq.n	800ab42 <_printf_float+0x3fa>
 800ab10:	464b      	mov	r3, r9
 800ab12:	f108 0201 	add.w	r2, r8, #1
 800ab16:	4631      	mov	r1, r6
 800ab18:	4628      	mov	r0, r5
 800ab1a:	47b8      	blx	r7
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d10c      	bne.n	800ab3a <_printf_float+0x3f2>
 800ab20:	e65e      	b.n	800a7e0 <_printf_float+0x98>
 800ab22:	2301      	movs	r3, #1
 800ab24:	465a      	mov	r2, fp
 800ab26:	4631      	mov	r1, r6
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b8      	blx	r7
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	f43f ae57 	beq.w	800a7e0 <_printf_float+0x98>
 800ab32:	f108 0801 	add.w	r8, r8, #1
 800ab36:	45c8      	cmp	r8, r9
 800ab38:	dbf3      	blt.n	800ab22 <_printf_float+0x3da>
 800ab3a:	4653      	mov	r3, sl
 800ab3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab40:	e6dc      	b.n	800a8fc <_printf_float+0x1b4>
 800ab42:	f04f 0800 	mov.w	r8, #0
 800ab46:	f104 0b1a 	add.w	fp, r4, #26
 800ab4a:	e7f4      	b.n	800ab36 <_printf_float+0x3ee>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	4642      	mov	r2, r8
 800ab50:	e7e1      	b.n	800ab16 <_printf_float+0x3ce>
 800ab52:	2301      	movs	r3, #1
 800ab54:	464a      	mov	r2, r9
 800ab56:	4631      	mov	r1, r6
 800ab58:	4628      	mov	r0, r5
 800ab5a:	47b8      	blx	r7
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	f43f ae3f 	beq.w	800a7e0 <_printf_float+0x98>
 800ab62:	f108 0801 	add.w	r8, r8, #1
 800ab66:	68e3      	ldr	r3, [r4, #12]
 800ab68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab6a:	1a5b      	subs	r3, r3, r1
 800ab6c:	4543      	cmp	r3, r8
 800ab6e:	dcf0      	bgt.n	800ab52 <_printf_float+0x40a>
 800ab70:	e6f8      	b.n	800a964 <_printf_float+0x21c>
 800ab72:	f04f 0800 	mov.w	r8, #0
 800ab76:	f104 0919 	add.w	r9, r4, #25
 800ab7a:	e7f4      	b.n	800ab66 <_printf_float+0x41e>

0800ab7c <_printf_common>:
 800ab7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab80:	4616      	mov	r6, r2
 800ab82:	4698      	mov	r8, r3
 800ab84:	688a      	ldr	r2, [r1, #8]
 800ab86:	690b      	ldr	r3, [r1, #16]
 800ab88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	bfb8      	it	lt
 800ab90:	4613      	movlt	r3, r2
 800ab92:	6033      	str	r3, [r6, #0]
 800ab94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab98:	4607      	mov	r7, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	b10a      	cbz	r2, 800aba2 <_printf_common+0x26>
 800ab9e:	3301      	adds	r3, #1
 800aba0:	6033      	str	r3, [r6, #0]
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	0699      	lsls	r1, r3, #26
 800aba6:	bf42      	ittt	mi
 800aba8:	6833      	ldrmi	r3, [r6, #0]
 800abaa:	3302      	addmi	r3, #2
 800abac:	6033      	strmi	r3, [r6, #0]
 800abae:	6825      	ldr	r5, [r4, #0]
 800abb0:	f015 0506 	ands.w	r5, r5, #6
 800abb4:	d106      	bne.n	800abc4 <_printf_common+0x48>
 800abb6:	f104 0a19 	add.w	sl, r4, #25
 800abba:	68e3      	ldr	r3, [r4, #12]
 800abbc:	6832      	ldr	r2, [r6, #0]
 800abbe:	1a9b      	subs	r3, r3, r2
 800abc0:	42ab      	cmp	r3, r5
 800abc2:	dc26      	bgt.n	800ac12 <_printf_common+0x96>
 800abc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abc8:	6822      	ldr	r2, [r4, #0]
 800abca:	3b00      	subs	r3, #0
 800abcc:	bf18      	it	ne
 800abce:	2301      	movne	r3, #1
 800abd0:	0692      	lsls	r2, r2, #26
 800abd2:	d42b      	bmi.n	800ac2c <_printf_common+0xb0>
 800abd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abd8:	4641      	mov	r1, r8
 800abda:	4638      	mov	r0, r7
 800abdc:	47c8      	blx	r9
 800abde:	3001      	adds	r0, #1
 800abe0:	d01e      	beq.n	800ac20 <_printf_common+0xa4>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	6922      	ldr	r2, [r4, #16]
 800abe6:	f003 0306 	and.w	r3, r3, #6
 800abea:	2b04      	cmp	r3, #4
 800abec:	bf02      	ittt	eq
 800abee:	68e5      	ldreq	r5, [r4, #12]
 800abf0:	6833      	ldreq	r3, [r6, #0]
 800abf2:	1aed      	subeq	r5, r5, r3
 800abf4:	68a3      	ldr	r3, [r4, #8]
 800abf6:	bf0c      	ite	eq
 800abf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abfc:	2500      	movne	r5, #0
 800abfe:	4293      	cmp	r3, r2
 800ac00:	bfc4      	itt	gt
 800ac02:	1a9b      	subgt	r3, r3, r2
 800ac04:	18ed      	addgt	r5, r5, r3
 800ac06:	2600      	movs	r6, #0
 800ac08:	341a      	adds	r4, #26
 800ac0a:	42b5      	cmp	r5, r6
 800ac0c:	d11a      	bne.n	800ac44 <_printf_common+0xc8>
 800ac0e:	2000      	movs	r0, #0
 800ac10:	e008      	b.n	800ac24 <_printf_common+0xa8>
 800ac12:	2301      	movs	r3, #1
 800ac14:	4652      	mov	r2, sl
 800ac16:	4641      	mov	r1, r8
 800ac18:	4638      	mov	r0, r7
 800ac1a:	47c8      	blx	r9
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d103      	bne.n	800ac28 <_printf_common+0xac>
 800ac20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac28:	3501      	adds	r5, #1
 800ac2a:	e7c6      	b.n	800abba <_printf_common+0x3e>
 800ac2c:	18e1      	adds	r1, r4, r3
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	2030      	movs	r0, #48	@ 0x30
 800ac32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac36:	4422      	add	r2, r4
 800ac38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac40:	3302      	adds	r3, #2
 800ac42:	e7c7      	b.n	800abd4 <_printf_common+0x58>
 800ac44:	2301      	movs	r3, #1
 800ac46:	4622      	mov	r2, r4
 800ac48:	4641      	mov	r1, r8
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	47c8      	blx	r9
 800ac4e:	3001      	adds	r0, #1
 800ac50:	d0e6      	beq.n	800ac20 <_printf_common+0xa4>
 800ac52:	3601      	adds	r6, #1
 800ac54:	e7d9      	b.n	800ac0a <_printf_common+0x8e>
	...

0800ac58 <_printf_i>:
 800ac58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5c:	7e0f      	ldrb	r7, [r1, #24]
 800ac5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac60:	2f78      	cmp	r7, #120	@ 0x78
 800ac62:	4691      	mov	r9, r2
 800ac64:	4680      	mov	r8, r0
 800ac66:	460c      	mov	r4, r1
 800ac68:	469a      	mov	sl, r3
 800ac6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac6e:	d807      	bhi.n	800ac80 <_printf_i+0x28>
 800ac70:	2f62      	cmp	r7, #98	@ 0x62
 800ac72:	d80a      	bhi.n	800ac8a <_printf_i+0x32>
 800ac74:	2f00      	cmp	r7, #0
 800ac76:	f000 80d1 	beq.w	800ae1c <_printf_i+0x1c4>
 800ac7a:	2f58      	cmp	r7, #88	@ 0x58
 800ac7c:	f000 80b8 	beq.w	800adf0 <_printf_i+0x198>
 800ac80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac88:	e03a      	b.n	800ad00 <_printf_i+0xa8>
 800ac8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac8e:	2b15      	cmp	r3, #21
 800ac90:	d8f6      	bhi.n	800ac80 <_printf_i+0x28>
 800ac92:	a101      	add	r1, pc, #4	@ (adr r1, 800ac98 <_printf_i+0x40>)
 800ac94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac98:	0800acf1 	.word	0x0800acf1
 800ac9c:	0800ad05 	.word	0x0800ad05
 800aca0:	0800ac81 	.word	0x0800ac81
 800aca4:	0800ac81 	.word	0x0800ac81
 800aca8:	0800ac81 	.word	0x0800ac81
 800acac:	0800ac81 	.word	0x0800ac81
 800acb0:	0800ad05 	.word	0x0800ad05
 800acb4:	0800ac81 	.word	0x0800ac81
 800acb8:	0800ac81 	.word	0x0800ac81
 800acbc:	0800ac81 	.word	0x0800ac81
 800acc0:	0800ac81 	.word	0x0800ac81
 800acc4:	0800ae03 	.word	0x0800ae03
 800acc8:	0800ad2f 	.word	0x0800ad2f
 800accc:	0800adbd 	.word	0x0800adbd
 800acd0:	0800ac81 	.word	0x0800ac81
 800acd4:	0800ac81 	.word	0x0800ac81
 800acd8:	0800ae25 	.word	0x0800ae25
 800acdc:	0800ac81 	.word	0x0800ac81
 800ace0:	0800ad2f 	.word	0x0800ad2f
 800ace4:	0800ac81 	.word	0x0800ac81
 800ace8:	0800ac81 	.word	0x0800ac81
 800acec:	0800adc5 	.word	0x0800adc5
 800acf0:	6833      	ldr	r3, [r6, #0]
 800acf2:	1d1a      	adds	r2, r3, #4
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6032      	str	r2, [r6, #0]
 800acf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad00:	2301      	movs	r3, #1
 800ad02:	e09c      	b.n	800ae3e <_printf_i+0x1e6>
 800ad04:	6833      	ldr	r3, [r6, #0]
 800ad06:	6820      	ldr	r0, [r4, #0]
 800ad08:	1d19      	adds	r1, r3, #4
 800ad0a:	6031      	str	r1, [r6, #0]
 800ad0c:	0606      	lsls	r6, r0, #24
 800ad0e:	d501      	bpl.n	800ad14 <_printf_i+0xbc>
 800ad10:	681d      	ldr	r5, [r3, #0]
 800ad12:	e003      	b.n	800ad1c <_printf_i+0xc4>
 800ad14:	0645      	lsls	r5, r0, #25
 800ad16:	d5fb      	bpl.n	800ad10 <_printf_i+0xb8>
 800ad18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad1c:	2d00      	cmp	r5, #0
 800ad1e:	da03      	bge.n	800ad28 <_printf_i+0xd0>
 800ad20:	232d      	movs	r3, #45	@ 0x2d
 800ad22:	426d      	negs	r5, r5
 800ad24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad28:	4858      	ldr	r0, [pc, #352]	@ (800ae8c <_printf_i+0x234>)
 800ad2a:	230a      	movs	r3, #10
 800ad2c:	e011      	b.n	800ad52 <_printf_i+0xfa>
 800ad2e:	6821      	ldr	r1, [r4, #0]
 800ad30:	6833      	ldr	r3, [r6, #0]
 800ad32:	0608      	lsls	r0, r1, #24
 800ad34:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad38:	d402      	bmi.n	800ad40 <_printf_i+0xe8>
 800ad3a:	0649      	lsls	r1, r1, #25
 800ad3c:	bf48      	it	mi
 800ad3e:	b2ad      	uxthmi	r5, r5
 800ad40:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad42:	4852      	ldr	r0, [pc, #328]	@ (800ae8c <_printf_i+0x234>)
 800ad44:	6033      	str	r3, [r6, #0]
 800ad46:	bf14      	ite	ne
 800ad48:	230a      	movne	r3, #10
 800ad4a:	2308      	moveq	r3, #8
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad52:	6866      	ldr	r6, [r4, #4]
 800ad54:	60a6      	str	r6, [r4, #8]
 800ad56:	2e00      	cmp	r6, #0
 800ad58:	db05      	blt.n	800ad66 <_printf_i+0x10e>
 800ad5a:	6821      	ldr	r1, [r4, #0]
 800ad5c:	432e      	orrs	r6, r5
 800ad5e:	f021 0104 	bic.w	r1, r1, #4
 800ad62:	6021      	str	r1, [r4, #0]
 800ad64:	d04b      	beq.n	800adfe <_printf_i+0x1a6>
 800ad66:	4616      	mov	r6, r2
 800ad68:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad6c:	fb03 5711 	mls	r7, r3, r1, r5
 800ad70:	5dc7      	ldrb	r7, [r0, r7]
 800ad72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad76:	462f      	mov	r7, r5
 800ad78:	42bb      	cmp	r3, r7
 800ad7a:	460d      	mov	r5, r1
 800ad7c:	d9f4      	bls.n	800ad68 <_printf_i+0x110>
 800ad7e:	2b08      	cmp	r3, #8
 800ad80:	d10b      	bne.n	800ad9a <_printf_i+0x142>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	07df      	lsls	r7, r3, #31
 800ad86:	d508      	bpl.n	800ad9a <_printf_i+0x142>
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	6861      	ldr	r1, [r4, #4]
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	bfde      	ittt	le
 800ad90:	2330      	movle	r3, #48	@ 0x30
 800ad92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad96:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ad9a:	1b92      	subs	r2, r2, r6
 800ad9c:	6122      	str	r2, [r4, #16]
 800ad9e:	f8cd a000 	str.w	sl, [sp]
 800ada2:	464b      	mov	r3, r9
 800ada4:	aa03      	add	r2, sp, #12
 800ada6:	4621      	mov	r1, r4
 800ada8:	4640      	mov	r0, r8
 800adaa:	f7ff fee7 	bl	800ab7c <_printf_common>
 800adae:	3001      	adds	r0, #1
 800adb0:	d14a      	bne.n	800ae48 <_printf_i+0x1f0>
 800adb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adb6:	b004      	add	sp, #16
 800adb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	f043 0320 	orr.w	r3, r3, #32
 800adc2:	6023      	str	r3, [r4, #0]
 800adc4:	4832      	ldr	r0, [pc, #200]	@ (800ae90 <_printf_i+0x238>)
 800adc6:	2778      	movs	r7, #120	@ 0x78
 800adc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	6831      	ldr	r1, [r6, #0]
 800add0:	061f      	lsls	r7, r3, #24
 800add2:	f851 5b04 	ldr.w	r5, [r1], #4
 800add6:	d402      	bmi.n	800adde <_printf_i+0x186>
 800add8:	065f      	lsls	r7, r3, #25
 800adda:	bf48      	it	mi
 800addc:	b2ad      	uxthmi	r5, r5
 800adde:	6031      	str	r1, [r6, #0]
 800ade0:	07d9      	lsls	r1, r3, #31
 800ade2:	bf44      	itt	mi
 800ade4:	f043 0320 	orrmi.w	r3, r3, #32
 800ade8:	6023      	strmi	r3, [r4, #0]
 800adea:	b11d      	cbz	r5, 800adf4 <_printf_i+0x19c>
 800adec:	2310      	movs	r3, #16
 800adee:	e7ad      	b.n	800ad4c <_printf_i+0xf4>
 800adf0:	4826      	ldr	r0, [pc, #152]	@ (800ae8c <_printf_i+0x234>)
 800adf2:	e7e9      	b.n	800adc8 <_printf_i+0x170>
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	f023 0320 	bic.w	r3, r3, #32
 800adfa:	6023      	str	r3, [r4, #0]
 800adfc:	e7f6      	b.n	800adec <_printf_i+0x194>
 800adfe:	4616      	mov	r6, r2
 800ae00:	e7bd      	b.n	800ad7e <_printf_i+0x126>
 800ae02:	6833      	ldr	r3, [r6, #0]
 800ae04:	6825      	ldr	r5, [r4, #0]
 800ae06:	6961      	ldr	r1, [r4, #20]
 800ae08:	1d18      	adds	r0, r3, #4
 800ae0a:	6030      	str	r0, [r6, #0]
 800ae0c:	062e      	lsls	r6, r5, #24
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	d501      	bpl.n	800ae16 <_printf_i+0x1be>
 800ae12:	6019      	str	r1, [r3, #0]
 800ae14:	e002      	b.n	800ae1c <_printf_i+0x1c4>
 800ae16:	0668      	lsls	r0, r5, #25
 800ae18:	d5fb      	bpl.n	800ae12 <_printf_i+0x1ba>
 800ae1a:	8019      	strh	r1, [r3, #0]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	6123      	str	r3, [r4, #16]
 800ae20:	4616      	mov	r6, r2
 800ae22:	e7bc      	b.n	800ad9e <_printf_i+0x146>
 800ae24:	6833      	ldr	r3, [r6, #0]
 800ae26:	1d1a      	adds	r2, r3, #4
 800ae28:	6032      	str	r2, [r6, #0]
 800ae2a:	681e      	ldr	r6, [r3, #0]
 800ae2c:	6862      	ldr	r2, [r4, #4]
 800ae2e:	2100      	movs	r1, #0
 800ae30:	4630      	mov	r0, r6
 800ae32:	f7f5 fa55 	bl	80002e0 <memchr>
 800ae36:	b108      	cbz	r0, 800ae3c <_printf_i+0x1e4>
 800ae38:	1b80      	subs	r0, r0, r6
 800ae3a:	6060      	str	r0, [r4, #4]
 800ae3c:	6863      	ldr	r3, [r4, #4]
 800ae3e:	6123      	str	r3, [r4, #16]
 800ae40:	2300      	movs	r3, #0
 800ae42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae46:	e7aa      	b.n	800ad9e <_printf_i+0x146>
 800ae48:	6923      	ldr	r3, [r4, #16]
 800ae4a:	4632      	mov	r2, r6
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	4640      	mov	r0, r8
 800ae50:	47d0      	blx	sl
 800ae52:	3001      	adds	r0, #1
 800ae54:	d0ad      	beq.n	800adb2 <_printf_i+0x15a>
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	079b      	lsls	r3, r3, #30
 800ae5a:	d413      	bmi.n	800ae84 <_printf_i+0x22c>
 800ae5c:	68e0      	ldr	r0, [r4, #12]
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	4298      	cmp	r0, r3
 800ae62:	bfb8      	it	lt
 800ae64:	4618      	movlt	r0, r3
 800ae66:	e7a6      	b.n	800adb6 <_printf_i+0x15e>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	4640      	mov	r0, r8
 800ae70:	47d0      	blx	sl
 800ae72:	3001      	adds	r0, #1
 800ae74:	d09d      	beq.n	800adb2 <_printf_i+0x15a>
 800ae76:	3501      	adds	r5, #1
 800ae78:	68e3      	ldr	r3, [r4, #12]
 800ae7a:	9903      	ldr	r1, [sp, #12]
 800ae7c:	1a5b      	subs	r3, r3, r1
 800ae7e:	42ab      	cmp	r3, r5
 800ae80:	dcf2      	bgt.n	800ae68 <_printf_i+0x210>
 800ae82:	e7eb      	b.n	800ae5c <_printf_i+0x204>
 800ae84:	2500      	movs	r5, #0
 800ae86:	f104 0619 	add.w	r6, r4, #25
 800ae8a:	e7f5      	b.n	800ae78 <_printf_i+0x220>
 800ae8c:	0800d02e 	.word	0x0800d02e
 800ae90:	0800d03f 	.word	0x0800d03f

0800ae94 <std>:
 800ae94:	2300      	movs	r3, #0
 800ae96:	b510      	push	{r4, lr}
 800ae98:	4604      	mov	r4, r0
 800ae9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aea2:	6083      	str	r3, [r0, #8]
 800aea4:	8181      	strh	r1, [r0, #12]
 800aea6:	6643      	str	r3, [r0, #100]	@ 0x64
 800aea8:	81c2      	strh	r2, [r0, #14]
 800aeaa:	6183      	str	r3, [r0, #24]
 800aeac:	4619      	mov	r1, r3
 800aeae:	2208      	movs	r2, #8
 800aeb0:	305c      	adds	r0, #92	@ 0x5c
 800aeb2:	f000 f921 	bl	800b0f8 <memset>
 800aeb6:	4b0d      	ldr	r3, [pc, #52]	@ (800aeec <std+0x58>)
 800aeb8:	6263      	str	r3, [r4, #36]	@ 0x24
 800aeba:	4b0d      	ldr	r3, [pc, #52]	@ (800aef0 <std+0x5c>)
 800aebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aebe:	4b0d      	ldr	r3, [pc, #52]	@ (800aef4 <std+0x60>)
 800aec0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aec2:	4b0d      	ldr	r3, [pc, #52]	@ (800aef8 <std+0x64>)
 800aec4:	6323      	str	r3, [r4, #48]	@ 0x30
 800aec6:	4b0d      	ldr	r3, [pc, #52]	@ (800aefc <std+0x68>)
 800aec8:	6224      	str	r4, [r4, #32]
 800aeca:	429c      	cmp	r4, r3
 800aecc:	d006      	beq.n	800aedc <std+0x48>
 800aece:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aed2:	4294      	cmp	r4, r2
 800aed4:	d002      	beq.n	800aedc <std+0x48>
 800aed6:	33d0      	adds	r3, #208	@ 0xd0
 800aed8:	429c      	cmp	r4, r3
 800aeda:	d105      	bne.n	800aee8 <std+0x54>
 800aedc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aee4:	f000 b93a 	b.w	800b15c <__retarget_lock_init_recursive>
 800aee8:	bd10      	pop	{r4, pc}
 800aeea:	bf00      	nop
 800aeec:	0800c979 	.word	0x0800c979
 800aef0:	0800c99b 	.word	0x0800c99b
 800aef4:	0800c9d3 	.word	0x0800c9d3
 800aef8:	0800c9f7 	.word	0x0800c9f7
 800aefc:	24000ba4 	.word	0x24000ba4

0800af00 <stdio_exit_handler>:
 800af00:	4a02      	ldr	r2, [pc, #8]	@ (800af0c <stdio_exit_handler+0xc>)
 800af02:	4903      	ldr	r1, [pc, #12]	@ (800af10 <stdio_exit_handler+0x10>)
 800af04:	4803      	ldr	r0, [pc, #12]	@ (800af14 <stdio_exit_handler+0x14>)
 800af06:	f000 b869 	b.w	800afdc <_fwalk_sglue>
 800af0a:	bf00      	nop
 800af0c:	24000010 	.word	0x24000010
 800af10:	0800c21d 	.word	0x0800c21d
 800af14:	24000020 	.word	0x24000020

0800af18 <cleanup_stdio>:
 800af18:	6841      	ldr	r1, [r0, #4]
 800af1a:	4b0c      	ldr	r3, [pc, #48]	@ (800af4c <cleanup_stdio+0x34>)
 800af1c:	4299      	cmp	r1, r3
 800af1e:	b510      	push	{r4, lr}
 800af20:	4604      	mov	r4, r0
 800af22:	d001      	beq.n	800af28 <cleanup_stdio+0x10>
 800af24:	f001 f97a 	bl	800c21c <_fflush_r>
 800af28:	68a1      	ldr	r1, [r4, #8]
 800af2a:	4b09      	ldr	r3, [pc, #36]	@ (800af50 <cleanup_stdio+0x38>)
 800af2c:	4299      	cmp	r1, r3
 800af2e:	d002      	beq.n	800af36 <cleanup_stdio+0x1e>
 800af30:	4620      	mov	r0, r4
 800af32:	f001 f973 	bl	800c21c <_fflush_r>
 800af36:	68e1      	ldr	r1, [r4, #12]
 800af38:	4b06      	ldr	r3, [pc, #24]	@ (800af54 <cleanup_stdio+0x3c>)
 800af3a:	4299      	cmp	r1, r3
 800af3c:	d004      	beq.n	800af48 <cleanup_stdio+0x30>
 800af3e:	4620      	mov	r0, r4
 800af40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af44:	f001 b96a 	b.w	800c21c <_fflush_r>
 800af48:	bd10      	pop	{r4, pc}
 800af4a:	bf00      	nop
 800af4c:	24000ba4 	.word	0x24000ba4
 800af50:	24000c0c 	.word	0x24000c0c
 800af54:	24000c74 	.word	0x24000c74

0800af58 <global_stdio_init.part.0>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	4b0b      	ldr	r3, [pc, #44]	@ (800af88 <global_stdio_init.part.0+0x30>)
 800af5c:	4c0b      	ldr	r4, [pc, #44]	@ (800af8c <global_stdio_init.part.0+0x34>)
 800af5e:	4a0c      	ldr	r2, [pc, #48]	@ (800af90 <global_stdio_init.part.0+0x38>)
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	4620      	mov	r0, r4
 800af64:	2200      	movs	r2, #0
 800af66:	2104      	movs	r1, #4
 800af68:	f7ff ff94 	bl	800ae94 <std>
 800af6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af70:	2201      	movs	r2, #1
 800af72:	2109      	movs	r1, #9
 800af74:	f7ff ff8e 	bl	800ae94 <std>
 800af78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af7c:	2202      	movs	r2, #2
 800af7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af82:	2112      	movs	r1, #18
 800af84:	f7ff bf86 	b.w	800ae94 <std>
 800af88:	24000cdc 	.word	0x24000cdc
 800af8c:	24000ba4 	.word	0x24000ba4
 800af90:	0800af01 	.word	0x0800af01

0800af94 <__sfp_lock_acquire>:
 800af94:	4801      	ldr	r0, [pc, #4]	@ (800af9c <__sfp_lock_acquire+0x8>)
 800af96:	f000 b8e2 	b.w	800b15e <__retarget_lock_acquire_recursive>
 800af9a:	bf00      	nop
 800af9c:	24000ce1 	.word	0x24000ce1

0800afa0 <__sfp_lock_release>:
 800afa0:	4801      	ldr	r0, [pc, #4]	@ (800afa8 <__sfp_lock_release+0x8>)
 800afa2:	f000 b8dd 	b.w	800b160 <__retarget_lock_release_recursive>
 800afa6:	bf00      	nop
 800afa8:	24000ce1 	.word	0x24000ce1

0800afac <__sinit>:
 800afac:	b510      	push	{r4, lr}
 800afae:	4604      	mov	r4, r0
 800afb0:	f7ff fff0 	bl	800af94 <__sfp_lock_acquire>
 800afb4:	6a23      	ldr	r3, [r4, #32]
 800afb6:	b11b      	cbz	r3, 800afc0 <__sinit+0x14>
 800afb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afbc:	f7ff bff0 	b.w	800afa0 <__sfp_lock_release>
 800afc0:	4b04      	ldr	r3, [pc, #16]	@ (800afd4 <__sinit+0x28>)
 800afc2:	6223      	str	r3, [r4, #32]
 800afc4:	4b04      	ldr	r3, [pc, #16]	@ (800afd8 <__sinit+0x2c>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1f5      	bne.n	800afb8 <__sinit+0xc>
 800afcc:	f7ff ffc4 	bl	800af58 <global_stdio_init.part.0>
 800afd0:	e7f2      	b.n	800afb8 <__sinit+0xc>
 800afd2:	bf00      	nop
 800afd4:	0800af19 	.word	0x0800af19
 800afd8:	24000cdc 	.word	0x24000cdc

0800afdc <_fwalk_sglue>:
 800afdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe0:	4607      	mov	r7, r0
 800afe2:	4688      	mov	r8, r1
 800afe4:	4614      	mov	r4, r2
 800afe6:	2600      	movs	r6, #0
 800afe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afec:	f1b9 0901 	subs.w	r9, r9, #1
 800aff0:	d505      	bpl.n	800affe <_fwalk_sglue+0x22>
 800aff2:	6824      	ldr	r4, [r4, #0]
 800aff4:	2c00      	cmp	r4, #0
 800aff6:	d1f7      	bne.n	800afe8 <_fwalk_sglue+0xc>
 800aff8:	4630      	mov	r0, r6
 800affa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affe:	89ab      	ldrh	r3, [r5, #12]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d907      	bls.n	800b014 <_fwalk_sglue+0x38>
 800b004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b008:	3301      	adds	r3, #1
 800b00a:	d003      	beq.n	800b014 <_fwalk_sglue+0x38>
 800b00c:	4629      	mov	r1, r5
 800b00e:	4638      	mov	r0, r7
 800b010:	47c0      	blx	r8
 800b012:	4306      	orrs	r6, r0
 800b014:	3568      	adds	r5, #104	@ 0x68
 800b016:	e7e9      	b.n	800afec <_fwalk_sglue+0x10>

0800b018 <iprintf>:
 800b018:	b40f      	push	{r0, r1, r2, r3}
 800b01a:	b507      	push	{r0, r1, r2, lr}
 800b01c:	4906      	ldr	r1, [pc, #24]	@ (800b038 <iprintf+0x20>)
 800b01e:	ab04      	add	r3, sp, #16
 800b020:	6808      	ldr	r0, [r1, #0]
 800b022:	f853 2b04 	ldr.w	r2, [r3], #4
 800b026:	6881      	ldr	r1, [r0, #8]
 800b028:	9301      	str	r3, [sp, #4]
 800b02a:	f000 feb1 	bl	800bd90 <_vfiprintf_r>
 800b02e:	b003      	add	sp, #12
 800b030:	f85d eb04 	ldr.w	lr, [sp], #4
 800b034:	b004      	add	sp, #16
 800b036:	4770      	bx	lr
 800b038:	2400001c 	.word	0x2400001c

0800b03c <_puts_r>:
 800b03c:	6a03      	ldr	r3, [r0, #32]
 800b03e:	b570      	push	{r4, r5, r6, lr}
 800b040:	6884      	ldr	r4, [r0, #8]
 800b042:	4605      	mov	r5, r0
 800b044:	460e      	mov	r6, r1
 800b046:	b90b      	cbnz	r3, 800b04c <_puts_r+0x10>
 800b048:	f7ff ffb0 	bl	800afac <__sinit>
 800b04c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b04e:	07db      	lsls	r3, r3, #31
 800b050:	d405      	bmi.n	800b05e <_puts_r+0x22>
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	0598      	lsls	r0, r3, #22
 800b056:	d402      	bmi.n	800b05e <_puts_r+0x22>
 800b058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b05a:	f000 f880 	bl	800b15e <__retarget_lock_acquire_recursive>
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	0719      	lsls	r1, r3, #28
 800b062:	d502      	bpl.n	800b06a <_puts_r+0x2e>
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d135      	bne.n	800b0d6 <_puts_r+0x9a>
 800b06a:	4621      	mov	r1, r4
 800b06c:	4628      	mov	r0, r5
 800b06e:	f001 fd05 	bl	800ca7c <__swsetup_r>
 800b072:	b380      	cbz	r0, 800b0d6 <_puts_r+0x9a>
 800b074:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b07a:	07da      	lsls	r2, r3, #31
 800b07c:	d405      	bmi.n	800b08a <_puts_r+0x4e>
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	059b      	lsls	r3, r3, #22
 800b082:	d402      	bmi.n	800b08a <_puts_r+0x4e>
 800b084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b086:	f000 f86b 	bl	800b160 <__retarget_lock_release_recursive>
 800b08a:	4628      	mov	r0, r5
 800b08c:	bd70      	pop	{r4, r5, r6, pc}
 800b08e:	2b00      	cmp	r3, #0
 800b090:	da04      	bge.n	800b09c <_puts_r+0x60>
 800b092:	69a2      	ldr	r2, [r4, #24]
 800b094:	429a      	cmp	r2, r3
 800b096:	dc17      	bgt.n	800b0c8 <_puts_r+0x8c>
 800b098:	290a      	cmp	r1, #10
 800b09a:	d015      	beq.n	800b0c8 <_puts_r+0x8c>
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	1c5a      	adds	r2, r3, #1
 800b0a0:	6022      	str	r2, [r4, #0]
 800b0a2:	7019      	strb	r1, [r3, #0]
 800b0a4:	68a3      	ldr	r3, [r4, #8]
 800b0a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	60a3      	str	r3, [r4, #8]
 800b0ae:	2900      	cmp	r1, #0
 800b0b0:	d1ed      	bne.n	800b08e <_puts_r+0x52>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	da11      	bge.n	800b0da <_puts_r+0x9e>
 800b0b6:	4622      	mov	r2, r4
 800b0b8:	210a      	movs	r1, #10
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f001 fc9f 	bl	800c9fe <__swbuf_r>
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d0d7      	beq.n	800b074 <_puts_r+0x38>
 800b0c4:	250a      	movs	r5, #10
 800b0c6:	e7d7      	b.n	800b078 <_puts_r+0x3c>
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f001 fc97 	bl	800c9fe <__swbuf_r>
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	d1e7      	bne.n	800b0a4 <_puts_r+0x68>
 800b0d4:	e7ce      	b.n	800b074 <_puts_r+0x38>
 800b0d6:	3e01      	subs	r6, #1
 800b0d8:	e7e4      	b.n	800b0a4 <_puts_r+0x68>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	1c5a      	adds	r2, r3, #1
 800b0de:	6022      	str	r2, [r4, #0]
 800b0e0:	220a      	movs	r2, #10
 800b0e2:	701a      	strb	r2, [r3, #0]
 800b0e4:	e7ee      	b.n	800b0c4 <_puts_r+0x88>
	...

0800b0e8 <puts>:
 800b0e8:	4b02      	ldr	r3, [pc, #8]	@ (800b0f4 <puts+0xc>)
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	f7ff bfa5 	b.w	800b03c <_puts_r>
 800b0f2:	bf00      	nop
 800b0f4:	2400001c 	.word	0x2400001c

0800b0f8 <memset>:
 800b0f8:	4402      	add	r2, r0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d100      	bne.n	800b102 <memset+0xa>
 800b100:	4770      	bx	lr
 800b102:	f803 1b01 	strb.w	r1, [r3], #1
 800b106:	e7f9      	b.n	800b0fc <memset+0x4>

0800b108 <__errno>:
 800b108:	4b01      	ldr	r3, [pc, #4]	@ (800b110 <__errno+0x8>)
 800b10a:	6818      	ldr	r0, [r3, #0]
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	2400001c 	.word	0x2400001c

0800b114 <__libc_init_array>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	4d0d      	ldr	r5, [pc, #52]	@ (800b14c <__libc_init_array+0x38>)
 800b118:	4c0d      	ldr	r4, [pc, #52]	@ (800b150 <__libc_init_array+0x3c>)
 800b11a:	1b64      	subs	r4, r4, r5
 800b11c:	10a4      	asrs	r4, r4, #2
 800b11e:	2600      	movs	r6, #0
 800b120:	42a6      	cmp	r6, r4
 800b122:	d109      	bne.n	800b138 <__libc_init_array+0x24>
 800b124:	4d0b      	ldr	r5, [pc, #44]	@ (800b154 <__libc_init_array+0x40>)
 800b126:	4c0c      	ldr	r4, [pc, #48]	@ (800b158 <__libc_init_array+0x44>)
 800b128:	f001 fede 	bl	800cee8 <_init>
 800b12c:	1b64      	subs	r4, r4, r5
 800b12e:	10a4      	asrs	r4, r4, #2
 800b130:	2600      	movs	r6, #0
 800b132:	42a6      	cmp	r6, r4
 800b134:	d105      	bne.n	800b142 <__libc_init_array+0x2e>
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	f855 3b04 	ldr.w	r3, [r5], #4
 800b13c:	4798      	blx	r3
 800b13e:	3601      	adds	r6, #1
 800b140:	e7ee      	b.n	800b120 <__libc_init_array+0xc>
 800b142:	f855 3b04 	ldr.w	r3, [r5], #4
 800b146:	4798      	blx	r3
 800b148:	3601      	adds	r6, #1
 800b14a:	e7f2      	b.n	800b132 <__libc_init_array+0x1e>
 800b14c:	0800d4bc 	.word	0x0800d4bc
 800b150:	0800d4bc 	.word	0x0800d4bc
 800b154:	0800d4bc 	.word	0x0800d4bc
 800b158:	0800d4c0 	.word	0x0800d4c0

0800b15c <__retarget_lock_init_recursive>:
 800b15c:	4770      	bx	lr

0800b15e <__retarget_lock_acquire_recursive>:
 800b15e:	4770      	bx	lr

0800b160 <__retarget_lock_release_recursive>:
 800b160:	4770      	bx	lr
	...

0800b164 <_localeconv_r>:
 800b164:	4800      	ldr	r0, [pc, #0]	@ (800b168 <_localeconv_r+0x4>)
 800b166:	4770      	bx	lr
 800b168:	2400015c 	.word	0x2400015c

0800b16c <quorem>:
 800b16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b170:	6903      	ldr	r3, [r0, #16]
 800b172:	690c      	ldr	r4, [r1, #16]
 800b174:	42a3      	cmp	r3, r4
 800b176:	4607      	mov	r7, r0
 800b178:	db7e      	blt.n	800b278 <quorem+0x10c>
 800b17a:	3c01      	subs	r4, #1
 800b17c:	f101 0814 	add.w	r8, r1, #20
 800b180:	00a3      	lsls	r3, r4, #2
 800b182:	f100 0514 	add.w	r5, r0, #20
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b196:	3301      	adds	r3, #1
 800b198:	429a      	cmp	r2, r3
 800b19a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b19e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1a2:	d32e      	bcc.n	800b202 <quorem+0x96>
 800b1a4:	f04f 0a00 	mov.w	sl, #0
 800b1a8:	46c4      	mov	ip, r8
 800b1aa:	46ae      	mov	lr, r5
 800b1ac:	46d3      	mov	fp, sl
 800b1ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1b2:	b298      	uxth	r0, r3
 800b1b4:	fb06 a000 	mla	r0, r6, r0, sl
 800b1b8:	0c02      	lsrs	r2, r0, #16
 800b1ba:	0c1b      	lsrs	r3, r3, #16
 800b1bc:	fb06 2303 	mla	r3, r6, r3, r2
 800b1c0:	f8de 2000 	ldr.w	r2, [lr]
 800b1c4:	b280      	uxth	r0, r0
 800b1c6:	b292      	uxth	r2, r2
 800b1c8:	1a12      	subs	r2, r2, r0
 800b1ca:	445a      	add	r2, fp
 800b1cc:	f8de 0000 	ldr.w	r0, [lr]
 800b1d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b1da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b1de:	b292      	uxth	r2, r2
 800b1e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b1e4:	45e1      	cmp	r9, ip
 800b1e6:	f84e 2b04 	str.w	r2, [lr], #4
 800b1ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b1ee:	d2de      	bcs.n	800b1ae <quorem+0x42>
 800b1f0:	9b00      	ldr	r3, [sp, #0]
 800b1f2:	58eb      	ldr	r3, [r5, r3]
 800b1f4:	b92b      	cbnz	r3, 800b202 <quorem+0x96>
 800b1f6:	9b01      	ldr	r3, [sp, #4]
 800b1f8:	3b04      	subs	r3, #4
 800b1fa:	429d      	cmp	r5, r3
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	d32f      	bcc.n	800b260 <quorem+0xf4>
 800b200:	613c      	str	r4, [r7, #16]
 800b202:	4638      	mov	r0, r7
 800b204:	f001 fab0 	bl	800c768 <__mcmp>
 800b208:	2800      	cmp	r0, #0
 800b20a:	db25      	blt.n	800b258 <quorem+0xec>
 800b20c:	4629      	mov	r1, r5
 800b20e:	2000      	movs	r0, #0
 800b210:	f858 2b04 	ldr.w	r2, [r8], #4
 800b214:	f8d1 c000 	ldr.w	ip, [r1]
 800b218:	fa1f fe82 	uxth.w	lr, r2
 800b21c:	fa1f f38c 	uxth.w	r3, ip
 800b220:	eba3 030e 	sub.w	r3, r3, lr
 800b224:	4403      	add	r3, r0
 800b226:	0c12      	lsrs	r2, r2, #16
 800b228:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b22c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b230:	b29b      	uxth	r3, r3
 800b232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b236:	45c1      	cmp	r9, r8
 800b238:	f841 3b04 	str.w	r3, [r1], #4
 800b23c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b240:	d2e6      	bcs.n	800b210 <quorem+0xa4>
 800b242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b24a:	b922      	cbnz	r2, 800b256 <quorem+0xea>
 800b24c:	3b04      	subs	r3, #4
 800b24e:	429d      	cmp	r5, r3
 800b250:	461a      	mov	r2, r3
 800b252:	d30b      	bcc.n	800b26c <quorem+0x100>
 800b254:	613c      	str	r4, [r7, #16]
 800b256:	3601      	adds	r6, #1
 800b258:	4630      	mov	r0, r6
 800b25a:	b003      	add	sp, #12
 800b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b260:	6812      	ldr	r2, [r2, #0]
 800b262:	3b04      	subs	r3, #4
 800b264:	2a00      	cmp	r2, #0
 800b266:	d1cb      	bne.n	800b200 <quorem+0x94>
 800b268:	3c01      	subs	r4, #1
 800b26a:	e7c6      	b.n	800b1fa <quorem+0x8e>
 800b26c:	6812      	ldr	r2, [r2, #0]
 800b26e:	3b04      	subs	r3, #4
 800b270:	2a00      	cmp	r2, #0
 800b272:	d1ef      	bne.n	800b254 <quorem+0xe8>
 800b274:	3c01      	subs	r4, #1
 800b276:	e7ea      	b.n	800b24e <quorem+0xe2>
 800b278:	2000      	movs	r0, #0
 800b27a:	e7ee      	b.n	800b25a <quorem+0xee>
 800b27c:	0000      	movs	r0, r0
	...

0800b280 <_dtoa_r>:
 800b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	ed2d 8b02 	vpush	{d8}
 800b288:	69c7      	ldr	r7, [r0, #28]
 800b28a:	b091      	sub	sp, #68	@ 0x44
 800b28c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b290:	ec55 4b10 	vmov	r4, r5, d0
 800b294:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b296:	9107      	str	r1, [sp, #28]
 800b298:	4681      	mov	r9, r0
 800b29a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b29c:	930d      	str	r3, [sp, #52]	@ 0x34
 800b29e:	b97f      	cbnz	r7, 800b2c0 <_dtoa_r+0x40>
 800b2a0:	2010      	movs	r0, #16
 800b2a2:	f000 fe8d 	bl	800bfc0 <malloc>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	f8c9 001c 	str.w	r0, [r9, #28]
 800b2ac:	b920      	cbnz	r0, 800b2b8 <_dtoa_r+0x38>
 800b2ae:	4ba0      	ldr	r3, [pc, #640]	@ (800b530 <_dtoa_r+0x2b0>)
 800b2b0:	21ef      	movs	r1, #239	@ 0xef
 800b2b2:	48a0      	ldr	r0, [pc, #640]	@ (800b534 <_dtoa_r+0x2b4>)
 800b2b4:	f001 fd20 	bl	800ccf8 <__assert_func>
 800b2b8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b2bc:	6007      	str	r7, [r0, #0]
 800b2be:	60c7      	str	r7, [r0, #12]
 800b2c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b2c4:	6819      	ldr	r1, [r3, #0]
 800b2c6:	b159      	cbz	r1, 800b2e0 <_dtoa_r+0x60>
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	604a      	str	r2, [r1, #4]
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	4093      	lsls	r3, r2
 800b2d0:	608b      	str	r3, [r1, #8]
 800b2d2:	4648      	mov	r0, r9
 800b2d4:	f001 f816 	bl	800c304 <_Bfree>
 800b2d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	601a      	str	r2, [r3, #0]
 800b2e0:	1e2b      	subs	r3, r5, #0
 800b2e2:	bfbb      	ittet	lt
 800b2e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b2e8:	9303      	strlt	r3, [sp, #12]
 800b2ea:	2300      	movge	r3, #0
 800b2ec:	2201      	movlt	r2, #1
 800b2ee:	bfac      	ite	ge
 800b2f0:	6033      	strge	r3, [r6, #0]
 800b2f2:	6032      	strlt	r2, [r6, #0]
 800b2f4:	4b90      	ldr	r3, [pc, #576]	@ (800b538 <_dtoa_r+0x2b8>)
 800b2f6:	9e03      	ldr	r6, [sp, #12]
 800b2f8:	43b3      	bics	r3, r6
 800b2fa:	d110      	bne.n	800b31e <_dtoa_r+0x9e>
 800b2fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b308:	4323      	orrs	r3, r4
 800b30a:	f000 84e6 	beq.w	800bcda <_dtoa_r+0xa5a>
 800b30e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b310:	4f8a      	ldr	r7, [pc, #552]	@ (800b53c <_dtoa_r+0x2bc>)
 800b312:	2b00      	cmp	r3, #0
 800b314:	f000 84e8 	beq.w	800bce8 <_dtoa_r+0xa68>
 800b318:	1cfb      	adds	r3, r7, #3
 800b31a:	f000 bce3 	b.w	800bce4 <_dtoa_r+0xa64>
 800b31e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b322:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b32a:	d10a      	bne.n	800b342 <_dtoa_r+0xc2>
 800b32c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b32e:	2301      	movs	r3, #1
 800b330:	6013      	str	r3, [r2, #0]
 800b332:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b334:	b113      	cbz	r3, 800b33c <_dtoa_r+0xbc>
 800b336:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b338:	4b81      	ldr	r3, [pc, #516]	@ (800b540 <_dtoa_r+0x2c0>)
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	4f81      	ldr	r7, [pc, #516]	@ (800b544 <_dtoa_r+0x2c4>)
 800b33e:	f000 bcd3 	b.w	800bce8 <_dtoa_r+0xa68>
 800b342:	aa0e      	add	r2, sp, #56	@ 0x38
 800b344:	a90f      	add	r1, sp, #60	@ 0x3c
 800b346:	4648      	mov	r0, r9
 800b348:	eeb0 0b48 	vmov.f64	d0, d8
 800b34c:	f001 fabc 	bl	800c8c8 <__d2b>
 800b350:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b354:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b356:	9001      	str	r0, [sp, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d045      	beq.n	800b3e8 <_dtoa_r+0x168>
 800b35c:	eeb0 7b48 	vmov.f64	d7, d8
 800b360:	ee18 1a90 	vmov	r1, s17
 800b364:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b368:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b36c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b370:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b374:	2500      	movs	r5, #0
 800b376:	ee07 1a90 	vmov	s15, r1
 800b37a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b37e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b518 <_dtoa_r+0x298>
 800b382:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b386:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b520 <_dtoa_r+0x2a0>
 800b38a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b38e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b528 <_dtoa_r+0x2a8>
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b39a:	eeb0 7b46 	vmov.f64	d7, d6
 800b39e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b3a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b3a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ae:	ee16 8a90 	vmov	r8, s13
 800b3b2:	d508      	bpl.n	800b3c6 <_dtoa_r+0x146>
 800b3b4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b3b8:	eeb4 6b47 	vcmp.f64	d6, d7
 800b3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c0:	bf18      	it	ne
 800b3c2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800b3c6:	f1b8 0f16 	cmp.w	r8, #22
 800b3ca:	d82b      	bhi.n	800b424 <_dtoa_r+0x1a4>
 800b3cc:	495e      	ldr	r1, [pc, #376]	@ (800b548 <_dtoa_r+0x2c8>)
 800b3ce:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b3d2:	ed91 7b00 	vldr	d7, [r1]
 800b3d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3de:	d501      	bpl.n	800b3e4 <_dtoa_r+0x164>
 800b3e0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	e01e      	b.n	800b426 <_dtoa_r+0x1a6>
 800b3e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b3f0:	2920      	cmp	r1, #32
 800b3f2:	bfc1      	itttt	gt
 800b3f4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b3f8:	408e      	lslgt	r6, r1
 800b3fa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b3fe:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b402:	bfd6      	itet	le
 800b404:	f1c1 0120 	rsble	r1, r1, #32
 800b408:	4331      	orrgt	r1, r6
 800b40a:	fa04 f101 	lslle.w	r1, r4, r1
 800b40e:	ee07 1a90 	vmov	s15, r1
 800b412:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b416:	3b01      	subs	r3, #1
 800b418:	ee17 1a90 	vmov	r1, s15
 800b41c:	2501      	movs	r5, #1
 800b41e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b422:	e7a8      	b.n	800b376 <_dtoa_r+0xf6>
 800b424:	2101      	movs	r1, #1
 800b426:	1ad2      	subs	r2, r2, r3
 800b428:	1e53      	subs	r3, r2, #1
 800b42a:	9306      	str	r3, [sp, #24]
 800b42c:	bf45      	ittet	mi
 800b42e:	f1c2 0301 	rsbmi	r3, r2, #1
 800b432:	9304      	strmi	r3, [sp, #16]
 800b434:	2300      	movpl	r3, #0
 800b436:	2300      	movmi	r3, #0
 800b438:	bf4c      	ite	mi
 800b43a:	9306      	strmi	r3, [sp, #24]
 800b43c:	9304      	strpl	r3, [sp, #16]
 800b43e:	f1b8 0f00 	cmp.w	r8, #0
 800b442:	910c      	str	r1, [sp, #48]	@ 0x30
 800b444:	db18      	blt.n	800b478 <_dtoa_r+0x1f8>
 800b446:	9b06      	ldr	r3, [sp, #24]
 800b448:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b44c:	4443      	add	r3, r8
 800b44e:	9306      	str	r3, [sp, #24]
 800b450:	2300      	movs	r3, #0
 800b452:	9a07      	ldr	r2, [sp, #28]
 800b454:	2a09      	cmp	r2, #9
 800b456:	d845      	bhi.n	800b4e4 <_dtoa_r+0x264>
 800b458:	2a05      	cmp	r2, #5
 800b45a:	bfc4      	itt	gt
 800b45c:	3a04      	subgt	r2, #4
 800b45e:	9207      	strgt	r2, [sp, #28]
 800b460:	9a07      	ldr	r2, [sp, #28]
 800b462:	f1a2 0202 	sub.w	r2, r2, #2
 800b466:	bfcc      	ite	gt
 800b468:	2400      	movgt	r4, #0
 800b46a:	2401      	movle	r4, #1
 800b46c:	2a03      	cmp	r2, #3
 800b46e:	d844      	bhi.n	800b4fa <_dtoa_r+0x27a>
 800b470:	e8df f002 	tbb	[pc, r2]
 800b474:	0b173634 	.word	0x0b173634
 800b478:	9b04      	ldr	r3, [sp, #16]
 800b47a:	2200      	movs	r2, #0
 800b47c:	eba3 0308 	sub.w	r3, r3, r8
 800b480:	9304      	str	r3, [sp, #16]
 800b482:	920a      	str	r2, [sp, #40]	@ 0x28
 800b484:	f1c8 0300 	rsb	r3, r8, #0
 800b488:	e7e3      	b.n	800b452 <_dtoa_r+0x1d2>
 800b48a:	2201      	movs	r2, #1
 800b48c:	9208      	str	r2, [sp, #32]
 800b48e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b490:	eb08 0b02 	add.w	fp, r8, r2
 800b494:	f10b 0a01 	add.w	sl, fp, #1
 800b498:	4652      	mov	r2, sl
 800b49a:	2a01      	cmp	r2, #1
 800b49c:	bfb8      	it	lt
 800b49e:	2201      	movlt	r2, #1
 800b4a0:	e006      	b.n	800b4b0 <_dtoa_r+0x230>
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	9208      	str	r2, [sp, #32]
 800b4a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4a8:	2a00      	cmp	r2, #0
 800b4aa:	dd29      	ble.n	800b500 <_dtoa_r+0x280>
 800b4ac:	4693      	mov	fp, r2
 800b4ae:	4692      	mov	sl, r2
 800b4b0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	2004      	movs	r0, #4
 800b4b8:	f100 0614 	add.w	r6, r0, #20
 800b4bc:	4296      	cmp	r6, r2
 800b4be:	d926      	bls.n	800b50e <_dtoa_r+0x28e>
 800b4c0:	6079      	str	r1, [r7, #4]
 800b4c2:	4648      	mov	r0, r9
 800b4c4:	9305      	str	r3, [sp, #20]
 800b4c6:	f000 fedd 	bl	800c284 <_Balloc>
 800b4ca:	9b05      	ldr	r3, [sp, #20]
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d13e      	bne.n	800b550 <_dtoa_r+0x2d0>
 800b4d2:	4b1e      	ldr	r3, [pc, #120]	@ (800b54c <_dtoa_r+0x2cc>)
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b4da:	e6ea      	b.n	800b2b2 <_dtoa_r+0x32>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	e7e1      	b.n	800b4a4 <_dtoa_r+0x224>
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	e7d3      	b.n	800b48c <_dtoa_r+0x20c>
 800b4e4:	2401      	movs	r4, #1
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b4ec:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	46da      	mov	sl, fp
 800b4f4:	2212      	movs	r2, #18
 800b4f6:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4f8:	e7da      	b.n	800b4b0 <_dtoa_r+0x230>
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	9208      	str	r2, [sp, #32]
 800b4fe:	e7f5      	b.n	800b4ec <_dtoa_r+0x26c>
 800b500:	f04f 0b01 	mov.w	fp, #1
 800b504:	46da      	mov	sl, fp
 800b506:	465a      	mov	r2, fp
 800b508:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b50c:	e7d0      	b.n	800b4b0 <_dtoa_r+0x230>
 800b50e:	3101      	adds	r1, #1
 800b510:	0040      	lsls	r0, r0, #1
 800b512:	e7d1      	b.n	800b4b8 <_dtoa_r+0x238>
 800b514:	f3af 8000 	nop.w
 800b518:	636f4361 	.word	0x636f4361
 800b51c:	3fd287a7 	.word	0x3fd287a7
 800b520:	8b60c8b3 	.word	0x8b60c8b3
 800b524:	3fc68a28 	.word	0x3fc68a28
 800b528:	509f79fb 	.word	0x509f79fb
 800b52c:	3fd34413 	.word	0x3fd34413
 800b530:	0800d05d 	.word	0x0800d05d
 800b534:	0800d074 	.word	0x0800d074
 800b538:	7ff00000 	.word	0x7ff00000
 800b53c:	0800d059 	.word	0x0800d059
 800b540:	0800d02d 	.word	0x0800d02d
 800b544:	0800d02c 	.word	0x0800d02c
 800b548:	0800d2e8 	.word	0x0800d2e8
 800b54c:	0800d0cc 	.word	0x0800d0cc
 800b550:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b554:	f1ba 0f0e 	cmp.w	sl, #14
 800b558:	6010      	str	r0, [r2, #0]
 800b55a:	d86e      	bhi.n	800b63a <_dtoa_r+0x3ba>
 800b55c:	2c00      	cmp	r4, #0
 800b55e:	d06c      	beq.n	800b63a <_dtoa_r+0x3ba>
 800b560:	f1b8 0f00 	cmp.w	r8, #0
 800b564:	f340 80b4 	ble.w	800b6d0 <_dtoa_r+0x450>
 800b568:	4ac8      	ldr	r2, [pc, #800]	@ (800b88c <_dtoa_r+0x60c>)
 800b56a:	f008 010f 	and.w	r1, r8, #15
 800b56e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b572:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b576:	ed92 7b00 	vldr	d7, [r2]
 800b57a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b57e:	f000 809b 	beq.w	800b6b8 <_dtoa_r+0x438>
 800b582:	4ac3      	ldr	r2, [pc, #780]	@ (800b890 <_dtoa_r+0x610>)
 800b584:	ed92 6b08 	vldr	d6, [r2, #32]
 800b588:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b58c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b590:	f001 010f 	and.w	r1, r1, #15
 800b594:	2203      	movs	r2, #3
 800b596:	48be      	ldr	r0, [pc, #760]	@ (800b890 <_dtoa_r+0x610>)
 800b598:	2900      	cmp	r1, #0
 800b59a:	f040 808f 	bne.w	800b6bc <_dtoa_r+0x43c>
 800b59e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b5a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b5a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b5aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b5ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5b0:	2900      	cmp	r1, #0
 800b5b2:	f000 80b3 	beq.w	800b71c <_dtoa_r+0x49c>
 800b5b6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b5ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c2:	f140 80ab 	bpl.w	800b71c <_dtoa_r+0x49c>
 800b5c6:	f1ba 0f00 	cmp.w	sl, #0
 800b5ca:	f000 80a7 	beq.w	800b71c <_dtoa_r+0x49c>
 800b5ce:	f1bb 0f00 	cmp.w	fp, #0
 800b5d2:	dd30      	ble.n	800b636 <_dtoa_r+0x3b6>
 800b5d4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b5d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b5e0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800b5e4:	9105      	str	r1, [sp, #20]
 800b5e6:	3201      	adds	r2, #1
 800b5e8:	465c      	mov	r4, fp
 800b5ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b5ee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b5f2:	ee07 2a90 	vmov	s15, r2
 800b5f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b5fa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b5fe:	ee15 2a90 	vmov	r2, s11
 800b602:	ec51 0b15 	vmov	r0, r1, d5
 800b606:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b60a:	2c00      	cmp	r4, #0
 800b60c:	f040 808a 	bne.w	800b724 <_dtoa_r+0x4a4>
 800b610:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b614:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b618:	ec41 0b17 	vmov	d7, r0, r1
 800b61c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b624:	f300 826a 	bgt.w	800bafc <_dtoa_r+0x87c>
 800b628:	eeb1 7b47 	vneg.f64	d7, d7
 800b62c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b634:	d423      	bmi.n	800b67e <_dtoa_r+0x3fe>
 800b636:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b63a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b63c:	2a00      	cmp	r2, #0
 800b63e:	f2c0 8129 	blt.w	800b894 <_dtoa_r+0x614>
 800b642:	f1b8 0f0e 	cmp.w	r8, #14
 800b646:	f300 8125 	bgt.w	800b894 <_dtoa_r+0x614>
 800b64a:	4b90      	ldr	r3, [pc, #576]	@ (800b88c <_dtoa_r+0x60c>)
 800b64c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b650:	ed93 6b00 	vldr	d6, [r3]
 800b654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b656:	2b00      	cmp	r3, #0
 800b658:	f280 80c8 	bge.w	800b7ec <_dtoa_r+0x56c>
 800b65c:	f1ba 0f00 	cmp.w	sl, #0
 800b660:	f300 80c4 	bgt.w	800b7ec <_dtoa_r+0x56c>
 800b664:	d10b      	bne.n	800b67e <_dtoa_r+0x3fe>
 800b666:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b66a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b66e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b672:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b67a:	f2c0 823c 	blt.w	800baf6 <_dtoa_r+0x876>
 800b67e:	2400      	movs	r4, #0
 800b680:	4625      	mov	r5, r4
 800b682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b684:	43db      	mvns	r3, r3
 800b686:	9305      	str	r3, [sp, #20]
 800b688:	463e      	mov	r6, r7
 800b68a:	f04f 0800 	mov.w	r8, #0
 800b68e:	4621      	mov	r1, r4
 800b690:	4648      	mov	r0, r9
 800b692:	f000 fe37 	bl	800c304 <_Bfree>
 800b696:	2d00      	cmp	r5, #0
 800b698:	f000 80a2 	beq.w	800b7e0 <_dtoa_r+0x560>
 800b69c:	f1b8 0f00 	cmp.w	r8, #0
 800b6a0:	d005      	beq.n	800b6ae <_dtoa_r+0x42e>
 800b6a2:	45a8      	cmp	r8, r5
 800b6a4:	d003      	beq.n	800b6ae <_dtoa_r+0x42e>
 800b6a6:	4641      	mov	r1, r8
 800b6a8:	4648      	mov	r0, r9
 800b6aa:	f000 fe2b 	bl	800c304 <_Bfree>
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	4648      	mov	r0, r9
 800b6b2:	f000 fe27 	bl	800c304 <_Bfree>
 800b6b6:	e093      	b.n	800b7e0 <_dtoa_r+0x560>
 800b6b8:	2202      	movs	r2, #2
 800b6ba:	e76c      	b.n	800b596 <_dtoa_r+0x316>
 800b6bc:	07cc      	lsls	r4, r1, #31
 800b6be:	d504      	bpl.n	800b6ca <_dtoa_r+0x44a>
 800b6c0:	ed90 6b00 	vldr	d6, [r0]
 800b6c4:	3201      	adds	r2, #1
 800b6c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b6ca:	1049      	asrs	r1, r1, #1
 800b6cc:	3008      	adds	r0, #8
 800b6ce:	e763      	b.n	800b598 <_dtoa_r+0x318>
 800b6d0:	d022      	beq.n	800b718 <_dtoa_r+0x498>
 800b6d2:	f1c8 0100 	rsb	r1, r8, #0
 800b6d6:	4a6d      	ldr	r2, [pc, #436]	@ (800b88c <_dtoa_r+0x60c>)
 800b6d8:	f001 000f 	and.w	r0, r1, #15
 800b6dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b6e0:	ed92 7b00 	vldr	d7, [r2]
 800b6e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b6e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b6ec:	4868      	ldr	r0, [pc, #416]	@ (800b890 <_dtoa_r+0x610>)
 800b6ee:	1109      	asrs	r1, r1, #4
 800b6f0:	2400      	movs	r4, #0
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	b929      	cbnz	r1, 800b702 <_dtoa_r+0x482>
 800b6f6:	2c00      	cmp	r4, #0
 800b6f8:	f43f af57 	beq.w	800b5aa <_dtoa_r+0x32a>
 800b6fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b700:	e753      	b.n	800b5aa <_dtoa_r+0x32a>
 800b702:	07ce      	lsls	r6, r1, #31
 800b704:	d505      	bpl.n	800b712 <_dtoa_r+0x492>
 800b706:	ed90 6b00 	vldr	d6, [r0]
 800b70a:	3201      	adds	r2, #1
 800b70c:	2401      	movs	r4, #1
 800b70e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b712:	1049      	asrs	r1, r1, #1
 800b714:	3008      	adds	r0, #8
 800b716:	e7ed      	b.n	800b6f4 <_dtoa_r+0x474>
 800b718:	2202      	movs	r2, #2
 800b71a:	e746      	b.n	800b5aa <_dtoa_r+0x32a>
 800b71c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b720:	4654      	mov	r4, sl
 800b722:	e762      	b.n	800b5ea <_dtoa_r+0x36a>
 800b724:	4a59      	ldr	r2, [pc, #356]	@ (800b88c <_dtoa_r+0x60c>)
 800b726:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b72a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b72e:	9a08      	ldr	r2, [sp, #32]
 800b730:	ec41 0b17 	vmov	d7, r0, r1
 800b734:	443c      	add	r4, r7
 800b736:	b34a      	cbz	r2, 800b78c <_dtoa_r+0x50c>
 800b738:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b73c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b740:	463e      	mov	r6, r7
 800b742:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b746:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b74a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b74e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b752:	ee14 2a90 	vmov	r2, s9
 800b756:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b75a:	3230      	adds	r2, #48	@ 0x30
 800b75c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b760:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b768:	f806 2b01 	strb.w	r2, [r6], #1
 800b76c:	d438      	bmi.n	800b7e0 <_dtoa_r+0x560>
 800b76e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b772:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77a:	d46e      	bmi.n	800b85a <_dtoa_r+0x5da>
 800b77c:	42a6      	cmp	r6, r4
 800b77e:	f43f af5a 	beq.w	800b636 <_dtoa_r+0x3b6>
 800b782:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b786:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b78a:	e7e0      	b.n	800b74e <_dtoa_r+0x4ce>
 800b78c:	4621      	mov	r1, r4
 800b78e:	463e      	mov	r6, r7
 800b790:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b794:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b798:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b79c:	ee14 2a90 	vmov	r2, s9
 800b7a0:	3230      	adds	r2, #48	@ 0x30
 800b7a2:	f806 2b01 	strb.w	r2, [r6], #1
 800b7a6:	42a6      	cmp	r6, r4
 800b7a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b7ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b7b0:	d119      	bne.n	800b7e6 <_dtoa_r+0x566>
 800b7b2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b7b6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b7ba:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c2:	dc4a      	bgt.n	800b85a <_dtoa_r+0x5da>
 800b7c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b7c8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d0:	f57f af31 	bpl.w	800b636 <_dtoa_r+0x3b6>
 800b7d4:	460e      	mov	r6, r1
 800b7d6:	3901      	subs	r1, #1
 800b7d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7dc:	2b30      	cmp	r3, #48	@ 0x30
 800b7de:	d0f9      	beq.n	800b7d4 <_dtoa_r+0x554>
 800b7e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b7e4:	e027      	b.n	800b836 <_dtoa_r+0x5b6>
 800b7e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b7ea:	e7d5      	b.n	800b798 <_dtoa_r+0x518>
 800b7ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b7f0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b7f4:	463e      	mov	r6, r7
 800b7f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b7fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b7fe:	ee15 3a10 	vmov	r3, s10
 800b802:	3330      	adds	r3, #48	@ 0x30
 800b804:	f806 3b01 	strb.w	r3, [r6], #1
 800b808:	1bf3      	subs	r3, r6, r7
 800b80a:	459a      	cmp	sl, r3
 800b80c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b810:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b814:	d132      	bne.n	800b87c <_dtoa_r+0x5fc>
 800b816:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b81a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b822:	dc18      	bgt.n	800b856 <_dtoa_r+0x5d6>
 800b824:	eeb4 7b46 	vcmp.f64	d7, d6
 800b828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b82c:	d103      	bne.n	800b836 <_dtoa_r+0x5b6>
 800b82e:	ee15 3a10 	vmov	r3, s10
 800b832:	07db      	lsls	r3, r3, #31
 800b834:	d40f      	bmi.n	800b856 <_dtoa_r+0x5d6>
 800b836:	9901      	ldr	r1, [sp, #4]
 800b838:	4648      	mov	r0, r9
 800b83a:	f000 fd63 	bl	800c304 <_Bfree>
 800b83e:	2300      	movs	r3, #0
 800b840:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b842:	7033      	strb	r3, [r6, #0]
 800b844:	f108 0301 	add.w	r3, r8, #1
 800b848:	6013      	str	r3, [r2, #0]
 800b84a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f000 824b 	beq.w	800bce8 <_dtoa_r+0xa68>
 800b852:	601e      	str	r6, [r3, #0]
 800b854:	e248      	b.n	800bce8 <_dtoa_r+0xa68>
 800b856:	f8cd 8014 	str.w	r8, [sp, #20]
 800b85a:	4633      	mov	r3, r6
 800b85c:	461e      	mov	r6, r3
 800b85e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b862:	2a39      	cmp	r2, #57	@ 0x39
 800b864:	d106      	bne.n	800b874 <_dtoa_r+0x5f4>
 800b866:	429f      	cmp	r7, r3
 800b868:	d1f8      	bne.n	800b85c <_dtoa_r+0x5dc>
 800b86a:	9a05      	ldr	r2, [sp, #20]
 800b86c:	3201      	adds	r2, #1
 800b86e:	9205      	str	r2, [sp, #20]
 800b870:	2230      	movs	r2, #48	@ 0x30
 800b872:	703a      	strb	r2, [r7, #0]
 800b874:	781a      	ldrb	r2, [r3, #0]
 800b876:	3201      	adds	r2, #1
 800b878:	701a      	strb	r2, [r3, #0]
 800b87a:	e7b1      	b.n	800b7e0 <_dtoa_r+0x560>
 800b87c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b880:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b888:	d1b5      	bne.n	800b7f6 <_dtoa_r+0x576>
 800b88a:	e7d4      	b.n	800b836 <_dtoa_r+0x5b6>
 800b88c:	0800d2e8 	.word	0x0800d2e8
 800b890:	0800d2c0 	.word	0x0800d2c0
 800b894:	9908      	ldr	r1, [sp, #32]
 800b896:	2900      	cmp	r1, #0
 800b898:	f000 80e9 	beq.w	800ba6e <_dtoa_r+0x7ee>
 800b89c:	9907      	ldr	r1, [sp, #28]
 800b89e:	2901      	cmp	r1, #1
 800b8a0:	f300 80cb 	bgt.w	800ba3a <_dtoa_r+0x7ba>
 800b8a4:	2d00      	cmp	r5, #0
 800b8a6:	f000 80c4 	beq.w	800ba32 <_dtoa_r+0x7b2>
 800b8aa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b8ae:	9e04      	ldr	r6, [sp, #16]
 800b8b0:	461c      	mov	r4, r3
 800b8b2:	9305      	str	r3, [sp, #20]
 800b8b4:	9b04      	ldr	r3, [sp, #16]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	9304      	str	r3, [sp, #16]
 800b8ba:	9b06      	ldr	r3, [sp, #24]
 800b8bc:	2101      	movs	r1, #1
 800b8be:	4413      	add	r3, r2
 800b8c0:	4648      	mov	r0, r9
 800b8c2:	9306      	str	r3, [sp, #24]
 800b8c4:	f000 fdd2 	bl	800c46c <__i2b>
 800b8c8:	9b05      	ldr	r3, [sp, #20]
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	b166      	cbz	r6, 800b8e8 <_dtoa_r+0x668>
 800b8ce:	9a06      	ldr	r2, [sp, #24]
 800b8d0:	2a00      	cmp	r2, #0
 800b8d2:	dd09      	ble.n	800b8e8 <_dtoa_r+0x668>
 800b8d4:	42b2      	cmp	r2, r6
 800b8d6:	9904      	ldr	r1, [sp, #16]
 800b8d8:	bfa8      	it	ge
 800b8da:	4632      	movge	r2, r6
 800b8dc:	1a89      	subs	r1, r1, r2
 800b8de:	9104      	str	r1, [sp, #16]
 800b8e0:	9906      	ldr	r1, [sp, #24]
 800b8e2:	1ab6      	subs	r6, r6, r2
 800b8e4:	1a8a      	subs	r2, r1, r2
 800b8e6:	9206      	str	r2, [sp, #24]
 800b8e8:	b30b      	cbz	r3, 800b92e <_dtoa_r+0x6ae>
 800b8ea:	9a08      	ldr	r2, [sp, #32]
 800b8ec:	2a00      	cmp	r2, #0
 800b8ee:	f000 80c5 	beq.w	800ba7c <_dtoa_r+0x7fc>
 800b8f2:	2c00      	cmp	r4, #0
 800b8f4:	f000 80bf 	beq.w	800ba76 <_dtoa_r+0x7f6>
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	4648      	mov	r0, r9
 800b8fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b900:	f000 fe6c 	bl	800c5dc <__pow5mult>
 800b904:	9a01      	ldr	r2, [sp, #4]
 800b906:	4601      	mov	r1, r0
 800b908:	4605      	mov	r5, r0
 800b90a:	4648      	mov	r0, r9
 800b90c:	f000 fdc4 	bl	800c498 <__multiply>
 800b910:	9901      	ldr	r1, [sp, #4]
 800b912:	9005      	str	r0, [sp, #20]
 800b914:	4648      	mov	r0, r9
 800b916:	f000 fcf5 	bl	800c304 <_Bfree>
 800b91a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b91c:	1b1b      	subs	r3, r3, r4
 800b91e:	f000 80b0 	beq.w	800ba82 <_dtoa_r+0x802>
 800b922:	9905      	ldr	r1, [sp, #20]
 800b924:	461a      	mov	r2, r3
 800b926:	4648      	mov	r0, r9
 800b928:	f000 fe58 	bl	800c5dc <__pow5mult>
 800b92c:	9001      	str	r0, [sp, #4]
 800b92e:	2101      	movs	r1, #1
 800b930:	4648      	mov	r0, r9
 800b932:	f000 fd9b 	bl	800c46c <__i2b>
 800b936:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b938:	4604      	mov	r4, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 81da 	beq.w	800bcf4 <_dtoa_r+0xa74>
 800b940:	461a      	mov	r2, r3
 800b942:	4601      	mov	r1, r0
 800b944:	4648      	mov	r0, r9
 800b946:	f000 fe49 	bl	800c5dc <__pow5mult>
 800b94a:	9b07      	ldr	r3, [sp, #28]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	4604      	mov	r4, r0
 800b950:	f300 80a0 	bgt.w	800ba94 <_dtoa_r+0x814>
 800b954:	9b02      	ldr	r3, [sp, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	f040 8096 	bne.w	800ba88 <_dtoa_r+0x808>
 800b95c:	9b03      	ldr	r3, [sp, #12]
 800b95e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b962:	2a00      	cmp	r2, #0
 800b964:	f040 8092 	bne.w	800ba8c <_dtoa_r+0x80c>
 800b968:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b96c:	0d12      	lsrs	r2, r2, #20
 800b96e:	0512      	lsls	r2, r2, #20
 800b970:	2a00      	cmp	r2, #0
 800b972:	f000 808d 	beq.w	800ba90 <_dtoa_r+0x810>
 800b976:	9b04      	ldr	r3, [sp, #16]
 800b978:	3301      	adds	r3, #1
 800b97a:	9304      	str	r3, [sp, #16]
 800b97c:	9b06      	ldr	r3, [sp, #24]
 800b97e:	3301      	adds	r3, #1
 800b980:	9306      	str	r3, [sp, #24]
 800b982:	2301      	movs	r3, #1
 800b984:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b986:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 81b9 	beq.w	800bd00 <_dtoa_r+0xa80>
 800b98e:	6922      	ldr	r2, [r4, #16]
 800b990:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b994:	6910      	ldr	r0, [r2, #16]
 800b996:	f000 fd1d 	bl	800c3d4 <__hi0bits>
 800b99a:	f1c0 0020 	rsb	r0, r0, #32
 800b99e:	9b06      	ldr	r3, [sp, #24]
 800b9a0:	4418      	add	r0, r3
 800b9a2:	f010 001f 	ands.w	r0, r0, #31
 800b9a6:	f000 8081 	beq.w	800baac <_dtoa_r+0x82c>
 800b9aa:	f1c0 0220 	rsb	r2, r0, #32
 800b9ae:	2a04      	cmp	r2, #4
 800b9b0:	dd73      	ble.n	800ba9a <_dtoa_r+0x81a>
 800b9b2:	9b04      	ldr	r3, [sp, #16]
 800b9b4:	f1c0 001c 	rsb	r0, r0, #28
 800b9b8:	4403      	add	r3, r0
 800b9ba:	9304      	str	r3, [sp, #16]
 800b9bc:	9b06      	ldr	r3, [sp, #24]
 800b9be:	4406      	add	r6, r0
 800b9c0:	4403      	add	r3, r0
 800b9c2:	9306      	str	r3, [sp, #24]
 800b9c4:	9b04      	ldr	r3, [sp, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	dd05      	ble.n	800b9d6 <_dtoa_r+0x756>
 800b9ca:	9901      	ldr	r1, [sp, #4]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	4648      	mov	r0, r9
 800b9d0:	f000 fe5e 	bl	800c690 <__lshift>
 800b9d4:	9001      	str	r0, [sp, #4]
 800b9d6:	9b06      	ldr	r3, [sp, #24]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	dd05      	ble.n	800b9e8 <_dtoa_r+0x768>
 800b9dc:	4621      	mov	r1, r4
 800b9de:	461a      	mov	r2, r3
 800b9e0:	4648      	mov	r0, r9
 800b9e2:	f000 fe55 	bl	800c690 <__lshift>
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d060      	beq.n	800bab0 <_dtoa_r+0x830>
 800b9ee:	9801      	ldr	r0, [sp, #4]
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	f000 feb9 	bl	800c768 <__mcmp>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	da5a      	bge.n	800bab0 <_dtoa_r+0x830>
 800b9fa:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b9fe:	9305      	str	r3, [sp, #20]
 800ba00:	9901      	ldr	r1, [sp, #4]
 800ba02:	2300      	movs	r3, #0
 800ba04:	220a      	movs	r2, #10
 800ba06:	4648      	mov	r0, r9
 800ba08:	f000 fc9e 	bl	800c348 <__multadd>
 800ba0c:	9b08      	ldr	r3, [sp, #32]
 800ba0e:	9001      	str	r0, [sp, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 8177 	beq.w	800bd04 <_dtoa_r+0xa84>
 800ba16:	4629      	mov	r1, r5
 800ba18:	2300      	movs	r3, #0
 800ba1a:	220a      	movs	r2, #10
 800ba1c:	4648      	mov	r0, r9
 800ba1e:	f000 fc93 	bl	800c348 <__multadd>
 800ba22:	f1bb 0f00 	cmp.w	fp, #0
 800ba26:	4605      	mov	r5, r0
 800ba28:	dc6e      	bgt.n	800bb08 <_dtoa_r+0x888>
 800ba2a:	9b07      	ldr	r3, [sp, #28]
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	dc48      	bgt.n	800bac2 <_dtoa_r+0x842>
 800ba30:	e06a      	b.n	800bb08 <_dtoa_r+0x888>
 800ba32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ba38:	e739      	b.n	800b8ae <_dtoa_r+0x62e>
 800ba3a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800ba3e:	42a3      	cmp	r3, r4
 800ba40:	db07      	blt.n	800ba52 <_dtoa_r+0x7d2>
 800ba42:	f1ba 0f00 	cmp.w	sl, #0
 800ba46:	eba3 0404 	sub.w	r4, r3, r4
 800ba4a:	db0b      	blt.n	800ba64 <_dtoa_r+0x7e4>
 800ba4c:	9e04      	ldr	r6, [sp, #16]
 800ba4e:	4652      	mov	r2, sl
 800ba50:	e72f      	b.n	800b8b2 <_dtoa_r+0x632>
 800ba52:	1ae2      	subs	r2, r4, r3
 800ba54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba56:	9e04      	ldr	r6, [sp, #16]
 800ba58:	4413      	add	r3, r2
 800ba5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba5c:	4652      	mov	r2, sl
 800ba5e:	4623      	mov	r3, r4
 800ba60:	2400      	movs	r4, #0
 800ba62:	e726      	b.n	800b8b2 <_dtoa_r+0x632>
 800ba64:	9a04      	ldr	r2, [sp, #16]
 800ba66:	eba2 060a 	sub.w	r6, r2, sl
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	e721      	b.n	800b8b2 <_dtoa_r+0x632>
 800ba6e:	9e04      	ldr	r6, [sp, #16]
 800ba70:	9d08      	ldr	r5, [sp, #32]
 800ba72:	461c      	mov	r4, r3
 800ba74:	e72a      	b.n	800b8cc <_dtoa_r+0x64c>
 800ba76:	9a01      	ldr	r2, [sp, #4]
 800ba78:	9205      	str	r2, [sp, #20]
 800ba7a:	e752      	b.n	800b922 <_dtoa_r+0x6a2>
 800ba7c:	9901      	ldr	r1, [sp, #4]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	e751      	b.n	800b926 <_dtoa_r+0x6a6>
 800ba82:	9b05      	ldr	r3, [sp, #20]
 800ba84:	9301      	str	r3, [sp, #4]
 800ba86:	e752      	b.n	800b92e <_dtoa_r+0x6ae>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	e77b      	b.n	800b984 <_dtoa_r+0x704>
 800ba8c:	9b02      	ldr	r3, [sp, #8]
 800ba8e:	e779      	b.n	800b984 <_dtoa_r+0x704>
 800ba90:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ba92:	e778      	b.n	800b986 <_dtoa_r+0x706>
 800ba94:	2300      	movs	r3, #0
 800ba96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba98:	e779      	b.n	800b98e <_dtoa_r+0x70e>
 800ba9a:	d093      	beq.n	800b9c4 <_dtoa_r+0x744>
 800ba9c:	9b04      	ldr	r3, [sp, #16]
 800ba9e:	321c      	adds	r2, #28
 800baa0:	4413      	add	r3, r2
 800baa2:	9304      	str	r3, [sp, #16]
 800baa4:	9b06      	ldr	r3, [sp, #24]
 800baa6:	4416      	add	r6, r2
 800baa8:	4413      	add	r3, r2
 800baaa:	e78a      	b.n	800b9c2 <_dtoa_r+0x742>
 800baac:	4602      	mov	r2, r0
 800baae:	e7f5      	b.n	800ba9c <_dtoa_r+0x81c>
 800bab0:	f1ba 0f00 	cmp.w	sl, #0
 800bab4:	f8cd 8014 	str.w	r8, [sp, #20]
 800bab8:	46d3      	mov	fp, sl
 800baba:	dc21      	bgt.n	800bb00 <_dtoa_r+0x880>
 800babc:	9b07      	ldr	r3, [sp, #28]
 800babe:	2b02      	cmp	r3, #2
 800bac0:	dd1e      	ble.n	800bb00 <_dtoa_r+0x880>
 800bac2:	f1bb 0f00 	cmp.w	fp, #0
 800bac6:	f47f addc 	bne.w	800b682 <_dtoa_r+0x402>
 800baca:	4621      	mov	r1, r4
 800bacc:	465b      	mov	r3, fp
 800bace:	2205      	movs	r2, #5
 800bad0:	4648      	mov	r0, r9
 800bad2:	f000 fc39 	bl	800c348 <__multadd>
 800bad6:	4601      	mov	r1, r0
 800bad8:	4604      	mov	r4, r0
 800bada:	9801      	ldr	r0, [sp, #4]
 800badc:	f000 fe44 	bl	800c768 <__mcmp>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	f77f adce 	ble.w	800b682 <_dtoa_r+0x402>
 800bae6:	463e      	mov	r6, r7
 800bae8:	2331      	movs	r3, #49	@ 0x31
 800baea:	f806 3b01 	strb.w	r3, [r6], #1
 800baee:	9b05      	ldr	r3, [sp, #20]
 800baf0:	3301      	adds	r3, #1
 800baf2:	9305      	str	r3, [sp, #20]
 800baf4:	e5c9      	b.n	800b68a <_dtoa_r+0x40a>
 800baf6:	f8cd 8014 	str.w	r8, [sp, #20]
 800bafa:	4654      	mov	r4, sl
 800bafc:	4625      	mov	r5, r4
 800bafe:	e7f2      	b.n	800bae6 <_dtoa_r+0x866>
 800bb00:	9b08      	ldr	r3, [sp, #32]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f000 8102 	beq.w	800bd0c <_dtoa_r+0xa8c>
 800bb08:	2e00      	cmp	r6, #0
 800bb0a:	dd05      	ble.n	800bb18 <_dtoa_r+0x898>
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	4632      	mov	r2, r6
 800bb10:	4648      	mov	r0, r9
 800bb12:	f000 fdbd 	bl	800c690 <__lshift>
 800bb16:	4605      	mov	r5, r0
 800bb18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d058      	beq.n	800bbd0 <_dtoa_r+0x950>
 800bb1e:	6869      	ldr	r1, [r5, #4]
 800bb20:	4648      	mov	r0, r9
 800bb22:	f000 fbaf 	bl	800c284 <_Balloc>
 800bb26:	4606      	mov	r6, r0
 800bb28:	b928      	cbnz	r0, 800bb36 <_dtoa_r+0x8b6>
 800bb2a:	4b82      	ldr	r3, [pc, #520]	@ (800bd34 <_dtoa_r+0xab4>)
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb32:	f7ff bbbe 	b.w	800b2b2 <_dtoa_r+0x32>
 800bb36:	692a      	ldr	r2, [r5, #16]
 800bb38:	3202      	adds	r2, #2
 800bb3a:	0092      	lsls	r2, r2, #2
 800bb3c:	f105 010c 	add.w	r1, r5, #12
 800bb40:	300c      	adds	r0, #12
 800bb42:	f001 f8cb 	bl	800ccdc <memcpy>
 800bb46:	2201      	movs	r2, #1
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4648      	mov	r0, r9
 800bb4c:	f000 fda0 	bl	800c690 <__lshift>
 800bb50:	1c7b      	adds	r3, r7, #1
 800bb52:	9304      	str	r3, [sp, #16]
 800bb54:	eb07 030b 	add.w	r3, r7, fp
 800bb58:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb5a:	9b02      	ldr	r3, [sp, #8]
 800bb5c:	f003 0301 	and.w	r3, r3, #1
 800bb60:	46a8      	mov	r8, r5
 800bb62:	9308      	str	r3, [sp, #32]
 800bb64:	4605      	mov	r5, r0
 800bb66:	9b04      	ldr	r3, [sp, #16]
 800bb68:	9801      	ldr	r0, [sp, #4]
 800bb6a:	4621      	mov	r1, r4
 800bb6c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bb70:	f7ff fafc 	bl	800b16c <quorem>
 800bb74:	4641      	mov	r1, r8
 800bb76:	9002      	str	r0, [sp, #8]
 800bb78:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bb7c:	9801      	ldr	r0, [sp, #4]
 800bb7e:	f000 fdf3 	bl	800c768 <__mcmp>
 800bb82:	462a      	mov	r2, r5
 800bb84:	9006      	str	r0, [sp, #24]
 800bb86:	4621      	mov	r1, r4
 800bb88:	4648      	mov	r0, r9
 800bb8a:	f000 fe09 	bl	800c7a0 <__mdiff>
 800bb8e:	68c2      	ldr	r2, [r0, #12]
 800bb90:	4606      	mov	r6, r0
 800bb92:	b9fa      	cbnz	r2, 800bbd4 <_dtoa_r+0x954>
 800bb94:	4601      	mov	r1, r0
 800bb96:	9801      	ldr	r0, [sp, #4]
 800bb98:	f000 fde6 	bl	800c768 <__mcmp>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4648      	mov	r0, r9
 800bba2:	920a      	str	r2, [sp, #40]	@ 0x28
 800bba4:	f000 fbae 	bl	800c304 <_Bfree>
 800bba8:	9b07      	ldr	r3, [sp, #28]
 800bbaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbac:	9e04      	ldr	r6, [sp, #16]
 800bbae:	ea42 0103 	orr.w	r1, r2, r3
 800bbb2:	9b08      	ldr	r3, [sp, #32]
 800bbb4:	4319      	orrs	r1, r3
 800bbb6:	d10f      	bne.n	800bbd8 <_dtoa_r+0x958>
 800bbb8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bbbc:	d028      	beq.n	800bc10 <_dtoa_r+0x990>
 800bbbe:	9b06      	ldr	r3, [sp, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	dd02      	ble.n	800bbca <_dtoa_r+0x94a>
 800bbc4:	9b02      	ldr	r3, [sp, #8]
 800bbc6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bbca:	f88b a000 	strb.w	sl, [fp]
 800bbce:	e55e      	b.n	800b68e <_dtoa_r+0x40e>
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	e7bd      	b.n	800bb50 <_dtoa_r+0x8d0>
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	e7e2      	b.n	800bb9e <_dtoa_r+0x91e>
 800bbd8:	9b06      	ldr	r3, [sp, #24]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	db04      	blt.n	800bbe8 <_dtoa_r+0x968>
 800bbde:	9907      	ldr	r1, [sp, #28]
 800bbe0:	430b      	orrs	r3, r1
 800bbe2:	9908      	ldr	r1, [sp, #32]
 800bbe4:	430b      	orrs	r3, r1
 800bbe6:	d120      	bne.n	800bc2a <_dtoa_r+0x9aa>
 800bbe8:	2a00      	cmp	r2, #0
 800bbea:	ddee      	ble.n	800bbca <_dtoa_r+0x94a>
 800bbec:	9901      	ldr	r1, [sp, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	4648      	mov	r0, r9
 800bbf2:	f000 fd4d 	bl	800c690 <__lshift>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	9001      	str	r0, [sp, #4]
 800bbfa:	f000 fdb5 	bl	800c768 <__mcmp>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	dc03      	bgt.n	800bc0a <_dtoa_r+0x98a>
 800bc02:	d1e2      	bne.n	800bbca <_dtoa_r+0x94a>
 800bc04:	f01a 0f01 	tst.w	sl, #1
 800bc08:	d0df      	beq.n	800bbca <_dtoa_r+0x94a>
 800bc0a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bc0e:	d1d9      	bne.n	800bbc4 <_dtoa_r+0x944>
 800bc10:	2339      	movs	r3, #57	@ 0x39
 800bc12:	f88b 3000 	strb.w	r3, [fp]
 800bc16:	4633      	mov	r3, r6
 800bc18:	461e      	mov	r6, r3
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc20:	2a39      	cmp	r2, #57	@ 0x39
 800bc22:	d052      	beq.n	800bcca <_dtoa_r+0xa4a>
 800bc24:	3201      	adds	r2, #1
 800bc26:	701a      	strb	r2, [r3, #0]
 800bc28:	e531      	b.n	800b68e <_dtoa_r+0x40e>
 800bc2a:	2a00      	cmp	r2, #0
 800bc2c:	dd07      	ble.n	800bc3e <_dtoa_r+0x9be>
 800bc2e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bc32:	d0ed      	beq.n	800bc10 <_dtoa_r+0x990>
 800bc34:	f10a 0301 	add.w	r3, sl, #1
 800bc38:	f88b 3000 	strb.w	r3, [fp]
 800bc3c:	e527      	b.n	800b68e <_dtoa_r+0x40e>
 800bc3e:	9b04      	ldr	r3, [sp, #16]
 800bc40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc42:	f803 ac01 	strb.w	sl, [r3, #-1]
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d029      	beq.n	800bc9e <_dtoa_r+0xa1e>
 800bc4a:	9901      	ldr	r1, [sp, #4]
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	220a      	movs	r2, #10
 800bc50:	4648      	mov	r0, r9
 800bc52:	f000 fb79 	bl	800c348 <__multadd>
 800bc56:	45a8      	cmp	r8, r5
 800bc58:	9001      	str	r0, [sp, #4]
 800bc5a:	f04f 0300 	mov.w	r3, #0
 800bc5e:	f04f 020a 	mov.w	r2, #10
 800bc62:	4641      	mov	r1, r8
 800bc64:	4648      	mov	r0, r9
 800bc66:	d107      	bne.n	800bc78 <_dtoa_r+0x9f8>
 800bc68:	f000 fb6e 	bl	800c348 <__multadd>
 800bc6c:	4680      	mov	r8, r0
 800bc6e:	4605      	mov	r5, r0
 800bc70:	9b04      	ldr	r3, [sp, #16]
 800bc72:	3301      	adds	r3, #1
 800bc74:	9304      	str	r3, [sp, #16]
 800bc76:	e776      	b.n	800bb66 <_dtoa_r+0x8e6>
 800bc78:	f000 fb66 	bl	800c348 <__multadd>
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	4680      	mov	r8, r0
 800bc80:	2300      	movs	r3, #0
 800bc82:	220a      	movs	r2, #10
 800bc84:	4648      	mov	r0, r9
 800bc86:	f000 fb5f 	bl	800c348 <__multadd>
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	e7f0      	b.n	800bc70 <_dtoa_r+0x9f0>
 800bc8e:	f1bb 0f00 	cmp.w	fp, #0
 800bc92:	bfcc      	ite	gt
 800bc94:	465e      	movgt	r6, fp
 800bc96:	2601      	movle	r6, #1
 800bc98:	443e      	add	r6, r7
 800bc9a:	f04f 0800 	mov.w	r8, #0
 800bc9e:	9901      	ldr	r1, [sp, #4]
 800bca0:	2201      	movs	r2, #1
 800bca2:	4648      	mov	r0, r9
 800bca4:	f000 fcf4 	bl	800c690 <__lshift>
 800bca8:	4621      	mov	r1, r4
 800bcaa:	9001      	str	r0, [sp, #4]
 800bcac:	f000 fd5c 	bl	800c768 <__mcmp>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	dcb0      	bgt.n	800bc16 <_dtoa_r+0x996>
 800bcb4:	d102      	bne.n	800bcbc <_dtoa_r+0xa3c>
 800bcb6:	f01a 0f01 	tst.w	sl, #1
 800bcba:	d1ac      	bne.n	800bc16 <_dtoa_r+0x996>
 800bcbc:	4633      	mov	r3, r6
 800bcbe:	461e      	mov	r6, r3
 800bcc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcc4:	2a30      	cmp	r2, #48	@ 0x30
 800bcc6:	d0fa      	beq.n	800bcbe <_dtoa_r+0xa3e>
 800bcc8:	e4e1      	b.n	800b68e <_dtoa_r+0x40e>
 800bcca:	429f      	cmp	r7, r3
 800bccc:	d1a4      	bne.n	800bc18 <_dtoa_r+0x998>
 800bcce:	9b05      	ldr	r3, [sp, #20]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	9305      	str	r3, [sp, #20]
 800bcd4:	2331      	movs	r3, #49	@ 0x31
 800bcd6:	703b      	strb	r3, [r7, #0]
 800bcd8:	e4d9      	b.n	800b68e <_dtoa_r+0x40e>
 800bcda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bcdc:	4f16      	ldr	r7, [pc, #88]	@ (800bd38 <_dtoa_r+0xab8>)
 800bcde:	b11b      	cbz	r3, 800bce8 <_dtoa_r+0xa68>
 800bce0:	f107 0308 	add.w	r3, r7, #8
 800bce4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	4638      	mov	r0, r7
 800bcea:	b011      	add	sp, #68	@ 0x44
 800bcec:	ecbd 8b02 	vpop	{d8}
 800bcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf4:	9b07      	ldr	r3, [sp, #28]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	f77f ae2c 	ble.w	800b954 <_dtoa_r+0x6d4>
 800bcfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd00:	2001      	movs	r0, #1
 800bd02:	e64c      	b.n	800b99e <_dtoa_r+0x71e>
 800bd04:	f1bb 0f00 	cmp.w	fp, #0
 800bd08:	f77f aed8 	ble.w	800babc <_dtoa_r+0x83c>
 800bd0c:	463e      	mov	r6, r7
 800bd0e:	9801      	ldr	r0, [sp, #4]
 800bd10:	4621      	mov	r1, r4
 800bd12:	f7ff fa2b 	bl	800b16c <quorem>
 800bd16:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bd1a:	f806 ab01 	strb.w	sl, [r6], #1
 800bd1e:	1bf2      	subs	r2, r6, r7
 800bd20:	4593      	cmp	fp, r2
 800bd22:	ddb4      	ble.n	800bc8e <_dtoa_r+0xa0e>
 800bd24:	9901      	ldr	r1, [sp, #4]
 800bd26:	2300      	movs	r3, #0
 800bd28:	220a      	movs	r2, #10
 800bd2a:	4648      	mov	r0, r9
 800bd2c:	f000 fb0c 	bl	800c348 <__multadd>
 800bd30:	9001      	str	r0, [sp, #4]
 800bd32:	e7ec      	b.n	800bd0e <_dtoa_r+0xa8e>
 800bd34:	0800d0cc 	.word	0x0800d0cc
 800bd38:	0800d050 	.word	0x0800d050

0800bd3c <__sfputc_r>:
 800bd3c:	6893      	ldr	r3, [r2, #8]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	b410      	push	{r4}
 800bd44:	6093      	str	r3, [r2, #8]
 800bd46:	da08      	bge.n	800bd5a <__sfputc_r+0x1e>
 800bd48:	6994      	ldr	r4, [r2, #24]
 800bd4a:	42a3      	cmp	r3, r4
 800bd4c:	db01      	blt.n	800bd52 <__sfputc_r+0x16>
 800bd4e:	290a      	cmp	r1, #10
 800bd50:	d103      	bne.n	800bd5a <__sfputc_r+0x1e>
 800bd52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd56:	f000 be52 	b.w	800c9fe <__swbuf_r>
 800bd5a:	6813      	ldr	r3, [r2, #0]
 800bd5c:	1c58      	adds	r0, r3, #1
 800bd5e:	6010      	str	r0, [r2, #0]
 800bd60:	7019      	strb	r1, [r3, #0]
 800bd62:	4608      	mov	r0, r1
 800bd64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <__sfputs_r>:
 800bd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	460f      	mov	r7, r1
 800bd70:	4614      	mov	r4, r2
 800bd72:	18d5      	adds	r5, r2, r3
 800bd74:	42ac      	cmp	r4, r5
 800bd76:	d101      	bne.n	800bd7c <__sfputs_r+0x12>
 800bd78:	2000      	movs	r0, #0
 800bd7a:	e007      	b.n	800bd8c <__sfputs_r+0x22>
 800bd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd80:	463a      	mov	r2, r7
 800bd82:	4630      	mov	r0, r6
 800bd84:	f7ff ffda 	bl	800bd3c <__sfputc_r>
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	d1f3      	bne.n	800bd74 <__sfputs_r+0xa>
 800bd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd90 <_vfiprintf_r>:
 800bd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd94:	460d      	mov	r5, r1
 800bd96:	b09d      	sub	sp, #116	@ 0x74
 800bd98:	4614      	mov	r4, r2
 800bd9a:	4698      	mov	r8, r3
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	b118      	cbz	r0, 800bda8 <_vfiprintf_r+0x18>
 800bda0:	6a03      	ldr	r3, [r0, #32]
 800bda2:	b90b      	cbnz	r3, 800bda8 <_vfiprintf_r+0x18>
 800bda4:	f7ff f902 	bl	800afac <__sinit>
 800bda8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdaa:	07d9      	lsls	r1, r3, #31
 800bdac:	d405      	bmi.n	800bdba <_vfiprintf_r+0x2a>
 800bdae:	89ab      	ldrh	r3, [r5, #12]
 800bdb0:	059a      	lsls	r2, r3, #22
 800bdb2:	d402      	bmi.n	800bdba <_vfiprintf_r+0x2a>
 800bdb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdb6:	f7ff f9d2 	bl	800b15e <__retarget_lock_acquire_recursive>
 800bdba:	89ab      	ldrh	r3, [r5, #12]
 800bdbc:	071b      	lsls	r3, r3, #28
 800bdbe:	d501      	bpl.n	800bdc4 <_vfiprintf_r+0x34>
 800bdc0:	692b      	ldr	r3, [r5, #16]
 800bdc2:	b99b      	cbnz	r3, 800bdec <_vfiprintf_r+0x5c>
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f000 fe58 	bl	800ca7c <__swsetup_r>
 800bdcc:	b170      	cbz	r0, 800bdec <_vfiprintf_r+0x5c>
 800bdce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdd0:	07dc      	lsls	r4, r3, #31
 800bdd2:	d504      	bpl.n	800bdde <_vfiprintf_r+0x4e>
 800bdd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdd8:	b01d      	add	sp, #116	@ 0x74
 800bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdde:	89ab      	ldrh	r3, [r5, #12]
 800bde0:	0598      	lsls	r0, r3, #22
 800bde2:	d4f7      	bmi.n	800bdd4 <_vfiprintf_r+0x44>
 800bde4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bde6:	f7ff f9bb 	bl	800b160 <__retarget_lock_release_recursive>
 800bdea:	e7f3      	b.n	800bdd4 <_vfiprintf_r+0x44>
 800bdec:	2300      	movs	r3, #0
 800bdee:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdf0:	2320      	movs	r3, #32
 800bdf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdfa:	2330      	movs	r3, #48	@ 0x30
 800bdfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bfac <_vfiprintf_r+0x21c>
 800be00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be04:	f04f 0901 	mov.w	r9, #1
 800be08:	4623      	mov	r3, r4
 800be0a:	469a      	mov	sl, r3
 800be0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be10:	b10a      	cbz	r2, 800be16 <_vfiprintf_r+0x86>
 800be12:	2a25      	cmp	r2, #37	@ 0x25
 800be14:	d1f9      	bne.n	800be0a <_vfiprintf_r+0x7a>
 800be16:	ebba 0b04 	subs.w	fp, sl, r4
 800be1a:	d00b      	beq.n	800be34 <_vfiprintf_r+0xa4>
 800be1c:	465b      	mov	r3, fp
 800be1e:	4622      	mov	r2, r4
 800be20:	4629      	mov	r1, r5
 800be22:	4630      	mov	r0, r6
 800be24:	f7ff ffa1 	bl	800bd6a <__sfputs_r>
 800be28:	3001      	adds	r0, #1
 800be2a:	f000 80a7 	beq.w	800bf7c <_vfiprintf_r+0x1ec>
 800be2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be30:	445a      	add	r2, fp
 800be32:	9209      	str	r2, [sp, #36]	@ 0x24
 800be34:	f89a 3000 	ldrb.w	r3, [sl]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f000 809f 	beq.w	800bf7c <_vfiprintf_r+0x1ec>
 800be3e:	2300      	movs	r3, #0
 800be40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be48:	f10a 0a01 	add.w	sl, sl, #1
 800be4c:	9304      	str	r3, [sp, #16]
 800be4e:	9307      	str	r3, [sp, #28]
 800be50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be54:	931a      	str	r3, [sp, #104]	@ 0x68
 800be56:	4654      	mov	r4, sl
 800be58:	2205      	movs	r2, #5
 800be5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be5e:	4853      	ldr	r0, [pc, #332]	@ (800bfac <_vfiprintf_r+0x21c>)
 800be60:	f7f4 fa3e 	bl	80002e0 <memchr>
 800be64:	9a04      	ldr	r2, [sp, #16]
 800be66:	b9d8      	cbnz	r0, 800bea0 <_vfiprintf_r+0x110>
 800be68:	06d1      	lsls	r1, r2, #27
 800be6a:	bf44      	itt	mi
 800be6c:	2320      	movmi	r3, #32
 800be6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be72:	0713      	lsls	r3, r2, #28
 800be74:	bf44      	itt	mi
 800be76:	232b      	movmi	r3, #43	@ 0x2b
 800be78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be7c:	f89a 3000 	ldrb.w	r3, [sl]
 800be80:	2b2a      	cmp	r3, #42	@ 0x2a
 800be82:	d015      	beq.n	800beb0 <_vfiprintf_r+0x120>
 800be84:	9a07      	ldr	r2, [sp, #28]
 800be86:	4654      	mov	r4, sl
 800be88:	2000      	movs	r0, #0
 800be8a:	f04f 0c0a 	mov.w	ip, #10
 800be8e:	4621      	mov	r1, r4
 800be90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be94:	3b30      	subs	r3, #48	@ 0x30
 800be96:	2b09      	cmp	r3, #9
 800be98:	d94b      	bls.n	800bf32 <_vfiprintf_r+0x1a2>
 800be9a:	b1b0      	cbz	r0, 800beca <_vfiprintf_r+0x13a>
 800be9c:	9207      	str	r2, [sp, #28]
 800be9e:	e014      	b.n	800beca <_vfiprintf_r+0x13a>
 800bea0:	eba0 0308 	sub.w	r3, r0, r8
 800bea4:	fa09 f303 	lsl.w	r3, r9, r3
 800bea8:	4313      	orrs	r3, r2
 800beaa:	9304      	str	r3, [sp, #16]
 800beac:	46a2      	mov	sl, r4
 800beae:	e7d2      	b.n	800be56 <_vfiprintf_r+0xc6>
 800beb0:	9b03      	ldr	r3, [sp, #12]
 800beb2:	1d19      	adds	r1, r3, #4
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	9103      	str	r1, [sp, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	bfbb      	ittet	lt
 800bebc:	425b      	neglt	r3, r3
 800bebe:	f042 0202 	orrlt.w	r2, r2, #2
 800bec2:	9307      	strge	r3, [sp, #28]
 800bec4:	9307      	strlt	r3, [sp, #28]
 800bec6:	bfb8      	it	lt
 800bec8:	9204      	strlt	r2, [sp, #16]
 800beca:	7823      	ldrb	r3, [r4, #0]
 800becc:	2b2e      	cmp	r3, #46	@ 0x2e
 800bece:	d10a      	bne.n	800bee6 <_vfiprintf_r+0x156>
 800bed0:	7863      	ldrb	r3, [r4, #1]
 800bed2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bed4:	d132      	bne.n	800bf3c <_vfiprintf_r+0x1ac>
 800bed6:	9b03      	ldr	r3, [sp, #12]
 800bed8:	1d1a      	adds	r2, r3, #4
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	9203      	str	r2, [sp, #12]
 800bede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bee2:	3402      	adds	r4, #2
 800bee4:	9305      	str	r3, [sp, #20]
 800bee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bfbc <_vfiprintf_r+0x22c>
 800beea:	7821      	ldrb	r1, [r4, #0]
 800beec:	2203      	movs	r2, #3
 800beee:	4650      	mov	r0, sl
 800bef0:	f7f4 f9f6 	bl	80002e0 <memchr>
 800bef4:	b138      	cbz	r0, 800bf06 <_vfiprintf_r+0x176>
 800bef6:	9b04      	ldr	r3, [sp, #16]
 800bef8:	eba0 000a 	sub.w	r0, r0, sl
 800befc:	2240      	movs	r2, #64	@ 0x40
 800befe:	4082      	lsls	r2, r0
 800bf00:	4313      	orrs	r3, r2
 800bf02:	3401      	adds	r4, #1
 800bf04:	9304      	str	r3, [sp, #16]
 800bf06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf0a:	4829      	ldr	r0, [pc, #164]	@ (800bfb0 <_vfiprintf_r+0x220>)
 800bf0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf10:	2206      	movs	r2, #6
 800bf12:	f7f4 f9e5 	bl	80002e0 <memchr>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d03f      	beq.n	800bf9a <_vfiprintf_r+0x20a>
 800bf1a:	4b26      	ldr	r3, [pc, #152]	@ (800bfb4 <_vfiprintf_r+0x224>)
 800bf1c:	bb1b      	cbnz	r3, 800bf66 <_vfiprintf_r+0x1d6>
 800bf1e:	9b03      	ldr	r3, [sp, #12]
 800bf20:	3307      	adds	r3, #7
 800bf22:	f023 0307 	bic.w	r3, r3, #7
 800bf26:	3308      	adds	r3, #8
 800bf28:	9303      	str	r3, [sp, #12]
 800bf2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf2c:	443b      	add	r3, r7
 800bf2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf30:	e76a      	b.n	800be08 <_vfiprintf_r+0x78>
 800bf32:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf36:	460c      	mov	r4, r1
 800bf38:	2001      	movs	r0, #1
 800bf3a:	e7a8      	b.n	800be8e <_vfiprintf_r+0xfe>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	3401      	adds	r4, #1
 800bf40:	9305      	str	r3, [sp, #20]
 800bf42:	4619      	mov	r1, r3
 800bf44:	f04f 0c0a 	mov.w	ip, #10
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf4e:	3a30      	subs	r2, #48	@ 0x30
 800bf50:	2a09      	cmp	r2, #9
 800bf52:	d903      	bls.n	800bf5c <_vfiprintf_r+0x1cc>
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d0c6      	beq.n	800bee6 <_vfiprintf_r+0x156>
 800bf58:	9105      	str	r1, [sp, #20]
 800bf5a:	e7c4      	b.n	800bee6 <_vfiprintf_r+0x156>
 800bf5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf60:	4604      	mov	r4, r0
 800bf62:	2301      	movs	r3, #1
 800bf64:	e7f0      	b.n	800bf48 <_vfiprintf_r+0x1b8>
 800bf66:	ab03      	add	r3, sp, #12
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	462a      	mov	r2, r5
 800bf6c:	4b12      	ldr	r3, [pc, #72]	@ (800bfb8 <_vfiprintf_r+0x228>)
 800bf6e:	a904      	add	r1, sp, #16
 800bf70:	4630      	mov	r0, r6
 800bf72:	f7fe fbe9 	bl	800a748 <_printf_float>
 800bf76:	4607      	mov	r7, r0
 800bf78:	1c78      	adds	r0, r7, #1
 800bf7a:	d1d6      	bne.n	800bf2a <_vfiprintf_r+0x19a>
 800bf7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf7e:	07d9      	lsls	r1, r3, #31
 800bf80:	d405      	bmi.n	800bf8e <_vfiprintf_r+0x1fe>
 800bf82:	89ab      	ldrh	r3, [r5, #12]
 800bf84:	059a      	lsls	r2, r3, #22
 800bf86:	d402      	bmi.n	800bf8e <_vfiprintf_r+0x1fe>
 800bf88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf8a:	f7ff f8e9 	bl	800b160 <__retarget_lock_release_recursive>
 800bf8e:	89ab      	ldrh	r3, [r5, #12]
 800bf90:	065b      	lsls	r3, r3, #25
 800bf92:	f53f af1f 	bmi.w	800bdd4 <_vfiprintf_r+0x44>
 800bf96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf98:	e71e      	b.n	800bdd8 <_vfiprintf_r+0x48>
 800bf9a:	ab03      	add	r3, sp, #12
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	462a      	mov	r2, r5
 800bfa0:	4b05      	ldr	r3, [pc, #20]	@ (800bfb8 <_vfiprintf_r+0x228>)
 800bfa2:	a904      	add	r1, sp, #16
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f7fe fe57 	bl	800ac58 <_printf_i>
 800bfaa:	e7e4      	b.n	800bf76 <_vfiprintf_r+0x1e6>
 800bfac:	0800d0dd 	.word	0x0800d0dd
 800bfb0:	0800d0e7 	.word	0x0800d0e7
 800bfb4:	0800a749 	.word	0x0800a749
 800bfb8:	0800bd6b 	.word	0x0800bd6b
 800bfbc:	0800d0e3 	.word	0x0800d0e3

0800bfc0 <malloc>:
 800bfc0:	4b02      	ldr	r3, [pc, #8]	@ (800bfcc <malloc+0xc>)
 800bfc2:	4601      	mov	r1, r0
 800bfc4:	6818      	ldr	r0, [r3, #0]
 800bfc6:	f000 b825 	b.w	800c014 <_malloc_r>
 800bfca:	bf00      	nop
 800bfcc:	2400001c 	.word	0x2400001c

0800bfd0 <sbrk_aligned>:
 800bfd0:	b570      	push	{r4, r5, r6, lr}
 800bfd2:	4e0f      	ldr	r6, [pc, #60]	@ (800c010 <sbrk_aligned+0x40>)
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	6831      	ldr	r1, [r6, #0]
 800bfd8:	4605      	mov	r5, r0
 800bfda:	b911      	cbnz	r1, 800bfe2 <sbrk_aligned+0x12>
 800bfdc:	f000 fe3a 	bl	800cc54 <_sbrk_r>
 800bfe0:	6030      	str	r0, [r6, #0]
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f000 fe35 	bl	800cc54 <_sbrk_r>
 800bfea:	1c43      	adds	r3, r0, #1
 800bfec:	d103      	bne.n	800bff6 <sbrk_aligned+0x26>
 800bfee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bff2:	4620      	mov	r0, r4
 800bff4:	bd70      	pop	{r4, r5, r6, pc}
 800bff6:	1cc4      	adds	r4, r0, #3
 800bff8:	f024 0403 	bic.w	r4, r4, #3
 800bffc:	42a0      	cmp	r0, r4
 800bffe:	d0f8      	beq.n	800bff2 <sbrk_aligned+0x22>
 800c000:	1a21      	subs	r1, r4, r0
 800c002:	4628      	mov	r0, r5
 800c004:	f000 fe26 	bl	800cc54 <_sbrk_r>
 800c008:	3001      	adds	r0, #1
 800c00a:	d1f2      	bne.n	800bff2 <sbrk_aligned+0x22>
 800c00c:	e7ef      	b.n	800bfee <sbrk_aligned+0x1e>
 800c00e:	bf00      	nop
 800c010:	24000ce4 	.word	0x24000ce4

0800c014 <_malloc_r>:
 800c014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c018:	1ccd      	adds	r5, r1, #3
 800c01a:	f025 0503 	bic.w	r5, r5, #3
 800c01e:	3508      	adds	r5, #8
 800c020:	2d0c      	cmp	r5, #12
 800c022:	bf38      	it	cc
 800c024:	250c      	movcc	r5, #12
 800c026:	2d00      	cmp	r5, #0
 800c028:	4606      	mov	r6, r0
 800c02a:	db01      	blt.n	800c030 <_malloc_r+0x1c>
 800c02c:	42a9      	cmp	r1, r5
 800c02e:	d904      	bls.n	800c03a <_malloc_r+0x26>
 800c030:	230c      	movs	r3, #12
 800c032:	6033      	str	r3, [r6, #0]
 800c034:	2000      	movs	r0, #0
 800c036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c03a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c110 <_malloc_r+0xfc>
 800c03e:	f000 f915 	bl	800c26c <__malloc_lock>
 800c042:	f8d8 3000 	ldr.w	r3, [r8]
 800c046:	461c      	mov	r4, r3
 800c048:	bb44      	cbnz	r4, 800c09c <_malloc_r+0x88>
 800c04a:	4629      	mov	r1, r5
 800c04c:	4630      	mov	r0, r6
 800c04e:	f7ff ffbf 	bl	800bfd0 <sbrk_aligned>
 800c052:	1c43      	adds	r3, r0, #1
 800c054:	4604      	mov	r4, r0
 800c056:	d158      	bne.n	800c10a <_malloc_r+0xf6>
 800c058:	f8d8 4000 	ldr.w	r4, [r8]
 800c05c:	4627      	mov	r7, r4
 800c05e:	2f00      	cmp	r7, #0
 800c060:	d143      	bne.n	800c0ea <_malloc_r+0xd6>
 800c062:	2c00      	cmp	r4, #0
 800c064:	d04b      	beq.n	800c0fe <_malloc_r+0xea>
 800c066:	6823      	ldr	r3, [r4, #0]
 800c068:	4639      	mov	r1, r7
 800c06a:	4630      	mov	r0, r6
 800c06c:	eb04 0903 	add.w	r9, r4, r3
 800c070:	f000 fdf0 	bl	800cc54 <_sbrk_r>
 800c074:	4581      	cmp	r9, r0
 800c076:	d142      	bne.n	800c0fe <_malloc_r+0xea>
 800c078:	6821      	ldr	r1, [r4, #0]
 800c07a:	1a6d      	subs	r5, r5, r1
 800c07c:	4629      	mov	r1, r5
 800c07e:	4630      	mov	r0, r6
 800c080:	f7ff ffa6 	bl	800bfd0 <sbrk_aligned>
 800c084:	3001      	adds	r0, #1
 800c086:	d03a      	beq.n	800c0fe <_malloc_r+0xea>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	442b      	add	r3, r5
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	f8d8 3000 	ldr.w	r3, [r8]
 800c092:	685a      	ldr	r2, [r3, #4]
 800c094:	bb62      	cbnz	r2, 800c0f0 <_malloc_r+0xdc>
 800c096:	f8c8 7000 	str.w	r7, [r8]
 800c09a:	e00f      	b.n	800c0bc <_malloc_r+0xa8>
 800c09c:	6822      	ldr	r2, [r4, #0]
 800c09e:	1b52      	subs	r2, r2, r5
 800c0a0:	d420      	bmi.n	800c0e4 <_malloc_r+0xd0>
 800c0a2:	2a0b      	cmp	r2, #11
 800c0a4:	d917      	bls.n	800c0d6 <_malloc_r+0xc2>
 800c0a6:	1961      	adds	r1, r4, r5
 800c0a8:	42a3      	cmp	r3, r4
 800c0aa:	6025      	str	r5, [r4, #0]
 800c0ac:	bf18      	it	ne
 800c0ae:	6059      	strne	r1, [r3, #4]
 800c0b0:	6863      	ldr	r3, [r4, #4]
 800c0b2:	bf08      	it	eq
 800c0b4:	f8c8 1000 	streq.w	r1, [r8]
 800c0b8:	5162      	str	r2, [r4, r5]
 800c0ba:	604b      	str	r3, [r1, #4]
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f000 f8db 	bl	800c278 <__malloc_unlock>
 800c0c2:	f104 000b 	add.w	r0, r4, #11
 800c0c6:	1d23      	adds	r3, r4, #4
 800c0c8:	f020 0007 	bic.w	r0, r0, #7
 800c0cc:	1ac2      	subs	r2, r0, r3
 800c0ce:	bf1c      	itt	ne
 800c0d0:	1a1b      	subne	r3, r3, r0
 800c0d2:	50a3      	strne	r3, [r4, r2]
 800c0d4:	e7af      	b.n	800c036 <_malloc_r+0x22>
 800c0d6:	6862      	ldr	r2, [r4, #4]
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	bf0c      	ite	eq
 800c0dc:	f8c8 2000 	streq.w	r2, [r8]
 800c0e0:	605a      	strne	r2, [r3, #4]
 800c0e2:	e7eb      	b.n	800c0bc <_malloc_r+0xa8>
 800c0e4:	4623      	mov	r3, r4
 800c0e6:	6864      	ldr	r4, [r4, #4]
 800c0e8:	e7ae      	b.n	800c048 <_malloc_r+0x34>
 800c0ea:	463c      	mov	r4, r7
 800c0ec:	687f      	ldr	r7, [r7, #4]
 800c0ee:	e7b6      	b.n	800c05e <_malloc_r+0x4a>
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	42a3      	cmp	r3, r4
 800c0f6:	d1fb      	bne.n	800c0f0 <_malloc_r+0xdc>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	6053      	str	r3, [r2, #4]
 800c0fc:	e7de      	b.n	800c0bc <_malloc_r+0xa8>
 800c0fe:	230c      	movs	r3, #12
 800c100:	6033      	str	r3, [r6, #0]
 800c102:	4630      	mov	r0, r6
 800c104:	f000 f8b8 	bl	800c278 <__malloc_unlock>
 800c108:	e794      	b.n	800c034 <_malloc_r+0x20>
 800c10a:	6005      	str	r5, [r0, #0]
 800c10c:	e7d6      	b.n	800c0bc <_malloc_r+0xa8>
 800c10e:	bf00      	nop
 800c110:	24000ce8 	.word	0x24000ce8

0800c114 <__sflush_r>:
 800c114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c11c:	0716      	lsls	r6, r2, #28
 800c11e:	4605      	mov	r5, r0
 800c120:	460c      	mov	r4, r1
 800c122:	d454      	bmi.n	800c1ce <__sflush_r+0xba>
 800c124:	684b      	ldr	r3, [r1, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	dc02      	bgt.n	800c130 <__sflush_r+0x1c>
 800c12a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	dd48      	ble.n	800c1c2 <__sflush_r+0xae>
 800c130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c132:	2e00      	cmp	r6, #0
 800c134:	d045      	beq.n	800c1c2 <__sflush_r+0xae>
 800c136:	2300      	movs	r3, #0
 800c138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c13c:	682f      	ldr	r7, [r5, #0]
 800c13e:	6a21      	ldr	r1, [r4, #32]
 800c140:	602b      	str	r3, [r5, #0]
 800c142:	d030      	beq.n	800c1a6 <__sflush_r+0x92>
 800c144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c146:	89a3      	ldrh	r3, [r4, #12]
 800c148:	0759      	lsls	r1, r3, #29
 800c14a:	d505      	bpl.n	800c158 <__sflush_r+0x44>
 800c14c:	6863      	ldr	r3, [r4, #4]
 800c14e:	1ad2      	subs	r2, r2, r3
 800c150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c152:	b10b      	cbz	r3, 800c158 <__sflush_r+0x44>
 800c154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c156:	1ad2      	subs	r2, r2, r3
 800c158:	2300      	movs	r3, #0
 800c15a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c15c:	6a21      	ldr	r1, [r4, #32]
 800c15e:	4628      	mov	r0, r5
 800c160:	47b0      	blx	r6
 800c162:	1c43      	adds	r3, r0, #1
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	d106      	bne.n	800c176 <__sflush_r+0x62>
 800c168:	6829      	ldr	r1, [r5, #0]
 800c16a:	291d      	cmp	r1, #29
 800c16c:	d82b      	bhi.n	800c1c6 <__sflush_r+0xb2>
 800c16e:	4a2a      	ldr	r2, [pc, #168]	@ (800c218 <__sflush_r+0x104>)
 800c170:	40ca      	lsrs	r2, r1
 800c172:	07d6      	lsls	r6, r2, #31
 800c174:	d527      	bpl.n	800c1c6 <__sflush_r+0xb2>
 800c176:	2200      	movs	r2, #0
 800c178:	6062      	str	r2, [r4, #4]
 800c17a:	04d9      	lsls	r1, r3, #19
 800c17c:	6922      	ldr	r2, [r4, #16]
 800c17e:	6022      	str	r2, [r4, #0]
 800c180:	d504      	bpl.n	800c18c <__sflush_r+0x78>
 800c182:	1c42      	adds	r2, r0, #1
 800c184:	d101      	bne.n	800c18a <__sflush_r+0x76>
 800c186:	682b      	ldr	r3, [r5, #0]
 800c188:	b903      	cbnz	r3, 800c18c <__sflush_r+0x78>
 800c18a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c18e:	602f      	str	r7, [r5, #0]
 800c190:	b1b9      	cbz	r1, 800c1c2 <__sflush_r+0xae>
 800c192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c196:	4299      	cmp	r1, r3
 800c198:	d002      	beq.n	800c1a0 <__sflush_r+0x8c>
 800c19a:	4628      	mov	r0, r5
 800c19c:	f000 fdde 	bl	800cd5c <_free_r>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1a4:	e00d      	b.n	800c1c2 <__sflush_r+0xae>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	47b0      	blx	r6
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	1c50      	adds	r0, r2, #1
 800c1b0:	d1c9      	bne.n	800c146 <__sflush_r+0x32>
 800c1b2:	682b      	ldr	r3, [r5, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d0c6      	beq.n	800c146 <__sflush_r+0x32>
 800c1b8:	2b1d      	cmp	r3, #29
 800c1ba:	d001      	beq.n	800c1c0 <__sflush_r+0xac>
 800c1bc:	2b16      	cmp	r3, #22
 800c1be:	d11e      	bne.n	800c1fe <__sflush_r+0xea>
 800c1c0:	602f      	str	r7, [r5, #0]
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	e022      	b.n	800c20c <__sflush_r+0xf8>
 800c1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ca:	b21b      	sxth	r3, r3
 800c1cc:	e01b      	b.n	800c206 <__sflush_r+0xf2>
 800c1ce:	690f      	ldr	r7, [r1, #16]
 800c1d0:	2f00      	cmp	r7, #0
 800c1d2:	d0f6      	beq.n	800c1c2 <__sflush_r+0xae>
 800c1d4:	0793      	lsls	r3, r2, #30
 800c1d6:	680e      	ldr	r6, [r1, #0]
 800c1d8:	bf08      	it	eq
 800c1da:	694b      	ldreq	r3, [r1, #20]
 800c1dc:	600f      	str	r7, [r1, #0]
 800c1de:	bf18      	it	ne
 800c1e0:	2300      	movne	r3, #0
 800c1e2:	eba6 0807 	sub.w	r8, r6, r7
 800c1e6:	608b      	str	r3, [r1, #8]
 800c1e8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ec:	dde9      	ble.n	800c1c2 <__sflush_r+0xae>
 800c1ee:	6a21      	ldr	r1, [r4, #32]
 800c1f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1f2:	4643      	mov	r3, r8
 800c1f4:	463a      	mov	r2, r7
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	47b0      	blx	r6
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	dc08      	bgt.n	800c210 <__sflush_r+0xfc>
 800c1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c210:	4407      	add	r7, r0
 800c212:	eba8 0800 	sub.w	r8, r8, r0
 800c216:	e7e7      	b.n	800c1e8 <__sflush_r+0xd4>
 800c218:	20400001 	.word	0x20400001

0800c21c <_fflush_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	690b      	ldr	r3, [r1, #16]
 800c220:	4605      	mov	r5, r0
 800c222:	460c      	mov	r4, r1
 800c224:	b913      	cbnz	r3, 800c22c <_fflush_r+0x10>
 800c226:	2500      	movs	r5, #0
 800c228:	4628      	mov	r0, r5
 800c22a:	bd38      	pop	{r3, r4, r5, pc}
 800c22c:	b118      	cbz	r0, 800c236 <_fflush_r+0x1a>
 800c22e:	6a03      	ldr	r3, [r0, #32]
 800c230:	b90b      	cbnz	r3, 800c236 <_fflush_r+0x1a>
 800c232:	f7fe febb 	bl	800afac <__sinit>
 800c236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d0f3      	beq.n	800c226 <_fflush_r+0xa>
 800c23e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c240:	07d0      	lsls	r0, r2, #31
 800c242:	d404      	bmi.n	800c24e <_fflush_r+0x32>
 800c244:	0599      	lsls	r1, r3, #22
 800c246:	d402      	bmi.n	800c24e <_fflush_r+0x32>
 800c248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c24a:	f7fe ff88 	bl	800b15e <__retarget_lock_acquire_recursive>
 800c24e:	4628      	mov	r0, r5
 800c250:	4621      	mov	r1, r4
 800c252:	f7ff ff5f 	bl	800c114 <__sflush_r>
 800c256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c258:	07da      	lsls	r2, r3, #31
 800c25a:	4605      	mov	r5, r0
 800c25c:	d4e4      	bmi.n	800c228 <_fflush_r+0xc>
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	059b      	lsls	r3, r3, #22
 800c262:	d4e1      	bmi.n	800c228 <_fflush_r+0xc>
 800c264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c266:	f7fe ff7b 	bl	800b160 <__retarget_lock_release_recursive>
 800c26a:	e7dd      	b.n	800c228 <_fflush_r+0xc>

0800c26c <__malloc_lock>:
 800c26c:	4801      	ldr	r0, [pc, #4]	@ (800c274 <__malloc_lock+0x8>)
 800c26e:	f7fe bf76 	b.w	800b15e <__retarget_lock_acquire_recursive>
 800c272:	bf00      	nop
 800c274:	24000ce0 	.word	0x24000ce0

0800c278 <__malloc_unlock>:
 800c278:	4801      	ldr	r0, [pc, #4]	@ (800c280 <__malloc_unlock+0x8>)
 800c27a:	f7fe bf71 	b.w	800b160 <__retarget_lock_release_recursive>
 800c27e:	bf00      	nop
 800c280:	24000ce0 	.word	0x24000ce0

0800c284 <_Balloc>:
 800c284:	b570      	push	{r4, r5, r6, lr}
 800c286:	69c6      	ldr	r6, [r0, #28]
 800c288:	4604      	mov	r4, r0
 800c28a:	460d      	mov	r5, r1
 800c28c:	b976      	cbnz	r6, 800c2ac <_Balloc+0x28>
 800c28e:	2010      	movs	r0, #16
 800c290:	f7ff fe96 	bl	800bfc0 <malloc>
 800c294:	4602      	mov	r2, r0
 800c296:	61e0      	str	r0, [r4, #28]
 800c298:	b920      	cbnz	r0, 800c2a4 <_Balloc+0x20>
 800c29a:	4b18      	ldr	r3, [pc, #96]	@ (800c2fc <_Balloc+0x78>)
 800c29c:	4818      	ldr	r0, [pc, #96]	@ (800c300 <_Balloc+0x7c>)
 800c29e:	216b      	movs	r1, #107	@ 0x6b
 800c2a0:	f000 fd2a 	bl	800ccf8 <__assert_func>
 800c2a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2a8:	6006      	str	r6, [r0, #0]
 800c2aa:	60c6      	str	r6, [r0, #12]
 800c2ac:	69e6      	ldr	r6, [r4, #28]
 800c2ae:	68f3      	ldr	r3, [r6, #12]
 800c2b0:	b183      	cbz	r3, 800c2d4 <_Balloc+0x50>
 800c2b2:	69e3      	ldr	r3, [r4, #28]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2ba:	b9b8      	cbnz	r0, 800c2ec <_Balloc+0x68>
 800c2bc:	2101      	movs	r1, #1
 800c2be:	fa01 f605 	lsl.w	r6, r1, r5
 800c2c2:	1d72      	adds	r2, r6, #5
 800c2c4:	0092      	lsls	r2, r2, #2
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f000 fd34 	bl	800cd34 <_calloc_r>
 800c2cc:	b160      	cbz	r0, 800c2e8 <_Balloc+0x64>
 800c2ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2d2:	e00e      	b.n	800c2f2 <_Balloc+0x6e>
 800c2d4:	2221      	movs	r2, #33	@ 0x21
 800c2d6:	2104      	movs	r1, #4
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 fd2b 	bl	800cd34 <_calloc_r>
 800c2de:	69e3      	ldr	r3, [r4, #28]
 800c2e0:	60f0      	str	r0, [r6, #12]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1e4      	bne.n	800c2b2 <_Balloc+0x2e>
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	bd70      	pop	{r4, r5, r6, pc}
 800c2ec:	6802      	ldr	r2, [r0, #0]
 800c2ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2f8:	e7f7      	b.n	800c2ea <_Balloc+0x66>
 800c2fa:	bf00      	nop
 800c2fc:	0800d05d 	.word	0x0800d05d
 800c300:	0800d0ee 	.word	0x0800d0ee

0800c304 <_Bfree>:
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	69c6      	ldr	r6, [r0, #28]
 800c308:	4605      	mov	r5, r0
 800c30a:	460c      	mov	r4, r1
 800c30c:	b976      	cbnz	r6, 800c32c <_Bfree+0x28>
 800c30e:	2010      	movs	r0, #16
 800c310:	f7ff fe56 	bl	800bfc0 <malloc>
 800c314:	4602      	mov	r2, r0
 800c316:	61e8      	str	r0, [r5, #28]
 800c318:	b920      	cbnz	r0, 800c324 <_Bfree+0x20>
 800c31a:	4b09      	ldr	r3, [pc, #36]	@ (800c340 <_Bfree+0x3c>)
 800c31c:	4809      	ldr	r0, [pc, #36]	@ (800c344 <_Bfree+0x40>)
 800c31e:	218f      	movs	r1, #143	@ 0x8f
 800c320:	f000 fcea 	bl	800ccf8 <__assert_func>
 800c324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c328:	6006      	str	r6, [r0, #0]
 800c32a:	60c6      	str	r6, [r0, #12]
 800c32c:	b13c      	cbz	r4, 800c33e <_Bfree+0x3a>
 800c32e:	69eb      	ldr	r3, [r5, #28]
 800c330:	6862      	ldr	r2, [r4, #4]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c338:	6021      	str	r1, [r4, #0]
 800c33a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	0800d05d 	.word	0x0800d05d
 800c344:	0800d0ee 	.word	0x0800d0ee

0800c348 <__multadd>:
 800c348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c34c:	690d      	ldr	r5, [r1, #16]
 800c34e:	4607      	mov	r7, r0
 800c350:	460c      	mov	r4, r1
 800c352:	461e      	mov	r6, r3
 800c354:	f101 0c14 	add.w	ip, r1, #20
 800c358:	2000      	movs	r0, #0
 800c35a:	f8dc 3000 	ldr.w	r3, [ip]
 800c35e:	b299      	uxth	r1, r3
 800c360:	fb02 6101 	mla	r1, r2, r1, r6
 800c364:	0c1e      	lsrs	r6, r3, #16
 800c366:	0c0b      	lsrs	r3, r1, #16
 800c368:	fb02 3306 	mla	r3, r2, r6, r3
 800c36c:	b289      	uxth	r1, r1
 800c36e:	3001      	adds	r0, #1
 800c370:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c374:	4285      	cmp	r5, r0
 800c376:	f84c 1b04 	str.w	r1, [ip], #4
 800c37a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c37e:	dcec      	bgt.n	800c35a <__multadd+0x12>
 800c380:	b30e      	cbz	r6, 800c3c6 <__multadd+0x7e>
 800c382:	68a3      	ldr	r3, [r4, #8]
 800c384:	42ab      	cmp	r3, r5
 800c386:	dc19      	bgt.n	800c3bc <__multadd+0x74>
 800c388:	6861      	ldr	r1, [r4, #4]
 800c38a:	4638      	mov	r0, r7
 800c38c:	3101      	adds	r1, #1
 800c38e:	f7ff ff79 	bl	800c284 <_Balloc>
 800c392:	4680      	mov	r8, r0
 800c394:	b928      	cbnz	r0, 800c3a2 <__multadd+0x5a>
 800c396:	4602      	mov	r2, r0
 800c398:	4b0c      	ldr	r3, [pc, #48]	@ (800c3cc <__multadd+0x84>)
 800c39a:	480d      	ldr	r0, [pc, #52]	@ (800c3d0 <__multadd+0x88>)
 800c39c:	21ba      	movs	r1, #186	@ 0xba
 800c39e:	f000 fcab 	bl	800ccf8 <__assert_func>
 800c3a2:	6922      	ldr	r2, [r4, #16]
 800c3a4:	3202      	adds	r2, #2
 800c3a6:	f104 010c 	add.w	r1, r4, #12
 800c3aa:	0092      	lsls	r2, r2, #2
 800c3ac:	300c      	adds	r0, #12
 800c3ae:	f000 fc95 	bl	800ccdc <memcpy>
 800c3b2:	4621      	mov	r1, r4
 800c3b4:	4638      	mov	r0, r7
 800c3b6:	f7ff ffa5 	bl	800c304 <_Bfree>
 800c3ba:	4644      	mov	r4, r8
 800c3bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3c0:	3501      	adds	r5, #1
 800c3c2:	615e      	str	r6, [r3, #20]
 800c3c4:	6125      	str	r5, [r4, #16]
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3cc:	0800d0cc 	.word	0x0800d0cc
 800c3d0:	0800d0ee 	.word	0x0800d0ee

0800c3d4 <__hi0bits>:
 800c3d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c3d8:	4603      	mov	r3, r0
 800c3da:	bf36      	itet	cc
 800c3dc:	0403      	lslcc	r3, r0, #16
 800c3de:	2000      	movcs	r0, #0
 800c3e0:	2010      	movcc	r0, #16
 800c3e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3e6:	bf3c      	itt	cc
 800c3e8:	021b      	lslcc	r3, r3, #8
 800c3ea:	3008      	addcc	r0, #8
 800c3ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3f0:	bf3c      	itt	cc
 800c3f2:	011b      	lslcc	r3, r3, #4
 800c3f4:	3004      	addcc	r0, #4
 800c3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3fa:	bf3c      	itt	cc
 800c3fc:	009b      	lslcc	r3, r3, #2
 800c3fe:	3002      	addcc	r0, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	db05      	blt.n	800c410 <__hi0bits+0x3c>
 800c404:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c408:	f100 0001 	add.w	r0, r0, #1
 800c40c:	bf08      	it	eq
 800c40e:	2020      	moveq	r0, #32
 800c410:	4770      	bx	lr

0800c412 <__lo0bits>:
 800c412:	6803      	ldr	r3, [r0, #0]
 800c414:	4602      	mov	r2, r0
 800c416:	f013 0007 	ands.w	r0, r3, #7
 800c41a:	d00b      	beq.n	800c434 <__lo0bits+0x22>
 800c41c:	07d9      	lsls	r1, r3, #31
 800c41e:	d421      	bmi.n	800c464 <__lo0bits+0x52>
 800c420:	0798      	lsls	r0, r3, #30
 800c422:	bf49      	itett	mi
 800c424:	085b      	lsrmi	r3, r3, #1
 800c426:	089b      	lsrpl	r3, r3, #2
 800c428:	2001      	movmi	r0, #1
 800c42a:	6013      	strmi	r3, [r2, #0]
 800c42c:	bf5c      	itt	pl
 800c42e:	6013      	strpl	r3, [r2, #0]
 800c430:	2002      	movpl	r0, #2
 800c432:	4770      	bx	lr
 800c434:	b299      	uxth	r1, r3
 800c436:	b909      	cbnz	r1, 800c43c <__lo0bits+0x2a>
 800c438:	0c1b      	lsrs	r3, r3, #16
 800c43a:	2010      	movs	r0, #16
 800c43c:	b2d9      	uxtb	r1, r3
 800c43e:	b909      	cbnz	r1, 800c444 <__lo0bits+0x32>
 800c440:	3008      	adds	r0, #8
 800c442:	0a1b      	lsrs	r3, r3, #8
 800c444:	0719      	lsls	r1, r3, #28
 800c446:	bf04      	itt	eq
 800c448:	091b      	lsreq	r3, r3, #4
 800c44a:	3004      	addeq	r0, #4
 800c44c:	0799      	lsls	r1, r3, #30
 800c44e:	bf04      	itt	eq
 800c450:	089b      	lsreq	r3, r3, #2
 800c452:	3002      	addeq	r0, #2
 800c454:	07d9      	lsls	r1, r3, #31
 800c456:	d403      	bmi.n	800c460 <__lo0bits+0x4e>
 800c458:	085b      	lsrs	r3, r3, #1
 800c45a:	f100 0001 	add.w	r0, r0, #1
 800c45e:	d003      	beq.n	800c468 <__lo0bits+0x56>
 800c460:	6013      	str	r3, [r2, #0]
 800c462:	4770      	bx	lr
 800c464:	2000      	movs	r0, #0
 800c466:	4770      	bx	lr
 800c468:	2020      	movs	r0, #32
 800c46a:	4770      	bx	lr

0800c46c <__i2b>:
 800c46c:	b510      	push	{r4, lr}
 800c46e:	460c      	mov	r4, r1
 800c470:	2101      	movs	r1, #1
 800c472:	f7ff ff07 	bl	800c284 <_Balloc>
 800c476:	4602      	mov	r2, r0
 800c478:	b928      	cbnz	r0, 800c486 <__i2b+0x1a>
 800c47a:	4b05      	ldr	r3, [pc, #20]	@ (800c490 <__i2b+0x24>)
 800c47c:	4805      	ldr	r0, [pc, #20]	@ (800c494 <__i2b+0x28>)
 800c47e:	f240 1145 	movw	r1, #325	@ 0x145
 800c482:	f000 fc39 	bl	800ccf8 <__assert_func>
 800c486:	2301      	movs	r3, #1
 800c488:	6144      	str	r4, [r0, #20]
 800c48a:	6103      	str	r3, [r0, #16]
 800c48c:	bd10      	pop	{r4, pc}
 800c48e:	bf00      	nop
 800c490:	0800d0cc 	.word	0x0800d0cc
 800c494:	0800d0ee 	.word	0x0800d0ee

0800c498 <__multiply>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	4617      	mov	r7, r2
 800c49e:	690a      	ldr	r2, [r1, #16]
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	bfa8      	it	ge
 800c4a6:	463b      	movge	r3, r7
 800c4a8:	4689      	mov	r9, r1
 800c4aa:	bfa4      	itt	ge
 800c4ac:	460f      	movge	r7, r1
 800c4ae:	4699      	movge	r9, r3
 800c4b0:	693d      	ldr	r5, [r7, #16]
 800c4b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	6879      	ldr	r1, [r7, #4]
 800c4ba:	eb05 060a 	add.w	r6, r5, sl
 800c4be:	42b3      	cmp	r3, r6
 800c4c0:	b085      	sub	sp, #20
 800c4c2:	bfb8      	it	lt
 800c4c4:	3101      	addlt	r1, #1
 800c4c6:	f7ff fedd 	bl	800c284 <_Balloc>
 800c4ca:	b930      	cbnz	r0, 800c4da <__multiply+0x42>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	4b41      	ldr	r3, [pc, #260]	@ (800c5d4 <__multiply+0x13c>)
 800c4d0:	4841      	ldr	r0, [pc, #260]	@ (800c5d8 <__multiply+0x140>)
 800c4d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c4d6:	f000 fc0f 	bl	800ccf8 <__assert_func>
 800c4da:	f100 0414 	add.w	r4, r0, #20
 800c4de:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c4e2:	4623      	mov	r3, r4
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	4573      	cmp	r3, lr
 800c4e8:	d320      	bcc.n	800c52c <__multiply+0x94>
 800c4ea:	f107 0814 	add.w	r8, r7, #20
 800c4ee:	f109 0114 	add.w	r1, r9, #20
 800c4f2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c4f6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c4fa:	9302      	str	r3, [sp, #8]
 800c4fc:	1beb      	subs	r3, r5, r7
 800c4fe:	3b15      	subs	r3, #21
 800c500:	f023 0303 	bic.w	r3, r3, #3
 800c504:	3304      	adds	r3, #4
 800c506:	3715      	adds	r7, #21
 800c508:	42bd      	cmp	r5, r7
 800c50a:	bf38      	it	cc
 800c50c:	2304      	movcc	r3, #4
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	9b02      	ldr	r3, [sp, #8]
 800c512:	9103      	str	r1, [sp, #12]
 800c514:	428b      	cmp	r3, r1
 800c516:	d80c      	bhi.n	800c532 <__multiply+0x9a>
 800c518:	2e00      	cmp	r6, #0
 800c51a:	dd03      	ble.n	800c524 <__multiply+0x8c>
 800c51c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c520:	2b00      	cmp	r3, #0
 800c522:	d055      	beq.n	800c5d0 <__multiply+0x138>
 800c524:	6106      	str	r6, [r0, #16]
 800c526:	b005      	add	sp, #20
 800c528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52c:	f843 2b04 	str.w	r2, [r3], #4
 800c530:	e7d9      	b.n	800c4e6 <__multiply+0x4e>
 800c532:	f8b1 a000 	ldrh.w	sl, [r1]
 800c536:	f1ba 0f00 	cmp.w	sl, #0
 800c53a:	d01f      	beq.n	800c57c <__multiply+0xe4>
 800c53c:	46c4      	mov	ip, r8
 800c53e:	46a1      	mov	r9, r4
 800c540:	2700      	movs	r7, #0
 800c542:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c546:	f8d9 3000 	ldr.w	r3, [r9]
 800c54a:	fa1f fb82 	uxth.w	fp, r2
 800c54e:	b29b      	uxth	r3, r3
 800c550:	fb0a 330b 	mla	r3, sl, fp, r3
 800c554:	443b      	add	r3, r7
 800c556:	f8d9 7000 	ldr.w	r7, [r9]
 800c55a:	0c12      	lsrs	r2, r2, #16
 800c55c:	0c3f      	lsrs	r7, r7, #16
 800c55e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c562:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c566:	b29b      	uxth	r3, r3
 800c568:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c56c:	4565      	cmp	r5, ip
 800c56e:	f849 3b04 	str.w	r3, [r9], #4
 800c572:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c576:	d8e4      	bhi.n	800c542 <__multiply+0xaa>
 800c578:	9b01      	ldr	r3, [sp, #4]
 800c57a:	50e7      	str	r7, [r4, r3]
 800c57c:	9b03      	ldr	r3, [sp, #12]
 800c57e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c582:	3104      	adds	r1, #4
 800c584:	f1b9 0f00 	cmp.w	r9, #0
 800c588:	d020      	beq.n	800c5cc <__multiply+0x134>
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	4647      	mov	r7, r8
 800c58e:	46a4      	mov	ip, r4
 800c590:	f04f 0a00 	mov.w	sl, #0
 800c594:	f8b7 b000 	ldrh.w	fp, [r7]
 800c598:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c59c:	fb09 220b 	mla	r2, r9, fp, r2
 800c5a0:	4452      	add	r2, sl
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5a8:	f84c 3b04 	str.w	r3, [ip], #4
 800c5ac:	f857 3b04 	ldr.w	r3, [r7], #4
 800c5b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5b4:	f8bc 3000 	ldrh.w	r3, [ip]
 800c5b8:	fb09 330a 	mla	r3, r9, sl, r3
 800c5bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c5c0:	42bd      	cmp	r5, r7
 800c5c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5c6:	d8e5      	bhi.n	800c594 <__multiply+0xfc>
 800c5c8:	9a01      	ldr	r2, [sp, #4]
 800c5ca:	50a3      	str	r3, [r4, r2]
 800c5cc:	3404      	adds	r4, #4
 800c5ce:	e79f      	b.n	800c510 <__multiply+0x78>
 800c5d0:	3e01      	subs	r6, #1
 800c5d2:	e7a1      	b.n	800c518 <__multiply+0x80>
 800c5d4:	0800d0cc 	.word	0x0800d0cc
 800c5d8:	0800d0ee 	.word	0x0800d0ee

0800c5dc <__pow5mult>:
 800c5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e0:	4615      	mov	r5, r2
 800c5e2:	f012 0203 	ands.w	r2, r2, #3
 800c5e6:	4607      	mov	r7, r0
 800c5e8:	460e      	mov	r6, r1
 800c5ea:	d007      	beq.n	800c5fc <__pow5mult+0x20>
 800c5ec:	4c25      	ldr	r4, [pc, #148]	@ (800c684 <__pow5mult+0xa8>)
 800c5ee:	3a01      	subs	r2, #1
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5f6:	f7ff fea7 	bl	800c348 <__multadd>
 800c5fa:	4606      	mov	r6, r0
 800c5fc:	10ad      	asrs	r5, r5, #2
 800c5fe:	d03d      	beq.n	800c67c <__pow5mult+0xa0>
 800c600:	69fc      	ldr	r4, [r7, #28]
 800c602:	b97c      	cbnz	r4, 800c624 <__pow5mult+0x48>
 800c604:	2010      	movs	r0, #16
 800c606:	f7ff fcdb 	bl	800bfc0 <malloc>
 800c60a:	4602      	mov	r2, r0
 800c60c:	61f8      	str	r0, [r7, #28]
 800c60e:	b928      	cbnz	r0, 800c61c <__pow5mult+0x40>
 800c610:	4b1d      	ldr	r3, [pc, #116]	@ (800c688 <__pow5mult+0xac>)
 800c612:	481e      	ldr	r0, [pc, #120]	@ (800c68c <__pow5mult+0xb0>)
 800c614:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c618:	f000 fb6e 	bl	800ccf8 <__assert_func>
 800c61c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c620:	6004      	str	r4, [r0, #0]
 800c622:	60c4      	str	r4, [r0, #12]
 800c624:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c62c:	b94c      	cbnz	r4, 800c642 <__pow5mult+0x66>
 800c62e:	f240 2171 	movw	r1, #625	@ 0x271
 800c632:	4638      	mov	r0, r7
 800c634:	f7ff ff1a 	bl	800c46c <__i2b>
 800c638:	2300      	movs	r3, #0
 800c63a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c63e:	4604      	mov	r4, r0
 800c640:	6003      	str	r3, [r0, #0]
 800c642:	f04f 0900 	mov.w	r9, #0
 800c646:	07eb      	lsls	r3, r5, #31
 800c648:	d50a      	bpl.n	800c660 <__pow5mult+0x84>
 800c64a:	4631      	mov	r1, r6
 800c64c:	4622      	mov	r2, r4
 800c64e:	4638      	mov	r0, r7
 800c650:	f7ff ff22 	bl	800c498 <__multiply>
 800c654:	4631      	mov	r1, r6
 800c656:	4680      	mov	r8, r0
 800c658:	4638      	mov	r0, r7
 800c65a:	f7ff fe53 	bl	800c304 <_Bfree>
 800c65e:	4646      	mov	r6, r8
 800c660:	106d      	asrs	r5, r5, #1
 800c662:	d00b      	beq.n	800c67c <__pow5mult+0xa0>
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	b938      	cbnz	r0, 800c678 <__pow5mult+0x9c>
 800c668:	4622      	mov	r2, r4
 800c66a:	4621      	mov	r1, r4
 800c66c:	4638      	mov	r0, r7
 800c66e:	f7ff ff13 	bl	800c498 <__multiply>
 800c672:	6020      	str	r0, [r4, #0]
 800c674:	f8c0 9000 	str.w	r9, [r0]
 800c678:	4604      	mov	r4, r0
 800c67a:	e7e4      	b.n	800c646 <__pow5mult+0x6a>
 800c67c:	4630      	mov	r0, r6
 800c67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c682:	bf00      	nop
 800c684:	0800d2b0 	.word	0x0800d2b0
 800c688:	0800d05d 	.word	0x0800d05d
 800c68c:	0800d0ee 	.word	0x0800d0ee

0800c690 <__lshift>:
 800c690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c694:	460c      	mov	r4, r1
 800c696:	6849      	ldr	r1, [r1, #4]
 800c698:	6923      	ldr	r3, [r4, #16]
 800c69a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c69e:	68a3      	ldr	r3, [r4, #8]
 800c6a0:	4607      	mov	r7, r0
 800c6a2:	4691      	mov	r9, r2
 800c6a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6a8:	f108 0601 	add.w	r6, r8, #1
 800c6ac:	42b3      	cmp	r3, r6
 800c6ae:	db0b      	blt.n	800c6c8 <__lshift+0x38>
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7ff fde7 	bl	800c284 <_Balloc>
 800c6b6:	4605      	mov	r5, r0
 800c6b8:	b948      	cbnz	r0, 800c6ce <__lshift+0x3e>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	4b28      	ldr	r3, [pc, #160]	@ (800c760 <__lshift+0xd0>)
 800c6be:	4829      	ldr	r0, [pc, #164]	@ (800c764 <__lshift+0xd4>)
 800c6c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c6c4:	f000 fb18 	bl	800ccf8 <__assert_func>
 800c6c8:	3101      	adds	r1, #1
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	e7ee      	b.n	800c6ac <__lshift+0x1c>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f100 0114 	add.w	r1, r0, #20
 800c6d4:	f100 0210 	add.w	r2, r0, #16
 800c6d8:	4618      	mov	r0, r3
 800c6da:	4553      	cmp	r3, sl
 800c6dc:	db33      	blt.n	800c746 <__lshift+0xb6>
 800c6de:	6920      	ldr	r0, [r4, #16]
 800c6e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6e4:	f104 0314 	add.w	r3, r4, #20
 800c6e8:	f019 091f 	ands.w	r9, r9, #31
 800c6ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6f4:	d02b      	beq.n	800c74e <__lshift+0xbe>
 800c6f6:	f1c9 0e20 	rsb	lr, r9, #32
 800c6fa:	468a      	mov	sl, r1
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	6818      	ldr	r0, [r3, #0]
 800c700:	fa00 f009 	lsl.w	r0, r0, r9
 800c704:	4310      	orrs	r0, r2
 800c706:	f84a 0b04 	str.w	r0, [sl], #4
 800c70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c70e:	459c      	cmp	ip, r3
 800c710:	fa22 f20e 	lsr.w	r2, r2, lr
 800c714:	d8f3      	bhi.n	800c6fe <__lshift+0x6e>
 800c716:	ebac 0304 	sub.w	r3, ip, r4
 800c71a:	3b15      	subs	r3, #21
 800c71c:	f023 0303 	bic.w	r3, r3, #3
 800c720:	3304      	adds	r3, #4
 800c722:	f104 0015 	add.w	r0, r4, #21
 800c726:	4560      	cmp	r0, ip
 800c728:	bf88      	it	hi
 800c72a:	2304      	movhi	r3, #4
 800c72c:	50ca      	str	r2, [r1, r3]
 800c72e:	b10a      	cbz	r2, 800c734 <__lshift+0xa4>
 800c730:	f108 0602 	add.w	r6, r8, #2
 800c734:	3e01      	subs	r6, #1
 800c736:	4638      	mov	r0, r7
 800c738:	612e      	str	r6, [r5, #16]
 800c73a:	4621      	mov	r1, r4
 800c73c:	f7ff fde2 	bl	800c304 <_Bfree>
 800c740:	4628      	mov	r0, r5
 800c742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c746:	f842 0f04 	str.w	r0, [r2, #4]!
 800c74a:	3301      	adds	r3, #1
 800c74c:	e7c5      	b.n	800c6da <__lshift+0x4a>
 800c74e:	3904      	subs	r1, #4
 800c750:	f853 2b04 	ldr.w	r2, [r3], #4
 800c754:	f841 2f04 	str.w	r2, [r1, #4]!
 800c758:	459c      	cmp	ip, r3
 800c75a:	d8f9      	bhi.n	800c750 <__lshift+0xc0>
 800c75c:	e7ea      	b.n	800c734 <__lshift+0xa4>
 800c75e:	bf00      	nop
 800c760:	0800d0cc 	.word	0x0800d0cc
 800c764:	0800d0ee 	.word	0x0800d0ee

0800c768 <__mcmp>:
 800c768:	690a      	ldr	r2, [r1, #16]
 800c76a:	4603      	mov	r3, r0
 800c76c:	6900      	ldr	r0, [r0, #16]
 800c76e:	1a80      	subs	r0, r0, r2
 800c770:	b530      	push	{r4, r5, lr}
 800c772:	d10e      	bne.n	800c792 <__mcmp+0x2a>
 800c774:	3314      	adds	r3, #20
 800c776:	3114      	adds	r1, #20
 800c778:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c77c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c780:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c784:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c788:	4295      	cmp	r5, r2
 800c78a:	d003      	beq.n	800c794 <__mcmp+0x2c>
 800c78c:	d205      	bcs.n	800c79a <__mcmp+0x32>
 800c78e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c792:	bd30      	pop	{r4, r5, pc}
 800c794:	42a3      	cmp	r3, r4
 800c796:	d3f3      	bcc.n	800c780 <__mcmp+0x18>
 800c798:	e7fb      	b.n	800c792 <__mcmp+0x2a>
 800c79a:	2001      	movs	r0, #1
 800c79c:	e7f9      	b.n	800c792 <__mcmp+0x2a>
	...

0800c7a0 <__mdiff>:
 800c7a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	4689      	mov	r9, r1
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4648      	mov	r0, r9
 800c7ac:	4614      	mov	r4, r2
 800c7ae:	f7ff ffdb 	bl	800c768 <__mcmp>
 800c7b2:	1e05      	subs	r5, r0, #0
 800c7b4:	d112      	bne.n	800c7dc <__mdiff+0x3c>
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	f7ff fd63 	bl	800c284 <_Balloc>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	b928      	cbnz	r0, 800c7ce <__mdiff+0x2e>
 800c7c2:	4b3f      	ldr	r3, [pc, #252]	@ (800c8c0 <__mdiff+0x120>)
 800c7c4:	f240 2137 	movw	r1, #567	@ 0x237
 800c7c8:	483e      	ldr	r0, [pc, #248]	@ (800c8c4 <__mdiff+0x124>)
 800c7ca:	f000 fa95 	bl	800ccf8 <__assert_func>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	b003      	add	sp, #12
 800c7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7dc:	bfbc      	itt	lt
 800c7de:	464b      	movlt	r3, r9
 800c7e0:	46a1      	movlt	r9, r4
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c7e8:	bfba      	itte	lt
 800c7ea:	461c      	movlt	r4, r3
 800c7ec:	2501      	movlt	r5, #1
 800c7ee:	2500      	movge	r5, #0
 800c7f0:	f7ff fd48 	bl	800c284 <_Balloc>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	b918      	cbnz	r0, 800c800 <__mdiff+0x60>
 800c7f8:	4b31      	ldr	r3, [pc, #196]	@ (800c8c0 <__mdiff+0x120>)
 800c7fa:	f240 2145 	movw	r1, #581	@ 0x245
 800c7fe:	e7e3      	b.n	800c7c8 <__mdiff+0x28>
 800c800:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c804:	6926      	ldr	r6, [r4, #16]
 800c806:	60c5      	str	r5, [r0, #12]
 800c808:	f109 0310 	add.w	r3, r9, #16
 800c80c:	f109 0514 	add.w	r5, r9, #20
 800c810:	f104 0e14 	add.w	lr, r4, #20
 800c814:	f100 0b14 	add.w	fp, r0, #20
 800c818:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c81c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	46d9      	mov	r9, fp
 800c824:	f04f 0c00 	mov.w	ip, #0
 800c828:	9b01      	ldr	r3, [sp, #4]
 800c82a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c82e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c832:	9301      	str	r3, [sp, #4]
 800c834:	fa1f f38a 	uxth.w	r3, sl
 800c838:	4619      	mov	r1, r3
 800c83a:	b283      	uxth	r3, r0
 800c83c:	1acb      	subs	r3, r1, r3
 800c83e:	0c00      	lsrs	r0, r0, #16
 800c840:	4463      	add	r3, ip
 800c842:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c846:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c850:	4576      	cmp	r6, lr
 800c852:	f849 3b04 	str.w	r3, [r9], #4
 800c856:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c85a:	d8e5      	bhi.n	800c828 <__mdiff+0x88>
 800c85c:	1b33      	subs	r3, r6, r4
 800c85e:	3b15      	subs	r3, #21
 800c860:	f023 0303 	bic.w	r3, r3, #3
 800c864:	3415      	adds	r4, #21
 800c866:	3304      	adds	r3, #4
 800c868:	42a6      	cmp	r6, r4
 800c86a:	bf38      	it	cc
 800c86c:	2304      	movcc	r3, #4
 800c86e:	441d      	add	r5, r3
 800c870:	445b      	add	r3, fp
 800c872:	461e      	mov	r6, r3
 800c874:	462c      	mov	r4, r5
 800c876:	4544      	cmp	r4, r8
 800c878:	d30e      	bcc.n	800c898 <__mdiff+0xf8>
 800c87a:	f108 0103 	add.w	r1, r8, #3
 800c87e:	1b49      	subs	r1, r1, r5
 800c880:	f021 0103 	bic.w	r1, r1, #3
 800c884:	3d03      	subs	r5, #3
 800c886:	45a8      	cmp	r8, r5
 800c888:	bf38      	it	cc
 800c88a:	2100      	movcc	r1, #0
 800c88c:	440b      	add	r3, r1
 800c88e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c892:	b191      	cbz	r1, 800c8ba <__mdiff+0x11a>
 800c894:	6117      	str	r7, [r2, #16]
 800c896:	e79d      	b.n	800c7d4 <__mdiff+0x34>
 800c898:	f854 1b04 	ldr.w	r1, [r4], #4
 800c89c:	46e6      	mov	lr, ip
 800c89e:	0c08      	lsrs	r0, r1, #16
 800c8a0:	fa1c fc81 	uxtah	ip, ip, r1
 800c8a4:	4471      	add	r1, lr
 800c8a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c8aa:	b289      	uxth	r1, r1
 800c8ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c8b0:	f846 1b04 	str.w	r1, [r6], #4
 800c8b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8b8:	e7dd      	b.n	800c876 <__mdiff+0xd6>
 800c8ba:	3f01      	subs	r7, #1
 800c8bc:	e7e7      	b.n	800c88e <__mdiff+0xee>
 800c8be:	bf00      	nop
 800c8c0:	0800d0cc 	.word	0x0800d0cc
 800c8c4:	0800d0ee 	.word	0x0800d0ee

0800c8c8 <__d2b>:
 800c8c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8cc:	460f      	mov	r7, r1
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	ec59 8b10 	vmov	r8, r9, d0
 800c8d4:	4616      	mov	r6, r2
 800c8d6:	f7ff fcd5 	bl	800c284 <_Balloc>
 800c8da:	4604      	mov	r4, r0
 800c8dc:	b930      	cbnz	r0, 800c8ec <__d2b+0x24>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	4b23      	ldr	r3, [pc, #140]	@ (800c970 <__d2b+0xa8>)
 800c8e2:	4824      	ldr	r0, [pc, #144]	@ (800c974 <__d2b+0xac>)
 800c8e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8e8:	f000 fa06 	bl	800ccf8 <__assert_func>
 800c8ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8f4:	b10d      	cbz	r5, 800c8fa <__d2b+0x32>
 800c8f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8fa:	9301      	str	r3, [sp, #4]
 800c8fc:	f1b8 0300 	subs.w	r3, r8, #0
 800c900:	d023      	beq.n	800c94a <__d2b+0x82>
 800c902:	4668      	mov	r0, sp
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	f7ff fd84 	bl	800c412 <__lo0bits>
 800c90a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c90e:	b1d0      	cbz	r0, 800c946 <__d2b+0x7e>
 800c910:	f1c0 0320 	rsb	r3, r0, #32
 800c914:	fa02 f303 	lsl.w	r3, r2, r3
 800c918:	430b      	orrs	r3, r1
 800c91a:	40c2      	lsrs	r2, r0
 800c91c:	6163      	str	r3, [r4, #20]
 800c91e:	9201      	str	r2, [sp, #4]
 800c920:	9b01      	ldr	r3, [sp, #4]
 800c922:	61a3      	str	r3, [r4, #24]
 800c924:	2b00      	cmp	r3, #0
 800c926:	bf0c      	ite	eq
 800c928:	2201      	moveq	r2, #1
 800c92a:	2202      	movne	r2, #2
 800c92c:	6122      	str	r2, [r4, #16]
 800c92e:	b1a5      	cbz	r5, 800c95a <__d2b+0x92>
 800c930:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c934:	4405      	add	r5, r0
 800c936:	603d      	str	r5, [r7, #0]
 800c938:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c93c:	6030      	str	r0, [r6, #0]
 800c93e:	4620      	mov	r0, r4
 800c940:	b003      	add	sp, #12
 800c942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c946:	6161      	str	r1, [r4, #20]
 800c948:	e7ea      	b.n	800c920 <__d2b+0x58>
 800c94a:	a801      	add	r0, sp, #4
 800c94c:	f7ff fd61 	bl	800c412 <__lo0bits>
 800c950:	9b01      	ldr	r3, [sp, #4]
 800c952:	6163      	str	r3, [r4, #20]
 800c954:	3020      	adds	r0, #32
 800c956:	2201      	movs	r2, #1
 800c958:	e7e8      	b.n	800c92c <__d2b+0x64>
 800c95a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c95e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c962:	6038      	str	r0, [r7, #0]
 800c964:	6918      	ldr	r0, [r3, #16]
 800c966:	f7ff fd35 	bl	800c3d4 <__hi0bits>
 800c96a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c96e:	e7e5      	b.n	800c93c <__d2b+0x74>
 800c970:	0800d0cc 	.word	0x0800d0cc
 800c974:	0800d0ee 	.word	0x0800d0ee

0800c978 <__sread>:
 800c978:	b510      	push	{r4, lr}
 800c97a:	460c      	mov	r4, r1
 800c97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c980:	f000 f956 	bl	800cc30 <_read_r>
 800c984:	2800      	cmp	r0, #0
 800c986:	bfab      	itete	ge
 800c988:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c98a:	89a3      	ldrhlt	r3, [r4, #12]
 800c98c:	181b      	addge	r3, r3, r0
 800c98e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c992:	bfac      	ite	ge
 800c994:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c996:	81a3      	strhlt	r3, [r4, #12]
 800c998:	bd10      	pop	{r4, pc}

0800c99a <__swrite>:
 800c99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c99e:	461f      	mov	r7, r3
 800c9a0:	898b      	ldrh	r3, [r1, #12]
 800c9a2:	05db      	lsls	r3, r3, #23
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	460c      	mov	r4, r1
 800c9a8:	4616      	mov	r6, r2
 800c9aa:	d505      	bpl.n	800c9b8 <__swrite+0x1e>
 800c9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f000 f92a 	bl	800cc0c <_lseek_r>
 800c9b8:	89a3      	ldrh	r3, [r4, #12]
 800c9ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c9c2:	81a3      	strh	r3, [r4, #12]
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	463b      	mov	r3, r7
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ce:	f000 b951 	b.w	800cc74 <_write_r>

0800c9d2 <__sseek>:
 800c9d2:	b510      	push	{r4, lr}
 800c9d4:	460c      	mov	r4, r1
 800c9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9da:	f000 f917 	bl	800cc0c <_lseek_r>
 800c9de:	1c43      	adds	r3, r0, #1
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	bf15      	itete	ne
 800c9e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c9e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c9ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c9ee:	81a3      	strheq	r3, [r4, #12]
 800c9f0:	bf18      	it	ne
 800c9f2:	81a3      	strhne	r3, [r4, #12]
 800c9f4:	bd10      	pop	{r4, pc}

0800c9f6 <__sclose>:
 800c9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fa:	f000 b94d 	b.w	800cc98 <_close_r>

0800c9fe <__swbuf_r>:
 800c9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca00:	460e      	mov	r6, r1
 800ca02:	4614      	mov	r4, r2
 800ca04:	4605      	mov	r5, r0
 800ca06:	b118      	cbz	r0, 800ca10 <__swbuf_r+0x12>
 800ca08:	6a03      	ldr	r3, [r0, #32]
 800ca0a:	b90b      	cbnz	r3, 800ca10 <__swbuf_r+0x12>
 800ca0c:	f7fe face 	bl	800afac <__sinit>
 800ca10:	69a3      	ldr	r3, [r4, #24]
 800ca12:	60a3      	str	r3, [r4, #8]
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	071a      	lsls	r2, r3, #28
 800ca18:	d501      	bpl.n	800ca1e <__swbuf_r+0x20>
 800ca1a:	6923      	ldr	r3, [r4, #16]
 800ca1c:	b943      	cbnz	r3, 800ca30 <__swbuf_r+0x32>
 800ca1e:	4621      	mov	r1, r4
 800ca20:	4628      	mov	r0, r5
 800ca22:	f000 f82b 	bl	800ca7c <__swsetup_r>
 800ca26:	b118      	cbz	r0, 800ca30 <__swbuf_r+0x32>
 800ca28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	6922      	ldr	r2, [r4, #16]
 800ca34:	1a98      	subs	r0, r3, r2
 800ca36:	6963      	ldr	r3, [r4, #20]
 800ca38:	b2f6      	uxtb	r6, r6
 800ca3a:	4283      	cmp	r3, r0
 800ca3c:	4637      	mov	r7, r6
 800ca3e:	dc05      	bgt.n	800ca4c <__swbuf_r+0x4e>
 800ca40:	4621      	mov	r1, r4
 800ca42:	4628      	mov	r0, r5
 800ca44:	f7ff fbea 	bl	800c21c <_fflush_r>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d1ed      	bne.n	800ca28 <__swbuf_r+0x2a>
 800ca4c:	68a3      	ldr	r3, [r4, #8]
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	60a3      	str	r3, [r4, #8]
 800ca52:	6823      	ldr	r3, [r4, #0]
 800ca54:	1c5a      	adds	r2, r3, #1
 800ca56:	6022      	str	r2, [r4, #0]
 800ca58:	701e      	strb	r6, [r3, #0]
 800ca5a:	6962      	ldr	r2, [r4, #20]
 800ca5c:	1c43      	adds	r3, r0, #1
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d004      	beq.n	800ca6c <__swbuf_r+0x6e>
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	07db      	lsls	r3, r3, #31
 800ca66:	d5e1      	bpl.n	800ca2c <__swbuf_r+0x2e>
 800ca68:	2e0a      	cmp	r6, #10
 800ca6a:	d1df      	bne.n	800ca2c <__swbuf_r+0x2e>
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	4628      	mov	r0, r5
 800ca70:	f7ff fbd4 	bl	800c21c <_fflush_r>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	d0d9      	beq.n	800ca2c <__swbuf_r+0x2e>
 800ca78:	e7d6      	b.n	800ca28 <__swbuf_r+0x2a>
	...

0800ca7c <__swsetup_r>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	4b29      	ldr	r3, [pc, #164]	@ (800cb24 <__swsetup_r+0xa8>)
 800ca80:	4605      	mov	r5, r0
 800ca82:	6818      	ldr	r0, [r3, #0]
 800ca84:	460c      	mov	r4, r1
 800ca86:	b118      	cbz	r0, 800ca90 <__swsetup_r+0x14>
 800ca88:	6a03      	ldr	r3, [r0, #32]
 800ca8a:	b90b      	cbnz	r3, 800ca90 <__swsetup_r+0x14>
 800ca8c:	f7fe fa8e 	bl	800afac <__sinit>
 800ca90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca94:	0719      	lsls	r1, r3, #28
 800ca96:	d422      	bmi.n	800cade <__swsetup_r+0x62>
 800ca98:	06da      	lsls	r2, r3, #27
 800ca9a:	d407      	bmi.n	800caac <__swsetup_r+0x30>
 800ca9c:	2209      	movs	r2, #9
 800ca9e:	602a      	str	r2, [r5, #0]
 800caa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caa4:	81a3      	strh	r3, [r4, #12]
 800caa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800caaa:	e033      	b.n	800cb14 <__swsetup_r+0x98>
 800caac:	0758      	lsls	r0, r3, #29
 800caae:	d512      	bpl.n	800cad6 <__swsetup_r+0x5a>
 800cab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cab2:	b141      	cbz	r1, 800cac6 <__swsetup_r+0x4a>
 800cab4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cab8:	4299      	cmp	r1, r3
 800caba:	d002      	beq.n	800cac2 <__swsetup_r+0x46>
 800cabc:	4628      	mov	r0, r5
 800cabe:	f000 f94d 	bl	800cd5c <_free_r>
 800cac2:	2300      	movs	r3, #0
 800cac4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cacc:	81a3      	strh	r3, [r4, #12]
 800cace:	2300      	movs	r3, #0
 800cad0:	6063      	str	r3, [r4, #4]
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	6023      	str	r3, [r4, #0]
 800cad6:	89a3      	ldrh	r3, [r4, #12]
 800cad8:	f043 0308 	orr.w	r3, r3, #8
 800cadc:	81a3      	strh	r3, [r4, #12]
 800cade:	6923      	ldr	r3, [r4, #16]
 800cae0:	b94b      	cbnz	r3, 800caf6 <__swsetup_r+0x7a>
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800caec:	d003      	beq.n	800caf6 <__swsetup_r+0x7a>
 800caee:	4621      	mov	r1, r4
 800caf0:	4628      	mov	r0, r5
 800caf2:	f000 f83f 	bl	800cb74 <__smakebuf_r>
 800caf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cafa:	f013 0201 	ands.w	r2, r3, #1
 800cafe:	d00a      	beq.n	800cb16 <__swsetup_r+0x9a>
 800cb00:	2200      	movs	r2, #0
 800cb02:	60a2      	str	r2, [r4, #8]
 800cb04:	6962      	ldr	r2, [r4, #20]
 800cb06:	4252      	negs	r2, r2
 800cb08:	61a2      	str	r2, [r4, #24]
 800cb0a:	6922      	ldr	r2, [r4, #16]
 800cb0c:	b942      	cbnz	r2, 800cb20 <__swsetup_r+0xa4>
 800cb0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb12:	d1c5      	bne.n	800caa0 <__swsetup_r+0x24>
 800cb14:	bd38      	pop	{r3, r4, r5, pc}
 800cb16:	0799      	lsls	r1, r3, #30
 800cb18:	bf58      	it	pl
 800cb1a:	6962      	ldrpl	r2, [r4, #20]
 800cb1c:	60a2      	str	r2, [r4, #8]
 800cb1e:	e7f4      	b.n	800cb0a <__swsetup_r+0x8e>
 800cb20:	2000      	movs	r0, #0
 800cb22:	e7f7      	b.n	800cb14 <__swsetup_r+0x98>
 800cb24:	2400001c 	.word	0x2400001c

0800cb28 <__swhatbuf_r>:
 800cb28:	b570      	push	{r4, r5, r6, lr}
 800cb2a:	460c      	mov	r4, r1
 800cb2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb30:	2900      	cmp	r1, #0
 800cb32:	b096      	sub	sp, #88	@ 0x58
 800cb34:	4615      	mov	r5, r2
 800cb36:	461e      	mov	r6, r3
 800cb38:	da0d      	bge.n	800cb56 <__swhatbuf_r+0x2e>
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb40:	f04f 0100 	mov.w	r1, #0
 800cb44:	bf14      	ite	ne
 800cb46:	2340      	movne	r3, #64	@ 0x40
 800cb48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	6031      	str	r1, [r6, #0]
 800cb50:	602b      	str	r3, [r5, #0]
 800cb52:	b016      	add	sp, #88	@ 0x58
 800cb54:	bd70      	pop	{r4, r5, r6, pc}
 800cb56:	466a      	mov	r2, sp
 800cb58:	f000 f8ae 	bl	800ccb8 <_fstat_r>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	dbec      	blt.n	800cb3a <__swhatbuf_r+0x12>
 800cb60:	9901      	ldr	r1, [sp, #4]
 800cb62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb6a:	4259      	negs	r1, r3
 800cb6c:	4159      	adcs	r1, r3
 800cb6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb72:	e7eb      	b.n	800cb4c <__swhatbuf_r+0x24>

0800cb74 <__smakebuf_r>:
 800cb74:	898b      	ldrh	r3, [r1, #12]
 800cb76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb78:	079d      	lsls	r5, r3, #30
 800cb7a:	4606      	mov	r6, r0
 800cb7c:	460c      	mov	r4, r1
 800cb7e:	d507      	bpl.n	800cb90 <__smakebuf_r+0x1c>
 800cb80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb84:	6023      	str	r3, [r4, #0]
 800cb86:	6123      	str	r3, [r4, #16]
 800cb88:	2301      	movs	r3, #1
 800cb8a:	6163      	str	r3, [r4, #20]
 800cb8c:	b003      	add	sp, #12
 800cb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb90:	ab01      	add	r3, sp, #4
 800cb92:	466a      	mov	r2, sp
 800cb94:	f7ff ffc8 	bl	800cb28 <__swhatbuf_r>
 800cb98:	9f00      	ldr	r7, [sp, #0]
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	4639      	mov	r1, r7
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f7ff fa38 	bl	800c014 <_malloc_r>
 800cba4:	b948      	cbnz	r0, 800cbba <__smakebuf_r+0x46>
 800cba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbaa:	059a      	lsls	r2, r3, #22
 800cbac:	d4ee      	bmi.n	800cb8c <__smakebuf_r+0x18>
 800cbae:	f023 0303 	bic.w	r3, r3, #3
 800cbb2:	f043 0302 	orr.w	r3, r3, #2
 800cbb6:	81a3      	strh	r3, [r4, #12]
 800cbb8:	e7e2      	b.n	800cb80 <__smakebuf_r+0xc>
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	6020      	str	r0, [r4, #0]
 800cbbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbc2:	81a3      	strh	r3, [r4, #12]
 800cbc4:	9b01      	ldr	r3, [sp, #4]
 800cbc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbca:	b15b      	cbz	r3, 800cbe4 <__smakebuf_r+0x70>
 800cbcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f000 f80b 	bl	800cbec <_isatty_r>
 800cbd6:	b128      	cbz	r0, 800cbe4 <__smakebuf_r+0x70>
 800cbd8:	89a3      	ldrh	r3, [r4, #12]
 800cbda:	f023 0303 	bic.w	r3, r3, #3
 800cbde:	f043 0301 	orr.w	r3, r3, #1
 800cbe2:	81a3      	strh	r3, [r4, #12]
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	431d      	orrs	r5, r3
 800cbe8:	81a5      	strh	r5, [r4, #12]
 800cbea:	e7cf      	b.n	800cb8c <__smakebuf_r+0x18>

0800cbec <_isatty_r>:
 800cbec:	b538      	push	{r3, r4, r5, lr}
 800cbee:	4d06      	ldr	r5, [pc, #24]	@ (800cc08 <_isatty_r+0x1c>)
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	4608      	mov	r0, r1
 800cbf6:	602b      	str	r3, [r5, #0]
 800cbf8:	f7f4 fb24 	bl	8001244 <_isatty>
 800cbfc:	1c43      	adds	r3, r0, #1
 800cbfe:	d102      	bne.n	800cc06 <_isatty_r+0x1a>
 800cc00:	682b      	ldr	r3, [r5, #0]
 800cc02:	b103      	cbz	r3, 800cc06 <_isatty_r+0x1a>
 800cc04:	6023      	str	r3, [r4, #0]
 800cc06:	bd38      	pop	{r3, r4, r5, pc}
 800cc08:	24000cec 	.word	0x24000cec

0800cc0c <_lseek_r>:
 800cc0c:	b538      	push	{r3, r4, r5, lr}
 800cc0e:	4d07      	ldr	r5, [pc, #28]	@ (800cc2c <_lseek_r+0x20>)
 800cc10:	4604      	mov	r4, r0
 800cc12:	4608      	mov	r0, r1
 800cc14:	4611      	mov	r1, r2
 800cc16:	2200      	movs	r2, #0
 800cc18:	602a      	str	r2, [r5, #0]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	f7f4 fb1d 	bl	800125a <_lseek>
 800cc20:	1c43      	adds	r3, r0, #1
 800cc22:	d102      	bne.n	800cc2a <_lseek_r+0x1e>
 800cc24:	682b      	ldr	r3, [r5, #0]
 800cc26:	b103      	cbz	r3, 800cc2a <_lseek_r+0x1e>
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	bd38      	pop	{r3, r4, r5, pc}
 800cc2c:	24000cec 	.word	0x24000cec

0800cc30 <_read_r>:
 800cc30:	b538      	push	{r3, r4, r5, lr}
 800cc32:	4d07      	ldr	r5, [pc, #28]	@ (800cc50 <_read_r+0x20>)
 800cc34:	4604      	mov	r4, r0
 800cc36:	4608      	mov	r0, r1
 800cc38:	4611      	mov	r1, r2
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	602a      	str	r2, [r5, #0]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	f7f4 fac7 	bl	80011d2 <_read>
 800cc44:	1c43      	adds	r3, r0, #1
 800cc46:	d102      	bne.n	800cc4e <_read_r+0x1e>
 800cc48:	682b      	ldr	r3, [r5, #0]
 800cc4a:	b103      	cbz	r3, 800cc4e <_read_r+0x1e>
 800cc4c:	6023      	str	r3, [r4, #0]
 800cc4e:	bd38      	pop	{r3, r4, r5, pc}
 800cc50:	24000cec 	.word	0x24000cec

0800cc54 <_sbrk_r>:
 800cc54:	b538      	push	{r3, r4, r5, lr}
 800cc56:	4d06      	ldr	r5, [pc, #24]	@ (800cc70 <_sbrk_r+0x1c>)
 800cc58:	2300      	movs	r3, #0
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	4608      	mov	r0, r1
 800cc5e:	602b      	str	r3, [r5, #0]
 800cc60:	f7f4 fb08 	bl	8001274 <_sbrk>
 800cc64:	1c43      	adds	r3, r0, #1
 800cc66:	d102      	bne.n	800cc6e <_sbrk_r+0x1a>
 800cc68:	682b      	ldr	r3, [r5, #0]
 800cc6a:	b103      	cbz	r3, 800cc6e <_sbrk_r+0x1a>
 800cc6c:	6023      	str	r3, [r4, #0]
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	24000cec 	.word	0x24000cec

0800cc74 <_write_r>:
 800cc74:	b538      	push	{r3, r4, r5, lr}
 800cc76:	4d07      	ldr	r5, [pc, #28]	@ (800cc94 <_write_r+0x20>)
 800cc78:	4604      	mov	r4, r0
 800cc7a:	4608      	mov	r0, r1
 800cc7c:	4611      	mov	r1, r2
 800cc7e:	2200      	movs	r2, #0
 800cc80:	602a      	str	r2, [r5, #0]
 800cc82:	461a      	mov	r2, r3
 800cc84:	f7f3 fe32 	bl	80008ec <_write>
 800cc88:	1c43      	adds	r3, r0, #1
 800cc8a:	d102      	bne.n	800cc92 <_write_r+0x1e>
 800cc8c:	682b      	ldr	r3, [r5, #0]
 800cc8e:	b103      	cbz	r3, 800cc92 <_write_r+0x1e>
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	bd38      	pop	{r3, r4, r5, pc}
 800cc94:	24000cec 	.word	0x24000cec

0800cc98 <_close_r>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4d06      	ldr	r5, [pc, #24]	@ (800ccb4 <_close_r+0x1c>)
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4604      	mov	r4, r0
 800cca0:	4608      	mov	r0, r1
 800cca2:	602b      	str	r3, [r5, #0]
 800cca4:	f7f4 fab2 	bl	800120c <_close>
 800cca8:	1c43      	adds	r3, r0, #1
 800ccaa:	d102      	bne.n	800ccb2 <_close_r+0x1a>
 800ccac:	682b      	ldr	r3, [r5, #0]
 800ccae:	b103      	cbz	r3, 800ccb2 <_close_r+0x1a>
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	bd38      	pop	{r3, r4, r5, pc}
 800ccb4:	24000cec 	.word	0x24000cec

0800ccb8 <_fstat_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4d07      	ldr	r5, [pc, #28]	@ (800ccd8 <_fstat_r+0x20>)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	602b      	str	r3, [r5, #0]
 800ccc6:	f7f4 faad 	bl	8001224 <_fstat>
 800ccca:	1c43      	adds	r3, r0, #1
 800cccc:	d102      	bne.n	800ccd4 <_fstat_r+0x1c>
 800ccce:	682b      	ldr	r3, [r5, #0]
 800ccd0:	b103      	cbz	r3, 800ccd4 <_fstat_r+0x1c>
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	bd38      	pop	{r3, r4, r5, pc}
 800ccd6:	bf00      	nop
 800ccd8:	24000cec 	.word	0x24000cec

0800ccdc <memcpy>:
 800ccdc:	440a      	add	r2, r1
 800ccde:	4291      	cmp	r1, r2
 800cce0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cce4:	d100      	bne.n	800cce8 <memcpy+0xc>
 800cce6:	4770      	bx	lr
 800cce8:	b510      	push	{r4, lr}
 800ccea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccf2:	4291      	cmp	r1, r2
 800ccf4:	d1f9      	bne.n	800ccea <memcpy+0xe>
 800ccf6:	bd10      	pop	{r4, pc}

0800ccf8 <__assert_func>:
 800ccf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccfa:	4614      	mov	r4, r2
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	4b09      	ldr	r3, [pc, #36]	@ (800cd24 <__assert_func+0x2c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4605      	mov	r5, r0
 800cd04:	68d8      	ldr	r0, [r3, #12]
 800cd06:	b14c      	cbz	r4, 800cd1c <__assert_func+0x24>
 800cd08:	4b07      	ldr	r3, [pc, #28]	@ (800cd28 <__assert_func+0x30>)
 800cd0a:	9100      	str	r1, [sp, #0]
 800cd0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd10:	4906      	ldr	r1, [pc, #24]	@ (800cd2c <__assert_func+0x34>)
 800cd12:	462b      	mov	r3, r5
 800cd14:	f000 f87e 	bl	800ce14 <fiprintf>
 800cd18:	f000 f89b 	bl	800ce52 <abort>
 800cd1c:	4b04      	ldr	r3, [pc, #16]	@ (800cd30 <__assert_func+0x38>)
 800cd1e:	461c      	mov	r4, r3
 800cd20:	e7f3      	b.n	800cd0a <__assert_func+0x12>
 800cd22:	bf00      	nop
 800cd24:	2400001c 	.word	0x2400001c
 800cd28:	0800d151 	.word	0x0800d151
 800cd2c:	0800d15e 	.word	0x0800d15e
 800cd30:	0800d18c 	.word	0x0800d18c

0800cd34 <_calloc_r>:
 800cd34:	b570      	push	{r4, r5, r6, lr}
 800cd36:	fba1 5402 	umull	r5, r4, r1, r2
 800cd3a:	b934      	cbnz	r4, 800cd4a <_calloc_r+0x16>
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	f7ff f969 	bl	800c014 <_malloc_r>
 800cd42:	4606      	mov	r6, r0
 800cd44:	b928      	cbnz	r0, 800cd52 <_calloc_r+0x1e>
 800cd46:	4630      	mov	r0, r6
 800cd48:	bd70      	pop	{r4, r5, r6, pc}
 800cd4a:	220c      	movs	r2, #12
 800cd4c:	6002      	str	r2, [r0, #0]
 800cd4e:	2600      	movs	r6, #0
 800cd50:	e7f9      	b.n	800cd46 <_calloc_r+0x12>
 800cd52:	462a      	mov	r2, r5
 800cd54:	4621      	mov	r1, r4
 800cd56:	f7fe f9cf 	bl	800b0f8 <memset>
 800cd5a:	e7f4      	b.n	800cd46 <_calloc_r+0x12>

0800cd5c <_free_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4605      	mov	r5, r0
 800cd60:	2900      	cmp	r1, #0
 800cd62:	d041      	beq.n	800cde8 <_free_r+0x8c>
 800cd64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd68:	1f0c      	subs	r4, r1, #4
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	bfb8      	it	lt
 800cd6e:	18e4      	addlt	r4, r4, r3
 800cd70:	f7ff fa7c 	bl	800c26c <__malloc_lock>
 800cd74:	4a1d      	ldr	r2, [pc, #116]	@ (800cdec <_free_r+0x90>)
 800cd76:	6813      	ldr	r3, [r2, #0]
 800cd78:	b933      	cbnz	r3, 800cd88 <_free_r+0x2c>
 800cd7a:	6063      	str	r3, [r4, #4]
 800cd7c:	6014      	str	r4, [r2, #0]
 800cd7e:	4628      	mov	r0, r5
 800cd80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd84:	f7ff ba78 	b.w	800c278 <__malloc_unlock>
 800cd88:	42a3      	cmp	r3, r4
 800cd8a:	d908      	bls.n	800cd9e <_free_r+0x42>
 800cd8c:	6820      	ldr	r0, [r4, #0]
 800cd8e:	1821      	adds	r1, r4, r0
 800cd90:	428b      	cmp	r3, r1
 800cd92:	bf01      	itttt	eq
 800cd94:	6819      	ldreq	r1, [r3, #0]
 800cd96:	685b      	ldreq	r3, [r3, #4]
 800cd98:	1809      	addeq	r1, r1, r0
 800cd9a:	6021      	streq	r1, [r4, #0]
 800cd9c:	e7ed      	b.n	800cd7a <_free_r+0x1e>
 800cd9e:	461a      	mov	r2, r3
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	b10b      	cbz	r3, 800cda8 <_free_r+0x4c>
 800cda4:	42a3      	cmp	r3, r4
 800cda6:	d9fa      	bls.n	800cd9e <_free_r+0x42>
 800cda8:	6811      	ldr	r1, [r2, #0]
 800cdaa:	1850      	adds	r0, r2, r1
 800cdac:	42a0      	cmp	r0, r4
 800cdae:	d10b      	bne.n	800cdc8 <_free_r+0x6c>
 800cdb0:	6820      	ldr	r0, [r4, #0]
 800cdb2:	4401      	add	r1, r0
 800cdb4:	1850      	adds	r0, r2, r1
 800cdb6:	4283      	cmp	r3, r0
 800cdb8:	6011      	str	r1, [r2, #0]
 800cdba:	d1e0      	bne.n	800cd7e <_free_r+0x22>
 800cdbc:	6818      	ldr	r0, [r3, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	6053      	str	r3, [r2, #4]
 800cdc2:	4408      	add	r0, r1
 800cdc4:	6010      	str	r0, [r2, #0]
 800cdc6:	e7da      	b.n	800cd7e <_free_r+0x22>
 800cdc8:	d902      	bls.n	800cdd0 <_free_r+0x74>
 800cdca:	230c      	movs	r3, #12
 800cdcc:	602b      	str	r3, [r5, #0]
 800cdce:	e7d6      	b.n	800cd7e <_free_r+0x22>
 800cdd0:	6820      	ldr	r0, [r4, #0]
 800cdd2:	1821      	adds	r1, r4, r0
 800cdd4:	428b      	cmp	r3, r1
 800cdd6:	bf04      	itt	eq
 800cdd8:	6819      	ldreq	r1, [r3, #0]
 800cdda:	685b      	ldreq	r3, [r3, #4]
 800cddc:	6063      	str	r3, [r4, #4]
 800cdde:	bf04      	itt	eq
 800cde0:	1809      	addeq	r1, r1, r0
 800cde2:	6021      	streq	r1, [r4, #0]
 800cde4:	6054      	str	r4, [r2, #4]
 800cde6:	e7ca      	b.n	800cd7e <_free_r+0x22>
 800cde8:	bd38      	pop	{r3, r4, r5, pc}
 800cdea:	bf00      	nop
 800cdec:	24000ce8 	.word	0x24000ce8

0800cdf0 <__ascii_mbtowc>:
 800cdf0:	b082      	sub	sp, #8
 800cdf2:	b901      	cbnz	r1, 800cdf6 <__ascii_mbtowc+0x6>
 800cdf4:	a901      	add	r1, sp, #4
 800cdf6:	b142      	cbz	r2, 800ce0a <__ascii_mbtowc+0x1a>
 800cdf8:	b14b      	cbz	r3, 800ce0e <__ascii_mbtowc+0x1e>
 800cdfa:	7813      	ldrb	r3, [r2, #0]
 800cdfc:	600b      	str	r3, [r1, #0]
 800cdfe:	7812      	ldrb	r2, [r2, #0]
 800ce00:	1e10      	subs	r0, r2, #0
 800ce02:	bf18      	it	ne
 800ce04:	2001      	movne	r0, #1
 800ce06:	b002      	add	sp, #8
 800ce08:	4770      	bx	lr
 800ce0a:	4610      	mov	r0, r2
 800ce0c:	e7fb      	b.n	800ce06 <__ascii_mbtowc+0x16>
 800ce0e:	f06f 0001 	mvn.w	r0, #1
 800ce12:	e7f8      	b.n	800ce06 <__ascii_mbtowc+0x16>

0800ce14 <fiprintf>:
 800ce14:	b40e      	push	{r1, r2, r3}
 800ce16:	b503      	push	{r0, r1, lr}
 800ce18:	4601      	mov	r1, r0
 800ce1a:	ab03      	add	r3, sp, #12
 800ce1c:	4805      	ldr	r0, [pc, #20]	@ (800ce34 <fiprintf+0x20>)
 800ce1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce22:	6800      	ldr	r0, [r0, #0]
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	f7fe ffb3 	bl	800bd90 <_vfiprintf_r>
 800ce2a:	b002      	add	sp, #8
 800ce2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce30:	b003      	add	sp, #12
 800ce32:	4770      	bx	lr
 800ce34:	2400001c 	.word	0x2400001c

0800ce38 <__ascii_wctomb>:
 800ce38:	4603      	mov	r3, r0
 800ce3a:	4608      	mov	r0, r1
 800ce3c:	b141      	cbz	r1, 800ce50 <__ascii_wctomb+0x18>
 800ce3e:	2aff      	cmp	r2, #255	@ 0xff
 800ce40:	d904      	bls.n	800ce4c <__ascii_wctomb+0x14>
 800ce42:	228a      	movs	r2, #138	@ 0x8a
 800ce44:	601a      	str	r2, [r3, #0]
 800ce46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce4a:	4770      	bx	lr
 800ce4c:	700a      	strb	r2, [r1, #0]
 800ce4e:	2001      	movs	r0, #1
 800ce50:	4770      	bx	lr

0800ce52 <abort>:
 800ce52:	b508      	push	{r3, lr}
 800ce54:	2006      	movs	r0, #6
 800ce56:	f000 f82b 	bl	800ceb0 <raise>
 800ce5a:	2001      	movs	r0, #1
 800ce5c:	f7f4 f9ae 	bl	80011bc <_exit>

0800ce60 <_raise_r>:
 800ce60:	291f      	cmp	r1, #31
 800ce62:	b538      	push	{r3, r4, r5, lr}
 800ce64:	4605      	mov	r5, r0
 800ce66:	460c      	mov	r4, r1
 800ce68:	d904      	bls.n	800ce74 <_raise_r+0x14>
 800ce6a:	2316      	movs	r3, #22
 800ce6c:	6003      	str	r3, [r0, #0]
 800ce6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce76:	b112      	cbz	r2, 800ce7e <_raise_r+0x1e>
 800ce78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce7c:	b94b      	cbnz	r3, 800ce92 <_raise_r+0x32>
 800ce7e:	4628      	mov	r0, r5
 800ce80:	f000 f830 	bl	800cee4 <_getpid_r>
 800ce84:	4622      	mov	r2, r4
 800ce86:	4601      	mov	r1, r0
 800ce88:	4628      	mov	r0, r5
 800ce8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce8e:	f000 b817 	b.w	800cec0 <_kill_r>
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d00a      	beq.n	800ceac <_raise_r+0x4c>
 800ce96:	1c59      	adds	r1, r3, #1
 800ce98:	d103      	bne.n	800cea2 <_raise_r+0x42>
 800ce9a:	2316      	movs	r3, #22
 800ce9c:	6003      	str	r3, [r0, #0]
 800ce9e:	2001      	movs	r0, #1
 800cea0:	e7e7      	b.n	800ce72 <_raise_r+0x12>
 800cea2:	2100      	movs	r1, #0
 800cea4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cea8:	4620      	mov	r0, r4
 800ceaa:	4798      	blx	r3
 800ceac:	2000      	movs	r0, #0
 800ceae:	e7e0      	b.n	800ce72 <_raise_r+0x12>

0800ceb0 <raise>:
 800ceb0:	4b02      	ldr	r3, [pc, #8]	@ (800cebc <raise+0xc>)
 800ceb2:	4601      	mov	r1, r0
 800ceb4:	6818      	ldr	r0, [r3, #0]
 800ceb6:	f7ff bfd3 	b.w	800ce60 <_raise_r>
 800ceba:	bf00      	nop
 800cebc:	2400001c 	.word	0x2400001c

0800cec0 <_kill_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4d07      	ldr	r5, [pc, #28]	@ (800cee0 <_kill_r+0x20>)
 800cec4:	2300      	movs	r3, #0
 800cec6:	4604      	mov	r4, r0
 800cec8:	4608      	mov	r0, r1
 800ceca:	4611      	mov	r1, r2
 800cecc:	602b      	str	r3, [r5, #0]
 800cece:	f7f4 f965 	bl	800119c <_kill>
 800ced2:	1c43      	adds	r3, r0, #1
 800ced4:	d102      	bne.n	800cedc <_kill_r+0x1c>
 800ced6:	682b      	ldr	r3, [r5, #0]
 800ced8:	b103      	cbz	r3, 800cedc <_kill_r+0x1c>
 800ceda:	6023      	str	r3, [r4, #0]
 800cedc:	bd38      	pop	{r3, r4, r5, pc}
 800cede:	bf00      	nop
 800cee0:	24000cec 	.word	0x24000cec

0800cee4 <_getpid_r>:
 800cee4:	f7f4 b952 	b.w	800118c <_getpid>

0800cee8 <_init>:
 800cee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceea:	bf00      	nop
 800ceec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceee:	bc08      	pop	{r3}
 800cef0:	469e      	mov	lr, r3
 800cef2:	4770      	bx	lr

0800cef4 <_fini>:
 800cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef6:	bf00      	nop
 800cef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cefa:	bc08      	pop	{r3}
 800cefc:	469e      	mov	lr, r3
 800cefe:	4770      	bx	lr
