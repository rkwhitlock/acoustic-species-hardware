
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b120  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800b3c0  0800b3c0  0000c3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b75c  0800b75c  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b75c  0800b75c  0000c75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b764  0800b764  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b764  0800b764  0000c764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b768  0800b768  0000c768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800b76c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  240001d8  0800b944  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000700  0800b944  0000d700  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df2a  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213f  00000000  00000000  0001b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0001d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a8  00000000  00000000  0001dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fce7  00000000  00000000  0001e690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b39  00000000  00000000  0005e377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00199e3c  00000000  00000000  0006eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00208cec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb8  00000000  00000000  00208d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0020c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b3a8 	.word	0x0800b3a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800b3a8 	.word	0x0800b3a8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	@ (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	@ (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	@ (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	@ (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	@ (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	@ (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	@ (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	@ (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	@ (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	@ (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	@ (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	@ (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	@ (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	@ (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	@ (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	@ (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	@ (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000464:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d013      	beq.n	80004fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d00b      	beq.n	80004fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e4:	e000      	b.n	80004e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f9      	beq.n	80004e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004f2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	b2d2      	uxtb	r2, r2
 80004fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004fc:	687b      	ldr	r3, [r7, #4]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <main>:
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai);
void Error_Handler(void);

// Main function
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 8000512:	f000 fca1 	bl	8000e58 <HAL_Init>

    // Initialize system
    SystemClock_Config();
 8000516:	f000 f861 	bl	80005dc <SystemClock_Config>
    MX_GPIO_Init();
 800051a:	f000 f969 	bl	80007f0 <MX_GPIO_Init>
    MX_DMA_Init();
 800051e:	f000 f9fd 	bl	800091c <MX_DMA_Init>
    MX_SAI1_Init();
 8000522:	f000 f9ad 	bl	8000880 <MX_SAI1_Init>
    // GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    // HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    // Start SAI reception using DMA in circular mode
    HAL_StatusTypeDef status =
        HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)audio_buffer, BUFFER_LEN);
 8000526:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800052a:	4924      	ldr	r1, [pc, #144]	@ (80005bc <main+0xb0>)
 800052c:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <main+0xb4>)
 800052e:	f007 ff83 	bl	8008438 <HAL_SAI_Receive_DMA>
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <main+0x34>
    {
        // Indicate specific error with LED pattern or debug output
        Error_Handler();
 800053c:	f000 fae2 	bl	8000b04 <Error_Handler>

    // Main processing loop
    while (1)
    {
        // Process buffers as before
        if (buffer_half_ready)
 8000540:	4b20      	ldr	r3, [pc, #128]	@ (80005c4 <main+0xb8>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d006      	beq.n	8000558 <main+0x4c>
        {
            ProcessAudioData(&audio_buffer[0], BUFFER_LEN / 2);
 800054a:	2180      	movs	r1, #128	@ 0x80
 800054c:	481b      	ldr	r0, [pc, #108]	@ (80005bc <main+0xb0>)
 800054e:	f000 fa73 	bl	8000a38 <ProcessAudioData>
            buffer_half_ready = 0;
 8000552:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <main+0xb8>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
        }

        if (buffer_full_ready)
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <main+0xbc>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d006      	beq.n	8000570 <main+0x64>
        {
            ProcessAudioData(&audio_buffer[BUFFER_LEN / 2], BUFFER_LEN / 2);
 8000562:	2180      	movs	r1, #128	@ 0x80
 8000564:	4819      	ldr	r0, [pc, #100]	@ (80005cc <main+0xc0>)
 8000566:	f000 fa67 	bl	8000a38 <ProcessAudioData>
            buffer_full_ready = 0;
 800056a:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <main+0xbc>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
        }

        // Check SAI status periodically
        static uint32_t last_check = 0;
        uint32_t current_time = HAL_GetTick();
 8000570:	f000 fcf8 	bl	8000f64 <HAL_GetTick>
 8000574:	6038      	str	r0, [r7, #0]
        if (current_time - last_check > 1000) // Check every second
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <main+0xc4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	683a      	ldr	r2, [r7, #0]
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000582:	d9dd      	bls.n	8000540 <main+0x34>
        {
            last_check = current_time;
 8000584:	4a12      	ldr	r2, [pc, #72]	@ (80005d0 <main+0xc4>)
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	6013      	str	r3, [r2, #0]

            // Check transfer counts and SAI state
            if (half_transfer_count == 0 && full_transfer_count == 0)
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <main+0xc8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d10c      	bne.n	80005ac <main+0xa0>
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <main+0xcc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d108      	bne.n	80005ac <main+0xa0>
            {
                // No transfers happening - try restarting
                HAL_SAI_DMAStop(&hsai_BlockA1);
 800059a:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <main+0xb4>)
 800059c:	f007 fe3e 	bl	800821c <HAL_SAI_DMAStop>
                HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)audio_buffer, BUFFER_LEN);
 80005a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005a4:	4905      	ldr	r1, [pc, #20]	@ (80005bc <main+0xb0>)
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <main+0xb4>)
 80005a8:	f007 ff46 	bl	8008438 <HAL_SAI_Receive_DMA>
            }

            // Reset counters to check if new transfers happen
            half_transfer_count = 0;
 80005ac:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <main+0xc8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
            full_transfer_count = 0;
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <main+0xcc>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
    {
 80005b8:	e7c2      	b.n	8000540 <main+0x34>
 80005ba:	bf00      	nop
 80005bc:	240001f4 	.word	0x240001f4
 80005c0:	24000510 	.word	0x24000510
 80005c4:	240003f4 	.word	0x240003f4
 80005c8:	240003f5 	.word	0x240003f5
 80005cc:	240002f4 	.word	0x240002f4
 80005d0:	240005a8 	.word	0x240005a8
 80005d4:	240003f8 	.word	0x240003f8
 80005d8:	240003fc 	.word	0x240003fc

080005dc <SystemClock_Config>:
    }
}

// System clock configuration - optimized for audio applications
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0d0      	sub	sp, #320	@ 0x140
 80005e0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80005e6:	224c      	movs	r2, #76	@ 0x4c
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f008 ffe6 	bl	80095bc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f008 ffdf 	bl	80095bc <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000602:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000606:	4618      	mov	r0, r3
 8000608:	23c8      	movs	r3, #200	@ 0xc8
 800060a:	461a      	mov	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f008 ffd5 	bl	80095bc <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000612:	2004      	movs	r0, #4
 8000614:	f003 fdf0 	bl	80041f8 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800061c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	4b6f      	ldr	r3, [pc, #444]	@ (80007e4 <SystemClock_Config+0x208>)
 8000626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000628:	4a6e      	ldr	r2, [pc, #440]	@ (80007e4 <SystemClock_Config+0x208>)
 800062a:	f023 0301 	bic.w	r3, r3, #1
 800062e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000630:	4b6c      	ldr	r3, [pc, #432]	@ (80007e4 <SystemClock_Config+0x208>)
 8000632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000634:	f003 0201 	and.w	r2, r3, #1
 8000638:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800063c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	4b69      	ldr	r3, [pc, #420]	@ (80007e8 <SystemClock_Config+0x20c>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	4a68      	ldr	r2, [pc, #416]	@ (80007e8 <SystemClock_Config+0x20c>)
 8000648:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064c:	6193      	str	r3, [r2, #24]
 800064e:	4b66      	ldr	r3, [pc, #408]	@ (80007e8 <SystemClock_Config+0x20c>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8000656:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800065a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000664:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000668:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800066a:	bf00      	nop
 800066c:	4b5e      	ldr	r3, [pc, #376]	@ (80007e8 <SystemClock_Config+0x20c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000678:	d1f8      	bne.n	800066c <SystemClock_Config+0x90>
    {
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 800067a:	f003 fdad 	bl	80041d8 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800067e:	f000 fc7d 	bl	8000f7c <HAL_GetREVID>
 8000682:	4b5a      	ldr	r3, [pc, #360]	@ (80007ec <SystemClock_Config+0x210>)
 8000684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000686:	4a59      	ldr	r2, [pc, #356]	@ (80007ec <SystemClock_Config+0x210>)
 8000688:	f023 0318 	bic.w	r3, r3, #24
 800068c:	6713      	str	r3, [r2, #112]	@ 0x70

    /** Macro to configure the PLL clock source
     */
    __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800068e:	4b57      	ldr	r3, [pc, #348]	@ (80007ec <SystemClock_Config+0x210>)
 8000690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000692:	f023 0303 	bic.w	r3, r3, #3
 8000696:	4a55      	ldr	r2, [pc, #340]	@ (80007ec <SystemClock_Config+0x210>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6293      	str	r3, [r2, #40]	@ 0x28

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069e:	2301      	movs	r3, #1
 80006a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	2302      	movs	r3, #2
 80006b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    RCC_OscInitStruct.PLL.PLLM = 5;
 80006b8:	2305      	movs	r3, #5
 80006ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    RCC_OscInitStruct.PLL.PLLN = 160;
 80006be:	23a0      	movs	r3, #160	@ 0xa0
 80006c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    RCC_OscInitStruct.PLL.PLLP = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006d6:	2308      	movs	r3, #8
 80006d8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fddd 	bl	80042ac <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x120>
    {
        Error_Handler();
 80006f8:	f000 fa04 	bl	8000b04 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 80006fc:	233f      	movs	r3, #63	@ 0x3f
 80006fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 |
                                  RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800070e:	2308      	movs	r3, #8
 8000710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000714:	2340      	movs	r3, #64	@ 0x40
 8000716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800071a:	2340      	movs	r3, #64	@ 0x40
 800071c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000724:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000728:	2340      	movs	r3, #64	@ 0x40
 800072a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000732:	2102      	movs	r1, #2
 8000734:	4618      	mov	r0, r3
 8000736:	f004 fa13 	bl	8004b60 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x168>
    {
        Error_Handler();
 8000740:	f000 f9e0 	bl	8000b04 <Error_Handler>
    }

    /** Configure the SAI PLL for audio clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000744:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000748:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 800074c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000750:	f04f 0300 	mov.w	r3, #0
 8000754:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 8000758:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800075c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000760:	2219      	movs	r2, #25
 8000762:	609a      	str	r2, [r3, #8]
    PeriphClkInitStruct.PLL2.PLL2N = 344;
 8000764:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000768:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800076c:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8000770:	60da      	str	r2, [r3, #12]
    PeriphClkInitStruct.PLL2.PLL2P = 7; // PLL2P = 344/7 = 49.142MHz for 16kHz * 256 = ~12.58MHz
 8000772:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000776:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800077a:	2207      	movs	r2, #7
 800077c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800077e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000782:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000786:	2202      	movs	r2, #2
 8000788:	615a      	str	r2, [r3, #20]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800078a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800078e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000796:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800079a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80007a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80007b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80007ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80007be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80007c2:	2201      	movs	r2, #1
 80007c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 fd3e 	bl	800524c <HAL_RCCEx_PeriphCLKConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x1fe>
    {
        Error_Handler();
 80007d6:	f000 f995 	bl	8000b04 <Error_Handler>
    }
}
 80007da:	bf00      	nop
 80007dc:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	58000400 	.word	0x58000400
 80007e8:	58024800 	.word	0x58024800
 80007ec:	58024400 	.word	0x58024400

080007f0 <MX_GPIO_Init>:

// GPIO initialization
static void MX_GPIO_Init(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f6:	4b21      	ldr	r3, [pc, #132]	@ (800087c <MX_GPIO_Init+0x8c>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007fc:	4a1f      	ldr	r2, [pc, #124]	@ (800087c <MX_GPIO_Init+0x8c>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000806:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <MX_GPIO_Init+0x8c>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080c:	f003 0310 	and.w	r3, r3, #16
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_GPIO_Init+0x8c>)
 8000816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081a:	4a18      	ldr	r2, [pc, #96]	@ (800087c <MX_GPIO_Init+0x8c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_GPIO_Init+0x8c>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_GPIO_Init+0x8c>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000838:	4a10      	ldr	r2, [pc, #64]	@ (800087c <MX_GPIO_Init+0x8c>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_GPIO_Init+0x8c>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <MX_GPIO_Init+0x8c>)
 8000852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000856:	4a09      	ldr	r2, [pc, #36]	@ (800087c <MX_GPIO_Init+0x8c>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_GPIO_Init+0x8c>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

    // Add any specific GPIO pin configurations here if needed
    // for example, LEDs or debug pins
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	58024400 	.word	0x58024400

08000880 <MX_SAI1_Init>:

// SAI1 initialization with proper audio configuration
static void MX_SAI1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
    /* SAI peripheral configuration - simplified */
    hsai_BlockA1.Instance = SAI1_Block_A;
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <MX_SAI1_Init+0x94>)
 8000886:	4a24      	ldr	r2, [pc, #144]	@ (8000918 <MX_SAI1_Init+0x98>)
 8000888:	601a      	str	r2, [r3, #0]
    hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800088a:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <MX_SAI1_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	645a      	str	r2, [r3, #68]	@ 0x44
    hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000890:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <MX_SAI1_Init+0x94>)
 8000892:	2201      	movs	r2, #1
 8000894:	605a      	str	r2, [r3, #4]
    hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000896:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_SAI1_Init+0x94>)
 8000898:	2280      	movs	r2, #128	@ 0x80
 800089a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800089c:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_SAI1_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
    hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
    hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
    hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008c2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80008c6:	621a      	str	r2, [r3, #32]
    hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE; // Try mono mode first
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80008d0:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30

    // Simplified frame and slot init
    hsai_BlockA1.FrameInit.FrameLength = 32;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008d8:	2220      	movs	r2, #32
 80008da:	655a      	str	r2, [r3, #84]	@ 0x54
    hsai_BlockA1.FrameInit.ActiveFrameLength = 16;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008de:	2210      	movs	r2, #16
 80008e0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	665a      	str	r2, [r3, #100]	@ 0x64

    hsai_BlockA1.SlotInit.SlotNumber = 1;                // Try with single slot first
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	671a      	str	r2, [r3, #112]	@ 0x70
    hsai_BlockA1.SlotInit.SlotActive = SAI_SLOTACTIVE_0; // Only activate first slot
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_SAI1_Init+0x94>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	675a      	str	r2, [r3, #116]	@ 0x74

    if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_SAI1_Init+0x94>)
 8000902:	f007 f9e1 	bl	8007cc8 <HAL_SAI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_SAI1_Init+0x90>
    {
        Error_Handler();
 800090c:	f000 f8fa 	bl	8000b04 <Error_Handler>
    }
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000510 	.word	0x24000510
 8000918:	40015804 	.word	0x40015804

0800091c <MX_DMA_Init>:
// DMA initialization for SAI
static void MX_DMA_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000922:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <MX_DMA_Init+0xb4>)
 8000924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000928:	4a29      	ldr	r2, [pc, #164]	@ (80009d0 <MX_DMA_Init+0xb4>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000932:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <MX_DMA_Init+0xb4>)
 8000934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]

    /* Configure DMA request for SAI1 RX */
    hdma_sai1_a_rx.Instance = DMA1_Stream1;
 8000940:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_DMA_Init+0xb8>)
 8000942:	4a25      	ldr	r2, [pc, #148]	@ (80009d8 <MX_DMA_Init+0xbc>)
 8000944:	601a      	str	r2, [r3, #0]
    hdma_sai1_a_rx.Init.Request = DMA_REQUEST_SAI1_A;
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <MX_DMA_Init+0xb8>)
 8000948:	2257      	movs	r2, #87	@ 0x57
 800094a:	605a      	str	r2, [r3, #4]
    hdma_sai1_a_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_DMA_Init+0xb8>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    hdma_sai1_a_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <MX_DMA_Init+0xb8>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    hdma_sai1_a_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <MX_DMA_Init+0xb8>)
 800095a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800095e:	611a      	str	r2, [r3, #16]
    hdma_sai1_a_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_DMA_Init+0xb8>)
 8000962:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000966:	615a      	str	r2, [r3, #20]
    hdma_sai1_a_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000968:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_DMA_Init+0xb8>)
 800096a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800096e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a_rx.Init.Mode = DMA_CIRCULAR;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_DMA_Init+0xb8>)
 8000972:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000976:	61da      	str	r2, [r3, #28]
    hdma_sai1_a_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_DMA_Init+0xb8>)
 800097a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800097e:	621a      	str	r2, [r3, #32]

    // Consider enabling FIFO mode for more stable transfers with bursts
    hdma_sai1_a_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_DMA_Init+0xb8>)
 8000982:	2204      	movs	r2, #4
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai1_a_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_DMA_Init+0xb8>)
 8000988:	2203      	movs	r2, #3
 800098a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai1_a_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_DMA_Init+0xb8>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai1_a_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <MX_DMA_Init+0xb8>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_DMA_Init(&hdma_sai1_a_rx) != HAL_OK)
 8000998:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <MX_DMA_Init+0xb8>)
 800099a:	f000 fc0b 	bl	80011b4 <HAL_DMA_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_DMA_Init+0x8c>
    {
        Error_Handler();
 80009a4:	f000 f8ae 	bl	8000b04 <Error_Handler>
    }

    /* Associate the DMA handle with the SAI handle */
    __HAL_LINKDMA(&hsai_BlockA1, hdmarx, hdma_sai1_a_rx);
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_DMA_Init+0xc0>)
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <MX_DMA_Init+0xb8>)
 80009ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_DMA_Init+0xb8>)
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <MX_DMA_Init+0xc0>)
 80009b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Configure NVIC for DMA interrupt */
    HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2105      	movs	r1, #5
 80009ba:	200c      	movs	r0, #12
 80009bc:	f000 fbc5 	bl	800114a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009c0:	200c      	movs	r0, #12
 80009c2:	f000 fbdc 	bl	800117e <HAL_NVIC_EnableIRQ>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	58024400 	.word	0x58024400
 80009d4:	24000400 	.word	0x24000400
 80009d8:	40020028 	.word	0x40020028
 80009dc:	24000510 	.word	0x24000510

080009e0 <HAL_SAI_RxHalfCpltCallback>:
 * @brief  Half completed reception callback
 * @param  hsai: pointer to a SAI_HandleTypeDef structure
 * @retval None
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    buffer_half_ready = 1;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_SAI_RxHalfCpltCallback+0x24>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
    half_transfer_count++; // Debug counter
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	240003f4 	.word	0x240003f4
 8000a08:	240003f8 	.word	0x240003f8

08000a0c <HAL_SAI_RxCpltCallback>:
 * @brief  Completed reception callback
 * @param  hsai: pointer to a SAI_HandleTypeDef structure
 * @retval None
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    buffer_full_ready = 1;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_SAI_RxCpltCallback+0x24>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
    full_transfer_count++; // Debug counter
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_SAI_RxCpltCallback+0x28>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <HAL_SAI_RxCpltCallback+0x28>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	240003f5 	.word	0x240003f5
 8000a34:	240003fc 	.word	0x240003fc

08000a38 <ProcessAudioData>:
 * @param  buffer: pointer to buffer containing audio data
 * @param  length: length of the buffer to process
 * @retval None
 */
void ProcessAudioData(uint16_t *buffer, uint16_t length)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
    // Debug: Check if buffer contains non-zero values
    uint8_t has_data = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	75fb      	strb	r3, [r7, #23]
    uint16_t max_value = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	82bb      	strh	r3, [r7, #20]
    uint16_t avg_value = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	81bb      	strh	r3, [r7, #12]
    uint32_t sum = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]

    printf("ayay data\r\n");
 8000a54:	4824      	ldr	r0, [pc, #144]	@ (8000ae8 <ProcessAudioData+0xb0>)
 8000a56:	f008 fda9 	bl	80095ac <puts>

    for (uint16_t i = 0; i < length; i++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	81fb      	strh	r3, [r7, #14]
 8000a5e:	e025      	b.n	8000aac <ProcessAudioData+0x74>
    {
        if (buffer[i] != 0)
 8000a60:	89fb      	ldrh	r3, [r7, #14]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d004      	beq.n	8000a78 <ProcessAudioData+0x40>
        {
            has_data = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	75fb      	strb	r3, [r7, #23]
            printf("ayay data\r\n");
 8000a72:	481d      	ldr	r0, [pc, #116]	@ (8000ae8 <ProcessAudioData+0xb0>)
 8000a74:	f008 fd9a 	bl	80095ac <puts>
        }

        if (buffer[i] > max_value)
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	8aba      	ldrh	r2, [r7, #20]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d205      	bcs.n	8000a94 <ProcessAudioData+0x5c>
        {
            max_value = buffer[i];
 8000a88:	89fb      	ldrh	r3, [r7, #14]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	82bb      	strh	r3, [r7, #20]
        }

        sum += buffer[i];
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < length; i++)
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	81fb      	strh	r3, [r7, #14]
 8000aac:	89fa      	ldrh	r2, [r7, #14]
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d3d5      	bcc.n	8000a60 <ProcessAudioData+0x28>
    }

    if (length > 0)
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d004      	beq.n	8000ac4 <ProcessAudioData+0x8c>
    {
        avg_value = sum / length;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	81bb      	strh	r3, [r7, #12]
    // TODO: Add your debug output mechanism here
    // For example, toggle LEDs based on audio detection
    // or output to debug UART

    // Example LED debug - assuming you have LEDs connected:
    if (has_data)
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d005      	beq.n	8000ad6 <ProcessAudioData+0x9e>
    {

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
 8000aca:	2201      	movs	r2, #1
 8000acc:	2101      	movs	r1, #1
 8000ace:	4807      	ldr	r0, [pc, #28]	@ (8000aec <ProcessAudioData+0xb4>)
 8000ad0:	f003 fb68 	bl	80041a4 <HAL_GPIO_WritePin>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn off LED
    }

    // Add your processing code here
}
 8000ad4:	e004      	b.n	8000ae0 <ProcessAudioData+0xa8>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn off LED
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4804      	ldr	r0, [pc, #16]	@ (8000aec <ProcessAudioData+0xb4>)
 8000adc:	f003 fb62 	bl	80041a4 <HAL_GPIO_WritePin>
}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	0800b3c0 	.word	0x0800b3c0
 8000aec:	58020400 	.word	0x58020400

08000af0 <DMA1_Stream1_IRQHandler>:
/**
 * @brief  DMA1 Stream1 IRQ handler (for SAI RX)
 * @retval None
 */
void DMA1_Stream1_IRQHandler(void) { HAL_DMA_IRQHandler(&hdma_sai1_a_rx); }
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <DMA1_Stream1_IRQHandler+0x10>)
 8000af6:	f001 fe87 	bl	8002808 <HAL_DMA_IRQHandler>
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	24000400 	.word	0x24000400

08000b04 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
    /* User can add his own implementation to report the HAL error */
    __disable_irq();
    while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_SAI_MspInit>:
 * @brief  SAI MSP Initialization
 * @param  hsai: pointer to a SAI_HandleTypeDef structure
 * @retval None
 */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]

    if (hsai->Instance == SAI1_Block_A)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bac <HAL_SAI_MspInit+0x9c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d137      	bne.n	8000ba2 <HAL_SAI_MspInit+0x92>
    {
        /* SAI1 clock enable */
        __HAL_RCC_SAI1_CLK_ENABLE();
 8000b32:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <HAL_SAI_MspInit+0xa0>)
 8000b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b38:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb0 <HAL_SAI_MspInit+0xa0>)
 8000b3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b42:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <HAL_SAI_MspInit+0xa0>)
 8000b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]

        /* Enable GPIO clocks */
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <HAL_SAI_MspInit+0xa0>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b56:	4a16      	ldr	r2, [pc, #88]	@ (8000bb0 <HAL_SAI_MspInit+0xa0>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <HAL_SAI_MspInit+0xa0>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

        /* Configure GPIO pins for SAI1 */
        /* SAI1_SD_A pin (data input) - Configure with pull-up for better noise immunity */
        GPIO_InitStruct.Pin = GPIO_PIN_2; // Adjust based on your board schematic
 8000b6e:	2304      	movs	r3, #4
 8000b70:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000b7e:	2306      	movs	r3, #6
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	480a      	ldr	r0, [pc, #40]	@ (8000bb4 <HAL_SAI_MspInit+0xa4>)
 8000b8a:	f003 f95b 	bl	8003e44 <HAL_GPIO_Init>

        /* SAI1_SCK_A, SAI1_FS_A, SAI1_MCLK_A pins */
        GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5; // Adjust based on your board
 8000b8e:	2338      	movs	r3, #56	@ 0x38
 8000b90:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_SAI_MspInit+0xa4>)
 8000b9e:	f003 f951 	bl	8003e44 <HAL_GPIO_Init>
    }
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	@ 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40015804 	.word	0x40015804
 8000bb0:	58024400 	.word	0x58024400
 8000bb4:	58021000 	.word	0x58021000

08000bb8 <_write>:
        HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5);
    }
}

int _write(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e009      	b.n	8000be2 <_write+0x2a>
    {
        ITM_SendChar(*ptr++);
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	60ba      	str	r2, [r7, #8]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fc70 	bl	80004bc <ITM_SendChar>
    for (i = 0; i < len; i++)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	dbf1      	blt.n	8000bce <_write+0x16>
    }
    return len;
 8000bea:	687b      	ldr	r3, [r7, #4]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <HAL_MspInit+0x30>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c00:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_MspInit+0x30>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_MspInit+0x30>)
 8000c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	58024400 	.word	0x58024400

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <NMI_Handler+0x4>

08000c30 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <MemManage_Handler+0x4>

08000c40 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c50 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8000c7e:	f000 f95d 	bl	8000f3c <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <BDMA_Channel0_IRQHandler>:

/**
 * @brief This function handles BDMA channel0 global interrupt.
 */
void BDMA_Channel0_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

    /* USER CODE END BDMA_Channel0_IRQn 0 */
    // HAL_DMA_IRQHandler(&hdma_sai4_a);
    HAL_DMA_IRQHandler(&hsai_BlockA4);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <BDMA_Channel0_IRQHandler+0x10>)
 8000c8e:	f001 fdbb 	bl	8002808 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

    /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	24000478 	.word	0x24000478

08000c9c <SAI4_IRQHandler>:

/**
 * @brief This function handles SAI4 global interrupt.
 */
void SAI4_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SAI4_IRQn 0 */
    HAL_SAI_IRQHandler(&hsai_BlockA4);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <SAI4_IRQHandler+0x10>)
 8000ca2:	f007 fc5d 	bl	8008560 <HAL_SAI_IRQHandler>
    /* USER CODE END SAI4_IRQn 0 */

    /* USER CODE BEGIN SAI4_IRQn 1 */

    /* USER CODE END SAI4_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	24000478 	.word	0x24000478

08000cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return 1;
 8000cb4:	2301      	movs	r3, #1
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_kill>:

int _kill(int pid, int sig)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cca:	f008 fc7f 	bl	80095cc <__errno>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2216      	movs	r2, #22
 8000cd2:	601a      	str	r2, [r3, #0]
  return -1;
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_exit>:

void _exit (int status)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ffe7 	bl	8000cc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cf2:	bf00      	nop
 8000cf4:	e7fd      	b.n	8000cf2 <_exit+0x12>

08000cf6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	e00a      	b.n	8000d1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d08:	f3af 8000 	nop.w
 8000d0c:	4601      	mov	r1, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	60ba      	str	r2, [r7, #8]
 8000d14:	b2ca      	uxtb	r2, r1
 8000d16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbf0      	blt.n	8000d08 <_read+0x12>
  }

  return len;
 8000d26:	687b      	ldr	r3, [r7, #4]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d58:	605a      	str	r2, [r3, #4]
  return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_isatty>:

int _isatty(int file)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d70:	2301      	movs	r3, #1
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b085      	sub	sp, #20
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	@ (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f008 fc00 	bl	80095cc <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	24080000 	.word	0x24080000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	240005ac 	.word	0x240005ac
 8000e00:	24000700 	.word	0x24000700

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e08:	f7ff fac2 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	@ (8000e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f008 fbd1 	bl	80095d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fb69 	bl	800050c <main>
  bx  lr
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e40:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e44:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000e48:	0800b76c 	.word	0x0800b76c
  ldr r2, =_sbss
 8000e4c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000e50:	24000700 	.word	0x24000700

08000e54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC3_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5e:	2003      	movs	r0, #3
 8000e60:	f000 f968 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e64:	f004 f832 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_Init+0x68>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	4913      	ldr	r1, [pc, #76]	@ (8000ec4 <HAL_Init+0x6c>)
 8000e76:	5ccb      	ldrb	r3, [r1, r3]
 8000e78:	f003 031f 	and.w	r3, r3, #31
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <HAL_Init+0x68>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <HAL_Init+0x6c>)
 8000e8c:	5cd3      	ldrb	r3, [r2, r3]
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	fa22 f303 	lsr.w	r3, r2, r3
 8000e98:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec8 <HAL_Init+0x70>)
 8000e9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ecc <HAL_Init+0x74>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f814 	bl	8000ed0 <HAL_InitTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e002      	b.n	8000eb8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb2:	f7ff fe9f 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	0800b3cc 	.word	0x0800b3cc
 8000ec8:	24000004 	.word	0x24000004
 8000ecc:	24000000 	.word	0x24000000

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_InitTick+0x60>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e021      	b.n	8000f28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <HAL_InitTick+0x64>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_InitTick+0x60>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f94d 	bl	800119a <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f18:	f000 f917 	bl	800114a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <HAL_InitTick+0x68>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2400000c 	.word	0x2400000c
 8000f34:	24000000 	.word	0x24000000
 8000f38:	24000008 	.word	0x24000008

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2400000c 	.word	0x2400000c
 8000f60:	240005b0 	.word	0x240005b0

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	240005b0 	.word	0x240005b0

08000f7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <HAL_GetREVID+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	0c1b      	lsrs	r3, r3, #16
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	5c001000 	.word	0x5c001000

08000f94 <__NVIC_SetPriorityGrouping>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00
 8000fd8:	05fa0000 	.word	0x05fa0000

08000fdc <__NVIC_GetPriorityGrouping>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	@ (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	@ (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	@ (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	@ 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff29 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff40 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff90 	bl	8001088 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5f 	bl	8001034 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff33 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa4 	bl	80010f0 <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff fed2 	bl	8000f64 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e316      	b.n	80017fa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a66      	ldr	r2, [pc, #408]	@ (800136c <HAL_DMA_Init+0x1b8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d04a      	beq.n	800126c <HAL_DMA_Init+0xb8>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a65      	ldr	r2, [pc, #404]	@ (8001370 <HAL_DMA_Init+0x1bc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d045      	beq.n	800126c <HAL_DMA_Init+0xb8>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a63      	ldr	r2, [pc, #396]	@ (8001374 <HAL_DMA_Init+0x1c0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d040      	beq.n	800126c <HAL_DMA_Init+0xb8>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a62      	ldr	r2, [pc, #392]	@ (8001378 <HAL_DMA_Init+0x1c4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d03b      	beq.n	800126c <HAL_DMA_Init+0xb8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a60      	ldr	r2, [pc, #384]	@ (800137c <HAL_DMA_Init+0x1c8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d036      	beq.n	800126c <HAL_DMA_Init+0xb8>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a5f      	ldr	r2, [pc, #380]	@ (8001380 <HAL_DMA_Init+0x1cc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d031      	beq.n	800126c <HAL_DMA_Init+0xb8>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a5d      	ldr	r2, [pc, #372]	@ (8001384 <HAL_DMA_Init+0x1d0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02c      	beq.n	800126c <HAL_DMA_Init+0xb8>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a5c      	ldr	r2, [pc, #368]	@ (8001388 <HAL_DMA_Init+0x1d4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d027      	beq.n	800126c <HAL_DMA_Init+0xb8>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a5a      	ldr	r2, [pc, #360]	@ (800138c <HAL_DMA_Init+0x1d8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d022      	beq.n	800126c <HAL_DMA_Init+0xb8>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a59      	ldr	r2, [pc, #356]	@ (8001390 <HAL_DMA_Init+0x1dc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d01d      	beq.n	800126c <HAL_DMA_Init+0xb8>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a57      	ldr	r2, [pc, #348]	@ (8001394 <HAL_DMA_Init+0x1e0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d018      	beq.n	800126c <HAL_DMA_Init+0xb8>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a56      	ldr	r2, [pc, #344]	@ (8001398 <HAL_DMA_Init+0x1e4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d013      	beq.n	800126c <HAL_DMA_Init+0xb8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a54      	ldr	r2, [pc, #336]	@ (800139c <HAL_DMA_Init+0x1e8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00e      	beq.n	800126c <HAL_DMA_Init+0xb8>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a53      	ldr	r2, [pc, #332]	@ (80013a0 <HAL_DMA_Init+0x1ec>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d009      	beq.n	800126c <HAL_DMA_Init+0xb8>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a51      	ldr	r2, [pc, #324]	@ (80013a4 <HAL_DMA_Init+0x1f0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d004      	beq.n	800126c <HAL_DMA_Init+0xb8>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a50      	ldr	r2, [pc, #320]	@ (80013a8 <HAL_DMA_Init+0x1f4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d101      	bne.n	8001270 <HAL_DMA_Init+0xbc>
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <HAL_DMA_Init+0xbe>
 8001270:	2300      	movs	r3, #0
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 813b 	beq.w	80014ee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2202      	movs	r2, #2
 800127c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a37      	ldr	r2, [pc, #220]	@ (800136c <HAL_DMA_Init+0x1b8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d04a      	beq.n	8001328 <HAL_DMA_Init+0x174>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a36      	ldr	r2, [pc, #216]	@ (8001370 <HAL_DMA_Init+0x1bc>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d045      	beq.n	8001328 <HAL_DMA_Init+0x174>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a34      	ldr	r2, [pc, #208]	@ (8001374 <HAL_DMA_Init+0x1c0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d040      	beq.n	8001328 <HAL_DMA_Init+0x174>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a33      	ldr	r2, [pc, #204]	@ (8001378 <HAL_DMA_Init+0x1c4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d03b      	beq.n	8001328 <HAL_DMA_Init+0x174>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a31      	ldr	r2, [pc, #196]	@ (800137c <HAL_DMA_Init+0x1c8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d036      	beq.n	8001328 <HAL_DMA_Init+0x174>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a30      	ldr	r2, [pc, #192]	@ (8001380 <HAL_DMA_Init+0x1cc>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d031      	beq.n	8001328 <HAL_DMA_Init+0x174>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001384 <HAL_DMA_Init+0x1d0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d02c      	beq.n	8001328 <HAL_DMA_Init+0x174>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001388 <HAL_DMA_Init+0x1d4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d027      	beq.n	8001328 <HAL_DMA_Init+0x174>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a2b      	ldr	r2, [pc, #172]	@ (800138c <HAL_DMA_Init+0x1d8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d022      	beq.n	8001328 <HAL_DMA_Init+0x174>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001390 <HAL_DMA_Init+0x1dc>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d01d      	beq.n	8001328 <HAL_DMA_Init+0x174>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <HAL_DMA_Init+0x1e0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d018      	beq.n	8001328 <HAL_DMA_Init+0x174>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a27      	ldr	r2, [pc, #156]	@ (8001398 <HAL_DMA_Init+0x1e4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d013      	beq.n	8001328 <HAL_DMA_Init+0x174>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a25      	ldr	r2, [pc, #148]	@ (800139c <HAL_DMA_Init+0x1e8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00e      	beq.n	8001328 <HAL_DMA_Init+0x174>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a24      	ldr	r2, [pc, #144]	@ (80013a0 <HAL_DMA_Init+0x1ec>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d009      	beq.n	8001328 <HAL_DMA_Init+0x174>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <HAL_DMA_Init+0x1f0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d004      	beq.n	8001328 <HAL_DMA_Init+0x174>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a21      	ldr	r2, [pc, #132]	@ (80013a8 <HAL_DMA_Init+0x1f4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d108      	bne.n	800133a <HAL_DMA_Init+0x186>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e007      	b.n	800134a <HAL_DMA_Init+0x196>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0201 	bic.w	r2, r2, #1
 8001348:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800134a:	e02f      	b.n	80013ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800134c:	f7ff fe0a 	bl	8000f64 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b05      	cmp	r3, #5
 8001358:	d928      	bls.n	80013ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2220      	movs	r2, #32
 800135e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2203      	movs	r2, #3
 8001364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e246      	b.n	80017fa <HAL_DMA_Init+0x646>
 800136c:	40020010 	.word	0x40020010
 8001370:	40020028 	.word	0x40020028
 8001374:	40020040 	.word	0x40020040
 8001378:	40020058 	.word	0x40020058
 800137c:	40020070 	.word	0x40020070
 8001380:	40020088 	.word	0x40020088
 8001384:	400200a0 	.word	0x400200a0
 8001388:	400200b8 	.word	0x400200b8
 800138c:	40020410 	.word	0x40020410
 8001390:	40020428 	.word	0x40020428
 8001394:	40020440 	.word	0x40020440
 8001398:	40020458 	.word	0x40020458
 800139c:	40020470 	.word	0x40020470
 80013a0:	40020488 	.word	0x40020488
 80013a4:	400204a0 	.word	0x400204a0
 80013a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1c8      	bne.n	800134c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4b83      	ldr	r3, [pc, #524]	@ (80015d4 <HAL_DMA_Init+0x420>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80013d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d107      	bne.n	8001410 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001408:	4313      	orrs	r3, r2
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4313      	orrs	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001410:	4b71      	ldr	r3, [pc, #452]	@ (80015d8 <HAL_DMA_Init+0x424>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b71      	ldr	r3, [pc, #452]	@ (80015dc <HAL_DMA_Init+0x428>)
 8001416:	4013      	ands	r3, r2
 8001418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800141c:	d328      	bcc.n	8001470 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b28      	cmp	r3, #40	@ 0x28
 8001424:	d903      	bls.n	800142e <HAL_DMA_Init+0x27a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b2e      	cmp	r3, #46	@ 0x2e
 800142c:	d917      	bls.n	800145e <HAL_DMA_Init+0x2aa>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b3e      	cmp	r3, #62	@ 0x3e
 8001434:	d903      	bls.n	800143e <HAL_DMA_Init+0x28a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b42      	cmp	r3, #66	@ 0x42
 800143c:	d90f      	bls.n	800145e <HAL_DMA_Init+0x2aa>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b46      	cmp	r3, #70	@ 0x46
 8001444:	d903      	bls.n	800144e <HAL_DMA_Init+0x29a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b48      	cmp	r3, #72	@ 0x48
 800144c:	d907      	bls.n	800145e <HAL_DMA_Init+0x2aa>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b4e      	cmp	r3, #78	@ 0x4e
 8001454:	d905      	bls.n	8001462 <HAL_DMA_Init+0x2ae>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b52      	cmp	r3, #82	@ 0x52
 800145c:	d801      	bhi.n	8001462 <HAL_DMA_Init+0x2ae>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_DMA_Init+0x2b0>
 8001462:	2300      	movs	r3, #0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800146e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f023 0307 	bic.w	r3, r3, #7
 8001486:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	4313      	orrs	r3, r2
 8001490:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001496:	2b04      	cmp	r3, #4
 8001498:	d117      	bne.n	80014ca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00e      	beq.n	80014ca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f002 fb3f 	bl	8003b30 <DMA_CheckFifoParam>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2240      	movs	r2, #64	@ 0x40
 80014bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e197      	b.n	80017fa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f002 fa7a 	bl	80039cc <DMA_CalcBaseAndBitshift>
 80014d8:	4603      	mov	r3, r0
 80014da:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	223f      	movs	r2, #63	@ 0x3f
 80014e6:	409a      	lsls	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	e0cd      	b.n	800168a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3b      	ldr	r2, [pc, #236]	@ (80015e0 <HAL_DMA_Init+0x42c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d022      	beq.n	800153e <HAL_DMA_Init+0x38a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a39      	ldr	r2, [pc, #228]	@ (80015e4 <HAL_DMA_Init+0x430>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01d      	beq.n	800153e <HAL_DMA_Init+0x38a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a38      	ldr	r2, [pc, #224]	@ (80015e8 <HAL_DMA_Init+0x434>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d018      	beq.n	800153e <HAL_DMA_Init+0x38a>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a36      	ldr	r2, [pc, #216]	@ (80015ec <HAL_DMA_Init+0x438>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_DMA_Init+0x38a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a35      	ldr	r2, [pc, #212]	@ (80015f0 <HAL_DMA_Init+0x43c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d00e      	beq.n	800153e <HAL_DMA_Init+0x38a>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a33      	ldr	r2, [pc, #204]	@ (80015f4 <HAL_DMA_Init+0x440>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d009      	beq.n	800153e <HAL_DMA_Init+0x38a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a32      	ldr	r2, [pc, #200]	@ (80015f8 <HAL_DMA_Init+0x444>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d004      	beq.n	800153e <HAL_DMA_Init+0x38a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a30      	ldr	r2, [pc, #192]	@ (80015fc <HAL_DMA_Init+0x448>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_DMA_Init+0x38e>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_DMA_Init+0x390>
 8001542:	2300      	movs	r3, #0
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 8097 	beq.w	8001678 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a24      	ldr	r2, [pc, #144]	@ (80015e0 <HAL_DMA_Init+0x42c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d021      	beq.n	8001598 <HAL_DMA_Init+0x3e4>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a22      	ldr	r2, [pc, #136]	@ (80015e4 <HAL_DMA_Init+0x430>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d01c      	beq.n	8001598 <HAL_DMA_Init+0x3e4>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a21      	ldr	r2, [pc, #132]	@ (80015e8 <HAL_DMA_Init+0x434>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d017      	beq.n	8001598 <HAL_DMA_Init+0x3e4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1f      	ldr	r2, [pc, #124]	@ (80015ec <HAL_DMA_Init+0x438>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d012      	beq.n	8001598 <HAL_DMA_Init+0x3e4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <HAL_DMA_Init+0x43c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00d      	beq.n	8001598 <HAL_DMA_Init+0x3e4>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <HAL_DMA_Init+0x440>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d008      	beq.n	8001598 <HAL_DMA_Init+0x3e4>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <HAL_DMA_Init+0x444>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d003      	beq.n	8001598 <HAL_DMA_Init+0x3e4>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_DMA_Init+0x448>)
 8001596:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <HAL_DMA_Init+0x44c>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b40      	cmp	r3, #64	@ 0x40
 80015be:	d021      	beq.n	8001604 <HAL_DMA_Init+0x450>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b80      	cmp	r3, #128	@ 0x80
 80015c6:	d102      	bne.n	80015ce <HAL_DMA_Init+0x41a>
 80015c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015cc:	e01b      	b.n	8001606 <HAL_DMA_Init+0x452>
 80015ce:	2300      	movs	r3, #0
 80015d0:	e019      	b.n	8001606 <HAL_DMA_Init+0x452>
 80015d2:	bf00      	nop
 80015d4:	fe10803f 	.word	0xfe10803f
 80015d8:	5c001000 	.word	0x5c001000
 80015dc:	ffff0000 	.word	0xffff0000
 80015e0:	58025408 	.word	0x58025408
 80015e4:	5802541c 	.word	0x5802541c
 80015e8:	58025430 	.word	0x58025430
 80015ec:	58025444 	.word	0x58025444
 80015f0:	58025458 	.word	0x58025458
 80015f4:	5802546c 	.word	0x5802546c
 80015f8:	58025480 	.word	0x58025480
 80015fc:	58025494 	.word	0x58025494
 8001600:	fffe000f 	.word	0xfffe000f
 8001604:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68d2      	ldr	r2, [r2, #12]
 800160a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800160c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800161c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800162c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001634:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	4313      	orrs	r3, r2
 800163a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b6e      	ldr	r3, [pc, #440]	@ (8001804 <HAL_DMA_Init+0x650>)
 800164c:	4413      	add	r3, r2
 800164e:	4a6e      	ldr	r2, [pc, #440]	@ (8001808 <HAL_DMA_Init+0x654>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	009a      	lsls	r2, r3, #2
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f002 f9b5 	bl	80039cc <DMA_CalcBaseAndBitshift>
 8001662:	4603      	mov	r3, r0
 8001664:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	2201      	movs	r2, #1
 8001670:	409a      	lsls	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	e008      	b.n	800168a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2240      	movs	r2, #64	@ 0x40
 800167c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0b7      	b.n	80017fa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a5f      	ldr	r2, [pc, #380]	@ (800180c <HAL_DMA_Init+0x658>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d072      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a5d      	ldr	r2, [pc, #372]	@ (8001810 <HAL_DMA_Init+0x65c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d06d      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001814 <HAL_DMA_Init+0x660>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d068      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a5a      	ldr	r2, [pc, #360]	@ (8001818 <HAL_DMA_Init+0x664>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d063      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a59      	ldr	r2, [pc, #356]	@ (800181c <HAL_DMA_Init+0x668>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d05e      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a57      	ldr	r2, [pc, #348]	@ (8001820 <HAL_DMA_Init+0x66c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d059      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a56      	ldr	r2, [pc, #344]	@ (8001824 <HAL_DMA_Init+0x670>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d054      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a54      	ldr	r2, [pc, #336]	@ (8001828 <HAL_DMA_Init+0x674>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d04f      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a53      	ldr	r2, [pc, #332]	@ (800182c <HAL_DMA_Init+0x678>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d04a      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a51      	ldr	r2, [pc, #324]	@ (8001830 <HAL_DMA_Init+0x67c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d045      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a50      	ldr	r2, [pc, #320]	@ (8001834 <HAL_DMA_Init+0x680>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d040      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001838 <HAL_DMA_Init+0x684>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d03b      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a4d      	ldr	r2, [pc, #308]	@ (800183c <HAL_DMA_Init+0x688>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d036      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a4b      	ldr	r2, [pc, #300]	@ (8001840 <HAL_DMA_Init+0x68c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d031      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a4a      	ldr	r2, [pc, #296]	@ (8001844 <HAL_DMA_Init+0x690>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d02c      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a48      	ldr	r2, [pc, #288]	@ (8001848 <HAL_DMA_Init+0x694>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d027      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a47      	ldr	r2, [pc, #284]	@ (800184c <HAL_DMA_Init+0x698>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d022      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a45      	ldr	r2, [pc, #276]	@ (8001850 <HAL_DMA_Init+0x69c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d01d      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a44      	ldr	r2, [pc, #272]	@ (8001854 <HAL_DMA_Init+0x6a0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d018      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a42      	ldr	r2, [pc, #264]	@ (8001858 <HAL_DMA_Init+0x6a4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a41      	ldr	r2, [pc, #260]	@ (800185c <HAL_DMA_Init+0x6a8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d00e      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a3f      	ldr	r2, [pc, #252]	@ (8001860 <HAL_DMA_Init+0x6ac>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d009      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a3e      	ldr	r2, [pc, #248]	@ (8001864 <HAL_DMA_Init+0x6b0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d004      	beq.n	800177a <HAL_DMA_Init+0x5c6>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a3c      	ldr	r2, [pc, #240]	@ (8001868 <HAL_DMA_Init+0x6b4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_DMA_Init+0x5ca>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_DMA_Init+0x5cc>
 800177e:	2300      	movs	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d032      	beq.n	80017ea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f002 fa4f 	bl	8003c28 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b80      	cmp	r3, #128	@ 0x80
 8001790:	d102      	bne.n	8001798 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80017ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d010      	beq.n	80017d8 <HAL_DMA_Init+0x624>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d80c      	bhi.n	80017d8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f002 facc 	bl	8003d5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	e008      	b.n	80017ea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	a7fdabf8 	.word	0xa7fdabf8
 8001808:	cccccccd 	.word	0xcccccccd
 800180c:	40020010 	.word	0x40020010
 8001810:	40020028 	.word	0x40020028
 8001814:	40020040 	.word	0x40020040
 8001818:	40020058 	.word	0x40020058
 800181c:	40020070 	.word	0x40020070
 8001820:	40020088 	.word	0x40020088
 8001824:	400200a0 	.word	0x400200a0
 8001828:	400200b8 	.word	0x400200b8
 800182c:	40020410 	.word	0x40020410
 8001830:	40020428 	.word	0x40020428
 8001834:	40020440 	.word	0x40020440
 8001838:	40020458 	.word	0x40020458
 800183c:	40020470 	.word	0x40020470
 8001840:	40020488 	.word	0x40020488
 8001844:	400204a0 	.word	0x400204a0
 8001848:	400204b8 	.word	0x400204b8
 800184c:	58025408 	.word	0x58025408
 8001850:	5802541c 	.word	0x5802541c
 8001854:	58025430 	.word	0x58025430
 8001858:	58025444 	.word	0x58025444
 800185c:	58025458 	.word	0x58025458
 8001860:	5802546c 	.word	0x5802546c
 8001864:	58025480 	.word	0x58025480
 8001868:	58025494 	.word	0x58025494

0800186c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e226      	b.n	8001cd6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_DMA_Start_IT+0x2a>
 8001892:	2302      	movs	r3, #2
 8001894:	e21f      	b.n	8001cd6 <HAL_DMA_Start_IT+0x46a>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	f040 820a 	bne.w	8001cc0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a68      	ldr	r2, [pc, #416]	@ (8001a60 <HAL_DMA_Start_IT+0x1f4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d04a      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a66      	ldr	r2, [pc, #408]	@ (8001a64 <HAL_DMA_Start_IT+0x1f8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d045      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a65      	ldr	r2, [pc, #404]	@ (8001a68 <HAL_DMA_Start_IT+0x1fc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d040      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a63      	ldr	r2, [pc, #396]	@ (8001a6c <HAL_DMA_Start_IT+0x200>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d03b      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a62      	ldr	r2, [pc, #392]	@ (8001a70 <HAL_DMA_Start_IT+0x204>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d036      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a60      	ldr	r2, [pc, #384]	@ (8001a74 <HAL_DMA_Start_IT+0x208>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d031      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001a78 <HAL_DMA_Start_IT+0x20c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d02c      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a5d      	ldr	r2, [pc, #372]	@ (8001a7c <HAL_DMA_Start_IT+0x210>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d027      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5c      	ldr	r2, [pc, #368]	@ (8001a80 <HAL_DMA_Start_IT+0x214>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d022      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a5a      	ldr	r2, [pc, #360]	@ (8001a84 <HAL_DMA_Start_IT+0x218>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01d      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a59      	ldr	r2, [pc, #356]	@ (8001a88 <HAL_DMA_Start_IT+0x21c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d018      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a57      	ldr	r2, [pc, #348]	@ (8001a8c <HAL_DMA_Start_IT+0x220>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a56      	ldr	r2, [pc, #344]	@ (8001a90 <HAL_DMA_Start_IT+0x224>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00e      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a54      	ldr	r2, [pc, #336]	@ (8001a94 <HAL_DMA_Start_IT+0x228>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d009      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a53      	ldr	r2, [pc, #332]	@ (8001a98 <HAL_DMA_Start_IT+0x22c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d004      	beq.n	800195a <HAL_DMA_Start_IT+0xee>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a51      	ldr	r2, [pc, #324]	@ (8001a9c <HAL_DMA_Start_IT+0x230>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d108      	bne.n	800196c <HAL_DMA_Start_IT+0x100>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0201 	bic.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e007      	b.n	800197c <HAL_DMA_Start_IT+0x110>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f001 fe76 	bl	8003674 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a34      	ldr	r2, [pc, #208]	@ (8001a60 <HAL_DMA_Start_IT+0x1f4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d04a      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a33      	ldr	r2, [pc, #204]	@ (8001a64 <HAL_DMA_Start_IT+0x1f8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d045      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a31      	ldr	r2, [pc, #196]	@ (8001a68 <HAL_DMA_Start_IT+0x1fc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d040      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a30      	ldr	r2, [pc, #192]	@ (8001a6c <HAL_DMA_Start_IT+0x200>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d03b      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001a70 <HAL_DMA_Start_IT+0x204>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d036      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2d      	ldr	r2, [pc, #180]	@ (8001a74 <HAL_DMA_Start_IT+0x208>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d031      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <HAL_DMA_Start_IT+0x20c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d02c      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a7c <HAL_DMA_Start_IT+0x210>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d027      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a28      	ldr	r2, [pc, #160]	@ (8001a80 <HAL_DMA_Start_IT+0x214>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d022      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a27      	ldr	r2, [pc, #156]	@ (8001a84 <HAL_DMA_Start_IT+0x218>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d01d      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a25      	ldr	r2, [pc, #148]	@ (8001a88 <HAL_DMA_Start_IT+0x21c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d018      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a24      	ldr	r2, [pc, #144]	@ (8001a8c <HAL_DMA_Start_IT+0x220>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a22      	ldr	r2, [pc, #136]	@ (8001a90 <HAL_DMA_Start_IT+0x224>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00e      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a21      	ldr	r2, [pc, #132]	@ (8001a94 <HAL_DMA_Start_IT+0x228>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d009      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1f      	ldr	r2, [pc, #124]	@ (8001a98 <HAL_DMA_Start_IT+0x22c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d004      	beq.n	8001a28 <HAL_DMA_Start_IT+0x1bc>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1e      	ldr	r2, [pc, #120]	@ (8001a9c <HAL_DMA_Start_IT+0x230>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_DMA_Start_IT+0x1c0>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_DMA_Start_IT+0x1c2>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d036      	beq.n	8001aa0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 021e 	bic.w	r2, r3, #30
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0216 	orr.w	r2, r2, #22
 8001a44:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d03e      	beq.n	8001acc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0208 	orr.w	r2, r2, #8
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e035      	b.n	8001acc <HAL_DMA_Start_IT+0x260>
 8001a60:	40020010 	.word	0x40020010
 8001a64:	40020028 	.word	0x40020028
 8001a68:	40020040 	.word	0x40020040
 8001a6c:	40020058 	.word	0x40020058
 8001a70:	40020070 	.word	0x40020070
 8001a74:	40020088 	.word	0x40020088
 8001a78:	400200a0 	.word	0x400200a0
 8001a7c:	400200b8 	.word	0x400200b8
 8001a80:	40020410 	.word	0x40020410
 8001a84:	40020428 	.word	0x40020428
 8001a88:	40020440 	.word	0x40020440
 8001a8c:	40020458 	.word	0x40020458
 8001a90:	40020470 	.word	0x40020470
 8001a94:	40020488 	.word	0x40020488
 8001a98:	400204a0 	.word	0x400204a0
 8001a9c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 020e 	bic.w	r2, r3, #14
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 020a 	orr.w	r2, r2, #10
 8001ab2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0204 	orr.w	r2, r2, #4
 8001aca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a83      	ldr	r2, [pc, #524]	@ (8001ce0 <HAL_DMA_Start_IT+0x474>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d072      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a82      	ldr	r2, [pc, #520]	@ (8001ce4 <HAL_DMA_Start_IT+0x478>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d06d      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a80      	ldr	r2, [pc, #512]	@ (8001ce8 <HAL_DMA_Start_IT+0x47c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d068      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7f      	ldr	r2, [pc, #508]	@ (8001cec <HAL_DMA_Start_IT+0x480>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d063      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a7d      	ldr	r2, [pc, #500]	@ (8001cf0 <HAL_DMA_Start_IT+0x484>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d05e      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7c      	ldr	r2, [pc, #496]	@ (8001cf4 <HAL_DMA_Start_IT+0x488>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d059      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a7a      	ldr	r2, [pc, #488]	@ (8001cf8 <HAL_DMA_Start_IT+0x48c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d054      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a79      	ldr	r2, [pc, #484]	@ (8001cfc <HAL_DMA_Start_IT+0x490>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d04f      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a77      	ldr	r2, [pc, #476]	@ (8001d00 <HAL_DMA_Start_IT+0x494>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d04a      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a76      	ldr	r2, [pc, #472]	@ (8001d04 <HAL_DMA_Start_IT+0x498>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d045      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a74      	ldr	r2, [pc, #464]	@ (8001d08 <HAL_DMA_Start_IT+0x49c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d040      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a73      	ldr	r2, [pc, #460]	@ (8001d0c <HAL_DMA_Start_IT+0x4a0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d03b      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a71      	ldr	r2, [pc, #452]	@ (8001d10 <HAL_DMA_Start_IT+0x4a4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d036      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a70      	ldr	r2, [pc, #448]	@ (8001d14 <HAL_DMA_Start_IT+0x4a8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d031      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8001d18 <HAL_DMA_Start_IT+0x4ac>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d02c      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6d      	ldr	r2, [pc, #436]	@ (8001d1c <HAL_DMA_Start_IT+0x4b0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d027      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a6b      	ldr	r2, [pc, #428]	@ (8001d20 <HAL_DMA_Start_IT+0x4b4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d022      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6a      	ldr	r2, [pc, #424]	@ (8001d24 <HAL_DMA_Start_IT+0x4b8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d01d      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a68      	ldr	r2, [pc, #416]	@ (8001d28 <HAL_DMA_Start_IT+0x4bc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d018      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a67      	ldr	r2, [pc, #412]	@ (8001d2c <HAL_DMA_Start_IT+0x4c0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d013      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a65      	ldr	r2, [pc, #404]	@ (8001d30 <HAL_DMA_Start_IT+0x4c4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00e      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a64      	ldr	r2, [pc, #400]	@ (8001d34 <HAL_DMA_Start_IT+0x4c8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d009      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a62      	ldr	r2, [pc, #392]	@ (8001d38 <HAL_DMA_Start_IT+0x4cc>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d004      	beq.n	8001bbc <HAL_DMA_Start_IT+0x350>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a61      	ldr	r2, [pc, #388]	@ (8001d3c <HAL_DMA_Start_IT+0x4d0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_DMA_Start_IT+0x354>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <HAL_DMA_Start_IT+0x356>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01a      	beq.n	8001bfc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001be2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d007      	beq.n	8001bfc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bfa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a37      	ldr	r2, [pc, #220]	@ (8001ce0 <HAL_DMA_Start_IT+0x474>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d04a      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ce4 <HAL_DMA_Start_IT+0x478>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d045      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a34      	ldr	r2, [pc, #208]	@ (8001ce8 <HAL_DMA_Start_IT+0x47c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d040      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a33      	ldr	r2, [pc, #204]	@ (8001cec <HAL_DMA_Start_IT+0x480>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d03b      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a31      	ldr	r2, [pc, #196]	@ (8001cf0 <HAL_DMA_Start_IT+0x484>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d036      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a30      	ldr	r2, [pc, #192]	@ (8001cf4 <HAL_DMA_Start_IT+0x488>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d031      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8001cf8 <HAL_DMA_Start_IT+0x48c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02c      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2d      	ldr	r2, [pc, #180]	@ (8001cfc <HAL_DMA_Start_IT+0x490>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d027      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2b      	ldr	r2, [pc, #172]	@ (8001d00 <HAL_DMA_Start_IT+0x494>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d022      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8001d04 <HAL_DMA_Start_IT+0x498>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d01d      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a28      	ldr	r2, [pc, #160]	@ (8001d08 <HAL_DMA_Start_IT+0x49c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d018      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a27      	ldr	r2, [pc, #156]	@ (8001d0c <HAL_DMA_Start_IT+0x4a0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d013      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a25      	ldr	r2, [pc, #148]	@ (8001d10 <HAL_DMA_Start_IT+0x4a4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00e      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a24      	ldr	r2, [pc, #144]	@ (8001d14 <HAL_DMA_Start_IT+0x4a8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d009      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a22      	ldr	r2, [pc, #136]	@ (8001d18 <HAL_DMA_Start_IT+0x4ac>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d004      	beq.n	8001c9c <HAL_DMA_Start_IT+0x430>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a21      	ldr	r2, [pc, #132]	@ (8001d1c <HAL_DMA_Start_IT+0x4b0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d108      	bne.n	8001cae <HAL_DMA_Start_IT+0x442>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e012      	b.n	8001cd4 <HAL_DMA_Start_IT+0x468>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e009      	b.n	8001cd4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40020010 	.word	0x40020010
 8001ce4:	40020028 	.word	0x40020028
 8001ce8:	40020040 	.word	0x40020040
 8001cec:	40020058 	.word	0x40020058
 8001cf0:	40020070 	.word	0x40020070
 8001cf4:	40020088 	.word	0x40020088
 8001cf8:	400200a0 	.word	0x400200a0
 8001cfc:	400200b8 	.word	0x400200b8
 8001d00:	40020410 	.word	0x40020410
 8001d04:	40020428 	.word	0x40020428
 8001d08:	40020440 	.word	0x40020440
 8001d0c:	40020458 	.word	0x40020458
 8001d10:	40020470 	.word	0x40020470
 8001d14:	40020488 	.word	0x40020488
 8001d18:	400204a0 	.word	0x400204a0
 8001d1c:	400204b8 	.word	0x400204b8
 8001d20:	58025408 	.word	0x58025408
 8001d24:	5802541c 	.word	0x5802541c
 8001d28:	58025430 	.word	0x58025430
 8001d2c:	58025444 	.word	0x58025444
 8001d30:	58025458 	.word	0x58025458
 8001d34:	5802546c 	.word	0x5802546c
 8001d38:	58025480 	.word	0x58025480
 8001d3c:	58025494 	.word	0x58025494

08001d40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff f90c 	bl	8000f64 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e2dc      	b.n	8002312 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d008      	beq.n	8001d76 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2280      	movs	r2, #128	@ 0x80
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e2cd      	b.n	8002312 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a76      	ldr	r2, [pc, #472]	@ (8001f54 <HAL_DMA_Abort+0x214>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d04a      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a74      	ldr	r2, [pc, #464]	@ (8001f58 <HAL_DMA_Abort+0x218>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d045      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a73      	ldr	r2, [pc, #460]	@ (8001f5c <HAL_DMA_Abort+0x21c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d040      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a71      	ldr	r2, [pc, #452]	@ (8001f60 <HAL_DMA_Abort+0x220>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d03b      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a70      	ldr	r2, [pc, #448]	@ (8001f64 <HAL_DMA_Abort+0x224>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d036      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6e      	ldr	r2, [pc, #440]	@ (8001f68 <HAL_DMA_Abort+0x228>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d031      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6d      	ldr	r2, [pc, #436]	@ (8001f6c <HAL_DMA_Abort+0x22c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d02c      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8001f70 <HAL_DMA_Abort+0x230>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d027      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6a      	ldr	r2, [pc, #424]	@ (8001f74 <HAL_DMA_Abort+0x234>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d022      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a68      	ldr	r2, [pc, #416]	@ (8001f78 <HAL_DMA_Abort+0x238>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01d      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a67      	ldr	r2, [pc, #412]	@ (8001f7c <HAL_DMA_Abort+0x23c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d018      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a65      	ldr	r2, [pc, #404]	@ (8001f80 <HAL_DMA_Abort+0x240>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a64      	ldr	r2, [pc, #400]	@ (8001f84 <HAL_DMA_Abort+0x244>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00e      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a62      	ldr	r2, [pc, #392]	@ (8001f88 <HAL_DMA_Abort+0x248>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d009      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a61      	ldr	r2, [pc, #388]	@ (8001f8c <HAL_DMA_Abort+0x24c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d004      	beq.n	8001e16 <HAL_DMA_Abort+0xd6>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a5f      	ldr	r2, [pc, #380]	@ (8001f90 <HAL_DMA_Abort+0x250>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_DMA_Abort+0xda>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_DMA_Abort+0xdc>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 021e 	bic.w	r2, r2, #30
 8001e2e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e3e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e00a      	b.n	8001e5e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 020e 	bic.w	r2, r2, #14
 8001e56:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a3c      	ldr	r2, [pc, #240]	@ (8001f54 <HAL_DMA_Abort+0x214>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d072      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f58 <HAL_DMA_Abort+0x218>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d06d      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a39      	ldr	r2, [pc, #228]	@ (8001f5c <HAL_DMA_Abort+0x21c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d068      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a37      	ldr	r2, [pc, #220]	@ (8001f60 <HAL_DMA_Abort+0x220>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d063      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a36      	ldr	r2, [pc, #216]	@ (8001f64 <HAL_DMA_Abort+0x224>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d05e      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a34      	ldr	r2, [pc, #208]	@ (8001f68 <HAL_DMA_Abort+0x228>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d059      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a33      	ldr	r2, [pc, #204]	@ (8001f6c <HAL_DMA_Abort+0x22c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d054      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a31      	ldr	r2, [pc, #196]	@ (8001f70 <HAL_DMA_Abort+0x230>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d04f      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a30      	ldr	r2, [pc, #192]	@ (8001f74 <HAL_DMA_Abort+0x234>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d04a      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8001f78 <HAL_DMA_Abort+0x238>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d045      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f7c <HAL_DMA_Abort+0x23c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d040      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f80 <HAL_DMA_Abort+0x240>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d03b      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a2a      	ldr	r2, [pc, #168]	@ (8001f84 <HAL_DMA_Abort+0x244>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d036      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a28      	ldr	r2, [pc, #160]	@ (8001f88 <HAL_DMA_Abort+0x248>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d031      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a27      	ldr	r2, [pc, #156]	@ (8001f8c <HAL_DMA_Abort+0x24c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d02c      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a25      	ldr	r2, [pc, #148]	@ (8001f90 <HAL_DMA_Abort+0x250>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d027      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <HAL_DMA_Abort+0x254>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d022      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a22      	ldr	r2, [pc, #136]	@ (8001f98 <HAL_DMA_Abort+0x258>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01d      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a21      	ldr	r2, [pc, #132]	@ (8001f9c <HAL_DMA_Abort+0x25c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d018      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_DMA_Abort+0x260>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa4 <HAL_DMA_Abort+0x264>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00e      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa8 <HAL_DMA_Abort+0x268>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d009      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_DMA_Abort+0x26c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d004      	beq.n	8001f4e <HAL_DMA_Abort+0x20e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_DMA_Abort+0x270>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d132      	bne.n	8001fb4 <HAL_DMA_Abort+0x274>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e031      	b.n	8001fb6 <HAL_DMA_Abort+0x276>
 8001f52:	bf00      	nop
 8001f54:	40020010 	.word	0x40020010
 8001f58:	40020028 	.word	0x40020028
 8001f5c:	40020040 	.word	0x40020040
 8001f60:	40020058 	.word	0x40020058
 8001f64:	40020070 	.word	0x40020070
 8001f68:	40020088 	.word	0x40020088
 8001f6c:	400200a0 	.word	0x400200a0
 8001f70:	400200b8 	.word	0x400200b8
 8001f74:	40020410 	.word	0x40020410
 8001f78:	40020428 	.word	0x40020428
 8001f7c:	40020440 	.word	0x40020440
 8001f80:	40020458 	.word	0x40020458
 8001f84:	40020470 	.word	0x40020470
 8001f88:	40020488 	.word	0x40020488
 8001f8c:	400204a0 	.word	0x400204a0
 8001f90:	400204b8 	.word	0x400204b8
 8001f94:	58025408 	.word	0x58025408
 8001f98:	5802541c 	.word	0x5802541c
 8001f9c:	58025430 	.word	0x58025430
 8001fa0:	58025444 	.word	0x58025444
 8001fa4:	58025458 	.word	0x58025458
 8001fa8:	5802546c 	.word	0x5802546c
 8001fac:	58025480 	.word	0x58025480
 8001fb0:	58025494 	.word	0x58025494
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6d      	ldr	r2, [pc, #436]	@ (8002184 <HAL_DMA_Abort+0x444>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d04a      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6b      	ldr	r2, [pc, #428]	@ (8002188 <HAL_DMA_Abort+0x448>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d045      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6a      	ldr	r2, [pc, #424]	@ (800218c <HAL_DMA_Abort+0x44c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d040      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a68      	ldr	r2, [pc, #416]	@ (8002190 <HAL_DMA_Abort+0x450>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d03b      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a67      	ldr	r2, [pc, #412]	@ (8002194 <HAL_DMA_Abort+0x454>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d036      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a65      	ldr	r2, [pc, #404]	@ (8002198 <HAL_DMA_Abort+0x458>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d031      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a64      	ldr	r2, [pc, #400]	@ (800219c <HAL_DMA_Abort+0x45c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d02c      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a62      	ldr	r2, [pc, #392]	@ (80021a0 <HAL_DMA_Abort+0x460>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d027      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a61      	ldr	r2, [pc, #388]	@ (80021a4 <HAL_DMA_Abort+0x464>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d022      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a5f      	ldr	r2, [pc, #380]	@ (80021a8 <HAL_DMA_Abort+0x468>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01d      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a5e      	ldr	r2, [pc, #376]	@ (80021ac <HAL_DMA_Abort+0x46c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d018      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a5c      	ldr	r2, [pc, #368]	@ (80021b0 <HAL_DMA_Abort+0x470>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a5b      	ldr	r2, [pc, #364]	@ (80021b4 <HAL_DMA_Abort+0x474>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00e      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a59      	ldr	r2, [pc, #356]	@ (80021b8 <HAL_DMA_Abort+0x478>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a58      	ldr	r2, [pc, #352]	@ (80021bc <HAL_DMA_Abort+0x47c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_DMA_Abort+0x32a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a56      	ldr	r2, [pc, #344]	@ (80021c0 <HAL_DMA_Abort+0x480>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <HAL_DMA_Abort+0x33c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e007      	b.n	800208c <HAL_DMA_Abort+0x34c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800208c:	e013      	b.n	80020b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800208e:	f7fe ff69 	bl	8000f64 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b05      	cmp	r3, #5
 800209a:	d90c      	bls.n	80020b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2203      	movs	r2, #3
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e12d      	b.n	8002312 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1e5      	bne.n	800208e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002184 <HAL_DMA_Abort+0x444>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d04a      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002188 <HAL_DMA_Abort+0x448>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d045      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a2c      	ldr	r2, [pc, #176]	@ (800218c <HAL_DMA_Abort+0x44c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d040      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002190 <HAL_DMA_Abort+0x450>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d03b      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a29      	ldr	r2, [pc, #164]	@ (8002194 <HAL_DMA_Abort+0x454>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d036      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a27      	ldr	r2, [pc, #156]	@ (8002198 <HAL_DMA_Abort+0x458>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d031      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a26      	ldr	r2, [pc, #152]	@ (800219c <HAL_DMA_Abort+0x45c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d02c      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a24      	ldr	r2, [pc, #144]	@ (80021a0 <HAL_DMA_Abort+0x460>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d027      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a23      	ldr	r2, [pc, #140]	@ (80021a4 <HAL_DMA_Abort+0x464>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d022      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a21      	ldr	r2, [pc, #132]	@ (80021a8 <HAL_DMA_Abort+0x468>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01d      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a20      	ldr	r2, [pc, #128]	@ (80021ac <HAL_DMA_Abort+0x46c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d018      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1e      	ldr	r2, [pc, #120]	@ (80021b0 <HAL_DMA_Abort+0x470>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1d      	ldr	r2, [pc, #116]	@ (80021b4 <HAL_DMA_Abort+0x474>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00e      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1b      	ldr	r2, [pc, #108]	@ (80021b8 <HAL_DMA_Abort+0x478>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1a      	ldr	r2, [pc, #104]	@ (80021bc <HAL_DMA_Abort+0x47c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d004      	beq.n	8002162 <HAL_DMA_Abort+0x422>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a18      	ldr	r2, [pc, #96]	@ (80021c0 <HAL_DMA_Abort+0x480>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_DMA_Abort+0x426>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_DMA_Abort+0x428>
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d02b      	beq.n	80021c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002170:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	223f      	movs	r2, #63	@ 0x3f
 800217c:	409a      	lsls	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	e02a      	b.n	80021da <HAL_DMA_Abort+0x49a>
 8002184:	40020010 	.word	0x40020010
 8002188:	40020028 	.word	0x40020028
 800218c:	40020040 	.word	0x40020040
 8002190:	40020058 	.word	0x40020058
 8002194:	40020070 	.word	0x40020070
 8002198:	40020088 	.word	0x40020088
 800219c:	400200a0 	.word	0x400200a0
 80021a0:	400200b8 	.word	0x400200b8
 80021a4:	40020410 	.word	0x40020410
 80021a8:	40020428 	.word	0x40020428
 80021ac:	40020440 	.word	0x40020440
 80021b0:	40020458 	.word	0x40020458
 80021b4:	40020470 	.word	0x40020470
 80021b8:	40020488 	.word	0x40020488
 80021bc:	400204a0 	.word	0x400204a0
 80021c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	2201      	movs	r2, #1
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a4f      	ldr	r2, [pc, #316]	@ (800231c <HAL_DMA_Abort+0x5dc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d072      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002320 <HAL_DMA_Abort+0x5e0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d06d      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002324 <HAL_DMA_Abort+0x5e4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d068      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002328 <HAL_DMA_Abort+0x5e8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d063      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a49      	ldr	r2, [pc, #292]	@ (800232c <HAL_DMA_Abort+0x5ec>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d05e      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a47      	ldr	r2, [pc, #284]	@ (8002330 <HAL_DMA_Abort+0x5f0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d059      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a46      	ldr	r2, [pc, #280]	@ (8002334 <HAL_DMA_Abort+0x5f4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d054      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a44      	ldr	r2, [pc, #272]	@ (8002338 <HAL_DMA_Abort+0x5f8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d04f      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a43      	ldr	r2, [pc, #268]	@ (800233c <HAL_DMA_Abort+0x5fc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d04a      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a41      	ldr	r2, [pc, #260]	@ (8002340 <HAL_DMA_Abort+0x600>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d045      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a40      	ldr	r2, [pc, #256]	@ (8002344 <HAL_DMA_Abort+0x604>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d040      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3e      	ldr	r2, [pc, #248]	@ (8002348 <HAL_DMA_Abort+0x608>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d03b      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a3d      	ldr	r2, [pc, #244]	@ (800234c <HAL_DMA_Abort+0x60c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d036      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a3b      	ldr	r2, [pc, #236]	@ (8002350 <HAL_DMA_Abort+0x610>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d031      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a3a      	ldr	r2, [pc, #232]	@ (8002354 <HAL_DMA_Abort+0x614>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d02c      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a38      	ldr	r2, [pc, #224]	@ (8002358 <HAL_DMA_Abort+0x618>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d027      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a37      	ldr	r2, [pc, #220]	@ (800235c <HAL_DMA_Abort+0x61c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d022      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a35      	ldr	r2, [pc, #212]	@ (8002360 <HAL_DMA_Abort+0x620>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01d      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a34      	ldr	r2, [pc, #208]	@ (8002364 <HAL_DMA_Abort+0x624>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d018      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a32      	ldr	r2, [pc, #200]	@ (8002368 <HAL_DMA_Abort+0x628>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a31      	ldr	r2, [pc, #196]	@ (800236c <HAL_DMA_Abort+0x62c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00e      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002370 <HAL_DMA_Abort+0x630>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d009      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002374 <HAL_DMA_Abort+0x634>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_DMA_Abort+0x58a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002378 <HAL_DMA_Abort+0x638>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_DMA_Abort+0x58e>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_DMA_Abort+0x590>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40020010 	.word	0x40020010
 8002320:	40020028 	.word	0x40020028
 8002324:	40020040 	.word	0x40020040
 8002328:	40020058 	.word	0x40020058
 800232c:	40020070 	.word	0x40020070
 8002330:	40020088 	.word	0x40020088
 8002334:	400200a0 	.word	0x400200a0
 8002338:	400200b8 	.word	0x400200b8
 800233c:	40020410 	.word	0x40020410
 8002340:	40020428 	.word	0x40020428
 8002344:	40020440 	.word	0x40020440
 8002348:	40020458 	.word	0x40020458
 800234c:	40020470 	.word	0x40020470
 8002350:	40020488 	.word	0x40020488
 8002354:	400204a0 	.word	0x400204a0
 8002358:	400204b8 	.word	0x400204b8
 800235c:	58025408 	.word	0x58025408
 8002360:	5802541c 	.word	0x5802541c
 8002364:	58025430 	.word	0x58025430
 8002368:	58025444 	.word	0x58025444
 800236c:	58025458 	.word	0x58025458
 8002370:	5802546c 	.word	0x5802546c
 8002374:	58025480 	.word	0x58025480
 8002378:	58025494 	.word	0x58025494

0800237c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e237      	b.n	80027fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d004      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2280      	movs	r2, #128	@ 0x80
 800239e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e22c      	b.n	80027fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a5c      	ldr	r2, [pc, #368]	@ (800251c <HAL_DMA_Abort_IT+0x1a0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d04a      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002520 <HAL_DMA_Abort_IT+0x1a4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d045      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a59      	ldr	r2, [pc, #356]	@ (8002524 <HAL_DMA_Abort_IT+0x1a8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d040      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a58      	ldr	r2, [pc, #352]	@ (8002528 <HAL_DMA_Abort_IT+0x1ac>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d03b      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a56      	ldr	r2, [pc, #344]	@ (800252c <HAL_DMA_Abort_IT+0x1b0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d036      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a55      	ldr	r2, [pc, #340]	@ (8002530 <HAL_DMA_Abort_IT+0x1b4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d031      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a53      	ldr	r2, [pc, #332]	@ (8002534 <HAL_DMA_Abort_IT+0x1b8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02c      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a52      	ldr	r2, [pc, #328]	@ (8002538 <HAL_DMA_Abort_IT+0x1bc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d027      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a50      	ldr	r2, [pc, #320]	@ (800253c <HAL_DMA_Abort_IT+0x1c0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d022      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a4f      	ldr	r2, [pc, #316]	@ (8002540 <HAL_DMA_Abort_IT+0x1c4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d01d      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a4d      	ldr	r2, [pc, #308]	@ (8002544 <HAL_DMA_Abort_IT+0x1c8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d018      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a4c      	ldr	r2, [pc, #304]	@ (8002548 <HAL_DMA_Abort_IT+0x1cc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d013      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a4a      	ldr	r2, [pc, #296]	@ (800254c <HAL_DMA_Abort_IT+0x1d0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00e      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a49      	ldr	r2, [pc, #292]	@ (8002550 <HAL_DMA_Abort_IT+0x1d4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d009      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a47      	ldr	r2, [pc, #284]	@ (8002554 <HAL_DMA_Abort_IT+0x1d8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d004      	beq.n	8002444 <HAL_DMA_Abort_IT+0xc8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a46      	ldr	r2, [pc, #280]	@ (8002558 <HAL_DMA_Abort_IT+0x1dc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_DMA_Abort_IT+0xcc>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_DMA_Abort_IT+0xce>
 8002448:	2300      	movs	r3, #0
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8086 	beq.w	800255c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2204      	movs	r2, #4
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a2f      	ldr	r2, [pc, #188]	@ (800251c <HAL_DMA_Abort_IT+0x1a0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d04a      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2e      	ldr	r2, [pc, #184]	@ (8002520 <HAL_DMA_Abort_IT+0x1a4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d045      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2c      	ldr	r2, [pc, #176]	@ (8002524 <HAL_DMA_Abort_IT+0x1a8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d040      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a2b      	ldr	r2, [pc, #172]	@ (8002528 <HAL_DMA_Abort_IT+0x1ac>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d03b      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a29      	ldr	r2, [pc, #164]	@ (800252c <HAL_DMA_Abort_IT+0x1b0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d036      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a28      	ldr	r2, [pc, #160]	@ (8002530 <HAL_DMA_Abort_IT+0x1b4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d031      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a26      	ldr	r2, [pc, #152]	@ (8002534 <HAL_DMA_Abort_IT+0x1b8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d02c      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a25      	ldr	r2, [pc, #148]	@ (8002538 <HAL_DMA_Abort_IT+0x1bc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d027      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a23      	ldr	r2, [pc, #140]	@ (800253c <HAL_DMA_Abort_IT+0x1c0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d022      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a22      	ldr	r2, [pc, #136]	@ (8002540 <HAL_DMA_Abort_IT+0x1c4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d01d      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a20      	ldr	r2, [pc, #128]	@ (8002544 <HAL_DMA_Abort_IT+0x1c8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d018      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002548 <HAL_DMA_Abort_IT+0x1cc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d013      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1d      	ldr	r2, [pc, #116]	@ (800254c <HAL_DMA_Abort_IT+0x1d0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00e      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1c      	ldr	r2, [pc, #112]	@ (8002550 <HAL_DMA_Abort_IT+0x1d4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d009      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002554 <HAL_DMA_Abort_IT+0x1d8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d004      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x17c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a19      	ldr	r2, [pc, #100]	@ (8002558 <HAL_DMA_Abort_IT+0x1dc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d108      	bne.n	800250a <HAL_DMA_Abort_IT+0x18e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e178      	b.n	80027fc <HAL_DMA_Abort_IT+0x480>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e16f      	b.n	80027fc <HAL_DMA_Abort_IT+0x480>
 800251c:	40020010 	.word	0x40020010
 8002520:	40020028 	.word	0x40020028
 8002524:	40020040 	.word	0x40020040
 8002528:	40020058 	.word	0x40020058
 800252c:	40020070 	.word	0x40020070
 8002530:	40020088 	.word	0x40020088
 8002534:	400200a0 	.word	0x400200a0
 8002538:	400200b8 	.word	0x400200b8
 800253c:	40020410 	.word	0x40020410
 8002540:	40020428 	.word	0x40020428
 8002544:	40020440 	.word	0x40020440
 8002548:	40020458 	.word	0x40020458
 800254c:	40020470 	.word	0x40020470
 8002550:	40020488 	.word	0x40020488
 8002554:	400204a0 	.word	0x400204a0
 8002558:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 020e 	bic.w	r2, r2, #14
 800256a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a6c      	ldr	r2, [pc, #432]	@ (8002724 <HAL_DMA_Abort_IT+0x3a8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d04a      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6b      	ldr	r2, [pc, #428]	@ (8002728 <HAL_DMA_Abort_IT+0x3ac>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d045      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a69      	ldr	r2, [pc, #420]	@ (800272c <HAL_DMA_Abort_IT+0x3b0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d040      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a68      	ldr	r2, [pc, #416]	@ (8002730 <HAL_DMA_Abort_IT+0x3b4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d03b      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a66      	ldr	r2, [pc, #408]	@ (8002734 <HAL_DMA_Abort_IT+0x3b8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d036      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a65      	ldr	r2, [pc, #404]	@ (8002738 <HAL_DMA_Abort_IT+0x3bc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d031      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a63      	ldr	r2, [pc, #396]	@ (800273c <HAL_DMA_Abort_IT+0x3c0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02c      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a62      	ldr	r2, [pc, #392]	@ (8002740 <HAL_DMA_Abort_IT+0x3c4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d027      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a60      	ldr	r2, [pc, #384]	@ (8002744 <HAL_DMA_Abort_IT+0x3c8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d022      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002748 <HAL_DMA_Abort_IT+0x3cc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d01d      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a5d      	ldr	r2, [pc, #372]	@ (800274c <HAL_DMA_Abort_IT+0x3d0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d018      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a5c      	ldr	r2, [pc, #368]	@ (8002750 <HAL_DMA_Abort_IT+0x3d4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d013      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002754 <HAL_DMA_Abort_IT+0x3d8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00e      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a59      	ldr	r2, [pc, #356]	@ (8002758 <HAL_DMA_Abort_IT+0x3dc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d009      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a57      	ldr	r2, [pc, #348]	@ (800275c <HAL_DMA_Abort_IT+0x3e0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d004      	beq.n	800260c <HAL_DMA_Abort_IT+0x290>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a56      	ldr	r2, [pc, #344]	@ (8002760 <HAL_DMA_Abort_IT+0x3e4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d108      	bne.n	800261e <HAL_DMA_Abort_IT+0x2a2>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	e007      	b.n	800262e <HAL_DMA_Abort_IT+0x2b2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a3c      	ldr	r2, [pc, #240]	@ (8002724 <HAL_DMA_Abort_IT+0x3a8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d072      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3a      	ldr	r2, [pc, #232]	@ (8002728 <HAL_DMA_Abort_IT+0x3ac>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d06d      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a39      	ldr	r2, [pc, #228]	@ (800272c <HAL_DMA_Abort_IT+0x3b0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d068      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a37      	ldr	r2, [pc, #220]	@ (8002730 <HAL_DMA_Abort_IT+0x3b4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d063      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a36      	ldr	r2, [pc, #216]	@ (8002734 <HAL_DMA_Abort_IT+0x3b8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d05e      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a34      	ldr	r2, [pc, #208]	@ (8002738 <HAL_DMA_Abort_IT+0x3bc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d059      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a33      	ldr	r2, [pc, #204]	@ (800273c <HAL_DMA_Abort_IT+0x3c0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d054      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a31      	ldr	r2, [pc, #196]	@ (8002740 <HAL_DMA_Abort_IT+0x3c4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d04f      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a30      	ldr	r2, [pc, #192]	@ (8002744 <HAL_DMA_Abort_IT+0x3c8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d04a      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a2e      	ldr	r2, [pc, #184]	@ (8002748 <HAL_DMA_Abort_IT+0x3cc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d045      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a2d      	ldr	r2, [pc, #180]	@ (800274c <HAL_DMA_Abort_IT+0x3d0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d040      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002750 <HAL_DMA_Abort_IT+0x3d4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d03b      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002754 <HAL_DMA_Abort_IT+0x3d8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d036      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a28      	ldr	r2, [pc, #160]	@ (8002758 <HAL_DMA_Abort_IT+0x3dc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d031      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a27      	ldr	r2, [pc, #156]	@ (800275c <HAL_DMA_Abort_IT+0x3e0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d02c      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a25      	ldr	r2, [pc, #148]	@ (8002760 <HAL_DMA_Abort_IT+0x3e4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d027      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a24      	ldr	r2, [pc, #144]	@ (8002764 <HAL_DMA_Abort_IT+0x3e8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d022      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a22      	ldr	r2, [pc, #136]	@ (8002768 <HAL_DMA_Abort_IT+0x3ec>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01d      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a21      	ldr	r2, [pc, #132]	@ (800276c <HAL_DMA_Abort_IT+0x3f0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d018      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002770 <HAL_DMA_Abort_IT+0x3f4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002774 <HAL_DMA_Abort_IT+0x3f8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00e      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1c      	ldr	r2, [pc, #112]	@ (8002778 <HAL_DMA_Abort_IT+0x3fc>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1b      	ldr	r2, [pc, #108]	@ (800277c <HAL_DMA_Abort_IT+0x400>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d004      	beq.n	800271e <HAL_DMA_Abort_IT+0x3a2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <HAL_DMA_Abort_IT+0x404>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d132      	bne.n	8002784 <HAL_DMA_Abort_IT+0x408>
 800271e:	2301      	movs	r3, #1
 8002720:	e031      	b.n	8002786 <HAL_DMA_Abort_IT+0x40a>
 8002722:	bf00      	nop
 8002724:	40020010 	.word	0x40020010
 8002728:	40020028 	.word	0x40020028
 800272c:	40020040 	.word	0x40020040
 8002730:	40020058 	.word	0x40020058
 8002734:	40020070 	.word	0x40020070
 8002738:	40020088 	.word	0x40020088
 800273c:	400200a0 	.word	0x400200a0
 8002740:	400200b8 	.word	0x400200b8
 8002744:	40020410 	.word	0x40020410
 8002748:	40020428 	.word	0x40020428
 800274c:	40020440 	.word	0x40020440
 8002750:	40020458 	.word	0x40020458
 8002754:	40020470 	.word	0x40020470
 8002758:	40020488 	.word	0x40020488
 800275c:	400204a0 	.word	0x400204a0
 8002760:	400204b8 	.word	0x400204b8
 8002764:	58025408 	.word	0x58025408
 8002768:	5802541c 	.word	0x5802541c
 800276c:	58025430 	.word	0x58025430
 8002770:	58025444 	.word	0x58025444
 8002774:	58025458 	.word	0x58025458
 8002778:	5802546c 	.word	0x5802546c
 800277c:	58025480 	.word	0x58025480
 8002780:	58025494 	.word	0x58025494
 8002784:	2300      	movs	r3, #0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d028      	beq.n	80027dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002798:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2201      	movs	r2, #1
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80027b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00c      	beq.n	80027dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80027da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop

08002808 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002814:	4b67      	ldr	r3, [pc, #412]	@ (80029b4 <HAL_DMA_IRQHandler+0x1ac>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a67      	ldr	r2, [pc, #412]	@ (80029b8 <HAL_DMA_IRQHandler+0x1b0>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0a9b      	lsrs	r3, r3, #10
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002826:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a5f      	ldr	r2, [pc, #380]	@ (80029bc <HAL_DMA_IRQHandler+0x1b4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d04a      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a5d      	ldr	r2, [pc, #372]	@ (80029c0 <HAL_DMA_IRQHandler+0x1b8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d045      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a5c      	ldr	r2, [pc, #368]	@ (80029c4 <HAL_DMA_IRQHandler+0x1bc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d040      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a5a      	ldr	r2, [pc, #360]	@ (80029c8 <HAL_DMA_IRQHandler+0x1c0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d03b      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a59      	ldr	r2, [pc, #356]	@ (80029cc <HAL_DMA_IRQHandler+0x1c4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d036      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a57      	ldr	r2, [pc, #348]	@ (80029d0 <HAL_DMA_IRQHandler+0x1c8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d031      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a56      	ldr	r2, [pc, #344]	@ (80029d4 <HAL_DMA_IRQHandler+0x1cc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d02c      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a54      	ldr	r2, [pc, #336]	@ (80029d8 <HAL_DMA_IRQHandler+0x1d0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d027      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a53      	ldr	r2, [pc, #332]	@ (80029dc <HAL_DMA_IRQHandler+0x1d4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a51      	ldr	r2, [pc, #324]	@ (80029e0 <HAL_DMA_IRQHandler+0x1d8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01d      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a50      	ldr	r2, [pc, #320]	@ (80029e4 <HAL_DMA_IRQHandler+0x1dc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d018      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4e      	ldr	r2, [pc, #312]	@ (80029e8 <HAL_DMA_IRQHandler+0x1e0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a4d      	ldr	r2, [pc, #308]	@ (80029ec <HAL_DMA_IRQHandler+0x1e4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00e      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a4b      	ldr	r2, [pc, #300]	@ (80029f0 <HAL_DMA_IRQHandler+0x1e8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a4a      	ldr	r2, [pc, #296]	@ (80029f4 <HAL_DMA_IRQHandler+0x1ec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d004      	beq.n	80028da <HAL_DMA_IRQHandler+0xd2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a48      	ldr	r2, [pc, #288]	@ (80029f8 <HAL_DMA_IRQHandler+0x1f0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_DMA_IRQHandler+0xd6>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_DMA_IRQHandler+0xd8>
 80028de:	2300      	movs	r3, #0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 842b 	beq.w	800313c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2208      	movs	r2, #8
 80028f0:	409a      	lsls	r2, r3
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80a2 	beq.w	8002a40 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a2e      	ldr	r2, [pc, #184]	@ (80029bc <HAL_DMA_IRQHandler+0x1b4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d04a      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2d      	ldr	r2, [pc, #180]	@ (80029c0 <HAL_DMA_IRQHandler+0x1b8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d045      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2b      	ldr	r2, [pc, #172]	@ (80029c4 <HAL_DMA_IRQHandler+0x1bc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d040      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2a      	ldr	r2, [pc, #168]	@ (80029c8 <HAL_DMA_IRQHandler+0x1c0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d03b      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a28      	ldr	r2, [pc, #160]	@ (80029cc <HAL_DMA_IRQHandler+0x1c4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d036      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a27      	ldr	r2, [pc, #156]	@ (80029d0 <HAL_DMA_IRQHandler+0x1c8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d031      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a25      	ldr	r2, [pc, #148]	@ (80029d4 <HAL_DMA_IRQHandler+0x1cc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d02c      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a24      	ldr	r2, [pc, #144]	@ (80029d8 <HAL_DMA_IRQHandler+0x1d0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d027      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a22      	ldr	r2, [pc, #136]	@ (80029dc <HAL_DMA_IRQHandler+0x1d4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d022      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a21      	ldr	r2, [pc, #132]	@ (80029e0 <HAL_DMA_IRQHandler+0x1d8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d01d      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1f      	ldr	r2, [pc, #124]	@ (80029e4 <HAL_DMA_IRQHandler+0x1dc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d018      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1e      	ldr	r2, [pc, #120]	@ (80029e8 <HAL_DMA_IRQHandler+0x1e0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d013      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1c      	ldr	r2, [pc, #112]	@ (80029ec <HAL_DMA_IRQHandler+0x1e4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00e      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1b      	ldr	r2, [pc, #108]	@ (80029f0 <HAL_DMA_IRQHandler+0x1e8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a19      	ldr	r2, [pc, #100]	@ (80029f4 <HAL_DMA_IRQHandler+0x1ec>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <HAL_DMA_IRQHandler+0x194>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a18      	ldr	r2, [pc, #96]	@ (80029f8 <HAL_DMA_IRQHandler+0x1f0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d12f      	bne.n	80029fc <HAL_DMA_IRQHandler+0x1f4>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf14      	ite	ne
 80029aa:	2301      	movne	r3, #1
 80029ac:	2300      	moveq	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	e02e      	b.n	8002a10 <HAL_DMA_IRQHandler+0x208>
 80029b2:	bf00      	nop
 80029b4:	24000000 	.word	0x24000000
 80029b8:	1b4e81b5 	.word	0x1b4e81b5
 80029bc:	40020010 	.word	0x40020010
 80029c0:	40020028 	.word	0x40020028
 80029c4:	40020040 	.word	0x40020040
 80029c8:	40020058 	.word	0x40020058
 80029cc:	40020070 	.word	0x40020070
 80029d0:	40020088 	.word	0x40020088
 80029d4:	400200a0 	.word	0x400200a0
 80029d8:	400200b8 	.word	0x400200b8
 80029dc:	40020410 	.word	0x40020410
 80029e0:	40020428 	.word	0x40020428
 80029e4:	40020440 	.word	0x40020440
 80029e8:	40020458 	.word	0x40020458
 80029ec:	40020470 	.word	0x40020470
 80029f0:	40020488 	.word	0x40020488
 80029f4:	400204a0 	.word	0x400204a0
 80029f8:	400204b8 	.word	0x400204b8
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d015      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d06e      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a69      	ldr	r2, [pc, #420]	@ (8002c00 <HAL_DMA_IRQHandler+0x3f8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d04a      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a67      	ldr	r2, [pc, #412]	@ (8002c04 <HAL_DMA_IRQHandler+0x3fc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d045      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a66      	ldr	r2, [pc, #408]	@ (8002c08 <HAL_DMA_IRQHandler+0x400>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d040      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a64      	ldr	r2, [pc, #400]	@ (8002c0c <HAL_DMA_IRQHandler+0x404>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d03b      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a63      	ldr	r2, [pc, #396]	@ (8002c10 <HAL_DMA_IRQHandler+0x408>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d036      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a61      	ldr	r2, [pc, #388]	@ (8002c14 <HAL_DMA_IRQHandler+0x40c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d031      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a60      	ldr	r2, [pc, #384]	@ (8002c18 <HAL_DMA_IRQHandler+0x410>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d02c      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a5e      	ldr	r2, [pc, #376]	@ (8002c1c <HAL_DMA_IRQHandler+0x414>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d027      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a5d      	ldr	r2, [pc, #372]	@ (8002c20 <HAL_DMA_IRQHandler+0x418>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d022      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a5b      	ldr	r2, [pc, #364]	@ (8002c24 <HAL_DMA_IRQHandler+0x41c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01d      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a5a      	ldr	r2, [pc, #360]	@ (8002c28 <HAL_DMA_IRQHandler+0x420>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d018      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a58      	ldr	r2, [pc, #352]	@ (8002c2c <HAL_DMA_IRQHandler+0x424>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a57      	ldr	r2, [pc, #348]	@ (8002c30 <HAL_DMA_IRQHandler+0x428>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00e      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a55      	ldr	r2, [pc, #340]	@ (8002c34 <HAL_DMA_IRQHandler+0x42c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a54      	ldr	r2, [pc, #336]	@ (8002c38 <HAL_DMA_IRQHandler+0x430>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ee>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a52      	ldr	r2, [pc, #328]	@ (8002c3c <HAL_DMA_IRQHandler+0x434>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10a      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x304>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	e003      	b.n	8002b14 <HAL_DMA_IRQHandler+0x30c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2201      	movs	r2, #1
 8002b22:	409a      	lsls	r2, r3
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2c:	f043 0202 	orr.w	r2, r3, #2
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 808f 	beq.w	8002c68 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002c00 <HAL_DMA_IRQHandler+0x3f8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d04a      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2a      	ldr	r2, [pc, #168]	@ (8002c04 <HAL_DMA_IRQHandler+0x3fc>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d045      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a29      	ldr	r2, [pc, #164]	@ (8002c08 <HAL_DMA_IRQHandler+0x400>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d040      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a27      	ldr	r2, [pc, #156]	@ (8002c0c <HAL_DMA_IRQHandler+0x404>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d03b      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a26      	ldr	r2, [pc, #152]	@ (8002c10 <HAL_DMA_IRQHandler+0x408>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d036      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a24      	ldr	r2, [pc, #144]	@ (8002c14 <HAL_DMA_IRQHandler+0x40c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d031      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a23      	ldr	r2, [pc, #140]	@ (8002c18 <HAL_DMA_IRQHandler+0x410>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d02c      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <HAL_DMA_IRQHandler+0x414>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d027      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a20      	ldr	r2, [pc, #128]	@ (8002c20 <HAL_DMA_IRQHandler+0x418>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c24 <HAL_DMA_IRQHandler+0x41c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01d      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c28 <HAL_DMA_IRQHandler+0x420>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d018      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <HAL_DMA_IRQHandler+0x424>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c30 <HAL_DMA_IRQHandler+0x428>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a18      	ldr	r2, [pc, #96]	@ (8002c34 <HAL_DMA_IRQHandler+0x42c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a17      	ldr	r2, [pc, #92]	@ (8002c38 <HAL_DMA_IRQHandler+0x430>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_DMA_IRQHandler+0x3e2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a15      	ldr	r2, [pc, #84]	@ (8002c3c <HAL_DMA_IRQHandler+0x434>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d12a      	bne.n	8002c40 <HAL_DMA_IRQHandler+0x438>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e023      	b.n	8002c48 <HAL_DMA_IRQHandler+0x440>
 8002c00:	40020010 	.word	0x40020010
 8002c04:	40020028 	.word	0x40020028
 8002c08:	40020040 	.word	0x40020040
 8002c0c:	40020058 	.word	0x40020058
 8002c10:	40020070 	.word	0x40020070
 8002c14:	40020088 	.word	0x40020088
 8002c18:	400200a0 	.word	0x400200a0
 8002c1c:	400200b8 	.word	0x400200b8
 8002c20:	40020410 	.word	0x40020410
 8002c24:	40020428 	.word	0x40020428
 8002c28:	40020440 	.word	0x40020440
 8002c2c:	40020458 	.word	0x40020458
 8002c30:	40020470 	.word	0x40020470
 8002c34:	40020488 	.word	0x40020488
 8002c38:	400204a0 	.word	0x400204a0
 8002c3c:	400204b8 	.word	0x400204b8
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2300      	movs	r3, #0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2204      	movs	r2, #4
 8002c56:	409a      	lsls	r2, r3
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c60:	f043 0204 	orr.w	r2, r3, #4
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2210      	movs	r2, #16
 8002c72:	409a      	lsls	r2, r3
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a6 	beq.w	8002dca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a85      	ldr	r2, [pc, #532]	@ (8002e98 <HAL_DMA_IRQHandler+0x690>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04a      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a83      	ldr	r2, [pc, #524]	@ (8002e9c <HAL_DMA_IRQHandler+0x694>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d045      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a82      	ldr	r2, [pc, #520]	@ (8002ea0 <HAL_DMA_IRQHandler+0x698>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d040      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a80      	ldr	r2, [pc, #512]	@ (8002ea4 <HAL_DMA_IRQHandler+0x69c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d03b      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7f      	ldr	r2, [pc, #508]	@ (8002ea8 <HAL_DMA_IRQHandler+0x6a0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d036      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a7d      	ldr	r2, [pc, #500]	@ (8002eac <HAL_DMA_IRQHandler+0x6a4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a7c      	ldr	r2, [pc, #496]	@ (8002eb0 <HAL_DMA_IRQHandler+0x6a8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d02c      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a7a      	ldr	r2, [pc, #488]	@ (8002eb4 <HAL_DMA_IRQHandler+0x6ac>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d027      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a79      	ldr	r2, [pc, #484]	@ (8002eb8 <HAL_DMA_IRQHandler+0x6b0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d022      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a77      	ldr	r2, [pc, #476]	@ (8002ebc <HAL_DMA_IRQHandler+0x6b4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01d      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a76      	ldr	r2, [pc, #472]	@ (8002ec0 <HAL_DMA_IRQHandler+0x6b8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d018      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a74      	ldr	r2, [pc, #464]	@ (8002ec4 <HAL_DMA_IRQHandler+0x6bc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a73      	ldr	r2, [pc, #460]	@ (8002ec8 <HAL_DMA_IRQHandler+0x6c0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a71      	ldr	r2, [pc, #452]	@ (8002ecc <HAL_DMA_IRQHandler+0x6c4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d009      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a70      	ldr	r2, [pc, #448]	@ (8002ed0 <HAL_DMA_IRQHandler+0x6c8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x516>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed4 <HAL_DMA_IRQHandler+0x6cc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10a      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x52c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e009      	b.n	8002d48 <HAL_DMA_IRQHandler+0x540>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03e      	beq.n	8002dca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2210      	movs	r2, #16
 8002d56:	409a      	lsls	r2, r3
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d018      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d024      	beq.n	8002dca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e01f      	b.n	8002dca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01b      	beq.n	8002dca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
 8002d9a:	e016      	b.n	8002dca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0208 	bic.w	r2, r2, #8
 8002db8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8110 	beq.w	8003000 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2c      	ldr	r2, [pc, #176]	@ (8002e98 <HAL_DMA_IRQHandler+0x690>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d04a      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2b      	ldr	r2, [pc, #172]	@ (8002e9c <HAL_DMA_IRQHandler+0x694>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d045      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a29      	ldr	r2, [pc, #164]	@ (8002ea0 <HAL_DMA_IRQHandler+0x698>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d040      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a28      	ldr	r2, [pc, #160]	@ (8002ea4 <HAL_DMA_IRQHandler+0x69c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d03b      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ea8 <HAL_DMA_IRQHandler+0x6a0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d036      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a25      	ldr	r2, [pc, #148]	@ (8002eac <HAL_DMA_IRQHandler+0x6a4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d031      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a23      	ldr	r2, [pc, #140]	@ (8002eb0 <HAL_DMA_IRQHandler+0x6a8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d02c      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a22      	ldr	r2, [pc, #136]	@ (8002eb4 <HAL_DMA_IRQHandler+0x6ac>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d027      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a20      	ldr	r2, [pc, #128]	@ (8002eb8 <HAL_DMA_IRQHandler+0x6b0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d022      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ebc <HAL_DMA_IRQHandler+0x6b4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d01d      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec0 <HAL_DMA_IRQHandler+0x6b8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d018      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec4 <HAL_DMA_IRQHandler+0x6bc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec8 <HAL_DMA_IRQHandler+0x6c0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00e      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a19      	ldr	r2, [pc, #100]	@ (8002ecc <HAL_DMA_IRQHandler+0x6c4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d009      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a17      	ldr	r2, [pc, #92]	@ (8002ed0 <HAL_DMA_IRQHandler+0x6c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x678>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a16      	ldr	r2, [pc, #88]	@ (8002ed4 <HAL_DMA_IRQHandler+0x6cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d12b      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x6d0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e02a      	b.n	8002eec <HAL_DMA_IRQHandler+0x6e4>
 8002e96:	bf00      	nop
 8002e98:	40020010 	.word	0x40020010
 8002e9c:	40020028 	.word	0x40020028
 8002ea0:	40020040 	.word	0x40020040
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020088 	.word	0x40020088
 8002eb0:	400200a0 	.word	0x400200a0
 8002eb4:	400200b8 	.word	0x400200b8
 8002eb8:	40020410 	.word	0x40020410
 8002ebc:	40020428 	.word	0x40020428
 8002ec0:	40020440 	.word	0x40020440
 8002ec4:	40020458 	.word	0x40020458
 8002ec8:	40020470 	.word	0x40020470
 8002ecc:	40020488 	.word	0x40020488
 8002ed0:	400204a0 	.word	0x400204a0
 8002ed4:	400204b8 	.word	0x400204b8
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8087 	beq.w	8003000 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2220      	movs	r2, #32
 8002efc:	409a      	lsls	r2, r3
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d139      	bne.n	8002f82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0216 	bic.w	r2, r2, #22
 8002f1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_DMA_IRQHandler+0x736>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0208 	bic.w	r2, r2, #8
 8002f4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	223f      	movs	r2, #63	@ 0x3f
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 834a 	beq.w	800360c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
          }
          return;
 8002f80:	e344      	b.n	800360c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02c      	beq.n	8003000 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
 8002fae:	e027      	b.n	8003000 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d023      	beq.n	8003000 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
 8002fc0:	e01e      	b.n	8003000 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10f      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0210 	bic.w	r2, r2, #16
 8002fde:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8306 	beq.w	8003616 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8088 	beq.w	8003128 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2204      	movs	r2, #4
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a7a      	ldr	r2, [pc, #488]	@ (8003210 <HAL_DMA_IRQHandler+0xa08>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d04a      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a79      	ldr	r2, [pc, #484]	@ (8003214 <HAL_DMA_IRQHandler+0xa0c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d045      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a77      	ldr	r2, [pc, #476]	@ (8003218 <HAL_DMA_IRQHandler+0xa10>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d040      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a76      	ldr	r2, [pc, #472]	@ (800321c <HAL_DMA_IRQHandler+0xa14>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d03b      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a74      	ldr	r2, [pc, #464]	@ (8003220 <HAL_DMA_IRQHandler+0xa18>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d036      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a73      	ldr	r2, [pc, #460]	@ (8003224 <HAL_DMA_IRQHandler+0xa1c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d031      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a71      	ldr	r2, [pc, #452]	@ (8003228 <HAL_DMA_IRQHandler+0xa20>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02c      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a70      	ldr	r2, [pc, #448]	@ (800322c <HAL_DMA_IRQHandler+0xa24>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d027      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6e      	ldr	r2, [pc, #440]	@ (8003230 <HAL_DMA_IRQHandler+0xa28>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d022      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6d      	ldr	r2, [pc, #436]	@ (8003234 <HAL_DMA_IRQHandler+0xa2c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d01d      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a6b      	ldr	r2, [pc, #428]	@ (8003238 <HAL_DMA_IRQHandler+0xa30>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6a      	ldr	r2, [pc, #424]	@ (800323c <HAL_DMA_IRQHandler+0xa34>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a68      	ldr	r2, [pc, #416]	@ (8003240 <HAL_DMA_IRQHandler+0xa38>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a67      	ldr	r2, [pc, #412]	@ (8003244 <HAL_DMA_IRQHandler+0xa3c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a65      	ldr	r2, [pc, #404]	@ (8003248 <HAL_DMA_IRQHandler+0xa40>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x8b8>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a64      	ldr	r2, [pc, #400]	@ (800324c <HAL_DMA_IRQHandler+0xa44>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d108      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x8ca>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e007      	b.n	80030e2 <HAL_DMA_IRQHandler+0x8da>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d307      	bcc.n	80030fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f2      	bne.n	80030e2 <HAL_DMA_IRQHandler+0x8da>
 80030fc:	e000      	b.n	8003100 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80030fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003116:	e003      	b.n	8003120 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8272 	beq.w	8003616 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	e26c      	b.n	8003616 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a43      	ldr	r2, [pc, #268]	@ (8003250 <HAL_DMA_IRQHandler+0xa48>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d022      	beq.n	800318c <HAL_DMA_IRQHandler+0x984>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a42      	ldr	r2, [pc, #264]	@ (8003254 <HAL_DMA_IRQHandler+0xa4c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d01d      	beq.n	800318c <HAL_DMA_IRQHandler+0x984>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a40      	ldr	r2, [pc, #256]	@ (8003258 <HAL_DMA_IRQHandler+0xa50>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d018      	beq.n	800318c <HAL_DMA_IRQHandler+0x984>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3f      	ldr	r2, [pc, #252]	@ (800325c <HAL_DMA_IRQHandler+0xa54>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d013      	beq.n	800318c <HAL_DMA_IRQHandler+0x984>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a3d      	ldr	r2, [pc, #244]	@ (8003260 <HAL_DMA_IRQHandler+0xa58>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00e      	beq.n	800318c <HAL_DMA_IRQHandler+0x984>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a3c      	ldr	r2, [pc, #240]	@ (8003264 <HAL_DMA_IRQHandler+0xa5c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d009      	beq.n	800318c <HAL_DMA_IRQHandler+0x984>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a3a      	ldr	r2, [pc, #232]	@ (8003268 <HAL_DMA_IRQHandler+0xa60>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_DMA_IRQHandler+0x984>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a39      	ldr	r2, [pc, #228]	@ (800326c <HAL_DMA_IRQHandler+0xa64>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_DMA_IRQHandler+0x988>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_DMA_IRQHandler+0x98a>
 8003190:	2300      	movs	r3, #0
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 823f 	beq.w	8003616 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2204      	movs	r2, #4
 80031aa:	409a      	lsls	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80cd 	beq.w	8003350 <HAL_DMA_IRQHandler+0xb48>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80c7 	beq.w	8003350 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2204      	movs	r2, #4
 80031cc:	409a      	lsls	r2, r3
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d049      	beq.n	8003270 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8210 	beq.w	8003610 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031f8:	e20a      	b.n	8003610 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8206 	beq.w	8003610 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800320c:	e200      	b.n	8003610 <HAL_DMA_IRQHandler+0xe08>
 800320e:	bf00      	nop
 8003210:	40020010 	.word	0x40020010
 8003214:	40020028 	.word	0x40020028
 8003218:	40020040 	.word	0x40020040
 800321c:	40020058 	.word	0x40020058
 8003220:	40020070 	.word	0x40020070
 8003224:	40020088 	.word	0x40020088
 8003228:	400200a0 	.word	0x400200a0
 800322c:	400200b8 	.word	0x400200b8
 8003230:	40020410 	.word	0x40020410
 8003234:	40020428 	.word	0x40020428
 8003238:	40020440 	.word	0x40020440
 800323c:	40020458 	.word	0x40020458
 8003240:	40020470 	.word	0x40020470
 8003244:	40020488 	.word	0x40020488
 8003248:	400204a0 	.word	0x400204a0
 800324c:	400204b8 	.word	0x400204b8
 8003250:	58025408 	.word	0x58025408
 8003254:	5802541c 	.word	0x5802541c
 8003258:	58025430 	.word	0x58025430
 800325c:	58025444 	.word	0x58025444
 8003260:	58025458 	.word	0x58025458
 8003264:	5802546c 	.word	0x5802546c
 8003268:	58025480 	.word	0x58025480
 800326c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	d160      	bne.n	800333c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a7f      	ldr	r2, [pc, #508]	@ (800347c <HAL_DMA_IRQHandler+0xc74>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d04a      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a7d      	ldr	r2, [pc, #500]	@ (8003480 <HAL_DMA_IRQHandler+0xc78>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d045      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7c      	ldr	r2, [pc, #496]	@ (8003484 <HAL_DMA_IRQHandler+0xc7c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d040      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a7a      	ldr	r2, [pc, #488]	@ (8003488 <HAL_DMA_IRQHandler+0xc80>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d03b      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a79      	ldr	r2, [pc, #484]	@ (800348c <HAL_DMA_IRQHandler+0xc84>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d036      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a77      	ldr	r2, [pc, #476]	@ (8003490 <HAL_DMA_IRQHandler+0xc88>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d031      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a76      	ldr	r2, [pc, #472]	@ (8003494 <HAL_DMA_IRQHandler+0xc8c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d02c      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a74      	ldr	r2, [pc, #464]	@ (8003498 <HAL_DMA_IRQHandler+0xc90>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d027      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a73      	ldr	r2, [pc, #460]	@ (800349c <HAL_DMA_IRQHandler+0xc94>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a71      	ldr	r2, [pc, #452]	@ (80034a0 <HAL_DMA_IRQHandler+0xc98>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01d      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a70      	ldr	r2, [pc, #448]	@ (80034a4 <HAL_DMA_IRQHandler+0xc9c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d018      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a6e      	ldr	r2, [pc, #440]	@ (80034a8 <HAL_DMA_IRQHandler+0xca0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6d      	ldr	r2, [pc, #436]	@ (80034ac <HAL_DMA_IRQHandler+0xca4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6b      	ldr	r2, [pc, #428]	@ (80034b0 <HAL_DMA_IRQHandler+0xca8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a6a      	ldr	r2, [pc, #424]	@ (80034b4 <HAL_DMA_IRQHandler+0xcac>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_DMA_IRQHandler+0xb12>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a68      	ldr	r2, [pc, #416]	@ (80034b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d108      	bne.n	800332c <HAL_DMA_IRQHandler+0xb24>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0208 	bic.w	r2, r2, #8
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e007      	b.n	800333c <HAL_DMA_IRQHandler+0xb34>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0204 	bic.w	r2, r2, #4
 800333a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8165 	beq.w	8003610 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800334e:	e15f      	b.n	8003610 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2202      	movs	r2, #2
 800335a:	409a      	lsls	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80c5 	beq.w	80034f0 <HAL_DMA_IRQHandler+0xce8>
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80bf 	beq.w	80034f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2202      	movs	r2, #2
 800337c:	409a      	lsls	r2, r3
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d018      	beq.n	80033be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 813a 	beq.w	8003614 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033a8:	e134      	b.n	8003614 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8130 	beq.w	8003614 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033bc:	e12a      	b.n	8003614 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 8089 	bne.w	80034dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2b      	ldr	r2, [pc, #172]	@ (800347c <HAL_DMA_IRQHandler+0xc74>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d04a      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a29      	ldr	r2, [pc, #164]	@ (8003480 <HAL_DMA_IRQHandler+0xc78>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d045      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a28      	ldr	r2, [pc, #160]	@ (8003484 <HAL_DMA_IRQHandler+0xc7c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d040      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a26      	ldr	r2, [pc, #152]	@ (8003488 <HAL_DMA_IRQHandler+0xc80>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d03b      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a25      	ldr	r2, [pc, #148]	@ (800348c <HAL_DMA_IRQHandler+0xc84>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d036      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a23      	ldr	r2, [pc, #140]	@ (8003490 <HAL_DMA_IRQHandler+0xc88>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d031      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a22      	ldr	r2, [pc, #136]	@ (8003494 <HAL_DMA_IRQHandler+0xc8c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d02c      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a20      	ldr	r2, [pc, #128]	@ (8003498 <HAL_DMA_IRQHandler+0xc90>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d027      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1f      	ldr	r2, [pc, #124]	@ (800349c <HAL_DMA_IRQHandler+0xc94>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d022      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1d      	ldr	r2, [pc, #116]	@ (80034a0 <HAL_DMA_IRQHandler+0xc98>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01d      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <HAL_DMA_IRQHandler+0xc9c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d018      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <HAL_DMA_IRQHandler+0xca0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a19      	ldr	r2, [pc, #100]	@ (80034ac <HAL_DMA_IRQHandler+0xca4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a17      	ldr	r2, [pc, #92]	@ (80034b0 <HAL_DMA_IRQHandler+0xca8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a16      	ldr	r2, [pc, #88]	@ (80034b4 <HAL_DMA_IRQHandler+0xcac>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_DMA_IRQHandler+0xc62>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a14      	ldr	r2, [pc, #80]	@ (80034b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d128      	bne.n	80034bc <HAL_DMA_IRQHandler+0xcb4>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0214 	bic.w	r2, r2, #20
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e027      	b.n	80034cc <HAL_DMA_IRQHandler+0xcc4>
 800347c:	40020010 	.word	0x40020010
 8003480:	40020028 	.word	0x40020028
 8003484:	40020040 	.word	0x40020040
 8003488:	40020058 	.word	0x40020058
 800348c:	40020070 	.word	0x40020070
 8003490:	40020088 	.word	0x40020088
 8003494:	400200a0 	.word	0x400200a0
 8003498:	400200b8 	.word	0x400200b8
 800349c:	40020410 	.word	0x40020410
 80034a0:	40020428 	.word	0x40020428
 80034a4:	40020440 	.word	0x40020440
 80034a8:	40020458 	.word	0x40020458
 80034ac:	40020470 	.word	0x40020470
 80034b0:	40020488 	.word	0x40020488
 80034b4:	400204a0 	.word	0x400204a0
 80034b8:	400204b8 	.word	0x400204b8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 020a 	bic.w	r2, r2, #10
 80034ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8097 	beq.w	8003614 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ee:	e091      	b.n	8003614 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2208      	movs	r2, #8
 80034fa:	409a      	lsls	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8088 	beq.w	8003616 <HAL_DMA_IRQHandler+0xe0e>
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8082 	beq.w	8003616 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a41      	ldr	r2, [pc, #260]	@ (800361c <HAL_DMA_IRQHandler+0xe14>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d04a      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a3f      	ldr	r2, [pc, #252]	@ (8003620 <HAL_DMA_IRQHandler+0xe18>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d045      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a3e      	ldr	r2, [pc, #248]	@ (8003624 <HAL_DMA_IRQHandler+0xe1c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d040      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a3c      	ldr	r2, [pc, #240]	@ (8003628 <HAL_DMA_IRQHandler+0xe20>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d03b      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a3b      	ldr	r2, [pc, #236]	@ (800362c <HAL_DMA_IRQHandler+0xe24>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d036      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a39      	ldr	r2, [pc, #228]	@ (8003630 <HAL_DMA_IRQHandler+0xe28>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d031      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a38      	ldr	r2, [pc, #224]	@ (8003634 <HAL_DMA_IRQHandler+0xe2c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d02c      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a36      	ldr	r2, [pc, #216]	@ (8003638 <HAL_DMA_IRQHandler+0xe30>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d027      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a35      	ldr	r2, [pc, #212]	@ (800363c <HAL_DMA_IRQHandler+0xe34>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d022      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a33      	ldr	r2, [pc, #204]	@ (8003640 <HAL_DMA_IRQHandler+0xe38>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01d      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a32      	ldr	r2, [pc, #200]	@ (8003644 <HAL_DMA_IRQHandler+0xe3c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d018      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a30      	ldr	r2, [pc, #192]	@ (8003648 <HAL_DMA_IRQHandler+0xe40>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2f      	ldr	r2, [pc, #188]	@ (800364c <HAL_DMA_IRQHandler+0xe44>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00e      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2d      	ldr	r2, [pc, #180]	@ (8003650 <HAL_DMA_IRQHandler+0xe48>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d009      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003654 <HAL_DMA_IRQHandler+0xe4c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d004      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xdaa>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003658 <HAL_DMA_IRQHandler+0xe50>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d108      	bne.n	80035c4 <HAL_DMA_IRQHandler+0xdbc>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 021c 	bic.w	r2, r2, #28
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e007      	b.n	80035d4 <HAL_DMA_IRQHandler+0xdcc>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 020e 	bic.w	r2, r2, #14
 80035d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2201      	movs	r2, #1
 80035de:	409a      	lsls	r2, r3
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
 800360a:	e004      	b.n	8003616 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800360c:	bf00      	nop
 800360e:	e002      	b.n	8003616 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003610:	bf00      	nop
 8003612:	e000      	b.n	8003616 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003614:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003616:	3728      	adds	r7, #40	@ 0x28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40020010 	.word	0x40020010
 8003620:	40020028 	.word	0x40020028
 8003624:	40020040 	.word	0x40020040
 8003628:	40020058 	.word	0x40020058
 800362c:	40020070 	.word	0x40020070
 8003630:	40020088 	.word	0x40020088
 8003634:	400200a0 	.word	0x400200a0
 8003638:	400200b8 	.word	0x400200b8
 800363c:	40020410 	.word	0x40020410
 8003640:	40020428 	.word	0x40020428
 8003644:	40020440 	.word	0x40020440
 8003648:	40020458 	.word	0x40020458
 800364c:	40020470 	.word	0x40020470
 8003650:	40020488 	.word	0x40020488
 8003654:	400204a0 	.word	0x400204a0
 8003658:	400204b8 	.word	0x400204b8

0800365c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a7f      	ldr	r2, [pc, #508]	@ (8003890 <DMA_SetConfig+0x21c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d072      	beq.n	800377e <DMA_SetConfig+0x10a>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a7d      	ldr	r2, [pc, #500]	@ (8003894 <DMA_SetConfig+0x220>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d06d      	beq.n	800377e <DMA_SetConfig+0x10a>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003898 <DMA_SetConfig+0x224>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d068      	beq.n	800377e <DMA_SetConfig+0x10a>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7a      	ldr	r2, [pc, #488]	@ (800389c <DMA_SetConfig+0x228>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d063      	beq.n	800377e <DMA_SetConfig+0x10a>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a79      	ldr	r2, [pc, #484]	@ (80038a0 <DMA_SetConfig+0x22c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d05e      	beq.n	800377e <DMA_SetConfig+0x10a>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a77      	ldr	r2, [pc, #476]	@ (80038a4 <DMA_SetConfig+0x230>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d059      	beq.n	800377e <DMA_SetConfig+0x10a>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a76      	ldr	r2, [pc, #472]	@ (80038a8 <DMA_SetConfig+0x234>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d054      	beq.n	800377e <DMA_SetConfig+0x10a>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a74      	ldr	r2, [pc, #464]	@ (80038ac <DMA_SetConfig+0x238>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d04f      	beq.n	800377e <DMA_SetConfig+0x10a>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a73      	ldr	r2, [pc, #460]	@ (80038b0 <DMA_SetConfig+0x23c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d04a      	beq.n	800377e <DMA_SetConfig+0x10a>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a71      	ldr	r2, [pc, #452]	@ (80038b4 <DMA_SetConfig+0x240>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d045      	beq.n	800377e <DMA_SetConfig+0x10a>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a70      	ldr	r2, [pc, #448]	@ (80038b8 <DMA_SetConfig+0x244>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d040      	beq.n	800377e <DMA_SetConfig+0x10a>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a6e      	ldr	r2, [pc, #440]	@ (80038bc <DMA_SetConfig+0x248>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d03b      	beq.n	800377e <DMA_SetConfig+0x10a>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6d      	ldr	r2, [pc, #436]	@ (80038c0 <DMA_SetConfig+0x24c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d036      	beq.n	800377e <DMA_SetConfig+0x10a>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a6b      	ldr	r2, [pc, #428]	@ (80038c4 <DMA_SetConfig+0x250>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d031      	beq.n	800377e <DMA_SetConfig+0x10a>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a6a      	ldr	r2, [pc, #424]	@ (80038c8 <DMA_SetConfig+0x254>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d02c      	beq.n	800377e <DMA_SetConfig+0x10a>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a68      	ldr	r2, [pc, #416]	@ (80038cc <DMA_SetConfig+0x258>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d027      	beq.n	800377e <DMA_SetConfig+0x10a>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a67      	ldr	r2, [pc, #412]	@ (80038d0 <DMA_SetConfig+0x25c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <DMA_SetConfig+0x10a>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a65      	ldr	r2, [pc, #404]	@ (80038d4 <DMA_SetConfig+0x260>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01d      	beq.n	800377e <DMA_SetConfig+0x10a>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a64      	ldr	r2, [pc, #400]	@ (80038d8 <DMA_SetConfig+0x264>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <DMA_SetConfig+0x10a>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a62      	ldr	r2, [pc, #392]	@ (80038dc <DMA_SetConfig+0x268>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <DMA_SetConfig+0x10a>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a61      	ldr	r2, [pc, #388]	@ (80038e0 <DMA_SetConfig+0x26c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <DMA_SetConfig+0x10a>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a5f      	ldr	r2, [pc, #380]	@ (80038e4 <DMA_SetConfig+0x270>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <DMA_SetConfig+0x10a>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a5e      	ldr	r2, [pc, #376]	@ (80038e8 <DMA_SetConfig+0x274>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <DMA_SetConfig+0x10a>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5c      	ldr	r2, [pc, #368]	@ (80038ec <DMA_SetConfig+0x278>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <DMA_SetConfig+0x10e>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <DMA_SetConfig+0x110>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003790:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a39      	ldr	r2, [pc, #228]	@ (8003890 <DMA_SetConfig+0x21c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d04a      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a38      	ldr	r2, [pc, #224]	@ (8003894 <DMA_SetConfig+0x220>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d045      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a36      	ldr	r2, [pc, #216]	@ (8003898 <DMA_SetConfig+0x224>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d040      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a35      	ldr	r2, [pc, #212]	@ (800389c <DMA_SetConfig+0x228>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d03b      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a33      	ldr	r2, [pc, #204]	@ (80038a0 <DMA_SetConfig+0x22c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d036      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a32      	ldr	r2, [pc, #200]	@ (80038a4 <DMA_SetConfig+0x230>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d031      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a30      	ldr	r2, [pc, #192]	@ (80038a8 <DMA_SetConfig+0x234>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d02c      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2f      	ldr	r2, [pc, #188]	@ (80038ac <DMA_SetConfig+0x238>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d027      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2d      	ldr	r2, [pc, #180]	@ (80038b0 <DMA_SetConfig+0x23c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d022      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2c      	ldr	r2, [pc, #176]	@ (80038b4 <DMA_SetConfig+0x240>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d01d      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2a      	ldr	r2, [pc, #168]	@ (80038b8 <DMA_SetConfig+0x244>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d018      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a29      	ldr	r2, [pc, #164]	@ (80038bc <DMA_SetConfig+0x248>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a27      	ldr	r2, [pc, #156]	@ (80038c0 <DMA_SetConfig+0x24c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a26      	ldr	r2, [pc, #152]	@ (80038c4 <DMA_SetConfig+0x250>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a24      	ldr	r2, [pc, #144]	@ (80038c8 <DMA_SetConfig+0x254>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <DMA_SetConfig+0x1d0>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a23      	ldr	r2, [pc, #140]	@ (80038cc <DMA_SetConfig+0x258>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <DMA_SetConfig+0x1d4>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <DMA_SetConfig+0x1d6>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d059      	beq.n	8003902 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	223f      	movs	r2, #63	@ 0x3f
 8003858:	409a      	lsls	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800386c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b40      	cmp	r3, #64	@ 0x40
 800387c:	d138      	bne.n	80038f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800388e:	e086      	b.n	800399e <DMA_SetConfig+0x32a>
 8003890:	40020010 	.word	0x40020010
 8003894:	40020028 	.word	0x40020028
 8003898:	40020040 	.word	0x40020040
 800389c:	40020058 	.word	0x40020058
 80038a0:	40020070 	.word	0x40020070
 80038a4:	40020088 	.word	0x40020088
 80038a8:	400200a0 	.word	0x400200a0
 80038ac:	400200b8 	.word	0x400200b8
 80038b0:	40020410 	.word	0x40020410
 80038b4:	40020428 	.word	0x40020428
 80038b8:	40020440 	.word	0x40020440
 80038bc:	40020458 	.word	0x40020458
 80038c0:	40020470 	.word	0x40020470
 80038c4:	40020488 	.word	0x40020488
 80038c8:	400204a0 	.word	0x400204a0
 80038cc:	400204b8 	.word	0x400204b8
 80038d0:	58025408 	.word	0x58025408
 80038d4:	5802541c 	.word	0x5802541c
 80038d8:	58025430 	.word	0x58025430
 80038dc:	58025444 	.word	0x58025444
 80038e0:	58025458 	.word	0x58025458
 80038e4:	5802546c 	.word	0x5802546c
 80038e8:	58025480 	.word	0x58025480
 80038ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	60da      	str	r2, [r3, #12]
}
 8003900:	e04d      	b.n	800399e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a29      	ldr	r2, [pc, #164]	@ (80039ac <DMA_SetConfig+0x338>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d022      	beq.n	8003952 <DMA_SetConfig+0x2de>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a27      	ldr	r2, [pc, #156]	@ (80039b0 <DMA_SetConfig+0x33c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01d      	beq.n	8003952 <DMA_SetConfig+0x2de>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a26      	ldr	r2, [pc, #152]	@ (80039b4 <DMA_SetConfig+0x340>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d018      	beq.n	8003952 <DMA_SetConfig+0x2de>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a24      	ldr	r2, [pc, #144]	@ (80039b8 <DMA_SetConfig+0x344>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <DMA_SetConfig+0x2de>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a23      	ldr	r2, [pc, #140]	@ (80039bc <DMA_SetConfig+0x348>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <DMA_SetConfig+0x2de>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a21      	ldr	r2, [pc, #132]	@ (80039c0 <DMA_SetConfig+0x34c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d009      	beq.n	8003952 <DMA_SetConfig+0x2de>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a20      	ldr	r2, [pc, #128]	@ (80039c4 <DMA_SetConfig+0x350>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <DMA_SetConfig+0x2de>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1e      	ldr	r2, [pc, #120]	@ (80039c8 <DMA_SetConfig+0x354>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <DMA_SetConfig+0x2e2>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <DMA_SetConfig+0x2e4>
 8003956:	2300      	movs	r3, #0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	2201      	movs	r2, #1
 8003966:	409a      	lsls	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b40      	cmp	r3, #64	@ 0x40
 800397a:	d108      	bne.n	800398e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	60da      	str	r2, [r3, #12]
}
 800398c:	e007      	b.n	800399e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	60da      	str	r2, [r3, #12]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	58025408 	.word	0x58025408
 80039b0:	5802541c 	.word	0x5802541c
 80039b4:	58025430 	.word	0x58025430
 80039b8:	58025444 	.word	0x58025444
 80039bc:	58025458 	.word	0x58025458
 80039c0:	5802546c 	.word	0x5802546c
 80039c4:	58025480 	.word	0x58025480
 80039c8:	58025494 	.word	0x58025494

080039cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a42      	ldr	r2, [pc, #264]	@ (8003ae4 <DMA_CalcBaseAndBitshift+0x118>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d04a      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a41      	ldr	r2, [pc, #260]	@ (8003ae8 <DMA_CalcBaseAndBitshift+0x11c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d045      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a3f      	ldr	r2, [pc, #252]	@ (8003aec <DMA_CalcBaseAndBitshift+0x120>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d040      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a3e      	ldr	r2, [pc, #248]	@ (8003af0 <DMA_CalcBaseAndBitshift+0x124>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d03b      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a3c      	ldr	r2, [pc, #240]	@ (8003af4 <DMA_CalcBaseAndBitshift+0x128>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d036      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003af8 <DMA_CalcBaseAndBitshift+0x12c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d031      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a39      	ldr	r2, [pc, #228]	@ (8003afc <DMA_CalcBaseAndBitshift+0x130>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d02c      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a38      	ldr	r2, [pc, #224]	@ (8003b00 <DMA_CalcBaseAndBitshift+0x134>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d027      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a36      	ldr	r2, [pc, #216]	@ (8003b04 <DMA_CalcBaseAndBitshift+0x138>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d022      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a35      	ldr	r2, [pc, #212]	@ (8003b08 <DMA_CalcBaseAndBitshift+0x13c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d01d      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a33      	ldr	r2, [pc, #204]	@ (8003b0c <DMA_CalcBaseAndBitshift+0x140>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d018      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a32      	ldr	r2, [pc, #200]	@ (8003b10 <DMA_CalcBaseAndBitshift+0x144>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a30      	ldr	r2, [pc, #192]	@ (8003b14 <DMA_CalcBaseAndBitshift+0x148>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00e      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003b18 <DMA_CalcBaseAndBitshift+0x14c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d009      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a2d      	ldr	r2, [pc, #180]	@ (8003b1c <DMA_CalcBaseAndBitshift+0x150>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <DMA_CalcBaseAndBitshift+0xa8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b20 <DMA_CalcBaseAndBitshift+0x154>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <DMA_CalcBaseAndBitshift+0xac>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <DMA_CalcBaseAndBitshift+0xae>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d024      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	3b10      	subs	r3, #16
 8003a86:	4a27      	ldr	r2, [pc, #156]	@ (8003b24 <DMA_CalcBaseAndBitshift+0x158>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	4a24      	ldr	r2, [pc, #144]	@ (8003b28 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a98:	5cd3      	ldrb	r3, [r2, r3]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d908      	bls.n	8003ab8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4b1f      	ldr	r3, [pc, #124]	@ (8003b2c <DMA_CalcBaseAndBitshift+0x160>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	1d1a      	adds	r2, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ab6:	e00d      	b.n	8003ad4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b1b      	ldr	r3, [pc, #108]	@ (8003b2c <DMA_CalcBaseAndBitshift+0x160>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ac6:	e005      	b.n	8003ad4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40020010 	.word	0x40020010
 8003ae8:	40020028 	.word	0x40020028
 8003aec:	40020040 	.word	0x40020040
 8003af0:	40020058 	.word	0x40020058
 8003af4:	40020070 	.word	0x40020070
 8003af8:	40020088 	.word	0x40020088
 8003afc:	400200a0 	.word	0x400200a0
 8003b00:	400200b8 	.word	0x400200b8
 8003b04:	40020410 	.word	0x40020410
 8003b08:	40020428 	.word	0x40020428
 8003b0c:	40020440 	.word	0x40020440
 8003b10:	40020458 	.word	0x40020458
 8003b14:	40020470 	.word	0x40020470
 8003b18:	40020488 	.word	0x40020488
 8003b1c:	400204a0 	.word	0x400204a0
 8003b20:	400204b8 	.word	0x400204b8
 8003b24:	aaaaaaab 	.word	0xaaaaaaab
 8003b28:	0800b3dc 	.word	0x0800b3dc
 8003b2c:	fffffc00 	.word	0xfffffc00

08003b30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d120      	bne.n	8003b86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d858      	bhi.n	8003bfe <DMA_CheckFifoParam+0xce>
 8003b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b54 <DMA_CheckFifoParam+0x24>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b65 	.word	0x08003b65
 8003b58:	08003b77 	.word	0x08003b77
 8003b5c:	08003b65 	.word	0x08003b65
 8003b60:	08003bff 	.word	0x08003bff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d048      	beq.n	8003c02 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b74:	e045      	b.n	8003c02 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b7e:	d142      	bne.n	8003c06 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b84:	e03f      	b.n	8003c06 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b8e:	d123      	bne.n	8003bd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d838      	bhi.n	8003c0a <DMA_CheckFifoParam+0xda>
 8003b98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba0 <DMA_CheckFifoParam+0x70>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bb1 	.word	0x08003bb1
 8003ba4:	08003bb7 	.word	0x08003bb7
 8003ba8:	08003bb1 	.word	0x08003bb1
 8003bac:	08003bc9 	.word	0x08003bc9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
        break;
 8003bb4:	e030      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d025      	beq.n	8003c0e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bc6:	e022      	b.n	8003c0e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bd0:	d11f      	bne.n	8003c12 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bd6:	e01c      	b.n	8003c12 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d902      	bls.n	8003be6 <DMA_CheckFifoParam+0xb6>
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d003      	beq.n	8003bec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003be4:	e018      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
        break;
 8003bea:	e015      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00e      	beq.n	8003c16 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8003bfc:	e00b      	b.n	8003c16 <DMA_CheckFifoParam+0xe6>
        break;
 8003bfe:	bf00      	nop
 8003c00:	e00a      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
        break;
 8003c02:	bf00      	nop
 8003c04:	e008      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
        break;
 8003c06:	bf00      	nop
 8003c08:	e006      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
        break;
 8003c0a:	bf00      	nop
 8003c0c:	e004      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
        break;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
        break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
    break;
 8003c16:	bf00      	nop
    }
  }

  return status;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop

08003c28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a38      	ldr	r2, [pc, #224]	@ (8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d022      	beq.n	8003c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a36      	ldr	r2, [pc, #216]	@ (8003d20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01d      	beq.n	8003c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a35      	ldr	r2, [pc, #212]	@ (8003d24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d018      	beq.n	8003c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a33      	ldr	r2, [pc, #204]	@ (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a32      	ldr	r2, [pc, #200]	@ (8003d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00e      	beq.n	8003c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a30      	ldr	r2, [pc, #192]	@ (8003d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d009      	beq.n	8003c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2f      	ldr	r2, [pc, #188]	@ (8003d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d004      	beq.n	8003c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2d      	ldr	r2, [pc, #180]	@ (8003d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01a      	beq.n	8003cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	3b08      	subs	r3, #8
 8003c98:	4a28      	ldr	r2, [pc, #160]	@ (8003d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4b26      	ldr	r3, [pc, #152]	@ (8003d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	461a      	mov	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a24      	ldr	r2, [pc, #144]	@ (8003d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003cb4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003cc4:	e024      	b.n	8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	3b10      	subs	r3, #16
 8003cce:	4a1e      	ldr	r2, [pc, #120]	@ (8003d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4a1c      	ldr	r2, [pc, #112]	@ (8003d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d806      	bhi.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d902      	bls.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3308      	adds	r3, #8
 8003cec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4b18      	ldr	r3, [pc, #96]	@ (8003d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a16      	ldr	r2, [pc, #88]	@ (8003d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003d00:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2201      	movs	r2, #1
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	58025408 	.word	0x58025408
 8003d20:	5802541c 	.word	0x5802541c
 8003d24:	58025430 	.word	0x58025430
 8003d28:	58025444 	.word	0x58025444
 8003d2c:	58025458 	.word	0x58025458
 8003d30:	5802546c 	.word	0x5802546c
 8003d34:	58025480 	.word	0x58025480
 8003d38:	58025494 	.word	0x58025494
 8003d3c:	cccccccd 	.word	0xcccccccd
 8003d40:	16009600 	.word	0x16009600
 8003d44:	58025880 	.word	0x58025880
 8003d48:	aaaaaaab 	.word	0xaaaaaaab
 8003d4c:	400204b8 	.word	0x400204b8
 8003d50:	4002040f 	.word	0x4002040f
 8003d54:	10008200 	.word	0x10008200
 8003d58:	40020880 	.word	0x40020880

08003d5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d04a      	beq.n	8003e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d847      	bhi.n	8003e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a25      	ldr	r2, [pc, #148]	@ (8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d022      	beq.n	8003dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a24      	ldr	r2, [pc, #144]	@ (8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01d      	beq.n	8003dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a22      	ldr	r2, [pc, #136]	@ (8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d018      	beq.n	8003dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a21      	ldr	r2, [pc, #132]	@ (8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00e      	beq.n	8003dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1e      	ldr	r2, [pc, #120]	@ (8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4b17      	ldr	r3, [pc, #92]	@ (8003e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	461a      	mov	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a15      	ldr	r2, [pc, #84]	@ (8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003de4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003de6:	e009      	b.n	8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4b14      	ldr	r3, [pc, #80]	@ (8003e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	461a      	mov	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a11      	ldr	r2, [pc, #68]	@ (8003e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003dfa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	2201      	movs	r2, #1
 8003e02:	409a      	lsls	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	58025408 	.word	0x58025408
 8003e18:	5802541c 	.word	0x5802541c
 8003e1c:	58025430 	.word	0x58025430
 8003e20:	58025444 	.word	0x58025444
 8003e24:	58025458 	.word	0x58025458
 8003e28:	5802546c 	.word	0x5802546c
 8003e2c:	58025480 	.word	0x58025480
 8003e30:	58025494 	.word	0x58025494
 8003e34:	1600963f 	.word	0x1600963f
 8003e38:	58025940 	.word	0x58025940
 8003e3c:	1000823f 	.word	0x1000823f
 8003e40:	40020940 	.word	0x40020940

08003e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b089      	sub	sp, #36	@ 0x24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e52:	4b89      	ldr	r3, [pc, #548]	@ (8004078 <HAL_GPIO_Init+0x234>)
 8003e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e56:	e194      	b.n	8004182 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8186 	beq.w	800417c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d005      	beq.n	8003e88 <HAL_GPIO_Init+0x44>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d130      	bne.n	8003eea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	2203      	movs	r2, #3
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f003 0201 	and.w	r2, r3, #1
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d017      	beq.n	8003f26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	2203      	movs	r2, #3
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d123      	bne.n	8003f7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	08da      	lsrs	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3208      	adds	r2, #8
 8003f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	220f      	movs	r2, #15
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	08da      	lsrs	r2, r3, #3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3208      	adds	r2, #8
 8003f74:	69b9      	ldr	r1, [r7, #24]
 8003f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	2203      	movs	r2, #3
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0203 	and.w	r2, r3, #3
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80e0 	beq.w	800417c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800407c <HAL_GPIO_Init+0x238>)
 8003fbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800407c <HAL_GPIO_Init+0x238>)
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <HAL_GPIO_Init+0x238>)
 8003fce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fda:	4a29      	ldr	r2, [pc, #164]	@ (8004080 <HAL_GPIO_Init+0x23c>)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	220f      	movs	r2, #15
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a20      	ldr	r2, [pc, #128]	@ (8004084 <HAL_GPIO_Init+0x240>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d052      	beq.n	80040ac <HAL_GPIO_Init+0x268>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1f      	ldr	r2, [pc, #124]	@ (8004088 <HAL_GPIO_Init+0x244>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d031      	beq.n	8004072 <HAL_GPIO_Init+0x22e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1e      	ldr	r2, [pc, #120]	@ (800408c <HAL_GPIO_Init+0x248>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d02b      	beq.n	800406e <HAL_GPIO_Init+0x22a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1d      	ldr	r2, [pc, #116]	@ (8004090 <HAL_GPIO_Init+0x24c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d025      	beq.n	800406a <HAL_GPIO_Init+0x226>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1c      	ldr	r2, [pc, #112]	@ (8004094 <HAL_GPIO_Init+0x250>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01f      	beq.n	8004066 <HAL_GPIO_Init+0x222>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1b      	ldr	r2, [pc, #108]	@ (8004098 <HAL_GPIO_Init+0x254>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d019      	beq.n	8004062 <HAL_GPIO_Init+0x21e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a1a      	ldr	r2, [pc, #104]	@ (800409c <HAL_GPIO_Init+0x258>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_GPIO_Init+0x21a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a19      	ldr	r2, [pc, #100]	@ (80040a0 <HAL_GPIO_Init+0x25c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00d      	beq.n	800405a <HAL_GPIO_Init+0x216>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a18      	ldr	r2, [pc, #96]	@ (80040a4 <HAL_GPIO_Init+0x260>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <HAL_GPIO_Init+0x212>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a17      	ldr	r2, [pc, #92]	@ (80040a8 <HAL_GPIO_Init+0x264>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <HAL_GPIO_Init+0x20e>
 800404e:	2309      	movs	r3, #9
 8004050:	e02d      	b.n	80040ae <HAL_GPIO_Init+0x26a>
 8004052:	230a      	movs	r3, #10
 8004054:	e02b      	b.n	80040ae <HAL_GPIO_Init+0x26a>
 8004056:	2308      	movs	r3, #8
 8004058:	e029      	b.n	80040ae <HAL_GPIO_Init+0x26a>
 800405a:	2307      	movs	r3, #7
 800405c:	e027      	b.n	80040ae <HAL_GPIO_Init+0x26a>
 800405e:	2306      	movs	r3, #6
 8004060:	e025      	b.n	80040ae <HAL_GPIO_Init+0x26a>
 8004062:	2305      	movs	r3, #5
 8004064:	e023      	b.n	80040ae <HAL_GPIO_Init+0x26a>
 8004066:	2304      	movs	r3, #4
 8004068:	e021      	b.n	80040ae <HAL_GPIO_Init+0x26a>
 800406a:	2303      	movs	r3, #3
 800406c:	e01f      	b.n	80040ae <HAL_GPIO_Init+0x26a>
 800406e:	2302      	movs	r3, #2
 8004070:	e01d      	b.n	80040ae <HAL_GPIO_Init+0x26a>
 8004072:	2301      	movs	r3, #1
 8004074:	e01b      	b.n	80040ae <HAL_GPIO_Init+0x26a>
 8004076:	bf00      	nop
 8004078:	58000080 	.word	0x58000080
 800407c:	58024400 	.word	0x58024400
 8004080:	58000400 	.word	0x58000400
 8004084:	58020000 	.word	0x58020000
 8004088:	58020400 	.word	0x58020400
 800408c:	58020800 	.word	0x58020800
 8004090:	58020c00 	.word	0x58020c00
 8004094:	58021000 	.word	0x58021000
 8004098:	58021400 	.word	0x58021400
 800409c:	58021800 	.word	0x58021800
 80040a0:	58021c00 	.word	0x58021c00
 80040a4:	58022000 	.word	0x58022000
 80040a8:	58022400 	.word	0x58022400
 80040ac:	2300      	movs	r3, #0
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	f002 0203 	and.w	r2, r2, #3
 80040b4:	0092      	lsls	r2, r2, #2
 80040b6:	4093      	lsls	r3, r2
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040be:	4938      	ldr	r1, [pc, #224]	@ (80041a0 <HAL_GPIO_Init+0x35c>)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	3302      	adds	r3, #2
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80040f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004120:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3301      	adds	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	f47f ae63 	bne.w	8003e58 <HAL_GPIO_Init+0x14>
  }
}
 8004192:	bf00      	nop
 8004194:	bf00      	nop
 8004196:	3724      	adds	r7, #36	@ 0x24
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	58000400 	.word	0x58000400

080041a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
 80041b0:	4613      	mov	r3, r2
 80041b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041b4:	787b      	ldrb	r3, [r7, #1]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ba:	887a      	ldrh	r2, [r7, #2]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80041c0:	e003      	b.n	80041ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	041a      	lsls	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	619a      	str	r2, [r3, #24]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80041dc:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a04      	ldr	r2, [pc, #16]	@ (80041f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	58024800 	.word	0x58024800

080041f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004200:	4b29      	ldr	r3, [pc, #164]	@ (80042a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	2b06      	cmp	r3, #6
 800420a:	d00a      	beq.n	8004222 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800420c:	4b26      	ldr	r3, [pc, #152]	@ (80042a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	429a      	cmp	r2, r3
 8004218:	d001      	beq.n	800421e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e040      	b.n	80042a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e03e      	b.n	80042a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004222:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800422a:	491f      	ldr	r1, [pc, #124]	@ (80042a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4313      	orrs	r3, r2
 8004230:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004232:	f7fc fe97 	bl	8000f64 <HAL_GetTick>
 8004236:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004238:	e009      	b.n	800424e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800423a:	f7fc fe93 	bl	8000f64 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004248:	d901      	bls.n	800424e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e028      	b.n	80042a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800424e:	4b16      	ldr	r3, [pc, #88]	@ (80042a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800425a:	d1ee      	bne.n	800423a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b1e      	cmp	r3, #30
 8004260:	d008      	beq.n	8004274 <HAL_PWREx_ConfigSupply+0x7c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b2e      	cmp	r3, #46	@ 0x2e
 8004266:	d005      	beq.n	8004274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b1d      	cmp	r3, #29
 800426c:	d002      	beq.n	8004274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b2d      	cmp	r3, #45	@ 0x2d
 8004272:	d114      	bne.n	800429e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004274:	f7fc fe76 	bl	8000f64 <HAL_GetTick>
 8004278:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800427a:	e009      	b.n	8004290 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800427c:	f7fc fe72 	bl	8000f64 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800428a:	d901      	bls.n	8004290 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e007      	b.n	80042a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004290:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800429c:	d1ee      	bne.n	800427c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	58024800 	.word	0x58024800

080042ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08c      	sub	sp, #48	@ 0x30
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f000 bc48 	b.w	8004b50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8088 	beq.w	80043de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ce:	4b99      	ldr	r3, [pc, #612]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042d8:	4b96      	ldr	r3, [pc, #600]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80042da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d007      	beq.n	80042f4 <HAL_RCC_OscConfig+0x48>
 80042e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e6:	2b18      	cmp	r3, #24
 80042e8:	d111      	bne.n	800430e <HAL_RCC_OscConfig+0x62>
 80042ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d10c      	bne.n	800430e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d06d      	beq.n	80043dc <HAL_RCC_OscConfig+0x130>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d169      	bne.n	80043dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f000 bc21 	b.w	8004b50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004316:	d106      	bne.n	8004326 <HAL_RCC_OscConfig+0x7a>
 8004318:	4b86      	ldr	r3, [pc, #536]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a85      	ldr	r2, [pc, #532]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800431e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e02e      	b.n	8004384 <HAL_RCC_OscConfig+0xd8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0x9c>
 800432e:	4b81      	ldr	r3, [pc, #516]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a80      	ldr	r2, [pc, #512]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b7e      	ldr	r3, [pc, #504]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a7d      	ldr	r2, [pc, #500]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e01d      	b.n	8004384 <HAL_RCC_OscConfig+0xd8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0xc0>
 8004352:	4b78      	ldr	r3, [pc, #480]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a77      	ldr	r2, [pc, #476]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	4b75      	ldr	r3, [pc, #468]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a74      	ldr	r2, [pc, #464]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	e00b      	b.n	8004384 <HAL_RCC_OscConfig+0xd8>
 800436c:	4b71      	ldr	r3, [pc, #452]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a70      	ldr	r2, [pc, #448]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	4b6e      	ldr	r3, [pc, #440]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6d      	ldr	r2, [pc, #436]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800437e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d013      	beq.n	80043b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fc fdea 	bl	8000f64 <HAL_GetTick>
 8004390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004394:	f7fc fde6 	bl	8000f64 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b64      	cmp	r3, #100	@ 0x64
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e3d4      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043a6:	4b63      	ldr	r3, [pc, #396]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0xe8>
 80043b2:	e014      	b.n	80043de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fc fdd6 	bl	8000f64 <HAL_GetTick>
 80043b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fc fdd2 	bl	8000f64 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	@ 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e3c0      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043ce:	4b59      	ldr	r3, [pc, #356]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x110>
 80043da:	e000      	b.n	80043de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80ca 	beq.w	8004580 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ec:	4b51      	ldr	r3, [pc, #324]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80043f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <HAL_RCC_OscConfig+0x166>
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	2b18      	cmp	r3, #24
 8004406:	d156      	bne.n	80044b6 <HAL_RCC_OscConfig+0x20a>
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d151      	bne.n	80044b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004412:	4b48      	ldr	r3, [pc, #288]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x17e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e392      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800442a:	4b42      	ldr	r3, [pc, #264]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 0219 	bic.w	r2, r3, #25
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	493f      	ldr	r1, [pc, #252]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fc fd92 	bl	8000f64 <HAL_GetTick>
 8004440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004444:	f7fc fd8e 	bl	8000f64 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e37c      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004456:	4b37      	ldr	r3, [pc, #220]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004462:	f7fc fd8b 	bl	8000f7c <HAL_GetREVID>
 8004466:	4603      	mov	r3, r0
 8004468:	f241 0203 	movw	r2, #4099	@ 0x1003
 800446c:	4293      	cmp	r3, r2
 800446e:	d817      	bhi.n	80044a0 <HAL_RCC_OscConfig+0x1f4>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b40      	cmp	r3, #64	@ 0x40
 8004476:	d108      	bne.n	800448a <HAL_RCC_OscConfig+0x1de>
 8004478:	4b2e      	ldr	r3, [pc, #184]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004480:	4a2c      	ldr	r2, [pc, #176]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004486:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004488:	e07a      	b.n	8004580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448a:	4b2a      	ldr	r3, [pc, #168]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	031b      	lsls	r3, r3, #12
 8004498:	4926      	ldr	r1, [pc, #152]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800449e:	e06f      	b.n	8004580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a0:	4b24      	ldr	r3, [pc, #144]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	4921      	ldr	r1, [pc, #132]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b4:	e064      	b.n	8004580 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d047      	beq.n	800454e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044be:	4b1d      	ldr	r3, [pc, #116]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 0219 	bic.w	r2, r3, #25
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	491a      	ldr	r1, [pc, #104]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fc fd48 	bl	8000f64 <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d8:	f7fc fd44 	bl	8000f64 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e332      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ea:	4b12      	ldr	r3, [pc, #72]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	f7fc fd41 	bl	8000f7c <HAL_GetREVID>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004500:	4293      	cmp	r3, r2
 8004502:	d819      	bhi.n	8004538 <HAL_RCC_OscConfig+0x28c>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b40      	cmp	r3, #64	@ 0x40
 800450a:	d108      	bne.n	800451e <HAL_RCC_OscConfig+0x272>
 800450c:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004514:	4a07      	ldr	r2, [pc, #28]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800451a:	6053      	str	r3, [r2, #4]
 800451c:	e030      	b.n	8004580 <HAL_RCC_OscConfig+0x2d4>
 800451e:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	031b      	lsls	r3, r3, #12
 800452c:	4901      	ldr	r1, [pc, #4]	@ (8004534 <HAL_RCC_OscConfig+0x288>)
 800452e:	4313      	orrs	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
 8004532:	e025      	b.n	8004580 <HAL_RCC_OscConfig+0x2d4>
 8004534:	58024400 	.word	0x58024400
 8004538:	4b9a      	ldr	r3, [pc, #616]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	4997      	ldr	r1, [pc, #604]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	e018      	b.n	8004580 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454e:	4b95      	ldr	r3, [pc, #596]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a94      	ldr	r2, [pc, #592]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fc fd03 	bl	8000f64 <HAL_GetTick>
 800455e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004562:	f7fc fcff 	bl	8000f64 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e2ed      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004574:	4b8b      	ldr	r3, [pc, #556]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a9 	beq.w	80046e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800458e:	4b85      	ldr	r3, [pc, #532]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004596:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004598:	4b82      	ldr	r3, [pc, #520]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d007      	beq.n	80045b4 <HAL_RCC_OscConfig+0x308>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b18      	cmp	r3, #24
 80045a8:	d13a      	bne.n	8004620 <HAL_RCC_OscConfig+0x374>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d135      	bne.n	8004620 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045b4:	4b7b      	ldr	r3, [pc, #492]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_OscConfig+0x320>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	2b80      	cmp	r3, #128	@ 0x80
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e2c1      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045cc:	f7fc fcd6 	bl	8000f7c <HAL_GetREVID>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d817      	bhi.n	800460a <HAL_RCC_OscConfig+0x35e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d108      	bne.n	80045f4 <HAL_RCC_OscConfig+0x348>
 80045e2:	4b70      	ldr	r3, [pc, #448]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80045ea:	4a6e      	ldr	r2, [pc, #440]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 80045ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045f2:	e075      	b.n	80046e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045f4:	4b6b      	ldr	r3, [pc, #428]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	069b      	lsls	r3, r3, #26
 8004602:	4968      	ldr	r1, [pc, #416]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004608:	e06a      	b.n	80046e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800460a:	4b66      	ldr	r3, [pc, #408]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	4962      	ldr	r1, [pc, #392]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800461a:	4313      	orrs	r3, r2
 800461c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800461e:	e05f      	b.n	80046e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d042      	beq.n	80046ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004628:	4b5e      	ldr	r3, [pc, #376]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a5d      	ldr	r2, [pc, #372]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800462e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fc fc96 	bl	8000f64 <HAL_GetTick>
 8004638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800463c:	f7fc fc92 	bl	8000f64 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e280      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800464e:	4b55      	ldr	r3, [pc, #340]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800465a:	f7fc fc8f 	bl	8000f7c <HAL_GetREVID>
 800465e:	4603      	mov	r3, r0
 8004660:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004664:	4293      	cmp	r3, r2
 8004666:	d817      	bhi.n	8004698 <HAL_RCC_OscConfig+0x3ec>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	2b20      	cmp	r3, #32
 800466e:	d108      	bne.n	8004682 <HAL_RCC_OscConfig+0x3d6>
 8004670:	4b4c      	ldr	r3, [pc, #304]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004678:	4a4a      	ldr	r2, [pc, #296]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800467a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800467e:	6053      	str	r3, [r2, #4]
 8004680:	e02e      	b.n	80046e0 <HAL_RCC_OscConfig+0x434>
 8004682:	4b48      	ldr	r3, [pc, #288]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	069b      	lsls	r3, r3, #26
 8004690:	4944      	ldr	r1, [pc, #272]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004692:	4313      	orrs	r3, r2
 8004694:	604b      	str	r3, [r1, #4]
 8004696:	e023      	b.n	80046e0 <HAL_RCC_OscConfig+0x434>
 8004698:	4b42      	ldr	r3, [pc, #264]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	493f      	ldr	r1, [pc, #252]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60cb      	str	r3, [r1, #12]
 80046ac:	e018      	b.n	80046e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046ae:	4b3d      	ldr	r3, [pc, #244]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a3c      	ldr	r2, [pc, #240]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 80046b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fc fc53 	bl	8000f64 <HAL_GetTick>
 80046be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046c2:	f7fc fc4f 	bl	8000f64 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e23d      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046d4:	4b33      	ldr	r3, [pc, #204]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d036      	beq.n	800475a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d019      	beq.n	8004728 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f4:	4b2b      	ldr	r3, [pc, #172]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 80046f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f8:	4a2a      	ldr	r2, [pc, #168]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004700:	f7fc fc30 	bl	8000f64 <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004708:	f7fc fc2c 	bl	8000f64 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e21a      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800471a:	4b22      	ldr	r3, [pc, #136]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800471c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x45c>
 8004726:	e018      	b.n	800475a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004728:	4b1e      	ldr	r3, [pc, #120]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800472a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472c:	4a1d      	ldr	r2, [pc, #116]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fc fc16 	bl	8000f64 <HAL_GetTick>
 8004738:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473c:	f7fc fc12 	bl	8000f64 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e200      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800474e:	4b15      	ldr	r3, [pc, #84]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d039      	beq.n	80047da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01c      	beq.n	80047a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800476e:	4b0d      	ldr	r3, [pc, #52]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a0c      	ldr	r2, [pc, #48]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004774:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004778:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800477a:	f7fc fbf3 	bl	8000f64 <HAL_GetTick>
 800477e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004782:	f7fc fbef 	bl	8000f64 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e1dd      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004794:	4b03      	ldr	r3, [pc, #12]	@ (80047a4 <HAL_RCC_OscConfig+0x4f8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x4d6>
 80047a0:	e01b      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
 80047a2:	bf00      	nop
 80047a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a9a      	ldr	r2, [pc, #616]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80047ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047b4:	f7fc fbd6 	bl	8000f64 <HAL_GetTick>
 80047b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047bc:	f7fc fbd2 	bl	8000f64 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e1c0      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047ce:	4b92      	ldr	r3, [pc, #584]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8081 	beq.w	80048ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047e8:	4b8c      	ldr	r3, [pc, #560]	@ (8004a1c <HAL_RCC_OscConfig+0x770>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a8b      	ldr	r2, [pc, #556]	@ (8004a1c <HAL_RCC_OscConfig+0x770>)
 80047ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047f4:	f7fc fbb6 	bl	8000f64 <HAL_GetTick>
 80047f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fc:	f7fc fbb2 	bl	8000f64 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	@ 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e1a0      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800480e:	4b83      	ldr	r3, [pc, #524]	@ (8004a1c <HAL_RCC_OscConfig+0x770>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d106      	bne.n	8004830 <HAL_RCC_OscConfig+0x584>
 8004822:	4b7d      	ldr	r3, [pc, #500]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	4a7c      	ldr	r2, [pc, #496]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	6713      	str	r3, [r2, #112]	@ 0x70
 800482e:	e02d      	b.n	800488c <HAL_RCC_OscConfig+0x5e0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10c      	bne.n	8004852 <HAL_RCC_OscConfig+0x5a6>
 8004838:	4b77      	ldr	r3, [pc, #476]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483c:	4a76      	ldr	r2, [pc, #472]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	6713      	str	r3, [r2, #112]	@ 0x70
 8004844:	4b74      	ldr	r3, [pc, #464]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004848:	4a73      	ldr	r2, [pc, #460]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 800484a:	f023 0304 	bic.w	r3, r3, #4
 800484e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004850:	e01c      	b.n	800488c <HAL_RCC_OscConfig+0x5e0>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b05      	cmp	r3, #5
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0x5c8>
 800485a:	4b6f      	ldr	r3, [pc, #444]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485e:	4a6e      	ldr	r2, [pc, #440]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004860:	f043 0304 	orr.w	r3, r3, #4
 8004864:	6713      	str	r3, [r2, #112]	@ 0x70
 8004866:	4b6c      	ldr	r3, [pc, #432]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486a:	4a6b      	ldr	r2, [pc, #428]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	6713      	str	r3, [r2, #112]	@ 0x70
 8004872:	e00b      	b.n	800488c <HAL_RCC_OscConfig+0x5e0>
 8004874:	4b68      	ldr	r3, [pc, #416]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004878:	4a67      	ldr	r2, [pc, #412]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004880:	4b65      	ldr	r3, [pc, #404]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004884:	4a64      	ldr	r2, [pc, #400]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004886:	f023 0304 	bic.w	r3, r3, #4
 800488a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d015      	beq.n	80048c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fc fb66 	bl	8000f64 <HAL_GetTick>
 8004898:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489c:	f7fc fb62 	bl	8000f64 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e14e      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048b2:	4b59      	ldr	r3, [pc, #356]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ee      	beq.n	800489c <HAL_RCC_OscConfig+0x5f0>
 80048be:	e014      	b.n	80048ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fc fb50 	bl	8000f64 <HAL_GetTick>
 80048c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048c6:	e00a      	b.n	80048de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fc fb4c 	bl	8000f64 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e138      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048de:	4b4e      	ldr	r3, [pc, #312]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1ee      	bne.n	80048c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 812d 	beq.w	8004b4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048f4:	4b48      	ldr	r3, [pc, #288]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048fc:	2b18      	cmp	r3, #24
 80048fe:	f000 80bd 	beq.w	8004a7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	2b02      	cmp	r3, #2
 8004908:	f040 809e 	bne.w	8004a48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490c:	4b42      	ldr	r3, [pc, #264]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a41      	ldr	r2, [pc, #260]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fc fb24 	bl	8000f64 <HAL_GetTick>
 800491c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004920:	f7fc fb20 	bl	8000f64 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e10e      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004932:	4b39      	ldr	r3, [pc, #228]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800493e:	4b36      	ldr	r3, [pc, #216]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004942:	4b37      	ldr	r3, [pc, #220]	@ (8004a20 <HAL_RCC_OscConfig+0x774>)
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800494e:	0112      	lsls	r2, r2, #4
 8004950:	430a      	orrs	r2, r1
 8004952:	4931      	ldr	r1, [pc, #196]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004954:	4313      	orrs	r3, r2
 8004956:	628b      	str	r3, [r1, #40]	@ 0x28
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495c:	3b01      	subs	r3, #1
 800495e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004966:	3b01      	subs	r3, #1
 8004968:	025b      	lsls	r3, r3, #9
 800496a:	b29b      	uxth	r3, r3
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004972:	3b01      	subs	r3, #1
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004980:	3b01      	subs	r3, #1
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004988:	4923      	ldr	r1, [pc, #140]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 800498a:	4313      	orrs	r3, r2
 800498c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800498e:	4b22      	ldr	r3, [pc, #136]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004992:	4a21      	ldr	r2, [pc, #132]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800499a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 800499c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800499e:	4b21      	ldr	r3, [pc, #132]	@ (8004a24 <HAL_RCC_OscConfig+0x778>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049a6:	00d2      	lsls	r2, r2, #3
 80049a8:	491b      	ldr	r1, [pc, #108]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	f023 020c 	bic.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	4917      	ldr	r1, [pc, #92]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049c0:	4b15      	ldr	r3, [pc, #84]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	f023 0202 	bic.w	r2, r3, #2
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049cc:	4912      	ldr	r1, [pc, #72]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049d2:	4b11      	ldr	r3, [pc, #68]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d6:	4a10      	ldr	r2, [pc, #64]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049de:	4b0e      	ldr	r3, [pc, #56]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80049f6:	4b08      	ldr	r3, [pc, #32]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	4a07      	ldr	r2, [pc, #28]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a02:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a04      	ldr	r2, [pc, #16]	@ (8004a18 <HAL_RCC_OscConfig+0x76c>)
 8004a08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fc faa9 	bl	8000f64 <HAL_GetTick>
 8004a12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a14:	e011      	b.n	8004a3a <HAL_RCC_OscConfig+0x78e>
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	58024800 	.word	0x58024800
 8004a20:	fffffc0c 	.word	0xfffffc0c
 8004a24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fc fa9c 	bl	8000f64 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e08a      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a3a:	4b47      	ldr	r3, [pc, #284]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x77c>
 8004a46:	e082      	b.n	8004b4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a48:	4b43      	ldr	r3, [pc, #268]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a42      	ldr	r2, [pc, #264]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fc fa86 	bl	8000f64 <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fc fa82 	bl	8000f64 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e070      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x7b0>
 8004a7a:	e068      	b.n	8004b4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a7c:	4b36      	ldr	r3, [pc, #216]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a82:	4b35      	ldr	r3, [pc, #212]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d031      	beq.n	8004af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f003 0203 	and.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d12a      	bne.n	8004af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d122      	bne.n	8004af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d11a      	bne.n	8004af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	0a5b      	lsrs	r3, r3, #9
 8004ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d111      	bne.n	8004af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d108      	bne.n	8004af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	0e1b      	lsrs	r3, r3, #24
 8004ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e02b      	b.n	8004b50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004af8:	4b17      	ldr	r3, [pc, #92]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004afc:	08db      	lsrs	r3, r3, #3
 8004afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d01f      	beq.n	8004b4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b0e:	4b12      	ldr	r3, [pc, #72]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b12:	4a11      	ldr	r2, [pc, #68]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b1a:	f7fc fa23 	bl	8000f64 <HAL_GetTick>
 8004b1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b20:	bf00      	nop
 8004b22:	f7fc fa1f 	bl	8000f64 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d0f9      	beq.n	8004b22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b32:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <HAL_RCC_OscConfig+0x8b0>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b3a:	00d2      	lsls	r2, r2, #3
 8004b3c:	4906      	ldr	r1, [pc, #24]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b42:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	4a04      	ldr	r2, [pc, #16]	@ (8004b58 <HAL_RCC_OscConfig+0x8ac>)
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3730      	adds	r7, #48	@ 0x30
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	58024400 	.word	0x58024400
 8004b5c:	ffff0007 	.word	0xffff0007

08004b60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e19c      	b.n	8004eae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b74:	4b8a      	ldr	r3, [pc, #552]	@ (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d910      	bls.n	8004ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b87      	ldr	r3, [pc, #540]	@ (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 020f 	bic.w	r2, r3, #15
 8004b8a:	4985      	ldr	r1, [pc, #532]	@ (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b83      	ldr	r3, [pc, #524]	@ (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e184      	b.n	8004eae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d010      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d908      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bc0:	4b78      	ldr	r3, [pc, #480]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	4975      	ldr	r1, [pc, #468]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d010      	beq.n	8004c00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	4b70      	ldr	r3, [pc, #448]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d908      	bls.n	8004c00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bee:	4b6d      	ldr	r3, [pc, #436]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	496a      	ldr	r1, [pc, #424]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d010      	beq.n	8004c2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	4b64      	ldr	r3, [pc, #400]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d908      	bls.n	8004c2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c1c:	4b61      	ldr	r3, [pc, #388]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	495e      	ldr	r1, [pc, #376]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d010      	beq.n	8004c5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69da      	ldr	r2, [r3, #28]
 8004c3e:	4b59      	ldr	r3, [pc, #356]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d908      	bls.n	8004c5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c4a:	4b56      	ldr	r3, [pc, #344]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	4953      	ldr	r1, [pc, #332]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d010      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d908      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c78:	4b4a      	ldr	r3, [pc, #296]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f023 020f 	bic.w	r2, r3, #15
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4947      	ldr	r1, [pc, #284]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d055      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c96:	4b43      	ldr	r3, [pc, #268]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	4940      	ldr	r1, [pc, #256]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d107      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d121      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0f6      	b.n	8004eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d107      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cc8:	4b36      	ldr	r3, [pc, #216]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d115      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0ea      	b.n	8004eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ce0:	4b30      	ldr	r3, [pc, #192]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0de      	b.n	8004eae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0d6      	b.n	8004eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d00:	4b28      	ldr	r3, [pc, #160]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f023 0207 	bic.w	r2, r3, #7
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4925      	ldr	r1, [pc, #148]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d12:	f7fc f927 	bl	8000f64 <HAL_GetTick>
 8004d16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d18:	e00a      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1a:	f7fc f923 	bl	8000f64 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e0be      	b.n	8004eae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d30:	4b1c      	ldr	r3, [pc, #112]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d1eb      	bne.n	8004d1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d010      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d208      	bcs.n	8004d70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d5e:	4b11      	ldr	r3, [pc, #68]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f023 020f 	bic.w	r2, r3, #15
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	490e      	ldr	r1, [pc, #56]	@ (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d70:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d214      	bcs.n	8004da8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	4b08      	ldr	r3, [pc, #32]	@ (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f023 020f 	bic.w	r2, r3, #15
 8004d86:	4906      	ldr	r1, [pc, #24]	@ (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8e:	4b04      	ldr	r3, [pc, #16]	@ (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e086      	b.n	8004eae <HAL_RCC_ClockConfig+0x34e>
 8004da0:	52002000 	.word	0x52002000
 8004da4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d010      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d208      	bcs.n	8004dd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	4939      	ldr	r1, [pc, #228]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d010      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	4b34      	ldr	r3, [pc, #208]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d208      	bcs.n	8004e04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004df2:	4b31      	ldr	r3, [pc, #196]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	492e      	ldr	r1, [pc, #184]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d010      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	4b28      	ldr	r3, [pc, #160]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d208      	bcs.n	8004e32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e20:	4b25      	ldr	r3, [pc, #148]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	4922      	ldr	r1, [pc, #136]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d010      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69da      	ldr	r2, [r3, #28]
 8004e42:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d208      	bcs.n	8004e60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	4917      	ldr	r1, [pc, #92]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e60:	f000 f834 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	4912      	ldr	r1, [pc, #72]	@ (8004ebc <HAL_RCC_ClockConfig+0x35c>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb8 <HAL_RCC_ClockConfig+0x358>)
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	4a0d      	ldr	r2, [pc, #52]	@ (8004ebc <HAL_RCC_ClockConfig+0x35c>)
 8004e88:	5cd3      	ldrb	r3, [r2, r3]
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
 8004e94:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec0 <HAL_RCC_ClockConfig+0x360>)
 8004e96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e98:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec4 <HAL_RCC_ClockConfig+0x364>)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <HAL_RCC_ClockConfig+0x368>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fc f814 	bl	8000ed0 <HAL_InitTick>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	0800b3cc 	.word	0x0800b3cc
 8004ec0:	24000004 	.word	0x24000004
 8004ec4:	24000000 	.word	0x24000000
 8004ec8:	24000008 	.word	0x24000008

08004ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	@ 0x24
 8004ed0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ed2:	4bb3      	ldr	r3, [pc, #716]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eda:	2b18      	cmp	r3, #24
 8004edc:	f200 8155 	bhi.w	800518a <HAL_RCC_GetSysClockFreq+0x2be>
 8004ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004f4d 	.word	0x08004f4d
 8004eec:	0800518b 	.word	0x0800518b
 8004ef0:	0800518b 	.word	0x0800518b
 8004ef4:	0800518b 	.word	0x0800518b
 8004ef8:	0800518b 	.word	0x0800518b
 8004efc:	0800518b 	.word	0x0800518b
 8004f00:	0800518b 	.word	0x0800518b
 8004f04:	0800518b 	.word	0x0800518b
 8004f08:	08004f73 	.word	0x08004f73
 8004f0c:	0800518b 	.word	0x0800518b
 8004f10:	0800518b 	.word	0x0800518b
 8004f14:	0800518b 	.word	0x0800518b
 8004f18:	0800518b 	.word	0x0800518b
 8004f1c:	0800518b 	.word	0x0800518b
 8004f20:	0800518b 	.word	0x0800518b
 8004f24:	0800518b 	.word	0x0800518b
 8004f28:	08004f79 	.word	0x08004f79
 8004f2c:	0800518b 	.word	0x0800518b
 8004f30:	0800518b 	.word	0x0800518b
 8004f34:	0800518b 	.word	0x0800518b
 8004f38:	0800518b 	.word	0x0800518b
 8004f3c:	0800518b 	.word	0x0800518b
 8004f40:	0800518b 	.word	0x0800518b
 8004f44:	0800518b 	.word	0x0800518b
 8004f48:	08004f7f 	.word	0x08004f7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f4c:	4b94      	ldr	r3, [pc, #592]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f58:	4b91      	ldr	r3, [pc, #580]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	08db      	lsrs	r3, r3, #3
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	4a90      	ldr	r2, [pc, #576]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
 8004f68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f6a:	e111      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f6c:	4b8d      	ldr	r3, [pc, #564]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f6e:	61bb      	str	r3, [r7, #24]
      break;
 8004f70:	e10e      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f72:	4b8d      	ldr	r3, [pc, #564]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f74:	61bb      	str	r3, [r7, #24]
      break;
 8004f76:	e10b      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f78:	4b8c      	ldr	r3, [pc, #560]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f7a:	61bb      	str	r3, [r7, #24]
      break;
 8004f7c:	e108      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f7e:	4b88      	ldr	r3, [pc, #544]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f88:	4b85      	ldr	r3, [pc, #532]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	091b      	lsrs	r3, r3, #4
 8004f8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f94:	4b82      	ldr	r3, [pc, #520]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f9e:	4b80      	ldr	r3, [pc, #512]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa2:	08db      	lsrs	r3, r3, #3
 8004fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80e1 	beq.w	8005184 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	f000 8083 	beq.w	80050d0 <HAL_RCC_GetSysClockFreq+0x204>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	f200 80a1 	bhi.w	8005114 <HAL_RCC_GetSysClockFreq+0x248>
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x114>
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d056      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004fde:	e099      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d02d      	beq.n	8005048 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fec:	4b6c      	ldr	r3, [pc, #432]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	08db      	lsrs	r3, r3, #3
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	4a6b      	ldr	r2, [pc, #428]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	ee07 3a90 	vmov	s15, r3
 8005004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005016:	4b62      	ldr	r3, [pc, #392]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005026:	ed97 6a02 	vldr	s12, [r7, #8]
 800502a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800502e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800503a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005042:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005046:	e087      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005052:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80051b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505a:	4b51      	ldr	r3, [pc, #324]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506a:	ed97 6a02 	vldr	s12, [r7, #8]
 800506e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800507e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800508a:	e065      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80051b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800509a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509e:	4b40      	ldr	r3, [pc, #256]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80050b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050ce:	e043      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80051bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80050de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e2:	4b2f      	ldr	r3, [pc, #188]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005112:	e021      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80051b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005126:	4b1e      	ldr	r3, [pc, #120]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005136:	ed97 6a02 	vldr	s12, [r7, #8]
 800513a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800513e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800514a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005156:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005158:	4b11      	ldr	r3, [pc, #68]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	0a5b      	lsrs	r3, r3, #9
 800515e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005162:	3301      	adds	r3, #1
 8005164:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005170:	edd7 6a07 	vldr	s13, [r7, #28]
 8005174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800517c:	ee17 3a90 	vmov	r3, s15
 8005180:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005182:	e005      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	61bb      	str	r3, [r7, #24]
      break;
 8005188:	e002      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800518a:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800518c:	61bb      	str	r3, [r7, #24]
      break;
 800518e:	bf00      	nop
  }

  return sysclockfreq;
 8005190:	69bb      	ldr	r3, [r7, #24]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3724      	adds	r7, #36	@ 0x24
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	58024400 	.word	0x58024400
 80051a4:	03d09000 	.word	0x03d09000
 80051a8:	003d0900 	.word	0x003d0900
 80051ac:	017d7840 	.word	0x017d7840
 80051b0:	46000000 	.word	0x46000000
 80051b4:	4c742400 	.word	0x4c742400
 80051b8:	4a742400 	.word	0x4a742400
 80051bc:	4bbebc20 	.word	0x4bbebc20

080051c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051c6:	f7ff fe81 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4b10      	ldr	r3, [pc, #64]	@ (8005210 <HAL_RCC_GetHCLKFreq+0x50>)
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	490f      	ldr	r1, [pc, #60]	@ (8005214 <HAL_RCC_GetHCLKFreq+0x54>)
 80051d8:	5ccb      	ldrb	r3, [r1, r3]
 80051da:	f003 031f 	and.w	r3, r3, #31
 80051de:	fa22 f303 	lsr.w	r3, r2, r3
 80051e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005210 <HAL_RCC_GetHCLKFreq+0x50>)
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	4a09      	ldr	r2, [pc, #36]	@ (8005214 <HAL_RCC_GetHCLKFreq+0x54>)
 80051ee:	5cd3      	ldrb	r3, [r2, r3]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	fa22 f303 	lsr.w	r3, r2, r3
 80051fa:	4a07      	ldr	r2, [pc, #28]	@ (8005218 <HAL_RCC_GetHCLKFreq+0x58>)
 80051fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051fe:	4a07      	ldr	r2, [pc, #28]	@ (800521c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005204:	4b04      	ldr	r3, [pc, #16]	@ (8005218 <HAL_RCC_GetHCLKFreq+0x58>)
 8005206:	681b      	ldr	r3, [r3, #0]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	58024400 	.word	0x58024400
 8005214:	0800b3cc 	.word	0x0800b3cc
 8005218:	24000004 	.word	0x24000004
 800521c:	24000000 	.word	0x24000000

08005220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005224:	f7ff ffcc 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 8005228:	4602      	mov	r2, r0
 800522a:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	091b      	lsrs	r3, r3, #4
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	4904      	ldr	r1, [pc, #16]	@ (8005248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005240:	4618      	mov	r0, r3
 8005242:	bd80      	pop	{r7, pc}
 8005244:	58024400 	.word	0x58024400
 8005248:	0800b3cc 	.word	0x0800b3cc

0800524c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800524c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005250:	b0cc      	sub	sp, #304	@ 0x130
 8005252:	af00      	add	r7, sp, #0
 8005254:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005258:	2300      	movs	r3, #0
 800525a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800525e:	2300      	movs	r3, #0
 8005260:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005264:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005270:	2500      	movs	r5, #0
 8005272:	ea54 0305 	orrs.w	r3, r4, r5
 8005276:	d049      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005278:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800527c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800527e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005282:	d02f      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005284:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005288:	d828      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800528a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800528e:	d01a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005290:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005294:	d822      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800529a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800529e:	d007      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052a0:	e01c      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a2:	4bb8      	ldr	r3, [pc, #736]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a6:	4ab7      	ldr	r2, [pc, #732]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052ae:	e01a      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052b4:	3308      	adds	r3, #8
 80052b6:	2102      	movs	r1, #2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f002 fba1 	bl	8007a00 <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052c4:	e00f      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ca:	3328      	adds	r3, #40	@ 0x28
 80052cc:	2102      	movs	r1, #2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f002 fc48 	bl	8007b64 <RCCEx_PLL3_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052da:	e004      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052e2:	e000      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80052e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052ee:	4ba5      	ldr	r3, [pc, #660]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052fc:	4aa1      	ldr	r2, [pc, #644]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052fe:	430b      	orrs	r3, r1
 8005300:	6513      	str	r3, [r2, #80]	@ 0x50
 8005302:	e003      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005304:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005308:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800530c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005318:	f04f 0900 	mov.w	r9, #0
 800531c:	ea58 0309 	orrs.w	r3, r8, r9
 8005320:	d047      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005328:	2b04      	cmp	r3, #4
 800532a:	d82a      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800532c:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005349 	.word	0x08005349
 8005338:	08005357 	.word	0x08005357
 800533c:	0800536d 	.word	0x0800536d
 8005340:	0800538b 	.word	0x0800538b
 8005344:	0800538b 	.word	0x0800538b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005348:	4b8e      	ldr	r3, [pc, #568]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	4a8d      	ldr	r2, [pc, #564]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800534e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005354:	e01a      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005356:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800535a:	3308      	adds	r3, #8
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f002 fb4e 	bl	8007a00 <RCCEx_PLL2_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800536a:	e00f      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800536c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005370:	3328      	adds	r3, #40	@ 0x28
 8005372:	2100      	movs	r1, #0
 8005374:	4618      	mov	r0, r3
 8005376:	f002 fbf5 	bl	8007b64 <RCCEx_PLL3_Config>
 800537a:	4603      	mov	r3, r0
 800537c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005380:	e004      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005388:	e000      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800538a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005394:	4b7b      	ldr	r3, [pc, #492]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005398:	f023 0107 	bic.w	r1, r3, #7
 800539c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a2:	4a78      	ldr	r2, [pc, #480]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053a4:	430b      	orrs	r3, r1
 80053a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80053a8:	e003      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80053be:	f04f 0b00 	mov.w	fp, #0
 80053c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80053c6:	d04c      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80053c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d2:	d030      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80053d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d8:	d829      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053da:	2bc0      	cmp	r3, #192	@ 0xc0
 80053dc:	d02d      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80053de:	2bc0      	cmp	r3, #192	@ 0xc0
 80053e0:	d825      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053e2:	2b80      	cmp	r3, #128	@ 0x80
 80053e4:	d018      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80053e6:	2b80      	cmp	r3, #128	@ 0x80
 80053e8:	d821      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80053ee:	2b40      	cmp	r3, #64	@ 0x40
 80053f0:	d007      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80053f2:	e01c      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f4:	4b63      	ldr	r3, [pc, #396]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	4a62      	ldr	r2, [pc, #392]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005400:	e01c      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005402:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005406:	3308      	adds	r3, #8
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f002 faf8 	bl	8007a00 <RCCEx_PLL2_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005416:	e011      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800541c:	3328      	adds	r3, #40	@ 0x28
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f002 fb9f 	bl	8007b64 <RCCEx_PLL3_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800542c:	e006      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005434:	e002      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005436:	bf00      	nop
 8005438:	e000      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800543a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800543c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005444:	4b4f      	ldr	r3, [pc, #316]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005448:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800544c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005452:	4a4c      	ldr	r2, [pc, #304]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005454:	430b      	orrs	r3, r1
 8005456:	6513      	str	r3, [r2, #80]	@ 0x50
 8005458:	e003      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800545e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800546e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005472:	2300      	movs	r3, #0
 8005474:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005478:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800547c:	460b      	mov	r3, r1
 800547e:	4313      	orrs	r3, r2
 8005480:	d053      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005482:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005486:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800548a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800548e:	d035      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005490:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005494:	d82e      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005496:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800549a:	d031      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800549c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054a0:	d828      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054a6:	d01a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80054a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054ac:	d822      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80054b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054b6:	d007      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80054b8:	e01c      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ba:	4b32      	ldr	r3, [pc, #200]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	4a31      	ldr	r2, [pc, #196]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054c6:	e01c      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054cc:	3308      	adds	r3, #8
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f002 fa95 	bl	8007a00 <RCCEx_PLL2_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054dc:	e011      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054e2:	3328      	adds	r3, #40	@ 0x28
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f002 fb3c 	bl	8007b64 <RCCEx_PLL3_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054f2:	e006      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80054fa:	e002      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054fc:	bf00      	nop
 80054fe:	e000      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005502:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800550a:	4b1e      	ldr	r3, [pc, #120]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800551a:	4a1a      	ldr	r2, [pc, #104]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800551c:	430b      	orrs	r3, r1
 800551e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005520:	e003      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005522:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005526:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800552a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005536:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800553a:	2300      	movs	r3, #0
 800553c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005540:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005544:	460b      	mov	r3, r1
 8005546:	4313      	orrs	r3, r2
 8005548:	d056      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800554a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800554e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005552:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005556:	d038      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005558:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800555c:	d831      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800555e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005562:	d034      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005564:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005568:	d82b      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800556a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800556e:	d01d      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005570:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005574:	d825      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d006      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800557a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800557e:	d00a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005580:	e01f      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005582:	bf00      	nop
 8005584:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005588:	4ba2      	ldr	r3, [pc, #648]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	4aa1      	ldr	r2, [pc, #644]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800558e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005594:	e01c      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800559a:	3308      	adds	r3, #8
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f002 fa2e 	bl	8007a00 <RCCEx_PLL2_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055aa:	e011      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055b0:	3328      	adds	r3, #40	@ 0x28
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f002 fad5 	bl	8007b64 <RCCEx_PLL3_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055c0:	e006      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055c8:	e002      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80055ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055d8:	4b8e      	ldr	r3, [pc, #568]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80055e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055e8:	4a8a      	ldr	r2, [pc, #552]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ea:	430b      	orrs	r3, r1
 80055ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ee:	e003      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005604:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005608:	2300      	movs	r3, #0
 800560a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800560e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005612:	460b      	mov	r3, r1
 8005614:	4313      	orrs	r3, r2
 8005616:	d03a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005618:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800561c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561e:	2b30      	cmp	r3, #48	@ 0x30
 8005620:	d01f      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005622:	2b30      	cmp	r3, #48	@ 0x30
 8005624:	d819      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005626:	2b20      	cmp	r3, #32
 8005628:	d00c      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800562a:	2b20      	cmp	r3, #32
 800562c:	d815      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d019      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005632:	2b10      	cmp	r3, #16
 8005634:	d111      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005636:	4b77      	ldr	r3, [pc, #476]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563a:	4a76      	ldr	r2, [pc, #472]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800563c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005642:	e011      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005648:	3308      	adds	r3, #8
 800564a:	2102      	movs	r1, #2
 800564c:	4618      	mov	r0, r3
 800564e:	f002 f9d7 	bl	8007a00 <RCCEx_PLL2_Config>
 8005652:	4603      	mov	r3, r0
 8005654:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005658:	e006      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005660:	e002      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005662:	bf00      	nop
 8005664:	e000      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005668:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005670:	4b68      	ldr	r3, [pc, #416]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005674:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005678:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800567c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800567e:	4a65      	ldr	r2, [pc, #404]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005680:	430b      	orrs	r3, r1
 8005682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005684:	e003      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005686:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800568a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800568e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800569a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800569e:	2300      	movs	r3, #0
 80056a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056a4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80056a8:	460b      	mov	r3, r1
 80056aa:	4313      	orrs	r3, r2
 80056ac:	d051      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80056ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056b8:	d035      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80056ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056be:	d82e      	bhi.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056c4:	d031      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80056c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056ca:	d828      	bhi.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d0:	d01a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80056d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d6:	d822      	bhi.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e0:	d007      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80056e2:	e01c      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056f0:	e01c      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056f6:	3308      	adds	r3, #8
 80056f8:	2100      	movs	r1, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	f002 f980 	bl	8007a00 <RCCEx_PLL2_Config>
 8005700:	4603      	mov	r3, r0
 8005702:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005706:	e011      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005708:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800570c:	3328      	adds	r3, #40	@ 0x28
 800570e:	2100      	movs	r1, #0
 8005710:	4618      	mov	r0, r3
 8005712:	f002 fa27 	bl	8007b64 <RCCEx_PLL3_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800571c:	e006      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005724:	e002      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800572a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800572c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005734:	4b37      	ldr	r3, [pc, #220]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005738:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800573c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005742:	4a34      	ldr	r2, [pc, #208]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005744:	430b      	orrs	r3, r1
 8005746:	6513      	str	r3, [r2, #80]	@ 0x50
 8005748:	e003      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800574e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800575e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005762:	2300      	movs	r3, #0
 8005764:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005768:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800576c:	460b      	mov	r3, r1
 800576e:	4313      	orrs	r3, r2
 8005770:	d056      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005772:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800577c:	d033      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800577e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005782:	d82c      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005788:	d02f      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800578a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800578e:	d826      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005790:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005794:	d02b      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005796:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800579a:	d820      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800579c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057a0:	d012      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80057a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057a6:	d81a      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d022      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b0:	d115      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057b6:	3308      	adds	r3, #8
 80057b8:	2101      	movs	r1, #1
 80057ba:	4618      	mov	r0, r3
 80057bc:	f002 f920 	bl	8007a00 <RCCEx_PLL2_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057c6:	e015      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057cc:	3328      	adds	r3, #40	@ 0x28
 80057ce:	2101      	movs	r1, #1
 80057d0:	4618      	mov	r0, r3
 80057d2:	f002 f9c7 	bl	8007b64 <RCCEx_PLL3_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057dc:	e00a      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80057e4:	e006      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057e6:	bf00      	nop
 80057e8:	e004      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057ea:	bf00      	nop
 80057ec:	e002      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057ee:	bf00      	nop
 80057f0:	e000      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10d      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057fc:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005800:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800580a:	4a02      	ldr	r2, [pc, #8]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800580c:	430b      	orrs	r3, r1
 800580e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005812:	bf00      	nop
 8005814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005818:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800581c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005820:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800582c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005830:	2300      	movs	r3, #0
 8005832:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005836:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800583a:	460b      	mov	r3, r1
 800583c:	4313      	orrs	r3, r2
 800583e:	d055      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005840:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800584c:	d033      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800584e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005852:	d82c      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005858:	d02f      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585e:	d826      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005860:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005864:	d02b      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800586a:	d820      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800586c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005870:	d012      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005876:	d81a      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d022      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800587c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005880:	d115      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005882:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005886:	3308      	adds	r3, #8
 8005888:	2101      	movs	r1, #1
 800588a:	4618      	mov	r0, r3
 800588c:	f002 f8b8 	bl	8007a00 <RCCEx_PLL2_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005896:	e015      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800589c:	3328      	adds	r3, #40	@ 0x28
 800589e:	2101      	movs	r1, #1
 80058a0:	4618      	mov	r0, r3
 80058a2:	f002 f95f 	bl	8007b64 <RCCEx_PLL3_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058ac:	e00a      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80058b4:	e006      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058b6:	bf00      	nop
 80058b8:	e004      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058ba:	bf00      	nop
 80058bc:	e002      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058be:	bf00      	nop
 80058c0:	e000      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10b      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058cc:	4bb6      	ldr	r3, [pc, #728]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80058d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058dc:	4ab2      	ldr	r2, [pc, #712]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058de:	430b      	orrs	r3, r1
 80058e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80058e2:	e003      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80058ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80058f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058fc:	2300      	movs	r3, #0
 80058fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005902:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005906:	460b      	mov	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	d02a      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800590c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005912:	2b00      	cmp	r3, #0
 8005914:	d011      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800591a:	d10a      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800591c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005920:	3308      	adds	r3, #8
 8005922:	2101      	movs	r1, #1
 8005924:	4618      	mov	r0, r3
 8005926:	f002 f86b 	bl	8007a00 <RCCEx_PLL2_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005930:	e004      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005938:	e000      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800593a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800593c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005944:	4b98      	ldr	r3, [pc, #608]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005948:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800594c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005952:	4a95      	ldr	r2, [pc, #596]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005954:	430b      	orrs	r3, r1
 8005956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005958:	e003      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800595e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005962:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800596e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005972:	2300      	movs	r3, #0
 8005974:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005978:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800597c:	460b      	mov	r3, r1
 800597e:	4313      	orrs	r3, r2
 8005980:	d037      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800598c:	d00e      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x760>
 800598e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005992:	d816      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d018      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800599c:	d111      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800599e:	4b82      	ldr	r3, [pc, #520]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a2:	4a81      	ldr	r2, [pc, #516]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059aa:	e00f      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059b0:	3308      	adds	r3, #8
 80059b2:	2101      	movs	r1, #1
 80059b4:	4618      	mov	r0, r3
 80059b6:	f002 f823 	bl	8007a00 <RCCEx_PLL2_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059c0:	e004      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80059ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059d4:	4b74      	ldr	r3, [pc, #464]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e2:	4a71      	ldr	r2, [pc, #452]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059e4:	430b      	orrs	r3, r1
 80059e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80059e8:	e003      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80059f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80059fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a02:	2300      	movs	r3, #0
 8005a04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a08:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	d03a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d81d      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a61 	.word	0x08005a61
 8005a28:	08005a35 	.word	0x08005a35
 8005a2c:	08005a43 	.word	0x08005a43
 8005a30:	08005a61 	.word	0x08005a61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a34:	4b5c      	ldr	r3, [pc, #368]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a38:	4a5b      	ldr	r2, [pc, #364]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a40:	e00f      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a46:	3308      	adds	r3, #8
 8005a48:	2102      	movs	r1, #2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 ffd8 	bl	8007a00 <RCCEx_PLL2_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a56:	e004      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a5e:	e000      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a6e:	f023 0103 	bic.w	r1, r3, #3
 8005a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a78:	4a4b      	ldr	r2, [pc, #300]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a7e:	e003      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a84:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005a94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f000 80a0 	beq.w	8005bea <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aaa:	4b40      	ldr	r3, [pc, #256]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a3f      	ldr	r2, [pc, #252]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ab6:	f7fb fa55 	bl	8000f64 <HAL_GetTick>
 8005aba:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ac0:	f7fb fa50 	bl	8000f64 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b64      	cmp	r3, #100	@ 0x64
 8005ace:	d903      	bls.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ad6:	e005      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ad8:	4b34      	ldr	r3, [pc, #208]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0ed      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005ae4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d17a      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005aec:	4b2e      	ldr	r3, [pc, #184]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005aee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005af4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005af8:	4053      	eors	r3, r2
 8005afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d015      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b02:	4b29      	ldr	r3, [pc, #164]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b0e:	4b26      	ldr	r3, [pc, #152]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b12:	4a25      	ldr	r2, [pc, #148]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b1a:	4b23      	ldr	r3, [pc, #140]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1e:	4a22      	ldr	r2, [pc, #136]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b26:	4a20      	ldr	r2, [pc, #128]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b28:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005b2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b3a:	d118      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fb fa12 	bl	8000f64 <HAL_GetTick>
 8005b40:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b44:	e00d      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b46:	f7fb fa0d 	bl	8000f64 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b50:	1ad2      	subs	r2, r2, r3
 8005b52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d903      	bls.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005b60:	e005      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b62:	4b11      	ldr	r3, [pc, #68]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0eb      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005b6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d130      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b86:	d115      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005b88:	4b07      	ldr	r3, [pc, #28]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b98:	091a      	lsrs	r2, r3, #4
 8005b9a:	4b05      	ldr	r3, [pc, #20]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	4a02      	ldr	r2, [pc, #8]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	6113      	str	r3, [r2, #16]
 8005ba4:	e00c      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005ba6:	bf00      	nop
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	58024800 	.word	0x58024800
 8005bb0:	00ffffcf 	.word	0x00ffffcf
 8005bb4:	4bd4      	ldr	r3, [pc, #848]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	4ad3      	ldr	r2, [pc, #844]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bbe:	6113      	str	r3, [r2, #16]
 8005bc0:	4bd1      	ldr	r3, [pc, #836]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bc2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd0:	4acd      	ldr	r2, [pc, #820]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd6:	e008      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bdc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8005be0:	e003      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005be6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f002 0301 	and.w	r3, r2, #1
 8005bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f000 808b 	beq.w	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c14:	2b28      	cmp	r3, #40	@ 0x28
 8005c16:	d86b      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005c18:	a201      	add	r2, pc, #4	@ (adr r2, 8005c20 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005cf9 	.word	0x08005cf9
 8005c24:	08005cf1 	.word	0x08005cf1
 8005c28:	08005cf1 	.word	0x08005cf1
 8005c2c:	08005cf1 	.word	0x08005cf1
 8005c30:	08005cf1 	.word	0x08005cf1
 8005c34:	08005cf1 	.word	0x08005cf1
 8005c38:	08005cf1 	.word	0x08005cf1
 8005c3c:	08005cf1 	.word	0x08005cf1
 8005c40:	08005cc5 	.word	0x08005cc5
 8005c44:	08005cf1 	.word	0x08005cf1
 8005c48:	08005cf1 	.word	0x08005cf1
 8005c4c:	08005cf1 	.word	0x08005cf1
 8005c50:	08005cf1 	.word	0x08005cf1
 8005c54:	08005cf1 	.word	0x08005cf1
 8005c58:	08005cf1 	.word	0x08005cf1
 8005c5c:	08005cf1 	.word	0x08005cf1
 8005c60:	08005cdb 	.word	0x08005cdb
 8005c64:	08005cf1 	.word	0x08005cf1
 8005c68:	08005cf1 	.word	0x08005cf1
 8005c6c:	08005cf1 	.word	0x08005cf1
 8005c70:	08005cf1 	.word	0x08005cf1
 8005c74:	08005cf1 	.word	0x08005cf1
 8005c78:	08005cf1 	.word	0x08005cf1
 8005c7c:	08005cf1 	.word	0x08005cf1
 8005c80:	08005cf9 	.word	0x08005cf9
 8005c84:	08005cf1 	.word	0x08005cf1
 8005c88:	08005cf1 	.word	0x08005cf1
 8005c8c:	08005cf1 	.word	0x08005cf1
 8005c90:	08005cf1 	.word	0x08005cf1
 8005c94:	08005cf1 	.word	0x08005cf1
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005cf1 	.word	0x08005cf1
 8005ca0:	08005cf9 	.word	0x08005cf9
 8005ca4:	08005cf1 	.word	0x08005cf1
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005cf1 	.word	0x08005cf1
 8005cb0:	08005cf1 	.word	0x08005cf1
 8005cb4:	08005cf1 	.word	0x08005cf1
 8005cb8:	08005cf1 	.word	0x08005cf1
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005cf9 	.word	0x08005cf9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cc8:	3308      	adds	r3, #8
 8005cca:	2101      	movs	r1, #1
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fe97 	bl	8007a00 <RCCEx_PLL2_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005cd8:	e00f      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cde:	3328      	adds	r3, #40	@ 0x28
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 ff3e 	bl	8007b64 <RCCEx_PLL3_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005cee:	e004      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cf6:	e000      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d02:	4b81      	ldr	r3, [pc, #516]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d12:	4a7d      	ldr	r2, [pc, #500]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d18:	e003      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f002 0302 	and.w	r3, r2, #2
 8005d2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d32:	2300      	movs	r3, #0
 8005d34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d38:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d042      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d48:	2b05      	cmp	r3, #5
 8005d4a:	d825      	bhi.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005da1 	.word	0x08005da1
 8005d58:	08005d6d 	.word	0x08005d6d
 8005d5c:	08005d83 	.word	0x08005d83
 8005d60:	08005da1 	.word	0x08005da1
 8005d64:	08005da1 	.word	0x08005da1
 8005d68:	08005da1 	.word	0x08005da1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d70:	3308      	adds	r3, #8
 8005d72:	2101      	movs	r1, #1
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 fe43 	bl	8007a00 <RCCEx_PLL2_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d80:	e00f      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d86:	3328      	adds	r3, #40	@ 0x28
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 feea 	bl	8007b64 <RCCEx_PLL3_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d96:	e004      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d9e:	e000      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005daa:	4b57      	ldr	r3, [pc, #348]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dae:	f023 0107 	bic.w	r1, r3, #7
 8005db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005db6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005db8:	4a53      	ldr	r2, [pc, #332]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dbe:	e003      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dc4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f002 0304 	and.w	r3, r2, #4
 8005dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dde:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4313      	orrs	r3, r2
 8005de6:	d044      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005df0:	2b05      	cmp	r3, #5
 8005df2:	d825      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005df4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dfc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e49 	.word	0x08005e49
 8005e00:	08005e15 	.word	0x08005e15
 8005e04:	08005e2b 	.word	0x08005e2b
 8005e08:	08005e49 	.word	0x08005e49
 8005e0c:	08005e49 	.word	0x08005e49
 8005e10:	08005e49 	.word	0x08005e49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e18:	3308      	adds	r3, #8
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 fdef 	bl	8007a00 <RCCEx_PLL2_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e28:	e00f      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e2e:	3328      	adds	r3, #40	@ 0x28
 8005e30:	2101      	movs	r1, #1
 8005e32:	4618      	mov	r0, r3
 8005e34:	f001 fe96 	bl	8007b64 <RCCEx_PLL3_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e3e:	e004      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e46:	e000      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e52:	4b2d      	ldr	r3, [pc, #180]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e56:	f023 0107 	bic.w	r1, r3, #7
 8005e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e62:	4a29      	ldr	r2, [pc, #164]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e64:	430b      	orrs	r3, r1
 8005e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e68:	e003      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f002 0320 	and.w	r3, r2, #32
 8005e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e82:	2300      	movs	r3, #0
 8005e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	d057      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e9e:	d035      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ea4:	d82c      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eaa:	d031      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb0:	d826      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005eb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eb6:	d02d      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005eb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ebc:	d820      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ec2:	d012      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ec8:	d81a      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d024      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ed2:	d115      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ed8:	3308      	adds	r3, #8
 8005eda:	2100      	movs	r1, #0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 fd8f 	bl	8007a00 <RCCEx_PLL2_Config>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005ee8:	e017      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eee:	3328      	adds	r3, #40	@ 0x28
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 fe36 	bl	8007b64 <RCCEx_PLL3_Config>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005efe:	e00c      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f06:	e008      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005f08:	58024400 	.word	0x58024400
        break;
 8005f0c:	bf00      	nop
 8005f0e:	e004      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f10:	bf00      	nop
 8005f12:	e002      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10b      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f22:	4bc2      	ldr	r3, [pc, #776]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f26:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f32:	4abe      	ldr	r2, [pc, #760]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f34:	430b      	orrs	r3, r1
 8005f36:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f38:	e003      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f52:	2300      	movs	r3, #0
 8005f54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f58:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	d055      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f6a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f6e:	d033      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005f70:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f74:	d82c      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7a:	d02f      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f80:	d826      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f86:	d02b      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005f88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f8c:	d820      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f92:	d012      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f98:	d81a      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d022      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fa2:	d115      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa8:	3308      	adds	r3, #8
 8005faa:	2100      	movs	r1, #0
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 fd27 	bl	8007a00 <RCCEx_PLL2_Config>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fb8:	e015      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fbe:	3328      	adds	r3, #40	@ 0x28
 8005fc0:	2102      	movs	r1, #2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 fdce 	bl	8007b64 <RCCEx_PLL3_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fce:	e00a      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005fd6:	e006      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fd8:	bf00      	nop
 8005fda:	e004      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fdc:	bf00      	nop
 8005fde:	e002      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fe0:	bf00      	nop
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10b      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fee:	4b8f      	ldr	r3, [pc, #572]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ffe:	4a8b      	ldr	r2, [pc, #556]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006000:	430b      	orrs	r3, r1
 8006002:	6593      	str	r3, [r2, #88]	@ 0x58
 8006004:	e003      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006006:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800600a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800600e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800601a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800601e:	2300      	movs	r3, #0
 8006020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006024:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006028:	460b      	mov	r3, r1
 800602a:	4313      	orrs	r3, r2
 800602c:	d055      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800602e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006032:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006036:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800603a:	d033      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800603c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006040:	d82c      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006046:	d02f      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800604c:	d826      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800604e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006052:	d02b      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006054:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006058:	d820      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800605a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800605e:	d012      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006064:	d81a      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d022      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800606a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800606e:	d115      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006070:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006074:	3308      	adds	r3, #8
 8006076:	2100      	movs	r1, #0
 8006078:	4618      	mov	r0, r3
 800607a:	f001 fcc1 	bl	8007a00 <RCCEx_PLL2_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006084:	e015      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800608a:	3328      	adds	r3, #40	@ 0x28
 800608c:	2102      	movs	r1, #2
 800608e:	4618      	mov	r0, r3
 8006090:	f001 fd68 	bl	8007b64 <RCCEx_PLL3_Config>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800609a:	e00a      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060a2:	e006      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060a4:	bf00      	nop
 80060a6:	e004      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060a8:	bf00      	nop
 80060aa:	e002      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060ac:	bf00      	nop
 80060ae:	e000      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060ba:	4b5c      	ldr	r3, [pc, #368]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060be:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80060c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80060ca:	4a58      	ldr	r2, [pc, #352]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060cc:	430b      	orrs	r3, r1
 80060ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80060d0:	e003      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80060da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f002 0308 	and.w	r3, r2, #8
 80060e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060ea:	2300      	movs	r3, #0
 80060ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060f0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80060f4:	460b      	mov	r3, r1
 80060f6:	4313      	orrs	r3, r2
 80060f8:	d01e      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80060fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006106:	d10c      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800610c:	3328      	adds	r3, #40	@ 0x28
 800610e:	2102      	movs	r1, #2
 8006110:	4618      	mov	r0, r3
 8006112:	f001 fd27 	bl	8007b64 <RCCEx_PLL3_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006122:	4b42      	ldr	r3, [pc, #264]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006126:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800612a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006132:	4a3e      	ldr	r2, [pc, #248]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006134:	430b      	orrs	r3, r1
 8006136:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f002 0310 	and.w	r3, r2, #16
 8006144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006148:	2300      	movs	r3, #0
 800614a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800614e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006152:	460b      	mov	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	d01e      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006158:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800615c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006164:	d10c      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800616a:	3328      	adds	r3, #40	@ 0x28
 800616c:	2102      	movs	r1, #2
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fcf8 	bl	8007b64 <RCCEx_PLL3_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006180:	4b2a      	ldr	r3, [pc, #168]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006184:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006188:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800618c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006190:	4a26      	ldr	r2, [pc, #152]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006192:	430b      	orrs	r3, r1
 8006194:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80061a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061a6:	2300      	movs	r3, #0
 80061a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061ac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80061b0:	460b      	mov	r3, r1
 80061b2:	4313      	orrs	r3, r2
 80061b4:	d040      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061c2:	d022      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80061c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061c8:	d81b      	bhi.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80061ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d2:	d00b      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80061d4:	e015      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061da:	3308      	adds	r3, #8
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 fc0e 	bl	8007a00 <RCCEx_PLL2_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80061ea:	e00f      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061f0:	3328      	adds	r3, #40	@ 0x28
 80061f2:	2102      	movs	r1, #2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 fcb5 	bl	8007b64 <RCCEx_PLL3_Config>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006200:	e004      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006208:	e000      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800620a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10d      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006214:	4b05      	ldr	r3, [pc, #20]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006218:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800621c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006220:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006224:	4a01      	ldr	r2, [pc, #4]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006226:	430b      	orrs	r3, r1
 8006228:	6593      	str	r3, [r2, #88]	@ 0x58
 800622a:	e005      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800622c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006230:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006234:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006244:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006246:	2300      	movs	r3, #0
 8006248:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800624a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800624e:	460b      	mov	r3, r1
 8006250:	4313      	orrs	r3, r2
 8006252:	d03b      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006254:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800625c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006260:	d01f      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006262:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006266:	d818      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006268:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800626c:	d003      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800626e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006272:	d007      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006274:	e011      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006276:	4b64      	ldr	r3, [pc, #400]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627a:	4a63      	ldr	r2, [pc, #396]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800627c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006282:	e00f      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006284:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006288:	3328      	adds	r3, #40	@ 0x28
 800628a:	2101      	movs	r1, #1
 800628c:	4618      	mov	r0, r3
 800628e:	f001 fc69 	bl	8007b64 <RCCEx_PLL3_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006298:	e004      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062a0:	e000      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80062a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10b      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062ac:	4b56      	ldr	r3, [pc, #344]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062bc:	4a52      	ldr	r2, [pc, #328]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062be:	430b      	orrs	r3, r1
 80062c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80062c2:	e003      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80062d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80062da:	2300      	movs	r3, #0
 80062dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80062de:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80062e2:	460b      	mov	r3, r1
 80062e4:	4313      	orrs	r3, r2
 80062e6:	d031      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80062e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80062f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f6:	d007      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80062f8:	e011      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fa:	4b43      	ldr	r3, [pc, #268]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	4a42      	ldr	r2, [pc, #264]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006306:	e00e      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800630c:	3308      	adds	r3, #8
 800630e:	2102      	movs	r1, #2
 8006310:	4618      	mov	r0, r3
 8006312:	f001 fb75 	bl	8007a00 <RCCEx_PLL2_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800631c:	e003      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006326:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800632e:	4b36      	ldr	r3, [pc, #216]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006332:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800633a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800633c:	4a32      	ldr	r2, [pc, #200]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800633e:	430b      	orrs	r3, r1
 8006340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006342:	e003      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006344:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006348:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800634c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800635a:	2300      	movs	r3, #0
 800635c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800635e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006362:	460b      	mov	r3, r1
 8006364:	4313      	orrs	r3, r2
 8006366:	d00c      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800636c:	3328      	adds	r3, #40	@ 0x28
 800636e:	2102      	movs	r1, #2
 8006370:	4618      	mov	r0, r3
 8006372:	f001 fbf7 	bl	8007b64 <RCCEx_PLL3_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006382:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800638e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006390:	2300      	movs	r3, #0
 8006392:	667b      	str	r3, [r7, #100]	@ 0x64
 8006394:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006398:	460b      	mov	r3, r1
 800639a:	4313      	orrs	r3, r2
 800639c:	d03a      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800639e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063aa:	d018      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80063ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063b0:	d811      	bhi.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80063b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063b6:	d014      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80063b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063bc:	d80b      	bhi.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d011      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c6:	d106      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	4a0e      	ldr	r2, [pc, #56]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80063d4:	e008      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80063dc:	e004      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80063de:	bf00      	nop
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80063e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10d      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063f0:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006400:	4a01      	ldr	r2, [pc, #4]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006402:	430b      	orrs	r3, r1
 8006404:	6553      	str	r3, [r2, #84]	@ 0x54
 8006406:	e005      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006410:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006422:	2300      	movs	r3, #0
 8006424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006426:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800642a:	460b      	mov	r3, r1
 800642c:	4313      	orrs	r3, r2
 800642e:	d009      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006430:	4baa      	ldr	r3, [pc, #680]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006434:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006438:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800643c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800643e:	4aa7      	ldr	r2, [pc, #668]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006440:	430b      	orrs	r3, r1
 8006442:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006444:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006450:	653b      	str	r3, [r7, #80]	@ 0x50
 8006452:	2300      	movs	r3, #0
 8006454:	657b      	str	r3, [r7, #84]	@ 0x54
 8006456:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800645a:	460b      	mov	r3, r1
 800645c:	4313      	orrs	r3, r2
 800645e:	d00a      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006460:	4b9e      	ldr	r3, [pc, #632]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800646c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006470:	4a9a      	ldr	r2, [pc, #616]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006472:	430b      	orrs	r3, r1
 8006474:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006476:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006484:	2300      	movs	r3, #0
 8006486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006488:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800648c:	460b      	mov	r3, r1
 800648e:	4313      	orrs	r3, r2
 8006490:	d009      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006492:	4b92      	ldr	r3, [pc, #584]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006496:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800649a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800649e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a0:	4a8e      	ldr	r2, [pc, #568]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064a2:	430b      	orrs	r3, r1
 80064a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80064b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80064b4:	2300      	movs	r3, #0
 80064b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80064bc:	460b      	mov	r3, r1
 80064be:	4313      	orrs	r3, r2
 80064c0:	d00e      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064c2:	4b86      	ldr	r3, [pc, #536]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	4a85      	ldr	r2, [pc, #532]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064cc:	6113      	str	r3, [r2, #16]
 80064ce:	4b83      	ldr	r3, [pc, #524]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064d0:	6919      	ldr	r1, [r3, #16]
 80064d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80064da:	4a80      	ldr	r2, [pc, #512]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064dc:	430b      	orrs	r3, r1
 80064de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80064e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80064ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064ee:	2300      	movs	r3, #0
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80064f6:	460b      	mov	r3, r1
 80064f8:	4313      	orrs	r3, r2
 80064fa:	d009      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80064fc:	4b77      	ldr	r3, [pc, #476]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006500:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006504:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650a:	4a74      	ldr	r2, [pc, #464]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800650c:	430b      	orrs	r3, r1
 800650e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800651c:	633b      	str	r3, [r7, #48]	@ 0x30
 800651e:	2300      	movs	r3, #0
 8006520:	637b      	str	r3, [r7, #52]	@ 0x34
 8006522:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006526:	460b      	mov	r3, r1
 8006528:	4313      	orrs	r3, r2
 800652a:	d00a      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800652c:	4b6b      	ldr	r3, [pc, #428]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800652e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006530:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006534:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653c:	4a67      	ldr	r2, [pc, #412]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800653e:	430b      	orrs	r3, r1
 8006540:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	2100      	movs	r1, #0
 800654c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006554:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006558:	460b      	mov	r3, r1
 800655a:	4313      	orrs	r3, r2
 800655c:	d011      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800655e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006562:	3308      	adds	r3, #8
 8006564:	2100      	movs	r1, #0
 8006566:	4618      	mov	r0, r3
 8006568:	f001 fa4a 	bl	8007a00 <RCCEx_PLL2_Config>
 800656c:	4603      	mov	r3, r0
 800656e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006572:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800657e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	2100      	movs	r1, #0
 800658c:	6239      	str	r1, [r7, #32]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	627b      	str	r3, [r7, #36]	@ 0x24
 8006594:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006598:	460b      	mov	r3, r1
 800659a:	4313      	orrs	r3, r2
 800659c:	d011      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800659e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065a2:	3308      	adds	r3, #8
 80065a4:	2101      	movs	r1, #1
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 fa2a 	bl	8007a00 <RCCEx_PLL2_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80065b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80065c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	2100      	movs	r1, #0
 80065cc:	61b9      	str	r1, [r7, #24]
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80065d8:	460b      	mov	r3, r1
 80065da:	4313      	orrs	r3, r2
 80065dc:	d011      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065e2:	3308      	adds	r3, #8
 80065e4:	2102      	movs	r1, #2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fa0a 	bl	8007a00 <RCCEx_PLL2_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80065f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006602:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	2100      	movs	r1, #0
 800660c:	6139      	str	r1, [r7, #16]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006618:	460b      	mov	r3, r1
 800661a:	4313      	orrs	r3, r2
 800661c:	d011      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800661e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006622:	3328      	adds	r3, #40	@ 0x28
 8006624:	2100      	movs	r1, #0
 8006626:	4618      	mov	r0, r3
 8006628:	f001 fa9c 	bl	8007b64 <RCCEx_PLL3_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006632:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800663e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006642:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	2100      	movs	r1, #0
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	f003 0310 	and.w	r3, r3, #16
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006658:	460b      	mov	r3, r1
 800665a:	4313      	orrs	r3, r2
 800665c:	d011      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800665e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006662:	3328      	adds	r3, #40	@ 0x28
 8006664:	2101      	movs	r1, #1
 8006666:	4618      	mov	r0, r3
 8006668:	f001 fa7c 	bl	8007b64 <RCCEx_PLL3_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006672:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800667e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006682:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	2100      	movs	r1, #0
 800668c:	6039      	str	r1, [r7, #0]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	607b      	str	r3, [r7, #4]
 8006694:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d011      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800669e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066a2:	3328      	adds	r3, #40	@ 0x28
 80066a4:	2102      	movs	r1, #2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 fa5c 	bl	8007b64 <RCCEx_PLL3_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80066b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80066c2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e000      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80066d6:	46bd      	mov	sp, r7
 80066d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066dc:	58024400 	.word	0x58024400

080066e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b090      	sub	sp, #64	@ 0x40
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80066ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80066f2:	430b      	orrs	r3, r1
 80066f4:	f040 8094 	bne.w	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80066f8:	4b9e      	ldr	r3, [pc, #632]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	2b04      	cmp	r3, #4
 8006706:	f200 8087 	bhi.w	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800670a:	a201      	add	r2, pc, #4	@ (adr r2, 8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006725 	.word	0x08006725
 8006714:	0800674d 	.word	0x0800674d
 8006718:	08006775 	.word	0x08006775
 800671c:	08006811 	.word	0x08006811
 8006720:	0800679d 	.word	0x0800679d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006724:	4b93      	ldr	r3, [pc, #588]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800672c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006730:	d108      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006736:	4618      	mov	r0, r3
 8006738:	f001 f810 	bl	800775c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800673c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006740:	f000 bd45 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006748:	f000 bd41 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800674c:	4b89      	ldr	r3, [pc, #548]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006758:	d108      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800675a:	f107 0318 	add.w	r3, r7, #24
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fd54 	bl	800720c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006768:	f000 bd31 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006770:	f000 bd2d 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006774:	4b7f      	ldr	r3, [pc, #508]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800677c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006780:	d108      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006782:	f107 030c 	add.w	r3, r7, #12
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fe94 	bl	80074b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006790:	f000 bd1d 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006798:	f000 bd19 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800679c:	4b75      	ldr	r3, [pc, #468]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800679e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067a6:	4b73      	ldr	r3, [pc, #460]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d10c      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80067b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b8:	4b6e      	ldr	r3, [pc, #440]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	08db      	lsrs	r3, r3, #3
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	4a6d      	ldr	r2, [pc, #436]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
 80067c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ca:	e01f      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067cc:	4b69      	ldr	r3, [pc, #420]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d8:	d106      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80067da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067e0:	d102      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067e2:	4b66      	ldr	r3, [pc, #408]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80067e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e6:	e011      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067e8:	4b62      	ldr	r3, [pc, #392]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067f4:	d106      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80067f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067fc:	d102      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067fe:	4b60      	ldr	r3, [pc, #384]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006802:	e003      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006808:	f000 bce1 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800680c:	f000 bcdf 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006810:	4b5c      	ldr	r3, [pc, #368]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006814:	f000 bcdb 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800681c:	f000 bcd7 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006824:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006828:	430b      	orrs	r3, r1
 800682a:	f040 80ad 	bne.w	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800682e:	4b51      	ldr	r3, [pc, #324]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006832:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006836:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800683e:	d056      	beq.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006846:	f200 8090 	bhi.w	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	2bc0      	cmp	r3, #192	@ 0xc0
 800684e:	f000 8088 	beq.w	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	2bc0      	cmp	r3, #192	@ 0xc0
 8006856:	f200 8088 	bhi.w	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	2b80      	cmp	r3, #128	@ 0x80
 800685e:	d032      	beq.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006862:	2b80      	cmp	r3, #128	@ 0x80
 8006864:	f200 8081 	bhi.w	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	2b40      	cmp	r3, #64	@ 0x40
 8006872:	d014      	beq.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006874:	e079      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006876:	4b3f      	ldr	r3, [pc, #252]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800687e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006882:	d108      	bne.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006888:	4618      	mov	r0, r3
 800688a:	f000 ff67 	bl	800775c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006892:	f000 bc9c 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689a:	f000 bc98 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800689e:	4b35      	ldr	r3, [pc, #212]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068aa:	d108      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ac:	f107 0318 	add.w	r3, r7, #24
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fcab 	bl	800720c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ba:	f000 bc88 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c2:	f000 bc84 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068c6:	4b2b      	ldr	r3, [pc, #172]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d2:	d108      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d4:	f107 030c 	add.w	r3, r7, #12
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fdeb 	bl	80074b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e2:	f000 bc74 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ea:	f000 bc70 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068ee:	4b21      	ldr	r3, [pc, #132]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b04      	cmp	r3, #4
 8006902:	d10c      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800690a:	4b1a      	ldr	r3, [pc, #104]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	08db      	lsrs	r3, r3, #3
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	4a18      	ldr	r2, [pc, #96]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006916:	fa22 f303 	lsr.w	r3, r2, r3
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800691c:	e01f      	b.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800691e:	4b15      	ldr	r3, [pc, #84]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800692a:	d106      	bne.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800692c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006932:	d102      	bne.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006934:	4b11      	ldr	r3, [pc, #68]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006938:	e011      	b.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800693a:	4b0e      	ldr	r3, [pc, #56]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006946:	d106      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800694e:	d102      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006950:	4b0b      	ldr	r3, [pc, #44]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006954:	e003      	b.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800695a:	f000 bc38 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800695e:	f000 bc36 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006962:	4b08      	ldr	r3, [pc, #32]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006966:	f000 bc32 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800696e:	f000 bc2e 	b.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006972:	bf00      	nop
 8006974:	58024400 	.word	0x58024400
 8006978:	03d09000 	.word	0x03d09000
 800697c:	003d0900 	.word	0x003d0900
 8006980:	017d7840 	.word	0x017d7840
 8006984:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800698c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006990:	430b      	orrs	r3, r1
 8006992:	f040 809c 	bne.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006996:	4b9e      	ldr	r3, [pc, #632]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800699a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800699e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069a6:	d054      	beq.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069ae:	f200 808b 	bhi.w	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069b8:	f000 8083 	beq.w	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80069bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069c2:	f200 8081 	bhi.w	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069cc:	d02f      	beq.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069d4:	d878      	bhi.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069e2:	d012      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80069e4:	e070      	b.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069e6:	4b8a      	ldr	r3, [pc, #552]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069f2:	d107      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 feaf 	bl	800775c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a02:	e3e4      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a08:	e3e1      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a0a:	4b81      	ldr	r3, [pc, #516]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a16:	d107      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a18:	f107 0318 	add.w	r3, r7, #24
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fbf5 	bl	800720c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a26:	e3d2      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a2c:	e3cf      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a2e:	4b78      	ldr	r3, [pc, #480]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a3a:	d107      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a3c:	f107 030c 	add.w	r3, r7, #12
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 fd37 	bl	80074b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a4a:	e3c0      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a50:	e3bd      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a52:	4b6f      	ldr	r3, [pc, #444]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d10c      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a6e:	4b68      	ldr	r3, [pc, #416]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	08db      	lsrs	r3, r3, #3
 8006a74:	f003 0303 	and.w	r3, r3, #3
 8006a78:	4a66      	ldr	r2, [pc, #408]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a80:	e01e      	b.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a82:	4b63      	ldr	r3, [pc, #396]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a8e:	d106      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a96:	d102      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a98:	4b5f      	ldr	r3, [pc, #380]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a9c:	e010      	b.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aaa:	d106      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ab2:	d102      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ab4:	4b59      	ldr	r3, [pc, #356]	@ (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ab8:	e002      	b.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006abe:	e386      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ac0:	e385      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ac2:	4b57      	ldr	r3, [pc, #348]	@ (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac6:	e382      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006acc:	e37f      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	f040 80a7 	bne.w	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006adc:	4b4c      	ldr	r3, [pc, #304]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006ae4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006aec:	d055      	beq.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006af4:	f200 8096 	bhi.w	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006afe:	f000 8084 	beq.w	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b08:	f200 808c 	bhi.w	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b12:	d030      	beq.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b1a:	f200 8083 	bhi.w	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b2a:	d012      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006b2c:	e07a      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b2e:	4b38      	ldr	r3, [pc, #224]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b3a:	d107      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fe0b 	bl	800775c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b4a:	e340      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b50:	e33d      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b52:	4b2f      	ldr	r3, [pc, #188]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b5e:	d107      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b60:	f107 0318 	add.w	r3, r7, #24
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fb51 	bl	800720c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b6e:	e32e      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b74:	e32b      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b76:	4b26      	ldr	r3, [pc, #152]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b82:	d107      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fc93 	bl	80074b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b92:	e31c      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b98:	e319      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ba2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d10c      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb6:	4b16      	ldr	r3, [pc, #88]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	08db      	lsrs	r3, r3, #3
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	4a14      	ldr	r2, [pc, #80]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bc8:	e01e      	b.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bca:	4b11      	ldr	r3, [pc, #68]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd6:	d106      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bde:	d102      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006be0:	4b0d      	ldr	r3, [pc, #52]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be4:	e010      	b.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006be6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bf2:	d106      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bfa:	d102      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bfc:	4b07      	ldr	r3, [pc, #28]	@ (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c00:	e002      	b.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c06:	e2e2      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c08:	e2e1      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c0a:	4b05      	ldr	r3, [pc, #20]	@ (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c0e:	e2de      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c10:	58024400 	.word	0x58024400
 8006c14:	03d09000 	.word	0x03d09000
 8006c18:	003d0900 	.word	0x003d0900
 8006c1c:	017d7840 	.word	0x017d7840
 8006c20:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c28:	e2d1      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c2e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006c32:	430b      	orrs	r3, r1
 8006c34:	f040 809c 	bne.w	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006c38:	4b93      	ldr	r3, [pc, #588]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c3c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006c40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c48:	d054      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c50:	f200 808b 	bhi.w	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c5a:	f000 8083 	beq.w	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c64:	f200 8081 	bhi.w	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c6e:	d02f      	beq.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c76:	d878      	bhi.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d004      	beq.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c84:	d012      	beq.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006c86:	e070      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c88:	4b7f      	ldr	r3, [pc, #508]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c94:	d107      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fd5e 	bl	800775c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ca4:	e293      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006caa:	e290      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cac:	4b76      	ldr	r3, [pc, #472]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb8:	d107      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cba:	f107 0318 	add.w	r3, r7, #24
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 faa4 	bl	800720c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cc8:	e281      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cce:	e27e      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cd0:	4b6d      	ldr	r3, [pc, #436]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cdc:	d107      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cde:	f107 030c 	add.w	r3, r7, #12
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fbe6 	bl	80074b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cec:	e26f      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf2:	e26c      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cf4:	4b64      	ldr	r3, [pc, #400]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cfc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cfe:	4b62      	ldr	r3, [pc, #392]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d10c      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d10:	4b5d      	ldr	r3, [pc, #372]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	08db      	lsrs	r3, r3, #3
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d22:	e01e      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d24:	4b58      	ldr	r3, [pc, #352]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d30:	d106      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d38:	d102      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d3a:	4b55      	ldr	r3, [pc, #340]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d3e:	e010      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d40:	4b51      	ldr	r3, [pc, #324]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d4c:	d106      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d54:	d102      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d56:	4b4f      	ldr	r3, [pc, #316]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d5a:	e002      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d60:	e235      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d62:	e234      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d64:	4b4c      	ldr	r3, [pc, #304]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d68:	e231      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d6e:	e22e      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	f040 808f 	bne.w	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006d7e:	4b42      	ldr	r3, [pc, #264]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d82:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006d86:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d8e:	d06b      	beq.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d96:	d874      	bhi.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d9e:	d056      	beq.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006da6:	d86c      	bhi.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dae:	d03b      	beq.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006db6:	d864      	bhi.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dbe:	d021      	beq.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dc6:	d85c      	bhi.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd4:	d004      	beq.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006dd6:	e054      	b.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006dd8:	f7fe fa22 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 8006ddc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006dde:	e1f6      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006de0:	4b29      	ldr	r3, [pc, #164]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006de8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dec:	d107      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dee:	f107 0318 	add.w	r3, r7, #24
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fa0a 	bl	800720c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dfc:	e1e7      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e02:	e1e4      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e04:	4b20      	ldr	r3, [pc, #128]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e10:	d107      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e12:	f107 030c 	add.w	r3, r7, #12
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fb4c 	bl	80074b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e20:	e1d5      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e26:	e1d2      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e28:	4b17      	ldr	r3, [pc, #92]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d109      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e34:	4b14      	ldr	r3, [pc, #80]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	08db      	lsrs	r3, r3, #3
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	4a13      	ldr	r2, [pc, #76]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e46:	e1c2      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e4c:	e1bf      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e5a:	d102      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e60:	e1b5      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e66:	e1b2      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e68:	4b07      	ldr	r3, [pc, #28]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e74:	d102      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006e76:	4b07      	ldr	r3, [pc, #28]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e7a:	e1a8      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e80:	e1a5      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e86:	e1a2      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e88:	58024400 	.word	0x58024400
 8006e8c:	03d09000 	.word	0x03d09000
 8006e90:	003d0900 	.word	0x003d0900
 8006e94:	017d7840 	.word	0x017d7840
 8006e98:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	d173      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006ea8:	4b9c      	ldr	r3, [pc, #624]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006eb0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb8:	d02f      	beq.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ec0:	d863      	bhi.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ece:	d012      	beq.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006ed0:	e05b      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ed2:	4b92      	ldr	r3, [pc, #584]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ee0:	f107 0318 	add.w	r3, r7, #24
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 f991 	bl	800720c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eee:	e16e      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef4:	e16b      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ef6:	4b89      	ldr	r3, [pc, #548]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f02:	d107      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f04:	f107 030c 	add.w	r3, r7, #12
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fad3 	bl	80074b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f12:	e15c      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f18:	e159      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f1a:	4b80      	ldr	r3, [pc, #512]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f24:	4b7d      	ldr	r3, [pc, #500]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d10c      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d109      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f36:	4b79      	ldr	r3, [pc, #484]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	08db      	lsrs	r3, r3, #3
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	4a77      	ldr	r2, [pc, #476]	@ (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006f42:	fa22 f303 	lsr.w	r3, r2, r3
 8006f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f48:	e01e      	b.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f4a:	4b74      	ldr	r3, [pc, #464]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f56:	d106      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f5e:	d102      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f60:	4b70      	ldr	r3, [pc, #448]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f64:	e010      	b.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f66:	4b6d      	ldr	r3, [pc, #436]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f72:	d106      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f7a:	d102      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f80:	e002      	b.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f86:	e122      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f88:	e121      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f8e:	e11e      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f94:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	d133      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fa4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fb2:	d012      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006fb4:	e023      	b.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fb6:	4b59      	ldr	r3, [pc, #356]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fc2:	d107      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fbc7 	bl	800775c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fd2:	e0fc      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fd8:	e0f9      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fda:	4b50      	ldr	r3, [pc, #320]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fe6:	d107      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe8:	f107 0318 	add.w	r3, r7, #24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 f90d 	bl	800720c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ff6:	e0ea      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ffc:	e0e7      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007002:	e0e4      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007008:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800700c:	430b      	orrs	r3, r1
 800700e:	f040 808d 	bne.w	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007012:	4b42      	ldr	r3, [pc, #264]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007016:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800701a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800701c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007022:	d06b      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800702a:	d874      	bhi.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007032:	d056      	beq.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703a:	d86c      	bhi.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800703c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007042:	d03b      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800704a:	d864      	bhi.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800704c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007052:	d021      	beq.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800705a:	d85c      	bhi.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800705c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007068:	d004      	beq.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800706a:	e054      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800706c:	f000 f8b8 	bl	80071e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007070:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007072:	e0ac      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007074:	4b29      	ldr	r3, [pc, #164]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800707c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007080:	d107      	bne.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007082:	f107 0318 	add.w	r3, r7, #24
 8007086:	4618      	mov	r0, r3
 8007088:	f000 f8c0 	bl	800720c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007090:	e09d      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007096:	e09a      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007098:	4b20      	ldr	r3, [pc, #128]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070a4:	d107      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070a6:	f107 030c 	add.w	r3, r7, #12
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fa02 	bl	80074b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070b4:	e08b      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ba:	e088      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070bc:	4b17      	ldr	r3, [pc, #92]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d109      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070c8:	4b14      	ldr	r3, [pc, #80]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	08db      	lsrs	r3, r3, #3
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	4a13      	ldr	r2, [pc, #76]	@ (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80070d4:	fa22 f303 	lsr.w	r3, r2, r3
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070da:	e078      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e0:	e075      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80070e2:	4b0e      	ldr	r3, [pc, #56]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ee:	d102      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80070f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f4:	e06b      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070fa:	e068      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070fc:	4b07      	ldr	r3, [pc, #28]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007104:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007108:	d102      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800710a:	4b07      	ldr	r3, [pc, #28]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800710c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800710e:	e05e      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007114:	e05b      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800711a:	e058      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800711c:	58024400 	.word	0x58024400
 8007120:	03d09000 	.word	0x03d09000
 8007124:	003d0900 	.word	0x003d0900
 8007128:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800712c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007130:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007134:	430b      	orrs	r3, r1
 8007136:	d148      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007138:	4b27      	ldr	r3, [pc, #156]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800713a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800713c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007140:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007148:	d02a      	beq.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007150:	d838      	bhi.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800715e:	d00d      	beq.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007160:	e030      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007162:	4b1d      	ldr	r3, [pc, #116]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800716a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800716e:	d102      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007170:	4b1a      	ldr	r3, [pc, #104]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007174:	e02b      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800717a:	e028      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800717c:	4b16      	ldr	r3, [pc, #88]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007184:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007188:	d107      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800718a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fae4 	bl	800775c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007198:	e019      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800719e:	e016      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071a0:	4b0d      	ldr	r3, [pc, #52]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071ac:	d107      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ae:	f107 0318 	add.w	r3, r7, #24
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 f82a 	bl	800720c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071bc:	e007      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071c2:	e004      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071c8:	e001      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80071ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3740      	adds	r7, #64	@ 0x40
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	58024400 	.word	0x58024400
 80071dc:	017d7840 	.word	0x017d7840

080071e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80071e4:	f7fd ffec 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 80071e8:	4602      	mov	r2, r0
 80071ea:	4b06      	ldr	r3, [pc, #24]	@ (8007204 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	091b      	lsrs	r3, r3, #4
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	4904      	ldr	r1, [pc, #16]	@ (8007208 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071f6:	5ccb      	ldrb	r3, [r1, r3]
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007200:	4618      	mov	r0, r3
 8007202:	bd80      	pop	{r7, pc}
 8007204:	58024400 	.word	0x58024400
 8007208:	0800b3cc 	.word	0x0800b3cc

0800720c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800720c:	b480      	push	{r7}
 800720e:	b089      	sub	sp, #36	@ 0x24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007214:	4ba1      	ldr	r3, [pc, #644]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007218:	f003 0303 	and.w	r3, r3, #3
 800721c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800721e:	4b9f      	ldr	r3, [pc, #636]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007222:	0b1b      	lsrs	r3, r3, #12
 8007224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007228:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800722a:	4b9c      	ldr	r3, [pc, #624]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	091b      	lsrs	r3, r3, #4
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007236:	4b99      	ldr	r3, [pc, #612]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723a:	08db      	lsrs	r3, r3, #3
 800723c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8111 	beq.w	800747c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b02      	cmp	r3, #2
 800725e:	f000 8083 	beq.w	8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b02      	cmp	r3, #2
 8007266:	f200 80a1 	bhi.w	80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d056      	beq.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007276:	e099      	b.n	80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007278:	4b88      	ldr	r3, [pc, #544]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	d02d      	beq.n	80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007284:	4b85      	ldr	r3, [pc, #532]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	08db      	lsrs	r3, r3, #3
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	4a84      	ldr	r2, [pc, #528]	@ (80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007290:	fa22 f303 	lsr.w	r3, r2, r3
 8007294:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	ee07 3a90 	vmov	s15, r3
 800729c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ae:	4b7b      	ldr	r3, [pc, #492]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072be:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072de:	e087      	b.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80072ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f2:	4b6a      	ldr	r3, [pc, #424]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007302:	ed97 6a03 	vldr	s12, [r7, #12]
 8007306:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800730a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007322:	e065      	b.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80074ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007336:	4b59      	ldr	r3, [pc, #356]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007346:	ed97 6a03 	vldr	s12, [r7, #12]
 800734a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800734e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800735a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007366:	e043      	b.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007372:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80074b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800737a:	4b48      	ldr	r3, [pc, #288]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738a:	ed97 6a03 	vldr	s12, [r7, #12]
 800738e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800739e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073aa:	e021      	b.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80074ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073be:	4b37      	ldr	r3, [pc, #220]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80073d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80073f0:	4b2a      	ldr	r3, [pc, #168]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f4:	0a5b      	lsrs	r3, r3, #9
 80073f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740a:	edd7 6a07 	vldr	s13, [r7, #28]
 800740e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007416:	ee17 2a90 	vmov	r2, s15
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800741e:	4b1f      	ldr	r3, [pc, #124]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007422:	0c1b      	lsrs	r3, r3, #16
 8007424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007428:	ee07 3a90 	vmov	s15, r3
 800742c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007430:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007434:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007438:	edd7 6a07 	vldr	s13, [r7, #28]
 800743c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007444:	ee17 2a90 	vmov	r2, s15
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800744c:	4b13      	ldr	r3, [pc, #76]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007450:	0e1b      	lsrs	r3, r3, #24
 8007452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007466:	edd7 6a07 	vldr	s13, [r7, #28]
 800746a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800746e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007472:	ee17 2a90 	vmov	r2, s15
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800747a:	e008      	b.n	800748e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	609a      	str	r2, [r3, #8]
}
 800748e:	bf00      	nop
 8007490:	3724      	adds	r7, #36	@ 0x24
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	58024400 	.word	0x58024400
 80074a0:	03d09000 	.word	0x03d09000
 80074a4:	46000000 	.word	0x46000000
 80074a8:	4c742400 	.word	0x4c742400
 80074ac:	4a742400 	.word	0x4a742400
 80074b0:	4bbebc20 	.word	0x4bbebc20

080074b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b089      	sub	sp, #36	@ 0x24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074bc:	4ba1      	ldr	r3, [pc, #644]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80074c6:	4b9f      	ldr	r3, [pc, #636]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ca:	0d1b      	lsrs	r3, r3, #20
 80074cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80074d2:	4b9c      	ldr	r3, [pc, #624]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80074de:	4b99      	ldr	r3, [pc, #612]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e2:	08db      	lsrs	r3, r3, #3
 80074e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 8111 	beq.w	8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b02      	cmp	r3, #2
 8007506:	f000 8083 	beq.w	8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b02      	cmp	r3, #2
 800750e:	f200 80a1 	bhi.w	8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d056      	beq.n	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800751e:	e099      	b.n	8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007520:	4b88      	ldr	r3, [pc, #544]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b00      	cmp	r3, #0
 800752a:	d02d      	beq.n	8007588 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800752c:	4b85      	ldr	r3, [pc, #532]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	08db      	lsrs	r3, r3, #3
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	4a84      	ldr	r2, [pc, #528]	@ (8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007538:	fa22 f303 	lsr.w	r3, r2, r3
 800753c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007556:	4b7b      	ldr	r3, [pc, #492]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007566:	ed97 6a03 	vldr	s12, [r7, #12]
 800756a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800756e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800757a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007586:	e087      	b.n	8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b6a      	ldr	r3, [pc, #424]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800759c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ca:	e065      	b.n	8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075de:	4b59      	ldr	r3, [pc, #356]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800760e:	e043      	b.n	8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007758 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800761e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007622:	4b48      	ldr	r3, [pc, #288]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007632:	ed97 6a03 	vldr	s12, [r7, #12]
 8007636:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800763a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007652:	e021      	b.n	8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007666:	4b37      	ldr	r3, [pc, #220]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007676:	ed97 6a03 	vldr	s12, [r7, #12]
 800767a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800767e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800768a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007696:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007698:	4b2a      	ldr	r3, [pc, #168]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800769a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769c:	0a5b      	lsrs	r3, r3, #9
 800769e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076be:	ee17 2a90 	vmov	r2, s15
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80076c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ca:	0c1b      	lsrs	r3, r3, #16
 80076cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d0:	ee07 3a90 	vmov	s15, r3
 80076d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ec:	ee17 2a90 	vmov	r2, s15
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80076f4:	4b13      	ldr	r3, [pc, #76]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f8:	0e1b      	lsrs	r3, r3, #24
 80076fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800770a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800770e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800771a:	ee17 2a90 	vmov	r2, s15
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007722:	e008      	b.n	8007736 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	609a      	str	r2, [r3, #8]
}
 8007736:	bf00      	nop
 8007738:	3724      	adds	r7, #36	@ 0x24
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	58024400 	.word	0x58024400
 8007748:	03d09000 	.word	0x03d09000
 800774c:	46000000 	.word	0x46000000
 8007750:	4c742400 	.word	0x4c742400
 8007754:	4a742400 	.word	0x4a742400
 8007758:	4bbebc20 	.word	0x4bbebc20

0800775c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800775c:	b480      	push	{r7}
 800775e:	b089      	sub	sp, #36	@ 0x24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007764:	4ba0      	ldr	r3, [pc, #640]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800776e:	4b9e      	ldr	r3, [pc, #632]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007772:	091b      	lsrs	r3, r3, #4
 8007774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007778:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800777a:	4b9b      	ldr	r3, [pc, #620]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800777c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007784:	4b98      	ldr	r3, [pc, #608]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007788:	08db      	lsrs	r3, r3, #3
 800778a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	ee07 3a90 	vmov	s15, r3
 8007798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 8111 	beq.w	80079ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	f000 8083 	beq.w	80078b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	f200 80a1 	bhi.w	80078fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d056      	beq.n	8007872 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80077c4:	e099      	b.n	80078fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077c6:	4b88      	ldr	r3, [pc, #544]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d02d      	beq.n	800782e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077d2:	4b85      	ldr	r3, [pc, #532]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	08db      	lsrs	r3, r3, #3
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	4a83      	ldr	r2, [pc, #524]	@ (80079ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80077de:	fa22 f303 	lsr.w	r3, r2, r3
 80077e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	ee07 3a90 	vmov	s15, r3
 80077f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fc:	4b7a      	ldr	r3, [pc, #488]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007804:	ee07 3a90 	vmov	s15, r3
 8007808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007810:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007828:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800782c:	e087      	b.n	800793e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007838:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80079f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800783c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007840:	4b69      	ldr	r3, [pc, #420]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007848:	ee07 3a90 	vmov	s15, r3
 800784c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007850:	ed97 6a03 	vldr	s12, [r7, #12]
 8007854:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007870:	e065      	b.n	800793e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	ee07 3a90 	vmov	s15, r3
 8007878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007884:	4b58      	ldr	r3, [pc, #352]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788c:	ee07 3a90 	vmov	s15, r3
 8007890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007894:	ed97 6a03 	vldr	s12, [r7, #12]
 8007898:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800789c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b4:	e043      	b.n	800793e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80079fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80078c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c8:	4b47      	ldr	r3, [pc, #284]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d0:	ee07 3a90 	vmov	s15, r3
 80078d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078f8:	e021      	b.n	800793e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007904:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80079f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790c:	4b36      	ldr	r3, [pc, #216]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800790e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007914:	ee07 3a90 	vmov	s15, r3
 8007918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007920:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007938:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800793c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800793e:	4b2a      	ldr	r3, [pc, #168]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007942:	0a5b      	lsrs	r3, r3, #9
 8007944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007958:	edd7 6a07 	vldr	s13, [r7, #28]
 800795c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007964:	ee17 2a90 	vmov	r2, s15
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800796c:	4b1e      	ldr	r3, [pc, #120]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800796e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007970:	0c1b      	lsrs	r3, r3, #16
 8007972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007986:	edd7 6a07 	vldr	s13, [r7, #28]
 800798a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800798e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007992:	ee17 2a90 	vmov	r2, s15
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800799a:	4b13      	ldr	r3, [pc, #76]	@ (80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800799c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799e:	0e1b      	lsrs	r3, r3, #24
 80079a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079a4:	ee07 3a90 	vmov	s15, r3
 80079a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80079b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079c0:	ee17 2a90 	vmov	r2, s15
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80079c8:	e008      	b.n	80079dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	609a      	str	r2, [r3, #8]
}
 80079dc:	bf00      	nop
 80079de:	3724      	adds	r7, #36	@ 0x24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	58024400 	.word	0x58024400
 80079ec:	03d09000 	.word	0x03d09000
 80079f0:	46000000 	.word	0x46000000
 80079f4:	4c742400 	.word	0x4c742400
 80079f8:	4a742400 	.word	0x4a742400
 80079fc:	4bbebc20 	.word	0x4bbebc20

08007a00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a0e:	4b53      	ldr	r3, [pc, #332]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d101      	bne.n	8007a1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e099      	b.n	8007b52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a1e:	4b4f      	ldr	r3, [pc, #316]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a4e      	ldr	r2, [pc, #312]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007a24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a2a:	f7f9 fa9b 	bl	8000f64 <HAL_GetTick>
 8007a2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a30:	e008      	b.n	8007a44 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a32:	f7f9 fa97 	bl	8000f64 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d901      	bls.n	8007a44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e086      	b.n	8007b52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a44:	4b45      	ldr	r3, [pc, #276]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1f0      	bne.n	8007a32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a50:	4b42      	ldr	r3, [pc, #264]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a54:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	031b      	lsls	r3, r3, #12
 8007a5e:	493f      	ldr	r1, [pc, #252]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	025b      	lsls	r3, r3, #9
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	041b      	lsls	r3, r3, #16
 8007a82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	061b      	lsls	r3, r3, #24
 8007a90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a94:	4931      	ldr	r1, [pc, #196]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a9a:	4b30      	ldr	r3, [pc, #192]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	492d      	ldr	r1, [pc, #180]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007aac:	4b2b      	ldr	r3, [pc, #172]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab0:	f023 0220 	bic.w	r2, r3, #32
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	4928      	ldr	r1, [pc, #160]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007abe:	4b27      	ldr	r3, [pc, #156]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac2:	4a26      	ldr	r2, [pc, #152]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007ac4:	f023 0310 	bic.w	r3, r3, #16
 8007ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007aca:	4b24      	ldr	r3, [pc, #144]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007acc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ace:	4b24      	ldr	r3, [pc, #144]	@ (8007b60 <RCCEx_PLL2_Config+0x160>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	69d2      	ldr	r2, [r2, #28]
 8007ad6:	00d2      	lsls	r2, r2, #3
 8007ad8:	4920      	ldr	r1, [pc, #128]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ade:	4b1f      	ldr	r3, [pc, #124]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007ae4:	f043 0310 	orr.w	r3, r3, #16
 8007ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d106      	bne.n	8007afe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007af0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	4a19      	ldr	r2, [pc, #100]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007af6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007afa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007afc:	e00f      	b.n	8007b1e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d106      	bne.n	8007b12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b04:	4b15      	ldr	r3, [pc, #84]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b08:	4a14      	ldr	r2, [pc, #80]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b10:	e005      	b.n	8007b1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b12:	4b12      	ldr	r3, [pc, #72]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	4a11      	ldr	r2, [pc, #68]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007b18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a0e      	ldr	r2, [pc, #56]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007b24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b2a:	f7f9 fa1b 	bl	8000f64 <HAL_GetTick>
 8007b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b30:	e008      	b.n	8007b44 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b32:	f7f9 fa17 	bl	8000f64 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d901      	bls.n	8007b44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e006      	b.n	8007b52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b44:	4b05      	ldr	r3, [pc, #20]	@ (8007b5c <RCCEx_PLL2_Config+0x15c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0f0      	beq.n	8007b32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	58024400 	.word	0x58024400
 8007b60:	ffff0007 	.word	0xffff0007

08007b64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b72:	4b53      	ldr	r3, [pc, #332]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d101      	bne.n	8007b82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e099      	b.n	8007cb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b82:	4b4f      	ldr	r3, [pc, #316]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a4e      	ldr	r2, [pc, #312]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b8e:	f7f9 f9e9 	bl	8000f64 <HAL_GetTick>
 8007b92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b94:	e008      	b.n	8007ba8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b96:	f7f9 f9e5 	bl	8000f64 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e086      	b.n	8007cb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ba8:	4b45      	ldr	r3, [pc, #276]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1f0      	bne.n	8007b96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007bb4:	4b42      	ldr	r3, [pc, #264]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	051b      	lsls	r3, r3, #20
 8007bc2:	493f      	ldr	r1, [pc, #252]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	025b      	lsls	r3, r3, #9
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007bea:	431a      	orrs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	061b      	lsls	r3, r3, #24
 8007bf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007bf8:	4931      	ldr	r1, [pc, #196]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007bfe:	4b30      	ldr	r3, [pc, #192]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	492d      	ldr	r1, [pc, #180]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c10:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	4928      	ldr	r1, [pc, #160]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c22:	4b27      	ldr	r3, [pc, #156]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c26:	4a26      	ldr	r2, [pc, #152]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c2e:	4b24      	ldr	r3, [pc, #144]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c32:	4b24      	ldr	r3, [pc, #144]	@ (8007cc4 <RCCEx_PLL3_Config+0x160>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	69d2      	ldr	r2, [r2, #28]
 8007c3a:	00d2      	lsls	r2, r2, #3
 8007c3c:	4920      	ldr	r1, [pc, #128]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c42:	4b1f      	ldr	r3, [pc, #124]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c46:	4a1e      	ldr	r2, [pc, #120]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d106      	bne.n	8007c62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c54:	4b1a      	ldr	r3, [pc, #104]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	4a19      	ldr	r2, [pc, #100]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c60:	e00f      	b.n	8007c82 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d106      	bne.n	8007c76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c68:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6c:	4a14      	ldr	r2, [pc, #80]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c74:	e005      	b.n	8007c82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c76:	4b12      	ldr	r3, [pc, #72]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7a:	4a11      	ldr	r2, [pc, #68]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c82:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a0e      	ldr	r2, [pc, #56]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c8e:	f7f9 f969 	bl	8000f64 <HAL_GetTick>
 8007c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c94:	e008      	b.n	8007ca8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c96:	f7f9 f965 	bl	8000f64 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e006      	b.n	8007cb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ca8:	4b05      	ldr	r3, [pc, #20]	@ (8007cc0 <RCCEx_PLL3_Config+0x15c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0f0      	beq.n	8007c96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	58024400 	.word	0x58024400
 8007cc4:	ffff0007 	.word	0xffff0007

08007cc8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	@ 0x28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e28e      	b.n	80081f8 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007cda:	f7f9 f94f 	bl	8000f7c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d113      	bne.n	8007d10 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a96      	ldr	r2, [pc, #600]	@ (8007f48 <HAL_SAI_Init+0x280>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_SAI_Init+0x34>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a95      	ldr	r2, [pc, #596]	@ (8007f4c <HAL_SAI_Init+0x284>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d107      	bne.n	8007d0c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d103      	bne.n	8007d0c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e273      	b.n	80081f8 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a8c      	ldr	r2, [pc, #560]	@ (8007f48 <HAL_SAI_Init+0x280>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d004      	beq.n	8007d24 <HAL_SAI_Init+0x5c>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a8c      	ldr	r2, [pc, #560]	@ (8007f50 <HAL_SAI_Init+0x288>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d102      	bne.n	8007d2a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007d24:	4b8b      	ldr	r3, [pc, #556]	@ (8007f54 <HAL_SAI_Init+0x28c>)
 8007d26:	61bb      	str	r3, [r7, #24]
 8007d28:	e028      	b.n	8007d7c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a8a      	ldr	r2, [pc, #552]	@ (8007f58 <HAL_SAI_Init+0x290>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d004      	beq.n	8007d3e <HAL_SAI_Init+0x76>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a88      	ldr	r2, [pc, #544]	@ (8007f5c <HAL_SAI_Init+0x294>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d102      	bne.n	8007d44 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007d3e:	4b88      	ldr	r3, [pc, #544]	@ (8007f60 <HAL_SAI_Init+0x298>)
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	e01b      	b.n	8007d7c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a86      	ldr	r2, [pc, #536]	@ (8007f64 <HAL_SAI_Init+0x29c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <HAL_SAI_Init+0x90>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a85      	ldr	r2, [pc, #532]	@ (8007f68 <HAL_SAI_Init+0x2a0>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d102      	bne.n	8007d5e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007d58:	4b84      	ldr	r3, [pc, #528]	@ (8007f6c <HAL_SAI_Init+0x2a4>)
 8007d5a:	61bb      	str	r3, [r7, #24]
 8007d5c:	e00e      	b.n	8007d7c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a7a      	ldr	r2, [pc, #488]	@ (8007f4c <HAL_SAI_Init+0x284>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d004      	beq.n	8007d72 <HAL_SAI_Init+0xaa>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a80      	ldr	r2, [pc, #512]	@ (8007f70 <HAL_SAI_Init+0x2a8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d102      	bne.n	8007d78 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007d72:	4b80      	ldr	r3, [pc, #512]	@ (8007f74 <HAL_SAI_Init+0x2ac>)
 8007d74:	61bb      	str	r3, [r7, #24]
 8007d76:	e001      	b.n	8007d7c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e23d      	b.n	80081f8 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d106      	bne.n	8007d96 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7f8 febd 	bl	8000b10 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fddc 	bl	8008954 <SAI_Disable>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e228      	b.n	80081f8 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2202      	movs	r2, #2
 8007daa:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d00c      	beq.n	8007dd0 <HAL_SAI_Init+0x108>
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d80d      	bhi.n	8007dd6 <HAL_SAI_Init+0x10e>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <HAL_SAI_Init+0xfc>
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d003      	beq.n	8007dca <HAL_SAI_Init+0x102>
 8007dc2:	e008      	b.n	8007dd6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007dc8:	e008      	b.n	8007ddc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007dca:	2310      	movs	r3, #16
 8007dcc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007dce:	e005      	b.n	8007ddc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007dd0:	2320      	movs	r3, #32
 8007dd2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007dd4:	e002      	b.n	8007ddc <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007dda:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	2b05      	cmp	r3, #5
 8007de2:	d832      	bhi.n	8007e4a <HAL_SAI_Init+0x182>
 8007de4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dec <HAL_SAI_Init+0x124>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007e05 	.word	0x08007e05
 8007df0:	08007e0b 	.word	0x08007e0b
 8007df4:	08007e13 	.word	0x08007e13
 8007df8:	08007e1b 	.word	0x08007e1b
 8007dfc:	08007e2b 	.word	0x08007e2b
 8007e00:	08007e3b 	.word	0x08007e3b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
      break;
 8007e08:	e022      	b.n	8007e50 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e0e:	61fb      	str	r3, [r7, #28]
      break;
 8007e10:	e01e      	b.n	8007e50 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e16:	61fb      	str	r3, [r7, #28]
      break;
 8007e18:	e01a      	b.n	8007e50 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e1e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e22:	f043 0301 	orr.w	r3, r3, #1
 8007e26:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007e28:	e012      	b.n	8007e50 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e2e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	f043 0302 	orr.w	r3, r3, #2
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007e38:	e00a      	b.n	8007e50 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e3e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e42:	f043 0303 	orr.w	r3, r3, #3
 8007e46:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007e48:	e002      	b.n	8007e50 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
      break;
 8007e4e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e54:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 80c5 	beq.w	8007fea <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a37      	ldr	r2, [pc, #220]	@ (8007f48 <HAL_SAI_Init+0x280>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d004      	beq.n	8007e78 <HAL_SAI_Init+0x1b0>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a37      	ldr	r2, [pc, #220]	@ (8007f50 <HAL_SAI_Init+0x288>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d106      	bne.n	8007e86 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007e78:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007e7c:	f04f 0100 	mov.w	r1, #0
 8007e80:	f7fe fc2e 	bl	80066e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e84:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a33      	ldr	r2, [pc, #204]	@ (8007f58 <HAL_SAI_Init+0x290>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d004      	beq.n	8007e9a <HAL_SAI_Init+0x1d2>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a31      	ldr	r2, [pc, #196]	@ (8007f5c <HAL_SAI_Init+0x294>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d106      	bne.n	8007ea8 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007e9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007e9e:	f04f 0100 	mov.w	r1, #0
 8007ea2:	f7fe fc1d 	bl	80066e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ea6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a2d      	ldr	r2, [pc, #180]	@ (8007f64 <HAL_SAI_Init+0x29c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d004      	beq.n	8007ebc <HAL_SAI_Init+0x1f4>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f68 <HAL_SAI_Init+0x2a0>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d106      	bne.n	8007eca <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007ebc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007ec0:	f04f 0100 	mov.w	r1, #0
 8007ec4:	f7fe fc0c 	bl	80066e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ec8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a1f      	ldr	r2, [pc, #124]	@ (8007f4c <HAL_SAI_Init+0x284>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d106      	bne.n	8007ee2 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007ed4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007ed8:	f04f 0100 	mov.w	r1, #0
 8007edc:	f7fe fc00 	bl	80066e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ee0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a22      	ldr	r2, [pc, #136]	@ (8007f70 <HAL_SAI_Init+0x2a8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d106      	bne.n	8007efa <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007eec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007ef0:	f04f 0100 	mov.w	r1, #0
 8007ef4:	f7fe fbf4 	bl	80066e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ef8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f02:	d139      	bne.n	8007f78 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d102      	bne.n	8007f12 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007f0c:	2340      	movs	r3, #64	@ 0x40
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e00a      	b.n	8007f28 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	d103      	bne.n	8007f22 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	e002      	b.n	8007f28 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f26:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	4619      	mov	r1, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	fb02 f303 	mul.w	r3, r2, r3
 8007f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f42:	613b      	str	r3, [r7, #16]
 8007f44:	e030      	b.n	8007fa8 <HAL_SAI_Init+0x2e0>
 8007f46:	bf00      	nop
 8007f48:	40015804 	.word	0x40015804
 8007f4c:	58005404 	.word	0x58005404
 8007f50:	40015824 	.word	0x40015824
 8007f54:	40015800 	.word	0x40015800
 8007f58:	40015c04 	.word	0x40015c04
 8007f5c:	40015c24 	.word	0x40015c24
 8007f60:	40015c00 	.word	0x40015c00
 8007f64:	40016004 	.word	0x40016004
 8007f68:	40016024 	.word	0x40016024
 8007f6c:	40016000 	.word	0x40016000
 8007f70:	58005424 	.word	0x58005424
 8007f74:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f80:	d101      	bne.n	8007f86 <HAL_SAI_Init+0x2be>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e000      	b.n	8007f88 <HAL_SAI_Init+0x2c0>
 8007f86:	2301      	movs	r3, #1
 8007f88:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	4619      	mov	r1, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	fb02 f303 	mul.w	r3, r2, r3
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fa6:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	4a95      	ldr	r2, [pc, #596]	@ (8008200 <HAL_SAI_Init+0x538>)
 8007fac:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb0:	08da      	lsrs	r2, r3, #3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007fb6:	6939      	ldr	r1, [r7, #16]
 8007fb8:	4b91      	ldr	r3, [pc, #580]	@ (8008200 <HAL_SAI_Init+0x538>)
 8007fba:	fba3 2301 	umull	r2, r3, r3, r1
 8007fbe:	08da      	lsrs	r2, r3, #3
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	1aca      	subs	r2, r1, r3
 8007fca:	2a08      	cmp	r2, #8
 8007fcc:	d904      	bls.n	8007fd8 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d104      	bne.n	8007fea <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe4:	085a      	lsrs	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_SAI_Init+0x332>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d109      	bne.n	800800e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d101      	bne.n	8008006 <HAL_SAI_Init+0x33e>
 8008002:	2300      	movs	r3, #0
 8008004:	e001      	b.n	800800a <HAL_SAI_Init+0x342>
 8008006:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800800a:	623b      	str	r3, [r7, #32]
 800800c:	e008      	b.n	8008020 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008012:	2b01      	cmp	r3, #1
 8008014:	d102      	bne.n	800801c <HAL_SAI_Init+0x354>
 8008016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800801a:	e000      	b.n	800801e <HAL_SAI_Init+0x356>
 800801c:	2300      	movs	r3, #0
 800801e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008020:	f7f8 ffac 	bl	8000f7c <HAL_GetREVID>
 8008024:	4603      	mov	r3, r0
 8008026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800802a:	d331      	bcc.n	8008090 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6819      	ldr	r1, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	4b73      	ldr	r3, [pc, #460]	@ (8008204 <HAL_SAI_Init+0x53c>)
 8008038:	400b      	ands	r3, r1
 800803a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6819      	ldr	r1, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800804a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008050:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008056:	431a      	orrs	r2, r3
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008064:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008070:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008076:	051b      	lsls	r3, r3, #20
 8008078:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800807e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e02d      	b.n	80080ec <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6819      	ldr	r1, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	4b5b      	ldr	r3, [pc, #364]	@ (8008208 <HAL_SAI_Init+0x540>)
 800809c:	400b      	ands	r3, r1
 800809e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6819      	ldr	r1, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ae:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080b4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ba:	431a      	orrs	r2, r3
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 80080c8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080d4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080da:	051b      	lsls	r3, r3, #20
 80080dc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080e2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6859      	ldr	r1, [r3, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4b45      	ldr	r3, [pc, #276]	@ (800820c <HAL_SAI_Init+0x544>)
 80080f8:	400b      	ands	r3, r1
 80080fa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6859      	ldr	r1, [r3, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69da      	ldr	r2, [r3, #28]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6899      	ldr	r1, [r3, #8]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	4b3a      	ldr	r3, [pc, #232]	@ (8008210 <HAL_SAI_Init+0x548>)
 8008126:	400b      	ands	r3, r1
 8008128:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6899      	ldr	r1, [r3, #8]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008134:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800813a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8008140:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8008146:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800814c:	3b01      	subs	r3, #1
 800814e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008150:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68d9      	ldr	r1, [r3, #12]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008168:	400b      	ands	r3, r1
 800816a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68d9      	ldr	r1, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800817a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008180:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008182:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008188:	3b01      	subs	r3, #1
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1e      	ldr	r2, [pc, #120]	@ (8008214 <HAL_SAI_Init+0x54c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d004      	beq.n	80081aa <HAL_SAI_Init+0x4e2>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008218 <HAL_SAI_Init+0x550>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d119      	bne.n	80081de <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ae:	f023 0201 	bic.w	r2, r3, #1
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d10e      	bne.n	80081de <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c8:	3b01      	subs	r3, #1
 80081ca:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80081cc:	431a      	orrs	r2, r3
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d6:	f043 0201 	orr.w	r2, r3, #1
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3728      	adds	r7, #40	@ 0x28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	cccccccd 	.word	0xcccccccd
 8008204:	f005c010 	.word	0xf005c010
 8008208:	f805c010 	.word	0xf805c010
 800820c:	ffff1ff0 	.word	0xffff1ff0
 8008210:	fff88000 	.word	0xfff88000
 8008214:	40015804 	.word	0x40015804
 8008218:	58005404 	.word	0x58005404

0800821c <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_SAI_DMAStop+0x1a>
 8008232:	2302      	movs	r3, #2
 8008234:	e06c      	b.n	8008310 <HAL_SAI_DMAStop+0xf4>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fb88 	bl	8008954 <SAI_Disable>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <HAL_SAI_DMAStop+0x32>
  {
    status = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	73fb      	strb	r3, [r7, #15]
  }

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800825c:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b12      	cmp	r3, #18
 8008268:	d11d      	bne.n	80082a6 <HAL_SAI_DMAStop+0x8a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008270:	2b00      	cmp	r3, #0
 8008272:	d018      	beq.n	80082a6 <HAL_SAI_DMAStop+0x8a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800827a:	4618      	mov	r0, r3
 800827c:	f7f9 fd60 	bl	8001d40 <HAL_DMA_Abort>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00f      	beq.n	80082a6 <HAL_SAI_DMAStop+0x8a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800828c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828e:	2b80      	cmp	r3, #128	@ 0x80
 8008290:	d009      	beq.n	80082a6 <HAL_SAI_DMAStop+0x8a>
      {
        status = HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800829c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b22      	cmp	r3, #34	@ 0x22
 80082b0:	d11d      	bne.n	80082ee <HAL_SAI_DMAStop+0xd2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d018      	beq.n	80082ee <HAL_SAI_DMAStop+0xd2>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f9 fd3c 	bl	8001d40 <HAL_DMA_Abort>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00f      	beq.n	80082ee <HAL_SAI_DMAStop+0xd2>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082d6:	2b80      	cmp	r3, #128	@ 0x80
 80082d8:	d009      	beq.n	80082ee <HAL_SAI_DMAStop+0xd2>
      {
        status = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f042 0208 	orr.w	r2, r2, #8
 80082fc:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <HAL_SAI_Abort+0x1a>
 800832e:	2302      	movs	r3, #2
 8008330:	e07d      	b.n	800842e <HAL_SAI_Abort+0x116>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fb0a 	bl	8008954 <SAI_Disable>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008354:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008358:	d14f      	bne.n	80083fa <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008368:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b12      	cmp	r3, #18
 8008374:	d11d      	bne.n	80083b2 <HAL_SAI_Abort+0x9a>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800837c:	2b00      	cmp	r3, #0
 800837e:	d018      	beq.n	80083b2 <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008386:	4618      	mov	r0, r3
 8008388:	f7f9 fcda 	bl	8001d40 <HAL_DMA_Abort>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00f      	beq.n	80083b2 <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839a:	2b80      	cmp	r3, #128	@ 0x80
 800839c:	d009      	beq.n	80083b2 <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b22      	cmp	r3, #34	@ 0x22
 80083bc:	d11d      	bne.n	80083fa <HAL_SAI_Abort+0xe2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d018      	beq.n	80083fa <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7f9 fcb6 	bl	8001d40 <HAL_DMA_Abort>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00f      	beq.n	80083fa <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083e2:	2b80      	cmp	r3, #128	@ 0x80
 80083e4:	d009      	beq.n	80083fa <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2200      	movs	r2, #0
 8008400:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800840a:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0208 	orr.w	r2, r2, #8
 800841a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	4613      	mov	r3, r2
 8008444:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <HAL_SAI_Receive_DMA+0x1a>
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e079      	b.n	800854a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b01      	cmp	r3, #1
 8008460:	d172      	bne.n	8008548 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_SAI_Receive_DMA+0x38>
 800846c:	2302      	movs	r3, #2
 800846e:	e06c      	b.n	800854a <HAL_SAI_Receive_DMA+0x112>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	88fa      	ldrh	r2, [r7, #6]
 800848a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2222      	movs	r2, #34	@ 0x22
 800849a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084a4:	4a2b      	ldr	r2, [pc, #172]	@ (8008554 <HAL_SAI_Receive_DMA+0x11c>)
 80084a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008558 <HAL_SAI_Receive_DMA+0x120>)
 80084b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084b8:	4a28      	ldr	r2, [pc, #160]	@ (800855c <HAL_SAI_Receive_DMA+0x124>)
 80084ba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084c2:	2200      	movs	r2, #0
 80084c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	331c      	adds	r3, #28
 80084d2:	4619      	mov	r1, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084d8:	461a      	mov	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 80084e0:	f7f9 f9c4 	bl	800186c <HAL_DMA_Start_IT>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e029      	b.n	800854a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80084f6:	2100      	movs	r1, #0
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 f9f3 	bl	80088e4 <SAI_InterruptFlag>
 80084fe:	4601      	mov	r1, r0
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	691a      	ldr	r2, [r3, #16]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800851c:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d107      	bne.n	800853c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800853a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	e000      	b.n	800854a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008548:	2302      	movs	r3, #2
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	08008a29 	.word	0x08008a29
 8008558:	080089c9 	.word	0x080089c9
 800855c:	08008a45 	.word	0x08008a45

08008560 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 81a7 	beq.w	80088c4 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f003 0308 	and.w	r3, r3, #8
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00a      	beq.n	80085ae <HAL_SAI_IRQHandler+0x4e>
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f003 0308 	and.w	r3, r3, #8
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
 80085ac:	e18a      	b.n	80088c4 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01e      	beq.n	80085f6 <HAL_SAI_IRQHandler+0x96>
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d019      	beq.n	80085f6 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2201      	movs	r2, #1
 80085c8:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b22      	cmp	r3, #34	@ 0x22
 80085d4:	d101      	bne.n	80085da <HAL_SAI_IRQHandler+0x7a>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <HAL_SAI_IRQHandler+0x7c>
 80085da:	2302      	movs	r3, #2
 80085dc:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	431a      	orrs	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f96e 	bl	80088d0 <HAL_SAI_ErrorCallback>
 80085f4:	e166      	b.n	80088c4 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d013      	beq.n	8008628 <HAL_SAI_IRQHandler+0xc8>
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00e      	beq.n	8008628 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2202      	movs	r2, #2
 8008610:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8153 	beq.w	80088c4 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008624:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8008626:	e14d      	b.n	80088c4 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d05b      	beq.n	80086ea <HAL_SAI_IRQHandler+0x18a>
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	f003 0320 	and.w	r3, r3, #32
 8008638:	2b00      	cmp	r3, #0
 800863a:	d056      	beq.n	80086ea <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2220      	movs	r2, #32
 8008642:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800864a:	f043 0204 	orr.w	r2, r3, #4
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d03e      	beq.n	80086dc <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008664:	2b00      	cmp	r3, #0
 8008666:	d018      	beq.n	800869a <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866e:	4a97      	ldr	r2, [pc, #604]	@ (80088cc <HAL_SAI_IRQHandler+0x36c>)
 8008670:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008678:	4618      	mov	r0, r3
 800867a:	f7f9 fe7f 	bl	800237c <HAL_DMA_Abort_IT>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800868a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f91b 	bl	80088d0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 810a 	beq.w	80088ba <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ac:	4a87      	ldr	r2, [pc, #540]	@ (80088cc <HAL_SAI_IRQHandler+0x36c>)
 80086ae:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7f9 fe60 	bl	800237c <HAL_DMA_Abort_IT>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 80fb 	beq.w	80088ba <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f8fb 	bl	80088d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80086da:	e0ee      	b.n	80088ba <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff fe1b 	bl	8008318 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f8f4 	bl	80088d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80086e8:	e0e7      	b.n	80088ba <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d05b      	beq.n	80087ac <HAL_SAI_IRQHandler+0x24c>
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d056      	beq.n	80087ac <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2240      	movs	r2, #64	@ 0x40
 8008704:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800870c:	f043 0208 	orr.w	r2, r3, #8
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d03e      	beq.n	800879e <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008726:	2b00      	cmp	r3, #0
 8008728:	d018      	beq.n	800875c <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008730:	4a66      	ldr	r2, [pc, #408]	@ (80088cc <HAL_SAI_IRQHandler+0x36c>)
 8008732:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800873a:	4618      	mov	r0, r3
 800873c:	f7f9 fe1e 	bl	800237c <HAL_DMA_Abort_IT>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800874c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f8ba 	bl	80088d0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 80ab 	beq.w	80088be <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800876e:	4a57      	ldr	r2, [pc, #348]	@ (80088cc <HAL_SAI_IRQHandler+0x36c>)
 8008770:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008778:	4618      	mov	r0, r3
 800877a:	f7f9 fdff 	bl	800237c <HAL_DMA_Abort_IT>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	f000 809c 	beq.w	80088be <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800878c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f89a 	bl	80088d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800879c:	e08f      	b.n	80088be <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff fdba 	bl	8008318 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f893 	bl	80088d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80087aa:	e088      	b.n	80088be <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d067      	beq.n	8008886 <HAL_SAI_IRQHandler+0x326>
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d062      	beq.n	8008886 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2204      	movs	r2, #4
 80087c6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087ce:	f043 0220 	orr.w	r2, r3, #32
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d03c      	beq.n	800885c <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d018      	beq.n	800881e <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087f2:	4a36      	ldr	r2, [pc, #216]	@ (80088cc <HAL_SAI_IRQHandler+0x36c>)
 80087f4:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7f9 fdbd 	bl	800237c <HAL_DMA_Abort_IT>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00a      	beq.n	800881e <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800880e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f859 	bl	80088d0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008824:	2b00      	cmp	r3, #0
 8008826:	d04c      	beq.n	80088c2 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800882e:	4a27      	ldr	r2, [pc, #156]	@ (80088cc <HAL_SAI_IRQHandler+0x36c>)
 8008830:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008838:	4618      	mov	r0, r3
 800883a:	f7f9 fd9f 	bl	800237c <HAL_DMA_Abort_IT>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d03e      	beq.n	80088c2 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800884a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f83b 	bl	80088d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800885a:	e032      	b.n	80088c2 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2200      	movs	r2, #0
 8008862:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800886c:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f826 	bl	80088d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008884:	e01d      	b.n	80088c2 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f003 0310 	and.w	r3, r3, #16
 800888c:	2b00      	cmp	r3, #0
 800888e:	d019      	beq.n	80088c4 <HAL_SAI_IRQHandler+0x364>
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f003 0310 	and.w	r3, r3, #16
 8008896:	2b00      	cmp	r3, #0
 8008898:	d014      	beq.n	80088c4 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2210      	movs	r2, #16
 80088a0:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088a8:	f043 0210 	orr.w	r2, r3, #16
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f80c 	bl	80088d0 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80088b8:	e004      	b.n	80088c4 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80088ba:	bf00      	nop
 80088bc:	e002      	b.n	80088c4 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80088be:	bf00      	nop
 80088c0:	e000      	b.n	80088c4 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80088c2:	bf00      	nop
}
 80088c4:	bf00      	nop
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	08008aa3 	.word	0x08008aa3

080088d0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d103      	bne.n	8008902 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f043 0308 	orr.w	r3, r3, #8
 8008900:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008906:	2b08      	cmp	r3, #8
 8008908:	d10b      	bne.n	8008922 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800890e:	2b03      	cmp	r3, #3
 8008910:	d003      	beq.n	800891a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d103      	bne.n	8008922 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f043 0310 	orr.w	r3, r3, #16
 8008920:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	2b03      	cmp	r3, #3
 8008928:	d003      	beq.n	8008932 <SAI_InterruptFlag+0x4e>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d104      	bne.n	800893c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008938:	60fb      	str	r3, [r7, #12]
 800893a:	e003      	b.n	8008944 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f043 0304 	orr.w	r3, r3, #4
 8008942:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008944:	68fb      	ldr	r3, [r7, #12]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
	...

08008954 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800895c:	4b18      	ldr	r3, [pc, #96]	@ (80089c0 <SAI_Disable+0x6c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a18      	ldr	r2, [pc, #96]	@ (80089c4 <SAI_Disable+0x70>)
 8008962:	fba2 2303 	umull	r2, r3, r2, r3
 8008966:	0b1b      	lsrs	r3, r3, #12
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800897e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10a      	bne.n	800899c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800898c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	72fb      	strb	r3, [r7, #11]
      break;
 800899a:	e009      	b.n	80089b0 <SAI_Disable+0x5c>
    }
    count--;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3b01      	subs	r3, #1
 80089a0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e7      	bne.n	8008980 <SAI_Disable+0x2c>

  return status;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	24000000 	.word	0x24000000
 80089c4:	95cbec1b 	.word	0x95cbec1b

080089c8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089de:	d01c      	beq.n	8008a1a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80089ee:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80089f8:	2100      	movs	r1, #0
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7ff ff72 	bl	80088e4 <SAI_InterruptFlag>
 8008a00:	4603      	mov	r3, r0
 8008a02:	43d9      	mvns	r1, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	400a      	ands	r2, r1
 8008a10:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f7f7 fff6 	bl	8000a0c <HAL_SAI_RxCpltCallback>
#endif
}
 8008a20:	bf00      	nop
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a34:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f7f7 ffd2 	bl	80009e0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008a3c:	bf00      	nop
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fa fe02 	bl	800365c <HAL_DMA_GetError>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d01d      	beq.n	8008a9a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008a7c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f7ff ff68 	bl	8008954 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f7ff ff1b 	bl	80088d0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008abe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ad0:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	d00a      	beq.n	8008af2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f7ff ff39 	bl	8008954 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f042 0208 	orr.w	r2, r2, #8
 8008af0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7ff fee4 	bl	80088d0 <HAL_SAI_ErrorCallback>
#endif
}
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <__cvt>:
 8008b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b12:	ed2d 8b02 	vpush	{d8}
 8008b16:	eeb0 8b40 	vmov.f64	d8, d0
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	4617      	mov	r7, r2
 8008b1e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008b20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b22:	ee18 2a90 	vmov	r2, s17
 8008b26:	f025 0520 	bic.w	r5, r5, #32
 8008b2a:	2a00      	cmp	r2, #0
 8008b2c:	bfb6      	itet	lt
 8008b2e:	222d      	movlt	r2, #45	@ 0x2d
 8008b30:	2200      	movge	r2, #0
 8008b32:	eeb1 8b40 	vneglt.f64	d8, d0
 8008b36:	2d46      	cmp	r5, #70	@ 0x46
 8008b38:	460c      	mov	r4, r1
 8008b3a:	701a      	strb	r2, [r3, #0]
 8008b3c:	d004      	beq.n	8008b48 <__cvt+0x38>
 8008b3e:	2d45      	cmp	r5, #69	@ 0x45
 8008b40:	d100      	bne.n	8008b44 <__cvt+0x34>
 8008b42:	3401      	adds	r4, #1
 8008b44:	2102      	movs	r1, #2
 8008b46:	e000      	b.n	8008b4a <__cvt+0x3a>
 8008b48:	2103      	movs	r1, #3
 8008b4a:	ab03      	add	r3, sp, #12
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	ab02      	add	r3, sp, #8
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	4622      	mov	r2, r4
 8008b54:	4633      	mov	r3, r6
 8008b56:	eeb0 0b48 	vmov.f64	d0, d8
 8008b5a:	f000 fdf1 	bl	8009740 <_dtoa_r>
 8008b5e:	2d47      	cmp	r5, #71	@ 0x47
 8008b60:	d114      	bne.n	8008b8c <__cvt+0x7c>
 8008b62:	07fb      	lsls	r3, r7, #31
 8008b64:	d50a      	bpl.n	8008b7c <__cvt+0x6c>
 8008b66:	1902      	adds	r2, r0, r4
 8008b68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b70:	bf08      	it	eq
 8008b72:	9203      	streq	r2, [sp, #12]
 8008b74:	2130      	movs	r1, #48	@ 0x30
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d319      	bcc.n	8008bb0 <__cvt+0xa0>
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b80:	1a1b      	subs	r3, r3, r0
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	b005      	add	sp, #20
 8008b86:	ecbd 8b02 	vpop	{d8}
 8008b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b8c:	2d46      	cmp	r5, #70	@ 0x46
 8008b8e:	eb00 0204 	add.w	r2, r0, r4
 8008b92:	d1e9      	bne.n	8008b68 <__cvt+0x58>
 8008b94:	7803      	ldrb	r3, [r0, #0]
 8008b96:	2b30      	cmp	r3, #48	@ 0x30
 8008b98:	d107      	bne.n	8008baa <__cvt+0x9a>
 8008b9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba2:	bf1c      	itt	ne
 8008ba4:	f1c4 0401 	rsbne	r4, r4, #1
 8008ba8:	6034      	strne	r4, [r6, #0]
 8008baa:	6833      	ldr	r3, [r6, #0]
 8008bac:	441a      	add	r2, r3
 8008bae:	e7db      	b.n	8008b68 <__cvt+0x58>
 8008bb0:	1c5c      	adds	r4, r3, #1
 8008bb2:	9403      	str	r4, [sp, #12]
 8008bb4:	7019      	strb	r1, [r3, #0]
 8008bb6:	e7de      	b.n	8008b76 <__cvt+0x66>

08008bb8 <__exponent>:
 8008bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bba:	2900      	cmp	r1, #0
 8008bbc:	bfba      	itte	lt
 8008bbe:	4249      	neglt	r1, r1
 8008bc0:	232d      	movlt	r3, #45	@ 0x2d
 8008bc2:	232b      	movge	r3, #43	@ 0x2b
 8008bc4:	2909      	cmp	r1, #9
 8008bc6:	7002      	strb	r2, [r0, #0]
 8008bc8:	7043      	strb	r3, [r0, #1]
 8008bca:	dd29      	ble.n	8008c20 <__exponent+0x68>
 8008bcc:	f10d 0307 	add.w	r3, sp, #7
 8008bd0:	461d      	mov	r5, r3
 8008bd2:	270a      	movs	r7, #10
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	fbb1 f6f7 	udiv	r6, r1, r7
 8008bda:	fb07 1416 	mls	r4, r7, r6, r1
 8008bde:	3430      	adds	r4, #48	@ 0x30
 8008be0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008be4:	460c      	mov	r4, r1
 8008be6:	2c63      	cmp	r4, #99	@ 0x63
 8008be8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008bec:	4631      	mov	r1, r6
 8008bee:	dcf1      	bgt.n	8008bd4 <__exponent+0x1c>
 8008bf0:	3130      	adds	r1, #48	@ 0x30
 8008bf2:	1e94      	subs	r4, r2, #2
 8008bf4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bf8:	1c41      	adds	r1, r0, #1
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	42ab      	cmp	r3, r5
 8008bfe:	d30a      	bcc.n	8008c16 <__exponent+0x5e>
 8008c00:	f10d 0309 	add.w	r3, sp, #9
 8008c04:	1a9b      	subs	r3, r3, r2
 8008c06:	42ac      	cmp	r4, r5
 8008c08:	bf88      	it	hi
 8008c0a:	2300      	movhi	r3, #0
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	4403      	add	r3, r0
 8008c10:	1a18      	subs	r0, r3, r0
 8008c12:	b003      	add	sp, #12
 8008c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c16:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c1e:	e7ed      	b.n	8008bfc <__exponent+0x44>
 8008c20:	2330      	movs	r3, #48	@ 0x30
 8008c22:	3130      	adds	r1, #48	@ 0x30
 8008c24:	7083      	strb	r3, [r0, #2]
 8008c26:	70c1      	strb	r1, [r0, #3]
 8008c28:	1d03      	adds	r3, r0, #4
 8008c2a:	e7f1      	b.n	8008c10 <__exponent+0x58>
 8008c2c:	0000      	movs	r0, r0
	...

08008c30 <_printf_float>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	b08d      	sub	sp, #52	@ 0x34
 8008c36:	460c      	mov	r4, r1
 8008c38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c3c:	4616      	mov	r6, r2
 8008c3e:	461f      	mov	r7, r3
 8008c40:	4605      	mov	r5, r0
 8008c42:	f000 fcf1 	bl	8009628 <_localeconv_r>
 8008c46:	f8d0 b000 	ldr.w	fp, [r0]
 8008c4a:	4658      	mov	r0, fp
 8008c4c:	f7f7 fb98 	bl	8000380 <strlen>
 8008c50:	2300      	movs	r3, #0
 8008c52:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c54:	f8d8 3000 	ldr.w	r3, [r8]
 8008c58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008c5c:	6822      	ldr	r2, [r4, #0]
 8008c5e:	9005      	str	r0, [sp, #20]
 8008c60:	3307      	adds	r3, #7
 8008c62:	f023 0307 	bic.w	r3, r3, #7
 8008c66:	f103 0108 	add.w	r1, r3, #8
 8008c6a:	f8c8 1000 	str.w	r1, [r8]
 8008c6e:	ed93 0b00 	vldr	d0, [r3]
 8008c72:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008ed0 <_printf_float+0x2a0>
 8008c76:	eeb0 7bc0 	vabs.f64	d7, d0
 8008c7a:	eeb4 7b46 	vcmp.f64	d7, d6
 8008c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c82:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008c86:	dd24      	ble.n	8008cd2 <_printf_float+0xa2>
 8008c88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c90:	d502      	bpl.n	8008c98 <_printf_float+0x68>
 8008c92:	232d      	movs	r3, #45	@ 0x2d
 8008c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c98:	498f      	ldr	r1, [pc, #572]	@ (8008ed8 <_printf_float+0x2a8>)
 8008c9a:	4b90      	ldr	r3, [pc, #576]	@ (8008edc <_printf_float+0x2ac>)
 8008c9c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008ca0:	bf8c      	ite	hi
 8008ca2:	4688      	movhi	r8, r1
 8008ca4:	4698      	movls	r8, r3
 8008ca6:	f022 0204 	bic.w	r2, r2, #4
 8008caa:	2303      	movs	r3, #3
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	6022      	str	r2, [r4, #0]
 8008cb0:	f04f 0a00 	mov.w	sl, #0
 8008cb4:	9700      	str	r7, [sp, #0]
 8008cb6:	4633      	mov	r3, r6
 8008cb8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f000 f9d1 	bl	8009064 <_printf_common>
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f040 8089 	bne.w	8008dda <_printf_float+0x1aa>
 8008cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ccc:	b00d      	add	sp, #52	@ 0x34
 8008cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd2:	eeb4 0b40 	vcmp.f64	d0, d0
 8008cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cda:	d709      	bvc.n	8008cf0 <_printf_float+0xc0>
 8008cdc:	ee10 3a90 	vmov	r3, s1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	bfbc      	itt	lt
 8008ce4:	232d      	movlt	r3, #45	@ 0x2d
 8008ce6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008cea:	497d      	ldr	r1, [pc, #500]	@ (8008ee0 <_printf_float+0x2b0>)
 8008cec:	4b7d      	ldr	r3, [pc, #500]	@ (8008ee4 <_printf_float+0x2b4>)
 8008cee:	e7d5      	b.n	8008c9c <_printf_float+0x6c>
 8008cf0:	6863      	ldr	r3, [r4, #4]
 8008cf2:	1c59      	adds	r1, r3, #1
 8008cf4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008cf8:	d139      	bne.n	8008d6e <_printf_float+0x13e>
 8008cfa:	2306      	movs	r3, #6
 8008cfc:	6063      	str	r3, [r4, #4]
 8008cfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d02:	2300      	movs	r3, #0
 8008d04:	6022      	str	r2, [r4, #0]
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008d0e:	ab09      	add	r3, sp, #36	@ 0x24
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	6861      	ldr	r1, [r4, #4]
 8008d14:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d18:	4628      	mov	r0, r5
 8008d1a:	f7ff fef9 	bl	8008b10 <__cvt>
 8008d1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d24:	4680      	mov	r8, r0
 8008d26:	d129      	bne.n	8008d7c <_printf_float+0x14c>
 8008d28:	1cc8      	adds	r0, r1, #3
 8008d2a:	db02      	blt.n	8008d32 <_printf_float+0x102>
 8008d2c:	6863      	ldr	r3, [r4, #4]
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	dd41      	ble.n	8008db6 <_printf_float+0x186>
 8008d32:	f1a9 0902 	sub.w	r9, r9, #2
 8008d36:	fa5f f989 	uxtb.w	r9, r9
 8008d3a:	3901      	subs	r1, #1
 8008d3c:	464a      	mov	r2, r9
 8008d3e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d42:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d44:	f7ff ff38 	bl	8008bb8 <__exponent>
 8008d48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d4a:	1813      	adds	r3, r2, r0
 8008d4c:	2a01      	cmp	r2, #1
 8008d4e:	4682      	mov	sl, r0
 8008d50:	6123      	str	r3, [r4, #16]
 8008d52:	dc02      	bgt.n	8008d5a <_printf_float+0x12a>
 8008d54:	6822      	ldr	r2, [r4, #0]
 8008d56:	07d2      	lsls	r2, r2, #31
 8008d58:	d501      	bpl.n	8008d5e <_printf_float+0x12e>
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0a6      	beq.n	8008cb4 <_printf_float+0x84>
 8008d66:	232d      	movs	r3, #45	@ 0x2d
 8008d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d6c:	e7a2      	b.n	8008cb4 <_printf_float+0x84>
 8008d6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d72:	d1c4      	bne.n	8008cfe <_printf_float+0xce>
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1c2      	bne.n	8008cfe <_printf_float+0xce>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e7bf      	b.n	8008cfc <_printf_float+0xcc>
 8008d7c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008d80:	d9db      	bls.n	8008d3a <_printf_float+0x10a>
 8008d82:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008d86:	d118      	bne.n	8008dba <_printf_float+0x18a>
 8008d88:	2900      	cmp	r1, #0
 8008d8a:	6863      	ldr	r3, [r4, #4]
 8008d8c:	dd0b      	ble.n	8008da6 <_printf_float+0x176>
 8008d8e:	6121      	str	r1, [r4, #16]
 8008d90:	b913      	cbnz	r3, 8008d98 <_printf_float+0x168>
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	07d0      	lsls	r0, r2, #31
 8008d96:	d502      	bpl.n	8008d9e <_printf_float+0x16e>
 8008d98:	3301      	adds	r3, #1
 8008d9a:	440b      	add	r3, r1
 8008d9c:	6123      	str	r3, [r4, #16]
 8008d9e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008da0:	f04f 0a00 	mov.w	sl, #0
 8008da4:	e7db      	b.n	8008d5e <_printf_float+0x12e>
 8008da6:	b913      	cbnz	r3, 8008dae <_printf_float+0x17e>
 8008da8:	6822      	ldr	r2, [r4, #0]
 8008daa:	07d2      	lsls	r2, r2, #31
 8008dac:	d501      	bpl.n	8008db2 <_printf_float+0x182>
 8008dae:	3302      	adds	r3, #2
 8008db0:	e7f4      	b.n	8008d9c <_printf_float+0x16c>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e7f2      	b.n	8008d9c <_printf_float+0x16c>
 8008db6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008dba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dbc:	4299      	cmp	r1, r3
 8008dbe:	db05      	blt.n	8008dcc <_printf_float+0x19c>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	6121      	str	r1, [r4, #16]
 8008dc4:	07d8      	lsls	r0, r3, #31
 8008dc6:	d5ea      	bpl.n	8008d9e <_printf_float+0x16e>
 8008dc8:	1c4b      	adds	r3, r1, #1
 8008dca:	e7e7      	b.n	8008d9c <_printf_float+0x16c>
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	bfd4      	ite	le
 8008dd0:	f1c1 0202 	rsble	r2, r1, #2
 8008dd4:	2201      	movgt	r2, #1
 8008dd6:	4413      	add	r3, r2
 8008dd8:	e7e0      	b.n	8008d9c <_printf_float+0x16c>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	055a      	lsls	r2, r3, #21
 8008dde:	d407      	bmi.n	8008df0 <_printf_float+0x1c0>
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	4642      	mov	r2, r8
 8008de4:	4631      	mov	r1, r6
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b8      	blx	r7
 8008dea:	3001      	adds	r0, #1
 8008dec:	d12a      	bne.n	8008e44 <_printf_float+0x214>
 8008dee:	e76b      	b.n	8008cc8 <_printf_float+0x98>
 8008df0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008df4:	f240 80e0 	bls.w	8008fb8 <_printf_float+0x388>
 8008df8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008dfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e04:	d133      	bne.n	8008e6e <_printf_float+0x23e>
 8008e06:	4a38      	ldr	r2, [pc, #224]	@ (8008ee8 <_printf_float+0x2b8>)
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	47b8      	blx	r7
 8008e10:	3001      	adds	r0, #1
 8008e12:	f43f af59 	beq.w	8008cc8 <_printf_float+0x98>
 8008e16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e1a:	4543      	cmp	r3, r8
 8008e1c:	db02      	blt.n	8008e24 <_printf_float+0x1f4>
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	07d8      	lsls	r0, r3, #31
 8008e22:	d50f      	bpl.n	8008e44 <_printf_float+0x214>
 8008e24:	9b05      	ldr	r3, [sp, #20]
 8008e26:	465a      	mov	r2, fp
 8008e28:	4631      	mov	r1, r6
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	47b8      	blx	r7
 8008e2e:	3001      	adds	r0, #1
 8008e30:	f43f af4a 	beq.w	8008cc8 <_printf_float+0x98>
 8008e34:	f04f 0900 	mov.w	r9, #0
 8008e38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008e3c:	f104 0a1a 	add.w	sl, r4, #26
 8008e40:	45c8      	cmp	r8, r9
 8008e42:	dc09      	bgt.n	8008e58 <_printf_float+0x228>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	079b      	lsls	r3, r3, #30
 8008e48:	f100 8107 	bmi.w	800905a <_printf_float+0x42a>
 8008e4c:	68e0      	ldr	r0, [r4, #12]
 8008e4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e50:	4298      	cmp	r0, r3
 8008e52:	bfb8      	it	lt
 8008e54:	4618      	movlt	r0, r3
 8008e56:	e739      	b.n	8008ccc <_printf_float+0x9c>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4628      	mov	r0, r5
 8008e60:	47b8      	blx	r7
 8008e62:	3001      	adds	r0, #1
 8008e64:	f43f af30 	beq.w	8008cc8 <_printf_float+0x98>
 8008e68:	f109 0901 	add.w	r9, r9, #1
 8008e6c:	e7e8      	b.n	8008e40 <_printf_float+0x210>
 8008e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dc3b      	bgt.n	8008eec <_printf_float+0x2bc>
 8008e74:	4a1c      	ldr	r2, [pc, #112]	@ (8008ee8 <_printf_float+0x2b8>)
 8008e76:	2301      	movs	r3, #1
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	47b8      	blx	r7
 8008e7e:	3001      	adds	r0, #1
 8008e80:	f43f af22 	beq.w	8008cc8 <_printf_float+0x98>
 8008e84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e88:	ea59 0303 	orrs.w	r3, r9, r3
 8008e8c:	d102      	bne.n	8008e94 <_printf_float+0x264>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	07d9      	lsls	r1, r3, #31
 8008e92:	d5d7      	bpl.n	8008e44 <_printf_float+0x214>
 8008e94:	9b05      	ldr	r3, [sp, #20]
 8008e96:	465a      	mov	r2, fp
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	47b8      	blx	r7
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f43f af12 	beq.w	8008cc8 <_printf_float+0x98>
 8008ea4:	f04f 0a00 	mov.w	sl, #0
 8008ea8:	f104 0b1a 	add.w	fp, r4, #26
 8008eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eae:	425b      	negs	r3, r3
 8008eb0:	4553      	cmp	r3, sl
 8008eb2:	dc01      	bgt.n	8008eb8 <_printf_float+0x288>
 8008eb4:	464b      	mov	r3, r9
 8008eb6:	e794      	b.n	8008de2 <_printf_float+0x1b2>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	465a      	mov	r2, fp
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	47b8      	blx	r7
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	f43f af00 	beq.w	8008cc8 <_printf_float+0x98>
 8008ec8:	f10a 0a01 	add.w	sl, sl, #1
 8008ecc:	e7ee      	b.n	8008eac <_printf_float+0x27c>
 8008ece:	bf00      	nop
 8008ed0:	ffffffff 	.word	0xffffffff
 8008ed4:	7fefffff 	.word	0x7fefffff
 8008ed8:	0800b3e8 	.word	0x0800b3e8
 8008edc:	0800b3e4 	.word	0x0800b3e4
 8008ee0:	0800b3f0 	.word	0x0800b3f0
 8008ee4:	0800b3ec 	.word	0x0800b3ec
 8008ee8:	0800b3f4 	.word	0x0800b3f4
 8008eec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008eee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ef2:	4553      	cmp	r3, sl
 8008ef4:	bfa8      	it	ge
 8008ef6:	4653      	movge	r3, sl
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	4699      	mov	r9, r3
 8008efc:	dc37      	bgt.n	8008f6e <_printf_float+0x33e>
 8008efe:	2300      	movs	r3, #0
 8008f00:	9307      	str	r3, [sp, #28]
 8008f02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f06:	f104 021a 	add.w	r2, r4, #26
 8008f0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f0c:	9907      	ldr	r1, [sp, #28]
 8008f0e:	9306      	str	r3, [sp, #24]
 8008f10:	eba3 0309 	sub.w	r3, r3, r9
 8008f14:	428b      	cmp	r3, r1
 8008f16:	dc31      	bgt.n	8008f7c <_printf_float+0x34c>
 8008f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f1a:	459a      	cmp	sl, r3
 8008f1c:	dc3b      	bgt.n	8008f96 <_printf_float+0x366>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	07da      	lsls	r2, r3, #31
 8008f22:	d438      	bmi.n	8008f96 <_printf_float+0x366>
 8008f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f26:	ebaa 0903 	sub.w	r9, sl, r3
 8008f2a:	9b06      	ldr	r3, [sp, #24]
 8008f2c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f30:	4599      	cmp	r9, r3
 8008f32:	bfa8      	it	ge
 8008f34:	4699      	movge	r9, r3
 8008f36:	f1b9 0f00 	cmp.w	r9, #0
 8008f3a:	dc34      	bgt.n	8008fa6 <_printf_float+0x376>
 8008f3c:	f04f 0800 	mov.w	r8, #0
 8008f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f44:	f104 0b1a 	add.w	fp, r4, #26
 8008f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4a:	ebaa 0303 	sub.w	r3, sl, r3
 8008f4e:	eba3 0309 	sub.w	r3, r3, r9
 8008f52:	4543      	cmp	r3, r8
 8008f54:	f77f af76 	ble.w	8008e44 <_printf_float+0x214>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	465a      	mov	r2, fp
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	f43f aeb0 	beq.w	8008cc8 <_printf_float+0x98>
 8008f68:	f108 0801 	add.w	r8, r8, #1
 8008f6c:	e7ec      	b.n	8008f48 <_printf_float+0x318>
 8008f6e:	4642      	mov	r2, r8
 8008f70:	4631      	mov	r1, r6
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b8      	blx	r7
 8008f76:	3001      	adds	r0, #1
 8008f78:	d1c1      	bne.n	8008efe <_printf_float+0x2ce>
 8008f7a:	e6a5      	b.n	8008cc8 <_printf_float+0x98>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4628      	mov	r0, r5
 8008f82:	9206      	str	r2, [sp, #24]
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	f43f ae9e 	beq.w	8008cc8 <_printf_float+0x98>
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	9a06      	ldr	r2, [sp, #24]
 8008f90:	3301      	adds	r3, #1
 8008f92:	9307      	str	r3, [sp, #28]
 8008f94:	e7b9      	b.n	8008f0a <_printf_float+0x2da>
 8008f96:	9b05      	ldr	r3, [sp, #20]
 8008f98:	465a      	mov	r2, fp
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b8      	blx	r7
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d1bf      	bne.n	8008f24 <_printf_float+0x2f4>
 8008fa4:	e690      	b.n	8008cc8 <_printf_float+0x98>
 8008fa6:	9a06      	ldr	r2, [sp, #24]
 8008fa8:	464b      	mov	r3, r9
 8008faa:	4442      	add	r2, r8
 8008fac:	4631      	mov	r1, r6
 8008fae:	4628      	mov	r0, r5
 8008fb0:	47b8      	blx	r7
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	d1c2      	bne.n	8008f3c <_printf_float+0x30c>
 8008fb6:	e687      	b.n	8008cc8 <_printf_float+0x98>
 8008fb8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008fbc:	f1b9 0f01 	cmp.w	r9, #1
 8008fc0:	dc01      	bgt.n	8008fc6 <_printf_float+0x396>
 8008fc2:	07db      	lsls	r3, r3, #31
 8008fc4:	d536      	bpl.n	8009034 <_printf_float+0x404>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	4642      	mov	r2, r8
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4628      	mov	r0, r5
 8008fce:	47b8      	blx	r7
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	f43f ae79 	beq.w	8008cc8 <_printf_float+0x98>
 8008fd6:	9b05      	ldr	r3, [sp, #20]
 8008fd8:	465a      	mov	r2, fp
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b8      	blx	r7
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	f43f ae71 	beq.w	8008cc8 <_printf_float+0x98>
 8008fe6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008fea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008ff6:	d018      	beq.n	800902a <_printf_float+0x3fa>
 8008ff8:	464b      	mov	r3, r9
 8008ffa:	f108 0201 	add.w	r2, r8, #1
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	d10c      	bne.n	8009022 <_printf_float+0x3f2>
 8009008:	e65e      	b.n	8008cc8 <_printf_float+0x98>
 800900a:	2301      	movs	r3, #1
 800900c:	465a      	mov	r2, fp
 800900e:	4631      	mov	r1, r6
 8009010:	4628      	mov	r0, r5
 8009012:	47b8      	blx	r7
 8009014:	3001      	adds	r0, #1
 8009016:	f43f ae57 	beq.w	8008cc8 <_printf_float+0x98>
 800901a:	f108 0801 	add.w	r8, r8, #1
 800901e:	45c8      	cmp	r8, r9
 8009020:	dbf3      	blt.n	800900a <_printf_float+0x3da>
 8009022:	4653      	mov	r3, sl
 8009024:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009028:	e6dc      	b.n	8008de4 <_printf_float+0x1b4>
 800902a:	f04f 0800 	mov.w	r8, #0
 800902e:	f104 0b1a 	add.w	fp, r4, #26
 8009032:	e7f4      	b.n	800901e <_printf_float+0x3ee>
 8009034:	2301      	movs	r3, #1
 8009036:	4642      	mov	r2, r8
 8009038:	e7e1      	b.n	8008ffe <_printf_float+0x3ce>
 800903a:	2301      	movs	r3, #1
 800903c:	464a      	mov	r2, r9
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	47b8      	blx	r7
 8009044:	3001      	adds	r0, #1
 8009046:	f43f ae3f 	beq.w	8008cc8 <_printf_float+0x98>
 800904a:	f108 0801 	add.w	r8, r8, #1
 800904e:	68e3      	ldr	r3, [r4, #12]
 8009050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009052:	1a5b      	subs	r3, r3, r1
 8009054:	4543      	cmp	r3, r8
 8009056:	dcf0      	bgt.n	800903a <_printf_float+0x40a>
 8009058:	e6f8      	b.n	8008e4c <_printf_float+0x21c>
 800905a:	f04f 0800 	mov.w	r8, #0
 800905e:	f104 0919 	add.w	r9, r4, #25
 8009062:	e7f4      	b.n	800904e <_printf_float+0x41e>

08009064 <_printf_common>:
 8009064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009068:	4616      	mov	r6, r2
 800906a:	4698      	mov	r8, r3
 800906c:	688a      	ldr	r2, [r1, #8]
 800906e:	690b      	ldr	r3, [r1, #16]
 8009070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009074:	4293      	cmp	r3, r2
 8009076:	bfb8      	it	lt
 8009078:	4613      	movlt	r3, r2
 800907a:	6033      	str	r3, [r6, #0]
 800907c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009080:	4607      	mov	r7, r0
 8009082:	460c      	mov	r4, r1
 8009084:	b10a      	cbz	r2, 800908a <_printf_common+0x26>
 8009086:	3301      	adds	r3, #1
 8009088:	6033      	str	r3, [r6, #0]
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	0699      	lsls	r1, r3, #26
 800908e:	bf42      	ittt	mi
 8009090:	6833      	ldrmi	r3, [r6, #0]
 8009092:	3302      	addmi	r3, #2
 8009094:	6033      	strmi	r3, [r6, #0]
 8009096:	6825      	ldr	r5, [r4, #0]
 8009098:	f015 0506 	ands.w	r5, r5, #6
 800909c:	d106      	bne.n	80090ac <_printf_common+0x48>
 800909e:	f104 0a19 	add.w	sl, r4, #25
 80090a2:	68e3      	ldr	r3, [r4, #12]
 80090a4:	6832      	ldr	r2, [r6, #0]
 80090a6:	1a9b      	subs	r3, r3, r2
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dc26      	bgt.n	80090fa <_printf_common+0x96>
 80090ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090b0:	6822      	ldr	r2, [r4, #0]
 80090b2:	3b00      	subs	r3, #0
 80090b4:	bf18      	it	ne
 80090b6:	2301      	movne	r3, #1
 80090b8:	0692      	lsls	r2, r2, #26
 80090ba:	d42b      	bmi.n	8009114 <_printf_common+0xb0>
 80090bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090c0:	4641      	mov	r1, r8
 80090c2:	4638      	mov	r0, r7
 80090c4:	47c8      	blx	r9
 80090c6:	3001      	adds	r0, #1
 80090c8:	d01e      	beq.n	8009108 <_printf_common+0xa4>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	6922      	ldr	r2, [r4, #16]
 80090ce:	f003 0306 	and.w	r3, r3, #6
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	bf02      	ittt	eq
 80090d6:	68e5      	ldreq	r5, [r4, #12]
 80090d8:	6833      	ldreq	r3, [r6, #0]
 80090da:	1aed      	subeq	r5, r5, r3
 80090dc:	68a3      	ldr	r3, [r4, #8]
 80090de:	bf0c      	ite	eq
 80090e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090e4:	2500      	movne	r5, #0
 80090e6:	4293      	cmp	r3, r2
 80090e8:	bfc4      	itt	gt
 80090ea:	1a9b      	subgt	r3, r3, r2
 80090ec:	18ed      	addgt	r5, r5, r3
 80090ee:	2600      	movs	r6, #0
 80090f0:	341a      	adds	r4, #26
 80090f2:	42b5      	cmp	r5, r6
 80090f4:	d11a      	bne.n	800912c <_printf_common+0xc8>
 80090f6:	2000      	movs	r0, #0
 80090f8:	e008      	b.n	800910c <_printf_common+0xa8>
 80090fa:	2301      	movs	r3, #1
 80090fc:	4652      	mov	r2, sl
 80090fe:	4641      	mov	r1, r8
 8009100:	4638      	mov	r0, r7
 8009102:	47c8      	blx	r9
 8009104:	3001      	adds	r0, #1
 8009106:	d103      	bne.n	8009110 <_printf_common+0xac>
 8009108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800910c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009110:	3501      	adds	r5, #1
 8009112:	e7c6      	b.n	80090a2 <_printf_common+0x3e>
 8009114:	18e1      	adds	r1, r4, r3
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	2030      	movs	r0, #48	@ 0x30
 800911a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800911e:	4422      	add	r2, r4
 8009120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009128:	3302      	adds	r3, #2
 800912a:	e7c7      	b.n	80090bc <_printf_common+0x58>
 800912c:	2301      	movs	r3, #1
 800912e:	4622      	mov	r2, r4
 8009130:	4641      	mov	r1, r8
 8009132:	4638      	mov	r0, r7
 8009134:	47c8      	blx	r9
 8009136:	3001      	adds	r0, #1
 8009138:	d0e6      	beq.n	8009108 <_printf_common+0xa4>
 800913a:	3601      	adds	r6, #1
 800913c:	e7d9      	b.n	80090f2 <_printf_common+0x8e>
	...

08009140 <_printf_i>:
 8009140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	7e0f      	ldrb	r7, [r1, #24]
 8009146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009148:	2f78      	cmp	r7, #120	@ 0x78
 800914a:	4691      	mov	r9, r2
 800914c:	4680      	mov	r8, r0
 800914e:	460c      	mov	r4, r1
 8009150:	469a      	mov	sl, r3
 8009152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009156:	d807      	bhi.n	8009168 <_printf_i+0x28>
 8009158:	2f62      	cmp	r7, #98	@ 0x62
 800915a:	d80a      	bhi.n	8009172 <_printf_i+0x32>
 800915c:	2f00      	cmp	r7, #0
 800915e:	f000 80d1 	beq.w	8009304 <_printf_i+0x1c4>
 8009162:	2f58      	cmp	r7, #88	@ 0x58
 8009164:	f000 80b8 	beq.w	80092d8 <_printf_i+0x198>
 8009168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800916c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009170:	e03a      	b.n	80091e8 <_printf_i+0xa8>
 8009172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009176:	2b15      	cmp	r3, #21
 8009178:	d8f6      	bhi.n	8009168 <_printf_i+0x28>
 800917a:	a101      	add	r1, pc, #4	@ (adr r1, 8009180 <_printf_i+0x40>)
 800917c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009180:	080091d9 	.word	0x080091d9
 8009184:	080091ed 	.word	0x080091ed
 8009188:	08009169 	.word	0x08009169
 800918c:	08009169 	.word	0x08009169
 8009190:	08009169 	.word	0x08009169
 8009194:	08009169 	.word	0x08009169
 8009198:	080091ed 	.word	0x080091ed
 800919c:	08009169 	.word	0x08009169
 80091a0:	08009169 	.word	0x08009169
 80091a4:	08009169 	.word	0x08009169
 80091a8:	08009169 	.word	0x08009169
 80091ac:	080092eb 	.word	0x080092eb
 80091b0:	08009217 	.word	0x08009217
 80091b4:	080092a5 	.word	0x080092a5
 80091b8:	08009169 	.word	0x08009169
 80091bc:	08009169 	.word	0x08009169
 80091c0:	0800930d 	.word	0x0800930d
 80091c4:	08009169 	.word	0x08009169
 80091c8:	08009217 	.word	0x08009217
 80091cc:	08009169 	.word	0x08009169
 80091d0:	08009169 	.word	0x08009169
 80091d4:	080092ad 	.word	0x080092ad
 80091d8:	6833      	ldr	r3, [r6, #0]
 80091da:	1d1a      	adds	r2, r3, #4
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6032      	str	r2, [r6, #0]
 80091e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091e8:	2301      	movs	r3, #1
 80091ea:	e09c      	b.n	8009326 <_printf_i+0x1e6>
 80091ec:	6833      	ldr	r3, [r6, #0]
 80091ee:	6820      	ldr	r0, [r4, #0]
 80091f0:	1d19      	adds	r1, r3, #4
 80091f2:	6031      	str	r1, [r6, #0]
 80091f4:	0606      	lsls	r6, r0, #24
 80091f6:	d501      	bpl.n	80091fc <_printf_i+0xbc>
 80091f8:	681d      	ldr	r5, [r3, #0]
 80091fa:	e003      	b.n	8009204 <_printf_i+0xc4>
 80091fc:	0645      	lsls	r5, r0, #25
 80091fe:	d5fb      	bpl.n	80091f8 <_printf_i+0xb8>
 8009200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009204:	2d00      	cmp	r5, #0
 8009206:	da03      	bge.n	8009210 <_printf_i+0xd0>
 8009208:	232d      	movs	r3, #45	@ 0x2d
 800920a:	426d      	negs	r5, r5
 800920c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009210:	4858      	ldr	r0, [pc, #352]	@ (8009374 <_printf_i+0x234>)
 8009212:	230a      	movs	r3, #10
 8009214:	e011      	b.n	800923a <_printf_i+0xfa>
 8009216:	6821      	ldr	r1, [r4, #0]
 8009218:	6833      	ldr	r3, [r6, #0]
 800921a:	0608      	lsls	r0, r1, #24
 800921c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009220:	d402      	bmi.n	8009228 <_printf_i+0xe8>
 8009222:	0649      	lsls	r1, r1, #25
 8009224:	bf48      	it	mi
 8009226:	b2ad      	uxthmi	r5, r5
 8009228:	2f6f      	cmp	r7, #111	@ 0x6f
 800922a:	4852      	ldr	r0, [pc, #328]	@ (8009374 <_printf_i+0x234>)
 800922c:	6033      	str	r3, [r6, #0]
 800922e:	bf14      	ite	ne
 8009230:	230a      	movne	r3, #10
 8009232:	2308      	moveq	r3, #8
 8009234:	2100      	movs	r1, #0
 8009236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800923a:	6866      	ldr	r6, [r4, #4]
 800923c:	60a6      	str	r6, [r4, #8]
 800923e:	2e00      	cmp	r6, #0
 8009240:	db05      	blt.n	800924e <_printf_i+0x10e>
 8009242:	6821      	ldr	r1, [r4, #0]
 8009244:	432e      	orrs	r6, r5
 8009246:	f021 0104 	bic.w	r1, r1, #4
 800924a:	6021      	str	r1, [r4, #0]
 800924c:	d04b      	beq.n	80092e6 <_printf_i+0x1a6>
 800924e:	4616      	mov	r6, r2
 8009250:	fbb5 f1f3 	udiv	r1, r5, r3
 8009254:	fb03 5711 	mls	r7, r3, r1, r5
 8009258:	5dc7      	ldrb	r7, [r0, r7]
 800925a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800925e:	462f      	mov	r7, r5
 8009260:	42bb      	cmp	r3, r7
 8009262:	460d      	mov	r5, r1
 8009264:	d9f4      	bls.n	8009250 <_printf_i+0x110>
 8009266:	2b08      	cmp	r3, #8
 8009268:	d10b      	bne.n	8009282 <_printf_i+0x142>
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	07df      	lsls	r7, r3, #31
 800926e:	d508      	bpl.n	8009282 <_printf_i+0x142>
 8009270:	6923      	ldr	r3, [r4, #16]
 8009272:	6861      	ldr	r1, [r4, #4]
 8009274:	4299      	cmp	r1, r3
 8009276:	bfde      	ittt	le
 8009278:	2330      	movle	r3, #48	@ 0x30
 800927a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800927e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009282:	1b92      	subs	r2, r2, r6
 8009284:	6122      	str	r2, [r4, #16]
 8009286:	f8cd a000 	str.w	sl, [sp]
 800928a:	464b      	mov	r3, r9
 800928c:	aa03      	add	r2, sp, #12
 800928e:	4621      	mov	r1, r4
 8009290:	4640      	mov	r0, r8
 8009292:	f7ff fee7 	bl	8009064 <_printf_common>
 8009296:	3001      	adds	r0, #1
 8009298:	d14a      	bne.n	8009330 <_printf_i+0x1f0>
 800929a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800929e:	b004      	add	sp, #16
 80092a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	f043 0320 	orr.w	r3, r3, #32
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	4832      	ldr	r0, [pc, #200]	@ (8009378 <_printf_i+0x238>)
 80092ae:	2778      	movs	r7, #120	@ 0x78
 80092b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	6831      	ldr	r1, [r6, #0]
 80092b8:	061f      	lsls	r7, r3, #24
 80092ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80092be:	d402      	bmi.n	80092c6 <_printf_i+0x186>
 80092c0:	065f      	lsls	r7, r3, #25
 80092c2:	bf48      	it	mi
 80092c4:	b2ad      	uxthmi	r5, r5
 80092c6:	6031      	str	r1, [r6, #0]
 80092c8:	07d9      	lsls	r1, r3, #31
 80092ca:	bf44      	itt	mi
 80092cc:	f043 0320 	orrmi.w	r3, r3, #32
 80092d0:	6023      	strmi	r3, [r4, #0]
 80092d2:	b11d      	cbz	r5, 80092dc <_printf_i+0x19c>
 80092d4:	2310      	movs	r3, #16
 80092d6:	e7ad      	b.n	8009234 <_printf_i+0xf4>
 80092d8:	4826      	ldr	r0, [pc, #152]	@ (8009374 <_printf_i+0x234>)
 80092da:	e7e9      	b.n	80092b0 <_printf_i+0x170>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	f023 0320 	bic.w	r3, r3, #32
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	e7f6      	b.n	80092d4 <_printf_i+0x194>
 80092e6:	4616      	mov	r6, r2
 80092e8:	e7bd      	b.n	8009266 <_printf_i+0x126>
 80092ea:	6833      	ldr	r3, [r6, #0]
 80092ec:	6825      	ldr	r5, [r4, #0]
 80092ee:	6961      	ldr	r1, [r4, #20]
 80092f0:	1d18      	adds	r0, r3, #4
 80092f2:	6030      	str	r0, [r6, #0]
 80092f4:	062e      	lsls	r6, r5, #24
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	d501      	bpl.n	80092fe <_printf_i+0x1be>
 80092fa:	6019      	str	r1, [r3, #0]
 80092fc:	e002      	b.n	8009304 <_printf_i+0x1c4>
 80092fe:	0668      	lsls	r0, r5, #25
 8009300:	d5fb      	bpl.n	80092fa <_printf_i+0x1ba>
 8009302:	8019      	strh	r1, [r3, #0]
 8009304:	2300      	movs	r3, #0
 8009306:	6123      	str	r3, [r4, #16]
 8009308:	4616      	mov	r6, r2
 800930a:	e7bc      	b.n	8009286 <_printf_i+0x146>
 800930c:	6833      	ldr	r3, [r6, #0]
 800930e:	1d1a      	adds	r2, r3, #4
 8009310:	6032      	str	r2, [r6, #0]
 8009312:	681e      	ldr	r6, [r3, #0]
 8009314:	6862      	ldr	r2, [r4, #4]
 8009316:	2100      	movs	r1, #0
 8009318:	4630      	mov	r0, r6
 800931a:	f7f6 ffe1 	bl	80002e0 <memchr>
 800931e:	b108      	cbz	r0, 8009324 <_printf_i+0x1e4>
 8009320:	1b80      	subs	r0, r0, r6
 8009322:	6060      	str	r0, [r4, #4]
 8009324:	6863      	ldr	r3, [r4, #4]
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	2300      	movs	r3, #0
 800932a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800932e:	e7aa      	b.n	8009286 <_printf_i+0x146>
 8009330:	6923      	ldr	r3, [r4, #16]
 8009332:	4632      	mov	r2, r6
 8009334:	4649      	mov	r1, r9
 8009336:	4640      	mov	r0, r8
 8009338:	47d0      	blx	sl
 800933a:	3001      	adds	r0, #1
 800933c:	d0ad      	beq.n	800929a <_printf_i+0x15a>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	079b      	lsls	r3, r3, #30
 8009342:	d413      	bmi.n	800936c <_printf_i+0x22c>
 8009344:	68e0      	ldr	r0, [r4, #12]
 8009346:	9b03      	ldr	r3, [sp, #12]
 8009348:	4298      	cmp	r0, r3
 800934a:	bfb8      	it	lt
 800934c:	4618      	movlt	r0, r3
 800934e:	e7a6      	b.n	800929e <_printf_i+0x15e>
 8009350:	2301      	movs	r3, #1
 8009352:	4632      	mov	r2, r6
 8009354:	4649      	mov	r1, r9
 8009356:	4640      	mov	r0, r8
 8009358:	47d0      	blx	sl
 800935a:	3001      	adds	r0, #1
 800935c:	d09d      	beq.n	800929a <_printf_i+0x15a>
 800935e:	3501      	adds	r5, #1
 8009360:	68e3      	ldr	r3, [r4, #12]
 8009362:	9903      	ldr	r1, [sp, #12]
 8009364:	1a5b      	subs	r3, r3, r1
 8009366:	42ab      	cmp	r3, r5
 8009368:	dcf2      	bgt.n	8009350 <_printf_i+0x210>
 800936a:	e7eb      	b.n	8009344 <_printf_i+0x204>
 800936c:	2500      	movs	r5, #0
 800936e:	f104 0619 	add.w	r6, r4, #25
 8009372:	e7f5      	b.n	8009360 <_printf_i+0x220>
 8009374:	0800b3f6 	.word	0x0800b3f6
 8009378:	0800b407 	.word	0x0800b407

0800937c <std>:
 800937c:	2300      	movs	r3, #0
 800937e:	b510      	push	{r4, lr}
 8009380:	4604      	mov	r4, r0
 8009382:	e9c0 3300 	strd	r3, r3, [r0]
 8009386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800938a:	6083      	str	r3, [r0, #8]
 800938c:	8181      	strh	r1, [r0, #12]
 800938e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009390:	81c2      	strh	r2, [r0, #14]
 8009392:	6183      	str	r3, [r0, #24]
 8009394:	4619      	mov	r1, r3
 8009396:	2208      	movs	r2, #8
 8009398:	305c      	adds	r0, #92	@ 0x5c
 800939a:	f000 f90f 	bl	80095bc <memset>
 800939e:	4b0d      	ldr	r3, [pc, #52]	@ (80093d4 <std+0x58>)
 80093a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80093a2:	4b0d      	ldr	r3, [pc, #52]	@ (80093d8 <std+0x5c>)
 80093a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093a6:	4b0d      	ldr	r3, [pc, #52]	@ (80093dc <std+0x60>)
 80093a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093aa:	4b0d      	ldr	r3, [pc, #52]	@ (80093e0 <std+0x64>)
 80093ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80093ae:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <std+0x68>)
 80093b0:	6224      	str	r4, [r4, #32]
 80093b2:	429c      	cmp	r4, r3
 80093b4:	d006      	beq.n	80093c4 <std+0x48>
 80093b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093ba:	4294      	cmp	r4, r2
 80093bc:	d002      	beq.n	80093c4 <std+0x48>
 80093be:	33d0      	adds	r3, #208	@ 0xd0
 80093c0:	429c      	cmp	r4, r3
 80093c2:	d105      	bne.n	80093d0 <std+0x54>
 80093c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093cc:	f000 b928 	b.w	8009620 <__retarget_lock_init_recursive>
 80093d0:	bd10      	pop	{r4, pc}
 80093d2:	bf00      	nop
 80093d4:	0800abb5 	.word	0x0800abb5
 80093d8:	0800abd7 	.word	0x0800abd7
 80093dc:	0800ac0f 	.word	0x0800ac0f
 80093e0:	0800ac33 	.word	0x0800ac33
 80093e4:	240005b4 	.word	0x240005b4

080093e8 <stdio_exit_handler>:
 80093e8:	4a02      	ldr	r2, [pc, #8]	@ (80093f4 <stdio_exit_handler+0xc>)
 80093ea:	4903      	ldr	r1, [pc, #12]	@ (80093f8 <stdio_exit_handler+0x10>)
 80093ec:	4803      	ldr	r0, [pc, #12]	@ (80093fc <stdio_exit_handler+0x14>)
 80093ee:	f000 b869 	b.w	80094c4 <_fwalk_sglue>
 80093f2:	bf00      	nop
 80093f4:	24000010 	.word	0x24000010
 80093f8:	0800a459 	.word	0x0800a459
 80093fc:	24000020 	.word	0x24000020

08009400 <cleanup_stdio>:
 8009400:	6841      	ldr	r1, [r0, #4]
 8009402:	4b0c      	ldr	r3, [pc, #48]	@ (8009434 <cleanup_stdio+0x34>)
 8009404:	4299      	cmp	r1, r3
 8009406:	b510      	push	{r4, lr}
 8009408:	4604      	mov	r4, r0
 800940a:	d001      	beq.n	8009410 <cleanup_stdio+0x10>
 800940c:	f001 f824 	bl	800a458 <_fflush_r>
 8009410:	68a1      	ldr	r1, [r4, #8]
 8009412:	4b09      	ldr	r3, [pc, #36]	@ (8009438 <cleanup_stdio+0x38>)
 8009414:	4299      	cmp	r1, r3
 8009416:	d002      	beq.n	800941e <cleanup_stdio+0x1e>
 8009418:	4620      	mov	r0, r4
 800941a:	f001 f81d 	bl	800a458 <_fflush_r>
 800941e:	68e1      	ldr	r1, [r4, #12]
 8009420:	4b06      	ldr	r3, [pc, #24]	@ (800943c <cleanup_stdio+0x3c>)
 8009422:	4299      	cmp	r1, r3
 8009424:	d004      	beq.n	8009430 <cleanup_stdio+0x30>
 8009426:	4620      	mov	r0, r4
 8009428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800942c:	f001 b814 	b.w	800a458 <_fflush_r>
 8009430:	bd10      	pop	{r4, pc}
 8009432:	bf00      	nop
 8009434:	240005b4 	.word	0x240005b4
 8009438:	2400061c 	.word	0x2400061c
 800943c:	24000684 	.word	0x24000684

08009440 <global_stdio_init.part.0>:
 8009440:	b510      	push	{r4, lr}
 8009442:	4b0b      	ldr	r3, [pc, #44]	@ (8009470 <global_stdio_init.part.0+0x30>)
 8009444:	4c0b      	ldr	r4, [pc, #44]	@ (8009474 <global_stdio_init.part.0+0x34>)
 8009446:	4a0c      	ldr	r2, [pc, #48]	@ (8009478 <global_stdio_init.part.0+0x38>)
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	4620      	mov	r0, r4
 800944c:	2200      	movs	r2, #0
 800944e:	2104      	movs	r1, #4
 8009450:	f7ff ff94 	bl	800937c <std>
 8009454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009458:	2201      	movs	r2, #1
 800945a:	2109      	movs	r1, #9
 800945c:	f7ff ff8e 	bl	800937c <std>
 8009460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009464:	2202      	movs	r2, #2
 8009466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800946a:	2112      	movs	r1, #18
 800946c:	f7ff bf86 	b.w	800937c <std>
 8009470:	240006ec 	.word	0x240006ec
 8009474:	240005b4 	.word	0x240005b4
 8009478:	080093e9 	.word	0x080093e9

0800947c <__sfp_lock_acquire>:
 800947c:	4801      	ldr	r0, [pc, #4]	@ (8009484 <__sfp_lock_acquire+0x8>)
 800947e:	f000 b8d0 	b.w	8009622 <__retarget_lock_acquire_recursive>
 8009482:	bf00      	nop
 8009484:	240006f1 	.word	0x240006f1

08009488 <__sfp_lock_release>:
 8009488:	4801      	ldr	r0, [pc, #4]	@ (8009490 <__sfp_lock_release+0x8>)
 800948a:	f000 b8cb 	b.w	8009624 <__retarget_lock_release_recursive>
 800948e:	bf00      	nop
 8009490:	240006f1 	.word	0x240006f1

08009494 <__sinit>:
 8009494:	b510      	push	{r4, lr}
 8009496:	4604      	mov	r4, r0
 8009498:	f7ff fff0 	bl	800947c <__sfp_lock_acquire>
 800949c:	6a23      	ldr	r3, [r4, #32]
 800949e:	b11b      	cbz	r3, 80094a8 <__sinit+0x14>
 80094a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a4:	f7ff bff0 	b.w	8009488 <__sfp_lock_release>
 80094a8:	4b04      	ldr	r3, [pc, #16]	@ (80094bc <__sinit+0x28>)
 80094aa:	6223      	str	r3, [r4, #32]
 80094ac:	4b04      	ldr	r3, [pc, #16]	@ (80094c0 <__sinit+0x2c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1f5      	bne.n	80094a0 <__sinit+0xc>
 80094b4:	f7ff ffc4 	bl	8009440 <global_stdio_init.part.0>
 80094b8:	e7f2      	b.n	80094a0 <__sinit+0xc>
 80094ba:	bf00      	nop
 80094bc:	08009401 	.word	0x08009401
 80094c0:	240006ec 	.word	0x240006ec

080094c4 <_fwalk_sglue>:
 80094c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c8:	4607      	mov	r7, r0
 80094ca:	4688      	mov	r8, r1
 80094cc:	4614      	mov	r4, r2
 80094ce:	2600      	movs	r6, #0
 80094d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094d4:	f1b9 0901 	subs.w	r9, r9, #1
 80094d8:	d505      	bpl.n	80094e6 <_fwalk_sglue+0x22>
 80094da:	6824      	ldr	r4, [r4, #0]
 80094dc:	2c00      	cmp	r4, #0
 80094de:	d1f7      	bne.n	80094d0 <_fwalk_sglue+0xc>
 80094e0:	4630      	mov	r0, r6
 80094e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094e6:	89ab      	ldrh	r3, [r5, #12]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d907      	bls.n	80094fc <_fwalk_sglue+0x38>
 80094ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094f0:	3301      	adds	r3, #1
 80094f2:	d003      	beq.n	80094fc <_fwalk_sglue+0x38>
 80094f4:	4629      	mov	r1, r5
 80094f6:	4638      	mov	r0, r7
 80094f8:	47c0      	blx	r8
 80094fa:	4306      	orrs	r6, r0
 80094fc:	3568      	adds	r5, #104	@ 0x68
 80094fe:	e7e9      	b.n	80094d4 <_fwalk_sglue+0x10>

08009500 <_puts_r>:
 8009500:	6a03      	ldr	r3, [r0, #32]
 8009502:	b570      	push	{r4, r5, r6, lr}
 8009504:	6884      	ldr	r4, [r0, #8]
 8009506:	4605      	mov	r5, r0
 8009508:	460e      	mov	r6, r1
 800950a:	b90b      	cbnz	r3, 8009510 <_puts_r+0x10>
 800950c:	f7ff ffc2 	bl	8009494 <__sinit>
 8009510:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009512:	07db      	lsls	r3, r3, #31
 8009514:	d405      	bmi.n	8009522 <_puts_r+0x22>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	0598      	lsls	r0, r3, #22
 800951a:	d402      	bmi.n	8009522 <_puts_r+0x22>
 800951c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800951e:	f000 f880 	bl	8009622 <__retarget_lock_acquire_recursive>
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	0719      	lsls	r1, r3, #28
 8009526:	d502      	bpl.n	800952e <_puts_r+0x2e>
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d135      	bne.n	800959a <_puts_r+0x9a>
 800952e:	4621      	mov	r1, r4
 8009530:	4628      	mov	r0, r5
 8009532:	f001 fbc1 	bl	800acb8 <__swsetup_r>
 8009536:	b380      	cbz	r0, 800959a <_puts_r+0x9a>
 8009538:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800953c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800953e:	07da      	lsls	r2, r3, #31
 8009540:	d405      	bmi.n	800954e <_puts_r+0x4e>
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	059b      	lsls	r3, r3, #22
 8009546:	d402      	bmi.n	800954e <_puts_r+0x4e>
 8009548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800954a:	f000 f86b 	bl	8009624 <__retarget_lock_release_recursive>
 800954e:	4628      	mov	r0, r5
 8009550:	bd70      	pop	{r4, r5, r6, pc}
 8009552:	2b00      	cmp	r3, #0
 8009554:	da04      	bge.n	8009560 <_puts_r+0x60>
 8009556:	69a2      	ldr	r2, [r4, #24]
 8009558:	429a      	cmp	r2, r3
 800955a:	dc17      	bgt.n	800958c <_puts_r+0x8c>
 800955c:	290a      	cmp	r1, #10
 800955e:	d015      	beq.n	800958c <_puts_r+0x8c>
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	6022      	str	r2, [r4, #0]
 8009566:	7019      	strb	r1, [r3, #0]
 8009568:	68a3      	ldr	r3, [r4, #8]
 800956a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800956e:	3b01      	subs	r3, #1
 8009570:	60a3      	str	r3, [r4, #8]
 8009572:	2900      	cmp	r1, #0
 8009574:	d1ed      	bne.n	8009552 <_puts_r+0x52>
 8009576:	2b00      	cmp	r3, #0
 8009578:	da11      	bge.n	800959e <_puts_r+0x9e>
 800957a:	4622      	mov	r2, r4
 800957c:	210a      	movs	r1, #10
 800957e:	4628      	mov	r0, r5
 8009580:	f001 fb5b 	bl	800ac3a <__swbuf_r>
 8009584:	3001      	adds	r0, #1
 8009586:	d0d7      	beq.n	8009538 <_puts_r+0x38>
 8009588:	250a      	movs	r5, #10
 800958a:	e7d7      	b.n	800953c <_puts_r+0x3c>
 800958c:	4622      	mov	r2, r4
 800958e:	4628      	mov	r0, r5
 8009590:	f001 fb53 	bl	800ac3a <__swbuf_r>
 8009594:	3001      	adds	r0, #1
 8009596:	d1e7      	bne.n	8009568 <_puts_r+0x68>
 8009598:	e7ce      	b.n	8009538 <_puts_r+0x38>
 800959a:	3e01      	subs	r6, #1
 800959c:	e7e4      	b.n	8009568 <_puts_r+0x68>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	6022      	str	r2, [r4, #0]
 80095a4:	220a      	movs	r2, #10
 80095a6:	701a      	strb	r2, [r3, #0]
 80095a8:	e7ee      	b.n	8009588 <_puts_r+0x88>
	...

080095ac <puts>:
 80095ac:	4b02      	ldr	r3, [pc, #8]	@ (80095b8 <puts+0xc>)
 80095ae:	4601      	mov	r1, r0
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	f7ff bfa5 	b.w	8009500 <_puts_r>
 80095b6:	bf00      	nop
 80095b8:	2400001c 	.word	0x2400001c

080095bc <memset>:
 80095bc:	4402      	add	r2, r0
 80095be:	4603      	mov	r3, r0
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d100      	bne.n	80095c6 <memset+0xa>
 80095c4:	4770      	bx	lr
 80095c6:	f803 1b01 	strb.w	r1, [r3], #1
 80095ca:	e7f9      	b.n	80095c0 <memset+0x4>

080095cc <__errno>:
 80095cc:	4b01      	ldr	r3, [pc, #4]	@ (80095d4 <__errno+0x8>)
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	2400001c 	.word	0x2400001c

080095d8 <__libc_init_array>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	4d0d      	ldr	r5, [pc, #52]	@ (8009610 <__libc_init_array+0x38>)
 80095dc:	4c0d      	ldr	r4, [pc, #52]	@ (8009614 <__libc_init_array+0x3c>)
 80095de:	1b64      	subs	r4, r4, r5
 80095e0:	10a4      	asrs	r4, r4, #2
 80095e2:	2600      	movs	r6, #0
 80095e4:	42a6      	cmp	r6, r4
 80095e6:	d109      	bne.n	80095fc <__libc_init_array+0x24>
 80095e8:	4d0b      	ldr	r5, [pc, #44]	@ (8009618 <__libc_init_array+0x40>)
 80095ea:	4c0c      	ldr	r4, [pc, #48]	@ (800961c <__libc_init_array+0x44>)
 80095ec:	f001 fedc 	bl	800b3a8 <_init>
 80095f0:	1b64      	subs	r4, r4, r5
 80095f2:	10a4      	asrs	r4, r4, #2
 80095f4:	2600      	movs	r6, #0
 80095f6:	42a6      	cmp	r6, r4
 80095f8:	d105      	bne.n	8009606 <__libc_init_array+0x2e>
 80095fa:	bd70      	pop	{r4, r5, r6, pc}
 80095fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009600:	4798      	blx	r3
 8009602:	3601      	adds	r6, #1
 8009604:	e7ee      	b.n	80095e4 <__libc_init_array+0xc>
 8009606:	f855 3b04 	ldr.w	r3, [r5], #4
 800960a:	4798      	blx	r3
 800960c:	3601      	adds	r6, #1
 800960e:	e7f2      	b.n	80095f6 <__libc_init_array+0x1e>
 8009610:	0800b764 	.word	0x0800b764
 8009614:	0800b764 	.word	0x0800b764
 8009618:	0800b764 	.word	0x0800b764
 800961c:	0800b768 	.word	0x0800b768

08009620 <__retarget_lock_init_recursive>:
 8009620:	4770      	bx	lr

08009622 <__retarget_lock_acquire_recursive>:
 8009622:	4770      	bx	lr

08009624 <__retarget_lock_release_recursive>:
 8009624:	4770      	bx	lr
	...

08009628 <_localeconv_r>:
 8009628:	4800      	ldr	r0, [pc, #0]	@ (800962c <_localeconv_r+0x4>)
 800962a:	4770      	bx	lr
 800962c:	2400015c 	.word	0x2400015c

08009630 <quorem>:
 8009630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	6903      	ldr	r3, [r0, #16]
 8009636:	690c      	ldr	r4, [r1, #16]
 8009638:	42a3      	cmp	r3, r4
 800963a:	4607      	mov	r7, r0
 800963c:	db7e      	blt.n	800973c <quorem+0x10c>
 800963e:	3c01      	subs	r4, #1
 8009640:	f101 0814 	add.w	r8, r1, #20
 8009644:	00a3      	lsls	r3, r4, #2
 8009646:	f100 0514 	add.w	r5, r0, #20
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800965a:	3301      	adds	r3, #1
 800965c:	429a      	cmp	r2, r3
 800965e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009662:	fbb2 f6f3 	udiv	r6, r2, r3
 8009666:	d32e      	bcc.n	80096c6 <quorem+0x96>
 8009668:	f04f 0a00 	mov.w	sl, #0
 800966c:	46c4      	mov	ip, r8
 800966e:	46ae      	mov	lr, r5
 8009670:	46d3      	mov	fp, sl
 8009672:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009676:	b298      	uxth	r0, r3
 8009678:	fb06 a000 	mla	r0, r6, r0, sl
 800967c:	0c02      	lsrs	r2, r0, #16
 800967e:	0c1b      	lsrs	r3, r3, #16
 8009680:	fb06 2303 	mla	r3, r6, r3, r2
 8009684:	f8de 2000 	ldr.w	r2, [lr]
 8009688:	b280      	uxth	r0, r0
 800968a:	b292      	uxth	r2, r2
 800968c:	1a12      	subs	r2, r2, r0
 800968e:	445a      	add	r2, fp
 8009690:	f8de 0000 	ldr.w	r0, [lr]
 8009694:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009698:	b29b      	uxth	r3, r3
 800969a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800969e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80096a2:	b292      	uxth	r2, r2
 80096a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80096a8:	45e1      	cmp	r9, ip
 80096aa:	f84e 2b04 	str.w	r2, [lr], #4
 80096ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80096b2:	d2de      	bcs.n	8009672 <quorem+0x42>
 80096b4:	9b00      	ldr	r3, [sp, #0]
 80096b6:	58eb      	ldr	r3, [r5, r3]
 80096b8:	b92b      	cbnz	r3, 80096c6 <quorem+0x96>
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	3b04      	subs	r3, #4
 80096be:	429d      	cmp	r5, r3
 80096c0:	461a      	mov	r2, r3
 80096c2:	d32f      	bcc.n	8009724 <quorem+0xf4>
 80096c4:	613c      	str	r4, [r7, #16]
 80096c6:	4638      	mov	r0, r7
 80096c8:	f001 f96c 	bl	800a9a4 <__mcmp>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	db25      	blt.n	800971c <quorem+0xec>
 80096d0:	4629      	mov	r1, r5
 80096d2:	2000      	movs	r0, #0
 80096d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80096d8:	f8d1 c000 	ldr.w	ip, [r1]
 80096dc:	fa1f fe82 	uxth.w	lr, r2
 80096e0:	fa1f f38c 	uxth.w	r3, ip
 80096e4:	eba3 030e 	sub.w	r3, r3, lr
 80096e8:	4403      	add	r3, r0
 80096ea:	0c12      	lsrs	r2, r2, #16
 80096ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80096f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096fa:	45c1      	cmp	r9, r8
 80096fc:	f841 3b04 	str.w	r3, [r1], #4
 8009700:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009704:	d2e6      	bcs.n	80096d4 <quorem+0xa4>
 8009706:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800970a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800970e:	b922      	cbnz	r2, 800971a <quorem+0xea>
 8009710:	3b04      	subs	r3, #4
 8009712:	429d      	cmp	r5, r3
 8009714:	461a      	mov	r2, r3
 8009716:	d30b      	bcc.n	8009730 <quorem+0x100>
 8009718:	613c      	str	r4, [r7, #16]
 800971a:	3601      	adds	r6, #1
 800971c:	4630      	mov	r0, r6
 800971e:	b003      	add	sp, #12
 8009720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009724:	6812      	ldr	r2, [r2, #0]
 8009726:	3b04      	subs	r3, #4
 8009728:	2a00      	cmp	r2, #0
 800972a:	d1cb      	bne.n	80096c4 <quorem+0x94>
 800972c:	3c01      	subs	r4, #1
 800972e:	e7c6      	b.n	80096be <quorem+0x8e>
 8009730:	6812      	ldr	r2, [r2, #0]
 8009732:	3b04      	subs	r3, #4
 8009734:	2a00      	cmp	r2, #0
 8009736:	d1ef      	bne.n	8009718 <quorem+0xe8>
 8009738:	3c01      	subs	r4, #1
 800973a:	e7ea      	b.n	8009712 <quorem+0xe2>
 800973c:	2000      	movs	r0, #0
 800973e:	e7ee      	b.n	800971e <quorem+0xee>

08009740 <_dtoa_r>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	ed2d 8b02 	vpush	{d8}
 8009748:	69c7      	ldr	r7, [r0, #28]
 800974a:	b091      	sub	sp, #68	@ 0x44
 800974c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009750:	ec55 4b10 	vmov	r4, r5, d0
 8009754:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009756:	9107      	str	r1, [sp, #28]
 8009758:	4681      	mov	r9, r0
 800975a:	9209      	str	r2, [sp, #36]	@ 0x24
 800975c:	930d      	str	r3, [sp, #52]	@ 0x34
 800975e:	b97f      	cbnz	r7, 8009780 <_dtoa_r+0x40>
 8009760:	2010      	movs	r0, #16
 8009762:	f000 fd4b 	bl	800a1fc <malloc>
 8009766:	4602      	mov	r2, r0
 8009768:	f8c9 001c 	str.w	r0, [r9, #28]
 800976c:	b920      	cbnz	r0, 8009778 <_dtoa_r+0x38>
 800976e:	4ba0      	ldr	r3, [pc, #640]	@ (80099f0 <_dtoa_r+0x2b0>)
 8009770:	21ef      	movs	r1, #239	@ 0xef
 8009772:	48a0      	ldr	r0, [pc, #640]	@ (80099f4 <_dtoa_r+0x2b4>)
 8009774:	f001 fbde 	bl	800af34 <__assert_func>
 8009778:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800977c:	6007      	str	r7, [r0, #0]
 800977e:	60c7      	str	r7, [r0, #12]
 8009780:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009784:	6819      	ldr	r1, [r3, #0]
 8009786:	b159      	cbz	r1, 80097a0 <_dtoa_r+0x60>
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	604a      	str	r2, [r1, #4]
 800978c:	2301      	movs	r3, #1
 800978e:	4093      	lsls	r3, r2
 8009790:	608b      	str	r3, [r1, #8]
 8009792:	4648      	mov	r0, r9
 8009794:	f000 fed4 	bl	800a540 <_Bfree>
 8009798:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
 80097a0:	1e2b      	subs	r3, r5, #0
 80097a2:	bfbb      	ittet	lt
 80097a4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80097a8:	9303      	strlt	r3, [sp, #12]
 80097aa:	2300      	movge	r3, #0
 80097ac:	2201      	movlt	r2, #1
 80097ae:	bfac      	ite	ge
 80097b0:	6033      	strge	r3, [r6, #0]
 80097b2:	6032      	strlt	r2, [r6, #0]
 80097b4:	4b90      	ldr	r3, [pc, #576]	@ (80099f8 <_dtoa_r+0x2b8>)
 80097b6:	9e03      	ldr	r6, [sp, #12]
 80097b8:	43b3      	bics	r3, r6
 80097ba:	d110      	bne.n	80097de <_dtoa_r+0x9e>
 80097bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097be:	f242 730f 	movw	r3, #9999	@ 0x270f
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80097c8:	4323      	orrs	r3, r4
 80097ca:	f000 84e6 	beq.w	800a19a <_dtoa_r+0xa5a>
 80097ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097d0:	4f8a      	ldr	r7, [pc, #552]	@ (80099fc <_dtoa_r+0x2bc>)
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 84e8 	beq.w	800a1a8 <_dtoa_r+0xa68>
 80097d8:	1cfb      	adds	r3, r7, #3
 80097da:	f000 bce3 	b.w	800a1a4 <_dtoa_r+0xa64>
 80097de:	ed9d 8b02 	vldr	d8, [sp, #8]
 80097e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	d10a      	bne.n	8009802 <_dtoa_r+0xc2>
 80097ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097ee:	2301      	movs	r3, #1
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097f4:	b113      	cbz	r3, 80097fc <_dtoa_r+0xbc>
 80097f6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80097f8:	4b81      	ldr	r3, [pc, #516]	@ (8009a00 <_dtoa_r+0x2c0>)
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	4f81      	ldr	r7, [pc, #516]	@ (8009a04 <_dtoa_r+0x2c4>)
 80097fe:	f000 bcd3 	b.w	800a1a8 <_dtoa_r+0xa68>
 8009802:	aa0e      	add	r2, sp, #56	@ 0x38
 8009804:	a90f      	add	r1, sp, #60	@ 0x3c
 8009806:	4648      	mov	r0, r9
 8009808:	eeb0 0b48 	vmov.f64	d0, d8
 800980c:	f001 f97a 	bl	800ab04 <__d2b>
 8009810:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009814:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009816:	9001      	str	r0, [sp, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d045      	beq.n	80098a8 <_dtoa_r+0x168>
 800981c:	eeb0 7b48 	vmov.f64	d7, d8
 8009820:	ee18 1a90 	vmov	r1, s17
 8009824:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009828:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800982c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009830:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009834:	2500      	movs	r5, #0
 8009836:	ee07 1a90 	vmov	s15, r1
 800983a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800983e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80099d8 <_dtoa_r+0x298>
 8009842:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009846:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80099e0 <_dtoa_r+0x2a0>
 800984a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800984e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80099e8 <_dtoa_r+0x2a8>
 8009852:	ee07 3a90 	vmov	s15, r3
 8009856:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800985a:	eeb0 7b46 	vmov.f64	d7, d6
 800985e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009862:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009866:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800986a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986e:	ee16 8a90 	vmov	r8, s13
 8009872:	d508      	bpl.n	8009886 <_dtoa_r+0x146>
 8009874:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009878:	eeb4 6b47 	vcmp.f64	d6, d7
 800987c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009880:	bf18      	it	ne
 8009882:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8009886:	f1b8 0f16 	cmp.w	r8, #22
 800988a:	d82b      	bhi.n	80098e4 <_dtoa_r+0x1a4>
 800988c:	495e      	ldr	r1, [pc, #376]	@ (8009a08 <_dtoa_r+0x2c8>)
 800988e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009892:	ed91 7b00 	vldr	d7, [r1]
 8009896:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800989a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800989e:	d501      	bpl.n	80098a4 <_dtoa_r+0x164>
 80098a0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80098a4:	2100      	movs	r1, #0
 80098a6:	e01e      	b.n	80098e6 <_dtoa_r+0x1a6>
 80098a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098aa:	4413      	add	r3, r2
 80098ac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80098b0:	2920      	cmp	r1, #32
 80098b2:	bfc1      	itttt	gt
 80098b4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80098b8:	408e      	lslgt	r6, r1
 80098ba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80098be:	fa24 f101 	lsrgt.w	r1, r4, r1
 80098c2:	bfd6      	itet	le
 80098c4:	f1c1 0120 	rsble	r1, r1, #32
 80098c8:	4331      	orrgt	r1, r6
 80098ca:	fa04 f101 	lslle.w	r1, r4, r1
 80098ce:	ee07 1a90 	vmov	s15, r1
 80098d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80098d6:	3b01      	subs	r3, #1
 80098d8:	ee17 1a90 	vmov	r1, s15
 80098dc:	2501      	movs	r5, #1
 80098de:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80098e2:	e7a8      	b.n	8009836 <_dtoa_r+0xf6>
 80098e4:	2101      	movs	r1, #1
 80098e6:	1ad2      	subs	r2, r2, r3
 80098e8:	1e53      	subs	r3, r2, #1
 80098ea:	9306      	str	r3, [sp, #24]
 80098ec:	bf45      	ittet	mi
 80098ee:	f1c2 0301 	rsbmi	r3, r2, #1
 80098f2:	9304      	strmi	r3, [sp, #16]
 80098f4:	2300      	movpl	r3, #0
 80098f6:	2300      	movmi	r3, #0
 80098f8:	bf4c      	ite	mi
 80098fa:	9306      	strmi	r3, [sp, #24]
 80098fc:	9304      	strpl	r3, [sp, #16]
 80098fe:	f1b8 0f00 	cmp.w	r8, #0
 8009902:	910c      	str	r1, [sp, #48]	@ 0x30
 8009904:	db18      	blt.n	8009938 <_dtoa_r+0x1f8>
 8009906:	9b06      	ldr	r3, [sp, #24]
 8009908:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800990c:	4443      	add	r3, r8
 800990e:	9306      	str	r3, [sp, #24]
 8009910:	2300      	movs	r3, #0
 8009912:	9a07      	ldr	r2, [sp, #28]
 8009914:	2a09      	cmp	r2, #9
 8009916:	d845      	bhi.n	80099a4 <_dtoa_r+0x264>
 8009918:	2a05      	cmp	r2, #5
 800991a:	bfc4      	itt	gt
 800991c:	3a04      	subgt	r2, #4
 800991e:	9207      	strgt	r2, [sp, #28]
 8009920:	9a07      	ldr	r2, [sp, #28]
 8009922:	f1a2 0202 	sub.w	r2, r2, #2
 8009926:	bfcc      	ite	gt
 8009928:	2400      	movgt	r4, #0
 800992a:	2401      	movle	r4, #1
 800992c:	2a03      	cmp	r2, #3
 800992e:	d844      	bhi.n	80099ba <_dtoa_r+0x27a>
 8009930:	e8df f002 	tbb	[pc, r2]
 8009934:	0b173634 	.word	0x0b173634
 8009938:	9b04      	ldr	r3, [sp, #16]
 800993a:	2200      	movs	r2, #0
 800993c:	eba3 0308 	sub.w	r3, r3, r8
 8009940:	9304      	str	r3, [sp, #16]
 8009942:	920a      	str	r2, [sp, #40]	@ 0x28
 8009944:	f1c8 0300 	rsb	r3, r8, #0
 8009948:	e7e3      	b.n	8009912 <_dtoa_r+0x1d2>
 800994a:	2201      	movs	r2, #1
 800994c:	9208      	str	r2, [sp, #32]
 800994e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009950:	eb08 0b02 	add.w	fp, r8, r2
 8009954:	f10b 0a01 	add.w	sl, fp, #1
 8009958:	4652      	mov	r2, sl
 800995a:	2a01      	cmp	r2, #1
 800995c:	bfb8      	it	lt
 800995e:	2201      	movlt	r2, #1
 8009960:	e006      	b.n	8009970 <_dtoa_r+0x230>
 8009962:	2201      	movs	r2, #1
 8009964:	9208      	str	r2, [sp, #32]
 8009966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009968:	2a00      	cmp	r2, #0
 800996a:	dd29      	ble.n	80099c0 <_dtoa_r+0x280>
 800996c:	4693      	mov	fp, r2
 800996e:	4692      	mov	sl, r2
 8009970:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009974:	2100      	movs	r1, #0
 8009976:	2004      	movs	r0, #4
 8009978:	f100 0614 	add.w	r6, r0, #20
 800997c:	4296      	cmp	r6, r2
 800997e:	d926      	bls.n	80099ce <_dtoa_r+0x28e>
 8009980:	6079      	str	r1, [r7, #4]
 8009982:	4648      	mov	r0, r9
 8009984:	9305      	str	r3, [sp, #20]
 8009986:	f000 fd9b 	bl	800a4c0 <_Balloc>
 800998a:	9b05      	ldr	r3, [sp, #20]
 800998c:	4607      	mov	r7, r0
 800998e:	2800      	cmp	r0, #0
 8009990:	d13e      	bne.n	8009a10 <_dtoa_r+0x2d0>
 8009992:	4b1e      	ldr	r3, [pc, #120]	@ (8009a0c <_dtoa_r+0x2cc>)
 8009994:	4602      	mov	r2, r0
 8009996:	f240 11af 	movw	r1, #431	@ 0x1af
 800999a:	e6ea      	b.n	8009772 <_dtoa_r+0x32>
 800999c:	2200      	movs	r2, #0
 800999e:	e7e1      	b.n	8009964 <_dtoa_r+0x224>
 80099a0:	2200      	movs	r2, #0
 80099a2:	e7d3      	b.n	800994c <_dtoa_r+0x20c>
 80099a4:	2401      	movs	r4, #1
 80099a6:	2200      	movs	r2, #0
 80099a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80099ac:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80099b0:	2100      	movs	r1, #0
 80099b2:	46da      	mov	sl, fp
 80099b4:	2212      	movs	r2, #18
 80099b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80099b8:	e7da      	b.n	8009970 <_dtoa_r+0x230>
 80099ba:	2201      	movs	r2, #1
 80099bc:	9208      	str	r2, [sp, #32]
 80099be:	e7f5      	b.n	80099ac <_dtoa_r+0x26c>
 80099c0:	f04f 0b01 	mov.w	fp, #1
 80099c4:	46da      	mov	sl, fp
 80099c6:	465a      	mov	r2, fp
 80099c8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80099cc:	e7d0      	b.n	8009970 <_dtoa_r+0x230>
 80099ce:	3101      	adds	r1, #1
 80099d0:	0040      	lsls	r0, r0, #1
 80099d2:	e7d1      	b.n	8009978 <_dtoa_r+0x238>
 80099d4:	f3af 8000 	nop.w
 80099d8:	636f4361 	.word	0x636f4361
 80099dc:	3fd287a7 	.word	0x3fd287a7
 80099e0:	8b60c8b3 	.word	0x8b60c8b3
 80099e4:	3fc68a28 	.word	0x3fc68a28
 80099e8:	509f79fb 	.word	0x509f79fb
 80099ec:	3fd34413 	.word	0x3fd34413
 80099f0:	0800b425 	.word	0x0800b425
 80099f4:	0800b43c 	.word	0x0800b43c
 80099f8:	7ff00000 	.word	0x7ff00000
 80099fc:	0800b421 	.word	0x0800b421
 8009a00:	0800b3f5 	.word	0x0800b3f5
 8009a04:	0800b3f4 	.word	0x0800b3f4
 8009a08:	0800b590 	.word	0x0800b590
 8009a0c:	0800b494 	.word	0x0800b494
 8009a10:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009a14:	f1ba 0f0e 	cmp.w	sl, #14
 8009a18:	6010      	str	r0, [r2, #0]
 8009a1a:	d86e      	bhi.n	8009afa <_dtoa_r+0x3ba>
 8009a1c:	2c00      	cmp	r4, #0
 8009a1e:	d06c      	beq.n	8009afa <_dtoa_r+0x3ba>
 8009a20:	f1b8 0f00 	cmp.w	r8, #0
 8009a24:	f340 80b4 	ble.w	8009b90 <_dtoa_r+0x450>
 8009a28:	4ac8      	ldr	r2, [pc, #800]	@ (8009d4c <_dtoa_r+0x60c>)
 8009a2a:	f008 010f 	and.w	r1, r8, #15
 8009a2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009a32:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009a36:	ed92 7b00 	vldr	d7, [r2]
 8009a3a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009a3e:	f000 809b 	beq.w	8009b78 <_dtoa_r+0x438>
 8009a42:	4ac3      	ldr	r2, [pc, #780]	@ (8009d50 <_dtoa_r+0x610>)
 8009a44:	ed92 6b08 	vldr	d6, [r2, #32]
 8009a48:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009a4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a50:	f001 010f 	and.w	r1, r1, #15
 8009a54:	2203      	movs	r2, #3
 8009a56:	48be      	ldr	r0, [pc, #760]	@ (8009d50 <_dtoa_r+0x610>)
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	f040 808f 	bne.w	8009b7c <_dtoa_r+0x43c>
 8009a5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a6a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009a6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a70:	2900      	cmp	r1, #0
 8009a72:	f000 80b3 	beq.w	8009bdc <_dtoa_r+0x49c>
 8009a76:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009a7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a82:	f140 80ab 	bpl.w	8009bdc <_dtoa_r+0x49c>
 8009a86:	f1ba 0f00 	cmp.w	sl, #0
 8009a8a:	f000 80a7 	beq.w	8009bdc <_dtoa_r+0x49c>
 8009a8e:	f1bb 0f00 	cmp.w	fp, #0
 8009a92:	dd30      	ble.n	8009af6 <_dtoa_r+0x3b6>
 8009a94:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009a98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009aa0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8009aa4:	9105      	str	r1, [sp, #20]
 8009aa6:	3201      	adds	r2, #1
 8009aa8:	465c      	mov	r4, fp
 8009aaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009aae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009ab2:	ee07 2a90 	vmov	s15, r2
 8009ab6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009aba:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009abe:	ee15 2a90 	vmov	r2, s11
 8009ac2:	ec51 0b15 	vmov	r0, r1, d5
 8009ac6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009aca:	2c00      	cmp	r4, #0
 8009acc:	f040 808a 	bne.w	8009be4 <_dtoa_r+0x4a4>
 8009ad0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009ad4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009ad8:	ec41 0b17 	vmov	d7, r0, r1
 8009adc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae4:	f300 826a 	bgt.w	8009fbc <_dtoa_r+0x87c>
 8009ae8:	eeb1 7b47 	vneg.f64	d7, d7
 8009aec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af4:	d423      	bmi.n	8009b3e <_dtoa_r+0x3fe>
 8009af6:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009afa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	f2c0 8129 	blt.w	8009d54 <_dtoa_r+0x614>
 8009b02:	f1b8 0f0e 	cmp.w	r8, #14
 8009b06:	f300 8125 	bgt.w	8009d54 <_dtoa_r+0x614>
 8009b0a:	4b90      	ldr	r3, [pc, #576]	@ (8009d4c <_dtoa_r+0x60c>)
 8009b0c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009b10:	ed93 6b00 	vldr	d6, [r3]
 8009b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f280 80c8 	bge.w	8009cac <_dtoa_r+0x56c>
 8009b1c:	f1ba 0f00 	cmp.w	sl, #0
 8009b20:	f300 80c4 	bgt.w	8009cac <_dtoa_r+0x56c>
 8009b24:	d10b      	bne.n	8009b3e <_dtoa_r+0x3fe>
 8009b26:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009b2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3a:	f2c0 823c 	blt.w	8009fb6 <_dtoa_r+0x876>
 8009b3e:	2400      	movs	r4, #0
 8009b40:	4625      	mov	r5, r4
 8009b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b44:	43db      	mvns	r3, r3
 8009b46:	9305      	str	r3, [sp, #20]
 8009b48:	463e      	mov	r6, r7
 8009b4a:	f04f 0800 	mov.w	r8, #0
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4648      	mov	r0, r9
 8009b52:	f000 fcf5 	bl	800a540 <_Bfree>
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	f000 80a2 	beq.w	8009ca0 <_dtoa_r+0x560>
 8009b5c:	f1b8 0f00 	cmp.w	r8, #0
 8009b60:	d005      	beq.n	8009b6e <_dtoa_r+0x42e>
 8009b62:	45a8      	cmp	r8, r5
 8009b64:	d003      	beq.n	8009b6e <_dtoa_r+0x42e>
 8009b66:	4641      	mov	r1, r8
 8009b68:	4648      	mov	r0, r9
 8009b6a:	f000 fce9 	bl	800a540 <_Bfree>
 8009b6e:	4629      	mov	r1, r5
 8009b70:	4648      	mov	r0, r9
 8009b72:	f000 fce5 	bl	800a540 <_Bfree>
 8009b76:	e093      	b.n	8009ca0 <_dtoa_r+0x560>
 8009b78:	2202      	movs	r2, #2
 8009b7a:	e76c      	b.n	8009a56 <_dtoa_r+0x316>
 8009b7c:	07cc      	lsls	r4, r1, #31
 8009b7e:	d504      	bpl.n	8009b8a <_dtoa_r+0x44a>
 8009b80:	ed90 6b00 	vldr	d6, [r0]
 8009b84:	3201      	adds	r2, #1
 8009b86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b8a:	1049      	asrs	r1, r1, #1
 8009b8c:	3008      	adds	r0, #8
 8009b8e:	e763      	b.n	8009a58 <_dtoa_r+0x318>
 8009b90:	d022      	beq.n	8009bd8 <_dtoa_r+0x498>
 8009b92:	f1c8 0100 	rsb	r1, r8, #0
 8009b96:	4a6d      	ldr	r2, [pc, #436]	@ (8009d4c <_dtoa_r+0x60c>)
 8009b98:	f001 000f 	and.w	r0, r1, #15
 8009b9c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009ba0:	ed92 7b00 	vldr	d7, [r2]
 8009ba4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009ba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bac:	4868      	ldr	r0, [pc, #416]	@ (8009d50 <_dtoa_r+0x610>)
 8009bae:	1109      	asrs	r1, r1, #4
 8009bb0:	2400      	movs	r4, #0
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	b929      	cbnz	r1, 8009bc2 <_dtoa_r+0x482>
 8009bb6:	2c00      	cmp	r4, #0
 8009bb8:	f43f af57 	beq.w	8009a6a <_dtoa_r+0x32a>
 8009bbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bc0:	e753      	b.n	8009a6a <_dtoa_r+0x32a>
 8009bc2:	07ce      	lsls	r6, r1, #31
 8009bc4:	d505      	bpl.n	8009bd2 <_dtoa_r+0x492>
 8009bc6:	ed90 6b00 	vldr	d6, [r0]
 8009bca:	3201      	adds	r2, #1
 8009bcc:	2401      	movs	r4, #1
 8009bce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bd2:	1049      	asrs	r1, r1, #1
 8009bd4:	3008      	adds	r0, #8
 8009bd6:	e7ed      	b.n	8009bb4 <_dtoa_r+0x474>
 8009bd8:	2202      	movs	r2, #2
 8009bda:	e746      	b.n	8009a6a <_dtoa_r+0x32a>
 8009bdc:	f8cd 8014 	str.w	r8, [sp, #20]
 8009be0:	4654      	mov	r4, sl
 8009be2:	e762      	b.n	8009aaa <_dtoa_r+0x36a>
 8009be4:	4a59      	ldr	r2, [pc, #356]	@ (8009d4c <_dtoa_r+0x60c>)
 8009be6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009bea:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009bee:	9a08      	ldr	r2, [sp, #32]
 8009bf0:	ec41 0b17 	vmov	d7, r0, r1
 8009bf4:	443c      	add	r4, r7
 8009bf6:	b34a      	cbz	r2, 8009c4c <_dtoa_r+0x50c>
 8009bf8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009bfc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009c00:	463e      	mov	r6, r7
 8009c02:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009c06:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009c0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c0e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c12:	ee14 2a90 	vmov	r2, s9
 8009c16:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c1a:	3230      	adds	r2, #48	@ 0x30
 8009c1c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c28:	f806 2b01 	strb.w	r2, [r6], #1
 8009c2c:	d438      	bmi.n	8009ca0 <_dtoa_r+0x560>
 8009c2e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009c32:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3a:	d46e      	bmi.n	8009d1a <_dtoa_r+0x5da>
 8009c3c:	42a6      	cmp	r6, r4
 8009c3e:	f43f af5a 	beq.w	8009af6 <_dtoa_r+0x3b6>
 8009c42:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009c46:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c4a:	e7e0      	b.n	8009c0e <_dtoa_r+0x4ce>
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	463e      	mov	r6, r7
 8009c50:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c54:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009c58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c5c:	ee14 2a90 	vmov	r2, s9
 8009c60:	3230      	adds	r2, #48	@ 0x30
 8009c62:	f806 2b01 	strb.w	r2, [r6], #1
 8009c66:	42a6      	cmp	r6, r4
 8009c68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c70:	d119      	bne.n	8009ca6 <_dtoa_r+0x566>
 8009c72:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009c76:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009c7a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c82:	dc4a      	bgt.n	8009d1a <_dtoa_r+0x5da>
 8009c84:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009c88:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c90:	f57f af31 	bpl.w	8009af6 <_dtoa_r+0x3b6>
 8009c94:	460e      	mov	r6, r1
 8009c96:	3901      	subs	r1, #1
 8009c98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c9c:	2b30      	cmp	r3, #48	@ 0x30
 8009c9e:	d0f9      	beq.n	8009c94 <_dtoa_r+0x554>
 8009ca0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009ca4:	e027      	b.n	8009cf6 <_dtoa_r+0x5b6>
 8009ca6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009caa:	e7d5      	b.n	8009c58 <_dtoa_r+0x518>
 8009cac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cb0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009cb4:	463e      	mov	r6, r7
 8009cb6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009cba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009cbe:	ee15 3a10 	vmov	r3, s10
 8009cc2:	3330      	adds	r3, #48	@ 0x30
 8009cc4:	f806 3b01 	strb.w	r3, [r6], #1
 8009cc8:	1bf3      	subs	r3, r6, r7
 8009cca:	459a      	cmp	sl, r3
 8009ccc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009cd0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009cd4:	d132      	bne.n	8009d3c <_dtoa_r+0x5fc>
 8009cd6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009cda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce2:	dc18      	bgt.n	8009d16 <_dtoa_r+0x5d6>
 8009ce4:	eeb4 7b46 	vcmp.f64	d7, d6
 8009ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cec:	d103      	bne.n	8009cf6 <_dtoa_r+0x5b6>
 8009cee:	ee15 3a10 	vmov	r3, s10
 8009cf2:	07db      	lsls	r3, r3, #31
 8009cf4:	d40f      	bmi.n	8009d16 <_dtoa_r+0x5d6>
 8009cf6:	9901      	ldr	r1, [sp, #4]
 8009cf8:	4648      	mov	r0, r9
 8009cfa:	f000 fc21 	bl	800a540 <_Bfree>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d02:	7033      	strb	r3, [r6, #0]
 8009d04:	f108 0301 	add.w	r3, r8, #1
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 824b 	beq.w	800a1a8 <_dtoa_r+0xa68>
 8009d12:	601e      	str	r6, [r3, #0]
 8009d14:	e248      	b.n	800a1a8 <_dtoa_r+0xa68>
 8009d16:	f8cd 8014 	str.w	r8, [sp, #20]
 8009d1a:	4633      	mov	r3, r6
 8009d1c:	461e      	mov	r6, r3
 8009d1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d22:	2a39      	cmp	r2, #57	@ 0x39
 8009d24:	d106      	bne.n	8009d34 <_dtoa_r+0x5f4>
 8009d26:	429f      	cmp	r7, r3
 8009d28:	d1f8      	bne.n	8009d1c <_dtoa_r+0x5dc>
 8009d2a:	9a05      	ldr	r2, [sp, #20]
 8009d2c:	3201      	adds	r2, #1
 8009d2e:	9205      	str	r2, [sp, #20]
 8009d30:	2230      	movs	r2, #48	@ 0x30
 8009d32:	703a      	strb	r2, [r7, #0]
 8009d34:	781a      	ldrb	r2, [r3, #0]
 8009d36:	3201      	adds	r2, #1
 8009d38:	701a      	strb	r2, [r3, #0]
 8009d3a:	e7b1      	b.n	8009ca0 <_dtoa_r+0x560>
 8009d3c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d48:	d1b5      	bne.n	8009cb6 <_dtoa_r+0x576>
 8009d4a:	e7d4      	b.n	8009cf6 <_dtoa_r+0x5b6>
 8009d4c:	0800b590 	.word	0x0800b590
 8009d50:	0800b568 	.word	0x0800b568
 8009d54:	9908      	ldr	r1, [sp, #32]
 8009d56:	2900      	cmp	r1, #0
 8009d58:	f000 80e9 	beq.w	8009f2e <_dtoa_r+0x7ee>
 8009d5c:	9907      	ldr	r1, [sp, #28]
 8009d5e:	2901      	cmp	r1, #1
 8009d60:	f300 80cb 	bgt.w	8009efa <_dtoa_r+0x7ba>
 8009d64:	2d00      	cmp	r5, #0
 8009d66:	f000 80c4 	beq.w	8009ef2 <_dtoa_r+0x7b2>
 8009d6a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009d6e:	9e04      	ldr	r6, [sp, #16]
 8009d70:	461c      	mov	r4, r3
 8009d72:	9305      	str	r3, [sp, #20]
 8009d74:	9b04      	ldr	r3, [sp, #16]
 8009d76:	4413      	add	r3, r2
 8009d78:	9304      	str	r3, [sp, #16]
 8009d7a:	9b06      	ldr	r3, [sp, #24]
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	4413      	add	r3, r2
 8009d80:	4648      	mov	r0, r9
 8009d82:	9306      	str	r3, [sp, #24]
 8009d84:	f000 fc90 	bl	800a6a8 <__i2b>
 8009d88:	9b05      	ldr	r3, [sp, #20]
 8009d8a:	4605      	mov	r5, r0
 8009d8c:	b166      	cbz	r6, 8009da8 <_dtoa_r+0x668>
 8009d8e:	9a06      	ldr	r2, [sp, #24]
 8009d90:	2a00      	cmp	r2, #0
 8009d92:	dd09      	ble.n	8009da8 <_dtoa_r+0x668>
 8009d94:	42b2      	cmp	r2, r6
 8009d96:	9904      	ldr	r1, [sp, #16]
 8009d98:	bfa8      	it	ge
 8009d9a:	4632      	movge	r2, r6
 8009d9c:	1a89      	subs	r1, r1, r2
 8009d9e:	9104      	str	r1, [sp, #16]
 8009da0:	9906      	ldr	r1, [sp, #24]
 8009da2:	1ab6      	subs	r6, r6, r2
 8009da4:	1a8a      	subs	r2, r1, r2
 8009da6:	9206      	str	r2, [sp, #24]
 8009da8:	b30b      	cbz	r3, 8009dee <_dtoa_r+0x6ae>
 8009daa:	9a08      	ldr	r2, [sp, #32]
 8009dac:	2a00      	cmp	r2, #0
 8009dae:	f000 80c5 	beq.w	8009f3c <_dtoa_r+0x7fc>
 8009db2:	2c00      	cmp	r4, #0
 8009db4:	f000 80bf 	beq.w	8009f36 <_dtoa_r+0x7f6>
 8009db8:	4629      	mov	r1, r5
 8009dba:	4622      	mov	r2, r4
 8009dbc:	4648      	mov	r0, r9
 8009dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dc0:	f000 fd2a 	bl	800a818 <__pow5mult>
 8009dc4:	9a01      	ldr	r2, [sp, #4]
 8009dc6:	4601      	mov	r1, r0
 8009dc8:	4605      	mov	r5, r0
 8009dca:	4648      	mov	r0, r9
 8009dcc:	f000 fc82 	bl	800a6d4 <__multiply>
 8009dd0:	9901      	ldr	r1, [sp, #4]
 8009dd2:	9005      	str	r0, [sp, #20]
 8009dd4:	4648      	mov	r0, r9
 8009dd6:	f000 fbb3 	bl	800a540 <_Bfree>
 8009dda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ddc:	1b1b      	subs	r3, r3, r4
 8009dde:	f000 80b0 	beq.w	8009f42 <_dtoa_r+0x802>
 8009de2:	9905      	ldr	r1, [sp, #20]
 8009de4:	461a      	mov	r2, r3
 8009de6:	4648      	mov	r0, r9
 8009de8:	f000 fd16 	bl	800a818 <__pow5mult>
 8009dec:	9001      	str	r0, [sp, #4]
 8009dee:	2101      	movs	r1, #1
 8009df0:	4648      	mov	r0, r9
 8009df2:	f000 fc59 	bl	800a6a8 <__i2b>
 8009df6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009df8:	4604      	mov	r4, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 81da 	beq.w	800a1b4 <_dtoa_r+0xa74>
 8009e00:	461a      	mov	r2, r3
 8009e02:	4601      	mov	r1, r0
 8009e04:	4648      	mov	r0, r9
 8009e06:	f000 fd07 	bl	800a818 <__pow5mult>
 8009e0a:	9b07      	ldr	r3, [sp, #28]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	4604      	mov	r4, r0
 8009e10:	f300 80a0 	bgt.w	8009f54 <_dtoa_r+0x814>
 8009e14:	9b02      	ldr	r3, [sp, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f040 8096 	bne.w	8009f48 <_dtoa_r+0x808>
 8009e1c:	9b03      	ldr	r3, [sp, #12]
 8009e1e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009e22:	2a00      	cmp	r2, #0
 8009e24:	f040 8092 	bne.w	8009f4c <_dtoa_r+0x80c>
 8009e28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009e2c:	0d12      	lsrs	r2, r2, #20
 8009e2e:	0512      	lsls	r2, r2, #20
 8009e30:	2a00      	cmp	r2, #0
 8009e32:	f000 808d 	beq.w	8009f50 <_dtoa_r+0x810>
 8009e36:	9b04      	ldr	r3, [sp, #16]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	9304      	str	r3, [sp, #16]
 8009e3c:	9b06      	ldr	r3, [sp, #24]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	9306      	str	r3, [sp, #24]
 8009e42:	2301      	movs	r3, #1
 8009e44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 81b9 	beq.w	800a1c0 <_dtoa_r+0xa80>
 8009e4e:	6922      	ldr	r2, [r4, #16]
 8009e50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009e54:	6910      	ldr	r0, [r2, #16]
 8009e56:	f000 fbdb 	bl	800a610 <__hi0bits>
 8009e5a:	f1c0 0020 	rsb	r0, r0, #32
 8009e5e:	9b06      	ldr	r3, [sp, #24]
 8009e60:	4418      	add	r0, r3
 8009e62:	f010 001f 	ands.w	r0, r0, #31
 8009e66:	f000 8081 	beq.w	8009f6c <_dtoa_r+0x82c>
 8009e6a:	f1c0 0220 	rsb	r2, r0, #32
 8009e6e:	2a04      	cmp	r2, #4
 8009e70:	dd73      	ble.n	8009f5a <_dtoa_r+0x81a>
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	f1c0 001c 	rsb	r0, r0, #28
 8009e78:	4403      	add	r3, r0
 8009e7a:	9304      	str	r3, [sp, #16]
 8009e7c:	9b06      	ldr	r3, [sp, #24]
 8009e7e:	4406      	add	r6, r0
 8009e80:	4403      	add	r3, r0
 8009e82:	9306      	str	r3, [sp, #24]
 8009e84:	9b04      	ldr	r3, [sp, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dd05      	ble.n	8009e96 <_dtoa_r+0x756>
 8009e8a:	9901      	ldr	r1, [sp, #4]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	4648      	mov	r0, r9
 8009e90:	f000 fd1c 	bl	800a8cc <__lshift>
 8009e94:	9001      	str	r0, [sp, #4]
 8009e96:	9b06      	ldr	r3, [sp, #24]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	dd05      	ble.n	8009ea8 <_dtoa_r+0x768>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	4648      	mov	r0, r9
 8009ea2:	f000 fd13 	bl	800a8cc <__lshift>
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d060      	beq.n	8009f70 <_dtoa_r+0x830>
 8009eae:	9801      	ldr	r0, [sp, #4]
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	f000 fd77 	bl	800a9a4 <__mcmp>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	da5a      	bge.n	8009f70 <_dtoa_r+0x830>
 8009eba:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8009ebe:	9305      	str	r3, [sp, #20]
 8009ec0:	9901      	ldr	r1, [sp, #4]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	220a      	movs	r2, #10
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	f000 fb5c 	bl	800a584 <__multadd>
 8009ecc:	9b08      	ldr	r3, [sp, #32]
 8009ece:	9001      	str	r0, [sp, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 8177 	beq.w	800a1c4 <_dtoa_r+0xa84>
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	2300      	movs	r3, #0
 8009eda:	220a      	movs	r2, #10
 8009edc:	4648      	mov	r0, r9
 8009ede:	f000 fb51 	bl	800a584 <__multadd>
 8009ee2:	f1bb 0f00 	cmp.w	fp, #0
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	dc6e      	bgt.n	8009fc8 <_dtoa_r+0x888>
 8009eea:	9b07      	ldr	r3, [sp, #28]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	dc48      	bgt.n	8009f82 <_dtoa_r+0x842>
 8009ef0:	e06a      	b.n	8009fc8 <_dtoa_r+0x888>
 8009ef2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ef4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009ef8:	e739      	b.n	8009d6e <_dtoa_r+0x62e>
 8009efa:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8009efe:	42a3      	cmp	r3, r4
 8009f00:	db07      	blt.n	8009f12 <_dtoa_r+0x7d2>
 8009f02:	f1ba 0f00 	cmp.w	sl, #0
 8009f06:	eba3 0404 	sub.w	r4, r3, r4
 8009f0a:	db0b      	blt.n	8009f24 <_dtoa_r+0x7e4>
 8009f0c:	9e04      	ldr	r6, [sp, #16]
 8009f0e:	4652      	mov	r2, sl
 8009f10:	e72f      	b.n	8009d72 <_dtoa_r+0x632>
 8009f12:	1ae2      	subs	r2, r4, r3
 8009f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f16:	9e04      	ldr	r6, [sp, #16]
 8009f18:	4413      	add	r3, r2
 8009f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f1c:	4652      	mov	r2, sl
 8009f1e:	4623      	mov	r3, r4
 8009f20:	2400      	movs	r4, #0
 8009f22:	e726      	b.n	8009d72 <_dtoa_r+0x632>
 8009f24:	9a04      	ldr	r2, [sp, #16]
 8009f26:	eba2 060a 	sub.w	r6, r2, sl
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	e721      	b.n	8009d72 <_dtoa_r+0x632>
 8009f2e:	9e04      	ldr	r6, [sp, #16]
 8009f30:	9d08      	ldr	r5, [sp, #32]
 8009f32:	461c      	mov	r4, r3
 8009f34:	e72a      	b.n	8009d8c <_dtoa_r+0x64c>
 8009f36:	9a01      	ldr	r2, [sp, #4]
 8009f38:	9205      	str	r2, [sp, #20]
 8009f3a:	e752      	b.n	8009de2 <_dtoa_r+0x6a2>
 8009f3c:	9901      	ldr	r1, [sp, #4]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	e751      	b.n	8009de6 <_dtoa_r+0x6a6>
 8009f42:	9b05      	ldr	r3, [sp, #20]
 8009f44:	9301      	str	r3, [sp, #4]
 8009f46:	e752      	b.n	8009dee <_dtoa_r+0x6ae>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e77b      	b.n	8009e44 <_dtoa_r+0x704>
 8009f4c:	9b02      	ldr	r3, [sp, #8]
 8009f4e:	e779      	b.n	8009e44 <_dtoa_r+0x704>
 8009f50:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009f52:	e778      	b.n	8009e46 <_dtoa_r+0x706>
 8009f54:	2300      	movs	r3, #0
 8009f56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f58:	e779      	b.n	8009e4e <_dtoa_r+0x70e>
 8009f5a:	d093      	beq.n	8009e84 <_dtoa_r+0x744>
 8009f5c:	9b04      	ldr	r3, [sp, #16]
 8009f5e:	321c      	adds	r2, #28
 8009f60:	4413      	add	r3, r2
 8009f62:	9304      	str	r3, [sp, #16]
 8009f64:	9b06      	ldr	r3, [sp, #24]
 8009f66:	4416      	add	r6, r2
 8009f68:	4413      	add	r3, r2
 8009f6a:	e78a      	b.n	8009e82 <_dtoa_r+0x742>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	e7f5      	b.n	8009f5c <_dtoa_r+0x81c>
 8009f70:	f1ba 0f00 	cmp.w	sl, #0
 8009f74:	f8cd 8014 	str.w	r8, [sp, #20]
 8009f78:	46d3      	mov	fp, sl
 8009f7a:	dc21      	bgt.n	8009fc0 <_dtoa_r+0x880>
 8009f7c:	9b07      	ldr	r3, [sp, #28]
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	dd1e      	ble.n	8009fc0 <_dtoa_r+0x880>
 8009f82:	f1bb 0f00 	cmp.w	fp, #0
 8009f86:	f47f addc 	bne.w	8009b42 <_dtoa_r+0x402>
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	465b      	mov	r3, fp
 8009f8e:	2205      	movs	r2, #5
 8009f90:	4648      	mov	r0, r9
 8009f92:	f000 faf7 	bl	800a584 <__multadd>
 8009f96:	4601      	mov	r1, r0
 8009f98:	4604      	mov	r4, r0
 8009f9a:	9801      	ldr	r0, [sp, #4]
 8009f9c:	f000 fd02 	bl	800a9a4 <__mcmp>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	f77f adce 	ble.w	8009b42 <_dtoa_r+0x402>
 8009fa6:	463e      	mov	r6, r7
 8009fa8:	2331      	movs	r3, #49	@ 0x31
 8009faa:	f806 3b01 	strb.w	r3, [r6], #1
 8009fae:	9b05      	ldr	r3, [sp, #20]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	9305      	str	r3, [sp, #20]
 8009fb4:	e5c9      	b.n	8009b4a <_dtoa_r+0x40a>
 8009fb6:	f8cd 8014 	str.w	r8, [sp, #20]
 8009fba:	4654      	mov	r4, sl
 8009fbc:	4625      	mov	r5, r4
 8009fbe:	e7f2      	b.n	8009fa6 <_dtoa_r+0x866>
 8009fc0:	9b08      	ldr	r3, [sp, #32]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 8102 	beq.w	800a1cc <_dtoa_r+0xa8c>
 8009fc8:	2e00      	cmp	r6, #0
 8009fca:	dd05      	ble.n	8009fd8 <_dtoa_r+0x898>
 8009fcc:	4629      	mov	r1, r5
 8009fce:	4632      	mov	r2, r6
 8009fd0:	4648      	mov	r0, r9
 8009fd2:	f000 fc7b 	bl	800a8cc <__lshift>
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d058      	beq.n	800a090 <_dtoa_r+0x950>
 8009fde:	6869      	ldr	r1, [r5, #4]
 8009fe0:	4648      	mov	r0, r9
 8009fe2:	f000 fa6d 	bl	800a4c0 <_Balloc>
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	b928      	cbnz	r0, 8009ff6 <_dtoa_r+0x8b6>
 8009fea:	4b82      	ldr	r3, [pc, #520]	@ (800a1f4 <_dtoa_r+0xab4>)
 8009fec:	4602      	mov	r2, r0
 8009fee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ff2:	f7ff bbbe 	b.w	8009772 <_dtoa_r+0x32>
 8009ff6:	692a      	ldr	r2, [r5, #16]
 8009ff8:	3202      	adds	r2, #2
 8009ffa:	0092      	lsls	r2, r2, #2
 8009ffc:	f105 010c 	add.w	r1, r5, #12
 800a000:	300c      	adds	r0, #12
 800a002:	f000 ff89 	bl	800af18 <memcpy>
 800a006:	2201      	movs	r2, #1
 800a008:	4631      	mov	r1, r6
 800a00a:	4648      	mov	r0, r9
 800a00c:	f000 fc5e 	bl	800a8cc <__lshift>
 800a010:	1c7b      	adds	r3, r7, #1
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	eb07 030b 	add.w	r3, r7, fp
 800a018:	9309      	str	r3, [sp, #36]	@ 0x24
 800a01a:	9b02      	ldr	r3, [sp, #8]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	46a8      	mov	r8, r5
 800a022:	9308      	str	r3, [sp, #32]
 800a024:	4605      	mov	r5, r0
 800a026:	9b04      	ldr	r3, [sp, #16]
 800a028:	9801      	ldr	r0, [sp, #4]
 800a02a:	4621      	mov	r1, r4
 800a02c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a030:	f7ff fafe 	bl	8009630 <quorem>
 800a034:	4641      	mov	r1, r8
 800a036:	9002      	str	r0, [sp, #8]
 800a038:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a03c:	9801      	ldr	r0, [sp, #4]
 800a03e:	f000 fcb1 	bl	800a9a4 <__mcmp>
 800a042:	462a      	mov	r2, r5
 800a044:	9006      	str	r0, [sp, #24]
 800a046:	4621      	mov	r1, r4
 800a048:	4648      	mov	r0, r9
 800a04a:	f000 fcc7 	bl	800a9dc <__mdiff>
 800a04e:	68c2      	ldr	r2, [r0, #12]
 800a050:	4606      	mov	r6, r0
 800a052:	b9fa      	cbnz	r2, 800a094 <_dtoa_r+0x954>
 800a054:	4601      	mov	r1, r0
 800a056:	9801      	ldr	r0, [sp, #4]
 800a058:	f000 fca4 	bl	800a9a4 <__mcmp>
 800a05c:	4602      	mov	r2, r0
 800a05e:	4631      	mov	r1, r6
 800a060:	4648      	mov	r0, r9
 800a062:	920a      	str	r2, [sp, #40]	@ 0x28
 800a064:	f000 fa6c 	bl	800a540 <_Bfree>
 800a068:	9b07      	ldr	r3, [sp, #28]
 800a06a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a06c:	9e04      	ldr	r6, [sp, #16]
 800a06e:	ea42 0103 	orr.w	r1, r2, r3
 800a072:	9b08      	ldr	r3, [sp, #32]
 800a074:	4319      	orrs	r1, r3
 800a076:	d10f      	bne.n	800a098 <_dtoa_r+0x958>
 800a078:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a07c:	d028      	beq.n	800a0d0 <_dtoa_r+0x990>
 800a07e:	9b06      	ldr	r3, [sp, #24]
 800a080:	2b00      	cmp	r3, #0
 800a082:	dd02      	ble.n	800a08a <_dtoa_r+0x94a>
 800a084:	9b02      	ldr	r3, [sp, #8]
 800a086:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a08a:	f88b a000 	strb.w	sl, [fp]
 800a08e:	e55e      	b.n	8009b4e <_dtoa_r+0x40e>
 800a090:	4628      	mov	r0, r5
 800a092:	e7bd      	b.n	800a010 <_dtoa_r+0x8d0>
 800a094:	2201      	movs	r2, #1
 800a096:	e7e2      	b.n	800a05e <_dtoa_r+0x91e>
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	db04      	blt.n	800a0a8 <_dtoa_r+0x968>
 800a09e:	9907      	ldr	r1, [sp, #28]
 800a0a0:	430b      	orrs	r3, r1
 800a0a2:	9908      	ldr	r1, [sp, #32]
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	d120      	bne.n	800a0ea <_dtoa_r+0x9aa>
 800a0a8:	2a00      	cmp	r2, #0
 800a0aa:	ddee      	ble.n	800a08a <_dtoa_r+0x94a>
 800a0ac:	9901      	ldr	r1, [sp, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	4648      	mov	r0, r9
 800a0b2:	f000 fc0b 	bl	800a8cc <__lshift>
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	9001      	str	r0, [sp, #4]
 800a0ba:	f000 fc73 	bl	800a9a4 <__mcmp>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	dc03      	bgt.n	800a0ca <_dtoa_r+0x98a>
 800a0c2:	d1e2      	bne.n	800a08a <_dtoa_r+0x94a>
 800a0c4:	f01a 0f01 	tst.w	sl, #1
 800a0c8:	d0df      	beq.n	800a08a <_dtoa_r+0x94a>
 800a0ca:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a0ce:	d1d9      	bne.n	800a084 <_dtoa_r+0x944>
 800a0d0:	2339      	movs	r3, #57	@ 0x39
 800a0d2:	f88b 3000 	strb.w	r3, [fp]
 800a0d6:	4633      	mov	r3, r6
 800a0d8:	461e      	mov	r6, r3
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0e0:	2a39      	cmp	r2, #57	@ 0x39
 800a0e2:	d052      	beq.n	800a18a <_dtoa_r+0xa4a>
 800a0e4:	3201      	adds	r2, #1
 800a0e6:	701a      	strb	r2, [r3, #0]
 800a0e8:	e531      	b.n	8009b4e <_dtoa_r+0x40e>
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	dd07      	ble.n	800a0fe <_dtoa_r+0x9be>
 800a0ee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a0f2:	d0ed      	beq.n	800a0d0 <_dtoa_r+0x990>
 800a0f4:	f10a 0301 	add.w	r3, sl, #1
 800a0f8:	f88b 3000 	strb.w	r3, [fp]
 800a0fc:	e527      	b.n	8009b4e <_dtoa_r+0x40e>
 800a0fe:	9b04      	ldr	r3, [sp, #16]
 800a100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a102:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a106:	4293      	cmp	r3, r2
 800a108:	d029      	beq.n	800a15e <_dtoa_r+0xa1e>
 800a10a:	9901      	ldr	r1, [sp, #4]
 800a10c:	2300      	movs	r3, #0
 800a10e:	220a      	movs	r2, #10
 800a110:	4648      	mov	r0, r9
 800a112:	f000 fa37 	bl	800a584 <__multadd>
 800a116:	45a8      	cmp	r8, r5
 800a118:	9001      	str	r0, [sp, #4]
 800a11a:	f04f 0300 	mov.w	r3, #0
 800a11e:	f04f 020a 	mov.w	r2, #10
 800a122:	4641      	mov	r1, r8
 800a124:	4648      	mov	r0, r9
 800a126:	d107      	bne.n	800a138 <_dtoa_r+0x9f8>
 800a128:	f000 fa2c 	bl	800a584 <__multadd>
 800a12c:	4680      	mov	r8, r0
 800a12e:	4605      	mov	r5, r0
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	3301      	adds	r3, #1
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	e776      	b.n	800a026 <_dtoa_r+0x8e6>
 800a138:	f000 fa24 	bl	800a584 <__multadd>
 800a13c:	4629      	mov	r1, r5
 800a13e:	4680      	mov	r8, r0
 800a140:	2300      	movs	r3, #0
 800a142:	220a      	movs	r2, #10
 800a144:	4648      	mov	r0, r9
 800a146:	f000 fa1d 	bl	800a584 <__multadd>
 800a14a:	4605      	mov	r5, r0
 800a14c:	e7f0      	b.n	800a130 <_dtoa_r+0x9f0>
 800a14e:	f1bb 0f00 	cmp.w	fp, #0
 800a152:	bfcc      	ite	gt
 800a154:	465e      	movgt	r6, fp
 800a156:	2601      	movle	r6, #1
 800a158:	443e      	add	r6, r7
 800a15a:	f04f 0800 	mov.w	r8, #0
 800a15e:	9901      	ldr	r1, [sp, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	4648      	mov	r0, r9
 800a164:	f000 fbb2 	bl	800a8cc <__lshift>
 800a168:	4621      	mov	r1, r4
 800a16a:	9001      	str	r0, [sp, #4]
 800a16c:	f000 fc1a 	bl	800a9a4 <__mcmp>
 800a170:	2800      	cmp	r0, #0
 800a172:	dcb0      	bgt.n	800a0d6 <_dtoa_r+0x996>
 800a174:	d102      	bne.n	800a17c <_dtoa_r+0xa3c>
 800a176:	f01a 0f01 	tst.w	sl, #1
 800a17a:	d1ac      	bne.n	800a0d6 <_dtoa_r+0x996>
 800a17c:	4633      	mov	r3, r6
 800a17e:	461e      	mov	r6, r3
 800a180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a184:	2a30      	cmp	r2, #48	@ 0x30
 800a186:	d0fa      	beq.n	800a17e <_dtoa_r+0xa3e>
 800a188:	e4e1      	b.n	8009b4e <_dtoa_r+0x40e>
 800a18a:	429f      	cmp	r7, r3
 800a18c:	d1a4      	bne.n	800a0d8 <_dtoa_r+0x998>
 800a18e:	9b05      	ldr	r3, [sp, #20]
 800a190:	3301      	adds	r3, #1
 800a192:	9305      	str	r3, [sp, #20]
 800a194:	2331      	movs	r3, #49	@ 0x31
 800a196:	703b      	strb	r3, [r7, #0]
 800a198:	e4d9      	b.n	8009b4e <_dtoa_r+0x40e>
 800a19a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a19c:	4f16      	ldr	r7, [pc, #88]	@ (800a1f8 <_dtoa_r+0xab8>)
 800a19e:	b11b      	cbz	r3, 800a1a8 <_dtoa_r+0xa68>
 800a1a0:	f107 0308 	add.w	r3, r7, #8
 800a1a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a1a6:	6013      	str	r3, [r2, #0]
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	b011      	add	sp, #68	@ 0x44
 800a1ac:	ecbd 8b02 	vpop	{d8}
 800a1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b4:	9b07      	ldr	r3, [sp, #28]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	f77f ae2c 	ble.w	8009e14 <_dtoa_r+0x6d4>
 800a1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	e64c      	b.n	8009e5e <_dtoa_r+0x71e>
 800a1c4:	f1bb 0f00 	cmp.w	fp, #0
 800a1c8:	f77f aed8 	ble.w	8009f7c <_dtoa_r+0x83c>
 800a1cc:	463e      	mov	r6, r7
 800a1ce:	9801      	ldr	r0, [sp, #4]
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	f7ff fa2d 	bl	8009630 <quorem>
 800a1d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a1da:	f806 ab01 	strb.w	sl, [r6], #1
 800a1de:	1bf2      	subs	r2, r6, r7
 800a1e0:	4593      	cmp	fp, r2
 800a1e2:	ddb4      	ble.n	800a14e <_dtoa_r+0xa0e>
 800a1e4:	9901      	ldr	r1, [sp, #4]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	220a      	movs	r2, #10
 800a1ea:	4648      	mov	r0, r9
 800a1ec:	f000 f9ca 	bl	800a584 <__multadd>
 800a1f0:	9001      	str	r0, [sp, #4]
 800a1f2:	e7ec      	b.n	800a1ce <_dtoa_r+0xa8e>
 800a1f4:	0800b494 	.word	0x0800b494
 800a1f8:	0800b418 	.word	0x0800b418

0800a1fc <malloc>:
 800a1fc:	4b02      	ldr	r3, [pc, #8]	@ (800a208 <malloc+0xc>)
 800a1fe:	4601      	mov	r1, r0
 800a200:	6818      	ldr	r0, [r3, #0]
 800a202:	f000 b825 	b.w	800a250 <_malloc_r>
 800a206:	bf00      	nop
 800a208:	2400001c 	.word	0x2400001c

0800a20c <sbrk_aligned>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	4e0f      	ldr	r6, [pc, #60]	@ (800a24c <sbrk_aligned+0x40>)
 800a210:	460c      	mov	r4, r1
 800a212:	6831      	ldr	r1, [r6, #0]
 800a214:	4605      	mov	r5, r0
 800a216:	b911      	cbnz	r1, 800a21e <sbrk_aligned+0x12>
 800a218:	f000 fe3a 	bl	800ae90 <_sbrk_r>
 800a21c:	6030      	str	r0, [r6, #0]
 800a21e:	4621      	mov	r1, r4
 800a220:	4628      	mov	r0, r5
 800a222:	f000 fe35 	bl	800ae90 <_sbrk_r>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	d103      	bne.n	800a232 <sbrk_aligned+0x26>
 800a22a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a22e:	4620      	mov	r0, r4
 800a230:	bd70      	pop	{r4, r5, r6, pc}
 800a232:	1cc4      	adds	r4, r0, #3
 800a234:	f024 0403 	bic.w	r4, r4, #3
 800a238:	42a0      	cmp	r0, r4
 800a23a:	d0f8      	beq.n	800a22e <sbrk_aligned+0x22>
 800a23c:	1a21      	subs	r1, r4, r0
 800a23e:	4628      	mov	r0, r5
 800a240:	f000 fe26 	bl	800ae90 <_sbrk_r>
 800a244:	3001      	adds	r0, #1
 800a246:	d1f2      	bne.n	800a22e <sbrk_aligned+0x22>
 800a248:	e7ef      	b.n	800a22a <sbrk_aligned+0x1e>
 800a24a:	bf00      	nop
 800a24c:	240006f4 	.word	0x240006f4

0800a250 <_malloc_r>:
 800a250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a254:	1ccd      	adds	r5, r1, #3
 800a256:	f025 0503 	bic.w	r5, r5, #3
 800a25a:	3508      	adds	r5, #8
 800a25c:	2d0c      	cmp	r5, #12
 800a25e:	bf38      	it	cc
 800a260:	250c      	movcc	r5, #12
 800a262:	2d00      	cmp	r5, #0
 800a264:	4606      	mov	r6, r0
 800a266:	db01      	blt.n	800a26c <_malloc_r+0x1c>
 800a268:	42a9      	cmp	r1, r5
 800a26a:	d904      	bls.n	800a276 <_malloc_r+0x26>
 800a26c:	230c      	movs	r3, #12
 800a26e:	6033      	str	r3, [r6, #0]
 800a270:	2000      	movs	r0, #0
 800a272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a276:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a34c <_malloc_r+0xfc>
 800a27a:	f000 f915 	bl	800a4a8 <__malloc_lock>
 800a27e:	f8d8 3000 	ldr.w	r3, [r8]
 800a282:	461c      	mov	r4, r3
 800a284:	bb44      	cbnz	r4, 800a2d8 <_malloc_r+0x88>
 800a286:	4629      	mov	r1, r5
 800a288:	4630      	mov	r0, r6
 800a28a:	f7ff ffbf 	bl	800a20c <sbrk_aligned>
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	4604      	mov	r4, r0
 800a292:	d158      	bne.n	800a346 <_malloc_r+0xf6>
 800a294:	f8d8 4000 	ldr.w	r4, [r8]
 800a298:	4627      	mov	r7, r4
 800a29a:	2f00      	cmp	r7, #0
 800a29c:	d143      	bne.n	800a326 <_malloc_r+0xd6>
 800a29e:	2c00      	cmp	r4, #0
 800a2a0:	d04b      	beq.n	800a33a <_malloc_r+0xea>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	eb04 0903 	add.w	r9, r4, r3
 800a2ac:	f000 fdf0 	bl	800ae90 <_sbrk_r>
 800a2b0:	4581      	cmp	r9, r0
 800a2b2:	d142      	bne.n	800a33a <_malloc_r+0xea>
 800a2b4:	6821      	ldr	r1, [r4, #0]
 800a2b6:	1a6d      	subs	r5, r5, r1
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ffa6 	bl	800a20c <sbrk_aligned>
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	d03a      	beq.n	800a33a <_malloc_r+0xea>
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	442b      	add	r3, r5
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	bb62      	cbnz	r2, 800a32c <_malloc_r+0xdc>
 800a2d2:	f8c8 7000 	str.w	r7, [r8]
 800a2d6:	e00f      	b.n	800a2f8 <_malloc_r+0xa8>
 800a2d8:	6822      	ldr	r2, [r4, #0]
 800a2da:	1b52      	subs	r2, r2, r5
 800a2dc:	d420      	bmi.n	800a320 <_malloc_r+0xd0>
 800a2de:	2a0b      	cmp	r2, #11
 800a2e0:	d917      	bls.n	800a312 <_malloc_r+0xc2>
 800a2e2:	1961      	adds	r1, r4, r5
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	6025      	str	r5, [r4, #0]
 800a2e8:	bf18      	it	ne
 800a2ea:	6059      	strne	r1, [r3, #4]
 800a2ec:	6863      	ldr	r3, [r4, #4]
 800a2ee:	bf08      	it	eq
 800a2f0:	f8c8 1000 	streq.w	r1, [r8]
 800a2f4:	5162      	str	r2, [r4, r5]
 800a2f6:	604b      	str	r3, [r1, #4]
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f000 f8db 	bl	800a4b4 <__malloc_unlock>
 800a2fe:	f104 000b 	add.w	r0, r4, #11
 800a302:	1d23      	adds	r3, r4, #4
 800a304:	f020 0007 	bic.w	r0, r0, #7
 800a308:	1ac2      	subs	r2, r0, r3
 800a30a:	bf1c      	itt	ne
 800a30c:	1a1b      	subne	r3, r3, r0
 800a30e:	50a3      	strne	r3, [r4, r2]
 800a310:	e7af      	b.n	800a272 <_malloc_r+0x22>
 800a312:	6862      	ldr	r2, [r4, #4]
 800a314:	42a3      	cmp	r3, r4
 800a316:	bf0c      	ite	eq
 800a318:	f8c8 2000 	streq.w	r2, [r8]
 800a31c:	605a      	strne	r2, [r3, #4]
 800a31e:	e7eb      	b.n	800a2f8 <_malloc_r+0xa8>
 800a320:	4623      	mov	r3, r4
 800a322:	6864      	ldr	r4, [r4, #4]
 800a324:	e7ae      	b.n	800a284 <_malloc_r+0x34>
 800a326:	463c      	mov	r4, r7
 800a328:	687f      	ldr	r7, [r7, #4]
 800a32a:	e7b6      	b.n	800a29a <_malloc_r+0x4a>
 800a32c:	461a      	mov	r2, r3
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	42a3      	cmp	r3, r4
 800a332:	d1fb      	bne.n	800a32c <_malloc_r+0xdc>
 800a334:	2300      	movs	r3, #0
 800a336:	6053      	str	r3, [r2, #4]
 800a338:	e7de      	b.n	800a2f8 <_malloc_r+0xa8>
 800a33a:	230c      	movs	r3, #12
 800a33c:	6033      	str	r3, [r6, #0]
 800a33e:	4630      	mov	r0, r6
 800a340:	f000 f8b8 	bl	800a4b4 <__malloc_unlock>
 800a344:	e794      	b.n	800a270 <_malloc_r+0x20>
 800a346:	6005      	str	r5, [r0, #0]
 800a348:	e7d6      	b.n	800a2f8 <_malloc_r+0xa8>
 800a34a:	bf00      	nop
 800a34c:	240006f8 	.word	0x240006f8

0800a350 <__sflush_r>:
 800a350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a358:	0716      	lsls	r6, r2, #28
 800a35a:	4605      	mov	r5, r0
 800a35c:	460c      	mov	r4, r1
 800a35e:	d454      	bmi.n	800a40a <__sflush_r+0xba>
 800a360:	684b      	ldr	r3, [r1, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	dc02      	bgt.n	800a36c <__sflush_r+0x1c>
 800a366:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a368:	2b00      	cmp	r3, #0
 800a36a:	dd48      	ble.n	800a3fe <__sflush_r+0xae>
 800a36c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a36e:	2e00      	cmp	r6, #0
 800a370:	d045      	beq.n	800a3fe <__sflush_r+0xae>
 800a372:	2300      	movs	r3, #0
 800a374:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a378:	682f      	ldr	r7, [r5, #0]
 800a37a:	6a21      	ldr	r1, [r4, #32]
 800a37c:	602b      	str	r3, [r5, #0]
 800a37e:	d030      	beq.n	800a3e2 <__sflush_r+0x92>
 800a380:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	0759      	lsls	r1, r3, #29
 800a386:	d505      	bpl.n	800a394 <__sflush_r+0x44>
 800a388:	6863      	ldr	r3, [r4, #4]
 800a38a:	1ad2      	subs	r2, r2, r3
 800a38c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a38e:	b10b      	cbz	r3, 800a394 <__sflush_r+0x44>
 800a390:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a392:	1ad2      	subs	r2, r2, r3
 800a394:	2300      	movs	r3, #0
 800a396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a398:	6a21      	ldr	r1, [r4, #32]
 800a39a:	4628      	mov	r0, r5
 800a39c:	47b0      	blx	r6
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	d106      	bne.n	800a3b2 <__sflush_r+0x62>
 800a3a4:	6829      	ldr	r1, [r5, #0]
 800a3a6:	291d      	cmp	r1, #29
 800a3a8:	d82b      	bhi.n	800a402 <__sflush_r+0xb2>
 800a3aa:	4a2a      	ldr	r2, [pc, #168]	@ (800a454 <__sflush_r+0x104>)
 800a3ac:	40ca      	lsrs	r2, r1
 800a3ae:	07d6      	lsls	r6, r2, #31
 800a3b0:	d527      	bpl.n	800a402 <__sflush_r+0xb2>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	6062      	str	r2, [r4, #4]
 800a3b6:	04d9      	lsls	r1, r3, #19
 800a3b8:	6922      	ldr	r2, [r4, #16]
 800a3ba:	6022      	str	r2, [r4, #0]
 800a3bc:	d504      	bpl.n	800a3c8 <__sflush_r+0x78>
 800a3be:	1c42      	adds	r2, r0, #1
 800a3c0:	d101      	bne.n	800a3c6 <__sflush_r+0x76>
 800a3c2:	682b      	ldr	r3, [r5, #0]
 800a3c4:	b903      	cbnz	r3, 800a3c8 <__sflush_r+0x78>
 800a3c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a3c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3ca:	602f      	str	r7, [r5, #0]
 800a3cc:	b1b9      	cbz	r1, 800a3fe <__sflush_r+0xae>
 800a3ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3d2:	4299      	cmp	r1, r3
 800a3d4:	d002      	beq.n	800a3dc <__sflush_r+0x8c>
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f000 fdde 	bl	800af98 <_free_r>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3e0:	e00d      	b.n	800a3fe <__sflush_r+0xae>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	47b0      	blx	r6
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	1c50      	adds	r0, r2, #1
 800a3ec:	d1c9      	bne.n	800a382 <__sflush_r+0x32>
 800a3ee:	682b      	ldr	r3, [r5, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d0c6      	beq.n	800a382 <__sflush_r+0x32>
 800a3f4:	2b1d      	cmp	r3, #29
 800a3f6:	d001      	beq.n	800a3fc <__sflush_r+0xac>
 800a3f8:	2b16      	cmp	r3, #22
 800a3fa:	d11e      	bne.n	800a43a <__sflush_r+0xea>
 800a3fc:	602f      	str	r7, [r5, #0]
 800a3fe:	2000      	movs	r0, #0
 800a400:	e022      	b.n	800a448 <__sflush_r+0xf8>
 800a402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a406:	b21b      	sxth	r3, r3
 800a408:	e01b      	b.n	800a442 <__sflush_r+0xf2>
 800a40a:	690f      	ldr	r7, [r1, #16]
 800a40c:	2f00      	cmp	r7, #0
 800a40e:	d0f6      	beq.n	800a3fe <__sflush_r+0xae>
 800a410:	0793      	lsls	r3, r2, #30
 800a412:	680e      	ldr	r6, [r1, #0]
 800a414:	bf08      	it	eq
 800a416:	694b      	ldreq	r3, [r1, #20]
 800a418:	600f      	str	r7, [r1, #0]
 800a41a:	bf18      	it	ne
 800a41c:	2300      	movne	r3, #0
 800a41e:	eba6 0807 	sub.w	r8, r6, r7
 800a422:	608b      	str	r3, [r1, #8]
 800a424:	f1b8 0f00 	cmp.w	r8, #0
 800a428:	dde9      	ble.n	800a3fe <__sflush_r+0xae>
 800a42a:	6a21      	ldr	r1, [r4, #32]
 800a42c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a42e:	4643      	mov	r3, r8
 800a430:	463a      	mov	r2, r7
 800a432:	4628      	mov	r0, r5
 800a434:	47b0      	blx	r6
 800a436:	2800      	cmp	r0, #0
 800a438:	dc08      	bgt.n	800a44c <__sflush_r+0xfc>
 800a43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a43e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a44c:	4407      	add	r7, r0
 800a44e:	eba8 0800 	sub.w	r8, r8, r0
 800a452:	e7e7      	b.n	800a424 <__sflush_r+0xd4>
 800a454:	20400001 	.word	0x20400001

0800a458 <_fflush_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	690b      	ldr	r3, [r1, #16]
 800a45c:	4605      	mov	r5, r0
 800a45e:	460c      	mov	r4, r1
 800a460:	b913      	cbnz	r3, 800a468 <_fflush_r+0x10>
 800a462:	2500      	movs	r5, #0
 800a464:	4628      	mov	r0, r5
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	b118      	cbz	r0, 800a472 <_fflush_r+0x1a>
 800a46a:	6a03      	ldr	r3, [r0, #32]
 800a46c:	b90b      	cbnz	r3, 800a472 <_fflush_r+0x1a>
 800a46e:	f7ff f811 	bl	8009494 <__sinit>
 800a472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d0f3      	beq.n	800a462 <_fflush_r+0xa>
 800a47a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a47c:	07d0      	lsls	r0, r2, #31
 800a47e:	d404      	bmi.n	800a48a <_fflush_r+0x32>
 800a480:	0599      	lsls	r1, r3, #22
 800a482:	d402      	bmi.n	800a48a <_fflush_r+0x32>
 800a484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a486:	f7ff f8cc 	bl	8009622 <__retarget_lock_acquire_recursive>
 800a48a:	4628      	mov	r0, r5
 800a48c:	4621      	mov	r1, r4
 800a48e:	f7ff ff5f 	bl	800a350 <__sflush_r>
 800a492:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a494:	07da      	lsls	r2, r3, #31
 800a496:	4605      	mov	r5, r0
 800a498:	d4e4      	bmi.n	800a464 <_fflush_r+0xc>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	059b      	lsls	r3, r3, #22
 800a49e:	d4e1      	bmi.n	800a464 <_fflush_r+0xc>
 800a4a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4a2:	f7ff f8bf 	bl	8009624 <__retarget_lock_release_recursive>
 800a4a6:	e7dd      	b.n	800a464 <_fflush_r+0xc>

0800a4a8 <__malloc_lock>:
 800a4a8:	4801      	ldr	r0, [pc, #4]	@ (800a4b0 <__malloc_lock+0x8>)
 800a4aa:	f7ff b8ba 	b.w	8009622 <__retarget_lock_acquire_recursive>
 800a4ae:	bf00      	nop
 800a4b0:	240006f0 	.word	0x240006f0

0800a4b4 <__malloc_unlock>:
 800a4b4:	4801      	ldr	r0, [pc, #4]	@ (800a4bc <__malloc_unlock+0x8>)
 800a4b6:	f7ff b8b5 	b.w	8009624 <__retarget_lock_release_recursive>
 800a4ba:	bf00      	nop
 800a4bc:	240006f0 	.word	0x240006f0

0800a4c0 <_Balloc>:
 800a4c0:	b570      	push	{r4, r5, r6, lr}
 800a4c2:	69c6      	ldr	r6, [r0, #28]
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	b976      	cbnz	r6, 800a4e8 <_Balloc+0x28>
 800a4ca:	2010      	movs	r0, #16
 800a4cc:	f7ff fe96 	bl	800a1fc <malloc>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	61e0      	str	r0, [r4, #28]
 800a4d4:	b920      	cbnz	r0, 800a4e0 <_Balloc+0x20>
 800a4d6:	4b18      	ldr	r3, [pc, #96]	@ (800a538 <_Balloc+0x78>)
 800a4d8:	4818      	ldr	r0, [pc, #96]	@ (800a53c <_Balloc+0x7c>)
 800a4da:	216b      	movs	r1, #107	@ 0x6b
 800a4dc:	f000 fd2a 	bl	800af34 <__assert_func>
 800a4e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4e4:	6006      	str	r6, [r0, #0]
 800a4e6:	60c6      	str	r6, [r0, #12]
 800a4e8:	69e6      	ldr	r6, [r4, #28]
 800a4ea:	68f3      	ldr	r3, [r6, #12]
 800a4ec:	b183      	cbz	r3, 800a510 <_Balloc+0x50>
 800a4ee:	69e3      	ldr	r3, [r4, #28]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4f6:	b9b8      	cbnz	r0, 800a528 <_Balloc+0x68>
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	fa01 f605 	lsl.w	r6, r1, r5
 800a4fe:	1d72      	adds	r2, r6, #5
 800a500:	0092      	lsls	r2, r2, #2
 800a502:	4620      	mov	r0, r4
 800a504:	f000 fd34 	bl	800af70 <_calloc_r>
 800a508:	b160      	cbz	r0, 800a524 <_Balloc+0x64>
 800a50a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a50e:	e00e      	b.n	800a52e <_Balloc+0x6e>
 800a510:	2221      	movs	r2, #33	@ 0x21
 800a512:	2104      	movs	r1, #4
 800a514:	4620      	mov	r0, r4
 800a516:	f000 fd2b 	bl	800af70 <_calloc_r>
 800a51a:	69e3      	ldr	r3, [r4, #28]
 800a51c:	60f0      	str	r0, [r6, #12]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e4      	bne.n	800a4ee <_Balloc+0x2e>
 800a524:	2000      	movs	r0, #0
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	6802      	ldr	r2, [r0, #0]
 800a52a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a52e:	2300      	movs	r3, #0
 800a530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a534:	e7f7      	b.n	800a526 <_Balloc+0x66>
 800a536:	bf00      	nop
 800a538:	0800b425 	.word	0x0800b425
 800a53c:	0800b4a5 	.word	0x0800b4a5

0800a540 <_Bfree>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	69c6      	ldr	r6, [r0, #28]
 800a544:	4605      	mov	r5, r0
 800a546:	460c      	mov	r4, r1
 800a548:	b976      	cbnz	r6, 800a568 <_Bfree+0x28>
 800a54a:	2010      	movs	r0, #16
 800a54c:	f7ff fe56 	bl	800a1fc <malloc>
 800a550:	4602      	mov	r2, r0
 800a552:	61e8      	str	r0, [r5, #28]
 800a554:	b920      	cbnz	r0, 800a560 <_Bfree+0x20>
 800a556:	4b09      	ldr	r3, [pc, #36]	@ (800a57c <_Bfree+0x3c>)
 800a558:	4809      	ldr	r0, [pc, #36]	@ (800a580 <_Bfree+0x40>)
 800a55a:	218f      	movs	r1, #143	@ 0x8f
 800a55c:	f000 fcea 	bl	800af34 <__assert_func>
 800a560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a564:	6006      	str	r6, [r0, #0]
 800a566:	60c6      	str	r6, [r0, #12]
 800a568:	b13c      	cbz	r4, 800a57a <_Bfree+0x3a>
 800a56a:	69eb      	ldr	r3, [r5, #28]
 800a56c:	6862      	ldr	r2, [r4, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a574:	6021      	str	r1, [r4, #0]
 800a576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	0800b425 	.word	0x0800b425
 800a580:	0800b4a5 	.word	0x0800b4a5

0800a584 <__multadd>:
 800a584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a588:	690d      	ldr	r5, [r1, #16]
 800a58a:	4607      	mov	r7, r0
 800a58c:	460c      	mov	r4, r1
 800a58e:	461e      	mov	r6, r3
 800a590:	f101 0c14 	add.w	ip, r1, #20
 800a594:	2000      	movs	r0, #0
 800a596:	f8dc 3000 	ldr.w	r3, [ip]
 800a59a:	b299      	uxth	r1, r3
 800a59c:	fb02 6101 	mla	r1, r2, r1, r6
 800a5a0:	0c1e      	lsrs	r6, r3, #16
 800a5a2:	0c0b      	lsrs	r3, r1, #16
 800a5a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a5a8:	b289      	uxth	r1, r1
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5b0:	4285      	cmp	r5, r0
 800a5b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a5b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5ba:	dcec      	bgt.n	800a596 <__multadd+0x12>
 800a5bc:	b30e      	cbz	r6, 800a602 <__multadd+0x7e>
 800a5be:	68a3      	ldr	r3, [r4, #8]
 800a5c0:	42ab      	cmp	r3, r5
 800a5c2:	dc19      	bgt.n	800a5f8 <__multadd+0x74>
 800a5c4:	6861      	ldr	r1, [r4, #4]
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	3101      	adds	r1, #1
 800a5ca:	f7ff ff79 	bl	800a4c0 <_Balloc>
 800a5ce:	4680      	mov	r8, r0
 800a5d0:	b928      	cbnz	r0, 800a5de <__multadd+0x5a>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a608 <__multadd+0x84>)
 800a5d6:	480d      	ldr	r0, [pc, #52]	@ (800a60c <__multadd+0x88>)
 800a5d8:	21ba      	movs	r1, #186	@ 0xba
 800a5da:	f000 fcab 	bl	800af34 <__assert_func>
 800a5de:	6922      	ldr	r2, [r4, #16]
 800a5e0:	3202      	adds	r2, #2
 800a5e2:	f104 010c 	add.w	r1, r4, #12
 800a5e6:	0092      	lsls	r2, r2, #2
 800a5e8:	300c      	adds	r0, #12
 800a5ea:	f000 fc95 	bl	800af18 <memcpy>
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	f7ff ffa5 	bl	800a540 <_Bfree>
 800a5f6:	4644      	mov	r4, r8
 800a5f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	615e      	str	r6, [r3, #20]
 800a600:	6125      	str	r5, [r4, #16]
 800a602:	4620      	mov	r0, r4
 800a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a608:	0800b494 	.word	0x0800b494
 800a60c:	0800b4a5 	.word	0x0800b4a5

0800a610 <__hi0bits>:
 800a610:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a614:	4603      	mov	r3, r0
 800a616:	bf36      	itet	cc
 800a618:	0403      	lslcc	r3, r0, #16
 800a61a:	2000      	movcs	r0, #0
 800a61c:	2010      	movcc	r0, #16
 800a61e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a622:	bf3c      	itt	cc
 800a624:	021b      	lslcc	r3, r3, #8
 800a626:	3008      	addcc	r0, #8
 800a628:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a62c:	bf3c      	itt	cc
 800a62e:	011b      	lslcc	r3, r3, #4
 800a630:	3004      	addcc	r0, #4
 800a632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a636:	bf3c      	itt	cc
 800a638:	009b      	lslcc	r3, r3, #2
 800a63a:	3002      	addcc	r0, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	db05      	blt.n	800a64c <__hi0bits+0x3c>
 800a640:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a644:	f100 0001 	add.w	r0, r0, #1
 800a648:	bf08      	it	eq
 800a64a:	2020      	moveq	r0, #32
 800a64c:	4770      	bx	lr

0800a64e <__lo0bits>:
 800a64e:	6803      	ldr	r3, [r0, #0]
 800a650:	4602      	mov	r2, r0
 800a652:	f013 0007 	ands.w	r0, r3, #7
 800a656:	d00b      	beq.n	800a670 <__lo0bits+0x22>
 800a658:	07d9      	lsls	r1, r3, #31
 800a65a:	d421      	bmi.n	800a6a0 <__lo0bits+0x52>
 800a65c:	0798      	lsls	r0, r3, #30
 800a65e:	bf49      	itett	mi
 800a660:	085b      	lsrmi	r3, r3, #1
 800a662:	089b      	lsrpl	r3, r3, #2
 800a664:	2001      	movmi	r0, #1
 800a666:	6013      	strmi	r3, [r2, #0]
 800a668:	bf5c      	itt	pl
 800a66a:	6013      	strpl	r3, [r2, #0]
 800a66c:	2002      	movpl	r0, #2
 800a66e:	4770      	bx	lr
 800a670:	b299      	uxth	r1, r3
 800a672:	b909      	cbnz	r1, 800a678 <__lo0bits+0x2a>
 800a674:	0c1b      	lsrs	r3, r3, #16
 800a676:	2010      	movs	r0, #16
 800a678:	b2d9      	uxtb	r1, r3
 800a67a:	b909      	cbnz	r1, 800a680 <__lo0bits+0x32>
 800a67c:	3008      	adds	r0, #8
 800a67e:	0a1b      	lsrs	r3, r3, #8
 800a680:	0719      	lsls	r1, r3, #28
 800a682:	bf04      	itt	eq
 800a684:	091b      	lsreq	r3, r3, #4
 800a686:	3004      	addeq	r0, #4
 800a688:	0799      	lsls	r1, r3, #30
 800a68a:	bf04      	itt	eq
 800a68c:	089b      	lsreq	r3, r3, #2
 800a68e:	3002      	addeq	r0, #2
 800a690:	07d9      	lsls	r1, r3, #31
 800a692:	d403      	bmi.n	800a69c <__lo0bits+0x4e>
 800a694:	085b      	lsrs	r3, r3, #1
 800a696:	f100 0001 	add.w	r0, r0, #1
 800a69a:	d003      	beq.n	800a6a4 <__lo0bits+0x56>
 800a69c:	6013      	str	r3, [r2, #0]
 800a69e:	4770      	bx	lr
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	4770      	bx	lr
 800a6a4:	2020      	movs	r0, #32
 800a6a6:	4770      	bx	lr

0800a6a8 <__i2b>:
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	f7ff ff07 	bl	800a4c0 <_Balloc>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	b928      	cbnz	r0, 800a6c2 <__i2b+0x1a>
 800a6b6:	4b05      	ldr	r3, [pc, #20]	@ (800a6cc <__i2b+0x24>)
 800a6b8:	4805      	ldr	r0, [pc, #20]	@ (800a6d0 <__i2b+0x28>)
 800a6ba:	f240 1145 	movw	r1, #325	@ 0x145
 800a6be:	f000 fc39 	bl	800af34 <__assert_func>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	6144      	str	r4, [r0, #20]
 800a6c6:	6103      	str	r3, [r0, #16]
 800a6c8:	bd10      	pop	{r4, pc}
 800a6ca:	bf00      	nop
 800a6cc:	0800b494 	.word	0x0800b494
 800a6d0:	0800b4a5 	.word	0x0800b4a5

0800a6d4 <__multiply>:
 800a6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	4617      	mov	r7, r2
 800a6da:	690a      	ldr	r2, [r1, #16]
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	bfa8      	it	ge
 800a6e2:	463b      	movge	r3, r7
 800a6e4:	4689      	mov	r9, r1
 800a6e6:	bfa4      	itt	ge
 800a6e8:	460f      	movge	r7, r1
 800a6ea:	4699      	movge	r9, r3
 800a6ec:	693d      	ldr	r5, [r7, #16]
 800a6ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	eb05 060a 	add.w	r6, r5, sl
 800a6fa:	42b3      	cmp	r3, r6
 800a6fc:	b085      	sub	sp, #20
 800a6fe:	bfb8      	it	lt
 800a700:	3101      	addlt	r1, #1
 800a702:	f7ff fedd 	bl	800a4c0 <_Balloc>
 800a706:	b930      	cbnz	r0, 800a716 <__multiply+0x42>
 800a708:	4602      	mov	r2, r0
 800a70a:	4b41      	ldr	r3, [pc, #260]	@ (800a810 <__multiply+0x13c>)
 800a70c:	4841      	ldr	r0, [pc, #260]	@ (800a814 <__multiply+0x140>)
 800a70e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a712:	f000 fc0f 	bl	800af34 <__assert_func>
 800a716:	f100 0414 	add.w	r4, r0, #20
 800a71a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a71e:	4623      	mov	r3, r4
 800a720:	2200      	movs	r2, #0
 800a722:	4573      	cmp	r3, lr
 800a724:	d320      	bcc.n	800a768 <__multiply+0x94>
 800a726:	f107 0814 	add.w	r8, r7, #20
 800a72a:	f109 0114 	add.w	r1, r9, #20
 800a72e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a732:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a736:	9302      	str	r3, [sp, #8]
 800a738:	1beb      	subs	r3, r5, r7
 800a73a:	3b15      	subs	r3, #21
 800a73c:	f023 0303 	bic.w	r3, r3, #3
 800a740:	3304      	adds	r3, #4
 800a742:	3715      	adds	r7, #21
 800a744:	42bd      	cmp	r5, r7
 800a746:	bf38      	it	cc
 800a748:	2304      	movcc	r3, #4
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	9b02      	ldr	r3, [sp, #8]
 800a74e:	9103      	str	r1, [sp, #12]
 800a750:	428b      	cmp	r3, r1
 800a752:	d80c      	bhi.n	800a76e <__multiply+0x9a>
 800a754:	2e00      	cmp	r6, #0
 800a756:	dd03      	ble.n	800a760 <__multiply+0x8c>
 800a758:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d055      	beq.n	800a80c <__multiply+0x138>
 800a760:	6106      	str	r6, [r0, #16]
 800a762:	b005      	add	sp, #20
 800a764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a768:	f843 2b04 	str.w	r2, [r3], #4
 800a76c:	e7d9      	b.n	800a722 <__multiply+0x4e>
 800a76e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a772:	f1ba 0f00 	cmp.w	sl, #0
 800a776:	d01f      	beq.n	800a7b8 <__multiply+0xe4>
 800a778:	46c4      	mov	ip, r8
 800a77a:	46a1      	mov	r9, r4
 800a77c:	2700      	movs	r7, #0
 800a77e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a782:	f8d9 3000 	ldr.w	r3, [r9]
 800a786:	fa1f fb82 	uxth.w	fp, r2
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a790:	443b      	add	r3, r7
 800a792:	f8d9 7000 	ldr.w	r7, [r9]
 800a796:	0c12      	lsrs	r2, r2, #16
 800a798:	0c3f      	lsrs	r7, r7, #16
 800a79a:	fb0a 7202 	mla	r2, sl, r2, r7
 800a79e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7a8:	4565      	cmp	r5, ip
 800a7aa:	f849 3b04 	str.w	r3, [r9], #4
 800a7ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a7b2:	d8e4      	bhi.n	800a77e <__multiply+0xaa>
 800a7b4:	9b01      	ldr	r3, [sp, #4]
 800a7b6:	50e7      	str	r7, [r4, r3]
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a7be:	3104      	adds	r1, #4
 800a7c0:	f1b9 0f00 	cmp.w	r9, #0
 800a7c4:	d020      	beq.n	800a808 <__multiply+0x134>
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	4647      	mov	r7, r8
 800a7ca:	46a4      	mov	ip, r4
 800a7cc:	f04f 0a00 	mov.w	sl, #0
 800a7d0:	f8b7 b000 	ldrh.w	fp, [r7]
 800a7d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a7d8:	fb09 220b 	mla	r2, r9, fp, r2
 800a7dc:	4452      	add	r2, sl
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7e4:	f84c 3b04 	str.w	r3, [ip], #4
 800a7e8:	f857 3b04 	ldr.w	r3, [r7], #4
 800a7ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7f0:	f8bc 3000 	ldrh.w	r3, [ip]
 800a7f4:	fb09 330a 	mla	r3, r9, sl, r3
 800a7f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a7fc:	42bd      	cmp	r5, r7
 800a7fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a802:	d8e5      	bhi.n	800a7d0 <__multiply+0xfc>
 800a804:	9a01      	ldr	r2, [sp, #4]
 800a806:	50a3      	str	r3, [r4, r2]
 800a808:	3404      	adds	r4, #4
 800a80a:	e79f      	b.n	800a74c <__multiply+0x78>
 800a80c:	3e01      	subs	r6, #1
 800a80e:	e7a1      	b.n	800a754 <__multiply+0x80>
 800a810:	0800b494 	.word	0x0800b494
 800a814:	0800b4a5 	.word	0x0800b4a5

0800a818 <__pow5mult>:
 800a818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a81c:	4615      	mov	r5, r2
 800a81e:	f012 0203 	ands.w	r2, r2, #3
 800a822:	4607      	mov	r7, r0
 800a824:	460e      	mov	r6, r1
 800a826:	d007      	beq.n	800a838 <__pow5mult+0x20>
 800a828:	4c25      	ldr	r4, [pc, #148]	@ (800a8c0 <__pow5mult+0xa8>)
 800a82a:	3a01      	subs	r2, #1
 800a82c:	2300      	movs	r3, #0
 800a82e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a832:	f7ff fea7 	bl	800a584 <__multadd>
 800a836:	4606      	mov	r6, r0
 800a838:	10ad      	asrs	r5, r5, #2
 800a83a:	d03d      	beq.n	800a8b8 <__pow5mult+0xa0>
 800a83c:	69fc      	ldr	r4, [r7, #28]
 800a83e:	b97c      	cbnz	r4, 800a860 <__pow5mult+0x48>
 800a840:	2010      	movs	r0, #16
 800a842:	f7ff fcdb 	bl	800a1fc <malloc>
 800a846:	4602      	mov	r2, r0
 800a848:	61f8      	str	r0, [r7, #28]
 800a84a:	b928      	cbnz	r0, 800a858 <__pow5mult+0x40>
 800a84c:	4b1d      	ldr	r3, [pc, #116]	@ (800a8c4 <__pow5mult+0xac>)
 800a84e:	481e      	ldr	r0, [pc, #120]	@ (800a8c8 <__pow5mult+0xb0>)
 800a850:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a854:	f000 fb6e 	bl	800af34 <__assert_func>
 800a858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a85c:	6004      	str	r4, [r0, #0]
 800a85e:	60c4      	str	r4, [r0, #12]
 800a860:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a868:	b94c      	cbnz	r4, 800a87e <__pow5mult+0x66>
 800a86a:	f240 2171 	movw	r1, #625	@ 0x271
 800a86e:	4638      	mov	r0, r7
 800a870:	f7ff ff1a 	bl	800a6a8 <__i2b>
 800a874:	2300      	movs	r3, #0
 800a876:	f8c8 0008 	str.w	r0, [r8, #8]
 800a87a:	4604      	mov	r4, r0
 800a87c:	6003      	str	r3, [r0, #0]
 800a87e:	f04f 0900 	mov.w	r9, #0
 800a882:	07eb      	lsls	r3, r5, #31
 800a884:	d50a      	bpl.n	800a89c <__pow5mult+0x84>
 800a886:	4631      	mov	r1, r6
 800a888:	4622      	mov	r2, r4
 800a88a:	4638      	mov	r0, r7
 800a88c:	f7ff ff22 	bl	800a6d4 <__multiply>
 800a890:	4631      	mov	r1, r6
 800a892:	4680      	mov	r8, r0
 800a894:	4638      	mov	r0, r7
 800a896:	f7ff fe53 	bl	800a540 <_Bfree>
 800a89a:	4646      	mov	r6, r8
 800a89c:	106d      	asrs	r5, r5, #1
 800a89e:	d00b      	beq.n	800a8b8 <__pow5mult+0xa0>
 800a8a0:	6820      	ldr	r0, [r4, #0]
 800a8a2:	b938      	cbnz	r0, 800a8b4 <__pow5mult+0x9c>
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7ff ff13 	bl	800a6d4 <__multiply>
 800a8ae:	6020      	str	r0, [r4, #0]
 800a8b0:	f8c0 9000 	str.w	r9, [r0]
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	e7e4      	b.n	800a882 <__pow5mult+0x6a>
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8be:	bf00      	nop
 800a8c0:	0800b558 	.word	0x0800b558
 800a8c4:	0800b425 	.word	0x0800b425
 800a8c8:	0800b4a5 	.word	0x0800b4a5

0800a8cc <__lshift>:
 800a8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	6849      	ldr	r1, [r1, #4]
 800a8d4:	6923      	ldr	r3, [r4, #16]
 800a8d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8da:	68a3      	ldr	r3, [r4, #8]
 800a8dc:	4607      	mov	r7, r0
 800a8de:	4691      	mov	r9, r2
 800a8e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8e4:	f108 0601 	add.w	r6, r8, #1
 800a8e8:	42b3      	cmp	r3, r6
 800a8ea:	db0b      	blt.n	800a904 <__lshift+0x38>
 800a8ec:	4638      	mov	r0, r7
 800a8ee:	f7ff fde7 	bl	800a4c0 <_Balloc>
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	b948      	cbnz	r0, 800a90a <__lshift+0x3e>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	4b28      	ldr	r3, [pc, #160]	@ (800a99c <__lshift+0xd0>)
 800a8fa:	4829      	ldr	r0, [pc, #164]	@ (800a9a0 <__lshift+0xd4>)
 800a8fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a900:	f000 fb18 	bl	800af34 <__assert_func>
 800a904:	3101      	adds	r1, #1
 800a906:	005b      	lsls	r3, r3, #1
 800a908:	e7ee      	b.n	800a8e8 <__lshift+0x1c>
 800a90a:	2300      	movs	r3, #0
 800a90c:	f100 0114 	add.w	r1, r0, #20
 800a910:	f100 0210 	add.w	r2, r0, #16
 800a914:	4618      	mov	r0, r3
 800a916:	4553      	cmp	r3, sl
 800a918:	db33      	blt.n	800a982 <__lshift+0xb6>
 800a91a:	6920      	ldr	r0, [r4, #16]
 800a91c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a920:	f104 0314 	add.w	r3, r4, #20
 800a924:	f019 091f 	ands.w	r9, r9, #31
 800a928:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a92c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a930:	d02b      	beq.n	800a98a <__lshift+0xbe>
 800a932:	f1c9 0e20 	rsb	lr, r9, #32
 800a936:	468a      	mov	sl, r1
 800a938:	2200      	movs	r2, #0
 800a93a:	6818      	ldr	r0, [r3, #0]
 800a93c:	fa00 f009 	lsl.w	r0, r0, r9
 800a940:	4310      	orrs	r0, r2
 800a942:	f84a 0b04 	str.w	r0, [sl], #4
 800a946:	f853 2b04 	ldr.w	r2, [r3], #4
 800a94a:	459c      	cmp	ip, r3
 800a94c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a950:	d8f3      	bhi.n	800a93a <__lshift+0x6e>
 800a952:	ebac 0304 	sub.w	r3, ip, r4
 800a956:	3b15      	subs	r3, #21
 800a958:	f023 0303 	bic.w	r3, r3, #3
 800a95c:	3304      	adds	r3, #4
 800a95e:	f104 0015 	add.w	r0, r4, #21
 800a962:	4560      	cmp	r0, ip
 800a964:	bf88      	it	hi
 800a966:	2304      	movhi	r3, #4
 800a968:	50ca      	str	r2, [r1, r3]
 800a96a:	b10a      	cbz	r2, 800a970 <__lshift+0xa4>
 800a96c:	f108 0602 	add.w	r6, r8, #2
 800a970:	3e01      	subs	r6, #1
 800a972:	4638      	mov	r0, r7
 800a974:	612e      	str	r6, [r5, #16]
 800a976:	4621      	mov	r1, r4
 800a978:	f7ff fde2 	bl	800a540 <_Bfree>
 800a97c:	4628      	mov	r0, r5
 800a97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a982:	f842 0f04 	str.w	r0, [r2, #4]!
 800a986:	3301      	adds	r3, #1
 800a988:	e7c5      	b.n	800a916 <__lshift+0x4a>
 800a98a:	3904      	subs	r1, #4
 800a98c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a990:	f841 2f04 	str.w	r2, [r1, #4]!
 800a994:	459c      	cmp	ip, r3
 800a996:	d8f9      	bhi.n	800a98c <__lshift+0xc0>
 800a998:	e7ea      	b.n	800a970 <__lshift+0xa4>
 800a99a:	bf00      	nop
 800a99c:	0800b494 	.word	0x0800b494
 800a9a0:	0800b4a5 	.word	0x0800b4a5

0800a9a4 <__mcmp>:
 800a9a4:	690a      	ldr	r2, [r1, #16]
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	6900      	ldr	r0, [r0, #16]
 800a9aa:	1a80      	subs	r0, r0, r2
 800a9ac:	b530      	push	{r4, r5, lr}
 800a9ae:	d10e      	bne.n	800a9ce <__mcmp+0x2a>
 800a9b0:	3314      	adds	r3, #20
 800a9b2:	3114      	adds	r1, #20
 800a9b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a9b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a9bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a9c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a9c4:	4295      	cmp	r5, r2
 800a9c6:	d003      	beq.n	800a9d0 <__mcmp+0x2c>
 800a9c8:	d205      	bcs.n	800a9d6 <__mcmp+0x32>
 800a9ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9ce:	bd30      	pop	{r4, r5, pc}
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	d3f3      	bcc.n	800a9bc <__mcmp+0x18>
 800a9d4:	e7fb      	b.n	800a9ce <__mcmp+0x2a>
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	e7f9      	b.n	800a9ce <__mcmp+0x2a>
	...

0800a9dc <__mdiff>:
 800a9dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	4689      	mov	r9, r1
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4648      	mov	r0, r9
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	f7ff ffdb 	bl	800a9a4 <__mcmp>
 800a9ee:	1e05      	subs	r5, r0, #0
 800a9f0:	d112      	bne.n	800aa18 <__mdiff+0x3c>
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7ff fd63 	bl	800a4c0 <_Balloc>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	b928      	cbnz	r0, 800aa0a <__mdiff+0x2e>
 800a9fe:	4b3f      	ldr	r3, [pc, #252]	@ (800aafc <__mdiff+0x120>)
 800aa00:	f240 2137 	movw	r1, #567	@ 0x237
 800aa04:	483e      	ldr	r0, [pc, #248]	@ (800ab00 <__mdiff+0x124>)
 800aa06:	f000 fa95 	bl	800af34 <__assert_func>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa10:	4610      	mov	r0, r2
 800aa12:	b003      	add	sp, #12
 800aa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa18:	bfbc      	itt	lt
 800aa1a:	464b      	movlt	r3, r9
 800aa1c:	46a1      	movlt	r9, r4
 800aa1e:	4630      	mov	r0, r6
 800aa20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa24:	bfba      	itte	lt
 800aa26:	461c      	movlt	r4, r3
 800aa28:	2501      	movlt	r5, #1
 800aa2a:	2500      	movge	r5, #0
 800aa2c:	f7ff fd48 	bl	800a4c0 <_Balloc>
 800aa30:	4602      	mov	r2, r0
 800aa32:	b918      	cbnz	r0, 800aa3c <__mdiff+0x60>
 800aa34:	4b31      	ldr	r3, [pc, #196]	@ (800aafc <__mdiff+0x120>)
 800aa36:	f240 2145 	movw	r1, #581	@ 0x245
 800aa3a:	e7e3      	b.n	800aa04 <__mdiff+0x28>
 800aa3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa40:	6926      	ldr	r6, [r4, #16]
 800aa42:	60c5      	str	r5, [r0, #12]
 800aa44:	f109 0310 	add.w	r3, r9, #16
 800aa48:	f109 0514 	add.w	r5, r9, #20
 800aa4c:	f104 0e14 	add.w	lr, r4, #20
 800aa50:	f100 0b14 	add.w	fp, r0, #20
 800aa54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa5c:	9301      	str	r3, [sp, #4]
 800aa5e:	46d9      	mov	r9, fp
 800aa60:	f04f 0c00 	mov.w	ip, #0
 800aa64:	9b01      	ldr	r3, [sp, #4]
 800aa66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	fa1f f38a 	uxth.w	r3, sl
 800aa74:	4619      	mov	r1, r3
 800aa76:	b283      	uxth	r3, r0
 800aa78:	1acb      	subs	r3, r1, r3
 800aa7a:	0c00      	lsrs	r0, r0, #16
 800aa7c:	4463      	add	r3, ip
 800aa7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa8c:	4576      	cmp	r6, lr
 800aa8e:	f849 3b04 	str.w	r3, [r9], #4
 800aa92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa96:	d8e5      	bhi.n	800aa64 <__mdiff+0x88>
 800aa98:	1b33      	subs	r3, r6, r4
 800aa9a:	3b15      	subs	r3, #21
 800aa9c:	f023 0303 	bic.w	r3, r3, #3
 800aaa0:	3415      	adds	r4, #21
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	42a6      	cmp	r6, r4
 800aaa6:	bf38      	it	cc
 800aaa8:	2304      	movcc	r3, #4
 800aaaa:	441d      	add	r5, r3
 800aaac:	445b      	add	r3, fp
 800aaae:	461e      	mov	r6, r3
 800aab0:	462c      	mov	r4, r5
 800aab2:	4544      	cmp	r4, r8
 800aab4:	d30e      	bcc.n	800aad4 <__mdiff+0xf8>
 800aab6:	f108 0103 	add.w	r1, r8, #3
 800aaba:	1b49      	subs	r1, r1, r5
 800aabc:	f021 0103 	bic.w	r1, r1, #3
 800aac0:	3d03      	subs	r5, #3
 800aac2:	45a8      	cmp	r8, r5
 800aac4:	bf38      	it	cc
 800aac6:	2100      	movcc	r1, #0
 800aac8:	440b      	add	r3, r1
 800aaca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aace:	b191      	cbz	r1, 800aaf6 <__mdiff+0x11a>
 800aad0:	6117      	str	r7, [r2, #16]
 800aad2:	e79d      	b.n	800aa10 <__mdiff+0x34>
 800aad4:	f854 1b04 	ldr.w	r1, [r4], #4
 800aad8:	46e6      	mov	lr, ip
 800aada:	0c08      	lsrs	r0, r1, #16
 800aadc:	fa1c fc81 	uxtah	ip, ip, r1
 800aae0:	4471      	add	r1, lr
 800aae2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aae6:	b289      	uxth	r1, r1
 800aae8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aaec:	f846 1b04 	str.w	r1, [r6], #4
 800aaf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aaf4:	e7dd      	b.n	800aab2 <__mdiff+0xd6>
 800aaf6:	3f01      	subs	r7, #1
 800aaf8:	e7e7      	b.n	800aaca <__mdiff+0xee>
 800aafa:	bf00      	nop
 800aafc:	0800b494 	.word	0x0800b494
 800ab00:	0800b4a5 	.word	0x0800b4a5

0800ab04 <__d2b>:
 800ab04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab08:	460f      	mov	r7, r1
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	ec59 8b10 	vmov	r8, r9, d0
 800ab10:	4616      	mov	r6, r2
 800ab12:	f7ff fcd5 	bl	800a4c0 <_Balloc>
 800ab16:	4604      	mov	r4, r0
 800ab18:	b930      	cbnz	r0, 800ab28 <__d2b+0x24>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	4b23      	ldr	r3, [pc, #140]	@ (800abac <__d2b+0xa8>)
 800ab1e:	4824      	ldr	r0, [pc, #144]	@ (800abb0 <__d2b+0xac>)
 800ab20:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab24:	f000 fa06 	bl	800af34 <__assert_func>
 800ab28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab30:	b10d      	cbz	r5, 800ab36 <__d2b+0x32>
 800ab32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	f1b8 0300 	subs.w	r3, r8, #0
 800ab3c:	d023      	beq.n	800ab86 <__d2b+0x82>
 800ab3e:	4668      	mov	r0, sp
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	f7ff fd84 	bl	800a64e <__lo0bits>
 800ab46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab4a:	b1d0      	cbz	r0, 800ab82 <__d2b+0x7e>
 800ab4c:	f1c0 0320 	rsb	r3, r0, #32
 800ab50:	fa02 f303 	lsl.w	r3, r2, r3
 800ab54:	430b      	orrs	r3, r1
 800ab56:	40c2      	lsrs	r2, r0
 800ab58:	6163      	str	r3, [r4, #20]
 800ab5a:	9201      	str	r2, [sp, #4]
 800ab5c:	9b01      	ldr	r3, [sp, #4]
 800ab5e:	61a3      	str	r3, [r4, #24]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bf0c      	ite	eq
 800ab64:	2201      	moveq	r2, #1
 800ab66:	2202      	movne	r2, #2
 800ab68:	6122      	str	r2, [r4, #16]
 800ab6a:	b1a5      	cbz	r5, 800ab96 <__d2b+0x92>
 800ab6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab70:	4405      	add	r5, r0
 800ab72:	603d      	str	r5, [r7, #0]
 800ab74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab78:	6030      	str	r0, [r6, #0]
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	b003      	add	sp, #12
 800ab7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab82:	6161      	str	r1, [r4, #20]
 800ab84:	e7ea      	b.n	800ab5c <__d2b+0x58>
 800ab86:	a801      	add	r0, sp, #4
 800ab88:	f7ff fd61 	bl	800a64e <__lo0bits>
 800ab8c:	9b01      	ldr	r3, [sp, #4]
 800ab8e:	6163      	str	r3, [r4, #20]
 800ab90:	3020      	adds	r0, #32
 800ab92:	2201      	movs	r2, #1
 800ab94:	e7e8      	b.n	800ab68 <__d2b+0x64>
 800ab96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab9e:	6038      	str	r0, [r7, #0]
 800aba0:	6918      	ldr	r0, [r3, #16]
 800aba2:	f7ff fd35 	bl	800a610 <__hi0bits>
 800aba6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abaa:	e7e5      	b.n	800ab78 <__d2b+0x74>
 800abac:	0800b494 	.word	0x0800b494
 800abb0:	0800b4a5 	.word	0x0800b4a5

0800abb4 <__sread>:
 800abb4:	b510      	push	{r4, lr}
 800abb6:	460c      	mov	r4, r1
 800abb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abbc:	f000 f956 	bl	800ae6c <_read_r>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	bfab      	itete	ge
 800abc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800abc6:	89a3      	ldrhlt	r3, [r4, #12]
 800abc8:	181b      	addge	r3, r3, r0
 800abca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800abce:	bfac      	ite	ge
 800abd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800abd2:	81a3      	strhlt	r3, [r4, #12]
 800abd4:	bd10      	pop	{r4, pc}

0800abd6 <__swrite>:
 800abd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abda:	461f      	mov	r7, r3
 800abdc:	898b      	ldrh	r3, [r1, #12]
 800abde:	05db      	lsls	r3, r3, #23
 800abe0:	4605      	mov	r5, r0
 800abe2:	460c      	mov	r4, r1
 800abe4:	4616      	mov	r6, r2
 800abe6:	d505      	bpl.n	800abf4 <__swrite+0x1e>
 800abe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abec:	2302      	movs	r3, #2
 800abee:	2200      	movs	r2, #0
 800abf0:	f000 f92a 	bl	800ae48 <_lseek_r>
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abfe:	81a3      	strh	r3, [r4, #12]
 800ac00:	4632      	mov	r2, r6
 800ac02:	463b      	mov	r3, r7
 800ac04:	4628      	mov	r0, r5
 800ac06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0a:	f000 b951 	b.w	800aeb0 <_write_r>

0800ac0e <__sseek>:
 800ac0e:	b510      	push	{r4, lr}
 800ac10:	460c      	mov	r4, r1
 800ac12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac16:	f000 f917 	bl	800ae48 <_lseek_r>
 800ac1a:	1c43      	adds	r3, r0, #1
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	bf15      	itete	ne
 800ac20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac2a:	81a3      	strheq	r3, [r4, #12]
 800ac2c:	bf18      	it	ne
 800ac2e:	81a3      	strhne	r3, [r4, #12]
 800ac30:	bd10      	pop	{r4, pc}

0800ac32 <__sclose>:
 800ac32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac36:	f000 b94d 	b.w	800aed4 <_close_r>

0800ac3a <__swbuf_r>:
 800ac3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3c:	460e      	mov	r6, r1
 800ac3e:	4614      	mov	r4, r2
 800ac40:	4605      	mov	r5, r0
 800ac42:	b118      	cbz	r0, 800ac4c <__swbuf_r+0x12>
 800ac44:	6a03      	ldr	r3, [r0, #32]
 800ac46:	b90b      	cbnz	r3, 800ac4c <__swbuf_r+0x12>
 800ac48:	f7fe fc24 	bl	8009494 <__sinit>
 800ac4c:	69a3      	ldr	r3, [r4, #24]
 800ac4e:	60a3      	str	r3, [r4, #8]
 800ac50:	89a3      	ldrh	r3, [r4, #12]
 800ac52:	071a      	lsls	r2, r3, #28
 800ac54:	d501      	bpl.n	800ac5a <__swbuf_r+0x20>
 800ac56:	6923      	ldr	r3, [r4, #16]
 800ac58:	b943      	cbnz	r3, 800ac6c <__swbuf_r+0x32>
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	f000 f82b 	bl	800acb8 <__swsetup_r>
 800ac62:	b118      	cbz	r0, 800ac6c <__swbuf_r+0x32>
 800ac64:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ac68:	4638      	mov	r0, r7
 800ac6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac6c:	6823      	ldr	r3, [r4, #0]
 800ac6e:	6922      	ldr	r2, [r4, #16]
 800ac70:	1a98      	subs	r0, r3, r2
 800ac72:	6963      	ldr	r3, [r4, #20]
 800ac74:	b2f6      	uxtb	r6, r6
 800ac76:	4283      	cmp	r3, r0
 800ac78:	4637      	mov	r7, r6
 800ac7a:	dc05      	bgt.n	800ac88 <__swbuf_r+0x4e>
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f7ff fbea 	bl	800a458 <_fflush_r>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d1ed      	bne.n	800ac64 <__swbuf_r+0x2a>
 800ac88:	68a3      	ldr	r3, [r4, #8]
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	60a3      	str	r3, [r4, #8]
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	6022      	str	r2, [r4, #0]
 800ac94:	701e      	strb	r6, [r3, #0]
 800ac96:	6962      	ldr	r2, [r4, #20]
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d004      	beq.n	800aca8 <__swbuf_r+0x6e>
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	07db      	lsls	r3, r3, #31
 800aca2:	d5e1      	bpl.n	800ac68 <__swbuf_r+0x2e>
 800aca4:	2e0a      	cmp	r6, #10
 800aca6:	d1df      	bne.n	800ac68 <__swbuf_r+0x2e>
 800aca8:	4621      	mov	r1, r4
 800acaa:	4628      	mov	r0, r5
 800acac:	f7ff fbd4 	bl	800a458 <_fflush_r>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d0d9      	beq.n	800ac68 <__swbuf_r+0x2e>
 800acb4:	e7d6      	b.n	800ac64 <__swbuf_r+0x2a>
	...

0800acb8 <__swsetup_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4b29      	ldr	r3, [pc, #164]	@ (800ad60 <__swsetup_r+0xa8>)
 800acbc:	4605      	mov	r5, r0
 800acbe:	6818      	ldr	r0, [r3, #0]
 800acc0:	460c      	mov	r4, r1
 800acc2:	b118      	cbz	r0, 800accc <__swsetup_r+0x14>
 800acc4:	6a03      	ldr	r3, [r0, #32]
 800acc6:	b90b      	cbnz	r3, 800accc <__swsetup_r+0x14>
 800acc8:	f7fe fbe4 	bl	8009494 <__sinit>
 800accc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd0:	0719      	lsls	r1, r3, #28
 800acd2:	d422      	bmi.n	800ad1a <__swsetup_r+0x62>
 800acd4:	06da      	lsls	r2, r3, #27
 800acd6:	d407      	bmi.n	800ace8 <__swsetup_r+0x30>
 800acd8:	2209      	movs	r2, #9
 800acda:	602a      	str	r2, [r5, #0]
 800acdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ace6:	e033      	b.n	800ad50 <__swsetup_r+0x98>
 800ace8:	0758      	lsls	r0, r3, #29
 800acea:	d512      	bpl.n	800ad12 <__swsetup_r+0x5a>
 800acec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acee:	b141      	cbz	r1, 800ad02 <__swsetup_r+0x4a>
 800acf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acf4:	4299      	cmp	r1, r3
 800acf6:	d002      	beq.n	800acfe <__swsetup_r+0x46>
 800acf8:	4628      	mov	r0, r5
 800acfa:	f000 f94d 	bl	800af98 <_free_r>
 800acfe:	2300      	movs	r3, #0
 800ad00:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	6063      	str	r3, [r4, #4]
 800ad0e:	6923      	ldr	r3, [r4, #16]
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	f043 0308 	orr.w	r3, r3, #8
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	6923      	ldr	r3, [r4, #16]
 800ad1c:	b94b      	cbnz	r3, 800ad32 <__swsetup_r+0x7a>
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad28:	d003      	beq.n	800ad32 <__swsetup_r+0x7a>
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	f000 f83f 	bl	800adb0 <__smakebuf_r>
 800ad32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad36:	f013 0201 	ands.w	r2, r3, #1
 800ad3a:	d00a      	beq.n	800ad52 <__swsetup_r+0x9a>
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	60a2      	str	r2, [r4, #8]
 800ad40:	6962      	ldr	r2, [r4, #20]
 800ad42:	4252      	negs	r2, r2
 800ad44:	61a2      	str	r2, [r4, #24]
 800ad46:	6922      	ldr	r2, [r4, #16]
 800ad48:	b942      	cbnz	r2, 800ad5c <__swsetup_r+0xa4>
 800ad4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad4e:	d1c5      	bne.n	800acdc <__swsetup_r+0x24>
 800ad50:	bd38      	pop	{r3, r4, r5, pc}
 800ad52:	0799      	lsls	r1, r3, #30
 800ad54:	bf58      	it	pl
 800ad56:	6962      	ldrpl	r2, [r4, #20]
 800ad58:	60a2      	str	r2, [r4, #8]
 800ad5a:	e7f4      	b.n	800ad46 <__swsetup_r+0x8e>
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	e7f7      	b.n	800ad50 <__swsetup_r+0x98>
 800ad60:	2400001c 	.word	0x2400001c

0800ad64 <__swhatbuf_r>:
 800ad64:	b570      	push	{r4, r5, r6, lr}
 800ad66:	460c      	mov	r4, r1
 800ad68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad6c:	2900      	cmp	r1, #0
 800ad6e:	b096      	sub	sp, #88	@ 0x58
 800ad70:	4615      	mov	r5, r2
 800ad72:	461e      	mov	r6, r3
 800ad74:	da0d      	bge.n	800ad92 <__swhatbuf_r+0x2e>
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad7c:	f04f 0100 	mov.w	r1, #0
 800ad80:	bf14      	ite	ne
 800ad82:	2340      	movne	r3, #64	@ 0x40
 800ad84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad88:	2000      	movs	r0, #0
 800ad8a:	6031      	str	r1, [r6, #0]
 800ad8c:	602b      	str	r3, [r5, #0]
 800ad8e:	b016      	add	sp, #88	@ 0x58
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	466a      	mov	r2, sp
 800ad94:	f000 f8ae 	bl	800aef4 <_fstat_r>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	dbec      	blt.n	800ad76 <__swhatbuf_r+0x12>
 800ad9c:	9901      	ldr	r1, [sp, #4]
 800ad9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ada2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ada6:	4259      	negs	r1, r3
 800ada8:	4159      	adcs	r1, r3
 800adaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adae:	e7eb      	b.n	800ad88 <__swhatbuf_r+0x24>

0800adb0 <__smakebuf_r>:
 800adb0:	898b      	ldrh	r3, [r1, #12]
 800adb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adb4:	079d      	lsls	r5, r3, #30
 800adb6:	4606      	mov	r6, r0
 800adb8:	460c      	mov	r4, r1
 800adba:	d507      	bpl.n	800adcc <__smakebuf_r+0x1c>
 800adbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	6123      	str	r3, [r4, #16]
 800adc4:	2301      	movs	r3, #1
 800adc6:	6163      	str	r3, [r4, #20]
 800adc8:	b003      	add	sp, #12
 800adca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adcc:	ab01      	add	r3, sp, #4
 800adce:	466a      	mov	r2, sp
 800add0:	f7ff ffc8 	bl	800ad64 <__swhatbuf_r>
 800add4:	9f00      	ldr	r7, [sp, #0]
 800add6:	4605      	mov	r5, r0
 800add8:	4639      	mov	r1, r7
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff fa38 	bl	800a250 <_malloc_r>
 800ade0:	b948      	cbnz	r0, 800adf6 <__smakebuf_r+0x46>
 800ade2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade6:	059a      	lsls	r2, r3, #22
 800ade8:	d4ee      	bmi.n	800adc8 <__smakebuf_r+0x18>
 800adea:	f023 0303 	bic.w	r3, r3, #3
 800adee:	f043 0302 	orr.w	r3, r3, #2
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	e7e2      	b.n	800adbc <__smakebuf_r+0xc>
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	6020      	str	r0, [r4, #0]
 800adfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adfe:	81a3      	strh	r3, [r4, #12]
 800ae00:	9b01      	ldr	r3, [sp, #4]
 800ae02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae06:	b15b      	cbz	r3, 800ae20 <__smakebuf_r+0x70>
 800ae08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f000 f80b 	bl	800ae28 <_isatty_r>
 800ae12:	b128      	cbz	r0, 800ae20 <__smakebuf_r+0x70>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f023 0303 	bic.w	r3, r3, #3
 800ae1a:	f043 0301 	orr.w	r3, r3, #1
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	431d      	orrs	r5, r3
 800ae24:	81a5      	strh	r5, [r4, #12]
 800ae26:	e7cf      	b.n	800adc8 <__smakebuf_r+0x18>

0800ae28 <_isatty_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d06      	ldr	r5, [pc, #24]	@ (800ae44 <_isatty_r+0x1c>)
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	4604      	mov	r4, r0
 800ae30:	4608      	mov	r0, r1
 800ae32:	602b      	str	r3, [r5, #0]
 800ae34:	f7f5 ff98 	bl	8000d68 <_isatty>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d102      	bne.n	800ae42 <_isatty_r+0x1a>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	b103      	cbz	r3, 800ae42 <_isatty_r+0x1a>
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	240006fc 	.word	0x240006fc

0800ae48 <_lseek_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4d07      	ldr	r5, [pc, #28]	@ (800ae68 <_lseek_r+0x20>)
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	4608      	mov	r0, r1
 800ae50:	4611      	mov	r1, r2
 800ae52:	2200      	movs	r2, #0
 800ae54:	602a      	str	r2, [r5, #0]
 800ae56:	461a      	mov	r2, r3
 800ae58:	f7f5 ff91 	bl	8000d7e <_lseek>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_lseek_r+0x1e>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_lseek_r+0x1e>
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	240006fc 	.word	0x240006fc

0800ae6c <_read_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4d07      	ldr	r5, [pc, #28]	@ (800ae8c <_read_r+0x20>)
 800ae70:	4604      	mov	r4, r0
 800ae72:	4608      	mov	r0, r1
 800ae74:	4611      	mov	r1, r2
 800ae76:	2200      	movs	r2, #0
 800ae78:	602a      	str	r2, [r5, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f7f5 ff3b 	bl	8000cf6 <_read>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_read_r+0x1e>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_read_r+0x1e>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	240006fc 	.word	0x240006fc

0800ae90 <_sbrk_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d06      	ldr	r5, [pc, #24]	@ (800aeac <_sbrk_r+0x1c>)
 800ae94:	2300      	movs	r3, #0
 800ae96:	4604      	mov	r4, r0
 800ae98:	4608      	mov	r0, r1
 800ae9a:	602b      	str	r3, [r5, #0]
 800ae9c:	f7f5 ff7c 	bl	8000d98 <_sbrk>
 800aea0:	1c43      	adds	r3, r0, #1
 800aea2:	d102      	bne.n	800aeaa <_sbrk_r+0x1a>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	b103      	cbz	r3, 800aeaa <_sbrk_r+0x1a>
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	bd38      	pop	{r3, r4, r5, pc}
 800aeac:	240006fc 	.word	0x240006fc

0800aeb0 <_write_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4d07      	ldr	r5, [pc, #28]	@ (800aed0 <_write_r+0x20>)
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	4608      	mov	r0, r1
 800aeb8:	4611      	mov	r1, r2
 800aeba:	2200      	movs	r2, #0
 800aebc:	602a      	str	r2, [r5, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	f7f5 fe7a 	bl	8000bb8 <_write>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_write_r+0x1e>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_write_r+0x1e>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	240006fc 	.word	0x240006fc

0800aed4 <_close_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d06      	ldr	r5, [pc, #24]	@ (800aef0 <_close_r+0x1c>)
 800aed8:	2300      	movs	r3, #0
 800aeda:	4604      	mov	r4, r0
 800aedc:	4608      	mov	r0, r1
 800aede:	602b      	str	r3, [r5, #0]
 800aee0:	f7f5 ff26 	bl	8000d30 <_close>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_close_r+0x1a>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_close_r+0x1a>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	240006fc 	.word	0x240006fc

0800aef4 <_fstat_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	@ (800af14 <_fstat_r+0x20>)
 800aef8:	2300      	movs	r3, #0
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	4611      	mov	r1, r2
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	f7f5 ff21 	bl	8000d48 <_fstat>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d102      	bne.n	800af10 <_fstat_r+0x1c>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	b103      	cbz	r3, 800af10 <_fstat_r+0x1c>
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	bd38      	pop	{r3, r4, r5, pc}
 800af12:	bf00      	nop
 800af14:	240006fc 	.word	0x240006fc

0800af18 <memcpy>:
 800af18:	440a      	add	r2, r1
 800af1a:	4291      	cmp	r1, r2
 800af1c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800af20:	d100      	bne.n	800af24 <memcpy+0xc>
 800af22:	4770      	bx	lr
 800af24:	b510      	push	{r4, lr}
 800af26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af2e:	4291      	cmp	r1, r2
 800af30:	d1f9      	bne.n	800af26 <memcpy+0xe>
 800af32:	bd10      	pop	{r4, pc}

0800af34 <__assert_func>:
 800af34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af36:	4614      	mov	r4, r2
 800af38:	461a      	mov	r2, r3
 800af3a:	4b09      	ldr	r3, [pc, #36]	@ (800af60 <__assert_func+0x2c>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4605      	mov	r5, r0
 800af40:	68d8      	ldr	r0, [r3, #12]
 800af42:	b14c      	cbz	r4, 800af58 <__assert_func+0x24>
 800af44:	4b07      	ldr	r3, [pc, #28]	@ (800af64 <__assert_func+0x30>)
 800af46:	9100      	str	r1, [sp, #0]
 800af48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af4c:	4906      	ldr	r1, [pc, #24]	@ (800af68 <__assert_func+0x34>)
 800af4e:	462b      	mov	r3, r5
 800af50:	f000 f87e 	bl	800b050 <fiprintf>
 800af54:	f000 f89b 	bl	800b08e <abort>
 800af58:	4b04      	ldr	r3, [pc, #16]	@ (800af6c <__assert_func+0x38>)
 800af5a:	461c      	mov	r4, r3
 800af5c:	e7f3      	b.n	800af46 <__assert_func+0x12>
 800af5e:	bf00      	nop
 800af60:	2400001c 	.word	0x2400001c
 800af64:	0800b508 	.word	0x0800b508
 800af68:	0800b515 	.word	0x0800b515
 800af6c:	0800b543 	.word	0x0800b543

0800af70 <_calloc_r>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	fba1 5402 	umull	r5, r4, r1, r2
 800af76:	b934      	cbnz	r4, 800af86 <_calloc_r+0x16>
 800af78:	4629      	mov	r1, r5
 800af7a:	f7ff f969 	bl	800a250 <_malloc_r>
 800af7e:	4606      	mov	r6, r0
 800af80:	b928      	cbnz	r0, 800af8e <_calloc_r+0x1e>
 800af82:	4630      	mov	r0, r6
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	220c      	movs	r2, #12
 800af88:	6002      	str	r2, [r0, #0]
 800af8a:	2600      	movs	r6, #0
 800af8c:	e7f9      	b.n	800af82 <_calloc_r+0x12>
 800af8e:	462a      	mov	r2, r5
 800af90:	4621      	mov	r1, r4
 800af92:	f7fe fb13 	bl	80095bc <memset>
 800af96:	e7f4      	b.n	800af82 <_calloc_r+0x12>

0800af98 <_free_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4605      	mov	r5, r0
 800af9c:	2900      	cmp	r1, #0
 800af9e:	d041      	beq.n	800b024 <_free_r+0x8c>
 800afa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afa4:	1f0c      	subs	r4, r1, #4
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bfb8      	it	lt
 800afaa:	18e4      	addlt	r4, r4, r3
 800afac:	f7ff fa7c 	bl	800a4a8 <__malloc_lock>
 800afb0:	4a1d      	ldr	r2, [pc, #116]	@ (800b028 <_free_r+0x90>)
 800afb2:	6813      	ldr	r3, [r2, #0]
 800afb4:	b933      	cbnz	r3, 800afc4 <_free_r+0x2c>
 800afb6:	6063      	str	r3, [r4, #4]
 800afb8:	6014      	str	r4, [r2, #0]
 800afba:	4628      	mov	r0, r5
 800afbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afc0:	f7ff ba78 	b.w	800a4b4 <__malloc_unlock>
 800afc4:	42a3      	cmp	r3, r4
 800afc6:	d908      	bls.n	800afda <_free_r+0x42>
 800afc8:	6820      	ldr	r0, [r4, #0]
 800afca:	1821      	adds	r1, r4, r0
 800afcc:	428b      	cmp	r3, r1
 800afce:	bf01      	itttt	eq
 800afd0:	6819      	ldreq	r1, [r3, #0]
 800afd2:	685b      	ldreq	r3, [r3, #4]
 800afd4:	1809      	addeq	r1, r1, r0
 800afd6:	6021      	streq	r1, [r4, #0]
 800afd8:	e7ed      	b.n	800afb6 <_free_r+0x1e>
 800afda:	461a      	mov	r2, r3
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	b10b      	cbz	r3, 800afe4 <_free_r+0x4c>
 800afe0:	42a3      	cmp	r3, r4
 800afe2:	d9fa      	bls.n	800afda <_free_r+0x42>
 800afe4:	6811      	ldr	r1, [r2, #0]
 800afe6:	1850      	adds	r0, r2, r1
 800afe8:	42a0      	cmp	r0, r4
 800afea:	d10b      	bne.n	800b004 <_free_r+0x6c>
 800afec:	6820      	ldr	r0, [r4, #0]
 800afee:	4401      	add	r1, r0
 800aff0:	1850      	adds	r0, r2, r1
 800aff2:	4283      	cmp	r3, r0
 800aff4:	6011      	str	r1, [r2, #0]
 800aff6:	d1e0      	bne.n	800afba <_free_r+0x22>
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	6053      	str	r3, [r2, #4]
 800affe:	4408      	add	r0, r1
 800b000:	6010      	str	r0, [r2, #0]
 800b002:	e7da      	b.n	800afba <_free_r+0x22>
 800b004:	d902      	bls.n	800b00c <_free_r+0x74>
 800b006:	230c      	movs	r3, #12
 800b008:	602b      	str	r3, [r5, #0]
 800b00a:	e7d6      	b.n	800afba <_free_r+0x22>
 800b00c:	6820      	ldr	r0, [r4, #0]
 800b00e:	1821      	adds	r1, r4, r0
 800b010:	428b      	cmp	r3, r1
 800b012:	bf04      	itt	eq
 800b014:	6819      	ldreq	r1, [r3, #0]
 800b016:	685b      	ldreq	r3, [r3, #4]
 800b018:	6063      	str	r3, [r4, #4]
 800b01a:	bf04      	itt	eq
 800b01c:	1809      	addeq	r1, r1, r0
 800b01e:	6021      	streq	r1, [r4, #0]
 800b020:	6054      	str	r4, [r2, #4]
 800b022:	e7ca      	b.n	800afba <_free_r+0x22>
 800b024:	bd38      	pop	{r3, r4, r5, pc}
 800b026:	bf00      	nop
 800b028:	240006f8 	.word	0x240006f8

0800b02c <__ascii_mbtowc>:
 800b02c:	b082      	sub	sp, #8
 800b02e:	b901      	cbnz	r1, 800b032 <__ascii_mbtowc+0x6>
 800b030:	a901      	add	r1, sp, #4
 800b032:	b142      	cbz	r2, 800b046 <__ascii_mbtowc+0x1a>
 800b034:	b14b      	cbz	r3, 800b04a <__ascii_mbtowc+0x1e>
 800b036:	7813      	ldrb	r3, [r2, #0]
 800b038:	600b      	str	r3, [r1, #0]
 800b03a:	7812      	ldrb	r2, [r2, #0]
 800b03c:	1e10      	subs	r0, r2, #0
 800b03e:	bf18      	it	ne
 800b040:	2001      	movne	r0, #1
 800b042:	b002      	add	sp, #8
 800b044:	4770      	bx	lr
 800b046:	4610      	mov	r0, r2
 800b048:	e7fb      	b.n	800b042 <__ascii_mbtowc+0x16>
 800b04a:	f06f 0001 	mvn.w	r0, #1
 800b04e:	e7f8      	b.n	800b042 <__ascii_mbtowc+0x16>

0800b050 <fiprintf>:
 800b050:	b40e      	push	{r1, r2, r3}
 800b052:	b503      	push	{r0, r1, lr}
 800b054:	4601      	mov	r1, r0
 800b056:	ab03      	add	r3, sp, #12
 800b058:	4805      	ldr	r0, [pc, #20]	@ (800b070 <fiprintf+0x20>)
 800b05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b05e:	6800      	ldr	r0, [r0, #0]
 800b060:	9301      	str	r3, [sp, #4]
 800b062:	f000 f845 	bl	800b0f0 <_vfiprintf_r>
 800b066:	b002      	add	sp, #8
 800b068:	f85d eb04 	ldr.w	lr, [sp], #4
 800b06c:	b003      	add	sp, #12
 800b06e:	4770      	bx	lr
 800b070:	2400001c 	.word	0x2400001c

0800b074 <__ascii_wctomb>:
 800b074:	4603      	mov	r3, r0
 800b076:	4608      	mov	r0, r1
 800b078:	b141      	cbz	r1, 800b08c <__ascii_wctomb+0x18>
 800b07a:	2aff      	cmp	r2, #255	@ 0xff
 800b07c:	d904      	bls.n	800b088 <__ascii_wctomb+0x14>
 800b07e:	228a      	movs	r2, #138	@ 0x8a
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b086:	4770      	bx	lr
 800b088:	700a      	strb	r2, [r1, #0]
 800b08a:	2001      	movs	r0, #1
 800b08c:	4770      	bx	lr

0800b08e <abort>:
 800b08e:	b508      	push	{r3, lr}
 800b090:	2006      	movs	r0, #6
 800b092:	f000 f96d 	bl	800b370 <raise>
 800b096:	2001      	movs	r0, #1
 800b098:	f7f5 fe22 	bl	8000ce0 <_exit>

0800b09c <__sfputc_r>:
 800b09c:	6893      	ldr	r3, [r2, #8]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	b410      	push	{r4}
 800b0a4:	6093      	str	r3, [r2, #8]
 800b0a6:	da08      	bge.n	800b0ba <__sfputc_r+0x1e>
 800b0a8:	6994      	ldr	r4, [r2, #24]
 800b0aa:	42a3      	cmp	r3, r4
 800b0ac:	db01      	blt.n	800b0b2 <__sfputc_r+0x16>
 800b0ae:	290a      	cmp	r1, #10
 800b0b0:	d103      	bne.n	800b0ba <__sfputc_r+0x1e>
 800b0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b6:	f7ff bdc0 	b.w	800ac3a <__swbuf_r>
 800b0ba:	6813      	ldr	r3, [r2, #0]
 800b0bc:	1c58      	adds	r0, r3, #1
 800b0be:	6010      	str	r0, [r2, #0]
 800b0c0:	7019      	strb	r1, [r3, #0]
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <__sfputs_r>:
 800b0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	460f      	mov	r7, r1
 800b0d0:	4614      	mov	r4, r2
 800b0d2:	18d5      	adds	r5, r2, r3
 800b0d4:	42ac      	cmp	r4, r5
 800b0d6:	d101      	bne.n	800b0dc <__sfputs_r+0x12>
 800b0d8:	2000      	movs	r0, #0
 800b0da:	e007      	b.n	800b0ec <__sfputs_r+0x22>
 800b0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e0:	463a      	mov	r2, r7
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7ff ffda 	bl	800b09c <__sfputc_r>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	d1f3      	bne.n	800b0d4 <__sfputs_r+0xa>
 800b0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0f0 <_vfiprintf_r>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	b09d      	sub	sp, #116	@ 0x74
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	4698      	mov	r8, r3
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	b118      	cbz	r0, 800b108 <_vfiprintf_r+0x18>
 800b100:	6a03      	ldr	r3, [r0, #32]
 800b102:	b90b      	cbnz	r3, 800b108 <_vfiprintf_r+0x18>
 800b104:	f7fe f9c6 	bl	8009494 <__sinit>
 800b108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b10a:	07d9      	lsls	r1, r3, #31
 800b10c:	d405      	bmi.n	800b11a <_vfiprintf_r+0x2a>
 800b10e:	89ab      	ldrh	r3, [r5, #12]
 800b110:	059a      	lsls	r2, r3, #22
 800b112:	d402      	bmi.n	800b11a <_vfiprintf_r+0x2a>
 800b114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b116:	f7fe fa84 	bl	8009622 <__retarget_lock_acquire_recursive>
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	071b      	lsls	r3, r3, #28
 800b11e:	d501      	bpl.n	800b124 <_vfiprintf_r+0x34>
 800b120:	692b      	ldr	r3, [r5, #16]
 800b122:	b99b      	cbnz	r3, 800b14c <_vfiprintf_r+0x5c>
 800b124:	4629      	mov	r1, r5
 800b126:	4630      	mov	r0, r6
 800b128:	f7ff fdc6 	bl	800acb8 <__swsetup_r>
 800b12c:	b170      	cbz	r0, 800b14c <_vfiprintf_r+0x5c>
 800b12e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b130:	07dc      	lsls	r4, r3, #31
 800b132:	d504      	bpl.n	800b13e <_vfiprintf_r+0x4e>
 800b134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b138:	b01d      	add	sp, #116	@ 0x74
 800b13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13e:	89ab      	ldrh	r3, [r5, #12]
 800b140:	0598      	lsls	r0, r3, #22
 800b142:	d4f7      	bmi.n	800b134 <_vfiprintf_r+0x44>
 800b144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b146:	f7fe fa6d 	bl	8009624 <__retarget_lock_release_recursive>
 800b14a:	e7f3      	b.n	800b134 <_vfiprintf_r+0x44>
 800b14c:	2300      	movs	r3, #0
 800b14e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b150:	2320      	movs	r3, #32
 800b152:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b156:	f8cd 800c 	str.w	r8, [sp, #12]
 800b15a:	2330      	movs	r3, #48	@ 0x30
 800b15c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b30c <_vfiprintf_r+0x21c>
 800b160:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b164:	f04f 0901 	mov.w	r9, #1
 800b168:	4623      	mov	r3, r4
 800b16a:	469a      	mov	sl, r3
 800b16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b170:	b10a      	cbz	r2, 800b176 <_vfiprintf_r+0x86>
 800b172:	2a25      	cmp	r2, #37	@ 0x25
 800b174:	d1f9      	bne.n	800b16a <_vfiprintf_r+0x7a>
 800b176:	ebba 0b04 	subs.w	fp, sl, r4
 800b17a:	d00b      	beq.n	800b194 <_vfiprintf_r+0xa4>
 800b17c:	465b      	mov	r3, fp
 800b17e:	4622      	mov	r2, r4
 800b180:	4629      	mov	r1, r5
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ffa1 	bl	800b0ca <__sfputs_r>
 800b188:	3001      	adds	r0, #1
 800b18a:	f000 80a7 	beq.w	800b2dc <_vfiprintf_r+0x1ec>
 800b18e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b190:	445a      	add	r2, fp
 800b192:	9209      	str	r2, [sp, #36]	@ 0x24
 800b194:	f89a 3000 	ldrb.w	r3, [sl]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 809f 	beq.w	800b2dc <_vfiprintf_r+0x1ec>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1a8:	f10a 0a01 	add.w	sl, sl, #1
 800b1ac:	9304      	str	r3, [sp, #16]
 800b1ae:	9307      	str	r3, [sp, #28]
 800b1b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1b6:	4654      	mov	r4, sl
 800b1b8:	2205      	movs	r2, #5
 800b1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1be:	4853      	ldr	r0, [pc, #332]	@ (800b30c <_vfiprintf_r+0x21c>)
 800b1c0:	f7f5 f88e 	bl	80002e0 <memchr>
 800b1c4:	9a04      	ldr	r2, [sp, #16]
 800b1c6:	b9d8      	cbnz	r0, 800b200 <_vfiprintf_r+0x110>
 800b1c8:	06d1      	lsls	r1, r2, #27
 800b1ca:	bf44      	itt	mi
 800b1cc:	2320      	movmi	r3, #32
 800b1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1d2:	0713      	lsls	r3, r2, #28
 800b1d4:	bf44      	itt	mi
 800b1d6:	232b      	movmi	r3, #43	@ 0x2b
 800b1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b1e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1e2:	d015      	beq.n	800b210 <_vfiprintf_r+0x120>
 800b1e4:	9a07      	ldr	r2, [sp, #28]
 800b1e6:	4654      	mov	r4, sl
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	f04f 0c0a 	mov.w	ip, #10
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1f4:	3b30      	subs	r3, #48	@ 0x30
 800b1f6:	2b09      	cmp	r3, #9
 800b1f8:	d94b      	bls.n	800b292 <_vfiprintf_r+0x1a2>
 800b1fa:	b1b0      	cbz	r0, 800b22a <_vfiprintf_r+0x13a>
 800b1fc:	9207      	str	r2, [sp, #28]
 800b1fe:	e014      	b.n	800b22a <_vfiprintf_r+0x13a>
 800b200:	eba0 0308 	sub.w	r3, r0, r8
 800b204:	fa09 f303 	lsl.w	r3, r9, r3
 800b208:	4313      	orrs	r3, r2
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	46a2      	mov	sl, r4
 800b20e:	e7d2      	b.n	800b1b6 <_vfiprintf_r+0xc6>
 800b210:	9b03      	ldr	r3, [sp, #12]
 800b212:	1d19      	adds	r1, r3, #4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	9103      	str	r1, [sp, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfbb      	ittet	lt
 800b21c:	425b      	neglt	r3, r3
 800b21e:	f042 0202 	orrlt.w	r2, r2, #2
 800b222:	9307      	strge	r3, [sp, #28]
 800b224:	9307      	strlt	r3, [sp, #28]
 800b226:	bfb8      	it	lt
 800b228:	9204      	strlt	r2, [sp, #16]
 800b22a:	7823      	ldrb	r3, [r4, #0]
 800b22c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b22e:	d10a      	bne.n	800b246 <_vfiprintf_r+0x156>
 800b230:	7863      	ldrb	r3, [r4, #1]
 800b232:	2b2a      	cmp	r3, #42	@ 0x2a
 800b234:	d132      	bne.n	800b29c <_vfiprintf_r+0x1ac>
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	1d1a      	adds	r2, r3, #4
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	9203      	str	r2, [sp, #12]
 800b23e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b242:	3402      	adds	r4, #2
 800b244:	9305      	str	r3, [sp, #20]
 800b246:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b31c <_vfiprintf_r+0x22c>
 800b24a:	7821      	ldrb	r1, [r4, #0]
 800b24c:	2203      	movs	r2, #3
 800b24e:	4650      	mov	r0, sl
 800b250:	f7f5 f846 	bl	80002e0 <memchr>
 800b254:	b138      	cbz	r0, 800b266 <_vfiprintf_r+0x176>
 800b256:	9b04      	ldr	r3, [sp, #16]
 800b258:	eba0 000a 	sub.w	r0, r0, sl
 800b25c:	2240      	movs	r2, #64	@ 0x40
 800b25e:	4082      	lsls	r2, r0
 800b260:	4313      	orrs	r3, r2
 800b262:	3401      	adds	r4, #1
 800b264:	9304      	str	r3, [sp, #16]
 800b266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26a:	4829      	ldr	r0, [pc, #164]	@ (800b310 <_vfiprintf_r+0x220>)
 800b26c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b270:	2206      	movs	r2, #6
 800b272:	f7f5 f835 	bl	80002e0 <memchr>
 800b276:	2800      	cmp	r0, #0
 800b278:	d03f      	beq.n	800b2fa <_vfiprintf_r+0x20a>
 800b27a:	4b26      	ldr	r3, [pc, #152]	@ (800b314 <_vfiprintf_r+0x224>)
 800b27c:	bb1b      	cbnz	r3, 800b2c6 <_vfiprintf_r+0x1d6>
 800b27e:	9b03      	ldr	r3, [sp, #12]
 800b280:	3307      	adds	r3, #7
 800b282:	f023 0307 	bic.w	r3, r3, #7
 800b286:	3308      	adds	r3, #8
 800b288:	9303      	str	r3, [sp, #12]
 800b28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b28c:	443b      	add	r3, r7
 800b28e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b290:	e76a      	b.n	800b168 <_vfiprintf_r+0x78>
 800b292:	fb0c 3202 	mla	r2, ip, r2, r3
 800b296:	460c      	mov	r4, r1
 800b298:	2001      	movs	r0, #1
 800b29a:	e7a8      	b.n	800b1ee <_vfiprintf_r+0xfe>
 800b29c:	2300      	movs	r3, #0
 800b29e:	3401      	adds	r4, #1
 800b2a0:	9305      	str	r3, [sp, #20]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	f04f 0c0a 	mov.w	ip, #10
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2ae:	3a30      	subs	r2, #48	@ 0x30
 800b2b0:	2a09      	cmp	r2, #9
 800b2b2:	d903      	bls.n	800b2bc <_vfiprintf_r+0x1cc>
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d0c6      	beq.n	800b246 <_vfiprintf_r+0x156>
 800b2b8:	9105      	str	r1, [sp, #20]
 800b2ba:	e7c4      	b.n	800b246 <_vfiprintf_r+0x156>
 800b2bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e7f0      	b.n	800b2a8 <_vfiprintf_r+0x1b8>
 800b2c6:	ab03      	add	r3, sp, #12
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	462a      	mov	r2, r5
 800b2cc:	4b12      	ldr	r3, [pc, #72]	@ (800b318 <_vfiprintf_r+0x228>)
 800b2ce:	a904      	add	r1, sp, #16
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f7fd fcad 	bl	8008c30 <_printf_float>
 800b2d6:	4607      	mov	r7, r0
 800b2d8:	1c78      	adds	r0, r7, #1
 800b2da:	d1d6      	bne.n	800b28a <_vfiprintf_r+0x19a>
 800b2dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2de:	07d9      	lsls	r1, r3, #31
 800b2e0:	d405      	bmi.n	800b2ee <_vfiprintf_r+0x1fe>
 800b2e2:	89ab      	ldrh	r3, [r5, #12]
 800b2e4:	059a      	lsls	r2, r3, #22
 800b2e6:	d402      	bmi.n	800b2ee <_vfiprintf_r+0x1fe>
 800b2e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2ea:	f7fe f99b 	bl	8009624 <__retarget_lock_release_recursive>
 800b2ee:	89ab      	ldrh	r3, [r5, #12]
 800b2f0:	065b      	lsls	r3, r3, #25
 800b2f2:	f53f af1f 	bmi.w	800b134 <_vfiprintf_r+0x44>
 800b2f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2f8:	e71e      	b.n	800b138 <_vfiprintf_r+0x48>
 800b2fa:	ab03      	add	r3, sp, #12
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	462a      	mov	r2, r5
 800b300:	4b05      	ldr	r3, [pc, #20]	@ (800b318 <_vfiprintf_r+0x228>)
 800b302:	a904      	add	r1, sp, #16
 800b304:	4630      	mov	r0, r6
 800b306:	f7fd ff1b 	bl	8009140 <_printf_i>
 800b30a:	e7e4      	b.n	800b2d6 <_vfiprintf_r+0x1e6>
 800b30c:	0800b544 	.word	0x0800b544
 800b310:	0800b54e 	.word	0x0800b54e
 800b314:	08008c31 	.word	0x08008c31
 800b318:	0800b0cb 	.word	0x0800b0cb
 800b31c:	0800b54a 	.word	0x0800b54a

0800b320 <_raise_r>:
 800b320:	291f      	cmp	r1, #31
 800b322:	b538      	push	{r3, r4, r5, lr}
 800b324:	4605      	mov	r5, r0
 800b326:	460c      	mov	r4, r1
 800b328:	d904      	bls.n	800b334 <_raise_r+0x14>
 800b32a:	2316      	movs	r3, #22
 800b32c:	6003      	str	r3, [r0, #0]
 800b32e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b336:	b112      	cbz	r2, 800b33e <_raise_r+0x1e>
 800b338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b33c:	b94b      	cbnz	r3, 800b352 <_raise_r+0x32>
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 f830 	bl	800b3a4 <_getpid_r>
 800b344:	4622      	mov	r2, r4
 800b346:	4601      	mov	r1, r0
 800b348:	4628      	mov	r0, r5
 800b34a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b34e:	f000 b817 	b.w	800b380 <_kill_r>
 800b352:	2b01      	cmp	r3, #1
 800b354:	d00a      	beq.n	800b36c <_raise_r+0x4c>
 800b356:	1c59      	adds	r1, r3, #1
 800b358:	d103      	bne.n	800b362 <_raise_r+0x42>
 800b35a:	2316      	movs	r3, #22
 800b35c:	6003      	str	r3, [r0, #0]
 800b35e:	2001      	movs	r0, #1
 800b360:	e7e7      	b.n	800b332 <_raise_r+0x12>
 800b362:	2100      	movs	r1, #0
 800b364:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b368:	4620      	mov	r0, r4
 800b36a:	4798      	blx	r3
 800b36c:	2000      	movs	r0, #0
 800b36e:	e7e0      	b.n	800b332 <_raise_r+0x12>

0800b370 <raise>:
 800b370:	4b02      	ldr	r3, [pc, #8]	@ (800b37c <raise+0xc>)
 800b372:	4601      	mov	r1, r0
 800b374:	6818      	ldr	r0, [r3, #0]
 800b376:	f7ff bfd3 	b.w	800b320 <_raise_r>
 800b37a:	bf00      	nop
 800b37c:	2400001c 	.word	0x2400001c

0800b380 <_kill_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4d07      	ldr	r5, [pc, #28]	@ (800b3a0 <_kill_r+0x20>)
 800b384:	2300      	movs	r3, #0
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	4611      	mov	r1, r2
 800b38c:	602b      	str	r3, [r5, #0]
 800b38e:	f7f5 fc97 	bl	8000cc0 <_kill>
 800b392:	1c43      	adds	r3, r0, #1
 800b394:	d102      	bne.n	800b39c <_kill_r+0x1c>
 800b396:	682b      	ldr	r3, [r5, #0]
 800b398:	b103      	cbz	r3, 800b39c <_kill_r+0x1c>
 800b39a:	6023      	str	r3, [r4, #0]
 800b39c:	bd38      	pop	{r3, r4, r5, pc}
 800b39e:	bf00      	nop
 800b3a0:	240006fc 	.word	0x240006fc

0800b3a4 <_getpid_r>:
 800b3a4:	f7f5 bc84 	b.w	8000cb0 <_getpid>

0800b3a8 <_init>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	bf00      	nop
 800b3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ae:	bc08      	pop	{r3}
 800b3b0:	469e      	mov	lr, r3
 800b3b2:	4770      	bx	lr

0800b3b4 <_fini>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	bf00      	nop
 800b3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ba:	bc08      	pop	{r3}
 800b3bc:	469e      	mov	lr, r3
 800b3be:	4770      	bx	lr
